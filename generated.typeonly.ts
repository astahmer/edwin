import type * as HttpClient from "@effect/platform/HttpClient"
import * as HttpClientError from "@effect/platform/HttpClientError"
import * as HttpClientRequest from "@effect/platform/HttpClientRequest"
import * as HttpClientResponse from "@effect/platform/HttpClientResponse"
import * as Data from "effect/Data"
import * as Effect from "effect/Effect"

export interface Root {
  readonly "current_user_url": string;
  readonly "current_user_authorizations_html_url": string;
  readonly "authorizations_url": string;
  readonly "code_search_url": string;
  readonly "commit_search_url": string;
  readonly "emails_url": string;
  readonly "emojis_url": string;
  readonly "events_url": string;
  readonly "feeds_url": string;
  readonly "followers_url": string;
  readonly "following_url": string;
  readonly "gists_url": string;
  readonly "hub_url"?: string | undefined;
  readonly "issue_search_url": string;
  readonly "issues_url": string;
  readonly "keys_url": string;
  readonly "label_search_url": string;
  readonly "notifications_url": string;
  readonly "organization_url": string;
  readonly "organization_repositories_url": string;
  readonly "organization_teams_url": string;
  readonly "public_gists_url": string;
  readonly "rate_limit_url": string;
  readonly "repository_url": string;
  readonly "repository_search_url": string;
  readonly "current_user_repositories_url": string;
  readonly "starred_url": string;
  readonly "starred_gists_url": string;
  readonly "topic_search_url"?: string | undefined;
  readonly "user_url": string;
  readonly "user_organizations_url": string;
  readonly "user_repositories_url": string;
  readonly "user_search_url": string
}

export type SecurityAdvisoriesListGlobalAdvisoriesParamsType = "reviewed" | "malware" | "unreviewed"

/**
* The package's language or package management ecosystem.
*/
export type SecurityAdvisoryEcosystems = "rubygems" | "npm" | "pip" | "maven" | "nuget" | "composer" | "go" | "rust" | "erlang" | "actions" | "pub" | "other" | "swift"

export type SecurityAdvisoriesListGlobalAdvisoriesParamsSeverity = "unknown" | "low" | "medium" | "high" | "critical"

export type SecurityAdvisoriesListGlobalAdvisoriesParamsDirection = "asc" | "desc"

export type SecurityAdvisoriesListGlobalAdvisoriesParamsSort = "updated" | "published" | "epss_percentage" | "epss_percentile"

export interface SecurityAdvisoriesListGlobalAdvisoriesParams {
  readonly "ghsa_id"?: string | undefined;
  readonly "type"?: SecurityAdvisoriesListGlobalAdvisoriesParamsType | undefined;
  readonly "cve_id"?: string | undefined;
  readonly "ecosystem"?: SecurityAdvisoryEcosystems | undefined;
  readonly "severity"?: SecurityAdvisoriesListGlobalAdvisoriesParamsSeverity | undefined;
  readonly "cwes"?: string | ReadonlyArray<string> | undefined;
  readonly "is_withdrawn"?: boolean | undefined;
  readonly "affects"?: string | ReadonlyArray<string> | undefined;
  readonly "published"?: string | undefined;
  readonly "updated"?: string | undefined;
  readonly "modified"?: string | undefined;
  readonly "epss_percentage"?: string | undefined;
  readonly "epss_percentile"?: string | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined;
  readonly "direction"?: SecurityAdvisoriesListGlobalAdvisoriesParamsDirection | undefined;
  readonly "per_page"?: number | undefined;
  readonly "sort"?: SecurityAdvisoriesListGlobalAdvisoriesParamsSort | undefined
}

/**
* The type of advisory.
*/
export type GlobalAdvisoryType = "reviewed" | "unreviewed" | "malware"

/**
* The severity of the advisory.
*/
export type GlobalAdvisorySeverity = "critical" | "high" | "medium" | "low" | "unknown"

/**
* A vulnerability describing the product and its affected versions within a GitHub Security Advisory.
*/
export interface Vulnerability {
  /**
* The name of the package affected by the vulnerability.
*/
readonly "package": {
  readonly "ecosystem": SecurityAdvisoryEcosystems;
  /**
* The unique package name within its ecosystem.
*/
readonly "name": string | null
} | null;
  /**
* The range of the package versions affected by the vulnerability.
*/
readonly "vulnerable_version_range": string | null;
  /**
* The package version that resolves the vulnerability.
*/
readonly "first_patched_version": string | null;
  /**
* The functions in the package that are affected by the vulnerability.
*/
readonly "vulnerable_functions": ReadonlyArray<string> | null
}

export interface CvssSeverities {
  readonly "cvss_v3"?: {
  /**
* The CVSS 3 vector string.
*/
readonly "vector_string": string | null;
  /**
* The CVSS 3 score.
*/
readonly "score": number | null
} | null | undefined;
  readonly "cvss_v4"?: {
  /**
* The CVSS 4 vector string.
*/
readonly "vector_string": string | null;
  /**
* The CVSS 4 score.
*/
readonly "score": number | null
} | null | undefined
}

/**
* The EPSS scores as calculated by the [Exploit Prediction Scoring System](https://www.first.org/epss).
*/
export interface SecurityAdvisoryEpss {
  readonly "percentage"?: number | undefined;
  readonly "percentile"?: number | undefined
}

/**
* A GitHub user.
*/
export interface SimpleUser {
  readonly "name"?: string | null | undefined;
  readonly "email"?: string | null | undefined;
  readonly "login": string;
  readonly "id": number;
  readonly "node_id": string;
  readonly "avatar_url": string;
  readonly "gravatar_id": string | null;
  readonly "url": string;
  readonly "html_url": string;
  readonly "followers_url": string;
  readonly "following_url": string;
  readonly "gists_url": string;
  readonly "starred_url": string;
  readonly "subscriptions_url": string;
  readonly "organizations_url": string;
  readonly "repos_url": string;
  readonly "events_url": string;
  readonly "received_events_url": string;
  readonly "type": string;
  readonly "site_admin": boolean;
  readonly "starred_at"?: string | undefined;
  readonly "user_view_type"?: string | undefined
}

/**
* The type of credit the user is receiving.
*/
export type SecurityAdvisoryCreditTypes = "analyst" | "finder" | "reporter" | "coordinator" | "remediation_developer" | "remediation_reviewer" | "remediation_verifier" | "tool" | "sponsor" | "other"

/**
* A GitHub Security Advisory.
*/
export interface GlobalAdvisory {
  /**
* The GitHub Security Advisory ID.
*/
readonly "ghsa_id": string;
  /**
* The Common Vulnerabilities and Exposures (CVE) ID.
*/
readonly "cve_id": string | null;
  /**
* The API URL for the advisory.
*/
readonly "url": string;
  /**
* The URL for the advisory.
*/
readonly "html_url": string;
  /**
* The API URL for the repository advisory.
*/
readonly "repository_advisory_url": string | null;
  /**
* A short summary of the advisory.
*/
readonly "summary": string;
  /**
* A detailed description of what the advisory entails.
*/
readonly "description": string | null;
  /**
* The type of advisory.
*/
readonly "type": GlobalAdvisoryType;
  /**
* The severity of the advisory.
*/
readonly "severity": GlobalAdvisorySeverity;
  /**
* The URL of the advisory's source code.
*/
readonly "source_code_location": string | null;
  readonly "identifiers": ReadonlyArray<{
  /**
* The type of identifier.
*/
readonly "type": "CVE" | "GHSA";
  /**
* The identifier value.
*/
readonly "value": string
}> | null;
  readonly "references": ReadonlyArray<string> | null;
  /**
* The date and time of when the advisory was published, in ISO 8601 format.
*/
readonly "published_at": string;
  /**
* The date and time of when the advisory was last updated, in ISO 8601 format.
*/
readonly "updated_at": string;
  /**
* The date and time of when the advisory was reviewed by GitHub, in ISO 8601 format.
*/
readonly "github_reviewed_at": string | null;
  /**
* The date and time when the advisory was published in the National Vulnerability Database, in ISO 8601 format.
* This field is only populated when the advisory is imported from the National Vulnerability Database.
*/
readonly "nvd_published_at": string | null;
  /**
* The date and time of when the advisory was withdrawn, in ISO 8601 format.
*/
readonly "withdrawn_at": string | null;
  /**
* The products and respective version ranges affected by the advisory.
*/
readonly "vulnerabilities": ReadonlyArray<Vulnerability> | null;
  readonly "cvss": {
  /**
* The CVSS vector.
*/
readonly "vector_string": string | null;
  /**
* The CVSS score.
*/
readonly "score": number | null
} | null;
  readonly "cvss_severities"?: CvssSeverities | null | undefined;
  readonly "epss"?: SecurityAdvisoryEpss | null | undefined;
  readonly "cwes": ReadonlyArray<{
  /**
* The Common Weakness Enumeration (CWE) identifier.
*/
readonly "cwe_id": string;
  /**
* The name of the CWE.
*/
readonly "name": string
}> | null;
  /**
* The users who contributed to the advisory.
*/
readonly "credits": ReadonlyArray<{
  readonly "user": SimpleUser;
  readonly "type": SecurityAdvisoryCreditTypes
}> | null
}

export type SecurityAdvisoriesListGlobalAdvisories200 = ReadonlyArray<GlobalAdvisory>

/**
* Validation Error Simple
*/
export interface ValidationErrorSimple {
  readonly "message": string;
  readonly "documentation_url": string;
  readonly "errors"?: ReadonlyArray<string> | undefined
}

/**
* Basic Error
*/
export interface BasicError {
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined;
  readonly "url"?: string | undefined;
  readonly "status"?: string | undefined
}

export interface SecurityAdvisoriesGetGlobalAdvisoryParams {
  
}

/**
* An enterprise on GitHub.
*/
export interface Enterprise {
  /**
* A short description of the enterprise.
*/
readonly "description"?: string | null | undefined;
  readonly "html_url": string;
  /**
* The enterprise's website URL.
*/
readonly "website_url"?: string | null | undefined;
  /**
* Unique identifier of the enterprise
*/
readonly "id": number;
  readonly "node_id": string;
  /**
* The name of the enterprise.
*/
readonly "name": string;
  /**
* The slug url identifier for the enterprise.
*/
readonly "slug": string;
  readonly "created_at": string | null;
  readonly "updated_at": string | null;
  readonly "avatar_url": string
}

/**
* GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
*/
export interface Integration {
  /**
* Unique identifier of the GitHub app
*/
readonly "id": number;
  /**
* The slug name of the GitHub app
*/
readonly "slug"?: string | undefined;
  readonly "node_id": string;
  readonly "client_id"?: string | undefined;
  readonly "owner": SimpleUser | Enterprise;
  /**
* The name of the GitHub app
*/
readonly "name": string;
  readonly "description": string | null;
  readonly "external_url": string;
  readonly "html_url": string;
  readonly "created_at": string;
  readonly "updated_at": string;
  /**
* The set of permissions for the GitHub app
*/
readonly "permissions": {
  readonly "issues"?: string | undefined;
  readonly "checks"?: string | undefined;
  readonly "metadata"?: string | undefined;
  readonly "contents"?: string | undefined;
  readonly "deployments"?: string | undefined
};
  /**
* The list of events for the GitHub app. Note that the `installation_target`, `security_advisory`, and `meta` events are not included because they are global events and not specific to an installation.
*/
readonly "events": ReadonlyArray<string>;
  /**
* The number of installations associated with the GitHub app. Only returned when the integration is requesting details about itself.
*/
readonly "installations_count"?: number | undefined
}

export type AppsCreateFromManifest201 = AppsCreateFromManifest201

/**
* The URL to which the payloads will be delivered.
*/
export type WebhookConfigUrl = string

/**
* The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
*/
export type WebhookConfigContentType = string

/**
* If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
*/
export type WebhookConfigSecret = string

export type WebhookConfigInsecureSsl = string | number

/**
* Configuration object of the webhook
*/
export interface WebhookConfig {
  readonly "url"?: WebhookConfigUrl | undefined;
  readonly "content_type"?: WebhookConfigContentType | undefined;
  readonly "secret"?: WebhookConfigSecret | undefined;
  readonly "insecure_ssl"?: WebhookConfigInsecureSsl | undefined
}

export interface AppsUpdateWebhookConfigForAppRequest {
  readonly "url"?: WebhookConfigUrl | undefined;
  readonly "content_type"?: WebhookConfigContentType | undefined;
  readonly "secret"?: WebhookConfigSecret | undefined;
  readonly "insecure_ssl"?: WebhookConfigInsecureSsl | undefined
}

export interface AppsListWebhookDeliveriesParams {
  readonly "per_page"?: number | undefined;
  readonly "cursor"?: string | undefined
}

/**
* Delivery made by a webhook, without request and response information.
*/
export interface HookDeliveryItem {
  /**
* Unique identifier of the webhook delivery.
*/
readonly "id": number;
  /**
* Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
*/
readonly "guid": string;
  /**
* Time when the webhook delivery occurred.
*/
readonly "delivered_at": string;
  /**
* Whether the webhook delivery is a redelivery.
*/
readonly "redelivery": boolean;
  /**
* Time spent delivering.
*/
readonly "duration": number;
  /**
* Describes the response returned after attempting the delivery.
*/
readonly "status": string;
  /**
* Status code received when delivery was made.
*/
readonly "status_code": number;
  /**
* The event that triggered the delivery.
*/
readonly "event": string;
  /**
* The type of activity for the event that triggered the delivery.
*/
readonly "action": string | null;
  /**
* The id of the GitHub App installation associated with this event.
*/
readonly "installation_id": number | null;
  /**
* The id of the repository associated with this event.
*/
readonly "repository_id": number | null;
  /**
* Time when the webhook delivery was throttled.
*/
readonly "throttled_at"?: string | null | undefined
}

export type AppsListWebhookDeliveries200 = ReadonlyArray<HookDeliveryItem>

/**
* Validation Error
*/
export interface ValidationError {
  readonly "message": string;
  readonly "documentation_url": string;
  readonly "errors"?: ReadonlyArray<{
  readonly "resource"?: string | undefined;
  readonly "field"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "code": string;
  readonly "index"?: number | undefined;
  readonly "value"?: string | number | ReadonlyArray<string> | undefined
}> | undefined
}

export interface AppsGetWebhookDeliveryParams {
  
}

/**
* Delivery made by a webhook.
*/
export interface HookDelivery {
  /**
* Unique identifier of the delivery.
*/
readonly "id": number;
  /**
* Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
*/
readonly "guid": string;
  /**
* Time when the delivery was delivered.
*/
readonly "delivered_at": string;
  /**
* Whether the delivery is a redelivery.
*/
readonly "redelivery": boolean;
  /**
* Time spent delivering.
*/
readonly "duration": number;
  /**
* Description of the status of the attempted delivery
*/
readonly "status": string;
  /**
* Status code received when delivery was made.
*/
readonly "status_code": number;
  /**
* The event that triggered the delivery.
*/
readonly "event": string;
  /**
* The type of activity for the event that triggered the delivery.
*/
readonly "action": string | null;
  /**
* The id of the GitHub App installation associated with this event.
*/
readonly "installation_id": number | null;
  /**
* The id of the repository associated with this event.
*/
readonly "repository_id": number | null;
  /**
* Time when the webhook delivery was throttled.
*/
readonly "throttled_at"?: string | null | undefined;
  /**
* The URL target of the delivery.
*/
readonly "url"?: string | undefined;
  readonly "request": {
  /**
* The request headers sent with the webhook delivery.
*/
readonly "headers": Record<string, unknown> | null;
  /**
* The webhook payload.
*/
readonly "payload": Record<string, unknown> | null
};
  readonly "response": {
  /**
* The response headers received when the delivery was made.
*/
readonly "headers": Record<string, unknown> | null;
  /**
* The response payload received.
*/
readonly "payload": string | null
}
}

export interface AppsRedeliverWebhookDeliveryParams {
  
}

export type AppsRedeliverWebhookDelivery202 = Record<string, unknown>

export interface AppsListInstallationRequestsForAuthenticatedAppParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Request to install an integration on a target
*/
export interface IntegrationInstallationRequest {
  /**
* Unique identifier of the request installation.
*/
readonly "id": number;
  readonly "node_id"?: string | undefined;
  readonly "account": SimpleUser | Enterprise;
  readonly "requester": SimpleUser;
  readonly "created_at": string
}

export type AppsListInstallationRequestsForAuthenticatedApp200 = ReadonlyArray<IntegrationInstallationRequest>

export interface AppsListInstallationsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined;
  readonly "since"?: string | undefined;
  readonly "outdated"?: string | undefined
}

/**
* Describe whether all repositories have been selected or there's a selection involved
*/
export type InstallationRepositorySelection = "all" | "selected"

/**
* The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
*/
export type AppPermissionsActions = "read" | "write"

/**
* The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
*/
export type AppPermissionsAdministration = "read" | "write"

/**
* The level of permission to grant the access token for checks on code.
*/
export type AppPermissionsChecks = "read" | "write"

/**
* The level of permission to grant the access token to create, edit, delete, and list Codespaces.
*/
export type AppPermissionsCodespaces = "read" | "write"

/**
* The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
*/
export type AppPermissionsContents = "read" | "write"

/**
* The level of permission to grant the access token to manage Dependabot secrets.
*/
export type AppPermissionsDependabotSecrets = "read" | "write"

/**
* The level of permission to grant the access token for deployments and deployment statuses.
*/
export type AppPermissionsDeployments = "read" | "write"

/**
* The level of permission to grant the access token for managing repository environments.
*/
export type AppPermissionsEnvironments = "read" | "write"

/**
* The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
*/
export type AppPermissionsIssues = "read" | "write"

/**
* The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
*/
export type AppPermissionsMetadata = "read" | "write"

/**
* The level of permission to grant the access token for packages published to GitHub Packages.
*/
export type AppPermissionsPackages = "read" | "write"

/**
* The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
*/
export type AppPermissionsPages = "read" | "write"

/**
* The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
*/
export type AppPermissionsPullRequests = "read" | "write"

/**
* The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.
*/
export type AppPermissionsRepositoryCustomProperties = "read" | "write"

/**
* The level of permission to grant the access token to manage the post-receive hooks for a repository.
*/
export type AppPermissionsRepositoryHooks = "read" | "write"

/**
* The level of permission to grant the access token to manage repository projects, columns, and cards.
*/
export type AppPermissionsRepositoryProjects = "read" | "write" | "admin"

/**
* The level of permission to grant the access token to view and manage secret scanning alerts.
*/
export type AppPermissionsSecretScanningAlerts = "read" | "write"

/**
* The level of permission to grant the access token to manage repository secrets.
*/
export type AppPermissionsSecrets = "read" | "write"

/**
* The level of permission to grant the access token to view and manage security events like code scanning alerts.
*/
export type AppPermissionsSecurityEvents = "read" | "write"

/**
* The level of permission to grant the access token to manage just a single file.
*/
export type AppPermissionsSingleFile = "read" | "write"

/**
* The level of permission to grant the access token for commit statuses.
*/
export type AppPermissionsStatuses = "read" | "write"

/**
* The level of permission to grant the access token to manage Dependabot alerts.
*/
export type AppPermissionsVulnerabilityAlerts = "read" | "write"

/**
* The level of permission to grant the access token to update GitHub Actions workflow files.
*/
export type AppPermissionsWorkflows = "write"

/**
* The level of permission to grant the access token for organization teams and members.
*/
export type AppPermissionsMembers = "read" | "write"

/**
* The level of permission to grant the access token to manage access to an organization.
*/
export type AppPermissionsOrganizationAdministration = "read" | "write"

/**
* The level of permission to grant the access token for custom repository roles management.
*/
export type AppPermissionsOrganizationCustomRoles = "read" | "write"

/**
* The level of permission to grant the access token for custom organization roles management.
*/
export type AppPermissionsOrganizationCustomOrgRoles = "read" | "write"

/**
* The level of permission to grant the access token for custom property management.
*/
export type AppPermissionsOrganizationCustomProperties = "read" | "write" | "admin"

/**
* The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.
*/
export type AppPermissionsOrganizationCopilotSeatManagement = "write"

/**
* The level of permission to grant the access token to view and manage announcement banners for an organization.
*/
export type AppPermissionsOrganizationAnnouncementBanners = "read" | "write"

/**
* The level of permission to grant the access token to view events triggered by an activity in an organization.
*/
export type AppPermissionsOrganizationEvents = "read"

/**
* The level of permission to grant the access token to manage the post-receive hooks for an organization.
*/
export type AppPermissionsOrganizationHooks = "read" | "write"

/**
* The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
*/
export type AppPermissionsOrganizationPersonalAccessTokens = "read" | "write"

/**
* The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
*/
export type AppPermissionsOrganizationPersonalAccessTokenRequests = "read" | "write"

/**
* The level of permission to grant the access token for viewing an organization's plan.
*/
export type AppPermissionsOrganizationPlan = "read"

/**
* The level of permission to grant the access token to manage organization projects and projects public preview (where available).
*/
export type AppPermissionsOrganizationProjects = "read" | "write" | "admin"

/**
* The level of permission to grant the access token for organization packages published to GitHub Packages.
*/
export type AppPermissionsOrganizationPackages = "read" | "write"

/**
* The level of permission to grant the access token to manage organization secrets.
*/
export type AppPermissionsOrganizationSecrets = "read" | "write"

/**
* The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
*/
export type AppPermissionsOrganizationSelfHostedRunners = "read" | "write"

/**
* The level of permission to grant the access token to view and manage users blocked by the organization.
*/
export type AppPermissionsOrganizationUserBlocking = "read" | "write"

/**
* The level of permission to grant the access token to manage team discussions and related comments.
*/
export type AppPermissionsTeamDiscussions = "read" | "write"

/**
* The level of permission to grant the access token to manage the email addresses belonging to a user.
*/
export type AppPermissionsEmailAddresses = "read" | "write"

/**
* The level of permission to grant the access token to manage the followers belonging to a user.
*/
export type AppPermissionsFollowers = "read" | "write"

/**
* The level of permission to grant the access token to manage git SSH keys.
*/
export type AppPermissionsGitSshKeys = "read" | "write"

/**
* The level of permission to grant the access token to view and manage GPG keys belonging to a user.
*/
export type AppPermissionsGpgKeys = "read" | "write"

/**
* The level of permission to grant the access token to view and manage interaction limits on a repository.
*/
export type AppPermissionsInteractionLimits = "read" | "write"

/**
* The level of permission to grant the access token to manage the profile settings belonging to a user.
*/
export type AppPermissionsProfile = "write"

/**
* The level of permission to grant the access token to list and manage repositories a user is starring.
*/
export type AppPermissionsStarring = "read" | "write"

/**
* The permissions granted to the user access token.
*/
export interface AppPermissions {
  /**
* The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
*/
readonly "actions"?: AppPermissionsActions | undefined;
  /**
* The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
*/
readonly "administration"?: AppPermissionsAdministration | undefined;
  /**
* The level of permission to grant the access token for checks on code.
*/
readonly "checks"?: AppPermissionsChecks | undefined;
  /**
* The level of permission to grant the access token to create, edit, delete, and list Codespaces.
*/
readonly "codespaces"?: AppPermissionsCodespaces | undefined;
  /**
* The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
*/
readonly "contents"?: AppPermissionsContents | undefined;
  /**
* The level of permission to grant the access token to manage Dependabot secrets.
*/
readonly "dependabot_secrets"?: AppPermissionsDependabotSecrets | undefined;
  /**
* The level of permission to grant the access token for deployments and deployment statuses.
*/
readonly "deployments"?: AppPermissionsDeployments | undefined;
  /**
* The level of permission to grant the access token for managing repository environments.
*/
readonly "environments"?: AppPermissionsEnvironments | undefined;
  /**
* The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
*/
readonly "issues"?: AppPermissionsIssues | undefined;
  /**
* The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
*/
readonly "metadata"?: AppPermissionsMetadata | undefined;
  /**
* The level of permission to grant the access token for packages published to GitHub Packages.
*/
readonly "packages"?: AppPermissionsPackages | undefined;
  /**
* The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
*/
readonly "pages"?: AppPermissionsPages | undefined;
  /**
* The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
*/
readonly "pull_requests"?: AppPermissionsPullRequests | undefined;
  /**
* The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.
*/
readonly "repository_custom_properties"?: AppPermissionsRepositoryCustomProperties | undefined;
  /**
* The level of permission to grant the access token to manage the post-receive hooks for a repository.
*/
readonly "repository_hooks"?: AppPermissionsRepositoryHooks | undefined;
  /**
* The level of permission to grant the access token to manage repository projects, columns, and cards.
*/
readonly "repository_projects"?: AppPermissionsRepositoryProjects | undefined;
  /**
* The level of permission to grant the access token to view and manage secret scanning alerts.
*/
readonly "secret_scanning_alerts"?: AppPermissionsSecretScanningAlerts | undefined;
  /**
* The level of permission to grant the access token to manage repository secrets.
*/
readonly "secrets"?: AppPermissionsSecrets | undefined;
  /**
* The level of permission to grant the access token to view and manage security events like code scanning alerts.
*/
readonly "security_events"?: AppPermissionsSecurityEvents | undefined;
  /**
* The level of permission to grant the access token to manage just a single file.
*/
readonly "single_file"?: AppPermissionsSingleFile | undefined;
  /**
* The level of permission to grant the access token for commit statuses.
*/
readonly "statuses"?: AppPermissionsStatuses | undefined;
  /**
* The level of permission to grant the access token to manage Dependabot alerts.
*/
readonly "vulnerability_alerts"?: AppPermissionsVulnerabilityAlerts | undefined;
  /**
* The level of permission to grant the access token to update GitHub Actions workflow files.
*/
readonly "workflows"?: AppPermissionsWorkflows | undefined;
  /**
* The level of permission to grant the access token for organization teams and members.
*/
readonly "members"?: AppPermissionsMembers | undefined;
  /**
* The level of permission to grant the access token to manage access to an organization.
*/
readonly "organization_administration"?: AppPermissionsOrganizationAdministration | undefined;
  /**
* The level of permission to grant the access token for custom repository roles management.
*/
readonly "organization_custom_roles"?: AppPermissionsOrganizationCustomRoles | undefined;
  /**
* The level of permission to grant the access token for custom organization roles management.
*/
readonly "organization_custom_org_roles"?: AppPermissionsOrganizationCustomOrgRoles | undefined;
  /**
* The level of permission to grant the access token for custom property management.
*/
readonly "organization_custom_properties"?: AppPermissionsOrganizationCustomProperties | undefined;
  /**
* The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.
*/
readonly "organization_copilot_seat_management"?: AppPermissionsOrganizationCopilotSeatManagement | undefined;
  /**
* The level of permission to grant the access token to view and manage announcement banners for an organization.
*/
readonly "organization_announcement_banners"?: AppPermissionsOrganizationAnnouncementBanners | undefined;
  /**
* The level of permission to grant the access token to view events triggered by an activity in an organization.
*/
readonly "organization_events"?: AppPermissionsOrganizationEvents | undefined;
  /**
* The level of permission to grant the access token to manage the post-receive hooks for an organization.
*/
readonly "organization_hooks"?: AppPermissionsOrganizationHooks | undefined;
  /**
* The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
*/
readonly "organization_personal_access_tokens"?: AppPermissionsOrganizationPersonalAccessTokens | undefined;
  /**
* The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
*/
readonly "organization_personal_access_token_requests"?: AppPermissionsOrganizationPersonalAccessTokenRequests | undefined;
  /**
* The level of permission to grant the access token for viewing an organization's plan.
*/
readonly "organization_plan"?: AppPermissionsOrganizationPlan | undefined;
  /**
* The level of permission to grant the access token to manage organization projects and projects public preview (where available).
*/
readonly "organization_projects"?: AppPermissionsOrganizationProjects | undefined;
  /**
* The level of permission to grant the access token for organization packages published to GitHub Packages.
*/
readonly "organization_packages"?: AppPermissionsOrganizationPackages | undefined;
  /**
* The level of permission to grant the access token to manage organization secrets.
*/
readonly "organization_secrets"?: AppPermissionsOrganizationSecrets | undefined;
  /**
* The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
*/
readonly "organization_self_hosted_runners"?: AppPermissionsOrganizationSelfHostedRunners | undefined;
  /**
* The level of permission to grant the access token to view and manage users blocked by the organization.
*/
readonly "organization_user_blocking"?: AppPermissionsOrganizationUserBlocking | undefined;
  /**
* The level of permission to grant the access token to manage team discussions and related comments.
*/
readonly "team_discussions"?: AppPermissionsTeamDiscussions | undefined;
  /**
* The level of permission to grant the access token to manage the email addresses belonging to a user.
*/
readonly "email_addresses"?: AppPermissionsEmailAddresses | undefined;
  /**
* The level of permission to grant the access token to manage the followers belonging to a user.
*/
readonly "followers"?: AppPermissionsFollowers | undefined;
  /**
* The level of permission to grant the access token to manage git SSH keys.
*/
readonly "git_ssh_keys"?: AppPermissionsGitSshKeys | undefined;
  /**
* The level of permission to grant the access token to view and manage GPG keys belonging to a user.
*/
readonly "gpg_keys"?: AppPermissionsGpgKeys | undefined;
  /**
* The level of permission to grant the access token to view and manage interaction limits on a repository.
*/
readonly "interaction_limits"?: AppPermissionsInteractionLimits | undefined;
  /**
* The level of permission to grant the access token to manage the profile settings belonging to a user.
*/
readonly "profile"?: AppPermissionsProfile | undefined;
  /**
* The level of permission to grant the access token to list and manage repositories a user is starring.
*/
readonly "starring"?: AppPermissionsStarring | undefined
}

/**
* A GitHub user.
*/
export interface NullableSimpleUser {
  readonly "name"?: string | null | undefined;
  readonly "email"?: string | null | undefined;
  readonly "login": string;
  readonly "id": number;
  readonly "node_id": string;
  readonly "avatar_url": string;
  readonly "gravatar_id": string | null;
  readonly "url": string;
  readonly "html_url": string;
  readonly "followers_url": string;
  readonly "following_url": string;
  readonly "gists_url": string;
  readonly "starred_url": string;
  readonly "subscriptions_url": string;
  readonly "organizations_url": string;
  readonly "repos_url": string;
  readonly "events_url": string;
  readonly "received_events_url": string;
  readonly "type": string;
  readonly "site_admin": boolean;
  readonly "starred_at"?: string | undefined;
  readonly "user_view_type"?: string | undefined
}

/**
* Installation
*/
export interface Installation {
  /**
* The ID of the installation.
*/
readonly "id": number;
  readonly "account": SimpleUser | Enterprise | null;
  /**
* Describe whether all repositories have been selected or there's a selection involved
*/
readonly "repository_selection": InstallationRepositorySelection;
  readonly "access_tokens_url": string;
  readonly "repositories_url": string;
  readonly "html_url": string;
  readonly "app_id": number;
  readonly "client_id"?: string | undefined;
  /**
* The ID of the user or organization this token is being scoped to.
*/
readonly "target_id": number;
  readonly "target_type": string;
  readonly "permissions": AppPermissions;
  readonly "events": ReadonlyArray<string>;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "single_file_name": string | null;
  readonly "has_multiple_single_files"?: boolean | undefined;
  readonly "single_file_paths"?: ReadonlyArray<string> | undefined;
  readonly "app_slug": string;
  readonly "suspended_by": NullableSimpleUser | null;
  readonly "suspended_at": string | null;
  readonly "contact_email"?: string | null | undefined
}

export type AppsListInstallations200 = ReadonlyArray<Installation>

export interface AppsGetInstallationParams {
  
}

export interface AppsDeleteInstallationParams {
  
}

export interface AppsCreateInstallationAccessTokenParams {
  
}

export interface AppsCreateInstallationAccessTokenRequest {
  /**
* List of repository names that the token should have access to
*/
readonly "repositories"?: ReadonlyArray<string> | undefined;
  /**
* List of repository IDs that the token should have access to
*/
readonly "repository_ids"?: ReadonlyArray<number> | undefined;
  readonly "permissions"?: AppPermissions | undefined
}

export type InstallationTokenRepositorySelection = "all" | "selected"

/**
* License Simple
*/
export interface NullableLicenseSimple {
  readonly "key": string;
  readonly "name": string;
  readonly "url": string | null;
  readonly "spdx_id": string | null;
  readonly "node_id": string;
  readonly "html_url"?: string | undefined
}

/**
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
export type RepositorySquashMergeCommitTitle = "PR_TITLE" | "COMMIT_OR_PR_TITLE"

/**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
export type RepositorySquashMergeCommitMessage = "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"

/**
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
export type RepositoryMergeCommitTitle = "PR_TITLE" | "MERGE_MESSAGE"

/**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
export type RepositoryMergeCommitMessage = "PR_BODY" | "PR_TITLE" | "BLANK"

/**
* A repository on GitHub.
*/
export interface Repository {
  /**
* Unique identifier of the repository
*/
readonly "id": number;
  readonly "node_id": string;
  /**
* The name of the repository.
*/
readonly "name": string;
  readonly "full_name": string;
  readonly "license": NullableLicenseSimple | null;
  readonly "forks": number;
  readonly "permissions"?: {
  readonly "admin": boolean;
  readonly "pull": boolean;
  readonly "triage"?: boolean | undefined;
  readonly "push": boolean;
  readonly "maintain"?: boolean | undefined
} | undefined;
  readonly "owner": SimpleUser;
  /**
* Whether the repository is private or public.
*/
readonly "private": boolean;
  readonly "html_url": string;
  readonly "description": string | null;
  readonly "fork": boolean;
  readonly "url": string;
  readonly "archive_url": string;
  readonly "assignees_url": string;
  readonly "blobs_url": string;
  readonly "branches_url": string;
  readonly "collaborators_url": string;
  readonly "comments_url": string;
  readonly "commits_url": string;
  readonly "compare_url": string;
  readonly "contents_url": string;
  readonly "contributors_url": string;
  readonly "deployments_url": string;
  readonly "downloads_url": string;
  readonly "events_url": string;
  readonly "forks_url": string;
  readonly "git_commits_url": string;
  readonly "git_refs_url": string;
  readonly "git_tags_url": string;
  readonly "git_url": string;
  readonly "issue_comment_url": string;
  readonly "issue_events_url": string;
  readonly "issues_url": string;
  readonly "keys_url": string;
  readonly "labels_url": string;
  readonly "languages_url": string;
  readonly "merges_url": string;
  readonly "milestones_url": string;
  readonly "notifications_url": string;
  readonly "pulls_url": string;
  readonly "releases_url": string;
  readonly "ssh_url": string;
  readonly "stargazers_url": string;
  readonly "statuses_url": string;
  readonly "subscribers_url": string;
  readonly "subscription_url": string;
  readonly "tags_url": string;
  readonly "teams_url": string;
  readonly "trees_url": string;
  readonly "clone_url": string;
  readonly "mirror_url": string | null;
  readonly "hooks_url": string;
  readonly "svn_url": string;
  readonly "homepage": string | null;
  readonly "language": string | null;
  readonly "forks_count": number;
  readonly "stargazers_count": number;
  readonly "watchers_count": number;
  /**
* The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
*/
readonly "size": number;
  /**
* The default branch of the repository.
*/
readonly "default_branch": string;
  readonly "open_issues_count": number;
  /**
* Whether this repository acts as a template that can be used to generate new repositories.
*/
readonly "is_template"?: boolean | undefined;
  readonly "topics"?: ReadonlyArray<string> | undefined;
  /**
* Whether issues are enabled.
*/
readonly "has_issues": boolean;
  /**
* Whether projects are enabled.
*/
readonly "has_projects": boolean;
  /**
* Whether the wiki is enabled.
*/
readonly "has_wiki": boolean;
  readonly "has_pages": boolean;
  /**
* Whether downloads are enabled.
*/
readonly "has_downloads": boolean;
  /**
* Whether discussions are enabled.
*/
readonly "has_discussions"?: boolean | undefined;
  /**
* Whether the repository is archived.
*/
readonly "archived": boolean;
  /**
* Returns whether or not this repository disabled.
*/
readonly "disabled": boolean;
  /**
* The repository visibility: public, private, or internal.
*/
readonly "visibility"?: string | undefined;
  readonly "pushed_at": string | null;
  readonly "created_at": string | null;
  readonly "updated_at": string | null;
  /**
* Whether to allow rebase merges for pull requests.
*/
readonly "allow_rebase_merge"?: boolean | undefined;
  readonly "temp_clone_token"?: string | undefined;
  /**
* Whether to allow squash merges for pull requests.
*/
readonly "allow_squash_merge"?: boolean | undefined;
  /**
* Whether to allow Auto-merge to be used on pull requests.
*/
readonly "allow_auto_merge"?: boolean | undefined;
  /**
* Whether to delete head branches when pull requests are merged
*/
readonly "delete_branch_on_merge"?: boolean | undefined;
  /**
* Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
*/
readonly "allow_update_branch"?: boolean | undefined;
  /**
* Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
*/
readonly "use_squash_pr_title_as_default"?: boolean | undefined;
  /**
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
readonly "squash_merge_commit_title"?: RepositorySquashMergeCommitTitle | undefined;
  /**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
readonly "squash_merge_commit_message"?: RepositorySquashMergeCommitMessage | undefined;
  /**
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
readonly "merge_commit_title"?: RepositoryMergeCommitTitle | undefined;
  /**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
readonly "merge_commit_message"?: RepositoryMergeCommitMessage | undefined;
  /**
* Whether to allow merge commits for pull requests.
*/
readonly "allow_merge_commit"?: boolean | undefined;
  /**
* Whether to allow forking this repo
*/
readonly "allow_forking"?: boolean | undefined;
  /**
* Whether to require contributors to sign off on web-based commits
*/
readonly "web_commit_signoff_required"?: boolean | undefined;
  readonly "open_issues": number;
  readonly "watchers": number;
  readonly "master_branch"?: string | undefined;
  readonly "starred_at"?: string | undefined;
  /**
* Whether anonymous git access is enabled for this repository
*/
readonly "anonymous_access_enabled"?: boolean | undefined;
  /**
* The status of the code search index for this repository
*/
readonly "code_search_index_status"?: {
  readonly "lexical_search_ok"?: boolean | undefined;
  readonly "lexical_commit_sha"?: string | undefined
} | undefined
}

/**
* Authentication token for a GitHub App installed on a user or org.
*/
export interface InstallationToken {
  readonly "token": string;
  readonly "expires_at": string;
  readonly "permissions"?: AppPermissions | undefined;
  readonly "repository_selection"?: InstallationTokenRepositorySelection | undefined;
  readonly "repositories"?: ReadonlyArray<Repository> | undefined;
  readonly "single_file"?: string | undefined;
  readonly "has_multiple_single_files"?: boolean | undefined;
  readonly "single_file_paths"?: ReadonlyArray<string> | undefined
}

export interface AppsSuspendInstallationParams {
  
}

export interface AppsUnsuspendInstallationParams {
  
}

export interface AppsDeleteAuthorizationParams {
  
}

export interface AppsDeleteAuthorizationRequest {
  /**
* The OAuth access token used to authenticate to the GitHub API.
*/
readonly "access_token": string
}

export interface AppsCheckTokenParams {
  
}

export interface AppsCheckTokenRequest {
  /**
* The access_token of the OAuth or GitHub application.
*/
readonly "access_token": string
}

/**
* Describe whether all repositories have been selected or there's a selection involved
*/
export type NullableScopedInstallationRepositorySelection = "all" | "selected"

export interface NullableScopedInstallation {
  readonly "permissions": AppPermissions;
  /**
* Describe whether all repositories have been selected or there's a selection involved
*/
readonly "repository_selection": NullableScopedInstallationRepositorySelection;
  readonly "single_file_name": string | null;
  readonly "has_multiple_single_files"?: boolean | undefined;
  readonly "single_file_paths"?: ReadonlyArray<string> | undefined;
  readonly "repositories_url": string;
  readonly "account": SimpleUser
}

/**
* The authorization for an OAuth app, GitHub App, or a Personal Access Token.
*/
export interface Authorization {
  readonly "id": number;
  readonly "url": string;
  /**
* A list of scopes that this authorization is in.
*/
readonly "scopes": ReadonlyArray<string> | null;
  readonly "token": string;
  readonly "token_last_eight": string | null;
  readonly "hashed_token": string | null;
  readonly "app": {
  readonly "client_id": string;
  readonly "name": string;
  readonly "url": string
};
  readonly "note": string | null;
  readonly "note_url": string | null;
  readonly "updated_at": string;
  readonly "created_at": string;
  readonly "fingerprint": string | null;
  readonly "user"?: NullableSimpleUser | null | undefined;
  readonly "installation"?: NullableScopedInstallation | null | undefined;
  readonly "expires_at": string | null
}

export interface AppsDeleteTokenParams {
  
}

export interface AppsDeleteTokenRequest {
  /**
* The OAuth access token used to authenticate to the GitHub API.
*/
readonly "access_token": string
}

export interface AppsResetTokenParams {
  
}

export interface AppsResetTokenRequest {
  /**
* The access_token of the OAuth or GitHub application.
*/
readonly "access_token": string
}

export interface AppsScopeTokenParams {
  
}

export interface AppsScopeTokenRequest {
  /**
* The access token used to authenticate to the GitHub API.
*/
readonly "access_token": string;
  /**
* The name of the user or organization to scope the user access token to. **Required** unless `target_id` is specified.
*/
readonly "target"?: string | undefined;
  /**
* The ID of the user or organization to scope the user access token to. **Required** unless `target` is specified.
*/
readonly "target_id"?: number | undefined;
  /**
* The list of repository names to scope the user access token to. `repositories` may not be specified if `repository_ids` is specified.
*/
readonly "repositories"?: ReadonlyArray<string> | undefined;
  /**
* The list of repository IDs to scope the user access token to. `repository_ids` may not be specified if `repositories` is specified.
*/
readonly "repository_ids"?: ReadonlyArray<number> | undefined;
  readonly "permissions"?: AppPermissions | undefined
}

export interface AppsGetBySlugParams {
  
}

export interface ClassroomGetAnAssignmentParams {
  
}

/**
* Whether it's a group assignment or individual assignment.
*/
export type ClassroomAssignmentType = "individual" | "group"

/**
* A GitHub repository view for Classroom
*/
export interface SimpleClassroomRepository {
  /**
* A unique identifier of the repository.
*/
readonly "id": number;
  /**
* The full, globally unique name of the repository.
*/
readonly "full_name": string;
  /**
* The URL to view the repository on GitHub.com.
*/
readonly "html_url": string;
  /**
* The GraphQL identifier of the repository.
*/
readonly "node_id": string;
  /**
* Whether the repository is private.
*/
readonly "private": boolean;
  /**
* The default branch for the repository.
*/
readonly "default_branch": string
}

/**
* A GitHub organization.
*/
export interface SimpleClassroomOrganization {
  readonly "id": number;
  readonly "login": string;
  readonly "node_id": string;
  readonly "html_url": string;
  readonly "name": string | null;
  readonly "avatar_url": string
}

/**
* A GitHub Classroom classroom
*/
export interface Classroom {
  /**
* Unique identifier of the classroom.
*/
readonly "id": number;
  /**
* The name of the classroom.
*/
readonly "name": string;
  /**
* Whether classroom is archived.
*/
readonly "archived": boolean;
  readonly "organization": SimpleClassroomOrganization;
  /**
* The URL of the classroom on GitHub Classroom.
*/
readonly "url": string
}

/**
* A GitHub Classroom assignment
*/
export interface ClassroomAssignment {
  /**
* Unique identifier of the repository.
*/
readonly "id": number;
  /**
* Whether an accepted assignment creates a public repository.
*/
readonly "public_repo": boolean;
  /**
* Assignment title.
*/
readonly "title": string;
  /**
* Whether it's a group assignment or individual assignment.
*/
readonly "type": ClassroomAssignmentType;
  /**
* The link that a student can use to accept the assignment.
*/
readonly "invite_link": string;
  /**
* Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment.
*/
readonly "invitations_enabled": boolean;
  /**
* Sluggified name of the assignment.
*/
readonly "slug": string;
  /**
* Whether students are admins on created repository when a student accepts the assignment.
*/
readonly "students_are_repo_admins": boolean;
  /**
* Whether feedback pull request will be created when a student accepts the assignment.
*/
readonly "feedback_pull_requests_enabled": boolean;
  /**
* The maximum allowable teams for the assignment.
*/
readonly "max_teams": number | null;
  /**
* The maximum allowable members per team.
*/
readonly "max_members": number | null;
  /**
* The selected editor for the assignment.
*/
readonly "editor": string;
  /**
* The number of students that have accepted the assignment.
*/
readonly "accepted": number;
  /**
* The number of students that have submitted the assignment.
*/
readonly "submitted": number;
  /**
* The number of students that have passed the assignment.
*/
readonly "passing": number;
  /**
* The programming language used in the assignment.
*/
readonly "language": string;
  /**
* The time at which the assignment is due.
*/
readonly "deadline": string | null;
  readonly "starter_code_repository": SimpleClassroomRepository;
  readonly "classroom": Classroom
}

export interface ClassroomListAcceptedAssignmentsForAnAssignmentParams {
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

/**
* A GitHub user simplified for Classroom.
*/
export interface SimpleClassroomUser {
  readonly "id": number;
  readonly "login": string;
  readonly "avatar_url": string;
  readonly "html_url": string
}

/**
* Whether it's a Group Assignment or Individual Assignment.
*/
export type SimpleClassroomAssignmentType = "individual" | "group"

/**
* A GitHub Classroom classroom
*/
export interface SimpleClassroom {
  /**
* Unique identifier of the classroom.
*/
readonly "id": number;
  /**
* The name of the classroom.
*/
readonly "name": string;
  /**
* Returns whether classroom is archived or not.
*/
readonly "archived": boolean;
  /**
* The url of the classroom on GitHub Classroom.
*/
readonly "url": string
}

/**
* A GitHub Classroom assignment
*/
export interface SimpleClassroomAssignment {
  /**
* Unique identifier of the repository.
*/
readonly "id": number;
  /**
* Whether an accepted assignment creates a public repository.
*/
readonly "public_repo": boolean;
  /**
* Assignment title.
*/
readonly "title": string;
  /**
* Whether it's a Group Assignment or Individual Assignment.
*/
readonly "type": SimpleClassroomAssignmentType;
  /**
* The link that a student can use to accept the assignment.
*/
readonly "invite_link": string;
  /**
* Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment.
*/
readonly "invitations_enabled": boolean;
  /**
* Sluggified name of the assignment.
*/
readonly "slug": string;
  /**
* Whether students are admins on created repository on accepted assignment.
*/
readonly "students_are_repo_admins": boolean;
  /**
* Whether feedback pull request will be created on assignment acceptance.
*/
readonly "feedback_pull_requests_enabled": boolean;
  /**
* The maximum allowable teams for the assignment.
*/
readonly "max_teams"?: number | null | undefined;
  /**
* The maximum allowable members per team.
*/
readonly "max_members"?: number | null | undefined;
  /**
* The selected editor for the assignment.
*/
readonly "editor": string;
  /**
* The number of students that have accepted the assignment.
*/
readonly "accepted": number;
  /**
* The number of students that have submitted the assignment.
*/
readonly "submitted": number;
  /**
* The number of students that have passed the assignment.
*/
readonly "passing": number;
  /**
* The programming language used in the assignment.
*/
readonly "language": string;
  /**
* The time at which the assignment is due.
*/
readonly "deadline": string | null;
  readonly "classroom": SimpleClassroom
}

/**
* A GitHub Classroom accepted assignment
*/
export interface ClassroomAcceptedAssignment {
  /**
* Unique identifier of the repository.
*/
readonly "id": number;
  /**
* Whether an accepted assignment has been submitted.
*/
readonly "submitted": boolean;
  /**
* Whether a submission passed.
*/
readonly "passing": boolean;
  /**
* Count of student commits.
*/
readonly "commit_count": number;
  /**
* Most recent grade.
*/
readonly "grade": string;
  readonly "students": ReadonlyArray<SimpleClassroomUser>;
  readonly "repository": SimpleClassroomRepository;
  readonly "assignment": SimpleClassroomAssignment
}

export type ClassroomListAcceptedAssignmentsForAnAssignment200 = ReadonlyArray<ClassroomAcceptedAssignment>

export interface ClassroomGetAssignmentGradesParams {
  
}

/**
* Grade for a student or groups GitHub Classroom assignment
*/
export interface ClassroomAssignmentGrade {
  /**
* Name of the assignment
*/
readonly "assignment_name": string;
  /**
* URL of the assignment
*/
readonly "assignment_url": string;
  /**
* URL of the starter code for the assignment
*/
readonly "starter_code_url": string;
  /**
* GitHub username of the student
*/
readonly "github_username": string;
  /**
* Roster identifier of the student
*/
readonly "roster_identifier": string;
  /**
* Name of the student's assignment repository
*/
readonly "student_repository_name": string;
  /**
* URL of the student's assignment repository
*/
readonly "student_repository_url": string;
  /**
* Timestamp of the student's assignment submission
*/
readonly "submission_timestamp": string;
  /**
* Number of points awarded to the student
*/
readonly "points_awarded": number;
  /**
* Number of points available for the assignment
*/
readonly "points_available": number;
  /**
* If a group assignment, name of the group the student is in
*/
readonly "group_name"?: string | undefined
}

export type ClassroomGetAssignmentGrades200 = ReadonlyArray<ClassroomAssignmentGrade>

export interface ClassroomListClassroomsParams {
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

export type ClassroomListClassrooms200 = ReadonlyArray<SimpleClassroom>

export interface ClassroomGetAClassroomParams {
  
}

export interface ClassroomListAssignmentsForAClassroomParams {
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

export type ClassroomListAssignmentsForAClassroom200 = ReadonlyArray<SimpleClassroomAssignment>

/**
* Code Of Conduct
*/
export interface CodeOfConduct {
  readonly "key": string;
  readonly "name": string;
  readonly "url": string;
  readonly "body"?: string | undefined;
  readonly "html_url": string | null
}

export type CodesOfConductGetAllCodesOfConduct200 = ReadonlyArray<CodeOfConduct>

export interface CredentialsRevokeRequest {
  /**
* A list of credentials to be revoked, up to 1000 per request.
*/
readonly "credentials": ReadonlyArray<string>
}

export type CredentialsRevoke202 = Record<string, unknown>

export type EmojisGet200 = Record<string, unknown>

export interface CodeSecurityGetConfigurationsForEnterpriseParams {
  readonly "per_page"?: number | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined
}

/**
* The type of the code security configuration.
*/
export type CodeSecurityConfigurationTargetType = "global" | "organization" | "enterprise"

/**
* The enablement status of GitHub Advanced Security
*/
export type CodeSecurityConfigurationAdvancedSecurity = "enabled" | "disabled" | "code_security" | "secret_protection"

/**
* The enablement status of Dependency Graph
*/
export type CodeSecurityConfigurationDependencyGraph = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Automatic dependency submission
*/
export type CodeSecurityConfigurationDependencyGraphAutosubmitAction = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Dependabot alerts
*/
export type CodeSecurityConfigurationDependabotAlerts = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Dependabot security updates
*/
export type CodeSecurityConfigurationDependabotSecurityUpdates = "enabled" | "disabled" | "not_set"

/**
* The enablement status of code scanning default setup
*/
export type CodeSecurityConfigurationCodeScanningDefaultSetup = "enabled" | "disabled" | "not_set"

/**
* Whether to use labeled runners or standard GitHub runners.
*/
export type CodeSecurityConfigurationCodeScanningDefaultSetupOptionsRunnerType = "standard" | "labeled" | "not_set"

/**
* The enablement status of code scanning delegated alert dismissal
*/
export type CodeSecurityConfigurationCodeScanningDelegatedAlertDismissal = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning
*/
export type CodeSecurityConfigurationSecretScanning = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning push protection
*/
export type CodeSecurityConfigurationSecretScanningPushProtection = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning delegated bypass
*/
export type CodeSecurityConfigurationSecretScanningDelegatedBypass = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning validity checks
*/
export type CodeSecurityConfigurationSecretScanningValidityChecks = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning non-provider patterns
*/
export type CodeSecurityConfigurationSecretScanningNonProviderPatterns = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Copilot secret scanning
*/
export type CodeSecurityConfigurationSecretScanningGenericSecrets = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning delegated alert dismissal
*/
export type CodeSecurityConfigurationSecretScanningDelegatedAlertDismissal = "enabled" | "disabled" | "not_set"

/**
* The enablement status of private vulnerability reporting
*/
export type CodeSecurityConfigurationPrivateVulnerabilityReporting = "enabled" | "disabled" | "not_set"

/**
* The enforcement status for a security configuration
*/
export type CodeSecurityConfigurationEnforcement = "enforced" | "unenforced"

/**
* A code security configuration
*/
export interface CodeSecurityConfiguration {
  /**
* The ID of the code security configuration
*/
readonly "id"?: number | undefined;
  /**
* The name of the code security configuration. Must be unique within the organization.
*/
readonly "name"?: string | undefined;
  /**
* The type of the code security configuration.
*/
readonly "target_type"?: CodeSecurityConfigurationTargetType | undefined;
  /**
* A description of the code security configuration
*/
readonly "description"?: string | undefined;
  /**
* The enablement status of GitHub Advanced Security
*/
readonly "advanced_security"?: CodeSecurityConfigurationAdvancedSecurity | undefined;
  /**
* The enablement status of Dependency Graph
*/
readonly "dependency_graph"?: CodeSecurityConfigurationDependencyGraph | undefined;
  /**
* The enablement status of Automatic dependency submission
*/
readonly "dependency_graph_autosubmit_action"?: CodeSecurityConfigurationDependencyGraphAutosubmitAction | undefined;
  /**
* Feature options for Automatic dependency submission
*/
readonly "dependency_graph_autosubmit_action_options"?: {
  /**
* Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.
*/
readonly "labeled_runners"?: boolean | undefined
} | undefined;
  /**
* The enablement status of Dependabot alerts
*/
readonly "dependabot_alerts"?: CodeSecurityConfigurationDependabotAlerts | undefined;
  /**
* The enablement status of Dependabot security updates
*/
readonly "dependabot_security_updates"?: CodeSecurityConfigurationDependabotSecurityUpdates | undefined;
  /**
* Feature options for code scanning
*/
readonly "code_scanning_options"?: {
  /**
* Whether to allow repos which use advanced setup
*/
readonly "allow_advanced"?: boolean | null | undefined
} | null | undefined;
  /**
* The enablement status of code scanning default setup
*/
readonly "code_scanning_default_setup"?: CodeSecurityConfigurationCodeScanningDefaultSetup | undefined;
  /**
* Feature options for code scanning default setup
*/
readonly "code_scanning_default_setup_options"?: {
  /**
* Whether to use labeled runners or standard GitHub runners.
*/
readonly "runner_type"?: CodeSecurityConfigurationCodeScanningDefaultSetupOptionsRunnerType | null | undefined;
  /**
* The label of the runner to use for code scanning when runner_type is 'labeled'.
*/
readonly "runner_label"?: string | null | undefined
} | null | undefined;
  /**
* The enablement status of code scanning delegated alert dismissal
*/
readonly "code_scanning_delegated_alert_dismissal"?: CodeSecurityConfigurationCodeScanningDelegatedAlertDismissal | undefined;
  /**
* The enablement status of secret scanning
*/
readonly "secret_scanning"?: CodeSecurityConfigurationSecretScanning | undefined;
  /**
* The enablement status of secret scanning push protection
*/
readonly "secret_scanning_push_protection"?: CodeSecurityConfigurationSecretScanningPushProtection | undefined;
  /**
* The enablement status of secret scanning delegated bypass
*/
readonly "secret_scanning_delegated_bypass"?: CodeSecurityConfigurationSecretScanningDelegatedBypass | undefined;
  /**
* Feature options for secret scanning delegated bypass
*/
readonly "secret_scanning_delegated_bypass_options"?: {
  /**
* The bypass reviewers for secret scanning delegated bypass
*/
readonly "reviewers"?: ReadonlyArray<{
  /**
* The ID of the team or role selected as a bypass reviewer
*/
readonly "reviewer_id": number;
  /**
* The type of the bypass reviewer
*/
readonly "reviewer_type": "TEAM" | "ROLE"
}> | undefined
} | undefined;
  /**
* The enablement status of secret scanning validity checks
*/
readonly "secret_scanning_validity_checks"?: CodeSecurityConfigurationSecretScanningValidityChecks | undefined;
  /**
* The enablement status of secret scanning non-provider patterns
*/
readonly "secret_scanning_non_provider_patterns"?: CodeSecurityConfigurationSecretScanningNonProviderPatterns | undefined;
  /**
* The enablement status of Copilot secret scanning
*/
readonly "secret_scanning_generic_secrets"?: CodeSecurityConfigurationSecretScanningGenericSecrets | undefined;
  /**
* The enablement status of secret scanning delegated alert dismissal
*/
readonly "secret_scanning_delegated_alert_dismissal"?: CodeSecurityConfigurationSecretScanningDelegatedAlertDismissal | undefined;
  /**
* The enablement status of private vulnerability reporting
*/
readonly "private_vulnerability_reporting"?: CodeSecurityConfigurationPrivateVulnerabilityReporting | undefined;
  /**
* The enforcement status for a security configuration
*/
readonly "enforcement"?: CodeSecurityConfigurationEnforcement | undefined;
  /**
* The URL of the configuration
*/
readonly "url"?: string | undefined;
  /**
* The URL of the configuration
*/
readonly "html_url"?: string | undefined;
  readonly "created_at"?: string | undefined;
  readonly "updated_at"?: string | undefined
}

export type CodeSecurityGetConfigurationsForEnterprise200 = ReadonlyArray<CodeSecurityConfiguration>

export interface CodeSecurityCreateConfigurationForEnterpriseParams {
  
}

/**
* The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
* 
* > [!WARNING]
* > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
*/
export type CodeSecurityCreateConfigurationForEnterpriseRequestAdvancedSecurity = "enabled" | "disabled" | "code_security" | "secret_protection"

/**
* The enablement status of GitHub Code Security features.
*/
export type CodeSecurityCreateConfigurationForEnterpriseRequestCodeSecurity = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Dependency Graph
*/
export type CodeSecurityCreateConfigurationForEnterpriseRequestDependencyGraph = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Automatic dependency submission
*/
export type CodeSecurityCreateConfigurationForEnterpriseRequestDependencyGraphAutosubmitAction = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Dependabot alerts
*/
export type CodeSecurityCreateConfigurationForEnterpriseRequestDependabotAlerts = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Dependabot security updates
*/
export type CodeSecurityCreateConfigurationForEnterpriseRequestDependabotSecurityUpdates = "enabled" | "disabled" | "not_set"

/**
* Security Configuration feature options for code scanning
*/
export interface CodeScanningOptions {
  /**
* Whether to allow repos which use advanced setup
*/
readonly "allow_advanced"?: boolean | null | undefined
}

/**
* The enablement status of code scanning default setup
*/
export type CodeSecurityCreateConfigurationForEnterpriseRequestCodeScanningDefaultSetup = "enabled" | "disabled" | "not_set"

/**
* Whether to use labeled runners or standard GitHub runners.
*/
export type CodeScanningDefaultSetupOptionsRunnerType = "standard" | "labeled" | "not_set"

/**
* Feature options for code scanning default setup
*/
export interface CodeScanningDefaultSetupOptions {
  /**
* Whether to use labeled runners or standard GitHub runners.
*/
readonly "runner_type"?: CodeScanningDefaultSetupOptionsRunnerType | undefined;
  /**
* The label of the runner to use for code scanning default setup when runner_type is 'labeled'.
*/
readonly "runner_label"?: string | null | undefined
}

/**
* The enablement status of code scanning delegated alert dismissal
*/
export type CodeSecurityCreateConfigurationForEnterpriseRequestCodeScanningDelegatedAlertDismissal = "enabled" | "disabled" | "not_set"

/**
* The enablement status of GitHub Secret Protection features.
*/
export type CodeSecurityCreateConfigurationForEnterpriseRequestSecretProtection = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning
*/
export type CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanning = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning push protection
*/
export type CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningPushProtection = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning validity checks
*/
export type CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningValidityChecks = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning non provider patterns
*/
export type CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningNonProviderPatterns = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Copilot secret scanning
*/
export type CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningGenericSecrets = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning delegated alert dismissal
*/
export type CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningDelegatedAlertDismissal = "enabled" | "disabled" | "not_set"

/**
* The enablement status of private vulnerability reporting
*/
export type CodeSecurityCreateConfigurationForEnterpriseRequestPrivateVulnerabilityReporting = "enabled" | "disabled" | "not_set"

/**
* The enforcement status for a security configuration
*/
export type CodeSecurityCreateConfigurationForEnterpriseRequestEnforcement = "enforced" | "unenforced"

export interface CodeSecurityCreateConfigurationForEnterpriseRequest {
  /**
* The name of the code security configuration. Must be unique within the enterprise.
*/
readonly "name": string;
  /**
* A description of the code security configuration
*/
readonly "description": string;
  /**
* The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
* 
* > [!WARNING]
* > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
*/
readonly "advanced_security"?: CodeSecurityCreateConfigurationForEnterpriseRequestAdvancedSecurity | undefined;
  /**
* The enablement status of GitHub Code Security features.
*/
readonly "code_security"?: CodeSecurityCreateConfigurationForEnterpriseRequestCodeSecurity | undefined;
  /**
* The enablement status of Dependency Graph
*/
readonly "dependency_graph"?: CodeSecurityCreateConfigurationForEnterpriseRequestDependencyGraph | undefined;
  /**
* The enablement status of Automatic dependency submission
*/
readonly "dependency_graph_autosubmit_action"?: CodeSecurityCreateConfigurationForEnterpriseRequestDependencyGraphAutosubmitAction | undefined;
  /**
* Feature options for Automatic dependency submission
*/
readonly "dependency_graph_autosubmit_action_options"?: {
  /**
* Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.
*/
readonly "labeled_runners"?: boolean | undefined
} | undefined;
  /**
* The enablement status of Dependabot alerts
*/
readonly "dependabot_alerts"?: CodeSecurityCreateConfigurationForEnterpriseRequestDependabotAlerts | undefined;
  /**
* The enablement status of Dependabot security updates
*/
readonly "dependabot_security_updates"?: CodeSecurityCreateConfigurationForEnterpriseRequestDependabotSecurityUpdates | undefined;
  readonly "code_scanning_options"?: CodeScanningOptions | null | undefined;
  /**
* The enablement status of code scanning default setup
*/
readonly "code_scanning_default_setup"?: CodeSecurityCreateConfigurationForEnterpriseRequestCodeScanningDefaultSetup | undefined;
  readonly "code_scanning_default_setup_options"?: CodeScanningDefaultSetupOptions | null | undefined;
  /**
* The enablement status of code scanning delegated alert dismissal
*/
readonly "code_scanning_delegated_alert_dismissal"?: CodeSecurityCreateConfigurationForEnterpriseRequestCodeScanningDelegatedAlertDismissal | undefined;
  /**
* The enablement status of GitHub Secret Protection features.
*/
readonly "secret_protection"?: CodeSecurityCreateConfigurationForEnterpriseRequestSecretProtection | undefined;
  /**
* The enablement status of secret scanning
*/
readonly "secret_scanning"?: CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanning | undefined;
  /**
* The enablement status of secret scanning push protection
*/
readonly "secret_scanning_push_protection"?: CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningPushProtection | undefined;
  /**
* The enablement status of secret scanning validity checks
*/
readonly "secret_scanning_validity_checks"?: CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningValidityChecks | undefined;
  /**
* The enablement status of secret scanning non provider patterns
*/
readonly "secret_scanning_non_provider_patterns"?: CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningNonProviderPatterns | undefined;
  /**
* The enablement status of Copilot secret scanning
*/
readonly "secret_scanning_generic_secrets"?: CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningGenericSecrets | undefined;
  /**
* The enablement status of secret scanning delegated alert dismissal
*/
readonly "secret_scanning_delegated_alert_dismissal"?: CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningDelegatedAlertDismissal | undefined;
  /**
* The enablement status of private vulnerability reporting
*/
readonly "private_vulnerability_reporting"?: CodeSecurityCreateConfigurationForEnterpriseRequestPrivateVulnerabilityReporting | undefined;
  /**
* The enforcement status for a security configuration
*/
readonly "enforcement"?: CodeSecurityCreateConfigurationForEnterpriseRequestEnforcement | undefined
}

export interface CodeSecurityGetDefaultConfigurationsForEnterpriseParams {
  
}

/**
* A list of default code security configurations
*/
export type CodeSecurityDefaultConfigurations = ReadonlyArray<{
  /**
* The visibility of newly created repositories for which the code security configuration will be applied to by default
*/
readonly "default_for_new_repos"?: "public" | "private_and_internal" | "all" | undefined;
  readonly "configuration"?: CodeSecurityConfiguration | undefined
}>

export interface CodeSecurityGetSingleConfigurationForEnterpriseParams {
  
}

export interface CodeSecurityDeleteConfigurationForEnterpriseParams {
  
}

export interface CodeSecurityUpdateEnterpriseConfigurationParams {
  
}

/**
* The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
* 
* > [!WARNING]
* > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
*/
export type CodeSecurityUpdateEnterpriseConfigurationRequestAdvancedSecurity = "enabled" | "disabled" | "code_security" | "secret_protection"

/**
* The enablement status of GitHub Code Security features.
*/
export type CodeSecurityUpdateEnterpriseConfigurationRequestCodeSecurity = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Dependency Graph
*/
export type CodeSecurityUpdateEnterpriseConfigurationRequestDependencyGraph = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Automatic dependency submission
*/
export type CodeSecurityUpdateEnterpriseConfigurationRequestDependencyGraphAutosubmitAction = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Dependabot alerts
*/
export type CodeSecurityUpdateEnterpriseConfigurationRequestDependabotAlerts = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Dependabot security updates
*/
export type CodeSecurityUpdateEnterpriseConfigurationRequestDependabotSecurityUpdates = "enabled" | "disabled" | "not_set"

/**
* The enablement status of code scanning default setup
*/
export type CodeSecurityUpdateEnterpriseConfigurationRequestCodeScanningDefaultSetup = "enabled" | "disabled" | "not_set"

/**
* The enablement status of code scanning delegated alert dismissal
*/
export type CodeSecurityUpdateEnterpriseConfigurationRequestCodeScanningDelegatedAlertDismissal = "enabled" | "disabled" | "not_set"

/**
* The enablement status of GitHub Secret Protection features.
*/
export type CodeSecurityUpdateEnterpriseConfigurationRequestSecretProtection = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning
*/
export type CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanning = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning push protection
*/
export type CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningPushProtection = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning validity checks
*/
export type CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningValidityChecks = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning non-provider patterns
*/
export type CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningNonProviderPatterns = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Copilot secret scanning
*/
export type CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningGenericSecrets = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning delegated alert dismissal
*/
export type CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningDelegatedAlertDismissal = "enabled" | "disabled" | "not_set"

/**
* The enablement status of private vulnerability reporting
*/
export type CodeSecurityUpdateEnterpriseConfigurationRequestPrivateVulnerabilityReporting = "enabled" | "disabled" | "not_set"

/**
* The enforcement status for a security configuration
*/
export type CodeSecurityUpdateEnterpriseConfigurationRequestEnforcement = "enforced" | "unenforced"

export interface CodeSecurityUpdateEnterpriseConfigurationRequest {
  /**
* The name of the code security configuration. Must be unique across the enterprise.
*/
readonly "name"?: string | undefined;
  /**
* A description of the code security configuration
*/
readonly "description"?: string | undefined;
  /**
* The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
* 
* > [!WARNING]
* > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
*/
readonly "advanced_security"?: CodeSecurityUpdateEnterpriseConfigurationRequestAdvancedSecurity | undefined;
  /**
* The enablement status of GitHub Code Security features.
*/
readonly "code_security"?: CodeSecurityUpdateEnterpriseConfigurationRequestCodeSecurity | undefined;
  /**
* The enablement status of Dependency Graph
*/
readonly "dependency_graph"?: CodeSecurityUpdateEnterpriseConfigurationRequestDependencyGraph | undefined;
  /**
* The enablement status of Automatic dependency submission
*/
readonly "dependency_graph_autosubmit_action"?: CodeSecurityUpdateEnterpriseConfigurationRequestDependencyGraphAutosubmitAction | undefined;
  /**
* Feature options for Automatic dependency submission
*/
readonly "dependency_graph_autosubmit_action_options"?: {
  /**
* Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.
*/
readonly "labeled_runners"?: boolean | undefined
} | undefined;
  /**
* The enablement status of Dependabot alerts
*/
readonly "dependabot_alerts"?: CodeSecurityUpdateEnterpriseConfigurationRequestDependabotAlerts | undefined;
  /**
* The enablement status of Dependabot security updates
*/
readonly "dependabot_security_updates"?: CodeSecurityUpdateEnterpriseConfigurationRequestDependabotSecurityUpdates | undefined;
  /**
* The enablement status of code scanning default setup
*/
readonly "code_scanning_default_setup"?: CodeSecurityUpdateEnterpriseConfigurationRequestCodeScanningDefaultSetup | undefined;
  readonly "code_scanning_default_setup_options"?: CodeScanningDefaultSetupOptions | null | undefined;
  /**
* The enablement status of code scanning delegated alert dismissal
*/
readonly "code_scanning_delegated_alert_dismissal"?: CodeSecurityUpdateEnterpriseConfigurationRequestCodeScanningDelegatedAlertDismissal | undefined;
  /**
* The enablement status of GitHub Secret Protection features.
*/
readonly "secret_protection"?: CodeSecurityUpdateEnterpriseConfigurationRequestSecretProtection | undefined;
  /**
* The enablement status of secret scanning
*/
readonly "secret_scanning"?: CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanning | undefined;
  /**
* The enablement status of secret scanning push protection
*/
readonly "secret_scanning_push_protection"?: CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningPushProtection | undefined;
  /**
* The enablement status of secret scanning validity checks
*/
readonly "secret_scanning_validity_checks"?: CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningValidityChecks | undefined;
  /**
* The enablement status of secret scanning non-provider patterns
*/
readonly "secret_scanning_non_provider_patterns"?: CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningNonProviderPatterns | undefined;
  /**
* The enablement status of Copilot secret scanning
*/
readonly "secret_scanning_generic_secrets"?: CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningGenericSecrets | undefined;
  /**
* The enablement status of secret scanning delegated alert dismissal
*/
readonly "secret_scanning_delegated_alert_dismissal"?: CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningDelegatedAlertDismissal | undefined;
  /**
* The enablement status of private vulnerability reporting
*/
readonly "private_vulnerability_reporting"?: CodeSecurityUpdateEnterpriseConfigurationRequestPrivateVulnerabilityReporting | undefined;
  /**
* The enforcement status for a security configuration
*/
readonly "enforcement"?: CodeSecurityUpdateEnterpriseConfigurationRequestEnforcement | undefined
}

export interface CodeSecurityAttachEnterpriseConfigurationParams {
  
}

/**
* The type of repositories to attach the configuration to.
*/
export type CodeSecurityAttachEnterpriseConfigurationRequestScope = "all" | "all_without_configurations"

export interface CodeSecurityAttachEnterpriseConfigurationRequest {
  /**
* The type of repositories to attach the configuration to.
*/
readonly "scope": CodeSecurityAttachEnterpriseConfigurationRequestScope
}

export type CodeSecurityAttachEnterpriseConfiguration202 = Record<string, unknown>

export interface CodeSecuritySetConfigurationAsDefaultForEnterpriseParams {
  
}

/**
* Specify which types of repository this security configuration should be applied to by default.
*/
export type CodeSecuritySetConfigurationAsDefaultForEnterpriseRequestDefaultForNewRepos = "all" | "none" | "private_and_internal" | "public"

export interface CodeSecuritySetConfigurationAsDefaultForEnterpriseRequest {
  /**
* Specify which types of repository this security configuration should be applied to by default.
*/
readonly "default_for_new_repos"?: CodeSecuritySetConfigurationAsDefaultForEnterpriseRequestDefaultForNewRepos | undefined
}

/**
* Specifies which types of repository this security configuration is applied to by default.
*/
export type CodeSecuritySetConfigurationAsDefaultForEnterprise200DefaultForNewRepos = "all" | "none" | "private_and_internal" | "public"

export interface CodeSecuritySetConfigurationAsDefaultForEnterprise200 {
  /**
* Specifies which types of repository this security configuration is applied to by default.
*/
readonly "default_for_new_repos"?: CodeSecuritySetConfigurationAsDefaultForEnterprise200DefaultForNewRepos | undefined;
  readonly "configuration"?: CodeSecurityConfiguration | undefined
}

export interface CodeSecurityGetRepositoriesForEnterpriseConfigurationParams {
  readonly "per_page"?: number | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined;
  readonly "status"?: string | undefined
}

/**
* The attachment status of the code security configuration on the repository.
*/
export type CodeSecurityConfigurationRepositoriesStatus = "attached" | "attaching" | "detached" | "removed" | "enforced" | "failed" | "updating" | "removed_by_enterprise"

/**
* A GitHub repository.
*/
export interface SimpleRepository {
  /**
* A unique identifier of the repository.
*/
readonly "id": number;
  /**
* The GraphQL identifier of the repository.
*/
readonly "node_id": string;
  /**
* The name of the repository.
*/
readonly "name": string;
  /**
* The full, globally unique, name of the repository.
*/
readonly "full_name": string;
  readonly "owner": SimpleUser;
  /**
* Whether the repository is private.
*/
readonly "private": boolean;
  /**
* The URL to view the repository on GitHub.com.
*/
readonly "html_url": string;
  /**
* The repository description.
*/
readonly "description": string | null;
  /**
* Whether the repository is a fork.
*/
readonly "fork": boolean;
  /**
* The URL to get more information about the repository from the GitHub API.
*/
readonly "url": string;
  /**
* A template for the API URL to download the repository as an archive.
*/
readonly "archive_url": string;
  /**
* A template for the API URL to list the available assignees for issues in the repository.
*/
readonly "assignees_url": string;
  /**
* A template for the API URL to create or retrieve a raw Git blob in the repository.
*/
readonly "blobs_url": string;
  /**
* A template for the API URL to get information about branches in the repository.
*/
readonly "branches_url": string;
  /**
* A template for the API URL to get information about collaborators of the repository.
*/
readonly "collaborators_url": string;
  /**
* A template for the API URL to get information about comments on the repository.
*/
readonly "comments_url": string;
  /**
* A template for the API URL to get information about commits on the repository.
*/
readonly "commits_url": string;
  /**
* A template for the API URL to compare two commits or refs.
*/
readonly "compare_url": string;
  /**
* A template for the API URL to get the contents of the repository.
*/
readonly "contents_url": string;
  /**
* A template for the API URL to list the contributors to the repository.
*/
readonly "contributors_url": string;
  /**
* The API URL to list the deployments of the repository.
*/
readonly "deployments_url": string;
  /**
* The API URL to list the downloads on the repository.
*/
readonly "downloads_url": string;
  /**
* The API URL to list the events of the repository.
*/
readonly "events_url": string;
  /**
* The API URL to list the forks of the repository.
*/
readonly "forks_url": string;
  /**
* A template for the API URL to get information about Git commits of the repository.
*/
readonly "git_commits_url": string;
  /**
* A template for the API URL to get information about Git refs of the repository.
*/
readonly "git_refs_url": string;
  /**
* A template for the API URL to get information about Git tags of the repository.
*/
readonly "git_tags_url": string;
  /**
* A template for the API URL to get information about issue comments on the repository.
*/
readonly "issue_comment_url": string;
  /**
* A template for the API URL to get information about issue events on the repository.
*/
readonly "issue_events_url": string;
  /**
* A template for the API URL to get information about issues on the repository.
*/
readonly "issues_url": string;
  /**
* A template for the API URL to get information about deploy keys on the repository.
*/
readonly "keys_url": string;
  /**
* A template for the API URL to get information about labels of the repository.
*/
readonly "labels_url": string;
  /**
* The API URL to get information about the languages of the repository.
*/
readonly "languages_url": string;
  /**
* The API URL to merge branches in the repository.
*/
readonly "merges_url": string;
  /**
* A template for the API URL to get information about milestones of the repository.
*/
readonly "milestones_url": string;
  /**
* A template for the API URL to get information about notifications on the repository.
*/
readonly "notifications_url": string;
  /**
* A template for the API URL to get information about pull requests on the repository.
*/
readonly "pulls_url": string;
  /**
* A template for the API URL to get information about releases on the repository.
*/
readonly "releases_url": string;
  /**
* The API URL to list the stargazers on the repository.
*/
readonly "stargazers_url": string;
  /**
* A template for the API URL to get information about statuses of a commit.
*/
readonly "statuses_url": string;
  /**
* The API URL to list the subscribers on the repository.
*/
readonly "subscribers_url": string;
  /**
* The API URL to subscribe to notifications for this repository.
*/
readonly "subscription_url": string;
  /**
* The API URL to get information about tags on the repository.
*/
readonly "tags_url": string;
  /**
* The API URL to list the teams on the repository.
*/
readonly "teams_url": string;
  /**
* A template for the API URL to create or retrieve a raw Git tree of the repository.
*/
readonly "trees_url": string;
  /**
* The API URL to list the hooks on the repository.
*/
readonly "hooks_url": string
}

/**
* Repositories associated with a code security configuration and attachment status
*/
export interface CodeSecurityConfigurationRepositories {
  /**
* The attachment status of the code security configuration on the repository.
*/
readonly "status"?: CodeSecurityConfigurationRepositoriesStatus | undefined;
  readonly "repository"?: SimpleRepository | undefined
}

export type CodeSecurityGetRepositoriesForEnterpriseConfiguration200 = ReadonlyArray<CodeSecurityConfigurationRepositories>

export type DependabotListAlertsForEnterpriseParamsScope = "development" | "runtime"

export type DependabotListAlertsForEnterpriseParamsSort = "created" | "updated" | "epss_percentage"

export type DependabotListAlertsForEnterpriseParamsDirection = "asc" | "desc"

export interface DependabotListAlertsForEnterpriseParams {
  readonly "state"?: string | undefined;
  readonly "severity"?: string | undefined;
  readonly "ecosystem"?: string | undefined;
  readonly "package"?: string | undefined;
  readonly "epss_percentage"?: string | undefined;
  readonly "has"?: string | ReadonlyArray<"patch"> | undefined;
  readonly "scope"?: DependabotListAlertsForEnterpriseParamsScope | undefined;
  readonly "sort"?: DependabotListAlertsForEnterpriseParamsSort | undefined;
  readonly "direction"?: DependabotListAlertsForEnterpriseParamsDirection | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined;
  readonly "first"?: number | undefined;
  readonly "last"?: number | undefined;
  readonly "per_page"?: number | undefined
}

/**
* The security alert number.
*/
export type AlertNumber = number

/**
* The state of the Dependabot alert.
*/
export type DependabotAlertWithRepositoryState = "auto_dismissed" | "dismissed" | "fixed" | "open"

/**
* Details for the vulnerable package.
*/
export interface DependabotAlertPackage {
  /**
* The package's language or package management ecosystem.
*/
readonly "ecosystem": string;
  /**
* The unique package name within its ecosystem.
*/
readonly "name": string
}

/**
* The execution scope of the vulnerable dependency.
*/
export type DependabotAlertWithRepositoryDependencyScope = "development" | "runtime"

/**
* The vulnerable dependency's relationship to your project.
* 
* > [!NOTE]
* > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
*/
export type DependabotAlertWithRepositoryDependencyRelationship = "unknown" | "direct" | "transitive"

/**
* The severity of the vulnerability.
*/
export type DependabotAlertSecurityVulnerabilitySeverity = "low" | "medium" | "high" | "critical"

/**
* Details pertaining to one vulnerable version range for the advisory.
*/
export interface DependabotAlertSecurityVulnerability {
  readonly "package": DependabotAlertPackage;
  /**
* The severity of the vulnerability.
*/
readonly "severity": DependabotAlertSecurityVulnerabilitySeverity;
  /**
* Conditions that identify vulnerable versions of this vulnerability's package.
*/
readonly "vulnerable_version_range": string;
  /**
* Details pertaining to the package version that patches this vulnerability.
*/
readonly "first_patched_version": {
  /**
* The package version that patches this vulnerability.
*/
readonly "identifier": string
} | null
}

/**
* The severity of the advisory.
*/
export type DependabotAlertSecurityAdvisorySeverity = "low" | "medium" | "high" | "critical"

/**
* Details for the GitHub Security Advisory.
*/
export interface DependabotAlertSecurityAdvisory {
  /**
* The unique GitHub Security Advisory ID assigned to the advisory.
*/
readonly "ghsa_id": string;
  /**
* The unique CVE ID assigned to the advisory.
*/
readonly "cve_id": string | null;
  /**
* A short, plain text summary of the advisory.
*/
readonly "summary": string;
  /**
* A long-form Markdown-supported description of the advisory.
*/
readonly "description": string;
  /**
* Vulnerable version range information for the advisory.
*/
readonly "vulnerabilities": ReadonlyArray<DependabotAlertSecurityVulnerability>;
  /**
* The severity of the advisory.
*/
readonly "severity": DependabotAlertSecurityAdvisorySeverity;
  /**
* Details for the advisory pertaining to the Common Vulnerability Scoring System.
*/
readonly "cvss": {
  /**
* The overall CVSS score of the advisory.
*/
readonly "score": number;
  /**
* The full CVSS vector string for the advisory.
*/
readonly "vector_string": string | null
};
  readonly "cvss_severities"?: CvssSeverities | null | undefined;
  readonly "epss"?: SecurityAdvisoryEpss | null | undefined;
  /**
* Details for the advisory pertaining to Common Weakness Enumeration.
*/
readonly "cwes": ReadonlyArray<{
  /**
* The unique CWE ID.
*/
readonly "cwe_id": string;
  /**
* The short, plain text name of the CWE.
*/
readonly "name": string
}>;
  /**
* Values that identify this advisory among security information sources.
*/
readonly "identifiers": ReadonlyArray<{
  /**
* The type of advisory identifier.
*/
readonly "type": "CVE" | "GHSA";
  /**
* The value of the advisory identifer.
*/
readonly "value": string
}>;
  /**
* Links to additional advisory information.
*/
readonly "references": ReadonlyArray<{
  /**
* The URL of the reference.
*/
readonly "url": string
}>;
  /**
* The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
readonly "published_at": string;
  /**
* The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
readonly "updated_at": string;
  /**
* The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
readonly "withdrawn_at": string | null
}

/**
* The REST API URL of the alert resource.
*/
export type AlertUrl = string

/**
* The GitHub URL of the alert resource.
*/
export type AlertHtmlUrl = string

/**
* The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
export type AlertCreatedAt = string

/**
* The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
export type AlertUpdatedAt = string

/**
* The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
export type AlertDismissedAt = string

/**
* The reason that the alert was dismissed.
*/
export type DependabotAlertWithRepositoryDismissedReason = "fix_started" | "inaccurate" | "no_bandwidth" | "not_used" | "tolerable_risk"

/**
* The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
export type AlertFixedAt = string

/**
* The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
export type AlertAutoDismissedAt = string

/**
* A Dependabot alert.
*/
export interface DependabotAlertWithRepository {
  readonly "number": AlertNumber;
  /**
* The state of the Dependabot alert.
*/
readonly "state": DependabotAlertWithRepositoryState;
  /**
* Details for the vulnerable dependency.
*/
readonly "dependency": {
  readonly "package"?: DependabotAlertPackage | undefined;
  /**
* The full path to the dependency manifest file, relative to the root of the repository.
*/
readonly "manifest_path"?: string | undefined;
  /**
* The execution scope of the vulnerable dependency.
*/
readonly "scope"?: DependabotAlertWithRepositoryDependencyScope | null | undefined;
  /**
* The vulnerable dependency's relationship to your project.
* 
* > [!NOTE]
* > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
*/
readonly "relationship"?: DependabotAlertWithRepositoryDependencyRelationship | null | undefined
};
  readonly "security_advisory": DependabotAlertSecurityAdvisory;
  readonly "security_vulnerability": DependabotAlertSecurityVulnerability;
  readonly "url": AlertUrl;
  readonly "html_url": AlertHtmlUrl;
  readonly "created_at": AlertCreatedAt;
  readonly "updated_at": AlertUpdatedAt;
  readonly "dismissed_at": AlertDismissedAt | null;
  readonly "dismissed_by": NullableSimpleUser | null;
  /**
* The reason that the alert was dismissed.
*/
readonly "dismissed_reason": DependabotAlertWithRepositoryDismissedReason | null;
  /**
* An optional comment associated with the alert's dismissal.
*/
readonly "dismissed_comment": string | null;
  readonly "fixed_at": AlertFixedAt | null;
  readonly "auto_dismissed_at"?: AlertAutoDismissedAt | null | undefined;
  readonly "repository": SimpleRepository
}

export type DependabotListAlertsForEnterprise200 = ReadonlyArray<DependabotAlertWithRepository>

export type SecretScanningListAlertsForEnterpriseParamsState = "open" | "resolved"

export type SecretScanningListAlertsForEnterpriseParamsSort = "created" | "updated"

export type SecretScanningListAlertsForEnterpriseParamsDirection = "asc" | "desc"

export interface SecretScanningListAlertsForEnterpriseParams {
  readonly "state"?: SecretScanningListAlertsForEnterpriseParamsState | undefined;
  readonly "secret_type"?: string | undefined;
  readonly "resolution"?: string | undefined;
  readonly "sort"?: SecretScanningListAlertsForEnterpriseParamsSort | undefined;
  readonly "direction"?: SecretScanningListAlertsForEnterpriseParamsDirection | undefined;
  readonly "per_page"?: number | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined;
  readonly "validity"?: string | undefined;
  readonly "is_publicly_leaked"?: boolean | undefined;
  readonly "is_multi_repo"?: boolean | undefined;
  readonly "hide_secret"?: boolean | undefined
}

/**
* The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
export type NullableAlertUpdatedAt = string

/**
* Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.
*/
export type SecretScanningAlertState = "open" | "resolved"

/**
* **Required when the `state` is `resolved`.** The reason for resolving the alert.
*/
export type SecretScanningAlertResolution = "false_positive" | "wont_fix" | "revoked" | "used_in_tests"

/**
* The token status as of the latest validity check.
*/
export type OrganizationSecretScanningAlertValidity = "active" | "inactive" | "unknown"

/**
* Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository.
*/
export interface SecretScanningLocationCommit {
  /**
* The file path in the repository
*/
readonly "path": string;
  /**
* Line number at which the secret starts in the file
*/
readonly "start_line": number;
  /**
* Line number at which the secret ends in the file
*/
readonly "end_line": number;
  /**
* The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
*/
readonly "start_column": number;
  /**
* The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
*/
readonly "end_column": number;
  /**
* SHA-1 hash ID of the associated blob
*/
readonly "blob_sha": string;
  /**
* The API URL to get the associated blob resource
*/
readonly "blob_url": string;
  /**
* SHA-1 hash ID of the associated commit
*/
readonly "commit_sha": string;
  /**
* The API URL to get the associated commit resource
*/
readonly "commit_url": string
}

/**
* Represents a 'wiki_commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository wiki.
*/
export interface SecretScanningLocationWikiCommit {
  /**
* The file path of the wiki page
*/
readonly "path": string;
  /**
* Line number at which the secret starts in the file
*/
readonly "start_line": number;
  /**
* Line number at which the secret ends in the file
*/
readonly "end_line": number;
  /**
* The column at which the secret starts within the start line when the file is interpreted as 8-bit ASCII.
*/
readonly "start_column": number;
  /**
* The column at which the secret ends within the end line when the file is interpreted as 8-bit ASCII.
*/
readonly "end_column": number;
  /**
* SHA-1 hash ID of the associated blob
*/
readonly "blob_sha": string;
  /**
* The GitHub URL to get the associated wiki page
*/
readonly "page_url": string;
  /**
* SHA-1 hash ID of the associated commit
*/
readonly "commit_sha": string;
  /**
* The GitHub URL to get the associated wiki commit
*/
readonly "commit_url": string
}

/**
* Represents an 'issue_title' secret scanning location type. This location type shows that a secret was detected in the title of an issue.
*/
export interface SecretScanningLocationIssueTitle {
  /**
* The API URL to get the issue where the secret was detected.
*/
readonly "issue_title_url": string
}

/**
* Represents an 'issue_body' secret scanning location type. This location type shows that a secret was detected in the body of an issue.
*/
export interface SecretScanningLocationIssueBody {
  /**
* The API URL to get the issue where the secret was detected.
*/
readonly "issue_body_url": string
}

/**
* Represents an 'issue_comment' secret scanning location type. This location type shows that a secret was detected in a comment on an issue.
*/
export interface SecretScanningLocationIssueComment {
  /**
* The API URL to get the issue comment where the secret was detected.
*/
readonly "issue_comment_url": string
}

/**
* Represents a 'discussion_title' secret scanning location type. This location type shows that a secret was detected in the title of a discussion.
*/
export interface SecretScanningLocationDiscussionTitle {
  /**
* The URL to the discussion where the secret was detected.
*/
readonly "discussion_title_url": string
}

/**
* Represents a 'discussion_body' secret scanning location type. This location type shows that a secret was detected in the body of a discussion.
*/
export interface SecretScanningLocationDiscussionBody {
  /**
* The URL to the discussion where the secret was detected.
*/
readonly "discussion_body_url": string
}

/**
* Represents a 'discussion_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a discussion.
*/
export interface SecretScanningLocationDiscussionComment {
  /**
* The API URL to get the discussion comment where the secret was detected.
*/
readonly "discussion_comment_url": string
}

/**
* Represents a 'pull_request_title' secret scanning location type. This location type shows that a secret was detected in the title of a pull request.
*/
export interface SecretScanningLocationPullRequestTitle {
  /**
* The API URL to get the pull request where the secret was detected.
*/
readonly "pull_request_title_url": string
}

/**
* Represents a 'pull_request_body' secret scanning location type. This location type shows that a secret was detected in the body of a pull request.
*/
export interface SecretScanningLocationPullRequestBody {
  /**
* The API URL to get the pull request where the secret was detected.
*/
readonly "pull_request_body_url": string
}

/**
* Represents a 'pull_request_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a pull request.
*/
export interface SecretScanningLocationPullRequestComment {
  /**
* The API URL to get the pull request comment where the secret was detected.
*/
readonly "pull_request_comment_url": string
}

/**
* Represents a 'pull_request_review' secret scanning location type. This location type shows that a secret was detected in a review on a pull request.
*/
export interface SecretScanningLocationPullRequestReview {
  /**
* The API URL to get the pull request review where the secret was detected.
*/
readonly "pull_request_review_url": string
}

/**
* Represents a 'pull_request_review_comment' secret scanning location type. This location type shows that a secret was detected in a review comment on a pull request.
*/
export interface SecretScanningLocationPullRequestReviewComment {
  /**
* The API URL to get the pull request review comment where the secret was detected.
*/
readonly "pull_request_review_comment_url": string
}

/**
* Details on the location where the token was initially detected. This can be a commit, wiki commit, issue, discussion, pull request.
*/
export type NullableSecretScanningFirstDetectedLocation = SecretScanningLocationCommit | SecretScanningLocationWikiCommit | SecretScanningLocationIssueTitle | SecretScanningLocationIssueBody | SecretScanningLocationIssueComment | SecretScanningLocationDiscussionTitle | SecretScanningLocationDiscussionBody | SecretScanningLocationDiscussionComment | SecretScanningLocationPullRequestTitle | SecretScanningLocationPullRequestBody | SecretScanningLocationPullRequestComment | SecretScanningLocationPullRequestReview | SecretScanningLocationPullRequestReviewComment

export interface OrganizationSecretScanningAlert {
  readonly "number"?: AlertNumber | undefined;
  readonly "created_at"?: AlertCreatedAt | undefined;
  readonly "updated_at"?: NullableAlertUpdatedAt | null | undefined;
  readonly "url"?: AlertUrl | undefined;
  readonly "html_url"?: AlertHtmlUrl | undefined;
  /**
* The REST API URL of the code locations for this alert.
*/
readonly "locations_url"?: string | undefined;
  readonly "state"?: SecretScanningAlertState | undefined;
  readonly "resolution"?: SecretScanningAlertResolution | null | undefined;
  /**
* The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
readonly "resolved_at"?: string | null | undefined;
  readonly "resolved_by"?: NullableSimpleUser | null | undefined;
  /**
* The type of secret that secret scanning detected.
*/
readonly "secret_type"?: string | undefined;
  /**
* User-friendly name for the detected secret, matching the `secret_type`.
* For a list of built-in patterns, see "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
*/
readonly "secret_type_display_name"?: string | undefined;
  /**
* The secret that was detected.
*/
readonly "secret"?: string | undefined;
  readonly "repository"?: SimpleRepository | undefined;
  /**
* Whether push protection was bypassed for the detected secret.
*/
readonly "push_protection_bypassed"?: boolean | null | undefined;
  readonly "push_protection_bypassed_by"?: NullableSimpleUser | null | undefined;
  /**
* The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
readonly "push_protection_bypassed_at"?: string | null | undefined;
  readonly "push_protection_bypass_request_reviewer"?: NullableSimpleUser | null | undefined;
  /**
* An optional comment when reviewing a push protection bypass.
*/
readonly "push_protection_bypass_request_reviewer_comment"?: string | null | undefined;
  /**
* An optional comment when requesting a push protection bypass.
*/
readonly "push_protection_bypass_request_comment"?: string | null | undefined;
  /**
* The URL to a push protection bypass request.
*/
readonly "push_protection_bypass_request_html_url"?: string | null | undefined;
  /**
* The comment that was optionally added when this alert was closed
*/
readonly "resolution_comment"?: string | null | undefined;
  /**
* The token status as of the latest validity check.
*/
readonly "validity"?: OrganizationSecretScanningAlertValidity | undefined;
  /**
* Whether the secret was publicly leaked.
*/
readonly "publicly_leaked"?: boolean | null | undefined;
  /**
* Whether the detected secret was found in multiple repositories in the same organization or enterprise.
*/
readonly "multi_repo"?: boolean | null | undefined;
  /**
* A boolean value representing whether or not alert is base64 encoded
*/
readonly "is_base64_encoded"?: boolean | null | undefined;
  readonly "first_location_detected"?: NullableSecretScanningFirstDetectedLocation | null | undefined;
  /**
* A boolean value representing whether or not the token in the alert was detected in more than one location.
*/
readonly "has_more_locations"?: boolean | undefined
}

export type SecretScanningListAlertsForEnterprise200 = ReadonlyArray<OrganizationSecretScanningAlert>

export interface SecretScanningListAlertsForEnterprise503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface ActivityListPublicEventsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Actor
*/
export interface Actor {
  readonly "id": number;
  readonly "login": string;
  readonly "display_login"?: string | undefined;
  readonly "gravatar_id": string | null;
  readonly "url": string;
  readonly "avatar_url": string
}

/**
* The reason for the current state
*/
export type IssueStateReason = "completed" | "reopened" | "not_planned" | "duplicate"

/**
* The state of the milestone.
*/
export type NullableMilestoneState = "open" | "closed"

/**
* A collection of related issues and pull requests.
*/
export interface NullableMilestone {
  readonly "url": string;
  readonly "html_url": string;
  readonly "labels_url": string;
  readonly "id": number;
  readonly "node_id": string;
  /**
* The number of the milestone.
*/
readonly "number": number;
  /**
* The state of the milestone.
*/
readonly "state": NullableMilestoneState;
  /**
* The title of the milestone.
*/
readonly "title": string;
  readonly "description": string | null;
  readonly "creator": NullableSimpleUser | null;
  readonly "open_issues": number;
  readonly "closed_issues": number;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "closed_at": string | null;
  readonly "due_on": string | null
}

/**
* The color of the issue type.
*/
export type IssueTypeColor = "gray" | "blue" | "green" | "yellow" | "orange" | "red" | "pink" | "purple"

/**
* The type of issue.
*/
export interface IssueType {
  /**
* The unique identifier of the issue type.
*/
readonly "id": number;
  /**
* The node identifier of the issue type.
*/
readonly "node_id": string;
  /**
* The name of the issue type.
*/
readonly "name": string;
  /**
* The description of the issue type.
*/
readonly "description": string | null;
  /**
* The color of the issue type.
*/
readonly "color"?: IssueTypeColor | null | undefined;
  /**
* The time the issue type created.
*/
readonly "created_at"?: string | undefined;
  /**
* The time the issue type last updated.
*/
readonly "updated_at"?: string | undefined;
  /**
* The enabled state of the issue type.
*/
readonly "is_enabled"?: boolean | undefined
}

/**
* GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
*/
export interface NullableIntegration {
  /**
* Unique identifier of the GitHub app
*/
readonly "id": number;
  /**
* The slug name of the GitHub app
*/
readonly "slug"?: string | undefined;
  readonly "node_id": string;
  readonly "client_id"?: string | undefined;
  readonly "owner": SimpleUser | Enterprise;
  /**
* The name of the GitHub app
*/
readonly "name": string;
  readonly "description": string | null;
  readonly "external_url": string;
  readonly "html_url": string;
  readonly "created_at": string;
  readonly "updated_at": string;
  /**
* The set of permissions for the GitHub app
*/
readonly "permissions": {
  readonly "issues"?: string | undefined;
  readonly "checks"?: string | undefined;
  readonly "metadata"?: string | undefined;
  readonly "contents"?: string | undefined;
  readonly "deployments"?: string | undefined
};
  /**
* The list of events for the GitHub app. Note that the `installation_target`, `security_advisory`, and `meta` events are not included because they are global events and not specific to an installation.
*/
readonly "events": ReadonlyArray<string>;
  /**
* The number of installations associated with the GitHub app. Only returned when the integration is requesting details about itself.
*/
readonly "installations_count"?: number | undefined
}

/**
* How the author is associated with the repository.
*/
export type AuthorAssociation = "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER"

export interface ReactionRollup {
  readonly "url": string;
  readonly "total_count": number;
  readonly "+1": number;
  readonly "-1": number;
  readonly "laugh": number;
  readonly "confused": number;
  readonly "heart": number;
  readonly "hooray": number;
  readonly "eyes": number;
  readonly "rocket": number
}

export interface SubIssuesSummary {
  readonly "total": number;
  readonly "completed": number;
  readonly "percent_completed": number
}

export interface IssueDependenciesSummary {
  readonly "blocked_by": number;
  readonly "blocking": number;
  readonly "total_blocked_by": number;
  readonly "total_blocking": number
}

/**
* The data type of the issue field
*/
export type IssueFieldValueDataType = "text" | "single_select" | "number" | "date"

/**
* A value assigned to an issue field
*/
export interface IssueFieldValue {
  /**
* Unique identifier for the issue field.
*/
readonly "issue_field_id": number;
  readonly "node_id": string;
  /**
* The data type of the issue field
*/
readonly "data_type": IssueFieldValueDataType;
  /**
* The value of the issue field
*/
readonly "value": string | number | number | null;
  /**
* Details about the selected option (only present for single_select fields)
*/
readonly "single_select_option"?: {
  /**
* Unique identifier for the option.
*/
readonly "id": number;
  /**
* The name of the option
*/
readonly "name": string;
  /**
* The color of the option
*/
readonly "color": string
} | null | undefined
}

/**
* Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
*/
export interface Issue {
  readonly "id": number;
  readonly "node_id": string;
  /**
* URL for the issue
*/
readonly "url": string;
  readonly "repository_url": string;
  readonly "labels_url": string;
  readonly "comments_url": string;
  readonly "events_url": string;
  readonly "html_url": string;
  /**
* Number uniquely identifying the issue within its repository
*/
readonly "number": number;
  /**
* State of the issue; either 'open' or 'closed'
*/
readonly "state": string;
  /**
* The reason for the current state
*/
readonly "state_reason"?: IssueStateReason | null | undefined;
  /**
* Title of the issue
*/
readonly "title": string;
  /**
* Contents of the issue
*/
readonly "body"?: string | null | undefined;
  readonly "user": NullableSimpleUser | null;
  /**
* Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
*/
readonly "labels": ReadonlyArray<string | {
  readonly "id"?: number | undefined;
  readonly "node_id"?: string | undefined;
  readonly "url"?: string | undefined;
  readonly "name"?: string | undefined;
  readonly "description"?: string | null | undefined;
  readonly "color"?: string | null | undefined;
  readonly "default"?: boolean | undefined
}>;
  readonly "assignee": NullableSimpleUser | null;
  readonly "assignees"?: ReadonlyArray<SimpleUser> | null | undefined;
  readonly "milestone": NullableMilestone | null;
  readonly "locked": boolean;
  readonly "active_lock_reason"?: string | null | undefined;
  readonly "comments": number;
  readonly "pull_request"?: {
  readonly "merged_at"?: string | null | undefined;
  readonly "diff_url": string | null;
  readonly "html_url": string | null;
  readonly "patch_url": string | null;
  readonly "url": string | null
} | undefined;
  readonly "closed_at": string | null;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "draft"?: boolean | undefined;
  readonly "closed_by"?: NullableSimpleUser | null | undefined;
  readonly "body_html"?: string | undefined;
  readonly "body_text"?: string | undefined;
  readonly "timeline_url"?: string | undefined;
  readonly "type"?: IssueType | null | undefined;
  readonly "repository"?: Repository | undefined;
  readonly "performed_via_github_app"?: NullableIntegration | null | undefined;
  readonly "author_association": AuthorAssociation;
  readonly "reactions"?: ReactionRollup | undefined;
  readonly "sub_issues_summary"?: SubIssuesSummary | undefined;
  readonly "issue_dependencies_summary"?: IssueDependenciesSummary | undefined;
  readonly "issue_field_values"?: ReadonlyArray<IssueFieldValue> | undefined
}

/**
* Comments provide a way for people to collaborate on an issue.
*/
export interface IssueComment {
  /**
* Unique identifier of the issue comment
*/
readonly "id": number;
  readonly "node_id": string;
  /**
* URL for the issue comment
*/
readonly "url": string;
  /**
* Contents of the issue comment
*/
readonly "body"?: string | undefined;
  readonly "body_text"?: string | undefined;
  readonly "body_html"?: string | undefined;
  readonly "html_url": string;
  readonly "user": NullableSimpleUser | null;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "issue_url": string;
  readonly "author_association": AuthorAssociation;
  readonly "performed_via_github_app"?: NullableIntegration | null | undefined;
  readonly "reactions"?: ReactionRollup | undefined
}

/**
* Event
*/
export interface Event {
  readonly "id": string;
  readonly "type": string | null;
  readonly "actor": Actor;
  readonly "repo": {
  readonly "id": number;
  readonly "name": string;
  readonly "url": string
};
  readonly "org"?: Actor | undefined;
  readonly "payload": {
  readonly "action"?: string | undefined;
  readonly "issue"?: Issue | undefined;
  readonly "comment"?: IssueComment | undefined;
  readonly "pages"?: ReadonlyArray<{
  readonly "page_name"?: string | undefined;
  readonly "title"?: string | undefined;
  readonly "summary"?: string | null | undefined;
  readonly "action"?: string | undefined;
  readonly "sha"?: string | undefined;
  readonly "html_url"?: string | undefined
}> | undefined
};
  readonly "public": boolean;
  readonly "created_at": string | null
}

export type ActivityListPublicEvents200 = ReadonlyArray<Event>

export interface ActivityListPublicEvents503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

/**
* Hypermedia Link with Type
*/
export interface LinkWithType {
  readonly "href": string;
  readonly "type": string
}

/**
* Feed
*/
export interface Feed {
  readonly "timeline_url": string;
  readonly "user_url": string;
  readonly "current_user_public_url"?: string | undefined;
  readonly "current_user_url"?: string | undefined;
  readonly "current_user_actor_url"?: string | undefined;
  readonly "current_user_organization_url"?: string | undefined;
  readonly "current_user_organization_urls"?: ReadonlyArray<string> | undefined;
  readonly "security_advisories_url"?: string | undefined;
  /**
* A feed of discussions for a given repository.
*/
readonly "repository_discussions_url"?: string | undefined;
  /**
* A feed of discussions for a given repository and category.
*/
readonly "repository_discussions_category_url"?: string | undefined;
  readonly "_links": {
  readonly "timeline": LinkWithType;
  readonly "user": LinkWithType;
  readonly "security_advisories"?: LinkWithType | undefined;
  readonly "current_user"?: LinkWithType | undefined;
  readonly "current_user_public"?: LinkWithType | undefined;
  readonly "current_user_actor"?: LinkWithType | undefined;
  readonly "current_user_organization"?: LinkWithType | undefined;
  readonly "current_user_organizations"?: ReadonlyArray<LinkWithType> | undefined;
  readonly "repository_discussions"?: LinkWithType | undefined;
  readonly "repository_discussions_category"?: LinkWithType | undefined
}
}

export interface GistsListParams {
  readonly "since"?: string | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Base Gist
*/
export interface BaseGist {
  readonly "url": string;
  readonly "forks_url": string;
  readonly "commits_url": string;
  readonly "id": string;
  readonly "node_id": string;
  readonly "git_pull_url": string;
  readonly "git_push_url": string;
  readonly "html_url": string;
  readonly "files": Record<string, unknown>;
  readonly "public": boolean;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "description": string | null;
  readonly "comments": number;
  readonly "comments_enabled"?: boolean | undefined;
  readonly "user": NullableSimpleUser | null;
  readonly "comments_url": string;
  readonly "owner"?: SimpleUser | undefined;
  readonly "truncated"?: boolean | undefined
}

export type GistsList200 = ReadonlyArray<BaseGist>

export type GistsCreateRequestPublicEnum = "true" | "false"

export interface GistsCreateRequest {
  /**
* Description of the gist
*/
readonly "description"?: string | undefined;
  /**
* Names and content for the files that make up the gist
*/
readonly "files": Record<string, unknown>;
  readonly "public"?: boolean | GistsCreateRequestPublicEnum | undefined
}

/**
* Public User
*/
export interface PublicUser {
  readonly "login": string;
  readonly "id": number;
  readonly "user_view_type"?: string | undefined;
  readonly "node_id": string;
  readonly "avatar_url": string;
  readonly "gravatar_id": string | null;
  readonly "url": string;
  readonly "html_url": string;
  readonly "followers_url": string;
  readonly "following_url": string;
  readonly "gists_url": string;
  readonly "starred_url": string;
  readonly "subscriptions_url": string;
  readonly "organizations_url": string;
  readonly "repos_url": string;
  readonly "events_url": string;
  readonly "received_events_url": string;
  readonly "type": string;
  readonly "site_admin": boolean;
  readonly "name": string | null;
  readonly "company": string | null;
  readonly "blog": string | null;
  readonly "location": string | null;
  readonly "email": string | null;
  readonly "notification_email"?: string | null | undefined;
  readonly "hireable": boolean | null;
  readonly "bio": string | null;
  readonly "twitter_username"?: string | null | undefined;
  readonly "public_repos": number;
  readonly "public_gists": number;
  readonly "followers": number;
  readonly "following": number;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "plan"?: {
  readonly "collaborators": number;
  readonly "name": string;
  readonly "space": number;
  readonly "private_repos": number
} | undefined;
  readonly "private_gists"?: number | undefined;
  readonly "total_private_repos"?: number | undefined;
  readonly "owned_private_repos"?: number | undefined;
  readonly "disk_usage"?: number | undefined;
  readonly "collaborators"?: number | undefined
}

/**
* Gist History
*/
export interface GistHistory {
  readonly "user"?: NullableSimpleUser | null | undefined;
  readonly "version"?: string | undefined;
  readonly "committed_at"?: string | undefined;
  readonly "change_status"?: {
  readonly "total"?: number | undefined;
  readonly "additions"?: number | undefined;
  readonly "deletions"?: number | undefined
} | undefined;
  readonly "url"?: string | undefined
}

/**
* Gist Simple
*/
export interface GistSimple {
  readonly "forks"?: ReadonlyArray<{
  readonly "id"?: string | undefined;
  readonly "url"?: string | undefined;
  readonly "user"?: PublicUser | undefined;
  readonly "created_at"?: string | undefined;
  readonly "updated_at"?: string | undefined
}> | null | undefined;
  readonly "history"?: ReadonlyArray<GistHistory> | null | undefined;
  /**
* Gist
*/
readonly "fork_of"?: {
  readonly "url": string;
  readonly "forks_url": string;
  readonly "commits_url": string;
  readonly "id": string;
  readonly "node_id": string;
  readonly "git_pull_url": string;
  readonly "git_push_url": string;
  readonly "html_url": string;
  readonly "files": Record<string, unknown>;
  readonly "public": boolean;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "description": string | null;
  readonly "comments": number;
  readonly "comments_enabled"?: boolean | undefined;
  readonly "user": NullableSimpleUser | null;
  readonly "comments_url": string;
  readonly "owner"?: NullableSimpleUser | null | undefined;
  readonly "truncated"?: boolean | undefined
} | null | undefined;
  readonly "url"?: string | undefined;
  readonly "forks_url"?: string | undefined;
  readonly "commits_url"?: string | undefined;
  readonly "id"?: string | undefined;
  readonly "node_id"?: string | undefined;
  readonly "git_pull_url"?: string | undefined;
  readonly "git_push_url"?: string | undefined;
  readonly "html_url"?: string | undefined;
  readonly "files"?: Record<string, unknown> | undefined;
  readonly "public"?: boolean | undefined;
  readonly "created_at"?: string | undefined;
  readonly "updated_at"?: string | undefined;
  readonly "description"?: string | null | undefined;
  readonly "comments"?: number | undefined;
  readonly "comments_enabled"?: boolean | undefined;
  readonly "user"?: string | null | undefined;
  readonly "comments_url"?: string | undefined;
  readonly "owner"?: SimpleUser | undefined;
  readonly "truncated"?: boolean | undefined
}

export interface GistsListPublicParams {
  readonly "since"?: string | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type GistsListPublic200 = ReadonlyArray<BaseGist>

export interface GistsListStarredParams {
  readonly "since"?: string | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type GistsListStarred200 = ReadonlyArray<BaseGist>

export interface GistsGetParams {
  
}

export interface GistsGet403 {
  readonly "block"?: {
  readonly "reason"?: string | undefined;
  readonly "created_at"?: string | undefined;
  readonly "html_url"?: string | null | undefined
} | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface GistsDeleteParams {
  
}

export interface GistsUpdateParams {
  
}

export interface GistsUpdateRequest {
  /**
* The description of the gist.
*/
readonly "description"?: string | undefined;
  /**
* The gist files to be updated, renamed, or deleted. Each `key` must match the current filename
* (including extension) of the targeted gist file. For example: `hello.py`.
* 
* To delete a file, set the whole file to null. For example: `hello.py : null`. The file will also be
* deleted if the specified object does not contain at least one of `content` or `filename`.
*/
readonly "files"?: Record<string, unknown> | undefined
}

export interface GistsListCommentsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* A comment made to a gist.
*/
export interface GistComment {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  /**
* The comment text.
*/
readonly "body": string;
  readonly "user": NullableSimpleUser | null;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "author_association": AuthorAssociation
}

export type GistsListComments200 = ReadonlyArray<GistComment>

export interface GistsCreateCommentParams {
  
}

export interface GistsCreateCommentRequest {
  /**
* The comment text.
*/
readonly "body": string
}

export interface GistsGetCommentParams {
  
}

export interface GistsGetComment403 {
  readonly "block"?: {
  readonly "reason"?: string | undefined;
  readonly "created_at"?: string | undefined;
  readonly "html_url"?: string | null | undefined
} | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface GistsDeleteCommentParams {
  
}

export interface GistsUpdateCommentParams {
  
}

export interface GistsUpdateCommentRequest {
  /**
* The comment text.
*/
readonly "body": string
}

export interface GistsListCommitsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Gist Commit
*/
export interface GistCommit {
  readonly "url": string;
  readonly "version": string;
  readonly "user": NullableSimpleUser | null;
  readonly "change_status": {
  readonly "total"?: number | undefined;
  readonly "additions"?: number | undefined;
  readonly "deletions"?: number | undefined
};
  readonly "committed_at": string
}

export type GistsListCommits200 = ReadonlyArray<GistCommit>

export interface GistsListForksParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type GistsListForks200 = ReadonlyArray<GistSimple>

export interface GistsForkParams {
  
}

export interface GistsCheckIsStarredParams {
  
}

export interface GistsCheckIsStarred404 {
  
}

export interface GistsStarParams {
  
}

export interface GistsUnstarParams {
  
}

export interface GistsGetRevisionParams {
  
}

export type GitignoreGetAllTemplates200 = ReadonlyArray<string>

/**
* Gitignore Template
*/
export interface GitignoreTemplate {
  readonly "name": string;
  readonly "source": string
}

export interface AppsListReposAccessibleToInstallationParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface AppsListReposAccessibleToInstallation200 {
  readonly "total_count": number;
  readonly "repositories": ReadonlyArray<Repository>;
  readonly "repository_selection"?: string | undefined
}

export type IssuesListParamsFilter = "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all"

export type IssuesListParamsState = "open" | "closed" | "all"

export type IssuesListParamsSort = "created" | "updated" | "comments"

export type IssuesListParamsDirection = "asc" | "desc"

export interface IssuesListParams {
  readonly "filter"?: IssuesListParamsFilter | undefined;
  readonly "state"?: IssuesListParamsState | undefined;
  readonly "labels"?: string | undefined;
  readonly "sort"?: IssuesListParamsSort | undefined;
  readonly "direction"?: IssuesListParamsDirection | undefined;
  readonly "since"?: string | undefined;
  readonly "collab"?: boolean | undefined;
  readonly "orgs"?: boolean | undefined;
  readonly "owned"?: boolean | undefined;
  readonly "pulls"?: boolean | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type IssuesList200 = ReadonlyArray<Issue>

export interface LicensesGetAllCommonlyUsedParams {
  readonly "featured"?: boolean | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* License Simple
*/
export interface LicenseSimple {
  readonly "key": string;
  readonly "name": string;
  readonly "url": string | null;
  readonly "spdx_id": string | null;
  readonly "node_id": string;
  readonly "html_url"?: string | undefined
}

export type LicensesGetAllCommonlyUsed200 = ReadonlyArray<LicenseSimple>

/**
* License
*/
export interface License {
  readonly "key": string;
  readonly "name": string;
  readonly "spdx_id": string | null;
  readonly "url": string | null;
  readonly "node_id": string;
  readonly "html_url": string;
  readonly "description": string;
  readonly "implementation": string;
  readonly "permissions": ReadonlyArray<string>;
  readonly "conditions": ReadonlyArray<string>;
  readonly "limitations": ReadonlyArray<string>;
  readonly "body": string;
  readonly "featured": boolean
}

/**
* The rendering mode.
*/
export type MarkdownRenderRequestMode = "markdown" | "gfm"

export interface MarkdownRenderRequest {
  /**
* The Markdown text to render in HTML.
*/
readonly "text": string;
  /**
* The rendering mode.
*/
readonly "mode"?: MarkdownRenderRequestMode | undefined;
  /**
* The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.
*/
readonly "context"?: string | undefined
}

export interface AppsGetSubscriptionPlanForAccountParams {
  
}

export type MarketplaceListingPlanPriceModel = "FREE" | "FLAT_RATE" | "PER_UNIT"

/**
* Marketplace Listing Plan
*/
export interface MarketplaceListingPlan {
  readonly "url": string;
  readonly "accounts_url": string;
  readonly "id": number;
  readonly "number": number;
  readonly "name": string;
  readonly "description": string;
  readonly "monthly_price_in_cents": number;
  readonly "yearly_price_in_cents": number;
  readonly "price_model": MarketplaceListingPlanPriceModel;
  readonly "has_free_trial": boolean;
  readonly "unit_name": string | null;
  readonly "state": string;
  readonly "bullets": ReadonlyArray<string>
}

/**
* Marketplace Purchase
*/
export interface MarketplacePurchase {
  readonly "url": string;
  readonly "type": string;
  readonly "id": number;
  readonly "login": string;
  readonly "organization_billing_email"?: string | undefined;
  readonly "email"?: string | null | undefined;
  readonly "marketplace_pending_change"?: {
  readonly "is_installed"?: boolean | undefined;
  readonly "effective_date"?: string | undefined;
  readonly "unit_count"?: number | null | undefined;
  readonly "id"?: number | undefined;
  readonly "plan"?: MarketplaceListingPlan | undefined
} | null | undefined;
  readonly "marketplace_purchase": {
  readonly "billing_cycle"?: string | undefined;
  readonly "next_billing_date"?: string | null | undefined;
  readonly "is_installed"?: boolean | undefined;
  readonly "unit_count"?: number | null | undefined;
  readonly "on_free_trial"?: boolean | undefined;
  readonly "free_trial_ends_on"?: string | null | undefined;
  readonly "updated_at"?: string | undefined;
  readonly "plan"?: MarketplaceListingPlan | undefined
}
}

export interface AppsListPlansParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type AppsListPlans200 = ReadonlyArray<MarketplaceListingPlan>

export type AppsListAccountsForPlanParamsSort = "created" | "updated"

export type AppsListAccountsForPlanParamsDirection = "asc" | "desc"

export interface AppsListAccountsForPlanParams {
  readonly "sort"?: AppsListAccountsForPlanParamsSort | undefined;
  readonly "direction"?: AppsListAccountsForPlanParamsDirection | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type AppsListAccountsForPlan200 = ReadonlyArray<MarketplacePurchase>

export interface AppsGetSubscriptionPlanForAccountStubbedParams {
  
}

export interface AppsListPlansStubbedParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type AppsListPlansStubbed200 = ReadonlyArray<MarketplaceListingPlan>

export type AppsListAccountsForPlanStubbedParamsSort = "created" | "updated"

export type AppsListAccountsForPlanStubbedParamsDirection = "asc" | "desc"

export interface AppsListAccountsForPlanStubbedParams {
  readonly "sort"?: AppsListAccountsForPlanStubbedParamsSort | undefined;
  readonly "direction"?: AppsListAccountsForPlanStubbedParamsDirection | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type AppsListAccountsForPlanStubbed200 = ReadonlyArray<MarketplacePurchase>

/**
* Api Overview
*/
export interface ApiOverview {
  readonly "verifiable_password_authentication": boolean;
  readonly "ssh_key_fingerprints"?: {
  readonly "SHA256_RSA"?: string | undefined;
  readonly "SHA256_DSA"?: string | undefined;
  readonly "SHA256_ECDSA"?: string | undefined;
  readonly "SHA256_ED25519"?: string | undefined
} | undefined;
  readonly "ssh_keys"?: ReadonlyArray<string> | undefined;
  readonly "hooks"?: ReadonlyArray<string> | undefined;
  readonly "github_enterprise_importer"?: ReadonlyArray<string> | undefined;
  readonly "web"?: ReadonlyArray<string> | undefined;
  readonly "api"?: ReadonlyArray<string> | undefined;
  readonly "git"?: ReadonlyArray<string> | undefined;
  readonly "packages"?: ReadonlyArray<string> | undefined;
  readonly "pages"?: ReadonlyArray<string> | undefined;
  readonly "importer"?: ReadonlyArray<string> | undefined;
  readonly "actions"?: ReadonlyArray<string> | undefined;
  readonly "actions_macos"?: ReadonlyArray<string> | undefined;
  readonly "codespaces"?: ReadonlyArray<string> | undefined;
  readonly "dependabot"?: ReadonlyArray<string> | undefined;
  readonly "copilot"?: ReadonlyArray<string> | undefined;
  readonly "domains"?: {
  readonly "website"?: ReadonlyArray<string> | undefined;
  readonly "codespaces"?: ReadonlyArray<string> | undefined;
  readonly "copilot"?: ReadonlyArray<string> | undefined;
  readonly "packages"?: ReadonlyArray<string> | undefined;
  readonly "actions"?: ReadonlyArray<string> | undefined;
  readonly "actions_inbound"?: {
  readonly "full_domains"?: ReadonlyArray<string> | undefined;
  readonly "wildcard_domains"?: ReadonlyArray<string> | undefined
} | undefined;
  readonly "artifact_attestations"?: {
  readonly "trust_domain"?: string | undefined;
  readonly "services"?: ReadonlyArray<string> | undefined
} | undefined
} | undefined
}

export interface ActivityListPublicEventsForRepoNetworkParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ActivityListPublicEventsForRepoNetwork200 = ReadonlyArray<Event>

export interface ActivityListNotificationsForAuthenticatedUserParams {
  readonly "all"?: boolean | undefined;
  readonly "participating"?: boolean | undefined;
  readonly "since"?: string | undefined;
  readonly "before"?: string | undefined;
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

export type SecurityAndAnalysisAdvancedSecurityStatus = "enabled" | "disabled"

export type SecurityAndAnalysisCodeSecurityStatus = "enabled" | "disabled"

/**
* The enablement status of Dependabot security updates for the repository.
*/
export type SecurityAndAnalysisDependabotSecurityUpdatesStatus = "enabled" | "disabled"

export type SecurityAndAnalysisSecretScanningStatus = "enabled" | "disabled"

export type SecurityAndAnalysisSecretScanningPushProtectionStatus = "enabled" | "disabled"

export type SecurityAndAnalysisSecretScanningNonProviderPatternsStatus = "enabled" | "disabled"

export type SecurityAndAnalysisSecretScanningAiDetectionStatus = "enabled" | "disabled"

export interface SecurityAndAnalysis {
  /**
* Enable or disable GitHub Advanced Security for the repository.
* 
* For standalone Code Scanning or Secret Protection products, this parameter cannot be used.
*/
readonly "advanced_security"?: {
  readonly "status"?: SecurityAndAnalysisAdvancedSecurityStatus | undefined
} | undefined;
  readonly "code_security"?: {
  readonly "status"?: SecurityAndAnalysisCodeSecurityStatus | undefined
} | undefined;
  /**
* Enable or disable Dependabot security updates for the repository.
*/
readonly "dependabot_security_updates"?: {
  /**
* The enablement status of Dependabot security updates for the repository.
*/
readonly "status"?: SecurityAndAnalysisDependabotSecurityUpdatesStatus | undefined
} | undefined;
  readonly "secret_scanning"?: {
  readonly "status"?: SecurityAndAnalysisSecretScanningStatus | undefined
} | undefined;
  readonly "secret_scanning_push_protection"?: {
  readonly "status"?: SecurityAndAnalysisSecretScanningPushProtectionStatus | undefined
} | undefined;
  readonly "secret_scanning_non_provider_patterns"?: {
  readonly "status"?: SecurityAndAnalysisSecretScanningNonProviderPatternsStatus | undefined
} | undefined;
  readonly "secret_scanning_ai_detection"?: {
  readonly "status"?: SecurityAndAnalysisSecretScanningAiDetectionStatus | undefined
} | undefined
}

/**
* Minimal Repository
*/
export interface MinimalRepository {
  readonly "id": number;
  readonly "node_id": string;
  readonly "name": string;
  readonly "full_name": string;
  readonly "owner": SimpleUser;
  readonly "private": boolean;
  readonly "html_url": string;
  readonly "description": string | null;
  readonly "fork": boolean;
  readonly "url": string;
  readonly "archive_url": string;
  readonly "assignees_url": string;
  readonly "blobs_url": string;
  readonly "branches_url": string;
  readonly "collaborators_url": string;
  readonly "comments_url": string;
  readonly "commits_url": string;
  readonly "compare_url": string;
  readonly "contents_url": string;
  readonly "contributors_url": string;
  readonly "deployments_url": string;
  readonly "downloads_url": string;
  readonly "events_url": string;
  readonly "forks_url": string;
  readonly "git_commits_url": string;
  readonly "git_refs_url": string;
  readonly "git_tags_url": string;
  readonly "git_url"?: string | undefined;
  readonly "issue_comment_url": string;
  readonly "issue_events_url": string;
  readonly "issues_url": string;
  readonly "keys_url": string;
  readonly "labels_url": string;
  readonly "languages_url": string;
  readonly "merges_url": string;
  readonly "milestones_url": string;
  readonly "notifications_url": string;
  readonly "pulls_url": string;
  readonly "releases_url": string;
  readonly "ssh_url"?: string | undefined;
  readonly "stargazers_url": string;
  readonly "statuses_url": string;
  readonly "subscribers_url": string;
  readonly "subscription_url": string;
  readonly "tags_url": string;
  readonly "teams_url": string;
  readonly "trees_url": string;
  readonly "clone_url"?: string | undefined;
  readonly "mirror_url"?: string | null | undefined;
  readonly "hooks_url": string;
  readonly "svn_url"?: string | undefined;
  readonly "homepage"?: string | null | undefined;
  readonly "language"?: string | null | undefined;
  readonly "forks_count"?: number | undefined;
  readonly "stargazers_count"?: number | undefined;
  readonly "watchers_count"?: number | undefined;
  /**
* The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
*/
readonly "size"?: number | undefined;
  readonly "default_branch"?: string | undefined;
  readonly "open_issues_count"?: number | undefined;
  readonly "is_template"?: boolean | undefined;
  readonly "topics"?: ReadonlyArray<string> | undefined;
  readonly "has_issues"?: boolean | undefined;
  readonly "has_projects"?: boolean | undefined;
  readonly "has_wiki"?: boolean | undefined;
  readonly "has_pages"?: boolean | undefined;
  readonly "has_downloads"?: boolean | undefined;
  readonly "has_discussions"?: boolean | undefined;
  readonly "archived"?: boolean | undefined;
  readonly "disabled"?: boolean | undefined;
  readonly "visibility"?: string | undefined;
  readonly "pushed_at"?: string | null | undefined;
  readonly "created_at"?: string | null | undefined;
  readonly "updated_at"?: string | null | undefined;
  readonly "permissions"?: {
  readonly "admin"?: boolean | undefined;
  readonly "maintain"?: boolean | undefined;
  readonly "push"?: boolean | undefined;
  readonly "triage"?: boolean | undefined;
  readonly "pull"?: boolean | undefined
} | undefined;
  readonly "role_name"?: string | undefined;
  readonly "temp_clone_token"?: string | undefined;
  readonly "delete_branch_on_merge"?: boolean | undefined;
  readonly "subscribers_count"?: number | undefined;
  readonly "network_count"?: number | undefined;
  readonly "code_of_conduct"?: CodeOfConduct | undefined;
  readonly "license"?: {
  readonly "key"?: string | undefined;
  readonly "name"?: string | undefined;
  readonly "spdx_id"?: string | undefined;
  readonly "url"?: string | undefined;
  readonly "node_id"?: string | undefined
} | null | undefined;
  readonly "forks"?: number | undefined;
  readonly "open_issues"?: number | undefined;
  readonly "watchers"?: number | undefined;
  readonly "allow_forking"?: boolean | undefined;
  readonly "web_commit_signoff_required"?: boolean | undefined;
  readonly "security_and_analysis"?: SecurityAndAnalysis | null | undefined;
  /**
* The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
*/
readonly "custom_properties"?: Record<string, unknown> | undefined
}

/**
* Thread
*/
export interface Thread {
  readonly "id": string;
  readonly "repository": MinimalRepository;
  readonly "subject": {
  readonly "title": string;
  readonly "url": string;
  readonly "latest_comment_url": string;
  readonly "type": string
};
  readonly "reason": string;
  readonly "unread": boolean;
  readonly "updated_at": string;
  readonly "last_read_at": string | null;
  readonly "url": string;
  readonly "subscription_url": string
}

export type ActivityListNotificationsForAuthenticatedUser200 = ReadonlyArray<Thread>

export interface ActivityMarkNotificationsAsReadRequest {
  /**
* Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
*/
readonly "last_read_at"?: string | undefined;
  /**
* Whether the notification has been read.
*/
readonly "read"?: boolean | undefined
}

export interface ActivityMarkNotificationsAsRead202 {
  readonly "message"?: string | undefined
}

export interface ActivityGetThreadParams {
  
}

export interface ActivityMarkThreadAsDoneParams {
  
}

export interface ActivityMarkThreadAsReadParams {
  
}

export interface ActivityGetThreadSubscriptionForAuthenticatedUserParams {
  
}

/**
* Thread Subscription
*/
export interface ThreadSubscription {
  readonly "subscribed": boolean;
  readonly "ignored": boolean;
  readonly "reason": string | null;
  readonly "created_at": string | null;
  readonly "url": string;
  readonly "thread_url"?: string | undefined;
  readonly "repository_url"?: string | undefined
}

export interface ActivitySetThreadSubscriptionParams {
  
}

export interface ActivitySetThreadSubscriptionRequest {
  /**
* Whether to block all notifications from a thread.
*/
readonly "ignored"?: boolean | undefined
}

export interface ActivityDeleteThreadSubscriptionParams {
  
}

export interface MetaGetOctocatParams {
  readonly "s"?: string | undefined
}

export interface OrgsListParams {
  readonly "since"?: number | undefined;
  readonly "per_page"?: number | undefined
}

/**
* A GitHub organization.
*/
export interface OrganizationSimple {
  readonly "login": string;
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "repos_url": string;
  readonly "events_url": string;
  readonly "hooks_url": string;
  readonly "issues_url": string;
  readonly "members_url": string;
  readonly "public_members_url": string;
  readonly "avatar_url": string;
  readonly "description": string | null
}

export type OrgsList200 = ReadonlyArray<OrganizationSimple>

export interface DependabotRepositoryAccessForOrgParams {
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

/**
* The default repository access level for Dependabot updates.
*/
export type DependabotRepositoryAccessDetailsDefaultLevel = "public" | "internal"

/**
* A GitHub repository.
*/
export interface NullableSimpleRepository {
  /**
* A unique identifier of the repository.
*/
readonly "id": number;
  /**
* The GraphQL identifier of the repository.
*/
readonly "node_id": string;
  /**
* The name of the repository.
*/
readonly "name": string;
  /**
* The full, globally unique, name of the repository.
*/
readonly "full_name": string;
  readonly "owner": SimpleUser;
  /**
* Whether the repository is private.
*/
readonly "private": boolean;
  /**
* The URL to view the repository on GitHub.com.
*/
readonly "html_url": string;
  /**
* The repository description.
*/
readonly "description": string | null;
  /**
* Whether the repository is a fork.
*/
readonly "fork": boolean;
  /**
* The URL to get more information about the repository from the GitHub API.
*/
readonly "url": string;
  /**
* A template for the API URL to download the repository as an archive.
*/
readonly "archive_url": string;
  /**
* A template for the API URL to list the available assignees for issues in the repository.
*/
readonly "assignees_url": string;
  /**
* A template for the API URL to create or retrieve a raw Git blob in the repository.
*/
readonly "blobs_url": string;
  /**
* A template for the API URL to get information about branches in the repository.
*/
readonly "branches_url": string;
  /**
* A template for the API URL to get information about collaborators of the repository.
*/
readonly "collaborators_url": string;
  /**
* A template for the API URL to get information about comments on the repository.
*/
readonly "comments_url": string;
  /**
* A template for the API URL to get information about commits on the repository.
*/
readonly "commits_url": string;
  /**
* A template for the API URL to compare two commits or refs.
*/
readonly "compare_url": string;
  /**
* A template for the API URL to get the contents of the repository.
*/
readonly "contents_url": string;
  /**
* A template for the API URL to list the contributors to the repository.
*/
readonly "contributors_url": string;
  /**
* The API URL to list the deployments of the repository.
*/
readonly "deployments_url": string;
  /**
* The API URL to list the downloads on the repository.
*/
readonly "downloads_url": string;
  /**
* The API URL to list the events of the repository.
*/
readonly "events_url": string;
  /**
* The API URL to list the forks of the repository.
*/
readonly "forks_url": string;
  /**
* A template for the API URL to get information about Git commits of the repository.
*/
readonly "git_commits_url": string;
  /**
* A template for the API URL to get information about Git refs of the repository.
*/
readonly "git_refs_url": string;
  /**
* A template for the API URL to get information about Git tags of the repository.
*/
readonly "git_tags_url": string;
  /**
* A template for the API URL to get information about issue comments on the repository.
*/
readonly "issue_comment_url": string;
  /**
* A template for the API URL to get information about issue events on the repository.
*/
readonly "issue_events_url": string;
  /**
* A template for the API URL to get information about issues on the repository.
*/
readonly "issues_url": string;
  /**
* A template for the API URL to get information about deploy keys on the repository.
*/
readonly "keys_url": string;
  /**
* A template for the API URL to get information about labels of the repository.
*/
readonly "labels_url": string;
  /**
* The API URL to get information about the languages of the repository.
*/
readonly "languages_url": string;
  /**
* The API URL to merge branches in the repository.
*/
readonly "merges_url": string;
  /**
* A template for the API URL to get information about milestones of the repository.
*/
readonly "milestones_url": string;
  /**
* A template for the API URL to get information about notifications on the repository.
*/
readonly "notifications_url": string;
  /**
* A template for the API URL to get information about pull requests on the repository.
*/
readonly "pulls_url": string;
  /**
* A template for the API URL to get information about releases on the repository.
*/
readonly "releases_url": string;
  /**
* The API URL to list the stargazers on the repository.
*/
readonly "stargazers_url": string;
  /**
* A template for the API URL to get information about statuses of a commit.
*/
readonly "statuses_url": string;
  /**
* The API URL to list the subscribers on the repository.
*/
readonly "subscribers_url": string;
  /**
* The API URL to subscribe to notifications for this repository.
*/
readonly "subscription_url": string;
  /**
* The API URL to get information about tags on the repository.
*/
readonly "tags_url": string;
  /**
* The API URL to list the teams on the repository.
*/
readonly "teams_url": string;
  /**
* A template for the API URL to create or retrieve a raw Git tree of the repository.
*/
readonly "trees_url": string;
  /**
* The API URL to list the hooks on the repository.
*/
readonly "hooks_url": string
}

/**
* Information about repositories that Dependabot is able to access in an organization
*/
export interface DependabotRepositoryAccessDetails {
  /**
* The default repository access level for Dependabot updates.
*/
readonly "default_level"?: DependabotRepositoryAccessDetailsDefaultLevel | null | undefined;
  readonly "accessible_repositories"?: ReadonlyArray<NullableSimpleRepository> | undefined
}

export interface DependabotUpdateRepositoryAccessForOrgParams {
  
}

export interface DependabotUpdateRepositoryAccessForOrgRequest {
  /**
* List of repository IDs to add.
*/
readonly "repository_ids_to_add"?: ReadonlyArray<number> | undefined;
  /**
* List of repository IDs to remove.
*/
readonly "repository_ids_to_remove"?: ReadonlyArray<number> | undefined
}

export interface DependabotSetRepositoryAccessDefaultLevelParams {
  
}

/**
* The default repository access level for Dependabot updates.
*/
export type DependabotSetRepositoryAccessDefaultLevelRequestDefaultLevel = "public" | "internal"

export interface DependabotSetRepositoryAccessDefaultLevelRequest {
  /**
* The default repository access level for Dependabot updates.
*/
readonly "default_level": DependabotSetRepositoryAccessDefaultLevelRequestDefaultLevel
}

export interface BillingGetGithubBillingUsageReportOrgParams {
  readonly "year"?: number | undefined;
  readonly "month"?: number | undefined;
  readonly "day"?: number | undefined;
  readonly "hour"?: number | undefined
}

export interface BillingUsageReport {
  readonly "usageItems"?: ReadonlyArray<{
  /**
* Date of the usage line item.
*/
readonly "date": string;
  /**
* Product name.
*/
readonly "product": string;
  /**
* SKU name.
*/
readonly "sku": string;
  /**
* Quantity of the usage line item.
*/
readonly "quantity": number;
  /**
* Unit type of the usage line item.
*/
readonly "unitType": string;
  /**
* Price per unit of the usage line item.
*/
readonly "pricePerUnit": number;
  /**
* Gross amount of the usage line item.
*/
readonly "grossAmount": number;
  /**
* Discount amount of the usage line item.
*/
readonly "discountAmount": number;
  /**
* Net amount of the usage line item.
*/
readonly "netAmount": number;
  /**
* Name of the organization.
*/
readonly "organizationName": string;
  /**
* Name of the repository.
*/
readonly "repositoryName"?: string | undefined
}> | undefined
}

export interface BillingGetGithubBillingUsageReportOrg503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface OrgsGetParams {
  
}

/**
* Organization Full
*/
export interface OrganizationFull {
  readonly "login": string;
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "repos_url": string;
  readonly "events_url": string;
  readonly "hooks_url": string;
  readonly "issues_url": string;
  readonly "members_url": string;
  readonly "public_members_url": string;
  readonly "avatar_url": string;
  readonly "description": string | null;
  readonly "name"?: string | undefined;
  readonly "company"?: string | undefined;
  readonly "blog"?: string | undefined;
  readonly "location"?: string | undefined;
  readonly "email"?: string | undefined;
  readonly "twitter_username"?: string | null | undefined;
  readonly "is_verified"?: boolean | undefined;
  readonly "has_organization_projects": boolean;
  readonly "has_repository_projects": boolean;
  readonly "public_repos": number;
  readonly "public_gists": number;
  readonly "followers": number;
  readonly "following": number;
  readonly "html_url": string;
  readonly "type": string;
  readonly "total_private_repos"?: number | undefined;
  readonly "owned_private_repos"?: number | undefined;
  readonly "private_gists"?: number | null | undefined;
  readonly "disk_usage"?: number | null | undefined;
  /**
* The number of collaborators on private repositories.
* 
* This field may be null if the number of private repositories is over 50,000.
*/
readonly "collaborators"?: number | null | undefined;
  readonly "billing_email"?: string | null | undefined;
  readonly "plan"?: {
  readonly "name": string;
  readonly "space": number;
  readonly "private_repos": number;
  readonly "filled_seats"?: number | undefined;
  readonly "seats"?: number | undefined
} | undefined;
  readonly "default_repository_permission"?: string | null | undefined;
  /**
* The default branch for repositories created in this organization.
*/
readonly "default_repository_branch"?: string | null | undefined;
  readonly "members_can_create_repositories"?: boolean | null | undefined;
  readonly "two_factor_requirement_enabled"?: boolean | null | undefined;
  readonly "members_allowed_repository_creation_type"?: string | undefined;
  readonly "members_can_create_public_repositories"?: boolean | undefined;
  readonly "members_can_create_private_repositories"?: boolean | undefined;
  readonly "members_can_create_internal_repositories"?: boolean | undefined;
  readonly "members_can_create_pages"?: boolean | undefined;
  readonly "members_can_create_public_pages"?: boolean | undefined;
  readonly "members_can_create_private_pages"?: boolean | undefined;
  readonly "members_can_delete_repositories"?: boolean | undefined;
  readonly "members_can_change_repo_visibility"?: boolean | undefined;
  readonly "members_can_invite_outside_collaborators"?: boolean | undefined;
  readonly "members_can_delete_issues"?: boolean | undefined;
  readonly "display_commenter_full_name_setting_enabled"?: boolean | undefined;
  readonly "readers_can_create_discussions"?: boolean | undefined;
  readonly "members_can_create_teams"?: boolean | undefined;
  readonly "members_can_view_dependency_insights"?: boolean | undefined;
  readonly "members_can_fork_private_repositories"?: boolean | null | undefined;
  readonly "web_commit_signoff_required"?: boolean | undefined;
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
* 
* This field is only visible to organization owners or members of a team with the security manager role.
*/
readonly "advanced_security_enabled_for_new_repositories"?: boolean | undefined;
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether Dependabot alerts are automatically enabled for new repositories and repositories transferred to this organization.
* 
* This field is only visible to organization owners or members of a team with the security manager role.
*/
readonly "dependabot_alerts_enabled_for_new_repositories"?: boolean | undefined;
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether Dependabot security updates are automatically enabled for new repositories and repositories transferred to this organization.
* 
* This field is only visible to organization owners or members of a team with the security manager role.
*/
readonly "dependabot_security_updates_enabled_for_new_repositories"?: boolean | undefined;
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether dependency graph is automatically enabled for new repositories and repositories transferred to this organization.
* 
* This field is only visible to organization owners or members of a team with the security manager role.
*/
readonly "dependency_graph_enabled_for_new_repositories"?: boolean | undefined;
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether secret scanning is automatically enabled for new repositories and repositories transferred to this organization.
* 
* This field is only visible to organization owners or members of a team with the security manager role.
*/
readonly "secret_scanning_enabled_for_new_repositories"?: boolean | undefined;
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether secret scanning push protection is automatically enabled for new repositories and repositories transferred to this organization.
* 
* This field is only visible to organization owners or members of a team with the security manager role.
*/
readonly "secret_scanning_push_protection_enabled_for_new_repositories"?: boolean | undefined;
  /**
* Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
*/
readonly "secret_scanning_push_protection_custom_link_enabled"?: boolean | undefined;
  /**
* An optional URL string to display to contributors who are blocked from pushing a secret.
*/
readonly "secret_scanning_push_protection_custom_link"?: string | null | undefined;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "archived_at": string | null;
  /**
* Controls whether or not deploy keys may be added and used for repositories in the organization.
*/
readonly "deploy_keys_enabled_for_repositories"?: boolean | undefined
}

export interface OrgsDeleteParams {
  
}

export type OrgsDelete202 = Record<string, unknown>

export interface OrgsUpdateParams {
  
}

/**
* Default permission level members have for organization repositories.
*/
export type OrgsUpdateRequestDefaultRepositoryPermission = "read" | "write" | "admin" | "none"

/**
* Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud. 
* **Note:** This parameter is closing down and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
*/
export type OrgsUpdateRequestMembersAllowedRepositoryCreationType = "all" | "private" | "none"

export interface OrgsUpdateRequest {
  /**
* Billing email address. This address is not publicized.
*/
readonly "billing_email"?: string | undefined;
  /**
* The company name.
*/
readonly "company"?: string | undefined;
  /**
* The publicly visible email address.
*/
readonly "email"?: string | undefined;
  /**
* The Twitter username of the company.
*/
readonly "twitter_username"?: string | undefined;
  /**
* The location.
*/
readonly "location"?: string | undefined;
  /**
* The shorthand name of the company.
*/
readonly "name"?: string | undefined;
  /**
* The description of the company. The maximum size is 160 characters.
*/
readonly "description"?: string | undefined;
  /**
* Whether an organization can use organization projects.
*/
readonly "has_organization_projects"?: boolean | undefined;
  /**
* Whether repositories that belong to the organization can use repository projects.
*/
readonly "has_repository_projects"?: boolean | undefined;
  /**
* Default permission level members have for organization repositories.
*/
readonly "default_repository_permission"?: OrgsUpdateRequestDefaultRepositoryPermission | undefined;
  /**
* Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
*/
readonly "members_can_create_repositories"?: boolean | undefined;
  /**
* Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
*/
readonly "members_can_create_internal_repositories"?: boolean | undefined;
  /**
* Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
*/
readonly "members_can_create_private_repositories"?: boolean | undefined;
  /**
* Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
*/
readonly "members_can_create_public_repositories"?: boolean | undefined;
  /**
* Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud. 
* **Note:** This parameter is closing down and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
*/
readonly "members_allowed_repository_creation_type"?: OrgsUpdateRequestMembersAllowedRepositoryCreationType | undefined;
  /**
* Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
*/
readonly "members_can_create_pages"?: boolean | undefined;
  /**
* Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
*/
readonly "members_can_create_public_pages"?: boolean | undefined;
  /**
* Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
*/
readonly "members_can_create_private_pages"?: boolean | undefined;
  /**
* Whether organization members can fork private organization repositories.
*/
readonly "members_can_fork_private_repositories"?: boolean | undefined;
  /**
* Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.
*/
readonly "web_commit_signoff_required"?: boolean | undefined;
  readonly "blog"?: string | undefined;
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to this organization.
* 
* To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
*/
readonly "advanced_security_enabled_for_new_repositories"?: boolean | undefined;
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether Dependabot alerts are automatically enabled for new repositories and repositories transferred to this organization.
* 
* To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
*/
readonly "dependabot_alerts_enabled_for_new_repositories"?: boolean | undefined;
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether Dependabot security updates are automatically enabled for new repositories and repositories transferred to this organization.
* 
* To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
*/
readonly "dependabot_security_updates_enabled_for_new_repositories"?: boolean | undefined;
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether dependency graph is automatically enabled for new repositories and repositories transferred to this organization.
* 
* To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
*/
readonly "dependency_graph_enabled_for_new_repositories"?: boolean | undefined;
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether secret scanning is automatically enabled for new repositories and repositories transferred to this organization.
* 
* To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
*/
readonly "secret_scanning_enabled_for_new_repositories"?: boolean | undefined;
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether secret scanning push protection is automatically enabled for new repositories and repositories transferred to this organization.
* 
* To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
*/
readonly "secret_scanning_push_protection_enabled_for_new_repositories"?: boolean | undefined;
  /**
* Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
*/
readonly "secret_scanning_push_protection_custom_link_enabled"?: boolean | undefined;
  /**
* If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret.
*/
readonly "secret_scanning_push_protection_custom_link"?: string | undefined;
  /**
* Controls whether or not deploy keys may be added and used for repositories in the organization.
*/
readonly "deploy_keys_enabled_for_repositories"?: boolean | undefined
}

export type OrgsUpdate422 = ValidationError | ValidationErrorSimple

export interface ActionsGetActionsCacheUsageForOrgParams {
  
}

export interface ActionsCacheUsageOrgEnterprise {
  /**
* The count of active caches across all repositories of an enterprise or an organization.
*/
readonly "total_active_caches_count": number;
  /**
* The total size in bytes of all active cache items across all repositories of an enterprise or an organization.
*/
readonly "total_active_caches_size_in_bytes": number
}

export interface ActionsGetActionsCacheUsageByRepoForOrgParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* GitHub Actions Cache Usage by repository.
*/
export interface ActionsCacheUsageByRepository {
  /**
* The repository owner and name for the cache usage being shown.
*/
readonly "full_name": string;
  /**
* The sum of the size in bytes of all the active cache items in the repository.
*/
readonly "active_caches_size_in_bytes": number;
  /**
* The number of active caches in the repository.
*/
readonly "active_caches_count": number
}

export interface ActionsGetActionsCacheUsageByRepoForOrg200 {
  readonly "total_count": number;
  readonly "repository_cache_usages": ReadonlyArray<ActionsCacheUsageByRepository>
}

export interface ActionsListHostedRunnersForOrgParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* The image provider.
*/
export type NullableActionsHostedRunnerPoolImageSource = "github" | "partner" | "custom"

/**
* Provides details of a hosted runner image
*/
export interface NullableActionsHostedRunnerPoolImage {
  /**
* The ID of the image. Use this ID for the `image` parameter when creating a new larger runner.
*/
readonly "id": string;
  /**
* Image size in GB.
*/
readonly "size_gb": number;
  /**
* Display name for this image.
*/
readonly "display_name": string;
  /**
* The image provider.
*/
readonly "source": NullableActionsHostedRunnerPoolImageSource
}

/**
* Provides details of a particular machine spec.
*/
export interface ActionsHostedRunnerMachineSpec {
  /**
* The ID used for the `size` parameter when creating a new runner.
*/
readonly "id": string;
  /**
* The number of cores.
*/
readonly "cpu_cores": number;
  /**
* The available RAM for the machine spec.
*/
readonly "memory_gb": number;
  /**
* The available SSD storage for the machine spec.
*/
readonly "storage_gb": number
}

/**
* The status of the runner.
*/
export type ActionsHostedRunnerStatus = "Ready" | "Provisioning" | "Shutdown" | "Deleting" | "Stuck"

/**
* Provides details of Public IP for a GitHub-hosted larger runners
*/
export interface PublicIp {
  /**
* Whether public IP is enabled.
*/
readonly "enabled"?: boolean | undefined;
  /**
* The prefix for the public IP.
*/
readonly "prefix"?: string | undefined;
  /**
* The length of the IP prefix.
*/
readonly "length"?: number | undefined
}

/**
* A Github-hosted hosted runner.
*/
export interface ActionsHostedRunner {
  /**
* The unique identifier of the hosted runner.
*/
readonly "id": number;
  /**
* The name of the hosted runner.
*/
readonly "name": string;
  /**
* The unique identifier of the group that the hosted runner belongs to.
*/
readonly "runner_group_id"?: number | undefined;
  readonly "image_details": NullableActionsHostedRunnerPoolImage | null;
  readonly "machine_size_details": ActionsHostedRunnerMachineSpec;
  /**
* The status of the runner.
*/
readonly "status": ActionsHostedRunnerStatus;
  /**
* The operating system of the image.
*/
readonly "platform": string;
  /**
* The maximum amount of hosted runners. Runners will not scale automatically above this number. Use this setting to limit your cost.
*/
readonly "maximum_runners"?: number | undefined;
  /**
* Whether public IP is enabled for the hosted runners.
*/
readonly "public_ip_enabled": boolean;
  /**
* The public IP ranges when public IP is enabled for the hosted runners.
*/
readonly "public_ips"?: ReadonlyArray<PublicIp> | undefined;
  /**
* The time at which the runner was last used, in ISO 8601 format.
*/
readonly "last_active_on"?: string | null | undefined
}

export interface ActionsListHostedRunnersForOrg200 {
  readonly "total_count": number;
  readonly "runners": ReadonlyArray<ActionsHostedRunner>
}

export interface ActionsCreateHostedRunnerForOrgParams {
  
}

/**
* The source of the runner image.
*/
export type ActionsCreateHostedRunnerForOrgRequestImageSource = "github" | "partner" | "custom"

export interface ActionsCreateHostedRunnerForOrgRequest {
  /**
* Name of the runner. Must be between 1 and 64 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'.
*/
readonly "name": string;
  /**
* The image of runner. To list all available images, use `GET /actions/hosted-runners/images/github-owned` or `GET /actions/hosted-runners/images/partner`.
*/
readonly "image": {
  /**
* The unique identifier of the runner image.
*/
readonly "id"?: string | undefined;
  /**
* The source of the runner image.
*/
readonly "source"?: ActionsCreateHostedRunnerForOrgRequestImageSource | undefined
};
  /**
* The machine size of the runner. To list available sizes, use `GET actions/hosted-runners/machine-sizes`
*/
readonly "size": string;
  /**
* The existing runner group to add this runner to.
*/
readonly "runner_group_id": number;
  /**
* The maximum amount of runners to scale up to. Runners will not auto-scale above this number. Use this setting to limit your cost.
*/
readonly "maximum_runners"?: number | undefined;
  /**
* Whether this runner should be created with a static public IP. Note limit on account. To list limits on account, use `GET actions/hosted-runners/limits`
*/
readonly "enable_static_ip"?: boolean | undefined
}

export interface ActionsGetHostedRunnersGithubOwnedImagesForOrgParams {
  
}

/**
* The image provider.
*/
export type ActionsHostedRunnerCuratedImageSource = "github" | "partner" | "custom"

/**
* Provides details of a hosted runner image
*/
export interface ActionsHostedRunnerCuratedImage {
  /**
* The ID of the image. Use this ID for the `image` parameter when creating a new larger runner.
*/
readonly "id": string;
  /**
* The operating system of the image.
*/
readonly "platform": string;
  /**
* Image size in GB.
*/
readonly "size_gb": number;
  /**
* Display name for this image.
*/
readonly "display_name": string;
  /**
* The image provider.
*/
readonly "source": ActionsHostedRunnerCuratedImageSource
}

export interface ActionsGetHostedRunnersGithubOwnedImagesForOrg200 {
  readonly "total_count": number;
  readonly "images": ReadonlyArray<ActionsHostedRunnerCuratedImage>
}

export interface ActionsGetHostedRunnersPartnerImagesForOrgParams {
  
}

export interface ActionsGetHostedRunnersPartnerImagesForOrg200 {
  readonly "total_count": number;
  readonly "images": ReadonlyArray<ActionsHostedRunnerCuratedImage>
}

export interface ActionsGetHostedRunnersLimitsForOrgParams {
  
}

export interface ActionsHostedRunnerLimits {
  /**
* Provides details of static public IP limits for GitHub-hosted Hosted Runners
*/
readonly "public_ips": {
  /**
* The maximum number of static public IP addresses that can be used for Hosted Runners.
*/
readonly "maximum": number;
  /**
* The current number of static public IP addresses in use by Hosted Runners.
*/
readonly "current_usage": number
}
}

export interface ActionsGetHostedRunnersMachineSpecsForOrgParams {
  
}

export interface ActionsGetHostedRunnersMachineSpecsForOrg200 {
  readonly "total_count": number;
  readonly "machine_specs": ReadonlyArray<ActionsHostedRunnerMachineSpec>
}

export interface ActionsGetHostedRunnersPlatformsForOrgParams {
  
}

export interface ActionsGetHostedRunnersPlatformsForOrg200 {
  readonly "total_count": number;
  readonly "platforms": ReadonlyArray<string>
}

export interface ActionsGetHostedRunnerForOrgParams {
  
}

export interface ActionsDeleteHostedRunnerForOrgParams {
  
}

export interface ActionsUpdateHostedRunnerForOrgParams {
  
}

export interface ActionsUpdateHostedRunnerForOrgRequest {
  /**
* Name of the runner. Must be between 1 and 64 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'.
*/
readonly "name"?: string | undefined;
  /**
* The existing runner group to add this runner to.
*/
readonly "runner_group_id"?: number | undefined;
  /**
* The maximum amount of runners to scale up to. Runners will not auto-scale above this number. Use this setting to limit your cost.
*/
readonly "maximum_runners"?: number | undefined;
  /**
* Whether this runner should be updated with a static public IP. Note limit on account. To list limits on account, use `GET actions/hosted-runners/limits`
*/
readonly "enable_static_ip"?: boolean | undefined
}

export interface OidcGetOidcCustomSubTemplateForOrgParams {
  
}

/**
* Actions OIDC Subject customization
*/
export interface OidcCustomSub {
  /**
* Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
*/
readonly "include_claim_keys": ReadonlyArray<string>
}

export interface OidcUpdateOidcCustomSubTemplateForOrgParams {
  
}

/**
* An object without any properties.
*/
export interface EmptyObject {
  
}

export interface ActionsGetGithubActionsPermissionsOrganizationParams {
  
}

/**
* The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
*/
export type EnabledRepositories = "all" | "none" | "selected"

/**
* The permissions policy that controls the actions and reusable workflows that are allowed to run.
*/
export type AllowedActions = "all" | "local_only" | "selected"

/**
* The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`.
*/
export type SelectedActionsUrl = string

/**
* Whether actions must be pinned to a full-length commit SHA.
*/
export type ShaPinningRequired = boolean

export interface ActionsOrganizationPermissions {
  readonly "enabled_repositories": EnabledRepositories;
  /**
* The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.
*/
readonly "selected_repositories_url"?: string | undefined;
  readonly "allowed_actions"?: AllowedActions | undefined;
  readonly "selected_actions_url"?: SelectedActionsUrl | undefined;
  readonly "sha_pinning_required"?: ShaPinningRequired | undefined
}

export interface ActionsSetGithubActionsPermissionsOrganizationParams {
  
}

export interface ActionsSetGithubActionsPermissionsOrganizationRequest {
  readonly "enabled_repositories": EnabledRepositories;
  readonly "allowed_actions"?: AllowedActions | undefined;
  readonly "sha_pinning_required"?: ShaPinningRequired | undefined
}

export interface ActionsGetArtifactAndLogRetentionSettingsOrganizationParams {
  
}

export interface ActionsArtifactAndLogRetentionResponse {
  /**
* The number of days artifacts and logs are retained
*/
readonly "days": number;
  /**
* The maximum number of days that can be configured
*/
readonly "maximum_allowed_days": number
}

export interface ActionsSetArtifactAndLogRetentionSettingsOrganizationParams {
  
}

export interface ActionsArtifactAndLogRetention {
  /**
* The number of days to retain artifacts and logs
*/
readonly "days": number
}

export interface ActionsGetForkPrContributorApprovalPermissionsOrganizationParams {
  
}

/**
* The policy that controls when fork PR workflows require approval from a maintainer.
*/
export type ActionsForkPrContributorApprovalApprovalPolicy = "first_time_contributors_new_to_github" | "first_time_contributors" | "all_external_contributors"

export interface ActionsForkPrContributorApproval {
  /**
* The policy that controls when fork PR workflows require approval from a maintainer.
*/
readonly "approval_policy": ActionsForkPrContributorApprovalApprovalPolicy
}

export interface ActionsSetForkPrContributorApprovalPermissionsOrganizationParams {
  
}

export interface ActionsGetPrivateRepoForkPrWorkflowsSettingsOrganizationParams {
  
}

export interface ActionsForkPrWorkflowsPrivateRepos {
  /**
* Whether workflows triggered by pull requests from forks are allowed to run on private repositories.
*/
readonly "run_workflows_from_fork_pull_requests": boolean;
  /**
* Whether GitHub Actions can create pull requests or submit approving pull request reviews from a workflow triggered by a fork pull request.
*/
readonly "send_write_tokens_to_workflows": boolean;
  /**
* Whether to make secrets and variables available to workflows triggered by pull requests from forks.
*/
readonly "send_secrets_and_variables": boolean;
  /**
* Whether workflows triggered by pull requests from forks require approval from a repository administrator to run.
*/
readonly "require_approval_for_fork_pr_workflows": boolean
}

export interface ActionsSetPrivateRepoForkPrWorkflowsSettingsOrganizationParams {
  
}

export interface ActionsForkPrWorkflowsPrivateReposRequest {
  /**
* Whether workflows triggered by pull requests from forks are allowed to run on private repositories.
*/
readonly "run_workflows_from_fork_pull_requests": boolean;
  /**
* Whether GitHub Actions can create pull requests or submit approving pull request reviews from a workflow triggered by a fork pull request.
*/
readonly "send_write_tokens_to_workflows"?: boolean | undefined;
  /**
* Whether to make secrets and variables available to workflows triggered by pull requests from forks.
*/
readonly "send_secrets_and_variables"?: boolean | undefined;
  /**
* Whether workflows triggered by pull requests from forks require approval from a repository administrator to run.
*/
readonly "require_approval_for_fork_pr_workflows"?: boolean | undefined
}

export interface ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200 {
  readonly "total_count": number;
  readonly "repositories": ReadonlyArray<Repository>
}

export interface ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParams {
  
}

export interface ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest {
  /**
* List of repository IDs to enable for GitHub Actions.
*/
readonly "selected_repository_ids": ReadonlyArray<number>
}

export interface ActionsEnableSelectedRepositoryGithubActionsOrganizationParams {
  
}

export interface ActionsDisableSelectedRepositoryGithubActionsOrganizationParams {
  
}

export interface ActionsGetAllowedActionsOrganizationParams {
  
}

export interface SelectedActions {
  /**
* Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.
*/
readonly "github_owned_allowed"?: boolean | undefined;
  /**
* Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators.
*/
readonly "verified_allowed"?: boolean | undefined;
  /**
* Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.
* 
* > [!NOTE]
* > The `patterns_allowed` setting only applies to public repositories.
*/
readonly "patterns_allowed"?: ReadonlyArray<string> | undefined
}

export interface ActionsSetAllowedActionsOrganizationParams {
  
}

export interface ActionsGetSelfHostedRunnersPermissionsOrganizationParams {
  
}

/**
* The policy that controls whether self-hosted runners can be used by repositories in the organization
*/
export type SelfHostedRunnersSettingsEnabledRepositories = "all" | "selected" | "none"

export interface SelfHostedRunnersSettings {
  /**
* The policy that controls whether self-hosted runners can be used by repositories in the organization
*/
readonly "enabled_repositories": SelfHostedRunnersSettingsEnabledRepositories;
  /**
* The URL to the endpoint for managing selected repositories for self-hosted runners in the organization
*/
readonly "selected_repositories_url"?: string | undefined
}

export interface ActionsSetSelfHostedRunnersPermissionsOrganizationParams {
  
}

/**
* The policy that controls whether self-hosted runners can be used in the organization
*/
export type ActionsSetSelfHostedRunnersPermissionsOrganizationRequestEnabledRepositories = "all" | "selected" | "none"

export interface ActionsSetSelfHostedRunnersPermissionsOrganizationRequest {
  /**
* The policy that controls whether self-hosted runners can be used in the organization
*/
readonly "enabled_repositories": ActionsSetSelfHostedRunnersPermissionsOrganizationRequestEnabledRepositories
}

export interface ActionsListSelectedRepositoriesSelfHostedRunnersOrganizationParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface ActionsListSelectedRepositoriesSelfHostedRunnersOrganization200 {
  readonly "total_count"?: number | undefined;
  readonly "repositories"?: ReadonlyArray<Repository> | undefined
}

export interface ActionsSetSelectedRepositoriesSelfHostedRunnersOrganizationParams {
  
}

export interface ActionsSetSelectedRepositoriesSelfHostedRunnersOrganizationRequest {
  /**
* IDs of repositories that can use repository-level self-hosted runners
*/
readonly "selected_repository_ids": ReadonlyArray<number>
}

export interface ActionsEnableSelectedRepositorySelfHostedRunnersOrganizationParams {
  
}

export interface ActionsDisableSelectedRepositorySelfHostedRunnersOrganizationParams {
  
}

export interface ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationParams {
  
}

/**
* The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
*/
export type ActionsDefaultWorkflowPermissions = "read" | "write"

/**
* Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.
*/
export type ActionsCanApprovePullRequestReviews = boolean

export interface ActionsGetDefaultWorkflowPermissions {
  readonly "default_workflow_permissions": ActionsDefaultWorkflowPermissions;
  readonly "can_approve_pull_request_reviews": ActionsCanApprovePullRequestReviews
}

export interface ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationParams {
  
}

export interface ActionsSetDefaultWorkflowPermissions {
  readonly "default_workflow_permissions"?: ActionsDefaultWorkflowPermissions | undefined;
  readonly "can_approve_pull_request_reviews"?: ActionsCanApprovePullRequestReviews | undefined
}

export interface ActionsListSelfHostedRunnerGroupsForOrgParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined;
  readonly "visible_to_repository"?: string | undefined
}

export interface RunnerGroupsOrg {
  readonly "id": number;
  readonly "name": string;
  readonly "visibility": string;
  readonly "default": boolean;
  /**
* Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected`
*/
readonly "selected_repositories_url"?: string | undefined;
  readonly "runners_url": string;
  readonly "hosted_runners_url"?: string | undefined;
  /**
* The identifier of a hosted compute network configuration.
*/
readonly "network_configuration_id"?: string | undefined;
  readonly "inherited": boolean;
  readonly "inherited_allows_public_repositories"?: boolean | undefined;
  readonly "allows_public_repositories": boolean;
  /**
* If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.
*/
readonly "workflow_restrictions_read_only"?: boolean | undefined;
  /**
* If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
*/
readonly "restricted_to_workflows"?: boolean | undefined;
  /**
* List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
*/
readonly "selected_workflows"?: ReadonlyArray<string> | undefined
}

export interface ActionsListSelfHostedRunnerGroupsForOrg200 {
  readonly "total_count": number;
  readonly "runner_groups": ReadonlyArray<RunnerGroupsOrg>
}

export interface ActionsCreateSelfHostedRunnerGroupForOrgParams {
  
}

/**
* Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories.
*/
export type ActionsCreateSelfHostedRunnerGroupForOrgRequestVisibility = "selected" | "all" | "private"

export interface ActionsCreateSelfHostedRunnerGroupForOrgRequest {
  /**
* Name of the runner group.
*/
readonly "name": string;
  /**
* Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories.
*/
readonly "visibility"?: ActionsCreateSelfHostedRunnerGroupForOrgRequestVisibility | undefined;
  /**
* List of repository IDs that can access the runner group.
*/
readonly "selected_repository_ids"?: ReadonlyArray<number> | undefined;
  /**
* List of runner IDs to add to the runner group.
*/
readonly "runners"?: ReadonlyArray<number> | undefined;
  /**
* Whether the runner group can be used by `public` repositories.
*/
readonly "allows_public_repositories"?: boolean | undefined;
  /**
* If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
*/
readonly "restricted_to_workflows"?: boolean | undefined;
  /**
* List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
*/
readonly "selected_workflows"?: ReadonlyArray<string> | undefined;
  /**
* The identifier of a hosted compute network configuration.
*/
readonly "network_configuration_id"?: string | undefined
}

export interface ActionsGetSelfHostedRunnerGroupForOrgParams {
  
}

export interface ActionsDeleteSelfHostedRunnerGroupFromOrgParams {
  
}

export interface ActionsUpdateSelfHostedRunnerGroupForOrgParams {
  
}

/**
* Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories.
*/
export type ActionsUpdateSelfHostedRunnerGroupForOrgRequestVisibility = "selected" | "all" | "private"

export interface ActionsUpdateSelfHostedRunnerGroupForOrgRequest {
  /**
* Name of the runner group.
*/
readonly "name": string;
  /**
* Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories.
*/
readonly "visibility"?: ActionsUpdateSelfHostedRunnerGroupForOrgRequestVisibility | undefined;
  /**
* Whether the runner group can be used by `public` repositories.
*/
readonly "allows_public_repositories"?: boolean | undefined;
  /**
* If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
*/
readonly "restricted_to_workflows"?: boolean | undefined;
  /**
* List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
*/
readonly "selected_workflows"?: ReadonlyArray<string> | undefined;
  /**
* The identifier of a hosted compute network configuration.
*/
readonly "network_configuration_id"?: string | null | undefined
}

export interface ActionsListGithubHostedRunnersInGroupForOrgParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface ActionsListGithubHostedRunnersInGroupForOrg200 {
  readonly "total_count": number;
  readonly "runners": ReadonlyArray<ActionsHostedRunner>
}

export interface ActionsListRepoAccessToSelfHostedRunnerGroupInOrgParams {
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

export interface ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200 {
  readonly "total_count": number;
  readonly "repositories": ReadonlyArray<MinimalRepository>
}

export interface ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgParams {
  
}

export interface ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest {
  /**
* List of repository IDs that can access the runner group.
*/
readonly "selected_repository_ids": ReadonlyArray<number>
}

export interface ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgParams {
  
}

export interface ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParams {
  
}

export interface ActionsListSelfHostedRunnersInGroupForOrgParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* The type of label. Read-only labels are applied automatically when the runner is configured.
*/
export type RunnerLabelType = "read-only" | "custom"

/**
* A label for a self hosted runner
*/
export interface RunnerLabel {
  /**
* Unique identifier of the label.
*/
readonly "id"?: number | undefined;
  /**
* Name of the label.
*/
readonly "name": string;
  /**
* The type of label. Read-only labels are applied automatically when the runner is configured.
*/
readonly "type"?: RunnerLabelType | undefined
}

/**
* A self hosted runner
*/
export interface Runner {
  /**
* The ID of the runner.
*/
readonly "id": number;
  /**
* The ID of the runner group.
*/
readonly "runner_group_id"?: number | undefined;
  /**
* The name of the runner.
*/
readonly "name": string;
  /**
* The Operating System of the runner.
*/
readonly "os": string;
  /**
* The status of the runner.
*/
readonly "status": string;
  readonly "busy": boolean;
  readonly "labels": ReadonlyArray<RunnerLabel>;
  readonly "ephemeral"?: boolean | undefined
}

export interface ActionsListSelfHostedRunnersInGroupForOrg200 {
  readonly "total_count": number;
  readonly "runners": ReadonlyArray<Runner>
}

export interface ActionsSetSelfHostedRunnersInGroupForOrgParams {
  
}

export interface ActionsSetSelfHostedRunnersInGroupForOrgRequest {
  /**
* List of runner IDs to add to the runner group.
*/
readonly "runners": ReadonlyArray<number>
}

export interface ActionsAddSelfHostedRunnerToGroupForOrgParams {
  
}

export interface ActionsRemoveSelfHostedRunnerFromGroupForOrgParams {
  
}

export interface ActionsListSelfHostedRunnersForOrgParams {
  readonly "name"?: string | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface ActionsListSelfHostedRunnersForOrg200 {
  readonly "total_count": number;
  readonly "runners": ReadonlyArray<Runner>
}

export interface ActionsListRunnerApplicationsForOrgParams {
  
}

/**
* Runner Application
*/
export interface RunnerApplication {
  readonly "os": string;
  readonly "architecture": string;
  readonly "download_url": string;
  readonly "filename": string;
  /**
* A short lived bearer token used to download the runner, if needed.
*/
readonly "temp_download_token"?: string | undefined;
  readonly "sha256_checksum"?: string | undefined
}

export type ActionsListRunnerApplicationsForOrg200 = ReadonlyArray<RunnerApplication>

export interface ActionsGenerateRunnerJitconfigForOrgParams {
  
}

export interface ActionsGenerateRunnerJitconfigForOrgRequest {
  /**
* The name of the new runner.
*/
readonly "name": string;
  /**
* The ID of the runner group to register the runner to.
*/
readonly "runner_group_id": number;
  /**
* The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.
*/
readonly "labels": ReadonlyArray<string>;
  /**
* The working directory to be used for job execution, relative to the runner install directory.
*/
readonly "work_folder"?: string | undefined
}

export interface ActionsGenerateRunnerJitconfigForOrg201 {
  readonly "runner": Runner;
  /**
* The base64 encoded runner configuration.
*/
readonly "encoded_jit_config": string
}

export interface ActionsCreateRegistrationTokenForOrgParams {
  
}

/**
* Describe whether all repositories have been selected or there's a selection involved
*/
export type AuthenticationTokenRepositorySelection = "all" | "selected"

/**
* Authentication Token
*/
export interface AuthenticationToken {
  /**
* The token used for authentication
*/
readonly "token": string;
  /**
* The time this token expires
*/
readonly "expires_at": string;
  readonly "permissions"?: Record<string, unknown> | undefined;
  /**
* The repositories this token has access to
*/
readonly "repositories"?: ReadonlyArray<Repository> | undefined;
  readonly "single_file"?: string | null | undefined;
  /**
* Describe whether all repositories have been selected or there's a selection involved
*/
readonly "repository_selection"?: AuthenticationTokenRepositorySelection | undefined
}

export interface ActionsCreateRemoveTokenForOrgParams {
  
}

export interface ActionsGetSelfHostedRunnerForOrgParams {
  
}

export interface ActionsDeleteSelfHostedRunnerFromOrgParams {
  
}

export interface ActionsListLabelsForSelfHostedRunnerForOrgParams {
  
}

export interface ActionsListLabelsForSelfHostedRunnerForOrg200 {
  readonly "total_count": number;
  readonly "labels": ReadonlyArray<RunnerLabel>
}

export interface ActionsSetCustomLabelsForSelfHostedRunnerForOrgParams {
  
}

export interface ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest {
  /**
* The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
*/
readonly "labels": ReadonlyArray<string>
}

export interface ActionsSetCustomLabelsForSelfHostedRunnerForOrg200 {
  readonly "total_count": number;
  readonly "labels": ReadonlyArray<RunnerLabel>
}

export interface ActionsAddCustomLabelsToSelfHostedRunnerForOrgParams {
  
}

export interface ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest {
  /**
* The names of the custom labels to add to the runner.
*/
readonly "labels": ReadonlyArray<string>
}

export interface ActionsAddCustomLabelsToSelfHostedRunnerForOrg200 {
  readonly "total_count": number;
  readonly "labels": ReadonlyArray<RunnerLabel>
}

export interface ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgParams {
  
}

export interface ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg200 {
  readonly "total_count": number;
  readonly "labels": ReadonlyArray<RunnerLabel>
}

export interface ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgParams {
  
}

export interface ActionsRemoveCustomLabelFromSelfHostedRunnerForOrg200 {
  readonly "total_count": number;
  readonly "labels": ReadonlyArray<RunnerLabel>
}

export interface ActionsListOrgSecretsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Visibility of a secret
*/
export type OrganizationActionsSecretVisibility = "all" | "private" | "selected"

/**
* Secrets for GitHub Actions for an organization.
*/
export interface OrganizationActionsSecret {
  /**
* The name of the secret.
*/
readonly "name": string;
  readonly "created_at": string;
  readonly "updated_at": string;
  /**
* Visibility of a secret
*/
readonly "visibility": OrganizationActionsSecretVisibility;
  readonly "selected_repositories_url"?: string | undefined
}

export interface ActionsListOrgSecrets200 {
  readonly "total_count": number;
  readonly "secrets": ReadonlyArray<OrganizationActionsSecret>
}

export interface ActionsGetOrgPublicKeyParams {
  
}

/**
* The public key used for setting Actions Secrets.
*/
export interface ActionsPublicKey {
  /**
* The identifier for the key.
*/
readonly "key_id": string;
  /**
* The Base64 encoded public key.
*/
readonly "key": string;
  readonly "id"?: number | undefined;
  readonly "url"?: string | undefined;
  readonly "title"?: string | undefined;
  readonly "created_at"?: string | undefined
}

export interface ActionsGetOrgSecretParams {
  
}

export interface ActionsCreateOrUpdateOrgSecretParams {
  
}

/**
* Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
*/
export type ActionsCreateOrUpdateOrgSecretRequestVisibility = "all" | "private" | "selected"

export interface ActionsCreateOrUpdateOrgSecretRequest {
  /**
* Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/actions/secrets#get-an-organization-public-key) endpoint.
*/
readonly "encrypted_value": string;
  /**
* ID of the key you used to encrypt the secret.
*/
readonly "key_id": string;
  /**
* Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
*/
readonly "visibility": ActionsCreateOrUpdateOrgSecretRequestVisibility;
  /**
* An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
*/
readonly "selected_repository_ids"?: ReadonlyArray<number> | undefined
}

export interface ActionsDeleteOrgSecretParams {
  
}

export interface ActionsListSelectedReposForOrgSecretParams {
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

export interface ActionsListSelectedReposForOrgSecret200 {
  readonly "total_count": number;
  readonly "repositories": ReadonlyArray<MinimalRepository>
}

export interface ActionsSetSelectedReposForOrgSecretParams {
  
}

export interface ActionsSetSelectedReposForOrgSecretRequest {
  /**
* An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
*/
readonly "selected_repository_ids": ReadonlyArray<number>
}

export interface ActionsAddSelectedRepoToOrgSecretParams {
  
}

export interface ActionsRemoveSelectedRepoFromOrgSecretParams {
  
}

export interface ActionsListOrgVariablesParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Visibility of a variable
*/
export type OrganizationActionsVariableVisibility = "all" | "private" | "selected"

/**
* Organization variable for GitHub Actions.
*/
export interface OrganizationActionsVariable {
  /**
* The name of the variable.
*/
readonly "name": string;
  /**
* The value of the variable.
*/
readonly "value": string;
  /**
* The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
readonly "created_at": string;
  /**
* The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
readonly "updated_at": string;
  /**
* Visibility of a variable
*/
readonly "visibility": OrganizationActionsVariableVisibility;
  readonly "selected_repositories_url"?: string | undefined
}

export interface ActionsListOrgVariables200 {
  readonly "total_count": number;
  readonly "variables": ReadonlyArray<OrganizationActionsVariable>
}

export interface ActionsCreateOrgVariableParams {
  
}

/**
* The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
*/
export type ActionsCreateOrgVariableRequestVisibility = "all" | "private" | "selected"

export interface ActionsCreateOrgVariableRequest {
  /**
* The name of the variable.
*/
readonly "name": string;
  /**
* The value of the variable.
*/
readonly "value": string;
  /**
* The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
*/
readonly "visibility": ActionsCreateOrgVariableRequestVisibility;
  /**
* An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.
*/
readonly "selected_repository_ids"?: ReadonlyArray<number> | undefined
}

export interface ActionsGetOrgVariableParams {
  
}

export interface ActionsDeleteOrgVariableParams {
  
}

export interface ActionsUpdateOrgVariableParams {
  
}

/**
* The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
*/
export type ActionsUpdateOrgVariableRequestVisibility = "all" | "private" | "selected"

export interface ActionsUpdateOrgVariableRequest {
  /**
* The name of the variable.
*/
readonly "name"?: string | undefined;
  /**
* The value of the variable.
*/
readonly "value"?: string | undefined;
  /**
* The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
*/
readonly "visibility"?: ActionsUpdateOrgVariableRequestVisibility | undefined;
  /**
* An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.
*/
readonly "selected_repository_ids"?: ReadonlyArray<number> | undefined
}

export interface ActionsListSelectedReposForOrgVariableParams {
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

export interface ActionsListSelectedReposForOrgVariable200 {
  readonly "total_count": number;
  readonly "repositories": ReadonlyArray<MinimalRepository>
}

export interface ActionsSetSelectedReposForOrgVariableParams {
  
}

export interface ActionsSetSelectedReposForOrgVariableRequest {
  /**
* The IDs of the repositories that can access the organization variable.
*/
readonly "selected_repository_ids": ReadonlyArray<number>
}

export interface ActionsAddSelectedRepoToOrgVariableParams {
  
}

export interface ActionsRemoveSelectedRepoFromOrgVariableParams {
  
}

export interface OrgsListAttestationsBulkParams {
  readonly "per_page"?: number | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined
}

export interface OrgsListAttestationsBulkRequest {
  /**
* List of subject digests to fetch attestations for.
*/
readonly "subject_digests": ReadonlyArray<string>;
  /**
* Optional filter for fetching attestations with a given predicate type.
* This option accepts `provenance`, `sbom`, or freeform text for custom predicate types.
*/
readonly "predicate_type"?: string | undefined
}

export interface OrgsListAttestationsBulk200 {
  /**
* Mapping of subject digest to bundles.
*/
readonly "attestations_subject_digests"?: Record<string, unknown> | undefined;
  /**
* Information about the current page.
*/
readonly "page_info"?: {
  /**
* Indicates whether there is a next page.
*/
readonly "has_next"?: boolean | undefined;
  /**
* Indicates whether there is a previous page.
*/
readonly "has_previous"?: boolean | undefined;
  /**
* The cursor to the next page.
*/
readonly "next"?: string | undefined;
  /**
* The cursor to the previous page.
*/
readonly "previous"?: string | undefined
} | undefined
}

export interface OrgsDeleteAttestationsBulkParams {
  
}

/**
* The request body must include either `subject_digests` or `attestation_ids`, but not both.
*/
export type OrgsDeleteAttestationsBulkRequest = Record<string, unknown>

export interface OrgsDeleteAttestationsBySubjectDigestParams {
  
}

export interface OrgsDeleteAttestationsByIdParams {
  
}

export interface OrgsListAttestationsParams {
  readonly "per_page"?: number | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined;
  readonly "predicate_type"?: string | undefined
}

export interface OrgsListAttestations200 {
  readonly "attestations"?: ReadonlyArray<{
  /**
* The attestation's Sigstore Bundle.
* Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
*/
readonly "bundle"?: {
  readonly "mediaType"?: string | undefined;
  readonly "verificationMaterial"?: {
  
} | undefined;
  readonly "dsseEnvelope"?: {
  
} | undefined
} | undefined;
  readonly "repository_id"?: number | undefined;
  readonly "bundle_url"?: string | undefined
}> | undefined
}

export interface OrgsListBlockedUsersParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type OrgsListBlockedUsers200 = ReadonlyArray<SimpleUser>

export interface OrgsCheckBlockedUserParams {
  
}

export interface OrgsBlockUserParams {
  
}

export interface OrgsUnblockUserParams {
  
}

export type CampaignsListOrgCampaignsParamsDirection = "asc" | "desc"

/**
* Indicates whether a campaign is open or closed
*/
export type CampaignState = "open" | "closed"

export type CampaignsListOrgCampaignsParamsSort = "created" | "updated" | "ends_at" | "published"

export interface CampaignsListOrgCampaignsParams {
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined;
  readonly "direction"?: CampaignsListOrgCampaignsParamsDirection | undefined;
  readonly "state"?: CampaignState | undefined;
  readonly "sort"?: CampaignsListOrgCampaignsParamsSort | undefined
}

/**
* Groups of organization members that gives permissions on specified repositories.
*/
export interface NullableTeamSimple {
  /**
* Unique identifier of the team
*/
readonly "id": number;
  readonly "node_id": string;
  /**
* URL for the team
*/
readonly "url": string;
  readonly "members_url": string;
  /**
* Name of the team
*/
readonly "name": string;
  /**
* Description of the team
*/
readonly "description": string | null;
  /**
* Permission that the team will have for its repositories
*/
readonly "permission": string;
  /**
* The level of privacy this team should have
*/
readonly "privacy"?: string | undefined;
  /**
* The notification setting the team has set
*/
readonly "notification_setting"?: string | undefined;
  readonly "html_url": string;
  readonly "repositories_url": string;
  readonly "slug": string;
  /**
* Distinguished Name (DN) that team maps to within LDAP environment
*/
readonly "ldap_dn"?: string | undefined
}

/**
* Groups of organization members that gives permissions on specified repositories.
*/
export interface Team {
  readonly "id": number;
  readonly "node_id": string;
  readonly "name": string;
  readonly "slug": string;
  readonly "description": string | null;
  readonly "privacy"?: string | undefined;
  readonly "notification_setting"?: string | undefined;
  readonly "permission": string;
  readonly "permissions"?: {
  readonly "pull": boolean;
  readonly "triage": boolean;
  readonly "push": boolean;
  readonly "maintain": boolean;
  readonly "admin": boolean
} | undefined;
  readonly "url": string;
  readonly "html_url": string;
  readonly "members_url": string;
  readonly "repositories_url": string;
  readonly "parent": NullableTeamSimple | null
}

/**
* The campaign metadata and alert stats.
*/
export interface CampaignSummary {
  /**
* The number of the newly created campaign
*/
readonly "number": number;
  /**
* The date and time the campaign was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
readonly "created_at": string;
  /**
* The date and time the campaign was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
readonly "updated_at": string;
  /**
* The campaign name
*/
readonly "name"?: string | undefined;
  /**
* The campaign description
*/
readonly "description": string;
  /**
* The campaign managers
*/
readonly "managers": ReadonlyArray<SimpleUser>;
  /**
* The campaign team managers
*/
readonly "team_managers"?: ReadonlyArray<Team> | undefined;
  /**
* The date and time the campaign was published, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
readonly "published_at"?: string | undefined;
  /**
* The date and time the campaign has ended, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
readonly "ends_at": string;
  /**
* The date and time the campaign was closed, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ. Will be null if the campaign is still open.
*/
readonly "closed_at"?: string | null | undefined;
  readonly "state": CampaignState;
  /**
* The contact link of the campaign.
*/
readonly "contact_link": string | null;
  readonly "alert_stats"?: {
  /**
* The number of open alerts
*/
readonly "open_count": number;
  /**
* The number of closed alerts
*/
readonly "closed_count": number;
  /**
* The number of in-progress alerts
*/
readonly "in_progress_count": number
} | undefined
}

export type CampaignsListOrgCampaigns200 = ReadonlyArray<CampaignSummary>

export interface CampaignsListOrgCampaigns503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CampaignsCreateCampaignParams {
  
}

export interface CampaignsCreateCampaignRequest {
  /**
* The name of the campaign
*/
readonly "name": string;
  /**
* A description for the campaign
*/
readonly "description": string;
  /**
* The logins of the users to set as the campaign managers. At this time, only a single manager can be supplied.
*/
readonly "managers"?: ReadonlyArray<string> | undefined;
  /**
* The slugs of the teams to set as the campaign managers.
*/
readonly "team_managers"?: ReadonlyArray<string> | undefined;
  /**
* The end date and time of the campaign. The date must be in the future.
*/
readonly "ends_at": string;
  /**
* The contact link of the campaign. Must be a URI.
*/
readonly "contact_link"?: string | null | undefined;
  /**
* The code scanning alerts to include in this campaign
*/
readonly "code_scanning_alerts": ReadonlyArray<{
  /**
* The repository id
*/
readonly "repository_id": number;
  /**
* The alert numbers
*/
readonly "alert_numbers": ReadonlyArray<number>
}>;
  /**
* If true, will automatically generate issues for the campaign. The default is false.
*/
readonly "generate_issues"?: boolean | undefined
}

export interface CampaignsCreateCampaign503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CampaignsGetCampaignSummaryParams {
  
}

export interface CampaignsGetCampaignSummary503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CampaignsDeleteCampaignParams {
  
}

export interface CampaignsDeleteCampaign503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CampaignsUpdateCampaignParams {
  
}

export interface CampaignsUpdateCampaignRequest {
  /**
* The name of the campaign
*/
readonly "name"?: string | undefined;
  /**
* A description for the campaign
*/
readonly "description"?: string | undefined;
  /**
* The logins of the users to set as the campaign managers. At this time, only a single manager can be supplied.
*/
readonly "managers"?: ReadonlyArray<string> | undefined;
  /**
* The slugs of the teams to set as the campaign managers.
*/
readonly "team_managers"?: ReadonlyArray<string> | undefined;
  /**
* The end date and time of the campaign, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
readonly "ends_at"?: string | undefined;
  /**
* The contact link of the campaign. Must be a URI.
*/
readonly "contact_link"?: string | null | undefined;
  readonly "state"?: CampaignState | undefined
}

export interface CampaignsUpdateCampaign503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

/**
* The name of the tool used to generate the code scanning analysis.
*/
export type CodeScanningAnalysisToolName = string

/**
* The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
*/
export type CodeScanningAnalysisToolGuid = string

export type CodeScanningListAlertsForOrgParamsDirection = "asc" | "desc"

/**
* State of a code scanning alert.
*/
export type CodeScanningAlertStateQuery = "open" | "closed" | "dismissed" | "fixed"

export type CodeScanningListAlertsForOrgParamsSort = "created" | "updated"

/**
* Severity of a code scanning alert.
*/
export type CodeScanningAlertSeverity = "critical" | "high" | "medium" | "low" | "warning" | "note" | "error"

export interface CodeScanningListAlertsForOrgParams {
  readonly "tool_name"?: CodeScanningAnalysisToolName | undefined;
  readonly "tool_guid"?: CodeScanningAnalysisToolGuid | null | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined;
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined;
  readonly "direction"?: CodeScanningListAlertsForOrgParamsDirection | undefined;
  readonly "state"?: CodeScanningAlertStateQuery | undefined;
  readonly "sort"?: CodeScanningListAlertsForOrgParamsSort | undefined;
  readonly "severity"?: CodeScanningAlertSeverity | undefined
}

/**
* The REST API URL for fetching the list of instances for an alert.
*/
export type AlertInstancesUrl = string

/**
* State of a code scanning alert.
*/
export type CodeScanningAlertState = "open" | "dismissed" | "fixed"

/**
* **Required when the state is dismissed.** The reason for dismissing or closing the alert.
*/
export type CodeScanningAlertDismissedReason = "false positive" | "won't fix" | "used in tests"

/**
* The dismissal comment associated with the dismissal of the alert.
*/
export type CodeScanningAlertDismissedComment = string

/**
* The severity of the alert.
*/
export type CodeScanningAlertRuleSummarySeverity = "none" | "note" | "warning" | "error"

/**
* The security severity of the alert.
*/
export type CodeScanningAlertRuleSummarySecuritySeverityLevel = "low" | "medium" | "high" | "critical"

export interface CodeScanningAlertRuleSummary {
  /**
* A unique identifier for the rule used to detect the alert.
*/
readonly "id"?: string | null | undefined;
  /**
* The name of the rule used to detect the alert.
*/
readonly "name"?: string | undefined;
  /**
* The severity of the alert.
*/
readonly "severity"?: CodeScanningAlertRuleSummarySeverity | null | undefined;
  /**
* The security severity of the alert.
*/
readonly "security_severity_level"?: CodeScanningAlertRuleSummarySecuritySeverityLevel | null | undefined;
  /**
* A short description of the rule used to detect the alert.
*/
readonly "description"?: string | undefined;
  /**
* A description of the rule used to detect the alert.
*/
readonly "full_description"?: string | undefined;
  /**
* A set of tags applicable for the rule.
*/
readonly "tags"?: ReadonlyArray<string> | null | undefined;
  /**
* Detailed documentation for the rule as GitHub Flavored Markdown.
*/
readonly "help"?: string | null | undefined;
  /**
* A link to the documentation for the rule used to detect the alert.
*/
readonly "help_uri"?: string | null | undefined
}

/**
* The version of the tool used to generate the code scanning analysis.
*/
export type CodeScanningAnalysisToolVersion = string

export interface CodeScanningAnalysisTool {
  readonly "name"?: CodeScanningAnalysisToolName | undefined;
  readonly "version"?: CodeScanningAnalysisToolVersion | null | undefined;
  readonly "guid"?: CodeScanningAnalysisToolGuid | null | undefined
}

/**
* The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,
* `refs/heads/<branch name>` or simply `<branch name>`.
*/
export type CodeScanningRef = string

/**
* Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
*/
export type CodeScanningAnalysisAnalysisKey = string

/**
* Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
*/
export type CodeScanningAlertEnvironment = string

/**
* Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
*/
export type CodeScanningAnalysisCategory = string

/**
* Describe a region within a file for the alert.
*/
export interface CodeScanningAlertLocation {
  readonly "path"?: string | undefined;
  readonly "start_line"?: number | undefined;
  readonly "end_line"?: number | undefined;
  readonly "start_column"?: number | undefined;
  readonly "end_column"?: number | undefined
}

/**
* A classification of the file. For example to identify it as generated.
*/
export type CodeScanningAlertClassification = "source" | "generated" | "test" | "library"

export interface CodeScanningAlertInstance {
  readonly "ref"?: CodeScanningRef | undefined;
  readonly "analysis_key"?: CodeScanningAnalysisAnalysisKey | undefined;
  readonly "environment"?: CodeScanningAlertEnvironment | undefined;
  readonly "category"?: CodeScanningAnalysisCategory | undefined;
  readonly "state"?: CodeScanningAlertState | null | undefined;
  readonly "commit_sha"?: string | undefined;
  readonly "message"?: {
  readonly "text"?: string | undefined
} | undefined;
  readonly "location"?: CodeScanningAlertLocation | undefined;
  readonly "html_url"?: string | undefined;
  /**
* Classifications that have been applied to the file that triggered the alert.
* For example identifying it as documentation, or a generated file.
*/
readonly "classifications"?: ReadonlyArray<CodeScanningAlertClassification> | undefined
}

export interface CodeScanningOrganizationAlertItems {
  readonly "number": AlertNumber;
  readonly "created_at": AlertCreatedAt;
  readonly "updated_at"?: AlertUpdatedAt | undefined;
  readonly "url": AlertUrl;
  readonly "html_url": AlertHtmlUrl;
  readonly "instances_url": AlertInstancesUrl;
  readonly "state": CodeScanningAlertState | null;
  readonly "fixed_at"?: AlertFixedAt | null | undefined;
  readonly "dismissed_by": NullableSimpleUser | null;
  readonly "dismissed_at": AlertDismissedAt | null;
  readonly "dismissed_reason": CodeScanningAlertDismissedReason | null;
  readonly "dismissed_comment"?: CodeScanningAlertDismissedComment | null | undefined;
  readonly "rule": CodeScanningAlertRuleSummary;
  readonly "tool": CodeScanningAnalysisTool;
  readonly "most_recent_instance": CodeScanningAlertInstance;
  readonly "repository": SimpleRepository;
  readonly "dismissal_approved_by"?: NullableSimpleUser | null | undefined
}

export type CodeScanningListAlertsForOrg200 = ReadonlyArray<CodeScanningOrganizationAlertItems>

export interface CodeScanningListAlertsForOrg503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export type CodeSecurityGetConfigurationsForOrgParamsTargetType = "global" | "all"

export interface CodeSecurityGetConfigurationsForOrgParams {
  readonly "target_type"?: CodeSecurityGetConfigurationsForOrgParamsTargetType | undefined;
  readonly "per_page"?: number | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined
}

export type CodeSecurityGetConfigurationsForOrg200 = ReadonlyArray<CodeSecurityConfiguration>

export interface CodeSecurityCreateConfigurationParams {
  
}

/**
* The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
* 
* > [!WARNING]
* > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
*/
export type CodeSecurityCreateConfigurationRequestAdvancedSecurity = "enabled" | "disabled" | "code_security" | "secret_protection"

/**
* The enablement status of GitHub Code Security features.
*/
export type CodeSecurityCreateConfigurationRequestCodeSecurity = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Dependency Graph
*/
export type CodeSecurityCreateConfigurationRequestDependencyGraph = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Automatic dependency submission
*/
export type CodeSecurityCreateConfigurationRequestDependencyGraphAutosubmitAction = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Dependabot alerts
*/
export type CodeSecurityCreateConfigurationRequestDependabotAlerts = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Dependabot security updates
*/
export type CodeSecurityCreateConfigurationRequestDependabotSecurityUpdates = "enabled" | "disabled" | "not_set"

/**
* The enablement status of code scanning default setup
*/
export type CodeSecurityCreateConfigurationRequestCodeScanningDefaultSetup = "enabled" | "disabled" | "not_set"

/**
* The enablement status of code scanning delegated alert dismissal
*/
export type CodeSecurityCreateConfigurationRequestCodeScanningDelegatedAlertDismissal = "enabled" | "disabled" | "not_set"

/**
* The enablement status of GitHub Secret Protection features.
*/
export type CodeSecurityCreateConfigurationRequestSecretProtection = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning
*/
export type CodeSecurityCreateConfigurationRequestSecretScanning = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning push protection
*/
export type CodeSecurityCreateConfigurationRequestSecretScanningPushProtection = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning delegated bypass
*/
export type CodeSecurityCreateConfigurationRequestSecretScanningDelegatedBypass = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning validity checks
*/
export type CodeSecurityCreateConfigurationRequestSecretScanningValidityChecks = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning non provider patterns
*/
export type CodeSecurityCreateConfigurationRequestSecretScanningNonProviderPatterns = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Copilot secret scanning
*/
export type CodeSecurityCreateConfigurationRequestSecretScanningGenericSecrets = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning delegated alert dismissal
*/
export type CodeSecurityCreateConfigurationRequestSecretScanningDelegatedAlertDismissal = "enabled" | "disabled" | "not_set"

/**
* The enablement status of private vulnerability reporting
*/
export type CodeSecurityCreateConfigurationRequestPrivateVulnerabilityReporting = "enabled" | "disabled" | "not_set"

/**
* The enforcement status for a security configuration
*/
export type CodeSecurityCreateConfigurationRequestEnforcement = "enforced" | "unenforced"

export interface CodeSecurityCreateConfigurationRequest {
  /**
* The name of the code security configuration. Must be unique within the organization.
*/
readonly "name": string;
  /**
* A description of the code security configuration
*/
readonly "description": string;
  /**
* The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
* 
* > [!WARNING]
* > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
*/
readonly "advanced_security"?: CodeSecurityCreateConfigurationRequestAdvancedSecurity | undefined;
  /**
* The enablement status of GitHub Code Security features.
*/
readonly "code_security"?: CodeSecurityCreateConfigurationRequestCodeSecurity | undefined;
  /**
* The enablement status of Dependency Graph
*/
readonly "dependency_graph"?: CodeSecurityCreateConfigurationRequestDependencyGraph | undefined;
  /**
* The enablement status of Automatic dependency submission
*/
readonly "dependency_graph_autosubmit_action"?: CodeSecurityCreateConfigurationRequestDependencyGraphAutosubmitAction | undefined;
  /**
* Feature options for Automatic dependency submission
*/
readonly "dependency_graph_autosubmit_action_options"?: {
  /**
* Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.
*/
readonly "labeled_runners"?: boolean | undefined
} | undefined;
  /**
* The enablement status of Dependabot alerts
*/
readonly "dependabot_alerts"?: CodeSecurityCreateConfigurationRequestDependabotAlerts | undefined;
  /**
* The enablement status of Dependabot security updates
*/
readonly "dependabot_security_updates"?: CodeSecurityCreateConfigurationRequestDependabotSecurityUpdates | undefined;
  readonly "code_scanning_options"?: CodeScanningOptions | null | undefined;
  /**
* The enablement status of code scanning default setup
*/
readonly "code_scanning_default_setup"?: CodeSecurityCreateConfigurationRequestCodeScanningDefaultSetup | undefined;
  readonly "code_scanning_default_setup_options"?: CodeScanningDefaultSetupOptions | null | undefined;
  /**
* The enablement status of code scanning delegated alert dismissal
*/
readonly "code_scanning_delegated_alert_dismissal"?: CodeSecurityCreateConfigurationRequestCodeScanningDelegatedAlertDismissal | undefined;
  /**
* The enablement status of GitHub Secret Protection features.
*/
readonly "secret_protection"?: CodeSecurityCreateConfigurationRequestSecretProtection | undefined;
  /**
* The enablement status of secret scanning
*/
readonly "secret_scanning"?: CodeSecurityCreateConfigurationRequestSecretScanning | undefined;
  /**
* The enablement status of secret scanning push protection
*/
readonly "secret_scanning_push_protection"?: CodeSecurityCreateConfigurationRequestSecretScanningPushProtection | undefined;
  /**
* The enablement status of secret scanning delegated bypass
*/
readonly "secret_scanning_delegated_bypass"?: CodeSecurityCreateConfigurationRequestSecretScanningDelegatedBypass | undefined;
  /**
* Feature options for secret scanning delegated bypass
*/
readonly "secret_scanning_delegated_bypass_options"?: {
  /**
* The bypass reviewers for secret scanning delegated bypass
*/
readonly "reviewers"?: ReadonlyArray<{
  /**
* The ID of the team or role selected as a bypass reviewer
*/
readonly "reviewer_id": number;
  /**
* The type of the bypass reviewer
*/
readonly "reviewer_type": "TEAM" | "ROLE"
}> | undefined
} | undefined;
  /**
* The enablement status of secret scanning validity checks
*/
readonly "secret_scanning_validity_checks"?: CodeSecurityCreateConfigurationRequestSecretScanningValidityChecks | undefined;
  /**
* The enablement status of secret scanning non provider patterns
*/
readonly "secret_scanning_non_provider_patterns"?: CodeSecurityCreateConfigurationRequestSecretScanningNonProviderPatterns | undefined;
  /**
* The enablement status of Copilot secret scanning
*/
readonly "secret_scanning_generic_secrets"?: CodeSecurityCreateConfigurationRequestSecretScanningGenericSecrets | undefined;
  /**
* The enablement status of secret scanning delegated alert dismissal
*/
readonly "secret_scanning_delegated_alert_dismissal"?: CodeSecurityCreateConfigurationRequestSecretScanningDelegatedAlertDismissal | undefined;
  /**
* The enablement status of private vulnerability reporting
*/
readonly "private_vulnerability_reporting"?: CodeSecurityCreateConfigurationRequestPrivateVulnerabilityReporting | undefined;
  /**
* The enforcement status for a security configuration
*/
readonly "enforcement"?: CodeSecurityCreateConfigurationRequestEnforcement | undefined
}

export interface CodeSecurityGetDefaultConfigurationsParams {
  
}

export interface CodeSecurityDetachConfigurationParams {
  
}

export interface CodeSecurityDetachConfigurationRequest {
  /**
* An array of repository IDs to detach from configurations. Up to 250 IDs can be provided.
*/
readonly "selected_repository_ids"?: ReadonlyArray<number> | undefined
}

export interface CodeSecurityGetConfigurationParams {
  
}

export interface CodeSecurityDeleteConfigurationParams {
  
}

export interface CodeSecurityUpdateConfigurationParams {
  
}

/**
* The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
* 
* > [!WARNING]
* > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
*/
export type CodeSecurityUpdateConfigurationRequestAdvancedSecurity = "enabled" | "disabled" | "code_security" | "secret_protection"

/**
* The enablement status of GitHub Code Security features.
*/
export type CodeSecurityUpdateConfigurationRequestCodeSecurity = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Dependency Graph
*/
export type CodeSecurityUpdateConfigurationRequestDependencyGraph = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Automatic dependency submission
*/
export type CodeSecurityUpdateConfigurationRequestDependencyGraphAutosubmitAction = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Dependabot alerts
*/
export type CodeSecurityUpdateConfigurationRequestDependabotAlerts = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Dependabot security updates
*/
export type CodeSecurityUpdateConfigurationRequestDependabotSecurityUpdates = "enabled" | "disabled" | "not_set"

/**
* The enablement status of code scanning default setup
*/
export type CodeSecurityUpdateConfigurationRequestCodeScanningDefaultSetup = "enabled" | "disabled" | "not_set"

/**
* The enablement status of code scanning delegated alert dismissal
*/
export type CodeSecurityUpdateConfigurationRequestCodeScanningDelegatedAlertDismissal = "enabled" | "disabled" | "not_set"

/**
* The enablement status of GitHub Secret Protection features.
*/
export type CodeSecurityUpdateConfigurationRequestSecretProtection = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning
*/
export type CodeSecurityUpdateConfigurationRequestSecretScanning = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning push protection
*/
export type CodeSecurityUpdateConfigurationRequestSecretScanningPushProtection = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning delegated bypass
*/
export type CodeSecurityUpdateConfigurationRequestSecretScanningDelegatedBypass = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning validity checks
*/
export type CodeSecurityUpdateConfigurationRequestSecretScanningValidityChecks = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning non-provider patterns
*/
export type CodeSecurityUpdateConfigurationRequestSecretScanningNonProviderPatterns = "enabled" | "disabled" | "not_set"

/**
* The enablement status of Copilot secret scanning
*/
export type CodeSecurityUpdateConfigurationRequestSecretScanningGenericSecrets = "enabled" | "disabled" | "not_set"

/**
* The enablement status of secret scanning delegated alert dismissal
*/
export type CodeSecurityUpdateConfigurationRequestSecretScanningDelegatedAlertDismissal = "enabled" | "disabled" | "not_set"

/**
* The enablement status of private vulnerability reporting
*/
export type CodeSecurityUpdateConfigurationRequestPrivateVulnerabilityReporting = "enabled" | "disabled" | "not_set"

/**
* The enforcement status for a security configuration
*/
export type CodeSecurityUpdateConfigurationRequestEnforcement = "enforced" | "unenforced"

export interface CodeSecurityUpdateConfigurationRequest {
  /**
* The name of the code security configuration. Must be unique within the organization.
*/
readonly "name"?: string | undefined;
  /**
* A description of the code security configuration
*/
readonly "description"?: string | undefined;
  /**
* The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
* 
* > [!WARNING]
* > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
*/
readonly "advanced_security"?: CodeSecurityUpdateConfigurationRequestAdvancedSecurity | undefined;
  /**
* The enablement status of GitHub Code Security features.
*/
readonly "code_security"?: CodeSecurityUpdateConfigurationRequestCodeSecurity | undefined;
  /**
* The enablement status of Dependency Graph
*/
readonly "dependency_graph"?: CodeSecurityUpdateConfigurationRequestDependencyGraph | undefined;
  /**
* The enablement status of Automatic dependency submission
*/
readonly "dependency_graph_autosubmit_action"?: CodeSecurityUpdateConfigurationRequestDependencyGraphAutosubmitAction | undefined;
  /**
* Feature options for Automatic dependency submission
*/
readonly "dependency_graph_autosubmit_action_options"?: {
  /**
* Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.
*/
readonly "labeled_runners"?: boolean | undefined
} | undefined;
  /**
* The enablement status of Dependabot alerts
*/
readonly "dependabot_alerts"?: CodeSecurityUpdateConfigurationRequestDependabotAlerts | undefined;
  /**
* The enablement status of Dependabot security updates
*/
readonly "dependabot_security_updates"?: CodeSecurityUpdateConfigurationRequestDependabotSecurityUpdates | undefined;
  /**
* The enablement status of code scanning default setup
*/
readonly "code_scanning_default_setup"?: CodeSecurityUpdateConfigurationRequestCodeScanningDefaultSetup | undefined;
  readonly "code_scanning_default_setup_options"?: CodeScanningDefaultSetupOptions | null | undefined;
  /**
* The enablement status of code scanning delegated alert dismissal
*/
readonly "code_scanning_delegated_alert_dismissal"?: CodeSecurityUpdateConfigurationRequestCodeScanningDelegatedAlertDismissal | undefined;
  /**
* The enablement status of GitHub Secret Protection features.
*/
readonly "secret_protection"?: CodeSecurityUpdateConfigurationRequestSecretProtection | undefined;
  /**
* The enablement status of secret scanning
*/
readonly "secret_scanning"?: CodeSecurityUpdateConfigurationRequestSecretScanning | undefined;
  /**
* The enablement status of secret scanning push protection
*/
readonly "secret_scanning_push_protection"?: CodeSecurityUpdateConfigurationRequestSecretScanningPushProtection | undefined;
  /**
* The enablement status of secret scanning delegated bypass
*/
readonly "secret_scanning_delegated_bypass"?: CodeSecurityUpdateConfigurationRequestSecretScanningDelegatedBypass | undefined;
  /**
* Feature options for secret scanning delegated bypass
*/
readonly "secret_scanning_delegated_bypass_options"?: {
  /**
* The bypass reviewers for secret scanning delegated bypass
*/
readonly "reviewers"?: ReadonlyArray<{
  /**
* The ID of the team or role selected as a bypass reviewer
*/
readonly "reviewer_id": number;
  /**
* The type of the bypass reviewer
*/
readonly "reviewer_type": "TEAM" | "ROLE"
}> | undefined
} | undefined;
  /**
* The enablement status of secret scanning validity checks
*/
readonly "secret_scanning_validity_checks"?: CodeSecurityUpdateConfigurationRequestSecretScanningValidityChecks | undefined;
  /**
* The enablement status of secret scanning non-provider patterns
*/
readonly "secret_scanning_non_provider_patterns"?: CodeSecurityUpdateConfigurationRequestSecretScanningNonProviderPatterns | undefined;
  /**
* The enablement status of Copilot secret scanning
*/
readonly "secret_scanning_generic_secrets"?: CodeSecurityUpdateConfigurationRequestSecretScanningGenericSecrets | undefined;
  /**
* The enablement status of secret scanning delegated alert dismissal
*/
readonly "secret_scanning_delegated_alert_dismissal"?: CodeSecurityUpdateConfigurationRequestSecretScanningDelegatedAlertDismissal | undefined;
  /**
* The enablement status of private vulnerability reporting
*/
readonly "private_vulnerability_reporting"?: CodeSecurityUpdateConfigurationRequestPrivateVulnerabilityReporting | undefined;
  /**
* The enforcement status for a security configuration
*/
readonly "enforcement"?: CodeSecurityUpdateConfigurationRequestEnforcement | undefined
}

export interface CodeSecurityAttachConfigurationParams {
  
}

/**
* The type of repositories to attach the configuration to. `selected` means the configuration will be attached to only the repositories specified by `selected_repository_ids`
*/
export type CodeSecurityAttachConfigurationRequestScope = "all" | "all_without_configurations" | "public" | "private_or_internal" | "selected"

export interface CodeSecurityAttachConfigurationRequest {
  /**
* The type of repositories to attach the configuration to. `selected` means the configuration will be attached to only the repositories specified by `selected_repository_ids`
*/
readonly "scope": CodeSecurityAttachConfigurationRequestScope;
  /**
* An array of repository IDs to attach the configuration to. You can only provide a list of repository ids when the `scope` is set to `selected`.
*/
readonly "selected_repository_ids"?: ReadonlyArray<number> | undefined
}

export type CodeSecurityAttachConfiguration202 = Record<string, unknown>

export interface CodeSecuritySetConfigurationAsDefaultParams {
  
}

/**
* Specify which types of repository this security configuration should be applied to by default.
*/
export type CodeSecuritySetConfigurationAsDefaultRequestDefaultForNewRepos = "all" | "none" | "private_and_internal" | "public"

export interface CodeSecuritySetConfigurationAsDefaultRequest {
  /**
* Specify which types of repository this security configuration should be applied to by default.
*/
readonly "default_for_new_repos"?: CodeSecuritySetConfigurationAsDefaultRequestDefaultForNewRepos | undefined
}

/**
* Specifies which types of repository this security configuration is applied to by default.
*/
export type CodeSecuritySetConfigurationAsDefault200DefaultForNewRepos = "all" | "none" | "private_and_internal" | "public"

export interface CodeSecuritySetConfigurationAsDefault200 {
  /**
* Specifies which types of repository this security configuration is applied to by default.
*/
readonly "default_for_new_repos"?: CodeSecuritySetConfigurationAsDefault200DefaultForNewRepos | undefined;
  readonly "configuration"?: CodeSecurityConfiguration | undefined
}

export interface CodeSecurityGetRepositoriesForConfigurationParams {
  readonly "per_page"?: number | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined;
  readonly "status"?: string | undefined
}

export type CodeSecurityGetRepositoriesForConfiguration200 = ReadonlyArray<CodeSecurityConfigurationRepositories>

export interface CodespacesListInOrganizationParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
*/
export type NullableCodespaceMachinePrebuildAvailability = "none" | "ready" | "in_progress"

/**
* A description of the machine powering a codespace.
*/
export interface NullableCodespaceMachine {
  /**
* The name of the machine.
*/
readonly "name": string;
  /**
* The display name of the machine includes cores, memory, and storage.
*/
readonly "display_name": string;
  /**
* The operating system of the machine.
*/
readonly "operating_system": string;
  /**
* How much storage is available to the codespace.
*/
readonly "storage_in_bytes": number;
  /**
* How much memory is available to the codespace.
*/
readonly "memory_in_bytes": number;
  /**
* How many cores are available to the codespace.
*/
readonly "cpus": number;
  /**
* Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
*/
readonly "prebuild_availability": NullableCodespaceMachinePrebuildAvailability | null
}

/**
* State of this codespace.
*/
export type CodespaceState = "Unknown" | "Created" | "Queued" | "Provisioning" | "Available" | "Awaiting" | "Unavailable" | "Deleted" | "Moved" | "Shutdown" | "Archived" | "Starting" | "ShuttingDown" | "Failed" | "Exporting" | "Updating" | "Rebuilding"

/**
* The initally assigned location of a new codespace.
*/
export type CodespaceLocation = "EastUs" | "SouthEastAsia" | "WestEurope" | "WestUs2"

/**
* A codespace.
*/
export interface Codespace {
  readonly "id": number;
  /**
* Automatically generated name of this codespace.
*/
readonly "name": string;
  /**
* Display name for this codespace.
*/
readonly "display_name"?: string | null | undefined;
  /**
* UUID identifying this codespace's environment.
*/
readonly "environment_id": string | null;
  readonly "owner": SimpleUser;
  readonly "billable_owner": SimpleUser;
  readonly "repository": MinimalRepository;
  readonly "machine": NullableCodespaceMachine | null;
  /**
* Path to devcontainer.json from repo root used to create Codespace.
*/
readonly "devcontainer_path"?: string | null | undefined;
  /**
* Whether the codespace was created from a prebuild.
*/
readonly "prebuild": boolean | null;
  readonly "created_at": string;
  readonly "updated_at": string;
  /**
* Last known time this codespace was started.
*/
readonly "last_used_at": string;
  /**
* State of this codespace.
*/
readonly "state": CodespaceState;
  /**
* API URL for this codespace.
*/
readonly "url": string;
  /**
* Details about the codespace's git repository.
*/
readonly "git_status": {
  /**
* The number of commits the local repository is ahead of the remote.
*/
readonly "ahead"?: number | undefined;
  /**
* The number of commits the local repository is behind the remote.
*/
readonly "behind"?: number | undefined;
  /**
* Whether the local repository has unpushed changes.
*/
readonly "has_unpushed_changes"?: boolean | undefined;
  /**
* Whether the local repository has uncommitted changes.
*/
readonly "has_uncommitted_changes"?: boolean | undefined;
  /**
* The current branch (or SHA if in detached HEAD state) of the local repository.
*/
readonly "ref"?: string | undefined
};
  /**
* The initally assigned location of a new codespace.
*/
readonly "location": CodespaceLocation;
  /**
* The number of minutes of inactivity after which this codespace will be automatically stopped.
*/
readonly "idle_timeout_minutes": number | null;
  /**
* URL to access this codespace on the web.
*/
readonly "web_url": string;
  /**
* API URL to access available alternate machine types for this codespace.
*/
readonly "machines_url": string;
  /**
* API URL to start this codespace.
*/
readonly "start_url": string;
  /**
* API URL to stop this codespace.
*/
readonly "stop_url": string;
  /**
* API URL to publish this codespace to a new repository.
*/
readonly "publish_url"?: string | null | undefined;
  /**
* API URL for the Pull Request associated with this codespace, if any.
*/
readonly "pulls_url": string | null;
  readonly "recent_folders": ReadonlyArray<string>;
  readonly "runtime_constraints"?: {
  /**
* The privacy settings a user can select from when forwarding a port.
*/
readonly "allowed_port_privacy_settings"?: ReadonlyArray<string> | null | undefined
} | undefined;
  /**
* Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
*/
readonly "pending_operation"?: boolean | null | undefined;
  /**
* Text to show user when codespace is disabled by a pending operation
*/
readonly "pending_operation_disabled_reason"?: string | null | undefined;
  /**
* Text to show user when codespace idle timeout minutes has been overriden by an organization policy
*/
readonly "idle_timeout_notice"?: string | null | undefined;
  /**
* Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
*/
readonly "retention_period_minutes"?: number | null | undefined;
  /**
* When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
*/
readonly "retention_expires_at"?: string | null | undefined;
  /**
* The text to display to a user when a codespace has been stopped for a potentially actionable reason.
*/
readonly "last_known_stop_notice"?: string | null | undefined
}

export interface CodespacesListInOrganization200 {
  readonly "total_count": number;
  readonly "codespaces": ReadonlyArray<Codespace>
}

export interface CodespacesSetCodespacesAccessParams {
  
}

/**
* Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.
*/
export type CodespacesSetCodespacesAccessRequestVisibility = "disabled" | "selected_members" | "all_members" | "all_members_and_outside_collaborators"

export interface CodespacesSetCodespacesAccessRequest {
  /**
* Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.
*/
readonly "visibility": CodespacesSetCodespacesAccessRequestVisibility;
  /**
* The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.
*/
readonly "selected_usernames"?: ReadonlyArray<string> | undefined
}

export interface CodespacesSetCodespacesAccessUsersParams {
  
}

export interface CodespacesSetCodespacesAccessUsersRequest {
  /**
* The usernames of the organization members whose codespaces be billed to the organization.
*/
readonly "selected_usernames": ReadonlyArray<string>
}

export interface CodespacesDeleteCodespacesAccessUsersParams {
  
}

export interface CodespacesDeleteCodespacesAccessUsersRequest {
  /**
* The usernames of the organization members whose codespaces should not be billed to the organization.
*/
readonly "selected_usernames": ReadonlyArray<string>
}

export interface CodespacesListOrgSecretsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* The type of repositories in the organization that the secret is visible to
*/
export type CodespacesOrgSecretVisibility = "all" | "private" | "selected"

/**
* Secrets for a GitHub Codespace.
*/
export interface CodespacesOrgSecret {
  /**
* The name of the secret
*/
readonly "name": string;
  /**
* The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
readonly "created_at": string;
  /**
* The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
readonly "updated_at": string;
  /**
* The type of repositories in the organization that the secret is visible to
*/
readonly "visibility": CodespacesOrgSecretVisibility;
  /**
* The API URL at which the list of repositories this secret is visible to can be retrieved
*/
readonly "selected_repositories_url"?: string | undefined
}

export interface CodespacesListOrgSecrets200 {
  readonly "total_count": number;
  readonly "secrets": ReadonlyArray<CodespacesOrgSecret>
}

export interface CodespacesGetOrgPublicKeyParams {
  
}

/**
* The public key used for setting Codespaces secrets.
*/
export interface CodespacesPublicKey {
  /**
* The identifier for the key.
*/
readonly "key_id": string;
  /**
* The Base64 encoded public key.
*/
readonly "key": string;
  readonly "id"?: number | undefined;
  readonly "url"?: string | undefined;
  readonly "title"?: string | undefined;
  readonly "created_at"?: string | undefined
}

export interface CodespacesGetOrgSecretParams {
  
}

export interface CodespacesCreateOrUpdateOrgSecretParams {
  
}

/**
* Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
*/
export type CodespacesCreateOrUpdateOrgSecretRequestVisibility = "all" | "private" | "selected"

export interface CodespacesCreateOrUpdateOrgSecretRequest {
  /**
* The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/codespaces/organization-secrets#get-an-organization-public-key) endpoint.
*/
readonly "encrypted_value"?: string | undefined;
  /**
* The ID of the key you used to encrypt the secret.
*/
readonly "key_id"?: string | undefined;
  /**
* Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
*/
readonly "visibility": CodespacesCreateOrUpdateOrgSecretRequestVisibility;
  /**
* An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints.
*/
readonly "selected_repository_ids"?: ReadonlyArray<number> | undefined
}

export interface CodespacesDeleteOrgSecretParams {
  
}

export interface CodespacesListSelectedReposForOrgSecretParams {
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

export interface CodespacesListSelectedReposForOrgSecret200 {
  readonly "total_count": number;
  readonly "repositories": ReadonlyArray<MinimalRepository>
}

export interface CodespacesSetSelectedReposForOrgSecretParams {
  
}

export interface CodespacesSetSelectedReposForOrgSecretRequest {
  /**
* An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints.
*/
readonly "selected_repository_ids": ReadonlyArray<number>
}

export interface CodespacesAddSelectedRepoToOrgSecretParams {
  
}

export interface CodespacesRemoveSelectedRepoFromOrgSecretParams {
  
}

export interface CopilotGetCopilotOrganizationDetailsParams {
  
}

/**
* The breakdown of Copilot Business seats for the organization.
*/
export interface CopilotOrganizationSeatBreakdown {
  /**
* The total number of seats being billed for the organization as of the current billing cycle.
*/
readonly "total"?: number | undefined;
  /**
* Seats added during the current billing cycle.
*/
readonly "added_this_cycle"?: number | undefined;
  /**
* The number of seats that are pending cancellation at the end of the current billing cycle.
*/
readonly "pending_cancellation"?: number | undefined;
  /**
* The number of users who have been invited to receive a Copilot seat through this organization.
*/
readonly "pending_invitation"?: number | undefined;
  /**
* The number of seats that have used Copilot during the current billing cycle.
*/
readonly "active_this_cycle"?: number | undefined;
  /**
* The number of seats that have not used Copilot during the current billing cycle.
*/
readonly "inactive_this_cycle"?: number | undefined
}

/**
* The organization policy for allowing or blocking suggestions matching public code (duplication detection filter).
*/
export type CopilotOrganizationDetailsPublicCodeSuggestions = "allow" | "block" | "unconfigured"

/**
* The organization policy for allowing or disallowing Copilot Chat in the IDE.
*/
export type CopilotOrganizationDetailsIdeChat = "enabled" | "disabled" | "unconfigured"

/**
* The organization policy for allowing or disallowing Copilot features on GitHub.com.
*/
export type CopilotOrganizationDetailsPlatformChat = "enabled" | "disabled" | "unconfigured"

/**
* The organization policy for allowing or disallowing Copilot in the CLI.
*/
export type CopilotOrganizationDetailsCli = "enabled" | "disabled" | "unconfigured"

/**
* The mode of assigning new seats.
*/
export type CopilotOrganizationDetailsSeatManagementSetting = "assign_all" | "assign_selected" | "disabled" | "unconfigured"

/**
* The Copilot plan of the organization, or the parent enterprise, when applicable.
*/
export type CopilotOrganizationDetailsPlanType = "business" | "enterprise"

/**
* Information about the seat breakdown and policies set for an organization with a Copilot Business or Copilot Enterprise subscription.
*/
export interface CopilotOrganizationDetails {
  readonly "seat_breakdown": CopilotOrganizationSeatBreakdown;
  /**
* The organization policy for allowing or blocking suggestions matching public code (duplication detection filter).
*/
readonly "public_code_suggestions": CopilotOrganizationDetailsPublicCodeSuggestions;
  /**
* The organization policy for allowing or disallowing Copilot Chat in the IDE.
*/
readonly "ide_chat"?: CopilotOrganizationDetailsIdeChat | undefined;
  /**
* The organization policy for allowing or disallowing Copilot features on GitHub.com.
*/
readonly "platform_chat"?: CopilotOrganizationDetailsPlatformChat | undefined;
  /**
* The organization policy for allowing or disallowing Copilot in the CLI.
*/
readonly "cli"?: CopilotOrganizationDetailsCli | undefined;
  /**
* The mode of assigning new seats.
*/
readonly "seat_management_setting": CopilotOrganizationDetailsSeatManagementSetting;
  /**
* The Copilot plan of the organization, or the parent enterprise, when applicable.
*/
readonly "plan_type"?: CopilotOrganizationDetailsPlanType | undefined
}

export interface CopilotListCopilotSeatsParams {
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

/**
* A GitHub organization.
*/
export interface NullableOrganizationSimple {
  readonly "login": string;
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "repos_url": string;
  readonly "events_url": string;
  readonly "hooks_url": string;
  readonly "issues_url": string;
  readonly "members_url": string;
  readonly "public_members_url": string;
  readonly "avatar_url": string;
  readonly "description": string | null
}

/**
* Group of enterprise owners and/or members
*/
export interface EnterpriseTeam {
  readonly "id": number;
  readonly "name": string;
  readonly "description"?: string | undefined;
  readonly "slug": string;
  readonly "url": string;
  readonly "sync_to_organizations"?: string | undefined;
  readonly "organization_selection_type"?: string | undefined;
  readonly "group_id"?: string | null | undefined;
  readonly "group_name"?: string | null | undefined;
  readonly "html_url": string;
  readonly "members_url": string;
  readonly "created_at": string;
  readonly "updated_at": string
}

/**
* The Copilot plan of the organization, or the parent enterprise, when applicable.
*/
export type CopilotSeatDetailsPlanType = "business" | "enterprise" | "unknown"

/**
* Information about a Copilot Business seat assignment for a user, team, or organization.
*/
export interface CopilotSeatDetails {
  readonly "assignee"?: NullableSimpleUser | null | undefined;
  readonly "organization"?: NullableOrganizationSimple | null | undefined;
  /**
* The team through which the assignee is granted access to GitHub Copilot, if applicable.
*/
readonly "assigning_team"?: Team | EnterpriseTeam | null | undefined;
  /**
* The pending cancellation date for the seat, in `YYYY-MM-DD` format. This will be null unless the assignee's Copilot access has been canceled during the current billing cycle. If the seat has been cancelled, this corresponds to the start of the organization's next billing cycle.
*/
readonly "pending_cancellation_date"?: string | null | undefined;
  /**
* Timestamp of user's last GitHub Copilot activity, in ISO 8601 format.
*/
readonly "last_activity_at"?: string | null | undefined;
  /**
* Last editor that was used by the user for a GitHub Copilot completion.
*/
readonly "last_activity_editor"?: string | null | undefined;
  /**
* Timestamp of the last time the user authenticated with GitHub Copilot, in ISO 8601 format.
*/
readonly "last_authenticated_at"?: string | null | undefined;
  /**
* Timestamp of when the assignee was last granted access to GitHub Copilot, in ISO 8601 format.
*/
readonly "created_at": string;
  /**
* **Closing down notice:** This field is no longer relevant and is closing down. Use the `created_at` field to determine when the assignee was last granted access to GitHub Copilot. Timestamp of when the assignee's GitHub Copilot access was last updated, in ISO 8601 format.
*/
readonly "updated_at"?: string | undefined;
  /**
* The Copilot plan of the organization, or the parent enterprise, when applicable.
*/
readonly "plan_type"?: CopilotSeatDetailsPlanType | undefined
}

export interface CopilotListCopilotSeats200 {
  /**
* Total number of Copilot seats for the organization currently being billed.
*/
readonly "total_seats"?: number | undefined;
  readonly "seats"?: ReadonlyArray<CopilotSeatDetails> | undefined
}

export interface CopilotAddCopilotSeatsForTeamsParams {
  
}

export interface CopilotAddCopilotSeatsForTeamsRequest {
  /**
* List of team names within the organization to which to grant access to GitHub Copilot.
*/
readonly "selected_teams": ReadonlyArray<string>
}

/**
* The total number of seats created for members of the specified team(s).
*/
export interface CopilotAddCopilotSeatsForTeams201 {
  readonly "seats_created": number
}

export interface CopilotCancelCopilotSeatAssignmentForTeamsParams {
  
}

export interface CopilotCancelCopilotSeatAssignmentForTeamsRequest {
  /**
* The names of teams from which to revoke access to GitHub Copilot.
*/
readonly "selected_teams": ReadonlyArray<string>
}

/**
* The total number of seats set to "pending cancellation" for members of the specified team(s).
*/
export interface CopilotCancelCopilotSeatAssignmentForTeams200 {
  readonly "seats_cancelled": number
}

export interface CopilotAddCopilotSeatsForUsersParams {
  
}

export interface CopilotAddCopilotSeatsForUsersRequest {
  /**
* The usernames of the organization members to be granted access to GitHub Copilot.
*/
readonly "selected_usernames": ReadonlyArray<string>
}

/**
* The total number of seats created for the specified user(s).
*/
export interface CopilotAddCopilotSeatsForUsers201 {
  readonly "seats_created": number
}

export interface CopilotCancelCopilotSeatAssignmentForUsersParams {
  
}

export interface CopilotCancelCopilotSeatAssignmentForUsersRequest {
  /**
* The usernames of the organization members for which to revoke access to GitHub Copilot.
*/
readonly "selected_usernames": ReadonlyArray<string>
}

/**
* The total number of seats set to "pending cancellation" for the specified users.
*/
export interface CopilotCancelCopilotSeatAssignmentForUsers200 {
  readonly "seats_cancelled": number
}

export interface CopilotCopilotMetricsForOrganizationParams {
  readonly "since"?: string | undefined;
  readonly "until"?: string | undefined;
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

/**
* Usage metrics for Copilot editor code completions in the IDE.
*/
export interface CopilotIdeCodeCompletions {
  /**
* Number of users who accepted at least one Copilot code suggestion, across all active editors. Includes both full and partial acceptances.
*/
readonly "total_engaged_users"?: number | undefined;
  /**
* Code completion metrics for active languages.
*/
readonly "languages"?: ReadonlyArray<{
  /**
* Name of the language used for Copilot code completion suggestions.
*/
readonly "name"?: string | undefined;
  /**
* Number of users who accepted at least one Copilot code completion suggestion for the given language. Includes both full and partial acceptances.
*/
readonly "total_engaged_users"?: number | undefined
}> | undefined;
  readonly "editors"?: ReadonlyArray<{
  /**
* Name of the given editor.
*/
readonly "name"?: string | undefined;
  /**
* Number of users who accepted at least one Copilot code completion suggestion for the given editor. Includes both full and partial acceptances.
*/
readonly "total_engaged_users"?: number | undefined;
  /**
* List of model metrics for custom models and the default model.
*/
readonly "models"?: ReadonlyArray<{
  /**
* Name of the model used for Copilot code completion suggestions. If the default model is used will appear as 'default'.
*/
readonly "name"?: string | undefined;
  /**
* Indicates whether a model is custom or default.
*/
readonly "is_custom_model"?: boolean | undefined;
  /**
* The training date for the custom model.
*/
readonly "custom_model_training_date"?: string | null | undefined;
  /**
* Number of users who accepted at least one Copilot code completion suggestion for the given editor, for the given language and model. Includes both full and partial acceptances.
*/
readonly "total_engaged_users"?: number | undefined;
  /**
* Code completion metrics for active languages, for the given editor.
*/
readonly "languages"?: ReadonlyArray<{
  /**
* Name of the language used for Copilot code completion suggestions, for the given editor.
*/
readonly "name"?: string | undefined;
  /**
* Number of users who accepted at least one Copilot code completion suggestion for the given editor, for the given language. Includes both full and partial acceptances.
*/
readonly "total_engaged_users"?: number | undefined;
  /**
* The number of Copilot code suggestions generated for the given editor, for the given language.
*/
readonly "total_code_suggestions"?: number | undefined;
  /**
* The number of Copilot code suggestions accepted for the given editor, for the given language. Includes both full and partial acceptances.
*/
readonly "total_code_acceptances"?: number | undefined;
  /**
* The number of lines of code suggested by Copilot code completions for the given editor, for the given language.
*/
readonly "total_code_lines_suggested"?: number | undefined;
  /**
* The number of lines of code accepted from Copilot code suggestions for the given editor, for the given language.
*/
readonly "total_code_lines_accepted"?: number | undefined
}> | undefined
}> | undefined
}> | undefined
}

/**
* Usage metrics for Copilot Chat in the IDE.
*/
export interface CopilotIdeChat {
  /**
* Total number of users who prompted Copilot Chat in the IDE.
*/
readonly "total_engaged_users"?: number | undefined;
  readonly "editors"?: ReadonlyArray<{
  /**
* Name of the given editor.
*/
readonly "name"?: string | undefined;
  /**
* The number of users who prompted Copilot Chat in the specified editor.
*/
readonly "total_engaged_users"?: number | undefined;
  /**
* List of model metrics for custom models and the default model.
*/
readonly "models"?: ReadonlyArray<{
  /**
* Name of the model used for Copilot Chat. If the default model is used will appear as 'default'.
*/
readonly "name"?: string | undefined;
  /**
* Indicates whether a model is custom or default.
*/
readonly "is_custom_model"?: boolean | undefined;
  /**
* The training date for the custom model.
*/
readonly "custom_model_training_date"?: string | null | undefined;
  /**
* The number of users who prompted Copilot Chat in the given editor and model.
*/
readonly "total_engaged_users"?: number | undefined;
  /**
* The total number of chats initiated by users in the given editor and model.
*/
readonly "total_chats"?: number | undefined;
  /**
* The number of times users accepted a code suggestion from Copilot Chat using the 'Insert Code' UI element, for the given editor.
*/
readonly "total_chat_insertion_events"?: number | undefined;
  /**
* The number of times users copied a code suggestion from Copilot Chat using the keyboard, or the 'Copy' UI element, for the given editor.
*/
readonly "total_chat_copy_events"?: number | undefined
}> | undefined
}> | undefined
}

/**
* Usage metrics for Copilot Chat in GitHub.com
*/
export interface CopilotDotcomChat {
  /**
* Total number of users who prompted Copilot Chat on github.com at least once.
*/
readonly "total_engaged_users"?: number | undefined;
  /**
* List of model metrics for a custom models and the default model.
*/
readonly "models"?: ReadonlyArray<{
  /**
* Name of the model used for Copilot Chat. If the default model is used will appear as 'default'.
*/
readonly "name"?: string | undefined;
  /**
* Indicates whether a model is custom or default.
*/
readonly "is_custom_model"?: boolean | undefined;
  /**
* The training date for the custom model (if applicable).
*/
readonly "custom_model_training_date"?: string | null | undefined;
  /**
* Total number of users who prompted Copilot Chat on github.com at least once for each model.
*/
readonly "total_engaged_users"?: number | undefined;
  /**
* Total number of chats initiated by users on github.com.
*/
readonly "total_chats"?: number | undefined
}> | undefined
}

/**
* Usage metrics for Copilot for pull requests.
*/
export interface CopilotDotcomPullRequests {
  /**
* The number of users who used Copilot for Pull Requests on github.com to generate a pull request summary at least once.
*/
readonly "total_engaged_users"?: number | undefined;
  /**
* Repositories in which users used Copilot for Pull Requests to generate pull request summaries
*/
readonly "repositories"?: ReadonlyArray<{
  /**
* Repository name
*/
readonly "name"?: string | undefined;
  /**
* The number of users who generated pull request summaries using Copilot for Pull Requests in the given repository.
*/
readonly "total_engaged_users"?: number | undefined;
  /**
* List of model metrics for custom models and the default model.
*/
readonly "models"?: ReadonlyArray<{
  /**
* Name of the model used for Copilot pull request summaries. If the default model is used will appear as 'default'.
*/
readonly "name"?: string | undefined;
  /**
* Indicates whether a model is custom or default.
*/
readonly "is_custom_model"?: boolean | undefined;
  /**
* The training date for the custom model.
*/
readonly "custom_model_training_date"?: string | null | undefined;
  /**
* The number of pull request summaries generated using Copilot for Pull Requests in the given repository.
*/
readonly "total_pr_summaries_created"?: number | undefined;
  /**
* The number of users who generated pull request summaries using Copilot for Pull Requests in the given repository and model.
*/
readonly "total_engaged_users"?: number | undefined
}> | undefined
}> | undefined
}

/**
* Copilot usage metrics for a given day.
*/
export interface CopilotUsageMetricsDay {
  /**
* The date for which the usage metrics are aggregated, in `YYYY-MM-DD` format.
*/
readonly "date": string;
  /**
* The total number of Copilot users with activity belonging to any Copilot feature, globally, for the given day. Includes passive activity such as receiving a code suggestion, as well as engagement activity such as accepting a code suggestion or prompting chat. Does not include authentication events. Is not limited to the individual features detailed on the endpoint.
*/
readonly "total_active_users"?: number | undefined;
  /**
* The total number of Copilot users who engaged with any Copilot feature, for the given day. Examples include but are not limited to accepting a code suggestion, prompting Copilot chat, or triggering a PR Summary. Does not include authentication events. Is not limited to the individual features detailed on the endpoint.
*/
readonly "total_engaged_users"?: number | undefined;
  readonly "copilot_ide_code_completions"?: CopilotIdeCodeCompletions | null | undefined;
  readonly "copilot_ide_chat"?: CopilotIdeChat | null | undefined;
  readonly "copilot_dotcom_chat"?: CopilotDotcomChat | null | undefined;
  readonly "copilot_dotcom_pull_requests"?: CopilotDotcomPullRequests | null | undefined
}

export type CopilotCopilotMetricsForOrganization200 = ReadonlyArray<CopilotUsageMetricsDay>

export type DependabotListAlertsForOrgParamsScope = "development" | "runtime"

export type DependabotListAlertsForOrgParamsSort = "created" | "updated" | "epss_percentage"

export type DependabotListAlertsForOrgParamsDirection = "asc" | "desc"

export interface DependabotListAlertsForOrgParams {
  readonly "state"?: string | undefined;
  readonly "severity"?: string | undefined;
  readonly "ecosystem"?: string | undefined;
  readonly "package"?: string | undefined;
  readonly "epss_percentage"?: string | undefined;
  readonly "artifact_registry_url"?: string | undefined;
  readonly "artifact_registry"?: string | undefined;
  readonly "has"?: string | ReadonlyArray<"patch"> | undefined;
  readonly "scope"?: DependabotListAlertsForOrgParamsScope | undefined;
  readonly "sort"?: DependabotListAlertsForOrgParamsSort | undefined;
  readonly "direction"?: DependabotListAlertsForOrgParamsDirection | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined;
  readonly "first"?: number | undefined;
  readonly "last"?: number | undefined;
  readonly "per_page"?: number | undefined
}

export type DependabotListAlertsForOrg200 = ReadonlyArray<DependabotAlertWithRepository>

export interface DependabotListOrgSecretsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Visibility of a secret
*/
export type OrganizationDependabotSecretVisibility = "all" | "private" | "selected"

/**
* Secrets for GitHub Dependabot for an organization.
*/
export interface OrganizationDependabotSecret {
  /**
* The name of the secret.
*/
readonly "name": string;
  readonly "created_at": string;
  readonly "updated_at": string;
  /**
* Visibility of a secret
*/
readonly "visibility": OrganizationDependabotSecretVisibility;
  readonly "selected_repositories_url"?: string | undefined
}

export interface DependabotListOrgSecrets200 {
  readonly "total_count": number;
  readonly "secrets": ReadonlyArray<OrganizationDependabotSecret>
}

export interface DependabotGetOrgPublicKeyParams {
  
}

/**
* The public key used for setting Dependabot Secrets.
*/
export interface DependabotPublicKey {
  /**
* The identifier for the key.
*/
readonly "key_id": string;
  /**
* The Base64 encoded public key.
*/
readonly "key": string
}

export interface DependabotGetOrgSecretParams {
  
}

export interface DependabotCreateOrUpdateOrgSecretParams {
  
}

/**
* Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
*/
export type DependabotCreateOrUpdateOrgSecretRequestVisibility = "all" | "private" | "selected"

export interface DependabotCreateOrUpdateOrgSecretRequest {
  /**
* Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/dependabot/secrets#get-an-organization-public-key) endpoint.
*/
readonly "encrypted_value"?: string | undefined;
  /**
* ID of the key you used to encrypt the secret.
*/
readonly "key_id"?: string | undefined;
  /**
* Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
*/
readonly "visibility": DependabotCreateOrUpdateOrgSecretRequestVisibility;
  /**
* An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
*/
readonly "selected_repository_ids"?: ReadonlyArray<string> | undefined
}

export interface DependabotDeleteOrgSecretParams {
  
}

export interface DependabotListSelectedReposForOrgSecretParams {
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

export interface DependabotListSelectedReposForOrgSecret200 {
  readonly "total_count": number;
  readonly "repositories": ReadonlyArray<MinimalRepository>
}

export interface DependabotSetSelectedReposForOrgSecretParams {
  
}

export interface DependabotSetSelectedReposForOrgSecretRequest {
  /**
* An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
*/
readonly "selected_repository_ids": ReadonlyArray<number>
}

export interface DependabotAddSelectedRepoToOrgSecretParams {
  
}

export interface DependabotRemoveSelectedRepoFromOrgSecretParams {
  
}

export interface PackagesListDockerMigrationConflictingPackagesForOrganizationParams {
  
}

export type PackagePackageType = "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"

export type PackageVisibility = "private" | "public"

/**
* Minimal Repository
*/
export interface NullableMinimalRepository {
  readonly "id": number;
  readonly "node_id": string;
  readonly "name": string;
  readonly "full_name": string;
  readonly "owner": SimpleUser;
  readonly "private": boolean;
  readonly "html_url": string;
  readonly "description": string | null;
  readonly "fork": boolean;
  readonly "url": string;
  readonly "archive_url": string;
  readonly "assignees_url": string;
  readonly "blobs_url": string;
  readonly "branches_url": string;
  readonly "collaborators_url": string;
  readonly "comments_url": string;
  readonly "commits_url": string;
  readonly "compare_url": string;
  readonly "contents_url": string;
  readonly "contributors_url": string;
  readonly "deployments_url": string;
  readonly "downloads_url": string;
  readonly "events_url": string;
  readonly "forks_url": string;
  readonly "git_commits_url": string;
  readonly "git_refs_url": string;
  readonly "git_tags_url": string;
  readonly "git_url"?: string | undefined;
  readonly "issue_comment_url": string;
  readonly "issue_events_url": string;
  readonly "issues_url": string;
  readonly "keys_url": string;
  readonly "labels_url": string;
  readonly "languages_url": string;
  readonly "merges_url": string;
  readonly "milestones_url": string;
  readonly "notifications_url": string;
  readonly "pulls_url": string;
  readonly "releases_url": string;
  readonly "ssh_url"?: string | undefined;
  readonly "stargazers_url": string;
  readonly "statuses_url": string;
  readonly "subscribers_url": string;
  readonly "subscription_url": string;
  readonly "tags_url": string;
  readonly "teams_url": string;
  readonly "trees_url": string;
  readonly "clone_url"?: string | undefined;
  readonly "mirror_url"?: string | null | undefined;
  readonly "hooks_url": string;
  readonly "svn_url"?: string | undefined;
  readonly "homepage"?: string | null | undefined;
  readonly "language"?: string | null | undefined;
  readonly "forks_count"?: number | undefined;
  readonly "stargazers_count"?: number | undefined;
  readonly "watchers_count"?: number | undefined;
  /**
* The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
*/
readonly "size"?: number | undefined;
  readonly "default_branch"?: string | undefined;
  readonly "open_issues_count"?: number | undefined;
  readonly "is_template"?: boolean | undefined;
  readonly "topics"?: ReadonlyArray<string> | undefined;
  readonly "has_issues"?: boolean | undefined;
  readonly "has_projects"?: boolean | undefined;
  readonly "has_wiki"?: boolean | undefined;
  readonly "has_pages"?: boolean | undefined;
  readonly "has_downloads"?: boolean | undefined;
  readonly "has_discussions"?: boolean | undefined;
  readonly "archived"?: boolean | undefined;
  readonly "disabled"?: boolean | undefined;
  readonly "visibility"?: string | undefined;
  readonly "pushed_at"?: string | null | undefined;
  readonly "created_at"?: string | null | undefined;
  readonly "updated_at"?: string | null | undefined;
  readonly "permissions"?: {
  readonly "admin"?: boolean | undefined;
  readonly "maintain"?: boolean | undefined;
  readonly "push"?: boolean | undefined;
  readonly "triage"?: boolean | undefined;
  readonly "pull"?: boolean | undefined
} | undefined;
  readonly "role_name"?: string | undefined;
  readonly "temp_clone_token"?: string | undefined;
  readonly "delete_branch_on_merge"?: boolean | undefined;
  readonly "subscribers_count"?: number | undefined;
  readonly "network_count"?: number | undefined;
  readonly "code_of_conduct"?: CodeOfConduct | undefined;
  readonly "license"?: {
  readonly "key"?: string | undefined;
  readonly "name"?: string | undefined;
  readonly "spdx_id"?: string | undefined;
  readonly "url"?: string | undefined;
  readonly "node_id"?: string | undefined
} | null | undefined;
  readonly "forks"?: number | undefined;
  readonly "open_issues"?: number | undefined;
  readonly "watchers"?: number | undefined;
  readonly "allow_forking"?: boolean | undefined;
  readonly "web_commit_signoff_required"?: boolean | undefined;
  readonly "security_and_analysis"?: SecurityAndAnalysis | null | undefined;
  /**
* The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
*/
readonly "custom_properties"?: Record<string, unknown> | undefined
}

/**
* A software package
*/
export interface Package {
  /**
* Unique identifier of the package.
*/
readonly "id": number;
  /**
* The name of the package.
*/
readonly "name": string;
  readonly "package_type": PackagePackageType;
  readonly "url": string;
  readonly "html_url": string;
  /**
* The number of versions of the package.
*/
readonly "version_count": number;
  readonly "visibility": PackageVisibility;
  readonly "owner"?: NullableSimpleUser | null | undefined;
  readonly "repository"?: NullableMinimalRepository | null | undefined;
  readonly "created_at": string;
  readonly "updated_at": string
}

export type PackagesListDockerMigrationConflictingPackagesForOrganization200 = ReadonlyArray<Package>

export interface ActivityListPublicOrgEventsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ActivityListPublicOrgEvents200 = ReadonlyArray<Event>

export interface OrgsListFailedInvitationsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Organization Invitation
*/
export interface OrganizationInvitation {
  readonly "id": number;
  readonly "login": string | null;
  readonly "email": string | null;
  readonly "role": string;
  readonly "created_at": string;
  readonly "failed_at"?: string | null | undefined;
  readonly "failed_reason"?: string | null | undefined;
  readonly "inviter": SimpleUser;
  readonly "team_count": number;
  readonly "node_id": string;
  readonly "invitation_teams_url": string;
  readonly "invitation_source"?: string | undefined
}

export type OrgsListFailedInvitations200 = ReadonlyArray<OrganizationInvitation>

export interface OrgsListWebhooksParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Org Hook
*/
export interface OrgHook {
  readonly "id": number;
  readonly "url": string;
  readonly "ping_url": string;
  readonly "deliveries_url"?: string | undefined;
  readonly "name": string;
  readonly "events": ReadonlyArray<string>;
  readonly "active": boolean;
  readonly "config": {
  readonly "url"?: string | undefined;
  readonly "insecure_ssl"?: string | undefined;
  readonly "content_type"?: string | undefined;
  readonly "secret"?: string | undefined
};
  readonly "updated_at": string;
  readonly "created_at": string;
  readonly "type": string
}

export type OrgsListWebhooks200 = ReadonlyArray<OrgHook>

export interface OrgsCreateWebhookParams {
  
}

export interface OrgsCreateWebhookRequest {
  /**
* Must be passed as "web".
*/
readonly "name": string;
  /**
* Key/value pairs to provide settings for this webhook.
*/
readonly "config": {
  readonly "url": WebhookConfigUrl;
  readonly "content_type"?: WebhookConfigContentType | undefined;
  readonly "secret"?: WebhookConfigSecret | undefined;
  readonly "insecure_ssl"?: WebhookConfigInsecureSsl | undefined;
  readonly "username"?: string | undefined;
  readonly "password"?: string | undefined
};
  /**
* Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `["*"]` to receive all possible events.
*/
readonly "events"?: ReadonlyArray<string> | undefined;
  /**
* Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
*/
readonly "active"?: boolean | undefined
}

export interface OrgsGetWebhookParams {
  
}

export interface OrgsDeleteWebhookParams {
  
}

export interface OrgsUpdateWebhookParams {
  
}

export interface OrgsUpdateWebhookRequest {
  /**
* Key/value pairs to provide settings for this webhook.
*/
readonly "config"?: {
  readonly "url": WebhookConfigUrl;
  readonly "content_type"?: WebhookConfigContentType | undefined;
  readonly "secret"?: WebhookConfigSecret | undefined;
  readonly "insecure_ssl"?: WebhookConfigInsecureSsl | undefined
} | undefined;
  /**
* Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
*/
readonly "events"?: ReadonlyArray<string> | undefined;
  /**
* Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
*/
readonly "active"?: boolean | undefined;
  readonly "name"?: string | undefined
}

export interface OrgsGetWebhookConfigForOrgParams {
  
}

export interface OrgsUpdateWebhookConfigForOrgParams {
  
}

export interface OrgsUpdateWebhookConfigForOrgRequest {
  readonly "url"?: WebhookConfigUrl | undefined;
  readonly "content_type"?: WebhookConfigContentType | undefined;
  readonly "secret"?: WebhookConfigSecret | undefined;
  readonly "insecure_ssl"?: WebhookConfigInsecureSsl | undefined
}

export interface OrgsListWebhookDeliveriesParams {
  readonly "per_page"?: number | undefined;
  readonly "cursor"?: string | undefined
}

export type OrgsListWebhookDeliveries200 = ReadonlyArray<HookDeliveryItem>

export interface OrgsGetWebhookDeliveryParams {
  
}

export interface OrgsRedeliverWebhookDeliveryParams {
  
}

export type OrgsRedeliverWebhookDelivery202 = Record<string, unknown>

export interface OrgsPingWebhookParams {
  
}

export type ApiInsightsGetRouteStatsByActorParamsDirection = "asc" | "desc"

export interface ApiInsightsGetRouteStatsByActorParams {
  readonly "min_timestamp": string;
  readonly "max_timestamp"?: string | undefined;
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined;
  readonly "direction"?: ApiInsightsGetRouteStatsByActorParamsDirection | undefined;
  readonly "sort"?: ReadonlyArray<"last_rate_limited_timestamp" | "last_request_timestamp" | "rate_limited_request_count" | "http_method" | "api_route" | "total_request_count"> | undefined;
  readonly "api_route_substring"?: string | undefined
}

/**
* API Insights usage route stats for an actor
*/
export type ApiInsightsRouteStats = ReadonlyArray<{
  /**
* The HTTP method
*/
readonly "http_method"?: string | undefined;
  /**
* The API path's route template
*/
readonly "api_route"?: string | undefined;
  /**
* The total number of requests within the queried time period
*/
readonly "total_request_count"?: number | undefined;
  /**
* The total number of requests that were rate limited within the queried time period
*/
readonly "rate_limited_request_count"?: number | undefined;
  readonly "last_rate_limited_timestamp"?: string | null | undefined;
  readonly "last_request_timestamp"?: string | undefined
}>

export type ApiInsightsGetSubjectStatsParamsDirection = "asc" | "desc"

export interface ApiInsightsGetSubjectStatsParams {
  readonly "min_timestamp": string;
  readonly "max_timestamp"?: string | undefined;
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined;
  readonly "direction"?: ApiInsightsGetSubjectStatsParamsDirection | undefined;
  readonly "sort"?: ReadonlyArray<"last_rate_limited_timestamp" | "last_request_timestamp" | "rate_limited_request_count" | "subject_name" | "total_request_count"> | undefined;
  readonly "subject_name_substring"?: string | undefined
}

/**
* API Insights usage subject stats for an organization
*/
export type ApiInsightsSubjectStats = ReadonlyArray<{
  readonly "subject_type"?: string | undefined;
  readonly "subject_name"?: string | undefined;
  readonly "subject_id"?: number | undefined;
  readonly "total_request_count"?: number | undefined;
  readonly "rate_limited_request_count"?: number | undefined;
  readonly "last_rate_limited_timestamp"?: string | null | undefined;
  readonly "last_request_timestamp"?: string | undefined
}>

export interface ApiInsightsGetSummaryStatsParams {
  readonly "min_timestamp": string;
  readonly "max_timestamp"?: string | undefined
}

/**
* API Insights usage summary stats for an organization
*/
export interface ApiInsightsSummaryStats {
  /**
* The total number of requests within the queried time period
*/
readonly "total_request_count"?: number | undefined;
  /**
* The total number of requests that were rate limited within the queried time period
*/
readonly "rate_limited_request_count"?: number | undefined
}

export interface ApiInsightsGetSummaryStatsByUserParams {
  readonly "min_timestamp": string;
  readonly "max_timestamp"?: string | undefined
}

export interface ApiInsightsGetSummaryStatsByActorParams {
  readonly "min_timestamp": string;
  readonly "max_timestamp"?: string | undefined
}

export interface ApiInsightsGetTimeStatsParams {
  readonly "min_timestamp": string;
  readonly "max_timestamp"?: string | undefined;
  readonly "timestamp_increment": string
}

/**
* API Insights usage time stats for an organization
*/
export type ApiInsightsTimeStats = ReadonlyArray<{
  readonly "timestamp"?: string | undefined;
  readonly "total_request_count"?: number | undefined;
  readonly "rate_limited_request_count"?: number | undefined
}>

export interface ApiInsightsGetTimeStatsByUserParams {
  readonly "min_timestamp": string;
  readonly "max_timestamp"?: string | undefined;
  readonly "timestamp_increment": string
}

export interface ApiInsightsGetTimeStatsByActorParams {
  readonly "min_timestamp": string;
  readonly "max_timestamp"?: string | undefined;
  readonly "timestamp_increment": string
}

export type ApiInsightsGetUserStatsParamsDirection = "asc" | "desc"

export interface ApiInsightsGetUserStatsParams {
  readonly "min_timestamp": string;
  readonly "max_timestamp"?: string | undefined;
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined;
  readonly "direction"?: ApiInsightsGetUserStatsParamsDirection | undefined;
  readonly "sort"?: ReadonlyArray<"last_rate_limited_timestamp" | "last_request_timestamp" | "rate_limited_request_count" | "subject_name" | "total_request_count"> | undefined;
  readonly "actor_name_substring"?: string | undefined
}

/**
* API Insights usage stats for a user
*/
export type ApiInsightsUserStats = ReadonlyArray<{
  readonly "actor_type"?: string | undefined;
  readonly "actor_name"?: string | undefined;
  readonly "actor_id"?: number | undefined;
  readonly "integration_id"?: number | null | undefined;
  readonly "oauth_application_id"?: number | null | undefined;
  readonly "total_request_count"?: number | undefined;
  readonly "rate_limited_request_count"?: number | undefined;
  readonly "last_rate_limited_timestamp"?: string | null | undefined;
  readonly "last_request_timestamp"?: string | undefined
}>

export interface AppsGetOrgInstallationParams {
  
}

export interface OrgsListAppInstallationsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface OrgsListAppInstallations200 {
  readonly "total_count": number;
  readonly "installations": ReadonlyArray<Installation>
}

export interface InteractionsGetRestrictionsForOrgParams {
  
}

/**
* The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.
*/
export type InteractionGroup = "existing_users" | "contributors_only" | "collaborators_only"

/**
* Interaction limit settings.
*/
export interface InteractionLimitResponse {
  readonly "limit": InteractionGroup;
  readonly "origin": string;
  readonly "expires_at": string
}

export type InteractionsGetRestrictionsForOrg200 = InteractionLimitResponse | {
  
}

export interface InteractionsSetRestrictionsForOrgParams {
  
}

/**
* The duration of the interaction restriction. Default: `one_day`.
*/
export type InteractionExpiry = "one_day" | "three_days" | "one_week" | "one_month" | "six_months"

/**
* Limit interactions to a specific type of user for a specified duration
*/
export interface InteractionLimit {
  readonly "limit": InteractionGroup;
  readonly "expiry"?: InteractionExpiry | undefined
}

export interface InteractionsRemoveRestrictionsForOrgParams {
  
}

export type OrgsListPendingInvitationsParamsRole = "all" | "admin" | "direct_member" | "billing_manager" | "hiring_manager"

export type OrgsListPendingInvitationsParamsInvitationSource = "all" | "member" | "scim"

export interface OrgsListPendingInvitationsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined;
  readonly "role"?: OrgsListPendingInvitationsParamsRole | undefined;
  readonly "invitation_source"?: OrgsListPendingInvitationsParamsInvitationSource | undefined
}

export type OrgsListPendingInvitations200 = ReadonlyArray<OrganizationInvitation>

export interface OrgsCreateInvitationParams {
  
}

/**
* The role for the new member. 
*  * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  
*  * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  
*  * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization. 
*  * `reinstate` - The previous role assigned to the invitee before they were removed from your organization. Can be one of the roles listed above. Only works if the invitee was previously part of your organization.
*/
export type OrgsCreateInvitationRequestRole = "admin" | "direct_member" | "billing_manager" | "reinstate"

export interface OrgsCreateInvitationRequest {
  /**
* **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
*/
readonly "invitee_id"?: number | undefined;
  /**
* **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.
*/
readonly "email"?: string | undefined;
  /**
* The role for the new member. 
*  * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  
*  * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  
*  * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization. 
*  * `reinstate` - The previous role assigned to the invitee before they were removed from your organization. Can be one of the roles listed above. Only works if the invitee was previously part of your organization.
*/
readonly "role"?: OrgsCreateInvitationRequestRole | undefined;
  /**
* Specify IDs for the teams you want to invite new members to.
*/
readonly "team_ids"?: ReadonlyArray<number> | undefined
}

export interface OrgsCancelInvitationParams {
  
}

export interface OrgsListInvitationTeamsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type OrgsListInvitationTeams200 = ReadonlyArray<Team>

export interface OrgsListIssueTypesParams {
  
}

export type OrgsListIssueTypes200 = ReadonlyArray<IssueType>

export interface OrgsCreateIssueTypeParams {
  
}

/**
* Color for the issue type.
*/
export type OrganizationCreateIssueTypeColor = "gray" | "blue" | "green" | "yellow" | "orange" | "red" | "pink" | "purple"

export interface OrganizationCreateIssueType {
  /**
* Name of the issue type.
*/
readonly "name": string;
  /**
* Whether or not the issue type is enabled at the organization level.
*/
readonly "is_enabled": boolean;
  /**
* Description of the issue type.
*/
readonly "description"?: string | null | undefined;
  /**
* Color for the issue type.
*/
readonly "color"?: OrganizationCreateIssueTypeColor | null | undefined
}

export interface OrgsUpdateIssueTypeParams {
  
}

/**
* Color for the issue type.
*/
export type OrganizationUpdateIssueTypeColor = "gray" | "blue" | "green" | "yellow" | "orange" | "red" | "pink" | "purple"

export interface OrganizationUpdateIssueType {
  /**
* Name of the issue type.
*/
readonly "name": string;
  /**
* Whether or not the issue type is enabled at the organization level.
*/
readonly "is_enabled": boolean;
  /**
* Description of the issue type.
*/
readonly "description"?: string | null | undefined;
  /**
* Color for the issue type.
*/
readonly "color"?: OrganizationUpdateIssueTypeColor | null | undefined
}

export interface OrgsDeleteIssueTypeParams {
  
}

export type IssuesListForOrgParamsFilter = "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all"

export type IssuesListForOrgParamsState = "open" | "closed" | "all"

export type IssuesListForOrgParamsSort = "created" | "updated" | "comments"

export type IssuesListForOrgParamsDirection = "asc" | "desc"

export interface IssuesListForOrgParams {
  readonly "filter"?: IssuesListForOrgParamsFilter | undefined;
  readonly "state"?: IssuesListForOrgParamsState | undefined;
  readonly "labels"?: string | undefined;
  readonly "type"?: string | undefined;
  readonly "sort"?: IssuesListForOrgParamsSort | undefined;
  readonly "direction"?: IssuesListForOrgParamsDirection | undefined;
  readonly "since"?: string | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type IssuesListForOrg200 = ReadonlyArray<Issue>

export type OrgsListMembersParamsFilter = "2fa_disabled" | "2fa_insecure" | "all"

export type OrgsListMembersParamsRole = "all" | "admin" | "member"

export interface OrgsListMembersParams {
  readonly "filter"?: OrgsListMembersParamsFilter | undefined;
  readonly "role"?: OrgsListMembersParamsRole | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type OrgsListMembers200 = ReadonlyArray<SimpleUser>

export interface OrgsCheckMembershipForUserParams {
  
}

export interface OrgsRemoveMemberParams {
  
}

export interface CodespacesGetCodespacesForUserInOrgParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface CodespacesGetCodespacesForUserInOrg200 {
  readonly "total_count": number;
  readonly "codespaces": ReadonlyArray<Codespace>
}

export interface CodespacesDeleteFromOrganizationParams {
  
}

export type CodespacesDeleteFromOrganization202 = Record<string, unknown>

export interface CodespacesStopInOrganizationParams {
  
}

export interface CopilotGetCopilotSeatDetailsForUserParams {
  
}

export interface OrgsGetMembershipForUserParams {
  
}

/**
* The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
*/
export type OrgMembershipState = "active" | "pending"

/**
* The user's membership type in the organization.
*/
export type OrgMembershipRole = "admin" | "member" | "billing_manager"

/**
* Org Membership
*/
export interface OrgMembership {
  readonly "url": string;
  /**
* The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
*/
readonly "state": OrgMembershipState;
  /**
* The user's membership type in the organization.
*/
readonly "role": OrgMembershipRole;
  /**
* Whether the user has direct membership in the organization.
*/
readonly "direct_membership"?: boolean | undefined;
  /**
* The slugs of the enterprise teams providing the user with indirect membership in the organization.
* A limit of 100 enterprise team slugs is returned.
*/
readonly "enterprise_teams_providing_indirect_membership"?: ReadonlyArray<string> | undefined;
  readonly "organization_url": string;
  readonly "organization": OrganizationSimple;
  readonly "user": NullableSimpleUser | null;
  readonly "permissions"?: {
  readonly "can_create_repository": boolean
} | undefined
}

export interface OrgsSetMembershipForUserParams {
  
}

/**
* The role to give the user in the organization. Can be one of:  
*  * `admin` - The user will become an owner of the organization.  
*  * `member` - The user will become a non-owner member of the organization.
*/
export type OrgsSetMembershipForUserRequestRole = "admin" | "member"

export interface OrgsSetMembershipForUserRequest {
  /**
* The role to give the user in the organization. Can be one of:  
*  * `admin` - The user will become an owner of the organization.  
*  * `member` - The user will become a non-owner member of the organization.
*/
readonly "role"?: OrgsSetMembershipForUserRequestRole | undefined
}

export interface OrgsRemoveMembershipForUserParams {
  
}

export interface MigrationsListForOrgParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined;
  readonly "exclude"?: ReadonlyArray<"repositories"> | undefined
}

/**
* A migration.
*/
export interface Migration {
  readonly "id": number;
  readonly "owner": NullableSimpleUser | null;
  readonly "guid": string;
  readonly "state": string;
  readonly "lock_repositories": boolean;
  readonly "exclude_metadata": boolean;
  readonly "exclude_git_data": boolean;
  readonly "exclude_attachments": boolean;
  readonly "exclude_releases": boolean;
  readonly "exclude_owner_projects": boolean;
  readonly "org_metadata_only": boolean;
  /**
* The repositories included in the migration. Only returned for export migrations.
*/
readonly "repositories": ReadonlyArray<Repository>;
  readonly "url": string;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "node_id": string;
  readonly "archive_url"?: string | undefined;
  /**
* Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`.
*/
readonly "exclude"?: ReadonlyArray<string> | undefined
}

export type MigrationsListForOrg200 = ReadonlyArray<Migration>

export interface MigrationsStartForOrgParams {
  
}

export interface MigrationsStartForOrgRequest {
  /**
* A list of arrays indicating which repositories should be migrated.
*/
readonly "repositories": ReadonlyArray<string>;
  /**
* Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
*/
readonly "lock_repositories"?: boolean | undefined;
  /**
* Indicates whether metadata should be excluded and only git source should be included for the migration.
*/
readonly "exclude_metadata"?: boolean | undefined;
  /**
* Indicates whether the repository git data should be excluded from the migration.
*/
readonly "exclude_git_data"?: boolean | undefined;
  /**
* Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
*/
readonly "exclude_attachments"?: boolean | undefined;
  /**
* Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
*/
readonly "exclude_releases"?: boolean | undefined;
  /**
* Indicates whether projects owned by the organization or users should be excluded. from the migration.
*/
readonly "exclude_owner_projects"?: boolean | undefined;
  /**
* Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
*/
readonly "org_metadata_only"?: boolean | undefined;
  /**
* Exclude related items from being returned in the response in order to improve performance of the request.
*/
readonly "exclude"?: ReadonlyArray<"repositories"> | undefined
}

export interface MigrationsGetStatusForOrgParams {
  readonly "exclude"?: ReadonlyArray<"repositories"> | undefined
}

export interface MigrationsDownloadArchiveForOrgParams {
  
}

export interface MigrationsDeleteArchiveForOrgParams {
  
}

export interface MigrationsUnlockRepoForOrgParams {
  
}

export interface MigrationsListReposForOrgParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type MigrationsListReposForOrg200 = ReadonlyArray<MinimalRepository>

export interface OrgsListOrgRolesParams {
  
}

/**
* The system role from which this role inherits permissions.
*/
export type OrganizationRoleBaseRole = "read" | "triage" | "write" | "maintain" | "admin"

/**
* Source answers the question, "where did this role come from?"
*/
export type OrganizationRoleSource = "Organization" | "Enterprise" | "Predefined"

/**
* Organization roles
*/
export interface OrganizationRole {
  /**
* The unique identifier of the role.
*/
readonly "id": number;
  /**
* The name of the role.
*/
readonly "name": string;
  /**
* A short description about who this role is for or what permissions it grants.
*/
readonly "description"?: string | null | undefined;
  /**
* The system role from which this role inherits permissions.
*/
readonly "base_role"?: OrganizationRoleBaseRole | null | undefined;
  /**
* Source answers the question, "where did this role come from?"
*/
readonly "source"?: OrganizationRoleSource | null | undefined;
  /**
* A list of permissions included in this role.
*/
readonly "permissions": ReadonlyArray<string>;
  readonly "organization": NullableSimpleUser | null;
  /**
* The date and time the role was created.
*/
readonly "created_at": string;
  /**
* The date and time the role was last updated.
*/
readonly "updated_at": string
}

export interface OrgsListOrgRoles200 {
  /**
* The total number of organization roles available to the organization.
*/
readonly "total_count"?: number | undefined;
  /**
* The list of organization roles available to the organization.
*/
readonly "roles"?: ReadonlyArray<OrganizationRole> | undefined
}

export interface OrgsRevokeAllOrgRolesTeamParams {
  
}

export interface OrgsAssignTeamToOrgRoleParams {
  
}

export interface OrgsRevokeOrgRoleTeamParams {
  
}

export interface OrgsRevokeAllOrgRolesUserParams {
  
}

export interface OrgsAssignUserToOrgRoleParams {
  
}

export interface OrgsRevokeOrgRoleUserParams {
  
}

export interface OrgsGetOrgRoleParams {
  
}

export interface OrgsListOrgRoleTeamsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Determines if the team has a direct, indirect, or mixed relationship to a role
*/
export type TeamRoleAssignmentAssignment = "direct" | "indirect" | "mixed"

/**
* The Relationship a Team has with a role.
*/
export interface TeamRoleAssignment {
  /**
* Determines if the team has a direct, indirect, or mixed relationship to a role
*/
readonly "assignment"?: TeamRoleAssignmentAssignment | undefined;
  readonly "id": number;
  readonly "node_id": string;
  readonly "name": string;
  readonly "slug": string;
  readonly "description": string | null;
  readonly "privacy"?: string | undefined;
  readonly "notification_setting"?: string | undefined;
  readonly "permission": string;
  readonly "permissions"?: {
  readonly "pull": boolean;
  readonly "triage": boolean;
  readonly "push": boolean;
  readonly "maintain": boolean;
  readonly "admin": boolean
} | undefined;
  readonly "url": string;
  readonly "html_url": string;
  readonly "members_url": string;
  readonly "repositories_url": string;
  readonly "parent": NullableTeamSimple | null
}

/**
* List of teams assigned to the organization role
*/
export type OrgsListOrgRoleTeams200 = ReadonlyArray<TeamRoleAssignment>

export interface OrgsListOrgRoleUsersParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Determines if the user has a direct, indirect, or mixed relationship to a role
*/
export type UserRoleAssignmentAssignment = "direct" | "indirect" | "mixed"

/**
* Groups of organization members that gives permissions on specified repositories.
*/
export interface TeamSimple {
  /**
* Unique identifier of the team
*/
readonly "id": number;
  readonly "node_id": string;
  /**
* URL for the team
*/
readonly "url": string;
  readonly "members_url": string;
  /**
* Name of the team
*/
readonly "name": string;
  /**
* Description of the team
*/
readonly "description": string | null;
  /**
* Permission that the team will have for its repositories
*/
readonly "permission": string;
  /**
* The level of privacy this team should have
*/
readonly "privacy"?: string | undefined;
  /**
* The notification setting the team has set
*/
readonly "notification_setting"?: string | undefined;
  readonly "html_url": string;
  readonly "repositories_url": string;
  readonly "slug": string;
  /**
* Distinguished Name (DN) that team maps to within LDAP environment
*/
readonly "ldap_dn"?: string | undefined
}

/**
* The Relationship a User has with a role.
*/
export interface UserRoleAssignment {
  /**
* Determines if the user has a direct, indirect, or mixed relationship to a role
*/
readonly "assignment"?: UserRoleAssignmentAssignment | undefined;
  /**
* Team the user has gotten the role through
*/
readonly "inherited_from"?: ReadonlyArray<TeamSimple> | undefined;
  readonly "name"?: string | null | undefined;
  readonly "email"?: string | null | undefined;
  readonly "login": string;
  readonly "id": number;
  readonly "node_id": string;
  readonly "avatar_url": string;
  readonly "gravatar_id": string | null;
  readonly "url": string;
  readonly "html_url": string;
  readonly "followers_url": string;
  readonly "following_url": string;
  readonly "gists_url": string;
  readonly "starred_url": string;
  readonly "subscriptions_url": string;
  readonly "organizations_url": string;
  readonly "repos_url": string;
  readonly "events_url": string;
  readonly "received_events_url": string;
  readonly "type": string;
  readonly "site_admin": boolean;
  readonly "starred_at"?: string | undefined;
  readonly "user_view_type"?: string | undefined
}

/**
* List of users assigned to the organization role
*/
export type OrgsListOrgRoleUsers200 = ReadonlyArray<UserRoleAssignment>

export type OrgsListOutsideCollaboratorsParamsFilter = "2fa_disabled" | "2fa_insecure" | "all"

export interface OrgsListOutsideCollaboratorsParams {
  readonly "filter"?: OrgsListOutsideCollaboratorsParamsFilter | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type OrgsListOutsideCollaborators200 = ReadonlyArray<SimpleUser>

export interface OrgsConvertMemberToOutsideCollaboratorParams {
  
}

export interface OrgsConvertMemberToOutsideCollaboratorRequest {
  /**
* When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.
*/
readonly "async"?: boolean | undefined
}

export interface OrgsConvertMemberToOutsideCollaborator202 {
  
}

export interface OrgsRemoveOutsideCollaboratorParams {
  
}

export interface OrgsRemoveOutsideCollaborator422 {
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export type PackagesListPackagesForOrganizationParamsPackageType = "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"

export type PackagesListPackagesForOrganizationParamsVisibility = "public" | "private" | "internal"

export interface PackagesListPackagesForOrganizationParams {
  readonly "package_type": PackagesListPackagesForOrganizationParamsPackageType;
  readonly "visibility"?: PackagesListPackagesForOrganizationParamsVisibility | undefined;
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

export type PackagesListPackagesForOrganization200 = ReadonlyArray<Package>

export interface PackagesGetPackageForOrganizationParams {
  
}

export interface PackagesDeletePackageForOrgParams {
  
}

export interface PackagesRestorePackageForOrgParams {
  readonly "token"?: string | undefined
}

export type PackagesGetAllPackageVersionsForPackageOwnedByOrgParamsState = "active" | "deleted"

export interface PackagesGetAllPackageVersionsForPackageOwnedByOrgParams {
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined;
  readonly "state"?: PackagesGetAllPackageVersionsForPackageOwnedByOrgParamsState | undefined
}

export type PackageVersionMetadataPackageType = "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"

/**
* A version of a software package
*/
export interface PackageVersion {
  /**
* Unique identifier of the package version.
*/
readonly "id": number;
  /**
* The name of the package version.
*/
readonly "name": string;
  readonly "url": string;
  readonly "package_html_url": string;
  readonly "html_url"?: string | undefined;
  readonly "license"?: string | undefined;
  readonly "description"?: string | undefined;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "deleted_at"?: string | undefined;
  readonly "metadata"?: {
  readonly "package_type": PackageVersionMetadataPackageType;
  readonly "container"?: {
  readonly "tags": ReadonlyArray<string>
} | undefined;
  readonly "docker"?: {
  readonly "tag"?: ReadonlyArray<string> | undefined
} | undefined
} | undefined
}

export type PackagesGetAllPackageVersionsForPackageOwnedByOrg200 = ReadonlyArray<PackageVersion>

export interface PackagesGetPackageVersionForOrganizationParams {
  
}

export interface PackagesDeletePackageVersionForOrgParams {
  
}

export interface PackagesRestorePackageVersionForOrgParams {
  
}

export type OrgsListPatGrantRequestsParamsSort = "created_at"

export type OrgsListPatGrantRequestsParamsDirection = "asc" | "desc"

export interface OrgsListPatGrantRequestsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined;
  readonly "sort"?: OrgsListPatGrantRequestsParamsSort | undefined;
  readonly "direction"?: OrgsListPatGrantRequestsParamsDirection | undefined;
  readonly "owner"?: ReadonlyArray<string> | undefined;
  readonly "repository"?: string | undefined;
  readonly "permission"?: string | undefined;
  readonly "last_used_before"?: string | undefined;
  readonly "last_used_after"?: string | undefined;
  readonly "token_id"?: ReadonlyArray<string> | undefined
}

/**
* Type of repository selection requested.
*/
export type OrganizationProgrammaticAccessGrantRequestRepositorySelection = "none" | "all" | "subset"

/**
* Minimal representation of an organization programmatic access grant request for enumerations
*/
export interface OrganizationProgrammaticAccessGrantRequest {
  /**
* Unique identifier of the request for access via fine-grained personal access token. The `pat_request_id` used to review PAT requests.
*/
readonly "id": number;
  /**
* Reason for requesting access.
*/
readonly "reason": string | null;
  readonly "owner": SimpleUser;
  /**
* Type of repository selection requested.
*/
readonly "repository_selection": OrganizationProgrammaticAccessGrantRequestRepositorySelection;
  /**
* URL to the list of repositories requested to be accessed via fine-grained personal access token. Should only be followed when `repository_selection` is `subset`.
*/
readonly "repositories_url": string;
  /**
* Permissions requested, categorized by type of permission.
*/
readonly "permissions": {
  readonly "organization"?: Record<string, unknown> | undefined;
  readonly "repository"?: Record<string, unknown> | undefined;
  readonly "other"?: Record<string, unknown> | undefined
};
  /**
* Date and time when the request for access was created.
*/
readonly "created_at": string;
  /**
* Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants.
*/
readonly "token_id": number;
  /**
* The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens.
*/
readonly "token_name": string;
  /**
* Whether the associated fine-grained personal access token has expired.
*/
readonly "token_expired": boolean;
  /**
* Date and time when the associated fine-grained personal access token expires.
*/
readonly "token_expires_at": string | null;
  /**
* Date and time when the associated fine-grained personal access token was last used for authentication.
*/
readonly "token_last_used_at": string | null
}

export type OrgsListPatGrantRequests200 = ReadonlyArray<OrganizationProgrammaticAccessGrantRequest>

export interface OrgsReviewPatGrantRequestsInBulkParams {
  
}

/**
* Action to apply to the requests.
*/
export type OrgsReviewPatGrantRequestsInBulkRequestAction = "approve" | "deny"

export interface OrgsReviewPatGrantRequestsInBulkRequest {
  /**
* Unique identifiers of the requests for access via fine-grained personal access token. Must be formed of between 1 and 100 `pat_request_id` values.
*/
readonly "pat_request_ids"?: ReadonlyArray<number> | undefined;
  /**
* Action to apply to the requests.
*/
readonly "action": OrgsReviewPatGrantRequestsInBulkRequestAction;
  /**
* Reason for approving or denying the requests. Max 1024 characters.
*/
readonly "reason"?: string | null | undefined
}

export type OrgsReviewPatGrantRequestsInBulk202 = Record<string, unknown>

export interface OrgsReviewPatGrantRequestParams {
  
}

/**
* Action to apply to the request.
*/
export type OrgsReviewPatGrantRequestRequestAction = "approve" | "deny"

export interface OrgsReviewPatGrantRequestRequest {
  /**
* Action to apply to the request.
*/
readonly "action": OrgsReviewPatGrantRequestRequestAction;
  /**
* Reason for approving or denying the request. Max 1024 characters.
*/
readonly "reason"?: string | null | undefined
}

export interface OrgsListPatGrantRequestRepositoriesParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type OrgsListPatGrantRequestRepositories200 = ReadonlyArray<MinimalRepository>

export type OrgsListPatGrantsParamsSort = "created_at"

export type OrgsListPatGrantsParamsDirection = "asc" | "desc"

export interface OrgsListPatGrantsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined;
  readonly "sort"?: OrgsListPatGrantsParamsSort | undefined;
  readonly "direction"?: OrgsListPatGrantsParamsDirection | undefined;
  readonly "owner"?: ReadonlyArray<string> | undefined;
  readonly "repository"?: string | undefined;
  readonly "permission"?: string | undefined;
  readonly "last_used_before"?: string | undefined;
  readonly "last_used_after"?: string | undefined;
  readonly "token_id"?: ReadonlyArray<string> | undefined
}

/**
* Type of repository selection requested.
*/
export type OrganizationProgrammaticAccessGrantRepositorySelection = "none" | "all" | "subset"

/**
* Minimal representation of an organization programmatic access grant for enumerations
*/
export interface OrganizationProgrammaticAccessGrant {
  /**
* Unique identifier of the fine-grained personal access token grant. The `pat_id` used to get details about an approved fine-grained personal access token.
*/
readonly "id": number;
  readonly "owner": SimpleUser;
  /**
* Type of repository selection requested.
*/
readonly "repository_selection": OrganizationProgrammaticAccessGrantRepositorySelection;
  /**
* URL to the list of repositories the fine-grained personal access token can access. Only follow when `repository_selection` is `subset`.
*/
readonly "repositories_url": string;
  /**
* Permissions requested, categorized by type of permission.
*/
readonly "permissions": {
  readonly "organization"?: Record<string, unknown> | undefined;
  readonly "repository"?: Record<string, unknown> | undefined;
  readonly "other"?: Record<string, unknown> | undefined
};
  /**
* Date and time when the fine-grained personal access token was approved to access the organization.
*/
readonly "access_granted_at": string;
  /**
* Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants.
*/
readonly "token_id": number;
  /**
* The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens.
*/
readonly "token_name": string;
  /**
* Whether the associated fine-grained personal access token has expired.
*/
readonly "token_expired": boolean;
  /**
* Date and time when the associated fine-grained personal access token expires.
*/
readonly "token_expires_at": string | null;
  /**
* Date and time when the associated fine-grained personal access token was last used for authentication.
*/
readonly "token_last_used_at": string | null
}

export type OrgsListPatGrants200 = ReadonlyArray<OrganizationProgrammaticAccessGrant>

export interface OrgsUpdatePatAccessesParams {
  
}

/**
* Action to apply to the fine-grained personal access token.
*/
export type OrgsUpdatePatAccessesRequestAction = "revoke"

export interface OrgsUpdatePatAccessesRequest {
  /**
* Action to apply to the fine-grained personal access token.
*/
readonly "action": OrgsUpdatePatAccessesRequestAction;
  /**
* The IDs of the fine-grained personal access tokens.
*/
readonly "pat_ids": ReadonlyArray<number>
}

export type OrgsUpdatePatAccesses202 = Record<string, unknown>

export interface OrgsUpdatePatAccessParams {
  
}

/**
* Action to apply to the fine-grained personal access token.
*/
export type OrgsUpdatePatAccessRequestAction = "revoke"

export interface OrgsUpdatePatAccessRequest {
  /**
* Action to apply to the fine-grained personal access token.
*/
readonly "action": OrgsUpdatePatAccessRequestAction
}

export interface OrgsListPatGrantRepositoriesParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type OrgsListPatGrantRepositories200 = ReadonlyArray<MinimalRepository>

export interface PrivateRegistriesListOrgPrivateRegistriesParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* The registry type.
*/
export type OrgPrivateRegistryConfigurationRegistryType = "maven_repository" | "nuget_feed" | "goproxy_server" | "npm_registry" | "rubygems_server" | "cargo_registry" | "composer_repository" | "docker_registry" | "git_source" | "helm_registry" | "hex_organization" | "hex_repository" | "pub_repository" | "python_index" | "terraform_registry"

/**
* Which type of organization repositories have access to the private registry.
*/
export type OrgPrivateRegistryConfigurationVisibility = "all" | "private" | "selected"

/**
* Private registry configuration for an organization
*/
export interface OrgPrivateRegistryConfiguration {
  /**
* The name of the private registry configuration.
*/
readonly "name": string;
  /**
* The registry type.
*/
readonly "registry_type": OrgPrivateRegistryConfigurationRegistryType;
  /**
* The username to use when authenticating with the private registry.
*/
readonly "username"?: string | null | undefined;
  /**
* Which type of organization repositories have access to the private registry.
*/
readonly "visibility": OrgPrivateRegistryConfigurationVisibility;
  readonly "created_at": string;
  readonly "updated_at": string
}

export interface PrivateRegistriesListOrgPrivateRegistries200 {
  readonly "total_count": number;
  readonly "configurations": ReadonlyArray<OrgPrivateRegistryConfiguration>
}

export interface PrivateRegistriesCreateOrgPrivateRegistryParams {
  
}

/**
* The registry type.
*/
export type PrivateRegistriesCreateOrgPrivateRegistryRequestRegistryType = "maven_repository" | "nuget_feed" | "goproxy_server" | "npm_registry" | "rubygems_server" | "cargo_registry" | "composer_repository" | "docker_registry" | "git_source" | "helm_registry" | "hex_organization" | "hex_repository" | "pub_repository" | "python_index" | "terraform_registry"

/**
* Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry.
*/
export type PrivateRegistriesCreateOrgPrivateRegistryRequestVisibility = "all" | "private" | "selected"

export interface PrivateRegistriesCreateOrgPrivateRegistryRequest {
  /**
* The registry type.
*/
readonly "registry_type": PrivateRegistriesCreateOrgPrivateRegistryRequestRegistryType;
  /**
* The URL of the private registry.
*/
readonly "url": string;
  /**
* The username to use when authenticating with the private registry. This field should be omitted if the private registry does not require a username for authentication.
*/
readonly "username"?: string | null | undefined;
  /**
* The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get private registries public key for an organization](https://docs.github.com/rest/private-registries/organization-configurations#get-private-registries-public-key-for-an-organization) endpoint.
*/
readonly "encrypted_value": string;
  /**
* The ID of the key you used to encrypt the secret.
*/
readonly "key_id": string;
  /**
* Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry.
*/
readonly "visibility": PrivateRegistriesCreateOrgPrivateRegistryRequestVisibility;
  /**
* An array of repository IDs that can access the organization private registry. You can only provide a list of repository IDs when `visibility` is set to `selected`. You can manage the list of selected repositories using the [Update a private registry for an organization](https://docs.github.com/rest/private-registries/organization-configurations#update-a-private-registry-for-an-organization) endpoint. This field should be omitted if `visibility` is set to `all` or `private`.
*/
readonly "selected_repository_ids"?: ReadonlyArray<number> | undefined
}

/**
* The registry type.
*/
export type OrgPrivateRegistryConfigurationWithSelectedRepositoriesRegistryType = "maven_repository" | "nuget_feed" | "goproxy_server" | "npm_registry" | "rubygems_server" | "cargo_registry" | "composer_repository" | "docker_registry" | "git_source" | "helm_registry" | "hex_organization" | "hex_repository" | "pub_repository" | "python_index" | "terraform_registry"

/**
* Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry.
*/
export type OrgPrivateRegistryConfigurationWithSelectedRepositoriesVisibility = "all" | "private" | "selected"

/**
* Private registry configuration for an organization
*/
export interface OrgPrivateRegistryConfigurationWithSelectedRepositories {
  /**
* The name of the private registry configuration.
*/
readonly "name": string;
  /**
* The registry type.
*/
readonly "registry_type": OrgPrivateRegistryConfigurationWithSelectedRepositoriesRegistryType;
  /**
* The username to use when authenticating with the private registry.
*/
readonly "username"?: string | undefined;
  /**
* Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry.
*/
readonly "visibility": OrgPrivateRegistryConfigurationWithSelectedRepositoriesVisibility;
  /**
* An array of repository IDs that can access the organization private registry when `visibility` is set to `selected`.
*/
readonly "selected_repository_ids"?: ReadonlyArray<number> | undefined;
  readonly "created_at": string;
  readonly "updated_at": string
}

export interface PrivateRegistriesGetOrgPublicKeyParams {
  
}

export interface PrivateRegistriesGetOrgPublicKey200 {
  /**
* The identifier for the key.
*/
readonly "key_id": string;
  /**
* The Base64 encoded public key.
*/
readonly "key": string
}

export interface PrivateRegistriesGetOrgPrivateRegistryParams {
  
}

export interface PrivateRegistriesDeleteOrgPrivateRegistryParams {
  
}

export interface PrivateRegistriesUpdateOrgPrivateRegistryParams {
  
}

/**
* The registry type.
*/
export type PrivateRegistriesUpdateOrgPrivateRegistryRequestRegistryType = "maven_repository" | "nuget_feed" | "goproxy_server" | "npm_registry" | "rubygems_server" | "cargo_registry" | "composer_repository" | "docker_registry" | "git_source" | "helm_registry" | "hex_organization" | "hex_repository" | "pub_repository" | "python_index" | "terraform_registry"

/**
* Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry.
*/
export type PrivateRegistriesUpdateOrgPrivateRegistryRequestVisibility = "all" | "private" | "selected"

export interface PrivateRegistriesUpdateOrgPrivateRegistryRequest {
  /**
* The registry type.
*/
readonly "registry_type"?: PrivateRegistriesUpdateOrgPrivateRegistryRequestRegistryType | undefined;
  /**
* The URL of the private registry.
*/
readonly "url"?: string | undefined;
  /**
* The username to use when authenticating with the private registry. This field should be omitted if the private registry does not require a username for authentication.
*/
readonly "username"?: string | null | undefined;
  /**
* The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get private registries public key for an organization](https://docs.github.com/rest/private-registries/organization-configurations#get-private-registries-public-key-for-an-organization) endpoint.
*/
readonly "encrypted_value"?: string | undefined;
  /**
* The ID of the key you used to encrypt the secret.
*/
readonly "key_id"?: string | undefined;
  /**
* Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry.
*/
readonly "visibility"?: PrivateRegistriesUpdateOrgPrivateRegistryRequestVisibility | undefined;
  /**
* An array of repository IDs that can access the organization private registry. You can only provide a list of repository IDs when `visibility` is set to `selected`. This field should be omitted if `visibility` is set to `all` or `private`.
*/
readonly "selected_repository_ids"?: ReadonlyArray<number> | undefined
}

export type ProjectsClassicListForOrgParamsState = "open" | "closed" | "all"

export interface ProjectsClassicListForOrgParams {
  readonly "state"?: ProjectsClassicListForOrgParamsState | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* The baseline permission that all organization members have on this project. Only present if owner is an organization.
*/
export type ProjectOrganizationPermission = "read" | "write" | "admin" | "none"

/**
* Projects are a way to organize columns and cards of work.
*/
export interface Project {
  readonly "owner_url": string;
  readonly "url": string;
  readonly "html_url": string;
  readonly "columns_url": string;
  readonly "id": number;
  readonly "node_id": string;
  /**
* Name of the project
*/
readonly "name": string;
  /**
* Body of the project
*/
readonly "body": string | null;
  readonly "number": number;
  /**
* State of the project; either 'open' or 'closed'
*/
readonly "state": string;
  readonly "creator": NullableSimpleUser | null;
  readonly "created_at": string;
  readonly "updated_at": string;
  /**
* The baseline permission that all organization members have on this project. Only present if owner is an organization.
*/
readonly "organization_permission"?: ProjectOrganizationPermission | undefined;
  /**
* Whether or not this project can be seen by everyone. Only present if owner is an organization.
*/
readonly "private"?: boolean | undefined
}

export type ProjectsClassicListForOrg200 = ReadonlyArray<Project>

export interface ProjectsClassicCreateForOrgParams {
  
}

export interface ProjectsClassicCreateForOrgRequest {
  /**
* The name of the project.
*/
readonly "name": string;
  /**
* The description of the project.
*/
readonly "body"?: string | undefined
}

export interface OrgsGetAllCustomPropertiesParams {
  
}

/**
* The source type of the property
*/
export type CustomPropertySourceType = "organization" | "enterprise"

/**
* The type of the value for the property
*/
export type CustomPropertyValueType = "string" | "single_select" | "multi_select" | "true_false"

/**
* Who can edit the values of the property
*/
export type CustomPropertyValuesEditableBy = "org_actors" | "org_and_repo_actors"

/**
* Custom property defined on an organization
*/
export interface CustomProperty {
  /**
* The name of the property
*/
readonly "property_name": string;
  /**
* The URL that can be used to fetch, update, or delete info about this property via the API.
*/
readonly "url"?: string | undefined;
  /**
* The source type of the property
*/
readonly "source_type"?: CustomPropertySourceType | undefined;
  /**
* The type of the value for the property
*/
readonly "value_type": CustomPropertyValueType;
  /**
* Whether the property is required.
*/
readonly "required"?: boolean | undefined;
  /**
* Default value of the property
*/
readonly "default_value"?: string | ReadonlyArray<string> | null | undefined;
  /**
* Short description of the property
*/
readonly "description"?: string | null | undefined;
  /**
* An ordered list of the allowed values of the property.
* The property can have up to 200 allowed values.
*/
readonly "allowed_values"?: ReadonlyArray<string> | null | undefined;
  /**
* Who can edit the values of the property
*/
readonly "values_editable_by"?: CustomPropertyValuesEditableBy | null | undefined
}

export type OrgsGetAllCustomProperties200 = ReadonlyArray<CustomProperty>

export interface OrgsCreateOrUpdateCustomPropertiesParams {
  
}

export interface OrgsCreateOrUpdateCustomPropertiesRequest {
  /**
* The array of custom properties to create or update.
*/
readonly "properties": ReadonlyArray<CustomProperty>
}

export type OrgsCreateOrUpdateCustomProperties200 = ReadonlyArray<CustomProperty>

export interface OrgsGetCustomPropertyParams {
  
}

export interface OrgsCreateOrUpdateCustomPropertyParams {
  
}

/**
* The type of the value for the property
*/
export type CustomPropertySetPayloadValueType = "string" | "single_select" | "multi_select" | "true_false"

/**
* Who can edit the values of the property
*/
export type CustomPropertySetPayloadValuesEditableBy = "org_actors" | "org_and_repo_actors"

/**
* Custom property set payload
*/
export interface CustomPropertySetPayload {
  /**
* The type of the value for the property
*/
readonly "value_type": CustomPropertySetPayloadValueType;
  /**
* Whether the property is required.
*/
readonly "required"?: boolean | undefined;
  /**
* Default value of the property
*/
readonly "default_value"?: string | ReadonlyArray<string> | null | undefined;
  /**
* Short description of the property
*/
readonly "description"?: string | null | undefined;
  /**
* An ordered list of the allowed values of the property.
* The property can have up to 200 allowed values.
*/
readonly "allowed_values"?: ReadonlyArray<string> | null | undefined;
  /**
* Who can edit the values of the property
*/
readonly "values_editable_by"?: CustomPropertySetPayloadValuesEditableBy | null | undefined
}

export interface OrgsRemoveCustomPropertyParams {
  
}

export interface OrgsListCustomPropertiesValuesForReposParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined;
  readonly "repository_query"?: string | undefined
}

/**
* Custom property name and associated value
*/
export interface CustomPropertyValue {
  /**
* The name of the property
*/
readonly "property_name": string;
  /**
* The value assigned to the property
*/
readonly "value": string | ReadonlyArray<string> | null
}

/**
* List of custom property values for a repository
*/
export interface OrgRepoCustomPropertyValues {
  readonly "repository_id": number;
  readonly "repository_name": string;
  readonly "repository_full_name": string;
  /**
* List of custom property names and associated values
*/
readonly "properties": ReadonlyArray<CustomPropertyValue>
}

export type OrgsListCustomPropertiesValuesForRepos200 = ReadonlyArray<OrgRepoCustomPropertyValues>

export interface OrgsCreateOrUpdateCustomPropertiesValuesForReposParams {
  
}

export interface OrgsCreateOrUpdateCustomPropertiesValuesForReposRequest {
  /**
* The names of repositories that the custom property values will be applied to.
*/
readonly "repository_names": ReadonlyArray<string>;
  /**
* List of custom property names and associated values to apply to the repositories.
*/
readonly "properties": ReadonlyArray<CustomPropertyValue>
}

export interface OrgsListPublicMembersParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type OrgsListPublicMembers200 = ReadonlyArray<SimpleUser>

export interface OrgsCheckPublicMembershipForUserParams {
  
}

export interface OrgsSetPublicMembershipForAuthenticatedUserParams {
  
}

export interface OrgsRemovePublicMembershipForAuthenticatedUserParams {
  
}

export type ReposListForOrgParamsType = "all" | "public" | "private" | "forks" | "sources" | "member"

export type ReposListForOrgParamsSort = "created" | "updated" | "pushed" | "full_name"

export type ReposListForOrgParamsDirection = "asc" | "desc"

export interface ReposListForOrgParams {
  readonly "type"?: ReposListForOrgParamsType | undefined;
  readonly "sort"?: ReposListForOrgParamsSort | undefined;
  readonly "direction"?: ReposListForOrgParamsDirection | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ReposListForOrg200 = ReadonlyArray<MinimalRepository>

export interface ReposCreateInOrgParams {
  
}

/**
* The visibility of the repository.
*/
export type ReposCreateInOrgRequestVisibility = "public" | "private"

/**
* Required when using `squash_merge_commit_message`.
* 
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
export type ReposCreateInOrgRequestSquashMergeCommitTitle = "PR_TITLE" | "COMMIT_OR_PR_TITLE"

/**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
export type ReposCreateInOrgRequestSquashMergeCommitMessage = "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"

/**
* Required when using `merge_commit_message`.
* 
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
export type ReposCreateInOrgRequestMergeCommitTitle = "PR_TITLE" | "MERGE_MESSAGE"

/**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
export type ReposCreateInOrgRequestMergeCommitMessage = "PR_BODY" | "PR_TITLE" | "BLANK"

export interface ReposCreateInOrgRequest {
  /**
* The name of the repository.
*/
readonly "name": string;
  /**
* A short description of the repository.
*/
readonly "description"?: string | undefined;
  /**
* A URL with more information about the repository.
*/
readonly "homepage"?: string | undefined;
  /**
* Whether the repository is private.
*/
readonly "private"?: boolean | undefined;
  /**
* The visibility of the repository.
*/
readonly "visibility"?: ReposCreateInOrgRequestVisibility | undefined;
  /**
* Either `true` to enable issues for this repository or `false` to disable them.
*/
readonly "has_issues"?: boolean | undefined;
  /**
* Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
*/
readonly "has_projects"?: boolean | undefined;
  /**
* Either `true` to enable the wiki for this repository or `false` to disable it.
*/
readonly "has_wiki"?: boolean | undefined;
  /**
* Whether downloads are enabled.
*/
readonly "has_downloads"?: boolean | undefined;
  /**
* Either `true` to make this repo available as a template repository or `false` to prevent it.
*/
readonly "is_template"?: boolean | undefined;
  /**
* The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
*/
readonly "team_id"?: number | undefined;
  /**
* Pass `true` to create an initial commit with empty README.
*/
readonly "auto_init"?: boolean | undefined;
  /**
* Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
*/
readonly "gitignore_template"?: string | undefined;
  /**
* Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
*/
readonly "license_template"?: string | undefined;
  /**
* Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
*/
readonly "allow_squash_merge"?: boolean | undefined;
  /**
* Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
*/
readonly "allow_merge_commit"?: boolean | undefined;
  /**
* Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
*/
readonly "allow_rebase_merge"?: boolean | undefined;
  /**
* Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
*/
readonly "allow_auto_merge"?: boolean | undefined;
  /**
* Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**
*/
readonly "delete_branch_on_merge"?: boolean | undefined;
  /**
* Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.
*/
readonly "use_squash_pr_title_as_default"?: boolean | undefined;
  /**
* Required when using `squash_merge_commit_message`.
* 
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
readonly "squash_merge_commit_title"?: ReposCreateInOrgRequestSquashMergeCommitTitle | undefined;
  /**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
readonly "squash_merge_commit_message"?: ReposCreateInOrgRequestSquashMergeCommitMessage | undefined;
  /**
* Required when using `merge_commit_message`.
* 
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
readonly "merge_commit_title"?: ReposCreateInOrgRequestMergeCommitTitle | undefined;
  /**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
readonly "merge_commit_message"?: ReposCreateInOrgRequestMergeCommitMessage | undefined;
  /**
* The custom properties for the new repository. The keys are the custom property names, and the values are the corresponding custom property values.
*/
readonly "custom_properties"?: Record<string, unknown> | undefined
}

/**
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
export type NullableRepositorySquashMergeCommitTitle = "PR_TITLE" | "COMMIT_OR_PR_TITLE"

/**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
export type NullableRepositorySquashMergeCommitMessage = "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"

/**
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
export type NullableRepositoryMergeCommitTitle = "PR_TITLE" | "MERGE_MESSAGE"

/**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
export type NullableRepositoryMergeCommitMessage = "PR_BODY" | "PR_TITLE" | "BLANK"

/**
* A repository on GitHub.
*/
export interface NullableRepository {
  /**
* Unique identifier of the repository
*/
readonly "id": number;
  readonly "node_id": string;
  /**
* The name of the repository.
*/
readonly "name": string;
  readonly "full_name": string;
  readonly "license": NullableLicenseSimple | null;
  readonly "forks": number;
  readonly "permissions"?: {
  readonly "admin": boolean;
  readonly "pull": boolean;
  readonly "triage"?: boolean | undefined;
  readonly "push": boolean;
  readonly "maintain"?: boolean | undefined
} | undefined;
  readonly "owner": SimpleUser;
  /**
* Whether the repository is private or public.
*/
readonly "private": boolean;
  readonly "html_url": string;
  readonly "description": string | null;
  readonly "fork": boolean;
  readonly "url": string;
  readonly "archive_url": string;
  readonly "assignees_url": string;
  readonly "blobs_url": string;
  readonly "branches_url": string;
  readonly "collaborators_url": string;
  readonly "comments_url": string;
  readonly "commits_url": string;
  readonly "compare_url": string;
  readonly "contents_url": string;
  readonly "contributors_url": string;
  readonly "deployments_url": string;
  readonly "downloads_url": string;
  readonly "events_url": string;
  readonly "forks_url": string;
  readonly "git_commits_url": string;
  readonly "git_refs_url": string;
  readonly "git_tags_url": string;
  readonly "git_url": string;
  readonly "issue_comment_url": string;
  readonly "issue_events_url": string;
  readonly "issues_url": string;
  readonly "keys_url": string;
  readonly "labels_url": string;
  readonly "languages_url": string;
  readonly "merges_url": string;
  readonly "milestones_url": string;
  readonly "notifications_url": string;
  readonly "pulls_url": string;
  readonly "releases_url": string;
  readonly "ssh_url": string;
  readonly "stargazers_url": string;
  readonly "statuses_url": string;
  readonly "subscribers_url": string;
  readonly "subscription_url": string;
  readonly "tags_url": string;
  readonly "teams_url": string;
  readonly "trees_url": string;
  readonly "clone_url": string;
  readonly "mirror_url": string | null;
  readonly "hooks_url": string;
  readonly "svn_url": string;
  readonly "homepage": string | null;
  readonly "language": string | null;
  readonly "forks_count": number;
  readonly "stargazers_count": number;
  readonly "watchers_count": number;
  /**
* The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
*/
readonly "size": number;
  /**
* The default branch of the repository.
*/
readonly "default_branch": string;
  readonly "open_issues_count": number;
  /**
* Whether this repository acts as a template that can be used to generate new repositories.
*/
readonly "is_template"?: boolean | undefined;
  readonly "topics"?: ReadonlyArray<string> | undefined;
  /**
* Whether issues are enabled.
*/
readonly "has_issues": boolean;
  /**
* Whether projects are enabled.
*/
readonly "has_projects": boolean;
  /**
* Whether the wiki is enabled.
*/
readonly "has_wiki": boolean;
  readonly "has_pages": boolean;
  /**
* Whether downloads are enabled.
*/
readonly "has_downloads": boolean;
  /**
* Whether discussions are enabled.
*/
readonly "has_discussions"?: boolean | undefined;
  /**
* Whether the repository is archived.
*/
readonly "archived": boolean;
  /**
* Returns whether or not this repository disabled.
*/
readonly "disabled": boolean;
  /**
* The repository visibility: public, private, or internal.
*/
readonly "visibility"?: string | undefined;
  readonly "pushed_at": string | null;
  readonly "created_at": string | null;
  readonly "updated_at": string | null;
  /**
* Whether to allow rebase merges for pull requests.
*/
readonly "allow_rebase_merge"?: boolean | undefined;
  readonly "temp_clone_token"?: string | undefined;
  /**
* Whether to allow squash merges for pull requests.
*/
readonly "allow_squash_merge"?: boolean | undefined;
  /**
* Whether to allow Auto-merge to be used on pull requests.
*/
readonly "allow_auto_merge"?: boolean | undefined;
  /**
* Whether to delete head branches when pull requests are merged
*/
readonly "delete_branch_on_merge"?: boolean | undefined;
  /**
* Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
*/
readonly "allow_update_branch"?: boolean | undefined;
  /**
* Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
*/
readonly "use_squash_pr_title_as_default"?: boolean | undefined;
  /**
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
readonly "squash_merge_commit_title"?: NullableRepositorySquashMergeCommitTitle | undefined;
  /**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
readonly "squash_merge_commit_message"?: NullableRepositorySquashMergeCommitMessage | undefined;
  /**
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
readonly "merge_commit_title"?: NullableRepositoryMergeCommitTitle | undefined;
  /**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
readonly "merge_commit_message"?: NullableRepositoryMergeCommitMessage | undefined;
  /**
* Whether to allow merge commits for pull requests.
*/
readonly "allow_merge_commit"?: boolean | undefined;
  /**
* Whether to allow forking this repo
*/
readonly "allow_forking"?: boolean | undefined;
  /**
* Whether to require contributors to sign off on web-based commits
*/
readonly "web_commit_signoff_required"?: boolean | undefined;
  readonly "open_issues": number;
  readonly "watchers": number;
  readonly "master_branch"?: string | undefined;
  readonly "starred_at"?: string | undefined;
  /**
* Whether anonymous git access is enabled for this repository
*/
readonly "anonymous_access_enabled"?: boolean | undefined;
  /**
* The status of the code search index for this repository
*/
readonly "code_search_index_status"?: {
  readonly "lexical_search_ok"?: boolean | undefined;
  readonly "lexical_commit_sha"?: string | undefined
} | undefined
}

/**
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
export type FullRepositorySquashMergeCommitTitle = "PR_TITLE" | "COMMIT_OR_PR_TITLE"

/**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
export type FullRepositorySquashMergeCommitMessage = "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"

/**
* The default value for a merge commit title.
* 
*   - `PR_TITLE` - default to the pull request's title.
*   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
export type FullRepositoryMergeCommitTitle = "PR_TITLE" | "MERGE_MESSAGE"

/**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
export type FullRepositoryMergeCommitMessage = "PR_BODY" | "PR_TITLE" | "BLANK"

/**
* Code of Conduct Simple
*/
export interface CodeOfConductSimple {
  readonly "url": string;
  readonly "key": string;
  readonly "name": string;
  readonly "html_url": string | null
}

/**
* Full Repository
*/
export interface FullRepository {
  readonly "id": number;
  readonly "node_id": string;
  readonly "name": string;
  readonly "full_name": string;
  readonly "owner": SimpleUser;
  readonly "private": boolean;
  readonly "html_url": string;
  readonly "description": string | null;
  readonly "fork": boolean;
  readonly "url": string;
  readonly "archive_url": string;
  readonly "assignees_url": string;
  readonly "blobs_url": string;
  readonly "branches_url": string;
  readonly "collaborators_url": string;
  readonly "comments_url": string;
  readonly "commits_url": string;
  readonly "compare_url": string;
  readonly "contents_url": string;
  readonly "contributors_url": string;
  readonly "deployments_url": string;
  readonly "downloads_url": string;
  readonly "events_url": string;
  readonly "forks_url": string;
  readonly "git_commits_url": string;
  readonly "git_refs_url": string;
  readonly "git_tags_url": string;
  readonly "git_url": string;
  readonly "issue_comment_url": string;
  readonly "issue_events_url": string;
  readonly "issues_url": string;
  readonly "keys_url": string;
  readonly "labels_url": string;
  readonly "languages_url": string;
  readonly "merges_url": string;
  readonly "milestones_url": string;
  readonly "notifications_url": string;
  readonly "pulls_url": string;
  readonly "releases_url": string;
  readonly "ssh_url": string;
  readonly "stargazers_url": string;
  readonly "statuses_url": string;
  readonly "subscribers_url": string;
  readonly "subscription_url": string;
  readonly "tags_url": string;
  readonly "teams_url": string;
  readonly "trees_url": string;
  readonly "clone_url": string;
  readonly "mirror_url": string | null;
  readonly "hooks_url": string;
  readonly "svn_url": string;
  readonly "homepage": string | null;
  readonly "language": string | null;
  readonly "forks_count": number;
  readonly "stargazers_count": number;
  readonly "watchers_count": number;
  /**
* The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
*/
readonly "size": number;
  readonly "default_branch": string;
  readonly "open_issues_count": number;
  readonly "is_template"?: boolean | undefined;
  readonly "topics"?: ReadonlyArray<string> | undefined;
  readonly "has_issues": boolean;
  readonly "has_projects": boolean;
  readonly "has_wiki": boolean;
  readonly "has_pages": boolean;
  readonly "has_downloads"?: boolean | undefined;
  readonly "has_discussions": boolean;
  readonly "archived": boolean;
  /**
* Returns whether or not this repository disabled.
*/
readonly "disabled": boolean;
  /**
* The repository visibility: public, private, or internal.
*/
readonly "visibility"?: string | undefined;
  readonly "pushed_at": string;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "permissions"?: {
  readonly "admin": boolean;
  readonly "maintain"?: boolean | undefined;
  readonly "push": boolean;
  readonly "triage"?: boolean | undefined;
  readonly "pull": boolean
} | undefined;
  readonly "allow_rebase_merge"?: boolean | undefined;
  readonly "template_repository"?: NullableRepository | null | undefined;
  readonly "temp_clone_token"?: string | null | undefined;
  readonly "allow_squash_merge"?: boolean | undefined;
  readonly "allow_auto_merge"?: boolean | undefined;
  readonly "delete_branch_on_merge"?: boolean | undefined;
  readonly "allow_merge_commit"?: boolean | undefined;
  readonly "allow_update_branch"?: boolean | undefined;
  readonly "use_squash_pr_title_as_default"?: boolean | undefined;
  /**
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
readonly "squash_merge_commit_title"?: FullRepositorySquashMergeCommitTitle | undefined;
  /**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
readonly "squash_merge_commit_message"?: FullRepositorySquashMergeCommitMessage | undefined;
  /**
* The default value for a merge commit title.
* 
*   - `PR_TITLE` - default to the pull request's title.
*   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
readonly "merge_commit_title"?: FullRepositoryMergeCommitTitle | undefined;
  /**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
readonly "merge_commit_message"?: FullRepositoryMergeCommitMessage | undefined;
  readonly "allow_forking"?: boolean | undefined;
  readonly "web_commit_signoff_required"?: boolean | undefined;
  readonly "subscribers_count": number;
  readonly "network_count": number;
  readonly "license": NullableLicenseSimple | null;
  readonly "organization"?: NullableSimpleUser | null | undefined;
  readonly "parent"?: Repository | undefined;
  readonly "source"?: Repository | undefined;
  readonly "forks": number;
  readonly "master_branch"?: string | undefined;
  readonly "open_issues": number;
  readonly "watchers": number;
  /**
* Whether anonymous git access is allowed.
*/
readonly "anonymous_access_enabled"?: boolean | undefined;
  readonly "code_of_conduct"?: CodeOfConductSimple | undefined;
  readonly "security_and_analysis"?: SecurityAndAnalysis | null | undefined;
  /**
* The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
*/
readonly "custom_properties"?: Record<string, unknown> | undefined
}

export interface ReposGetOrgRulesetsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined;
  readonly "targets"?: string | undefined
}

/**
* The target of the ruleset
*/
export type RepositoryRulesetTarget = "branch" | "tag" | "push" | "repository"

/**
* The type of the source of the ruleset
*/
export type RepositoryRulesetSourceType = "Repository" | "Organization" | "Enterprise"

/**
* The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
*/
export type RepositoryRuleEnforcement = "disabled" | "active" | "evaluate"

/**
* The type of actor that can bypass a ruleset.
*/
export type RepositoryRulesetBypassActorActorType = "Integration" | "OrganizationAdmin" | "RepositoryRole" | "Team" | "DeployKey"

/**
* When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. Also, `pull_request` is only applicable to branch rulesets.
*/
export type RepositoryRulesetBypassActorBypassMode = "always" | "pull_request"

/**
* An actor that can bypass rules in a ruleset
*/
export interface RepositoryRulesetBypassActor {
  /**
* The ID of the actor that can bypass a ruleset. Required for `Integration`, `RepositoryRole`, and `Team` actor types. If `actor_type` is `OrganizationAdmin`, this should be `1`. If `actor_type` is `DeployKey`, this should be null. `OrganizationAdmin` is not applicable for personal repositories.
*/
readonly "actor_id"?: number | null | undefined;
  /**
* The type of actor that can bypass a ruleset.
*/
readonly "actor_type": RepositoryRulesetBypassActorActorType;
  /**
* When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. Also, `pull_request` is only applicable to branch rulesets.
*/
readonly "bypass_mode"?: RepositoryRulesetBypassActorBypassMode | undefined
}

/**
* The bypass type of the user making the API request for this ruleset. This field is only returned when
* querying the repository-level endpoint.
*/
export type RepositoryRulesetCurrentUserCanBypass = "always" | "pull_requests_only" | "never"

/**
* Parameters for a repository ruleset ref name condition
*/
export interface RepositoryRulesetConditions {
  readonly "ref_name"?: {
  /**
* Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
*/
readonly "include"?: ReadonlyArray<string> | undefined;
  /**
* Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
*/
readonly "exclude"?: ReadonlyArray<string> | undefined
} | undefined
}

/**
* Parameters for a repository ruleset ref name condition
*/
export interface OrgRulesetConditionsEnum {
  readonly "repository_property": {
  /**
* The repository properties and values to include. All of these properties must match for the condition to pass.
*/
readonly "include"?: ReadonlyArray<RepositoryRulesetConditionsRepositoryPropertySpec> | undefined;
  /**
* The repository properties and values to exclude. The condition will not pass if any of these properties match.
*/
readonly "exclude"?: ReadonlyArray<RepositoryRulesetConditionsRepositoryPropertySpec> | undefined
};
  readonly "ref_name"?: {
  /**
* Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
*/
readonly "include"?: ReadonlyArray<string> | undefined;
  /**
* Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
*/
readonly "exclude"?: ReadonlyArray<string> | undefined
} | undefined
}

/**
* The source of the repository property. Defaults to 'custom' if not specified.
*/
export type RepositoryRulesetConditionsRepositoryPropertySpecSource = "custom" | "system"

/**
* Parameters for a targeting a repository property
*/
export interface RepositoryRulesetConditionsRepositoryPropertySpec {
  /**
* The name of the repository property to target
*/
readonly "name": string;
  /**
* The values to match for the repository property
*/
readonly "property_values": ReadonlyArray<string>;
  /**
* The source of the repository property. Defaults to 'custom' if not specified.
*/
readonly "source"?: RepositoryRulesetConditionsRepositoryPropertySpecSource | undefined
}

/**
* Conditions for an organization ruleset.
* The branch and tag rulesets conditions object should contain both `repository_name` and `ref_name` properties, or both `repository_id` and `ref_name` properties, or both `repository_property` and `ref_name` properties.
* The push rulesets conditions object does not require the `ref_name` property.
* For repository policy rulesets, the conditions object should only contain the `repository_name`, the `repository_id`, or the `repository_property`.
*/
export type OrgRulesetConditions = Record<string, unknown>

export type RepositoryRuleCreationType = "creation"

/**
* Only allow users with bypass permission to create matching refs.
*/
export interface RepositoryRuleCreation {
  readonly "type": RepositoryRuleCreationType
}

export type RepositoryRuleUpdateType = "update"

/**
* Only allow users with bypass permission to update matching refs.
*/
export interface RepositoryRuleUpdate {
  readonly "type": RepositoryRuleUpdateType;
  readonly "parameters"?: {
  /**
* Branch can pull changes from its upstream repository
*/
readonly "update_allows_fetch_and_merge": boolean
} | undefined
}

export type RepositoryRuleDeletionType = "deletion"

/**
* Only allow users with bypass permissions to delete matching refs.
*/
export interface RepositoryRuleDeletion {
  readonly "type": RepositoryRuleDeletionType
}

export type RepositoryRuleRequiredLinearHistoryType = "required_linear_history"

/**
* Prevent merge commits from being pushed to matching refs.
*/
export interface RepositoryRuleRequiredLinearHistory {
  readonly "type": RepositoryRuleRequiredLinearHistoryType
}

export type RepositoryRuleMergeQueueType = "merge_queue"

/**
* When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.
*/
export type RepositoryRuleMergeQueueParametersGroupingStrategy = "ALLGREEN" | "HEADGREEN"

/**
* Method to use when merging changes from queued pull requests.
*/
export type RepositoryRuleMergeQueueParametersMergeMethod = "MERGE" | "SQUASH" | "REBASE"

/**
* Merges must be performed via a merge queue.
*/
export interface RepositoryRuleMergeQueue {
  readonly "type": RepositoryRuleMergeQueueType;
  readonly "parameters"?: {
  /**
* Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed
*/
readonly "check_response_timeout_minutes": number;
  /**
* When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.
*/
readonly "grouping_strategy": RepositoryRuleMergeQueueParametersGroupingStrategy;
  /**
* Limit the number of queued pull requests requesting checks and workflow runs at the same time.
*/
readonly "max_entries_to_build": number;
  /**
* The maximum number of PRs that will be merged together in a group.
*/
readonly "max_entries_to_merge": number;
  /**
* Method to use when merging changes from queued pull requests.
*/
readonly "merge_method": RepositoryRuleMergeQueueParametersMergeMethod;
  /**
* The minimum number of PRs that will be merged together in a group.
*/
readonly "min_entries_to_merge": number;
  /**
* The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged.
*/
readonly "min_entries_to_merge_wait_minutes": number
} | undefined
}

export type RepositoryRuleRequiredDeploymentsType = "required_deployments"

/**
* Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
*/
export interface RepositoryRuleRequiredDeployments {
  readonly "type": RepositoryRuleRequiredDeploymentsType;
  readonly "parameters"?: {
  /**
* The environments that must be successfully deployed to before branches can be merged.
*/
readonly "required_deployment_environments": ReadonlyArray<string>
} | undefined
}

export type RepositoryRuleRequiredSignaturesType = "required_signatures"

/**
* Commits pushed to matching refs must have verified signatures.
*/
export interface RepositoryRuleRequiredSignatures {
  readonly "type": RepositoryRuleRequiredSignaturesType
}

export type RepositoryRulePullRequestType = "pull_request"

/**
* Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
*/
export interface RepositoryRulePullRequest {
  readonly "type": RepositoryRulePullRequestType;
  readonly "parameters"?: {
  /**
* Array of allowed merge methods. Allowed values include `merge`, `squash`, and `rebase`. At least one option must be enabled.
*/
readonly "allowed_merge_methods"?: ReadonlyArray<"merge" | "squash" | "rebase"> | undefined;
  /**
* Request Copilot code review for new pull requests automatically if the author has access to Copilot code review.
*/
readonly "automatic_copilot_code_review_enabled"?: boolean | undefined;
  /**
* New, reviewable commits pushed will dismiss previous pull request review approvals.
*/
readonly "dismiss_stale_reviews_on_push": boolean;
  /**
* Require an approving review in pull requests that modify files that have a designated code owner.
*/
readonly "require_code_owner_review": boolean;
  /**
* Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
*/
readonly "require_last_push_approval": boolean;
  /**
* The number of approving reviews that are required before a pull request can be merged.
*/
readonly "required_approving_review_count": number;
  /**
* All conversations on code must be resolved before a pull request can be merged.
*/
readonly "required_review_thread_resolution": boolean
} | undefined
}

export type RepositoryRuleRequiredStatusChecksType = "required_status_checks"

/**
* Required status check
*/
export interface RepositoryRuleParamsStatusCheckConfiguration {
  /**
* The status check context name that must be present on the commit.
*/
readonly "context": string;
  /**
* The optional integration ID that this status check must originate from.
*/
readonly "integration_id"?: number | undefined
}

/**
* Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
*/
export interface RepositoryRuleRequiredStatusChecks {
  readonly "type": RepositoryRuleRequiredStatusChecksType;
  readonly "parameters"?: {
  /**
* Allow repositories and branches to be created if a check would otherwise prohibit it.
*/
readonly "do_not_enforce_on_create"?: boolean | undefined;
  /**
* Status checks that are required.
*/
readonly "required_status_checks": ReadonlyArray<RepositoryRuleParamsStatusCheckConfiguration>;
  /**
* Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled.
*/
readonly "strict_required_status_checks_policy": boolean
} | undefined
}

export type RepositoryRuleNonFastForwardType = "non_fast_forward"

/**
* Prevent users with push access from force pushing to refs.
*/
export interface RepositoryRuleNonFastForward {
  readonly "type": RepositoryRuleNonFastForwardType
}

export type RepositoryRuleCommitMessagePatternType = "commit_message_pattern"

/**
* The operator to use for matching.
*/
export type RepositoryRuleCommitMessagePatternParametersOperator = "starts_with" | "ends_with" | "contains" | "regex"

/**
* Parameters to be used for the commit_message_pattern rule
*/
export interface RepositoryRuleCommitMessagePattern {
  readonly "type": RepositoryRuleCommitMessagePatternType;
  readonly "parameters"?: {
  /**
* How this rule will appear to users.
*/
readonly "name"?: string | undefined;
  /**
* If true, the rule will fail if the pattern matches.
*/
readonly "negate"?: boolean | undefined;
  /**
* The operator to use for matching.
*/
readonly "operator": RepositoryRuleCommitMessagePatternParametersOperator;
  /**
* The pattern to match with.
*/
readonly "pattern": string
} | undefined
}

export type RepositoryRuleCommitAuthorEmailPatternType = "commit_author_email_pattern"

/**
* The operator to use for matching.
*/
export type RepositoryRuleCommitAuthorEmailPatternParametersOperator = "starts_with" | "ends_with" | "contains" | "regex"

/**
* Parameters to be used for the commit_author_email_pattern rule
*/
export interface RepositoryRuleCommitAuthorEmailPattern {
  readonly "type": RepositoryRuleCommitAuthorEmailPatternType;
  readonly "parameters"?: {
  /**
* How this rule will appear to users.
*/
readonly "name"?: string | undefined;
  /**
* If true, the rule will fail if the pattern matches.
*/
readonly "negate"?: boolean | undefined;
  /**
* The operator to use for matching.
*/
readonly "operator": RepositoryRuleCommitAuthorEmailPatternParametersOperator;
  /**
* The pattern to match with.
*/
readonly "pattern": string
} | undefined
}

export type RepositoryRuleCommitterEmailPatternType = "committer_email_pattern"

/**
* The operator to use for matching.
*/
export type RepositoryRuleCommitterEmailPatternParametersOperator = "starts_with" | "ends_with" | "contains" | "regex"

/**
* Parameters to be used for the committer_email_pattern rule
*/
export interface RepositoryRuleCommitterEmailPattern {
  readonly "type": RepositoryRuleCommitterEmailPatternType;
  readonly "parameters"?: {
  /**
* How this rule will appear to users.
*/
readonly "name"?: string | undefined;
  /**
* If true, the rule will fail if the pattern matches.
*/
readonly "negate"?: boolean | undefined;
  /**
* The operator to use for matching.
*/
readonly "operator": RepositoryRuleCommitterEmailPatternParametersOperator;
  /**
* The pattern to match with.
*/
readonly "pattern": string
} | undefined
}

export type RepositoryRuleBranchNamePatternType = "branch_name_pattern"

/**
* The operator to use for matching.
*/
export type RepositoryRuleBranchNamePatternParametersOperator = "starts_with" | "ends_with" | "contains" | "regex"

/**
* Parameters to be used for the branch_name_pattern rule
*/
export interface RepositoryRuleBranchNamePattern {
  readonly "type": RepositoryRuleBranchNamePatternType;
  readonly "parameters"?: {
  /**
* How this rule will appear to users.
*/
readonly "name"?: string | undefined;
  /**
* If true, the rule will fail if the pattern matches.
*/
readonly "negate"?: boolean | undefined;
  /**
* The operator to use for matching.
*/
readonly "operator": RepositoryRuleBranchNamePatternParametersOperator;
  /**
* The pattern to match with.
*/
readonly "pattern": string
} | undefined
}

export type RepositoryRuleTagNamePatternType = "tag_name_pattern"

/**
* The operator to use for matching.
*/
export type RepositoryRuleTagNamePatternParametersOperator = "starts_with" | "ends_with" | "contains" | "regex"

/**
* Parameters to be used for the tag_name_pattern rule
*/
export interface RepositoryRuleTagNamePattern {
  readonly "type": RepositoryRuleTagNamePatternType;
  readonly "parameters"?: {
  /**
* How this rule will appear to users.
*/
readonly "name"?: string | undefined;
  /**
* If true, the rule will fail if the pattern matches.
*/
readonly "negate"?: boolean | undefined;
  /**
* The operator to use for matching.
*/
readonly "operator": RepositoryRuleTagNamePatternParametersOperator;
  /**
* The pattern to match with.
*/
readonly "pattern": string
} | undefined
}

export type RepositoryRuleFilePathRestrictionType = "file_path_restriction"

/**
* Prevent commits that include changes in specified file and folder paths from being pushed to the commit graph. This includes absolute paths that contain file names.
*/
export interface RepositoryRuleFilePathRestriction {
  readonly "type": RepositoryRuleFilePathRestrictionType;
  readonly "parameters"?: {
  /**
* The file paths that are restricted from being pushed to the commit graph.
*/
readonly "restricted_file_paths": ReadonlyArray<string>
} | undefined
}

export type RepositoryRuleMaxFilePathLengthType = "max_file_path_length"

/**
* Prevent commits that include file paths that exceed the specified character limit from being pushed to the commit graph.
*/
export interface RepositoryRuleMaxFilePathLength {
  readonly "type": RepositoryRuleMaxFilePathLengthType;
  readonly "parameters"?: {
  /**
* The maximum amount of characters allowed in file paths.
*/
readonly "max_file_path_length": number
} | undefined
}

export type RepositoryRuleFileExtensionRestrictionType = "file_extension_restriction"

/**
* Prevent commits that include files with specified file extensions from being pushed to the commit graph.
*/
export interface RepositoryRuleFileExtensionRestriction {
  readonly "type": RepositoryRuleFileExtensionRestrictionType;
  readonly "parameters"?: {
  /**
* The file extensions that are restricted from being pushed to the commit graph.
*/
readonly "restricted_file_extensions": ReadonlyArray<string>
} | undefined
}

export type RepositoryRuleMaxFileSizeType = "max_file_size"

/**
* Prevent commits with individual files that exceed the specified limit from being pushed to the commit graph.
*/
export interface RepositoryRuleMaxFileSize {
  readonly "type": RepositoryRuleMaxFileSizeType;
  readonly "parameters"?: {
  /**
* The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).
*/
readonly "max_file_size": number
} | undefined
}

export type RepositoryRuleWorkflowsType = "workflows"

/**
* A workflow that must run for this rule to pass
*/
export interface RepositoryRuleParamsWorkflowFileReference {
  /**
* The path to the workflow file
*/
readonly "path": string;
  /**
* The ref (branch or tag) of the workflow file to use
*/
readonly "ref"?: string | undefined;
  /**
* The ID of the repository where the workflow is defined
*/
readonly "repository_id": number;
  /**
* The commit SHA of the workflow file to use
*/
readonly "sha"?: string | undefined
}

/**
* Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
*/
export interface RepositoryRuleWorkflows {
  readonly "type": RepositoryRuleWorkflowsType;
  readonly "parameters"?: {
  /**
* Allow repositories and branches to be created if a check would otherwise prohibit it.
*/
readonly "do_not_enforce_on_create"?: boolean | undefined;
  /**
* Workflows that must pass for this rule to pass.
*/
readonly "workflows": ReadonlyArray<RepositoryRuleParamsWorkflowFileReference>
} | undefined
}

export type RepositoryRuleCodeScanningType = "code_scanning"

/**
* The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."
*/
export type RepositoryRuleParamsCodeScanningToolAlertsThreshold = "none" | "errors" | "errors_and_warnings" | "all"

/**
* The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."
*/
export type RepositoryRuleParamsCodeScanningToolSecurityAlertsThreshold = "none" | "critical" | "high_or_higher" | "medium_or_higher" | "all"

/**
* A tool that must provide code scanning results for this rule to pass.
*/
export interface RepositoryRuleParamsCodeScanningTool {
  /**
* The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."
*/
readonly "alerts_threshold": RepositoryRuleParamsCodeScanningToolAlertsThreshold;
  /**
* The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."
*/
readonly "security_alerts_threshold": RepositoryRuleParamsCodeScanningToolSecurityAlertsThreshold;
  /**
* The name of a code scanning tool
*/
readonly "tool": string
}

/**
* Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.
*/
export interface RepositoryRuleCodeScanning {
  readonly "type": RepositoryRuleCodeScanningType;
  readonly "parameters"?: {
  /**
* Tools that must provide code scanning results for this rule to pass.
*/
readonly "code_scanning_tools": ReadonlyArray<RepositoryRuleParamsCodeScanningTool>
} | undefined
}

/**
* A repository rule.
*/
export type RepositoryRule = Record<string, unknown>

/**
* A set of rules to apply when specified conditions are met.
*/
export interface RepositoryRuleset {
  /**
* The ID of the ruleset
*/
readonly "id": number;
  /**
* The name of the ruleset
*/
readonly "name": string;
  /**
* The target of the ruleset
*/
readonly "target"?: RepositoryRulesetTarget | undefined;
  /**
* The type of the source of the ruleset
*/
readonly "source_type"?: RepositoryRulesetSourceType | undefined;
  /**
* The name of the source
*/
readonly "source": string;
  readonly "enforcement": RepositoryRuleEnforcement;
  /**
* The actors that can bypass the rules in this ruleset
*/
readonly "bypass_actors"?: ReadonlyArray<RepositoryRulesetBypassActor> | undefined;
  /**
* The bypass type of the user making the API request for this ruleset. This field is only returned when
* querying the repository-level endpoint.
*/
readonly "current_user_can_bypass"?: RepositoryRulesetCurrentUserCanBypass | undefined;
  readonly "node_id"?: string | undefined;
  readonly "_links"?: {
  readonly "self"?: {
  /**
* The URL of the ruleset
*/
readonly "href"?: string | undefined
} | undefined;
  readonly "html"?: {
  /**
* The html URL of the ruleset
*/
readonly "href"?: string | undefined
} | null | undefined
} | undefined;
  readonly "conditions"?: RepositoryRulesetConditions | OrgRulesetConditions | null | undefined;
  readonly "rules"?: ReadonlyArray<RepositoryRule> | undefined;
  readonly "created_at"?: string | undefined;
  readonly "updated_at"?: string | undefined
}

export type ReposGetOrgRulesets200 = ReadonlyArray<RepositoryRuleset>

export interface ReposCreateOrgRulesetParams {
  
}

/**
* The target of the ruleset
*/
export type ReposCreateOrgRulesetRequestTarget = "branch" | "tag" | "push" | "repository"

/**
* A repository rule.
*/
export type OrgRules = Record<string, unknown>

export interface ReposCreateOrgRulesetRequest {
  /**
* The name of the ruleset.
*/
readonly "name": string;
  /**
* The target of the ruleset
*/
readonly "target"?: ReposCreateOrgRulesetRequestTarget | undefined;
  readonly "enforcement": RepositoryRuleEnforcement;
  /**
* The actors that can bypass the rules in this ruleset
*/
readonly "bypass_actors"?: ReadonlyArray<RepositoryRulesetBypassActor> | undefined;
  readonly "conditions"?: OrgRulesetConditions | undefined;
  /**
* An array of rules within the ruleset.
*/
readonly "rules"?: ReadonlyArray<OrgRules> | undefined
}

export type ReposGetOrgRuleSuitesParamsTimePeriod = "hour" | "day" | "week" | "month"

export type ReposGetOrgRuleSuitesParamsRuleSuiteResult = "pass" | "fail" | "bypass" | "all"

export interface ReposGetOrgRuleSuitesParams {
  readonly "ref"?: string | undefined;
  readonly "repository_name"?: string | undefined;
  readonly "time_period"?: ReposGetOrgRuleSuitesParamsTimePeriod | undefined;
  readonly "actor_name"?: string | undefined;
  readonly "rule_suite_result"?: ReposGetOrgRuleSuitesParamsRuleSuiteResult | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Response
*/
export type RuleSuites = ReadonlyArray<{
  /**
* The unique identifier of the rule insight.
*/
readonly "id"?: number | undefined;
  /**
* The number that identifies the user.
*/
readonly "actor_id"?: number | undefined;
  /**
* The handle for the GitHub user account.
*/
readonly "actor_name"?: string | undefined;
  /**
* The first commit sha before the push evaluation.
*/
readonly "before_sha"?: string | undefined;
  /**
* The last commit sha in the push evaluation.
*/
readonly "after_sha"?: string | undefined;
  /**
* The ref name that the evaluation ran on.
*/
readonly "ref"?: string | undefined;
  /**
* The ID of the repository associated with the rule evaluation.
*/
readonly "repository_id"?: number | undefined;
  /**
* The name of the repository without the `.git` extension.
*/
readonly "repository_name"?: string | undefined;
  readonly "pushed_at"?: string | undefined;
  /**
* The result of the rule evaluations for rules with the `active` enforcement status.
*/
readonly "result"?: "pass" | "fail" | "bypass" | undefined;
  /**
* The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`.
*/
readonly "evaluation_result"?: "pass" | "fail" | "bypass" | undefined
}>

export interface ReposGetOrgRuleSuiteParams {
  
}

/**
* The result of the rule evaluations for rules with the `active` enforcement status.
*/
export type RuleSuiteResult = "pass" | "fail" | "bypass"

/**
* The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`. Null if no rules with `evaluate` enforcement status were run.
*/
export type RuleSuiteEvaluationResult = "pass" | "fail" | "bypass"

/**
* Response
*/
export interface RuleSuite {
  /**
* The unique identifier of the rule insight.
*/
readonly "id"?: number | undefined;
  /**
* The number that identifies the user.
*/
readonly "actor_id"?: number | null | undefined;
  /**
* The handle for the GitHub user account.
*/
readonly "actor_name"?: string | null | undefined;
  /**
* The first commit sha before the push evaluation.
*/
readonly "before_sha"?: string | undefined;
  /**
* The last commit sha in the push evaluation.
*/
readonly "after_sha"?: string | undefined;
  /**
* The ref name that the evaluation ran on.
*/
readonly "ref"?: string | undefined;
  /**
* The ID of the repository associated with the rule evaluation.
*/
readonly "repository_id"?: number | undefined;
  /**
* The name of the repository without the `.git` extension.
*/
readonly "repository_name"?: string | undefined;
  readonly "pushed_at"?: string | undefined;
  /**
* The result of the rule evaluations for rules with the `active` enforcement status.
*/
readonly "result"?: RuleSuiteResult | undefined;
  /**
* The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`. Null if no rules with `evaluate` enforcement status were run.
*/
readonly "evaluation_result"?: RuleSuiteEvaluationResult | null | undefined;
  /**
* Details on the evaluated rules.
*/
readonly "rule_evaluations"?: ReadonlyArray<{
  readonly "rule_source"?: {
  /**
* The type of rule source.
*/
readonly "type"?: string | undefined;
  /**
* The ID of the rule source.
*/
readonly "id"?: number | null | undefined;
  /**
* The name of the rule source.
*/
readonly "name"?: string | null | undefined
} | undefined;
  /**
* The enforcement level of this rule source.
*/
readonly "enforcement"?: "active" | "evaluate" | "deleted ruleset" | undefined;
  /**
* The result of the evaluation of the individual rule.
*/
readonly "result"?: "pass" | "fail" | undefined;
  /**
* The type of rule.
*/
readonly "rule_type"?: string | undefined;
  /**
* The detailed failure message for the rule. Null if the rule passed.
*/
readonly "details"?: string | null | undefined
}> | undefined
}

export interface ReposGetOrgRulesetParams {
  
}

export interface ReposUpdateOrgRulesetParams {
  
}

/**
* The target of the ruleset
*/
export type ReposUpdateOrgRulesetRequestTarget = "branch" | "tag" | "push" | "repository"

export interface ReposUpdateOrgRulesetRequest {
  /**
* The name of the ruleset.
*/
readonly "name"?: string | undefined;
  /**
* The target of the ruleset
*/
readonly "target"?: ReposUpdateOrgRulesetRequestTarget | undefined;
  readonly "enforcement"?: RepositoryRuleEnforcement | undefined;
  /**
* The actors that can bypass the rules in this ruleset
*/
readonly "bypass_actors"?: ReadonlyArray<RepositoryRulesetBypassActor> | undefined;
  readonly "conditions"?: OrgRulesetConditions | undefined;
  /**
* An array of rules within the ruleset.
*/
readonly "rules"?: ReadonlyArray<OrgRules> | undefined
}

export interface ReposDeleteOrgRulesetParams {
  
}

export interface OrgsGetOrgRulesetHistoryParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* The historical version of a ruleset
*/
export interface RulesetVersion {
  /**
* The ID of the previous version of the ruleset
*/
readonly "version_id": number;
  /**
* The actor who updated the ruleset
*/
readonly "actor": {
  readonly "id"?: number | undefined;
  readonly "type"?: string | undefined
};
  readonly "updated_at": string
}

export type OrgsGetOrgRulesetHistory200 = ReadonlyArray<RulesetVersion>

export interface OrgsGetOrgRulesetVersionParams {
  
}

/**
* The historical version of a ruleset
*/
export interface RulesetVersionWithState {
  /**
* The state of the ruleset version
*/
readonly "state": Record<string, unknown>;
  /**
* The ID of the previous version of the ruleset
*/
readonly "version_id": number;
  /**
* The actor who updated the ruleset
*/
readonly "actor": {
  readonly "id"?: number | undefined;
  readonly "type"?: string | undefined
};
  readonly "updated_at": string
}

export type SecretScanningListAlertsForOrgParamsState = "open" | "resolved"

export type SecretScanningListAlertsForOrgParamsSort = "created" | "updated"

export type SecretScanningListAlertsForOrgParamsDirection = "asc" | "desc"

export interface SecretScanningListAlertsForOrgParams {
  readonly "state"?: SecretScanningListAlertsForOrgParamsState | undefined;
  readonly "secret_type"?: string | undefined;
  readonly "resolution"?: string | undefined;
  readonly "sort"?: SecretScanningListAlertsForOrgParamsSort | undefined;
  readonly "direction"?: SecretScanningListAlertsForOrgParamsDirection | undefined;
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined;
  readonly "validity"?: string | undefined;
  readonly "is_publicly_leaked"?: boolean | undefined;
  readonly "is_multi_repo"?: boolean | undefined;
  readonly "hide_secret"?: boolean | undefined
}

export type SecretScanningListAlertsForOrg200 = ReadonlyArray<OrganizationSecretScanningAlert>

export interface SecretScanningListAlertsForOrg503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface SecretScanningListOrgPatternConfigsParams {
  
}

/**
* The version of the entity. This is used to confirm you're updating the current version of the entity and mitigate unintentionally overriding someone else's update.
*/
export type SecretScanningRowVersion = string

/**
* The default push protection setting for this pattern.
*/
export type SecretScanningPatternOverrideDefaultSetting = "disabled" | "enabled"

/**
* The push protection setting for this pattern set at the enterprise level. Only present for partner patterns when the organization has a parent enterprise.
*/
export type SecretScanningPatternOverrideEnterpriseSetting = "not-set" | "disabled" | "enabled"

/**
* The current push protection setting for this pattern. If this is `not-set`, then it inherits either the enterprise setting if it exists or the default setting.
*/
export type SecretScanningPatternOverrideSetting = "not-set" | "disabled" | "enabled"

export interface SecretScanningPatternOverride {
  /**
* The ID of the pattern.
*/
readonly "token_type"?: string | undefined;
  /**
* The version of this pattern if it's a custom pattern.
*/
readonly "custom_pattern_version"?: string | null | undefined;
  /**
* The slug of the pattern.
*/
readonly "slug"?: string | undefined;
  /**
* The user-friendly name for the pattern.
*/
readonly "display_name"?: string | undefined;
  /**
* The total number of alerts generated by this pattern.
*/
readonly "alert_total"?: number | undefined;
  /**
* The percentage of all alerts that this pattern represents, rounded to the nearest integer.
*/
readonly "alert_total_percentage"?: number | undefined;
  /**
* The number of false positive alerts generated by this pattern.
*/
readonly "false_positives"?: number | undefined;
  /**
* The percentage of alerts from this pattern that are false positives, rounded to the nearest integer.
*/
readonly "false_positive_rate"?: number | undefined;
  /**
* The percentage of blocks for this pattern that were bypassed, rounded to the nearest integer.
*/
readonly "bypass_rate"?: number | undefined;
  /**
* The default push protection setting for this pattern.
*/
readonly "default_setting"?: SecretScanningPatternOverrideDefaultSetting | undefined;
  /**
* The push protection setting for this pattern set at the enterprise level. Only present for partner patterns when the organization has a parent enterprise.
*/
readonly "enterprise_setting"?: SecretScanningPatternOverrideEnterpriseSetting | null | undefined;
  /**
* The current push protection setting for this pattern. If this is `not-set`, then it inherits either the enterprise setting if it exists or the default setting.
*/
readonly "setting"?: SecretScanningPatternOverrideSetting | undefined
}

/**
* A collection of secret scanning patterns and their settings related to push protection.
*/
export interface SecretScanningPatternConfiguration {
  readonly "pattern_config_version"?: SecretScanningRowVersion | null | undefined;
  /**
* Overrides for partner patterns.
*/
readonly "provider_pattern_overrides"?: ReadonlyArray<SecretScanningPatternOverride> | undefined;
  /**
* Overrides for custom patterns defined by the organization.
*/
readonly "custom_pattern_overrides"?: ReadonlyArray<SecretScanningPatternOverride> | undefined
}

export interface SecretScanningUpdateOrgPatternConfigsParams {
  
}

export interface SecretScanningUpdateOrgPatternConfigsRequest {
  readonly "pattern_config_version"?: SecretScanningRowVersion | null | undefined;
  /**
* Pattern settings for provider patterns.
*/
readonly "provider_pattern_settings"?: ReadonlyArray<{
  /**
* The ID of the pattern to configure.
*/
readonly "token_type"?: string | undefined;
  /**
* Push protection setting to set for the pattern.
*/
readonly "push_protection_setting"?: "not-set" | "disabled" | "enabled" | undefined
}> | undefined;
  /**
* Pattern settings for custom patterns.
*/
readonly "custom_pattern_settings"?: ReadonlyArray<{
  /**
* The ID of the pattern to configure.
*/
readonly "token_type"?: string | undefined;
  readonly "custom_pattern_version"?: SecretScanningRowVersion | null | undefined;
  /**
* Push protection setting to set for the pattern.
*/
readonly "push_protection_setting"?: "disabled" | "enabled" | undefined
}> | undefined
}

export interface SecretScanningUpdateOrgPatternConfigs200 {
  /**
* The updated pattern configuration version.
*/
readonly "pattern_config_version"?: string | undefined
}

export type SecurityAdvisoriesListOrgRepositoryAdvisoriesParamsDirection = "asc" | "desc"

export type SecurityAdvisoriesListOrgRepositoryAdvisoriesParamsSort = "created" | "updated" | "published"

export type SecurityAdvisoriesListOrgRepositoryAdvisoriesParamsState = "triage" | "draft" | "published" | "closed"

export interface SecurityAdvisoriesListOrgRepositoryAdvisoriesParams {
  readonly "direction"?: SecurityAdvisoriesListOrgRepositoryAdvisoriesParamsDirection | undefined;
  readonly "sort"?: SecurityAdvisoriesListOrgRepositoryAdvisoriesParamsSort | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined;
  readonly "per_page"?: number | undefined;
  readonly "state"?: SecurityAdvisoriesListOrgRepositoryAdvisoriesParamsState | undefined
}

/**
* The severity of the advisory.
*/
export type RepositoryAdvisorySeverity = "critical" | "high" | "medium" | "low"

/**
* The state of the advisory.
*/
export type RepositoryAdvisoryState = "published" | "closed" | "withdrawn" | "draft" | "triage"

/**
* A product affected by the vulnerability detailed in a repository security advisory.
*/
export interface RepositoryAdvisoryVulnerability {
  /**
* The name of the package affected by the vulnerability.
*/
readonly "package": {
  readonly "ecosystem": SecurityAdvisoryEcosystems;
  /**
* The unique package name within its ecosystem.
*/
readonly "name": string | null
} | null;
  /**
* The range of the package versions affected by the vulnerability.
*/
readonly "vulnerable_version_range": string | null;
  /**
* The package version(s) that resolve the vulnerability.
*/
readonly "patched_versions": string | null;
  /**
* The functions in the package that are affected.
*/
readonly "vulnerable_functions": ReadonlyArray<string> | null
}

/**
* The state of the user's acceptance of the credit.
*/
export type RepositoryAdvisoryCreditState = "accepted" | "declined" | "pending"

/**
* A credit given to a user for a repository security advisory.
*/
export interface RepositoryAdvisoryCredit {
  readonly "user": SimpleUser;
  readonly "type": SecurityAdvisoryCreditTypes;
  /**
* The state of the user's acceptance of the credit.
*/
readonly "state": RepositoryAdvisoryCreditState
}

/**
* A repository security advisory.
*/
export interface RepositoryAdvisory {
  /**
* The GitHub Security Advisory ID.
*/
readonly "ghsa_id": string;
  /**
* The Common Vulnerabilities and Exposures (CVE) ID.
*/
readonly "cve_id": string | null;
  /**
* The API URL for the advisory.
*/
readonly "url": string;
  /**
* The URL for the advisory.
*/
readonly "html_url": string;
  /**
* A short summary of the advisory.
*/
readonly "summary": string;
  /**
* A detailed description of what the advisory entails.
*/
readonly "description": string | null;
  /**
* The severity of the advisory.
*/
readonly "severity": RepositoryAdvisorySeverity | null;
  /**
* The author of the advisory.
*/
readonly "author": SimpleUser | null;
  /**
* The publisher of the advisory.
*/
readonly "publisher": SimpleUser | null;
  readonly "identifiers": ReadonlyArray<{
  /**
* The type of identifier.
*/
readonly "type": "CVE" | "GHSA";
  /**
* The identifier value.
*/
readonly "value": string
}>;
  /**
* The state of the advisory.
*/
readonly "state": RepositoryAdvisoryState;
  /**
* The date and time of when the advisory was created, in ISO 8601 format.
*/
readonly "created_at": string | null;
  /**
* The date and time of when the advisory was last updated, in ISO 8601 format.
*/
readonly "updated_at": string | null;
  /**
* The date and time of when the advisory was published, in ISO 8601 format.
*/
readonly "published_at": string | null;
  /**
* The date and time of when the advisory was closed, in ISO 8601 format.
*/
readonly "closed_at": string | null;
  /**
* The date and time of when the advisory was withdrawn, in ISO 8601 format.
*/
readonly "withdrawn_at": string | null;
  readonly "submission": {
  /**
* Whether a private vulnerability report was accepted by the repository's administrators.
*/
readonly "accepted": boolean
} | null;
  readonly "vulnerabilities": ReadonlyArray<RepositoryAdvisoryVulnerability> | null;
  readonly "cvss": {
  /**
* The CVSS vector.
*/
readonly "vector_string": string | null;
  /**
* The CVSS score.
*/
readonly "score": number | null
} | null;
  readonly "cvss_severities"?: CvssSeverities | null | undefined;
  readonly "cwes": ReadonlyArray<{
  /**
* The Common Weakness Enumeration (CWE) identifier.
*/
readonly "cwe_id": string;
  /**
* The name of the CWE.
*/
readonly "name": string
}> | null;
  /**
* A list of only the CWE IDs.
*/
readonly "cwe_ids": ReadonlyArray<string> | null;
  readonly "credits": ReadonlyArray<{
  /**
* The username of the user credited.
*/
readonly "login"?: string | undefined;
  readonly "type"?: SecurityAdvisoryCreditTypes | undefined
}> | null;
  readonly "credits_detailed": ReadonlyArray<RepositoryAdvisoryCredit> | null;
  /**
* A list of users that collaborate on the advisory.
*/
readonly "collaborating_users": ReadonlyArray<SimpleUser> | null;
  /**
* A list of teams that collaborate on the advisory.
*/
readonly "collaborating_teams": ReadonlyArray<Team> | null;
  /**
* A temporary private fork of the advisory's repository for collaborating on a fix.
*/
readonly "private_fork": SimpleRepository | null
}

export type SecurityAdvisoriesListOrgRepositoryAdvisories200 = ReadonlyArray<RepositoryAdvisory>

export interface OrgsListSecurityManagerTeamsParams {
  
}

export type OrgsListSecurityManagerTeams200 = ReadonlyArray<TeamSimple>

export interface OrgsAddSecurityManagerTeamParams {
  
}

export interface OrgsRemoveSecurityManagerTeamParams {
  
}

export interface BillingGetGithubActionsBillingOrgParams {
  
}

export interface ActionsBillingUsage {
  /**
* The sum of the free and paid GitHub Actions minutes used.
*/
readonly "total_minutes_used": number;
  /**
* The total paid GitHub Actions minutes used.
*/
readonly "total_paid_minutes_used": number;
  /**
* The amount of free GitHub Actions minutes available.
*/
readonly "included_minutes": number;
  readonly "minutes_used_breakdown": {
  /**
* Total minutes used on Ubuntu runner machines.
*/
readonly "UBUNTU"?: number | undefined;
  /**
* Total minutes used on macOS runner machines.
*/
readonly "MACOS"?: number | undefined;
  /**
* Total minutes used on Windows runner machines.
*/
readonly "WINDOWS"?: number | undefined;
  /**
* Total minutes used on Ubuntu 4 core runner machines.
*/
readonly "ubuntu_4_core"?: number | undefined;
  /**
* Total minutes used on Ubuntu 8 core runner machines.
*/
readonly "ubuntu_8_core"?: number | undefined;
  /**
* Total minutes used on Ubuntu 16 core runner machines.
*/
readonly "ubuntu_16_core"?: number | undefined;
  /**
* Total minutes used on Ubuntu 32 core runner machines.
*/
readonly "ubuntu_32_core"?: number | undefined;
  /**
* Total minutes used on Ubuntu 64 core runner machines.
*/
readonly "ubuntu_64_core"?: number | undefined;
  /**
* Total minutes used on Windows 4 core runner machines.
*/
readonly "windows_4_core"?: number | undefined;
  /**
* Total minutes used on Windows 8 core runner machines.
*/
readonly "windows_8_core"?: number | undefined;
  /**
* Total minutes used on Windows 16 core runner machines.
*/
readonly "windows_16_core"?: number | undefined;
  /**
* Total minutes used on Windows 32 core runner machines.
*/
readonly "windows_32_core"?: number | undefined;
  /**
* Total minutes used on Windows 64 core runner machines.
*/
readonly "windows_64_core"?: number | undefined;
  /**
* Total minutes used on macOS 12 core runner machines.
*/
readonly "macos_12_core"?: number | undefined;
  /**
* Total minutes used on all runner machines.
*/
readonly "total"?: number | undefined
}
}

export interface BillingGetGithubPackagesBillingOrgParams {
  
}

export interface PackagesBillingUsage {
  /**
* Sum of the free and paid storage space (GB) for GitHuub Packages.
*/
readonly "total_gigabytes_bandwidth_used": number;
  /**
* Total paid storage space (GB) for GitHuub Packages.
*/
readonly "total_paid_gigabytes_bandwidth_used": number;
  /**
* Free storage space (GB) for GitHub Packages.
*/
readonly "included_gigabytes_bandwidth": number
}

export interface BillingGetSharedStorageBillingOrgParams {
  
}

export interface CombinedBillingUsage {
  /**
* Numbers of days left in billing cycle.
*/
readonly "days_left_in_billing_cycle": number;
  /**
* Estimated storage space (GB) used in billing cycle.
*/
readonly "estimated_paid_storage_for_month": number;
  /**
* Estimated sum of free and paid storage space (GB) used in billing cycle.
*/
readonly "estimated_storage_for_month": number
}

export interface HostedComputeListNetworkConfigurationsForOrgParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* The hosted compute service the network configuration supports.
*/
export type NetworkConfigurationComputeService = "none" | "actions" | "codespaces"

/**
* A hosted compute network configuration.
*/
export interface NetworkConfiguration {
  /**
* The unique identifier of the network configuration.
*/
readonly "id": string;
  /**
* The name of the network configuration.
*/
readonly "name": string;
  /**
* The hosted compute service the network configuration supports.
*/
readonly "compute_service"?: NetworkConfigurationComputeService | undefined;
  /**
* The unique identifier of each network settings in the configuration.
*/
readonly "network_settings_ids"?: ReadonlyArray<string> | undefined;
  /**
* The time at which the network configuration was created, in ISO 8601 format.
*/
readonly "created_on": string | null
}

export interface HostedComputeListNetworkConfigurationsForOrg200 {
  readonly "total_count": number;
  readonly "network_configurations": ReadonlyArray<NetworkConfiguration>
}

export interface HostedComputeCreateNetworkConfigurationForOrgParams {
  
}

/**
* The hosted compute service to use for the network configuration.
*/
export type HostedComputeCreateNetworkConfigurationForOrgRequestComputeService = "none" | "actions"

export interface HostedComputeCreateNetworkConfigurationForOrgRequest {
  /**
* Name of the network configuration. Must be between 1 and 100 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'.
*/
readonly "name": string;
  /**
* The hosted compute service to use for the network configuration.
*/
readonly "compute_service"?: HostedComputeCreateNetworkConfigurationForOrgRequestComputeService | undefined;
  /**
* The identifier of the network settings to use for the network configuration. Exactly one network settings must be specified.
*/
readonly "network_settings_ids": ReadonlyArray<string>
}

export interface HostedComputeGetNetworkConfigurationForOrgParams {
  
}

export interface HostedComputeDeleteNetworkConfigurationFromOrgParams {
  
}

export interface HostedComputeUpdateNetworkConfigurationForOrgParams {
  
}

/**
* The hosted compute service to use for the network configuration.
*/
export type HostedComputeUpdateNetworkConfigurationForOrgRequestComputeService = "none" | "actions"

export interface HostedComputeUpdateNetworkConfigurationForOrgRequest {
  /**
* Name of the network configuration. Must be between 1 and 100 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'.
*/
readonly "name"?: string | undefined;
  /**
* The hosted compute service to use for the network configuration.
*/
readonly "compute_service"?: HostedComputeUpdateNetworkConfigurationForOrgRequestComputeService | undefined;
  /**
* The identifier of the network settings to use for the network configuration. Exactly one network settings must be specified.
*/
readonly "network_settings_ids"?: ReadonlyArray<string> | undefined
}

export interface HostedComputeGetNetworkSettingsForOrgParams {
  
}

/**
* A hosted compute network settings resource.
*/
export interface NetworkSettings {
  /**
* The unique identifier of the network settings resource.
*/
readonly "id": string;
  /**
* The identifier of the network configuration that is using this settings resource.
*/
readonly "network_configuration_id"?: string | undefined;
  /**
* The name of the network settings resource.
*/
readonly "name": string;
  /**
* The subnet this network settings resource is configured for.
*/
readonly "subnet_id": string;
  /**
* The location of the subnet this network settings resource is configured for.
*/
readonly "region": string
}

export interface CopilotCopilotMetricsForTeamParams {
  readonly "since"?: string | undefined;
  readonly "until"?: string | undefined;
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

export type CopilotCopilotMetricsForTeam200 = ReadonlyArray<CopilotUsageMetricsDay>

export interface TeamsListParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type TeamsList200 = ReadonlyArray<Team>

export interface TeamsCreateParams {
  
}

/**
* The level of privacy this team should have. The options are:  
* **For a non-nested team:**  
*  * `secret` - only visible to organization owners and members of this team.  
*  * `closed` - visible to all members of this organization.  
* Default: `secret`  
* **For a parent or child team:**  
*  * `closed` - visible to all members of this organization.  
* Default for child team: `closed`
*/
export type TeamsCreateRequestPrivacy = "secret" | "closed"

/**
* The notification setting the team has chosen. The options are:  
*  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
*  * `notifications_disabled` - no one receives notifications.  
* Default: `notifications_enabled`
*/
export type TeamsCreateRequestNotificationSetting = "notifications_enabled" | "notifications_disabled"

/**
* **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
*/
export type TeamsCreateRequestPermission = "pull" | "push"

export interface TeamsCreateRequest {
  /**
* The name of the team.
*/
readonly "name": string;
  /**
* The description of the team.
*/
readonly "description"?: string | undefined;
  /**
* List GitHub usernames for organization members who will become team maintainers.
*/
readonly "maintainers"?: ReadonlyArray<string> | undefined;
  /**
* The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
*/
readonly "repo_names"?: ReadonlyArray<string> | undefined;
  /**
* The level of privacy this team should have. The options are:  
* **For a non-nested team:**  
*  * `secret` - only visible to organization owners and members of this team.  
*  * `closed` - visible to all members of this organization.  
* Default: `secret`  
* **For a parent or child team:**  
*  * `closed` - visible to all members of this organization.  
* Default for child team: `closed`
*/
readonly "privacy"?: TeamsCreateRequestPrivacy | undefined;
  /**
* The notification setting the team has chosen. The options are:  
*  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
*  * `notifications_disabled` - no one receives notifications.  
* Default: `notifications_enabled`
*/
readonly "notification_setting"?: TeamsCreateRequestNotificationSetting | undefined;
  /**
* **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
*/
readonly "permission"?: TeamsCreateRequestPermission | undefined;
  /**
* The ID of a team to set as the parent team.
*/
readonly "parent_team_id"?: number | undefined
}

/**
* The level of privacy this team should have
*/
export type TeamFullPrivacy = "closed" | "secret"

/**
* The notification setting the team has set
*/
export type TeamFullNotificationSetting = "notifications_enabled" | "notifications_disabled"

/**
* Team Organization
*/
export interface TeamOrganization {
  readonly "login": string;
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "repos_url": string;
  readonly "events_url": string;
  readonly "hooks_url": string;
  readonly "issues_url": string;
  readonly "members_url": string;
  readonly "public_members_url": string;
  readonly "avatar_url": string;
  readonly "description": string | null;
  readonly "name"?: string | undefined;
  readonly "company"?: string | undefined;
  readonly "blog"?: string | undefined;
  readonly "location"?: string | undefined;
  readonly "email"?: string | undefined;
  readonly "twitter_username"?: string | null | undefined;
  readonly "is_verified"?: boolean | undefined;
  readonly "has_organization_projects": boolean;
  readonly "has_repository_projects": boolean;
  readonly "public_repos": number;
  readonly "public_gists": number;
  readonly "followers": number;
  readonly "following": number;
  readonly "html_url": string;
  readonly "created_at": string;
  readonly "type": string;
  readonly "total_private_repos"?: number | undefined;
  readonly "owned_private_repos"?: number | undefined;
  readonly "private_gists"?: number | null | undefined;
  readonly "disk_usage"?: number | null | undefined;
  readonly "collaborators"?: number | null | undefined;
  readonly "billing_email"?: string | null | undefined;
  readonly "plan"?: {
  readonly "name": string;
  readonly "space": number;
  readonly "private_repos": number;
  readonly "filled_seats"?: number | undefined;
  readonly "seats"?: number | undefined
} | undefined;
  readonly "default_repository_permission"?: string | null | undefined;
  readonly "members_can_create_repositories"?: boolean | null | undefined;
  readonly "two_factor_requirement_enabled"?: boolean | null | undefined;
  readonly "members_allowed_repository_creation_type"?: string | undefined;
  readonly "members_can_create_public_repositories"?: boolean | undefined;
  readonly "members_can_create_private_repositories"?: boolean | undefined;
  readonly "members_can_create_internal_repositories"?: boolean | undefined;
  readonly "members_can_create_pages"?: boolean | undefined;
  readonly "members_can_create_public_pages"?: boolean | undefined;
  readonly "members_can_create_private_pages"?: boolean | undefined;
  readonly "members_can_fork_private_repositories"?: boolean | null | undefined;
  readonly "web_commit_signoff_required"?: boolean | undefined;
  readonly "updated_at": string;
  readonly "archived_at": string | null
}

/**
* Groups of organization members that gives permissions on specified repositories.
*/
export interface TeamFull {
  /**
* Unique identifier of the team
*/
readonly "id": number;
  readonly "node_id": string;
  /**
* URL for the team
*/
readonly "url": string;
  readonly "html_url": string;
  /**
* Name of the team
*/
readonly "name": string;
  readonly "slug": string;
  readonly "description": string | null;
  /**
* The level of privacy this team should have
*/
readonly "privacy"?: TeamFullPrivacy | undefined;
  /**
* The notification setting the team has set
*/
readonly "notification_setting"?: TeamFullNotificationSetting | undefined;
  /**
* Permission that the team will have for its repositories
*/
readonly "permission": string;
  readonly "members_url": string;
  readonly "repositories_url": string;
  readonly "parent"?: NullableTeamSimple | null | undefined;
  readonly "members_count": number;
  readonly "repos_count": number;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "organization": TeamOrganization;
  /**
* Distinguished Name (DN) that team maps to within LDAP environment
*/
readonly "ldap_dn"?: string | undefined
}

export interface TeamsGetByNameParams {
  
}

export interface TeamsDeleteInOrgParams {
  
}

export interface TeamsUpdateInOrgParams {
  
}

/**
* The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  
* **For a non-nested team:**  
*  * `secret` - only visible to organization owners and members of this team.  
*  * `closed` - visible to all members of this organization.  
* **For a parent or child team:**  
*  * `closed` - visible to all members of this organization.
*/
export type TeamsUpdateInOrgRequestPrivacy = "secret" | "closed"

/**
* The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
*  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
*  * `notifications_disabled` - no one receives notifications.
*/
export type TeamsUpdateInOrgRequestNotificationSetting = "notifications_enabled" | "notifications_disabled"

/**
* **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
*/
export type TeamsUpdateInOrgRequestPermission = "pull" | "push" | "admin"

export interface TeamsUpdateInOrgRequest {
  /**
* The name of the team.
*/
readonly "name"?: string | undefined;
  /**
* The description of the team.
*/
readonly "description"?: string | undefined;
  /**
* The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  
* **For a non-nested team:**  
*  * `secret` - only visible to organization owners and members of this team.  
*  * `closed` - visible to all members of this organization.  
* **For a parent or child team:**  
*  * `closed` - visible to all members of this organization.
*/
readonly "privacy"?: TeamsUpdateInOrgRequestPrivacy | undefined;
  /**
* The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
*  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
*  * `notifications_disabled` - no one receives notifications.
*/
readonly "notification_setting"?: TeamsUpdateInOrgRequestNotificationSetting | undefined;
  /**
* **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
*/
readonly "permission"?: TeamsUpdateInOrgRequestPermission | undefined;
  /**
* The ID of a team to set as the parent team.
*/
readonly "parent_team_id"?: number | null | undefined
}

export type TeamsListDiscussionsInOrgParamsDirection = "asc" | "desc"

export interface TeamsListDiscussionsInOrgParams {
  readonly "direction"?: TeamsListDiscussionsInOrgParamsDirection | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined;
  readonly "pinned"?: string | undefined
}

/**
* A team discussion is a persistent record of a free-form conversation within a team.
*/
export interface TeamDiscussion {
  readonly "author": NullableSimpleUser | null;
  /**
* The main text of the discussion.
*/
readonly "body": string;
  readonly "body_html": string;
  /**
* The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
*/
readonly "body_version": string;
  readonly "comments_count": number;
  readonly "comments_url": string;
  readonly "created_at": string;
  readonly "last_edited_at": string | null;
  readonly "html_url": string;
  readonly "node_id": string;
  /**
* The unique sequence number of a team discussion.
*/
readonly "number": number;
  /**
* Whether or not this discussion should be pinned for easy retrieval.
*/
readonly "pinned": boolean;
  /**
* Whether or not this discussion should be restricted to team members and organization owners.
*/
readonly "private": boolean;
  readonly "team_url": string;
  /**
* The title of the discussion.
*/
readonly "title": string;
  readonly "updated_at": string;
  readonly "url": string;
  readonly "reactions"?: ReactionRollup | undefined
}

export type TeamsListDiscussionsInOrg200 = ReadonlyArray<TeamDiscussion>

export interface TeamsCreateDiscussionInOrgParams {
  
}

export interface TeamsCreateDiscussionInOrgRequest {
  /**
* The discussion post's title.
*/
readonly "title": string;
  /**
* The discussion post's body text.
*/
readonly "body": string;
  /**
* Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
*/
readonly "private"?: boolean | undefined
}

export interface TeamsGetDiscussionInOrgParams {
  
}

export interface TeamsDeleteDiscussionInOrgParams {
  
}

export interface TeamsUpdateDiscussionInOrgParams {
  
}

export interface TeamsUpdateDiscussionInOrgRequest {
  /**
* The discussion post's title.
*/
readonly "title"?: string | undefined;
  /**
* The discussion post's body text.
*/
readonly "body"?: string | undefined
}

export type TeamsListDiscussionCommentsInOrgParamsDirection = "asc" | "desc"

export interface TeamsListDiscussionCommentsInOrgParams {
  readonly "direction"?: TeamsListDiscussionCommentsInOrgParamsDirection | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* A reply to a discussion within a team.
*/
export interface TeamDiscussionComment {
  readonly "author": NullableSimpleUser | null;
  /**
* The main text of the comment.
*/
readonly "body": string;
  readonly "body_html": string;
  /**
* The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
*/
readonly "body_version": string;
  readonly "created_at": string;
  readonly "last_edited_at": string | null;
  readonly "discussion_url": string;
  readonly "html_url": string;
  readonly "node_id": string;
  /**
* The unique sequence number of a team discussion comment.
*/
readonly "number": number;
  readonly "updated_at": string;
  readonly "url": string;
  readonly "reactions"?: ReactionRollup | undefined
}

export type TeamsListDiscussionCommentsInOrg200 = ReadonlyArray<TeamDiscussionComment>

export interface TeamsCreateDiscussionCommentInOrgParams {
  
}

export interface TeamsCreateDiscussionCommentInOrgRequest {
  /**
* The discussion comment's body text.
*/
readonly "body": string
}

export interface TeamsGetDiscussionCommentInOrgParams {
  
}

export interface TeamsDeleteDiscussionCommentInOrgParams {
  
}

export interface TeamsUpdateDiscussionCommentInOrgParams {
  
}

export interface TeamsUpdateDiscussionCommentInOrgRequest {
  /**
* The discussion comment's body text.
*/
readonly "body": string
}

export type ReactionsListForTeamDiscussionCommentInOrgParamsContent = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes"

export interface ReactionsListForTeamDiscussionCommentInOrgParams {
  readonly "content"?: ReactionsListForTeamDiscussionCommentInOrgParamsContent | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* The reaction to use
*/
export type ReactionContent = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes"

/**
* Reactions to conversations provide a way to help people express their feelings more simply and effectively.
*/
export interface Reaction {
  readonly "id": number;
  readonly "node_id": string;
  readonly "user": NullableSimpleUser | null;
  /**
* The reaction to use
*/
readonly "content": ReactionContent;
  readonly "created_at": string
}

export type ReactionsListForTeamDiscussionCommentInOrg200 = ReadonlyArray<Reaction>

export interface ReactionsCreateForTeamDiscussionCommentInOrgParams {
  
}

/**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment.
*/
export type ReactionsCreateForTeamDiscussionCommentInOrgRequestContent = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes"

export interface ReactionsCreateForTeamDiscussionCommentInOrgRequest {
  /**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment.
*/
readonly "content": ReactionsCreateForTeamDiscussionCommentInOrgRequestContent
}

export interface ReactionsDeleteForTeamDiscussionCommentParams {
  
}

export type ReactionsListForTeamDiscussionInOrgParamsContent = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes"

export interface ReactionsListForTeamDiscussionInOrgParams {
  readonly "content"?: ReactionsListForTeamDiscussionInOrgParamsContent | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ReactionsListForTeamDiscussionInOrg200 = ReadonlyArray<Reaction>

export interface ReactionsCreateForTeamDiscussionInOrgParams {
  
}

/**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion.
*/
export type ReactionsCreateForTeamDiscussionInOrgRequestContent = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes"

export interface ReactionsCreateForTeamDiscussionInOrgRequest {
  /**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion.
*/
readonly "content": ReactionsCreateForTeamDiscussionInOrgRequestContent
}

export interface ReactionsDeleteForTeamDiscussionParams {
  
}

export interface TeamsListPendingInvitationsInOrgParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type TeamsListPendingInvitationsInOrg200 = ReadonlyArray<OrganizationInvitation>

export type TeamsListMembersInOrgParamsRole = "member" | "maintainer" | "all"

export interface TeamsListMembersInOrgParams {
  readonly "role"?: TeamsListMembersInOrgParamsRole | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type TeamsListMembersInOrg200 = ReadonlyArray<SimpleUser>

export interface TeamsGetMembershipForUserInOrgParams {
  
}

/**
* The role of the user in the team.
*/
export type TeamMembershipRole = "member" | "maintainer"

/**
* The state of the user's membership in the team.
*/
export type TeamMembershipState = "active" | "pending"

/**
* Team Membership
*/
export interface TeamMembership {
  readonly "url": string;
  /**
* The role of the user in the team.
*/
readonly "role": TeamMembershipRole;
  /**
* The state of the user's membership in the team.
*/
readonly "state": TeamMembershipState
}

export interface TeamsAddOrUpdateMembershipForUserInOrgParams {
  
}

/**
* The role that this user should have in the team.
*/
export type TeamsAddOrUpdateMembershipForUserInOrgRequestRole = "member" | "maintainer"

export interface TeamsAddOrUpdateMembershipForUserInOrgRequest {
  /**
* The role that this user should have in the team.
*/
readonly "role"?: TeamsAddOrUpdateMembershipForUserInOrgRequestRole | undefined
}

export interface TeamsRemoveMembershipForUserInOrgParams {
  
}

export interface TeamsListProjectsInOrgParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* A team's access to a project.
*/
export interface TeamProject {
  readonly "owner_url": string;
  readonly "url": string;
  readonly "html_url": string;
  readonly "columns_url": string;
  readonly "id": number;
  readonly "node_id": string;
  readonly "name": string;
  readonly "body": string | null;
  readonly "number": number;
  readonly "state": string;
  readonly "creator": SimpleUser;
  readonly "created_at": string;
  readonly "updated_at": string;
  /**
* The organization permission for this project. Only present when owner is an organization.
*/
readonly "organization_permission"?: string | undefined;
  /**
* Whether the project is private or not. Only present when owner is an organization.
*/
readonly "private"?: boolean | undefined;
  readonly "permissions": {
  readonly "read": boolean;
  readonly "write": boolean;
  readonly "admin": boolean
}
}

export type TeamsListProjectsInOrg200 = ReadonlyArray<TeamProject>

export interface TeamsCheckPermissionsForProjectInOrgParams {
  
}

export interface TeamsAddOrUpdateProjectPermissionsInOrgParams {
  
}

/**
* The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
export type TeamsAddOrUpdateProjectPermissionsInOrgRequestPermission = "read" | "write" | "admin"

export interface TeamsAddOrUpdateProjectPermissionsInOrgRequest {
  /**
* The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
readonly "permission"?: TeamsAddOrUpdateProjectPermissionsInOrgRequestPermission | undefined
}

export interface TeamsAddOrUpdateProjectPermissionsInOrg403 {
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface TeamsRemoveProjectInOrgParams {
  
}

export interface TeamsListReposInOrgParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type TeamsListReposInOrg200 = ReadonlyArray<MinimalRepository>

export interface TeamsCheckPermissionsForRepoInOrgParams {
  
}

/**
* A team's access to a repository.
*/
export interface TeamRepository {
  /**
* Unique identifier of the repository
*/
readonly "id": number;
  readonly "node_id": string;
  /**
* The name of the repository.
*/
readonly "name": string;
  readonly "full_name": string;
  readonly "license": NullableLicenseSimple | null;
  readonly "forks": number;
  readonly "permissions"?: {
  readonly "admin": boolean;
  readonly "pull": boolean;
  readonly "triage"?: boolean | undefined;
  readonly "push": boolean;
  readonly "maintain"?: boolean | undefined
} | undefined;
  readonly "role_name"?: string | undefined;
  readonly "owner": NullableSimpleUser | null;
  /**
* Whether the repository is private or public.
*/
readonly "private": boolean;
  readonly "html_url": string;
  readonly "description": string | null;
  readonly "fork": boolean;
  readonly "url": string;
  readonly "archive_url": string;
  readonly "assignees_url": string;
  readonly "blobs_url": string;
  readonly "branches_url": string;
  readonly "collaborators_url": string;
  readonly "comments_url": string;
  readonly "commits_url": string;
  readonly "compare_url": string;
  readonly "contents_url": string;
  readonly "contributors_url": string;
  readonly "deployments_url": string;
  readonly "downloads_url": string;
  readonly "events_url": string;
  readonly "forks_url": string;
  readonly "git_commits_url": string;
  readonly "git_refs_url": string;
  readonly "git_tags_url": string;
  readonly "git_url": string;
  readonly "issue_comment_url": string;
  readonly "issue_events_url": string;
  readonly "issues_url": string;
  readonly "keys_url": string;
  readonly "labels_url": string;
  readonly "languages_url": string;
  readonly "merges_url": string;
  readonly "milestones_url": string;
  readonly "notifications_url": string;
  readonly "pulls_url": string;
  readonly "releases_url": string;
  readonly "ssh_url": string;
  readonly "stargazers_url": string;
  readonly "statuses_url": string;
  readonly "subscribers_url": string;
  readonly "subscription_url": string;
  readonly "tags_url": string;
  readonly "teams_url": string;
  readonly "trees_url": string;
  readonly "clone_url": string;
  readonly "mirror_url": string | null;
  readonly "hooks_url": string;
  readonly "svn_url": string;
  readonly "homepage": string | null;
  readonly "language": string | null;
  readonly "forks_count": number;
  readonly "stargazers_count": number;
  readonly "watchers_count": number;
  readonly "size": number;
  /**
* The default branch of the repository.
*/
readonly "default_branch": string;
  readonly "open_issues_count": number;
  /**
* Whether this repository acts as a template that can be used to generate new repositories.
*/
readonly "is_template"?: boolean | undefined;
  readonly "topics"?: ReadonlyArray<string> | undefined;
  /**
* Whether issues are enabled.
*/
readonly "has_issues": boolean;
  /**
* Whether projects are enabled.
*/
readonly "has_projects": boolean;
  /**
* Whether the wiki is enabled.
*/
readonly "has_wiki": boolean;
  readonly "has_pages": boolean;
  /**
* Whether downloads are enabled.
*/
readonly "has_downloads": boolean;
  /**
* Whether the repository is archived.
*/
readonly "archived": boolean;
  /**
* Returns whether or not this repository disabled.
*/
readonly "disabled": boolean;
  /**
* The repository visibility: public, private, or internal.
*/
readonly "visibility"?: string | undefined;
  readonly "pushed_at": string | null;
  readonly "created_at": string | null;
  readonly "updated_at": string | null;
  /**
* Whether to allow rebase merges for pull requests.
*/
readonly "allow_rebase_merge"?: boolean | undefined;
  readonly "temp_clone_token"?: string | undefined;
  /**
* Whether to allow squash merges for pull requests.
*/
readonly "allow_squash_merge"?: boolean | undefined;
  /**
* Whether to allow Auto-merge to be used on pull requests.
*/
readonly "allow_auto_merge"?: boolean | undefined;
  /**
* Whether to delete head branches when pull requests are merged
*/
readonly "delete_branch_on_merge"?: boolean | undefined;
  /**
* Whether to allow merge commits for pull requests.
*/
readonly "allow_merge_commit"?: boolean | undefined;
  /**
* Whether to allow forking this repo
*/
readonly "allow_forking"?: boolean | undefined;
  /**
* Whether to require contributors to sign off on web-based commits
*/
readonly "web_commit_signoff_required"?: boolean | undefined;
  readonly "subscribers_count"?: number | undefined;
  readonly "network_count"?: number | undefined;
  readonly "open_issues": number;
  readonly "watchers": number;
  readonly "master_branch"?: string | undefined
}

export interface TeamsAddOrUpdateRepoPermissionsInOrgParams {
  
}

export interface TeamsAddOrUpdateRepoPermissionsInOrgRequest {
  /**
* The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
*/
readonly "permission"?: string | undefined
}

export interface TeamsRemoveRepoInOrgParams {
  
}

export interface TeamsListChildInOrgParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type TeamsListChildInOrg200 = ReadonlyArray<Team>

export interface OrgsEnableOrDisableSecurityProductOnAllOrgReposParams {
  
}

/**
* CodeQL query suite to be used. If you specify the `query_suite` parameter, the default setup will be configured with this query suite only on all repositories that didn't have default setup already configured. It will not change the query suite on repositories that already have default setup configured.
* If you don't specify any `query_suite` in your request, the preferred query suite of the organization will be applied.
*/
export type OrgsEnableOrDisableSecurityProductOnAllOrgReposRequestQuerySuite = "default" | "extended"

export interface OrgsEnableOrDisableSecurityProductOnAllOrgReposRequest {
  /**
* CodeQL query suite to be used. If you specify the `query_suite` parameter, the default setup will be configured with this query suite only on all repositories that didn't have default setup already configured. It will not change the query suite on repositories that already have default setup configured.
* If you don't specify any `query_suite` in your request, the preferred query suite of the organization will be applied.
*/
readonly "query_suite"?: OrgsEnableOrDisableSecurityProductOnAllOrgReposRequestQuerySuite | undefined
}

export interface ProjectsClassicGetCardParams {
  
}

/**
* Project cards represent a scope of work.
*/
export interface ProjectCard {
  readonly "url": string;
  /**
* The project card's ID
*/
readonly "id": number;
  readonly "node_id": string;
  readonly "note": string | null;
  readonly "creator": NullableSimpleUser | null;
  readonly "created_at": string;
  readonly "updated_at": string;
  /**
* Whether or not the card is archived
*/
readonly "archived"?: boolean | undefined;
  readonly "column_name"?: string | undefined;
  readonly "project_id"?: string | undefined;
  readonly "column_url": string;
  readonly "content_url"?: string | undefined;
  readonly "project_url": string
}

export interface ProjectsClassicDeleteCardParams {
  
}

export interface ProjectsClassicDeleteCard403 {
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined;
  readonly "errors"?: ReadonlyArray<string> | undefined
}

export interface ProjectsClassicUpdateCardParams {
  
}

export interface ProjectsClassicUpdateCardRequest {
  /**
* The project card's note
*/
readonly "note"?: string | null | undefined;
  /**
* Whether or not the card is archived
*/
readonly "archived"?: boolean | undefined
}

export interface ProjectsClassicMoveCardParams {
  
}

export interface ProjectsClassicMoveCardRequest {
  /**
* The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
*/
readonly "position": string;
  /**
* The unique identifier of the column the card should be moved to
*/
readonly "column_id"?: number | undefined
}

export interface ProjectsClassicMoveCard201 {
  
}

export interface ProjectsClassicMoveCard403 {
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined;
  readonly "errors"?: ReadonlyArray<{
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "resource"?: string | undefined;
  readonly "field"?: string | undefined
}> | undefined
}

export interface ProjectsClassicMoveCard503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined;
  readonly "errors"?: ReadonlyArray<{
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined
}> | undefined
}

export interface ProjectsClassicGetColumnParams {
  
}

/**
* Project columns contain cards of work.
*/
export interface ProjectColumn {
  readonly "url": string;
  readonly "project_url": string;
  readonly "cards_url": string;
  /**
* The unique identifier of the project column
*/
readonly "id": number;
  readonly "node_id": string;
  /**
* Name of the project column
*/
readonly "name": string;
  readonly "created_at": string;
  readonly "updated_at": string
}

export interface ProjectsClassicDeleteColumnParams {
  
}

export interface ProjectsClassicUpdateColumnParams {
  
}

export interface ProjectsClassicUpdateColumnRequest {
  /**
* Name of the project column
*/
readonly "name": string
}

export type ProjectsClassicListCardsParamsArchivedState = "all" | "archived" | "not_archived"

export interface ProjectsClassicListCardsParams {
  readonly "archived_state"?: ProjectsClassicListCardsParamsArchivedState | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ProjectsClassicListCards200 = ReadonlyArray<ProjectCard>

export interface ProjectsClassicCreateCardParams {
  
}

export const ProjectsClassicCreateCardRequest = {
  /**
* The project card's note
*/
readonly "note": string | null
} | {
  /**
* The unique identifier of the content associated with the card
*/
readonly "content_id": number;
  /**
* The piece of content associated with the card
*/
readonly "content_type": string
};
export type ProjectsClassicCreateCardRequest = (typeof ProjectsClassicCreateCardRequest)[keyof typeof ProjectsClassicCreateCardRequest];

export type ProjectsClassicCreateCard422 = ValidationError | ValidationErrorSimple

export interface ProjectsClassicCreateCard503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined;
  readonly "errors"?: ReadonlyArray<{
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined
}> | undefined
}

export interface ProjectsClassicMoveColumnParams {
  
}

export interface ProjectsClassicMoveColumnRequest {
  /**
* The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
*/
readonly "position": string
}

export interface ProjectsClassicMoveColumn201 {
  
}

export interface ProjectsClassicGetParams {
  
}

export interface ProjectsClassicDeleteParams {
  
}

export interface ProjectsClassicDelete403 {
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined;
  readonly "errors"?: ReadonlyArray<string> | undefined
}

export interface ProjectsClassicUpdateParams {
  
}

/**
* The baseline permission that all organization members have on this project
*/
export type ProjectsClassicUpdateRequestOrganizationPermission = "read" | "write" | "admin" | "none"

export interface ProjectsClassicUpdateRequest {
  /**
* Name of the project
*/
readonly "name"?: string | undefined;
  /**
* Body of the project
*/
readonly "body"?: string | null | undefined;
  /**
* State of the project; either 'open' or 'closed'
*/
readonly "state"?: string | undefined;
  /**
* The baseline permission that all organization members have on this project
*/
readonly "organization_permission"?: ProjectsClassicUpdateRequestOrganizationPermission | undefined;
  /**
* Whether or not this project can be seen by everyone.
*/
readonly "private"?: boolean | undefined
}

export interface ProjectsClassicUpdate403 {
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined;
  readonly "errors"?: ReadonlyArray<string> | undefined
}

export type ProjectsClassicListCollaboratorsParamsAffiliation = "outside" | "direct" | "all"

export interface ProjectsClassicListCollaboratorsParams {
  readonly "affiliation"?: ProjectsClassicListCollaboratorsParamsAffiliation | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ProjectsClassicListCollaborators200 = ReadonlyArray<SimpleUser>

export interface ProjectsClassicAddCollaboratorParams {
  
}

/**
* The permission to grant the collaborator.
*/
export type ProjectsClassicAddCollaboratorRequestPermission = "read" | "write" | "admin"

export interface ProjectsClassicAddCollaboratorRequest {
  /**
* The permission to grant the collaborator.
*/
readonly "permission"?: ProjectsClassicAddCollaboratorRequestPermission | undefined
}

export interface ProjectsClassicRemoveCollaboratorParams {
  
}

export interface ProjectsClassicGetPermissionForUserParams {
  
}

/**
* Project Collaborator Permission
*/
export interface ProjectCollaboratorPermission {
  readonly "permission": string;
  readonly "user": NullableSimpleUser | null
}

export interface ProjectsClassicListColumnsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ProjectsClassicListColumns200 = ReadonlyArray<ProjectColumn>

export interface ProjectsClassicCreateColumnParams {
  
}

export interface ProjectsClassicCreateColumnRequest {
  /**
* Name of the project column
*/
readonly "name": string
}

export interface RateLimit {
  readonly "limit": number;
  readonly "remaining": number;
  readonly "reset": number;
  readonly "used": number
}

/**
* Rate Limit Overview
*/
export interface RateLimitOverview {
  readonly "resources": {
  readonly "core": RateLimit;
  readonly "graphql"?: RateLimit | undefined;
  readonly "search": RateLimit;
  readonly "code_search"?: RateLimit | undefined;
  readonly "source_import"?: RateLimit | undefined;
  readonly "integration_manifest"?: RateLimit | undefined;
  readonly "code_scanning_upload"?: RateLimit | undefined;
  readonly "actions_runner_registration"?: RateLimit | undefined;
  readonly "scim"?: RateLimit | undefined;
  readonly "dependency_snapshots"?: RateLimit | undefined;
  readonly "dependency_sbom"?: RateLimit | undefined;
  readonly "code_scanning_autofix"?: RateLimit | undefined
};
  readonly "rate": RateLimit
}

export interface ReposGetParams {
  
}

export interface ReposDeleteParams {
  
}

export interface ReposDelete403 {
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface ReposUpdateParams {
  
}

/**
* The visibility of the repository.
*/
export type ReposUpdateRequestVisibility = "public" | "private"

/**
* Required when using `squash_merge_commit_message`.
* 
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
export type ReposUpdateRequestSquashMergeCommitTitle = "PR_TITLE" | "COMMIT_OR_PR_TITLE"

/**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
export type ReposUpdateRequestSquashMergeCommitMessage = "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"

/**
* Required when using `merge_commit_message`.
* 
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
export type ReposUpdateRequestMergeCommitTitle = "PR_TITLE" | "MERGE_MESSAGE"

/**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
export type ReposUpdateRequestMergeCommitMessage = "PR_BODY" | "PR_TITLE" | "BLANK"

export interface ReposUpdateRequest {
  /**
* The name of the repository.
*/
readonly "name"?: string | undefined;
  /**
* A short description of the repository.
*/
readonly "description"?: string | undefined;
  /**
* A URL with more information about the repository.
*/
readonly "homepage"?: string | undefined;
  /**
* Either `true` to make the repository private or `false` to make it public. Default: `false`.  
* **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
*/
readonly "private"?: boolean | undefined;
  /**
* The visibility of the repository.
*/
readonly "visibility"?: ReposUpdateRequestVisibility | undefined;
  /**
* Specify which security and analysis features to enable or disable for the repository.
* 
* To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:
* `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.
* 
* You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
*/
readonly "security_and_analysis"?: {
  /**
* Use the `status` property to enable or disable GitHub Advanced Security for this repository.
* For more information, see "[About GitHub Advanced
* Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."
* 
* For standalone Code Scanning or Secret Protection products, this parameter cannot be used.
*/
readonly "advanced_security"?: {
  /**
* Can be `enabled` or `disabled`.
*/
readonly "status"?: string | undefined
} | undefined;
  /**
* Use the `status` property to enable or disable GitHub Code Security for this repository.
*/
readonly "code_security"?: {
  /**
* Can be `enabled` or `disabled`.
*/
readonly "status"?: string | undefined
} | undefined;
  /**
* Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."
*/
readonly "secret_scanning"?: {
  /**
* Can be `enabled` or `disabled`.
*/
readonly "status"?: string | undefined
} | undefined;
  /**
* Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)."
*/
readonly "secret_scanning_push_protection"?: {
  /**
* Can be `enabled` or `disabled`.
*/
readonly "status"?: string | undefined
} | undefined;
  /**
* Use the `status` property to enable or disable secret scanning AI detection for this repository. For more information, see "[Responsible detection of generic secrets with AI](https://docs.github.com/code-security/secret-scanning/using-advanced-secret-scanning-and-push-protection-features/generic-secret-detection/responsible-ai-generic-secrets)."
*/
readonly "secret_scanning_ai_detection"?: {
  /**
* Can be `enabled` or `disabled`.
*/
readonly "status"?: string | undefined
} | undefined;
  /**
* Use the `status` property to enable or disable secret scanning non-provider patterns for this repository. For more information, see "[Supported secret scanning patterns](/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
*/
readonly "secret_scanning_non_provider_patterns"?: {
  /**
* Can be `enabled` or `disabled`.
*/
readonly "status"?: string | undefined
} | undefined
} | null | undefined;
  /**
* Either `true` to enable issues for this repository or `false` to disable them.
*/
readonly "has_issues"?: boolean | undefined;
  /**
* Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
*/
readonly "has_projects"?: boolean | undefined;
  /**
* Either `true` to enable the wiki for this repository or `false` to disable it.
*/
readonly "has_wiki"?: boolean | undefined;
  /**
* Either `true` to make this repo available as a template repository or `false` to prevent it.
*/
readonly "is_template"?: boolean | undefined;
  /**
* Updates the default branch for this repository.
*/
readonly "default_branch"?: string | undefined;
  /**
* Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
*/
readonly "allow_squash_merge"?: boolean | undefined;
  /**
* Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
*/
readonly "allow_merge_commit"?: boolean | undefined;
  /**
* Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
*/
readonly "allow_rebase_merge"?: boolean | undefined;
  /**
* Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
*/
readonly "allow_auto_merge"?: boolean | undefined;
  /**
* Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
*/
readonly "delete_branch_on_merge"?: boolean | undefined;
  /**
* Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
*/
readonly "allow_update_branch"?: boolean | undefined;
  /**
* Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.
*/
readonly "use_squash_pr_title_as_default"?: boolean | undefined;
  /**
* Required when using `squash_merge_commit_message`.
* 
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
readonly "squash_merge_commit_title"?: ReposUpdateRequestSquashMergeCommitTitle | undefined;
  /**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
readonly "squash_merge_commit_message"?: ReposUpdateRequestSquashMergeCommitMessage | undefined;
  /**
* Required when using `merge_commit_message`.
* 
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
readonly "merge_commit_title"?: ReposUpdateRequestMergeCommitTitle | undefined;
  /**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
readonly "merge_commit_message"?: ReposUpdateRequestMergeCommitMessage | undefined;
  /**
* Whether to archive this repository. `false` will unarchive a previously archived repository.
*/
readonly "archived"?: boolean | undefined;
  /**
* Either `true` to allow private forks, or `false` to prevent private forks.
*/
readonly "allow_forking"?: boolean | undefined;
  /**
* Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.
*/
readonly "web_commit_signoff_required"?: boolean | undefined
}

export interface ActionsListArtifactsForRepoParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined;
  readonly "name"?: string | undefined
}

/**
* An artifact
*/
export interface Artifact {
  readonly "id": number;
  readonly "node_id": string;
  /**
* The name of the artifact.
*/
readonly "name": string;
  /**
* The size in bytes of the artifact.
*/
readonly "size_in_bytes": number;
  readonly "url": string;
  readonly "archive_download_url": string;
  /**
* Whether or not the artifact has expired.
*/
readonly "expired": boolean;
  readonly "created_at": string | null;
  readonly "expires_at": string | null;
  readonly "updated_at": string | null;
  /**
* The SHA256 digest of the artifact. This field will only be populated on artifacts uploaded with upload-artifact v4 or newer. For older versions, this field will be null.
*/
readonly "digest"?: string | null | undefined;
  readonly "workflow_run"?: {
  readonly "id"?: number | undefined;
  readonly "repository_id"?: number | undefined;
  readonly "head_repository_id"?: number | undefined;
  readonly "head_branch"?: string | undefined;
  readonly "head_sha"?: string | undefined
} | null | undefined
}

export interface ActionsListArtifactsForRepo200 {
  readonly "total_count": number;
  readonly "artifacts": ReadonlyArray<Artifact>
}

export interface ActionsGetArtifactParams {
  
}

export interface ActionsDeleteArtifactParams {
  
}

export interface ActionsDownloadArtifactParams {
  
}

export interface ActionsGetActionsCacheUsageParams {
  
}

export type ActionsGetActionsCacheListParamsSort = "created_at" | "last_accessed_at" | "size_in_bytes"

export type ActionsGetActionsCacheListParamsDirection = "asc" | "desc"

export interface ActionsGetActionsCacheListParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined;
  readonly "ref"?: string | undefined;
  readonly "key"?: string | undefined;
  readonly "sort"?: ActionsGetActionsCacheListParamsSort | undefined;
  readonly "direction"?: ActionsGetActionsCacheListParamsDirection | undefined
}

/**
* Repository actions caches
*/
export interface ActionsCacheList {
  /**
* Total number of caches
*/
readonly "total_count": number;
  /**
* Array of caches
*/
readonly "actions_caches": ReadonlyArray<{
  readonly "id"?: number | undefined;
  readonly "ref"?: string | undefined;
  readonly "key"?: string | undefined;
  readonly "version"?: string | undefined;
  readonly "last_accessed_at"?: string | undefined;
  readonly "created_at"?: string | undefined;
  readonly "size_in_bytes"?: number | undefined
}>
}

export interface ActionsDeleteActionsCacheByKeyParams {
  readonly "key": string;
  readonly "ref"?: string | undefined
}

export interface ActionsDeleteActionsCacheByIdParams {
  
}

export interface ActionsGetJobForWorkflowRunParams {
  
}

/**
* The phase of the lifecycle that the job is currently in.
*/
export type JobStatus = "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending"

/**
* The outcome of the job.
*/
export type JobConclusion = "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required"

/**
* Information of a job execution in a workflow run
*/
export interface Job {
  /**
* The id of the job.
*/
readonly "id": number;
  /**
* The id of the associated workflow run.
*/
readonly "run_id": number;
  readonly "run_url": string;
  /**
* Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
*/
readonly "run_attempt"?: number | undefined;
  readonly "node_id": string;
  /**
* The SHA of the commit that is being run.
*/
readonly "head_sha": string;
  readonly "url": string;
  readonly "html_url": string | null;
  /**
* The phase of the lifecycle that the job is currently in.
*/
readonly "status": JobStatus;
  /**
* The outcome of the job.
*/
readonly "conclusion": JobConclusion | null;
  /**
* The time that the job created, in ISO 8601 format.
*/
readonly "created_at": string;
  /**
* The time that the job started, in ISO 8601 format.
*/
readonly "started_at": string;
  /**
* The time that the job finished, in ISO 8601 format.
*/
readonly "completed_at": string | null;
  /**
* The name of the job.
*/
readonly "name": string;
  /**
* Steps in this job.
*/
readonly "steps"?: ReadonlyArray<{
  /**
* The phase of the lifecycle that the job is currently in.
*/
readonly "status": "queued" | "in_progress" | "completed";
  /**
* The outcome of the job.
*/
readonly "conclusion": string | null;
  /**
* The name of the job.
*/
readonly "name": string;
  readonly "number": number;
  /**
* The time that the step started, in ISO 8601 format.
*/
readonly "started_at"?: string | null | undefined;
  /**
* The time that the job finished, in ISO 8601 format.
*/
readonly "completed_at"?: string | null | undefined
}> | undefined;
  readonly "check_run_url": string;
  /**
* Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file.
*/
readonly "labels": ReadonlyArray<string>;
  /**
* The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
*/
readonly "runner_id": number | null;
  /**
* The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
*/
readonly "runner_name": string | null;
  /**
* The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
*/
readonly "runner_group_id": number | null;
  /**
* The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
*/
readonly "runner_group_name": string | null;
  /**
* The name of the workflow.
*/
readonly "workflow_name": string | null;
  /**
* The name of the current branch.
*/
readonly "head_branch": string | null
}

export interface ActionsDownloadJobLogsForWorkflowRunParams {
  
}

export interface ActionsReRunJobForWorkflowRunParams {
  
}

export interface ActionsReRunJobForWorkflowRunRequest {
  /**
* Whether to enable debug logging for the re-run.
*/
readonly "enable_debug_logging"?: boolean | undefined
}

export interface ActionsGetCustomOidcSubClaimForRepoParams {
  
}

/**
* Actions OIDC subject customization for a repository
*/
export interface OidcCustomSubRepo {
  /**
* Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.
*/
readonly "use_default": boolean;
  /**
* Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
*/
readonly "include_claim_keys"?: ReadonlyArray<string> | undefined
}

export interface ActionsSetCustomOidcSubClaimForRepoParams {
  
}

/**
* Actions OIDC subject customization for a repository
*/
export interface ActionsSetCustomOidcSubClaimForRepoRequest {
  /**
* Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.
*/
readonly "use_default": boolean;
  /**
* Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
*/
readonly "include_claim_keys"?: ReadonlyArray<string> | undefined
}

export interface ActionsListRepoOrganizationSecretsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Set secrets for GitHub Actions.
*/
export interface ActionsSecret {
  /**
* The name of the secret.
*/
readonly "name": string;
  readonly "created_at": string;
  readonly "updated_at": string
}

export interface ActionsListRepoOrganizationSecrets200 {
  readonly "total_count": number;
  readonly "secrets": ReadonlyArray<ActionsSecret>
}

export interface ActionsListRepoOrganizationVariablesParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface ActionsVariable {
  /**
* The name of the variable.
*/
readonly "name": string;
  /**
* The value of the variable.
*/
readonly "value": string;
  /**
* The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
readonly "created_at": string;
  /**
* The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
readonly "updated_at": string
}

export interface ActionsListRepoOrganizationVariables200 {
  readonly "total_count": number;
  readonly "variables": ReadonlyArray<ActionsVariable>
}

export interface ActionsGetGithubActionsPermissionsRepositoryParams {
  
}

/**
* Whether GitHub Actions is enabled on the repository.
*/
export type ActionsEnabled = boolean

export interface ActionsRepositoryPermissions {
  readonly "enabled": ActionsEnabled;
  readonly "allowed_actions"?: AllowedActions | undefined;
  readonly "selected_actions_url"?: SelectedActionsUrl | undefined;
  readonly "sha_pinning_required"?: ShaPinningRequired | undefined
}

export interface ActionsSetGithubActionsPermissionsRepositoryParams {
  
}

export interface ActionsSetGithubActionsPermissionsRepositoryRequest {
  readonly "enabled": ActionsEnabled;
  readonly "allowed_actions"?: AllowedActions | undefined;
  readonly "sha_pinning_required"?: ShaPinningRequired | undefined
}

export interface ActionsGetWorkflowAccessToRepositoryParams {
  
}

/**
* Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
* repository.
* 
* `none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repositories only. `organization` level access allows sharing across the organization.
*/
export type ActionsWorkflowAccessToRepositoryAccessLevel = "none" | "user" | "organization"

export interface ActionsWorkflowAccessToRepository {
  /**
* Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
* repository.
* 
* `none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repositories only. `organization` level access allows sharing across the organization.
*/
readonly "access_level": ActionsWorkflowAccessToRepositoryAccessLevel
}

export interface ActionsSetWorkflowAccessToRepositoryParams {
  
}

export interface ActionsGetArtifactAndLogRetentionSettingsRepositoryParams {
  
}

export interface ActionsSetArtifactAndLogRetentionSettingsRepositoryParams {
  
}

export interface ActionsGetForkPrContributorApprovalPermissionsRepositoryParams {
  
}

export interface ActionsSetForkPrContributorApprovalPermissionsRepositoryParams {
  
}

export interface ActionsGetPrivateRepoForkPrWorkflowsSettingsRepositoryParams {
  
}

export interface ActionsSetPrivateRepoForkPrWorkflowsSettingsRepositoryParams {
  
}

export interface ActionsGetAllowedActionsRepositoryParams {
  
}

export interface ActionsSetAllowedActionsRepositoryParams {
  
}

export interface ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryParams {
  
}

export interface ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryParams {
  
}

export interface ActionsListSelfHostedRunnersForRepoParams {
  readonly "name"?: string | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface ActionsListSelfHostedRunnersForRepo200 {
  readonly "total_count": number;
  readonly "runners": ReadonlyArray<Runner>
}

export interface ActionsListRunnerApplicationsForRepoParams {
  
}

export type ActionsListRunnerApplicationsForRepo200 = ReadonlyArray<RunnerApplication>

export interface ActionsGenerateRunnerJitconfigForRepoParams {
  
}

export interface ActionsGenerateRunnerJitconfigForRepoRequest {
  /**
* The name of the new runner.
*/
readonly "name": string;
  /**
* The ID of the runner group to register the runner to.
*/
readonly "runner_group_id": number;
  /**
* The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.
*/
readonly "labels": ReadonlyArray<string>;
  /**
* The working directory to be used for job execution, relative to the runner install directory.
*/
readonly "work_folder"?: string | undefined
}

export interface ActionsGenerateRunnerJitconfigForRepo201 {
  readonly "runner": Runner;
  /**
* The base64 encoded runner configuration.
*/
readonly "encoded_jit_config": string
}

export interface ActionsCreateRegistrationTokenForRepoParams {
  
}

export interface ActionsCreateRemoveTokenForRepoParams {
  
}

export interface ActionsGetSelfHostedRunnerForRepoParams {
  
}

export interface ActionsDeleteSelfHostedRunnerFromRepoParams {
  
}

export interface ActionsListLabelsForSelfHostedRunnerForRepoParams {
  
}

export interface ActionsListLabelsForSelfHostedRunnerForRepo200 {
  readonly "total_count": number;
  readonly "labels": ReadonlyArray<RunnerLabel>
}

export interface ActionsSetCustomLabelsForSelfHostedRunnerForRepoParams {
  
}

export interface ActionsSetCustomLabelsForSelfHostedRunnerForRepoRequest {
  /**
* The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
*/
readonly "labels": ReadonlyArray<string>
}

export interface ActionsSetCustomLabelsForSelfHostedRunnerForRepo200 {
  readonly "total_count": number;
  readonly "labels": ReadonlyArray<RunnerLabel>
}

export interface ActionsAddCustomLabelsToSelfHostedRunnerForRepoParams {
  
}

export interface ActionsAddCustomLabelsToSelfHostedRunnerForRepoRequest {
  /**
* The names of the custom labels to add to the runner.
*/
readonly "labels": ReadonlyArray<string>
}

export interface ActionsAddCustomLabelsToSelfHostedRunnerForRepo200 {
  readonly "total_count": number;
  readonly "labels": ReadonlyArray<RunnerLabel>
}

export interface ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoParams {
  
}

export interface ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo200 {
  readonly "total_count": number;
  readonly "labels": ReadonlyArray<RunnerLabel>
}

export interface ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoParams {
  
}

export interface ActionsRemoveCustomLabelFromSelfHostedRunnerForRepo200 {
  readonly "total_count": number;
  readonly "labels": ReadonlyArray<RunnerLabel>
}

export type ActionsListWorkflowRunsForRepoParamsStatus = "completed" | "action_required" | "cancelled" | "failure" | "neutral" | "skipped" | "stale" | "success" | "timed_out" | "in_progress" | "queued" | "requested" | "waiting" | "pending"

export interface ActionsListWorkflowRunsForRepoParams {
  readonly "actor"?: string | undefined;
  readonly "branch"?: string | undefined;
  readonly "event"?: string | undefined;
  readonly "status"?: ActionsListWorkflowRunsForRepoParamsStatus | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined;
  readonly "created"?: string | undefined;
  readonly "exclude_pull_requests"?: boolean | undefined;
  readonly "check_suite_id"?: number | undefined;
  readonly "head_sha"?: string | undefined
}

/**
* A workflow referenced/reused by the initial caller workflow
*/
export interface ReferencedWorkflow {
  readonly "path": string;
  readonly "sha": string;
  readonly "ref"?: string | undefined
}

export interface PullRequestMinimal {
  readonly "id": number;
  readonly "number": number;
  readonly "url": string;
  readonly "head": {
  readonly "ref": string;
  readonly "sha": string;
  readonly "repo": {
  readonly "id": number;
  readonly "url": string;
  readonly "name": string
}
};
  readonly "base": {
  readonly "ref": string;
  readonly "sha": string;
  readonly "repo": {
  readonly "id": number;
  readonly "url": string;
  readonly "name": string
}
}
}

/**
* A commit.
*/
export interface NullableSimpleCommit {
  /**
* SHA for the commit
*/
readonly "id": string;
  /**
* SHA for the commit's tree
*/
readonly "tree_id": string;
  /**
* Message describing the purpose of the commit
*/
readonly "message": string;
  /**
* Timestamp of the commit
*/
readonly "timestamp": string;
  /**
* Information about the Git author
*/
readonly "author": {
  /**
* Name of the commit's author
*/
readonly "name": string;
  /**
* Git email address of the commit's author
*/
readonly "email": string
} | null;
  /**
* Information about the Git committer
*/
readonly "committer": {
  /**
* Name of the commit's committer
*/
readonly "name": string;
  /**
* Git email address of the commit's committer
*/
readonly "email": string
} | null
}

/**
* An invocation of a workflow
*/
export interface WorkflowRun {
  /**
* The ID of the workflow run.
*/
readonly "id": number;
  /**
* The name of the workflow run.
*/
readonly "name"?: string | null | undefined;
  readonly "node_id": string;
  /**
* The ID of the associated check suite.
*/
readonly "check_suite_id"?: number | undefined;
  /**
* The node ID of the associated check suite.
*/
readonly "check_suite_node_id"?: string | undefined;
  readonly "head_branch": string | null;
  /**
* The SHA of the head commit that points to the version of the workflow being run.
*/
readonly "head_sha": string;
  /**
* The full path of the workflow
*/
readonly "path": string;
  /**
* The auto incrementing run number for the workflow run.
*/
readonly "run_number": number;
  /**
* Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
*/
readonly "run_attempt"?: number | undefined;
  readonly "referenced_workflows"?: ReadonlyArray<ReferencedWorkflow> | null | undefined;
  readonly "event": string;
  readonly "status": string | null;
  readonly "conclusion": string | null;
  /**
* The ID of the parent workflow.
*/
readonly "workflow_id": number;
  /**
* The URL to the workflow run.
*/
readonly "url": string;
  readonly "html_url": string;
  /**
* Pull requests that are open with a `head_sha` or `head_branch` that matches the workflow run. The returned pull requests do not necessarily indicate pull requests that triggered the run.
*/
readonly "pull_requests": ReadonlyArray<PullRequestMinimal> | null;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "actor"?: SimpleUser | undefined;
  readonly "triggering_actor"?: SimpleUser | undefined;
  /**
* The start time of the latest run. Resets on re-run.
*/
readonly "run_started_at"?: string | undefined;
  /**
* The URL to the jobs for the workflow run.
*/
readonly "jobs_url": string;
  /**
* The URL to download the logs for the workflow run.
*/
readonly "logs_url": string;
  /**
* The URL to the associated check suite.
*/
readonly "check_suite_url": string;
  /**
* The URL to the artifacts for the workflow run.
*/
readonly "artifacts_url": string;
  /**
* The URL to cancel the workflow run.
*/
readonly "cancel_url": string;
  /**
* The URL to rerun the workflow run.
*/
readonly "rerun_url": string;
  /**
* The URL to the previous attempted run of this workflow, if one exists.
*/
readonly "previous_attempt_url"?: string | null | undefined;
  /**
* The URL to the workflow.
*/
readonly "workflow_url": string;
  readonly "head_commit": NullableSimpleCommit | null;
  readonly "repository": MinimalRepository;
  readonly "head_repository": MinimalRepository;
  readonly "head_repository_id"?: number | undefined;
  /**
* The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.
*/
readonly "display_title": string
}

export interface ActionsListWorkflowRunsForRepo200 {
  readonly "total_count": number;
  readonly "workflow_runs": ReadonlyArray<WorkflowRun>
}

export interface ActionsGetWorkflowRunParams {
  readonly "exclude_pull_requests"?: boolean | undefined
}

export interface ActionsDeleteWorkflowRunParams {
  
}

export interface ActionsGetReviewsForRunParams {
  
}

/**
* Whether deployment to the environment(s) was approved or rejected or pending (with comments)
*/
export type EnvironmentApprovalsState = "approved" | "rejected" | "pending"

/**
* An entry in the reviews log for environment deployments
*/
export interface EnvironmentApprovals {
  /**
* The list of environments that were approved or rejected
*/
readonly "environments": ReadonlyArray<{
  /**
* The id of the environment.
*/
readonly "id"?: number | undefined;
  readonly "node_id"?: string | undefined;
  /**
* The name of the environment.
*/
readonly "name"?: string | undefined;
  readonly "url"?: string | undefined;
  readonly "html_url"?: string | undefined;
  /**
* The time that the environment was created, in ISO 8601 format.
*/
readonly "created_at"?: string | undefined;
  /**
* The time that the environment was last updated, in ISO 8601 format.
*/
readonly "updated_at"?: string | undefined
}>;
  /**
* Whether deployment to the environment(s) was approved or rejected or pending (with comments)
*/
readonly "state": EnvironmentApprovalsState;
  readonly "user": SimpleUser;
  /**
* The comment submitted with the deployment review
*/
readonly "comment": string
}

export type ActionsGetReviewsForRun200 = ReadonlyArray<EnvironmentApprovals>

export interface ActionsApproveWorkflowRunParams {
  
}

export interface ActionsListWorkflowRunArtifactsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined;
  readonly "name"?: string | undefined
}

export interface ActionsListWorkflowRunArtifacts200 {
  readonly "total_count": number;
  readonly "artifacts": ReadonlyArray<Artifact>
}

export interface ActionsGetWorkflowRunAttemptParams {
  readonly "exclude_pull_requests"?: boolean | undefined
}

export interface ActionsListJobsForWorkflowRunAttemptParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface ActionsListJobsForWorkflowRunAttempt200 {
  readonly "total_count": number;
  readonly "jobs": ReadonlyArray<Job>
}

export interface ActionsDownloadWorkflowRunAttemptLogsParams {
  
}

export interface ActionsCancelWorkflowRunParams {
  
}

export interface ActionsReviewCustomGatesForRunParams {
  
}

export interface ReviewCustomGatesCommentRequired {
  /**
* The name of the environment to approve or reject.
*/
readonly "environment_name": string;
  /**
* Comment associated with the pending deployment protection rule. **Required when state is not provided.**
*/
readonly "comment": string
}

/**
* Whether to approve or reject deployment to the specified environments.
*/
export type ReviewCustomGatesStateRequiredState = "approved" | "rejected"

export interface ReviewCustomGatesStateRequired {
  /**
* The name of the environment to approve or reject.
*/
readonly "environment_name": string;
  /**
* Whether to approve or reject deployment to the specified environments.
*/
readonly "state": ReviewCustomGatesStateRequiredState;
  /**
* Optional comment to include with the review.
*/
readonly "comment"?: string | undefined
}

export type ActionsReviewCustomGatesForRunRequest = ReviewCustomGatesCommentRequired | ReviewCustomGatesStateRequired

export interface ActionsForceCancelWorkflowRunParams {
  
}

export type ActionsListJobsForWorkflowRunParamsFilter = "latest" | "all"

export interface ActionsListJobsForWorkflowRunParams {
  readonly "filter"?: ActionsListJobsForWorkflowRunParamsFilter | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface ActionsListJobsForWorkflowRun200 {
  readonly "total_count": number;
  readonly "jobs": ReadonlyArray<Job>
}

export interface ActionsDownloadWorkflowRunLogsParams {
  
}

export interface ActionsDeleteWorkflowRunLogsParams {
  
}

export interface ActionsGetPendingDeploymentsForRunParams {
  
}

/**
* The type of reviewer.
*/
export type DeploymentReviewerType = "User" | "Team"

/**
* Details of a deployment that is waiting for protection rules to pass
*/
export interface PendingDeployment {
  readonly "environment": {
  /**
* The id of the environment.
*/
readonly "id"?: number | undefined;
  readonly "node_id"?: string | undefined;
  /**
* The name of the environment.
*/
readonly "name"?: string | undefined;
  readonly "url"?: string | undefined;
  readonly "html_url"?: string | undefined
};
  /**
* The set duration of the wait timer
*/
readonly "wait_timer": number;
  /**
* The time that the wait timer began.
*/
readonly "wait_timer_started_at": string | null;
  /**
* Whether the currently authenticated user can approve the deployment
*/
readonly "current_user_can_approve": boolean;
  /**
* The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
*/
readonly "reviewers": ReadonlyArray<{
  readonly "type"?: DeploymentReviewerType | undefined;
  readonly "reviewer"?: SimpleUser | Team | undefined
}>
}

export type ActionsGetPendingDeploymentsForRun200 = ReadonlyArray<PendingDeployment>

export interface ActionsReviewPendingDeploymentsForRunParams {
  
}

/**
* Whether to approve or reject deployment to the specified environments.
*/
export type ActionsReviewPendingDeploymentsForRunRequestState = "approved" | "rejected"

export interface ActionsReviewPendingDeploymentsForRunRequest {
  /**
* The list of environment ids to approve or reject
*/
readonly "environment_ids": ReadonlyArray<number>;
  /**
* Whether to approve or reject deployment to the specified environments.
*/
readonly "state": ActionsReviewPendingDeploymentsForRunRequestState;
  /**
* A comment to accompany the deployment review
*/
readonly "comment": string
}

/**
* A request for a specific ref(branch,sha,tag) to be deployed
*/
export interface Deployment {
  readonly "url": string;
  /**
* Unique identifier of the deployment
*/
readonly "id": number;
  readonly "node_id": string;
  readonly "sha": string;
  /**
* The ref to deploy. This can be a branch, tag, or sha.
*/
readonly "ref": string;
  /**
* Parameter to specify a task to execute
*/
readonly "task": string;
  readonly "payload": Record<string, unknown> | string;
  readonly "original_environment"?: string | undefined;
  /**
* Name for the target deployment environment.
*/
readonly "environment": string;
  readonly "description": string | null;
  readonly "creator": NullableSimpleUser | null;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "statuses_url": string;
  readonly "repository_url": string;
  /**
* Specifies if the given environment is will no longer exist at some point in the future. Default: false.
*/
readonly "transient_environment"?: boolean | undefined;
  /**
* Specifies if the given environment is one that end-users directly interact with. Default: false.
*/
readonly "production_environment"?: boolean | undefined;
  readonly "performed_via_github_app"?: NullableIntegration | null | undefined
}

export type ActionsReviewPendingDeploymentsForRun200 = ReadonlyArray<Deployment>

export interface ActionsReRunWorkflowParams {
  
}

export interface ActionsReRunWorkflowRequest {
  /**
* Whether to enable debug logging for the re-run.
*/
readonly "enable_debug_logging"?: boolean | undefined
}

export interface ActionsReRunWorkflowFailedJobsParams {
  
}

export interface ActionsReRunWorkflowFailedJobsRequest {
  /**
* Whether to enable debug logging for the re-run.
*/
readonly "enable_debug_logging"?: boolean | undefined
}

export interface ActionsGetWorkflowRunUsageParams {
  
}

/**
* Workflow Run Usage
*/
export interface WorkflowRunUsage {
  readonly "billable": {
  readonly "UBUNTU"?: {
  readonly "total_ms": number;
  readonly "jobs": number;
  readonly "job_runs"?: ReadonlyArray<{
  readonly "job_id": number;
  readonly "duration_ms": number
}> | undefined
} | undefined;
  readonly "MACOS"?: {
  readonly "total_ms": number;
  readonly "jobs": number;
  readonly "job_runs"?: ReadonlyArray<{
  readonly "job_id": number;
  readonly "duration_ms": number
}> | undefined
} | undefined;
  readonly "WINDOWS"?: {
  readonly "total_ms": number;
  readonly "jobs": number;
  readonly "job_runs"?: ReadonlyArray<{
  readonly "job_id": number;
  readonly "duration_ms": number
}> | undefined
} | undefined
};
  readonly "run_duration_ms"?: number | undefined
}

export interface ActionsListRepoSecretsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface ActionsListRepoSecrets200 {
  readonly "total_count": number;
  readonly "secrets": ReadonlyArray<ActionsSecret>
}

export interface ActionsGetRepoPublicKeyParams {
  
}

export interface ActionsGetRepoSecretParams {
  
}

export interface ActionsCreateOrUpdateRepoSecretParams {
  
}

export interface ActionsCreateOrUpdateRepoSecretRequest {
  /**
* Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/actions/secrets#get-a-repository-public-key) endpoint.
*/
readonly "encrypted_value": string;
  /**
* ID of the key you used to encrypt the secret.
*/
readonly "key_id": string
}

export interface ActionsDeleteRepoSecretParams {
  
}

export interface ActionsListRepoVariablesParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface ActionsListRepoVariables200 {
  readonly "total_count": number;
  readonly "variables": ReadonlyArray<ActionsVariable>
}

export interface ActionsCreateRepoVariableParams {
  
}

export interface ActionsCreateRepoVariableRequest {
  /**
* The name of the variable.
*/
readonly "name": string;
  /**
* The value of the variable.
*/
readonly "value": string
}

export interface ActionsGetRepoVariableParams {
  
}

export interface ActionsDeleteRepoVariableParams {
  
}

export interface ActionsUpdateRepoVariableParams {
  
}

export interface ActionsUpdateRepoVariableRequest {
  /**
* The name of the variable.
*/
readonly "name"?: string | undefined;
  /**
* The value of the variable.
*/
readonly "value"?: string | undefined
}

export interface ActionsListRepoWorkflowsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type WorkflowState = "active" | "deleted" | "disabled_fork" | "disabled_inactivity" | "disabled_manually"

/**
* A GitHub Actions workflow
*/
export interface Workflow {
  readonly "id": number;
  readonly "node_id": string;
  readonly "name": string;
  readonly "path": string;
  readonly "state": WorkflowState;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "url": string;
  readonly "html_url": string;
  readonly "badge_url": string;
  readonly "deleted_at"?: string | undefined
}

export interface ActionsListRepoWorkflows200 {
  readonly "total_count": number;
  readonly "workflows": ReadonlyArray<Workflow>
}

export interface ActionsGetWorkflowParams {
  
}

export interface ActionsDisableWorkflowParams {
  
}

export interface ActionsCreateWorkflowDispatchParams {
  
}

export interface ActionsCreateWorkflowDispatchRequest {
  /**
* The git reference for the workflow. The reference can be a branch or tag name.
*/
readonly "ref": string;
  /**
* Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.
*/
readonly "inputs"?: Record<string, unknown> | undefined
}

export interface ActionsEnableWorkflowParams {
  
}

export type ActionsListWorkflowRunsParamsStatus = "completed" | "action_required" | "cancelled" | "failure" | "neutral" | "skipped" | "stale" | "success" | "timed_out" | "in_progress" | "queued" | "requested" | "waiting" | "pending"

export interface ActionsListWorkflowRunsParams {
  readonly "actor"?: string | undefined;
  readonly "branch"?: string | undefined;
  readonly "event"?: string | undefined;
  readonly "status"?: ActionsListWorkflowRunsParamsStatus | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined;
  readonly "created"?: string | undefined;
  readonly "exclude_pull_requests"?: boolean | undefined;
  readonly "check_suite_id"?: number | undefined;
  readonly "head_sha"?: string | undefined
}

export interface ActionsListWorkflowRuns200 {
  readonly "total_count": number;
  readonly "workflow_runs": ReadonlyArray<WorkflowRun>
}

export interface ActionsGetWorkflowUsageParams {
  
}

/**
* Workflow Usage
*/
export interface WorkflowUsage {
  readonly "billable": {
  readonly "UBUNTU"?: {
  readonly "total_ms"?: number | undefined
} | undefined;
  readonly "MACOS"?: {
  readonly "total_ms"?: number | undefined
} | undefined;
  readonly "WINDOWS"?: {
  readonly "total_ms"?: number | undefined
} | undefined
}
}

export type ReposListActivitiesParamsDirection = "asc" | "desc"

export type ReposListActivitiesParamsTimePeriod = "day" | "week" | "month" | "quarter" | "year"

export type ReposListActivitiesParamsActivityType = "push" | "force_push" | "branch_creation" | "branch_deletion" | "pr_merge" | "merge_queue_merge"

export interface ReposListActivitiesParams {
  readonly "direction"?: ReposListActivitiesParamsDirection | undefined;
  readonly "per_page"?: number | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined;
  readonly "ref"?: string | undefined;
  readonly "actor"?: string | undefined;
  readonly "time_period"?: ReposListActivitiesParamsTimePeriod | undefined;
  readonly "activity_type"?: ReposListActivitiesParamsActivityType | undefined
}

/**
* The type of the activity that was performed.
*/
export type ActivityActivityType = "push" | "force_push" | "branch_deletion" | "branch_creation" | "pr_merge" | "merge_queue_merge"

/**
* Activity
*/
export interface Activity {
  readonly "id": number;
  readonly "node_id": string;
  /**
* The SHA of the commit before the activity.
*/
readonly "before": string;
  /**
* The SHA of the commit after the activity.
*/
readonly "after": string;
  /**
* The full Git reference, formatted as `refs/heads/<branch name>`.
*/
readonly "ref": string;
  /**
* The time when the activity occurred.
*/
readonly "timestamp": string;
  /**
* The type of the activity that was performed.
*/
readonly "activity_type": ActivityActivityType;
  readonly "actor": NullableSimpleUser | null
}

export type ReposListActivities200 = ReadonlyArray<Activity>

export interface IssuesListAssigneesParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type IssuesListAssignees200 = ReadonlyArray<SimpleUser>

export interface IssuesCheckUserCanBeAssignedParams {
  
}

export interface ReposCreateAttestationParams {
  
}

export interface ReposCreateAttestationRequest {
  /**
* The attestation's Sigstore Bundle.
* Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
*/
readonly "bundle": {
  readonly "mediaType"?: string | undefined;
  readonly "verificationMaterial"?: {
  
} | undefined;
  readonly "dsseEnvelope"?: {
  
} | undefined
}
}

export interface ReposCreateAttestation201 {
  /**
* The ID of the attestation.
*/
readonly "id"?: number | undefined
}

export interface ReposListAttestationsParams {
  readonly "per_page"?: number | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined;
  readonly "predicate_type"?: string | undefined
}

export interface ReposListAttestations200 {
  readonly "attestations"?: ReadonlyArray<{
  /**
* The attestation's Sigstore Bundle.
* Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
*/
readonly "bundle"?: {
  readonly "mediaType"?: string | undefined;
  readonly "verificationMaterial"?: {
  
} | undefined;
  readonly "dsseEnvelope"?: {
  
} | undefined
} | undefined;
  readonly "repository_id"?: number | undefined;
  readonly "bundle_url"?: string | undefined
}> | undefined
}

export interface ReposListAutolinksParams {
  
}

/**
* An autolink reference.
*/
export interface Autolink {
  readonly "id": number;
  /**
* The prefix of a key that is linkified.
*/
readonly "key_prefix": string;
  /**
* A template for the target URL that is generated if a key was found.
*/
readonly "url_template": string;
  /**
* Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters.
*/
readonly "is_alphanumeric": boolean;
  readonly "updated_at"?: string | null | undefined
}

export type ReposListAutolinks200 = ReadonlyArray<Autolink>

export interface ReposCreateAutolinkParams {
  
}

export interface ReposCreateAutolinkRequest {
  /**
* This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit.
*/
readonly "key_prefix": string;
  /**
* The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`.
*/
readonly "url_template": string;
  /**
* Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.
*/
readonly "is_alphanumeric"?: boolean | undefined
}

export interface ReposGetAutolinkParams {
  
}

export interface ReposDeleteAutolinkParams {
  
}

export interface ReposCheckAutomatedSecurityFixesParams {
  
}

/**
* Check Dependabot security updates
*/
export interface CheckAutomatedSecurityFixes {
  /**
* Whether Dependabot security updates are enabled for the repository.
*/
readonly "enabled": boolean;
  /**
* Whether Dependabot security updates are paused for the repository.
*/
readonly "paused": boolean
}

export interface ReposEnableAutomatedSecurityFixesParams {
  
}

export interface ReposDisableAutomatedSecurityFixesParams {
  
}

export interface ReposListBranchesParams {
  readonly "protected"?: boolean | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Protected Branch Required Status Check
*/
export interface ProtectedBranchRequiredStatusCheck {
  readonly "url"?: string | undefined;
  readonly "enforcement_level"?: string | undefined;
  readonly "contexts": ReadonlyArray<string>;
  readonly "checks": ReadonlyArray<{
  readonly "context": string;
  readonly "app_id": number | null
}>;
  readonly "contexts_url"?: string | undefined;
  readonly "strict"?: boolean | undefined
}

/**
* Protected Branch Admin Enforced
*/
export interface ProtectedBranchAdminEnforced {
  readonly "url": string;
  readonly "enabled": boolean
}

/**
* Protected Branch Pull Request Review
*/
export interface ProtectedBranchPullRequestReview {
  readonly "url"?: string | undefined;
  readonly "dismissal_restrictions"?: {
  /**
* The list of users with review dismissal access.
*/
readonly "users"?: ReadonlyArray<SimpleUser> | undefined;
  /**
* The list of teams with review dismissal access.
*/
readonly "teams"?: ReadonlyArray<Team> | undefined;
  /**
* The list of apps with review dismissal access.
*/
readonly "apps"?: ReadonlyArray<Integration> | undefined;
  readonly "url"?: string | undefined;
  readonly "users_url"?: string | undefined;
  readonly "teams_url"?: string | undefined
} | undefined;
  /**
* Allow specific users, teams, or apps to bypass pull request requirements.
*/
readonly "bypass_pull_request_allowances"?: {
  /**
* The list of users allowed to bypass pull request requirements.
*/
readonly "users"?: ReadonlyArray<SimpleUser> | undefined;
  /**
* The list of teams allowed to bypass pull request requirements.
*/
readonly "teams"?: ReadonlyArray<Team> | undefined;
  /**
* The list of apps allowed to bypass pull request requirements.
*/
readonly "apps"?: ReadonlyArray<Integration> | undefined
} | undefined;
  readonly "dismiss_stale_reviews": boolean;
  readonly "require_code_owner_reviews": boolean;
  readonly "required_approving_review_count"?: number | undefined;
  /**
* Whether the most recent push must be approved by someone other than the person who pushed it.
*/
readonly "require_last_push_approval"?: boolean | undefined
}

/**
* Branch Restriction Policy
*/
export interface BranchRestrictionPolicy {
  readonly "url": string;
  readonly "users_url": string;
  readonly "teams_url": string;
  readonly "apps_url": string;
  readonly "users": ReadonlyArray<{
  readonly "login"?: string | undefined;
  readonly "id"?: number | undefined;
  readonly "node_id"?: string | undefined;
  readonly "avatar_url"?: string | undefined;
  readonly "gravatar_id"?: string | undefined;
  readonly "url"?: string | undefined;
  readonly "html_url"?: string | undefined;
  readonly "followers_url"?: string | undefined;
  readonly "following_url"?: string | undefined;
  readonly "gists_url"?: string | undefined;
  readonly "starred_url"?: string | undefined;
  readonly "subscriptions_url"?: string | undefined;
  readonly "organizations_url"?: string | undefined;
  readonly "repos_url"?: string | undefined;
  readonly "events_url"?: string | undefined;
  readonly "received_events_url"?: string | undefined;
  readonly "type"?: string | undefined;
  readonly "site_admin"?: boolean | undefined;
  readonly "user_view_type"?: string | undefined
}>;
  readonly "teams": ReadonlyArray<{
  readonly "id"?: number | undefined;
  readonly "node_id"?: string | undefined;
  readonly "url"?: string | undefined;
  readonly "html_url"?: string | undefined;
  readonly "name"?: string | undefined;
  readonly "slug"?: string | undefined;
  readonly "description"?: string | null | undefined;
  readonly "privacy"?: string | undefined;
  readonly "notification_setting"?: string | undefined;
  readonly "permission"?: string | undefined;
  readonly "members_url"?: string | undefined;
  readonly "repositories_url"?: string | undefined;
  readonly "parent"?: string | null | undefined
}>;
  readonly "apps": ReadonlyArray<{
  readonly "id"?: number | undefined;
  readonly "slug"?: string | undefined;
  readonly "node_id"?: string | undefined;
  readonly "owner"?: {
  readonly "login"?: string | undefined;
  readonly "id"?: number | undefined;
  readonly "node_id"?: string | undefined;
  readonly "url"?: string | undefined;
  readonly "repos_url"?: string | undefined;
  readonly "events_url"?: string | undefined;
  readonly "hooks_url"?: string | undefined;
  readonly "issues_url"?: string | undefined;
  readonly "members_url"?: string | undefined;
  readonly "public_members_url"?: string | undefined;
  readonly "avatar_url"?: string | undefined;
  readonly "description"?: string | undefined;
  readonly "gravatar_id"?: string | undefined;
  readonly "html_url"?: string | undefined;
  readonly "followers_url"?: string | undefined;
  readonly "following_url"?: string | undefined;
  readonly "gists_url"?: string | undefined;
  readonly "starred_url"?: string | undefined;
  readonly "subscriptions_url"?: string | undefined;
  readonly "organizations_url"?: string | undefined;
  readonly "received_events_url"?: string | undefined;
  readonly "type"?: string | undefined;
  readonly "site_admin"?: boolean | undefined;
  readonly "user_view_type"?: string | undefined
} | undefined;
  readonly "name"?: string | undefined;
  readonly "client_id"?: string | undefined;
  readonly "description"?: string | undefined;
  readonly "external_url"?: string | undefined;
  readonly "html_url"?: string | undefined;
  readonly "created_at"?: string | undefined;
  readonly "updated_at"?: string | undefined;
  readonly "permissions"?: {
  readonly "metadata"?: string | undefined;
  readonly "contents"?: string | undefined;
  readonly "issues"?: string | undefined;
  readonly "single_file"?: string | undefined
} | undefined;
  readonly "events"?: ReadonlyArray<string> | undefined
}>
}

/**
* Branch Protection
*/
export interface BranchProtection {
  readonly "url"?: string | undefined;
  readonly "enabled"?: boolean | undefined;
  readonly "required_status_checks"?: ProtectedBranchRequiredStatusCheck | undefined;
  readonly "enforce_admins"?: ProtectedBranchAdminEnforced | undefined;
  readonly "required_pull_request_reviews"?: ProtectedBranchPullRequestReview | undefined;
  readonly "restrictions"?: BranchRestrictionPolicy | undefined;
  readonly "required_linear_history"?: {
  readonly "enabled"?: boolean | undefined
} | undefined;
  readonly "allow_force_pushes"?: {
  readonly "enabled"?: boolean | undefined
} | undefined;
  readonly "allow_deletions"?: {
  readonly "enabled"?: boolean | undefined
} | undefined;
  readonly "block_creations"?: {
  readonly "enabled"?: boolean | undefined
} | undefined;
  readonly "required_conversation_resolution"?: {
  readonly "enabled"?: boolean | undefined
} | undefined;
  readonly "name"?: string | undefined;
  readonly "protection_url"?: string | undefined;
  readonly "required_signatures"?: {
  readonly "url": string;
  readonly "enabled": boolean
} | undefined;
  /**
* Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
*/
readonly "lock_branch"?: {
  readonly "enabled"?: boolean | undefined
} | undefined;
  /**
* Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
*/
readonly "allow_fork_syncing"?: {
  readonly "enabled"?: boolean | undefined
} | undefined
}

/**
* Short Branch
*/
export interface ShortBranch {
  readonly "name": string;
  readonly "commit": {
  readonly "sha": string;
  readonly "url": string
};
  readonly "protected": boolean;
  readonly "protection"?: BranchProtection | undefined;
  readonly "protection_url"?: string | undefined
}

export type ReposListBranches200 = ReadonlyArray<ShortBranch>

export interface ReposGetBranchParams {
  
}

/**
* Metaproperties for Git author/committer information.
*/
export interface NullableGitUser {
  readonly "name"?: string | undefined;
  readonly "email"?: string | undefined;
  readonly "date"?: string | undefined
}

export interface Verification {
  readonly "verified": boolean;
  readonly "reason": string;
  readonly "payload": string | null;
  readonly "signature": string | null;
  readonly "verified_at": string | null
}

export type DiffEntryStatus = "added" | "removed" | "modified" | "renamed" | "copied" | "changed" | "unchanged"

/**
* Diff Entry
*/
export interface DiffEntry {
  readonly "sha": string;
  readonly "filename": string;
  readonly "status": DiffEntryStatus;
  readonly "additions": number;
  readonly "deletions": number;
  readonly "changes": number;
  readonly "blob_url": string;
  readonly "raw_url": string;
  readonly "contents_url": string;
  readonly "patch"?: string | undefined;
  readonly "previous_filename"?: string | undefined
}

/**
* Commit
*/
export interface Commit {
  readonly "url": string;
  readonly "sha": string;
  readonly "node_id": string;
  readonly "html_url": string;
  readonly "comments_url": string;
  readonly "commit": {
  readonly "url": string;
  readonly "author": NullableGitUser | null;
  readonly "committer": NullableGitUser | null;
  readonly "message": string;
  readonly "comment_count": number;
  readonly "tree": {
  readonly "sha": string;
  readonly "url": string
};
  readonly "verification"?: Verification | undefined
};
  readonly "author": SimpleUser | EmptyObject | null;
  readonly "committer": SimpleUser | EmptyObject | null;
  readonly "parents": ReadonlyArray<{
  readonly "sha": string;
  readonly "url": string;
  readonly "html_url"?: string | undefined
}>;
  readonly "stats"?: {
  readonly "additions"?: number | undefined;
  readonly "deletions"?: number | undefined;
  readonly "total"?: number | undefined
} | undefined;
  readonly "files"?: ReadonlyArray<DiffEntry> | undefined
}

/**
* Branch With Protection
*/
export interface BranchWithProtection {
  readonly "name": string;
  readonly "commit": Commit;
  readonly "_links": {
  readonly "html": string;
  readonly "self": string
};
  readonly "protected": boolean;
  readonly "protection": BranchProtection;
  readonly "protection_url": string;
  readonly "pattern"?: string | undefined;
  readonly "required_approving_review_count"?: number | undefined
}

export interface ReposGetBranchProtectionParams {
  
}

export interface ReposUpdateBranchProtectionParams {
  
}

export interface ReposUpdateBranchProtectionRequest {
  /**
* Require status checks to pass before merging. Set to `null` to disable.
*/
readonly "required_status_checks": {
  /**
* Require branches to be up to date before merging.
*/
readonly "strict": boolean;
  /**
* **Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
*/
readonly "contexts": ReadonlyArray<string>;
  /**
* The list of status checks to require in order to merge into this branch.
*/
readonly "checks"?: ReadonlyArray<{
  /**
* The name of the required check
*/
readonly "context": string;
  /**
* The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
*/
readonly "app_id"?: number | undefined
}> | undefined
} | null;
  /**
* Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
*/
readonly "enforce_admins": boolean | null;
  /**
* Require at least one approving review on a pull request, before merging. Set to `null` to disable.
*/
readonly "required_pull_request_reviews": {
  /**
* Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
*/
readonly "dismissal_restrictions"?: {
  /**
* The list of user `login`s with dismissal access
*/
readonly "users"?: ReadonlyArray<string> | undefined;
  /**
* The list of team `slug`s with dismissal access
*/
readonly "teams"?: ReadonlyArray<string> | undefined;
  /**
* The list of app `slug`s with dismissal access
*/
readonly "apps"?: ReadonlyArray<string> | undefined
} | undefined;
  /**
* Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
*/
readonly "dismiss_stale_reviews"?: boolean | undefined;
  /**
* Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them.
*/
readonly "require_code_owner_reviews"?: boolean | undefined;
  /**
* Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
*/
readonly "required_approving_review_count"?: number | undefined;
  /**
* Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.
*/
readonly "require_last_push_approval"?: boolean | undefined;
  /**
* Allow specific users, teams, or apps to bypass pull request requirements.
*/
readonly "bypass_pull_request_allowances"?: {
  /**
* The list of user `login`s allowed to bypass pull request requirements.
*/
readonly "users"?: ReadonlyArray<string> | undefined;
  /**
* The list of team `slug`s allowed to bypass pull request requirements.
*/
readonly "teams"?: ReadonlyArray<string> | undefined;
  /**
* The list of app `slug`s allowed to bypass pull request requirements.
*/
readonly "apps"?: ReadonlyArray<string> | undefined
} | undefined
} | null;
  /**
* Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
*/
readonly "restrictions": {
  /**
* The list of user `login`s with push access
*/
readonly "users": ReadonlyArray<string>;
  /**
* The list of team `slug`s with push access
*/
readonly "teams": ReadonlyArray<string>;
  /**
* The list of app `slug`s with push access
*/
readonly "apps"?: ReadonlyArray<string> | undefined
} | null;
  /**
* Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
*/
readonly "required_linear_history"?: boolean | undefined;
  /**
* Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
*/
readonly "allow_force_pushes"?: boolean | null | undefined;
  /**
* Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
*/
readonly "allow_deletions"?: boolean | undefined;
  /**
* If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`.
*/
readonly "block_creations"?: boolean | undefined;
  /**
* Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.
*/
readonly "required_conversation_resolution"?: boolean | undefined;
  /**
* Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.
*/
readonly "lock_branch"?: boolean | undefined;
  /**
* Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.
*/
readonly "allow_fork_syncing"?: boolean | undefined
}

/**
* Status Check Policy
*/
export interface StatusCheckPolicy {
  readonly "url": string;
  readonly "strict": boolean;
  readonly "contexts": ReadonlyArray<string>;
  readonly "checks": ReadonlyArray<{
  readonly "context": string;
  readonly "app_id": number | null
}>;
  readonly "contexts_url": string
}

/**
* Branch protections protect branches
*/
export interface ProtectedBranch {
  readonly "url": string;
  readonly "required_status_checks"?: StatusCheckPolicy | undefined;
  readonly "required_pull_request_reviews"?: {
  readonly "url": string;
  readonly "dismiss_stale_reviews"?: boolean | undefined;
  readonly "require_code_owner_reviews"?: boolean | undefined;
  readonly "required_approving_review_count"?: number | undefined;
  /**
* Whether the most recent push must be approved by someone other than the person who pushed it.
*/
readonly "require_last_push_approval"?: boolean | undefined;
  readonly "dismissal_restrictions"?: {
  readonly "url": string;
  readonly "users_url": string;
  readonly "teams_url": string;
  readonly "users": ReadonlyArray<SimpleUser>;
  readonly "teams": ReadonlyArray<Team>;
  readonly "apps"?: ReadonlyArray<Integration> | undefined
} | undefined;
  readonly "bypass_pull_request_allowances"?: {
  readonly "users": ReadonlyArray<SimpleUser>;
  readonly "teams": ReadonlyArray<Team>;
  readonly "apps"?: ReadonlyArray<Integration> | undefined
} | undefined
} | undefined;
  readonly "required_signatures"?: {
  readonly "url": string;
  readonly "enabled": boolean
} | undefined;
  readonly "enforce_admins"?: {
  readonly "url": string;
  readonly "enabled": boolean
} | undefined;
  readonly "required_linear_history"?: {
  readonly "enabled": boolean
} | undefined;
  readonly "allow_force_pushes"?: {
  readonly "enabled": boolean
} | undefined;
  readonly "allow_deletions"?: {
  readonly "enabled": boolean
} | undefined;
  readonly "restrictions"?: BranchRestrictionPolicy | undefined;
  readonly "required_conversation_resolution"?: {
  readonly "enabled"?: boolean | undefined
} | undefined;
  readonly "block_creations"?: {
  readonly "enabled": boolean
} | undefined;
  /**
* Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
*/
readonly "lock_branch"?: {
  readonly "enabled"?: boolean | undefined
} | undefined;
  /**
* Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
*/
readonly "allow_fork_syncing"?: {
  readonly "enabled"?: boolean | undefined
} | undefined
}

export interface ReposDeleteBranchProtectionParams {
  
}

export interface ReposGetAdminBranchProtectionParams {
  
}

export interface ReposSetAdminBranchProtectionParams {
  
}

export interface ReposDeleteAdminBranchProtectionParams {
  
}

export interface ReposGetPullRequestReviewProtectionParams {
  
}

export interface ReposDeletePullRequestReviewProtectionParams {
  
}

export interface ReposUpdatePullRequestReviewProtectionParams {
  
}

export interface ReposUpdatePullRequestReviewProtectionRequest {
  /**
* Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
*/
readonly "dismissal_restrictions"?: {
  /**
* The list of user `login`s with dismissal access
*/
readonly "users"?: ReadonlyArray<string> | undefined;
  /**
* The list of team `slug`s with dismissal access
*/
readonly "teams"?: ReadonlyArray<string> | undefined;
  /**
* The list of app `slug`s with dismissal access
*/
readonly "apps"?: ReadonlyArray<string> | undefined
} | undefined;
  /**
* Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
*/
readonly "dismiss_stale_reviews"?: boolean | undefined;
  /**
* Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.
*/
readonly "require_code_owner_reviews"?: boolean | undefined;
  /**
* Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
*/
readonly "required_approving_review_count"?: number | undefined;
  /**
* Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`
*/
readonly "require_last_push_approval"?: boolean | undefined;
  /**
* Allow specific users, teams, or apps to bypass pull request requirements.
*/
readonly "bypass_pull_request_allowances"?: {
  /**
* The list of user `login`s allowed to bypass pull request requirements.
*/
readonly "users"?: ReadonlyArray<string> | undefined;
  /**
* The list of team `slug`s allowed to bypass pull request requirements.
*/
readonly "teams"?: ReadonlyArray<string> | undefined;
  /**
* The list of app `slug`s allowed to bypass pull request requirements.
*/
readonly "apps"?: ReadonlyArray<string> | undefined
} | undefined
}

export interface ReposGetCommitSignatureProtectionParams {
  
}

export interface ReposCreateCommitSignatureProtectionParams {
  
}

export interface ReposDeleteCommitSignatureProtectionParams {
  
}

export interface ReposGetStatusChecksProtectionParams {
  
}

export interface ReposRemoveStatusCheckProtectionParams {
  
}

export interface ReposUpdateStatusCheckProtectionParams {
  
}

export interface ReposUpdateStatusCheckProtectionRequest {
  /**
* Require branches to be up to date before merging.
*/
readonly "strict"?: boolean | undefined;
  /**
* **Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
*/
readonly "contexts"?: ReadonlyArray<string> | undefined;
  /**
* The list of status checks to require in order to merge into this branch.
*/
readonly "checks"?: ReadonlyArray<{
  /**
* The name of the required check
*/
readonly "context": string;
  /**
* The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
*/
readonly "app_id"?: number | undefined
}> | undefined
}

export interface ReposGetAllStatusCheckContextsParams {
  
}

export type ReposGetAllStatusCheckContexts200 = ReadonlyArray<string>

export interface ReposSetStatusCheckContextsParams {
  
}

export const ReposSetStatusCheckContextsRequest = {
  /**
* The name of the status checks
*/
readonly "contexts": ReadonlyArray<string>
} | ReadonlyArray<string>;
export type ReposSetStatusCheckContextsRequest = (typeof ReposSetStatusCheckContextsRequest)[keyof typeof ReposSetStatusCheckContextsRequest];

export type ReposSetStatusCheckContexts200 = ReadonlyArray<string>

export interface ReposAddStatusCheckContextsParams {
  
}

export const ReposAddStatusCheckContextsRequest = {
  /**
* The name of the status checks
*/
readonly "contexts": ReadonlyArray<string>
} | ReadonlyArray<string>;
export type ReposAddStatusCheckContextsRequest = (typeof ReposAddStatusCheckContextsRequest)[keyof typeof ReposAddStatusCheckContextsRequest];

export type ReposAddStatusCheckContexts200 = ReadonlyArray<string>

export interface ReposRemoveStatusCheckContextsParams {
  
}

export const ReposRemoveStatusCheckContextsRequest = {
  /**
* The name of the status checks
*/
readonly "contexts": ReadonlyArray<string>
} | ReadonlyArray<string>;
export type ReposRemoveStatusCheckContextsRequest = (typeof ReposRemoveStatusCheckContextsRequest)[keyof typeof ReposRemoveStatusCheckContextsRequest];

export type ReposRemoveStatusCheckContexts200 = ReadonlyArray<string>

export interface ReposGetAccessRestrictionsParams {
  
}

export interface ReposDeleteAccessRestrictionsParams {
  
}

export interface ReposGetAppsWithAccessToProtectedBranchParams {
  
}

export type ReposGetAppsWithAccessToProtectedBranch200 = ReadonlyArray<Integration>

export interface ReposSetAppAccessRestrictionsParams {
  
}

export interface ReposSetAppAccessRestrictionsRequest {
  /**
* The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
*/
readonly "apps": ReadonlyArray<string>
}

export type ReposSetAppAccessRestrictions200 = ReadonlyArray<Integration>

export interface ReposAddAppAccessRestrictionsParams {
  
}

export interface ReposAddAppAccessRestrictionsRequest {
  /**
* The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
*/
readonly "apps": ReadonlyArray<string>
}

export type ReposAddAppAccessRestrictions200 = ReadonlyArray<Integration>

export interface ReposRemoveAppAccessRestrictionsParams {
  
}

export interface ReposRemoveAppAccessRestrictionsRequest {
  /**
* The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
*/
readonly "apps": ReadonlyArray<string>
}

export type ReposRemoveAppAccessRestrictions200 = ReadonlyArray<Integration>

export interface ReposGetTeamsWithAccessToProtectedBranchParams {
  
}

export type ReposGetTeamsWithAccessToProtectedBranch200 = ReadonlyArray<Team>

export interface ReposSetTeamAccessRestrictionsParams {
  
}

export const ReposSetTeamAccessRestrictionsRequest = {
  /**
* The slug values for teams
*/
readonly "teams": ReadonlyArray<string>
} | ReadonlyArray<string>;
export type ReposSetTeamAccessRestrictionsRequest = (typeof ReposSetTeamAccessRestrictionsRequest)[keyof typeof ReposSetTeamAccessRestrictionsRequest];

export type ReposSetTeamAccessRestrictions200 = ReadonlyArray<Team>

export interface ReposAddTeamAccessRestrictionsParams {
  
}

export const ReposAddTeamAccessRestrictionsRequest = {
  /**
* The slug values for teams
*/
readonly "teams": ReadonlyArray<string>
} | ReadonlyArray<string>;
export type ReposAddTeamAccessRestrictionsRequest = (typeof ReposAddTeamAccessRestrictionsRequest)[keyof typeof ReposAddTeamAccessRestrictionsRequest];

export type ReposAddTeamAccessRestrictions200 = ReadonlyArray<Team>

export interface ReposRemoveTeamAccessRestrictionsParams {
  
}

export const ReposRemoveTeamAccessRestrictionsRequest = {
  /**
* The slug values for teams
*/
readonly "teams": ReadonlyArray<string>
} | ReadonlyArray<string>;
export type ReposRemoveTeamAccessRestrictionsRequest = (typeof ReposRemoveTeamAccessRestrictionsRequest)[keyof typeof ReposRemoveTeamAccessRestrictionsRequest];

export type ReposRemoveTeamAccessRestrictions200 = ReadonlyArray<Team>

export interface ReposGetUsersWithAccessToProtectedBranchParams {
  
}

export type ReposGetUsersWithAccessToProtectedBranch200 = ReadonlyArray<SimpleUser>

export interface ReposSetUserAccessRestrictionsParams {
  
}

export interface ReposSetUserAccessRestrictionsRequest {
  /**
* The username for users
*/
readonly "users": ReadonlyArray<string>
}

export type ReposSetUserAccessRestrictions200 = ReadonlyArray<SimpleUser>

export interface ReposAddUserAccessRestrictionsParams {
  
}

export interface ReposAddUserAccessRestrictionsRequest {
  /**
* The username for users
*/
readonly "users": ReadonlyArray<string>
}

export type ReposAddUserAccessRestrictions200 = ReadonlyArray<SimpleUser>

export interface ReposRemoveUserAccessRestrictionsParams {
  
}

export interface ReposRemoveUserAccessRestrictionsRequest {
  /**
* The username for users
*/
readonly "users": ReadonlyArray<string>
}

export type ReposRemoveUserAccessRestrictions200 = ReadonlyArray<SimpleUser>

export interface ReposRenameBranchParams {
  
}

export interface ReposRenameBranchRequest {
  /**
* The new name of the branch.
*/
readonly "new_name": string
}

export interface ChecksCreateParams {
  
}

/**
* The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
*/
export type ChecksCreateRequestStatus = "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending"

/**
* **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. 
* **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
*/
export type ChecksCreateRequestConclusion = "action_required" | "cancelled" | "failure" | "neutral" | "success" | "skipped" | "stale" | "timed_out"

export const ChecksCreateRequest = {
  /**
* The name of the check. For example, "code-coverage".
*/
readonly "name": string;
  /**
* The SHA of the commit.
*/
readonly "head_sha": string;
  /**
* The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.
*/
readonly "details_url"?: string | undefined;
  /**
* A reference for the run on the integrator's system.
*/
readonly "external_id"?: string | undefined;
  /**
* The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
*/
readonly "status"?: ChecksCreateRequestStatus | undefined;
  /**
* The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
readonly "started_at"?: string | undefined;
  /**
* **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. 
* **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
*/
readonly "conclusion"?: ChecksCreateRequestConclusion | undefined;
  /**
* The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
readonly "completed_at"?: string | undefined;
  /**
* Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.
*/
readonly "output"?: {
  /**
* The title of the check run.
*/
readonly "title": string;
  /**
* The summary of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.
*/
readonly "summary": string;
  /**
* The details of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.
*/
readonly "text"?: string | undefined;
  /**
* Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/checks/runs#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. GitHub Actions are limited to 10 warning annotations and 10 error annotations per step. For details about how you can view annotations on GitHub, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)".
*/
readonly "annotations"?: ReadonlyArray<{
  /**
* The path of the file to add an annotation to. For example, `assets/css/main.css`.
*/
readonly "path": string;
  /**
* The start line of the annotation. Line numbers start at 1.
*/
readonly "start_line": number;
  /**
* The end line of the annotation.
*/
readonly "end_line": number;
  /**
* The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1.
*/
readonly "start_column"?: number | undefined;
  /**
* The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
*/
readonly "end_column"?: number | undefined;
  /**
* The level of the annotation.
*/
readonly "annotation_level": "notice" | "warning" | "failure";
  /**
* A short description of the feedback for these lines of code. The maximum size is 64 KB.
*/
readonly "message": string;
  /**
* The title that represents the annotation. The maximum size is 255 characters.
*/
readonly "title"?: string | undefined;
  /**
* Details about this annotation. The maximum size is 64 KB.
*/
readonly "raw_details"?: string | undefined
}> | undefined;
  /**
* Adds images to the output displayed in the GitHub pull request UI.
*/
readonly "images"?: ReadonlyArray<{
  /**
* The alternative text for the image.
*/
readonly "alt": string;
  /**
* The full URL of the image.
*/
readonly "image_url": string;
  /**
* A short image description.
*/
readonly "caption"?: string | undefined
}> | undefined
} | undefined;
  /**
* Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions)."
*/
readonly "actions"?: ReadonlyArray<{
  /**
* The text to be displayed on a button in the web UI. The maximum size is 20 characters.
*/
readonly "label": string;
  /**
* A short explanation of what this action would do. The maximum size is 40 characters.
*/
readonly "description": string;
  /**
* A reference for the action on the integrator's system. The maximum size is 20 characters.
*/
readonly "identifier": string
}> | undefined
};
export type ChecksCreateRequest = (typeof ChecksCreateRequest)[keyof typeof ChecksCreateRequest];

/**
* The phase of the lifecycle that the check is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check runs.
*/
export type CheckRunStatus = "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending"

export type CheckRunConclusion = "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required"

/**
* A deployment created as the result of an Actions check run from a workflow that references an environment
*/
export interface DeploymentSimple {
  readonly "url": string;
  /**
* Unique identifier of the deployment
*/
readonly "id": number;
  readonly "node_id": string;
  /**
* Parameter to specify a task to execute
*/
readonly "task": string;
  readonly "original_environment"?: string | undefined;
  /**
* Name for the target deployment environment.
*/
readonly "environment": string;
  readonly "description": string | null;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "statuses_url": string;
  readonly "repository_url": string;
  /**
* Specifies if the given environment is will no longer exist at some point in the future. Default: false.
*/
readonly "transient_environment"?: boolean | undefined;
  /**
* Specifies if the given environment is one that end-users directly interact with. Default: false.
*/
readonly "production_environment"?: boolean | undefined;
  readonly "performed_via_github_app"?: NullableIntegration | null | undefined
}

/**
* A check performed on the code of a given code change
*/
export interface CheckRun {
  /**
* The id of the check.
*/
readonly "id": number;
  /**
* The SHA of the commit that is being checked.
*/
readonly "head_sha": string;
  readonly "node_id": string;
  readonly "external_id": string | null;
  readonly "url": string;
  readonly "html_url": string | null;
  readonly "details_url": string | null;
  /**
* The phase of the lifecycle that the check is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check runs.
*/
readonly "status": CheckRunStatus;
  readonly "conclusion": CheckRunConclusion | null;
  readonly "started_at": string | null;
  readonly "completed_at": string | null;
  readonly "output": {
  readonly "title": string | null;
  readonly "summary": string | null;
  readonly "text": string | null;
  readonly "annotations_count": number;
  readonly "annotations_url": string
};
  /**
* The name of the check.
*/
readonly "name": string;
  readonly "check_suite": {
  readonly "id": number
} | null;
  readonly "app": NullableIntegration | null;
  /**
* Pull requests that are open with a `head_sha` or `head_branch` that matches the check. The returned pull requests do not necessarily indicate pull requests that triggered the check.
*/
readonly "pull_requests": ReadonlyArray<PullRequestMinimal>;
  readonly "deployment"?: DeploymentSimple | undefined
}

export interface ChecksGetParams {
  
}

export interface ChecksUpdateParams {
  
}

/**
* The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
*/
export type ChecksUpdateRequestStatus = "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending"

/**
* **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. 
* **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
*/
export type ChecksUpdateRequestConclusion = "action_required" | "cancelled" | "failure" | "neutral" | "success" | "skipped" | "stale" | "timed_out"

export interface ChecksUpdateRequest {
  /**
* The name of the check. For example, "code-coverage".
*/
readonly "name"?: string | undefined;
  /**
* The URL of the integrator's site that has the full details of the check.
*/
readonly "details_url"?: string | undefined;
  /**
* A reference for the run on the integrator's system.
*/
readonly "external_id"?: string | undefined;
  /**
* This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
readonly "started_at"?: string | undefined;
  /**
* The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
*/
readonly "status"?: ChecksUpdateRequestStatus | undefined;
  /**
* **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. 
* **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
*/
readonly "conclusion"?: ChecksUpdateRequestConclusion | undefined;
  /**
* The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
readonly "completed_at"?: string | undefined;
  /**
* Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.
*/
readonly "output"?: {
  /**
* **Required**.
*/
readonly "title"?: string | undefined;
  /**
* Can contain Markdown.
*/
readonly "summary": string;
  /**
* Can contain Markdown.
*/
readonly "text"?: string | undefined;
  /**
* Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/checks/runs#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. GitHub Actions are limited to 10 warning annotations and 10 error annotations per step. For details about annotations in the UI, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)".
*/
readonly "annotations"?: ReadonlyArray<{
  /**
* The path of the file to add an annotation to. For example, `assets/css/main.css`.
*/
readonly "path": string;
  /**
* The start line of the annotation. Line numbers start at 1.
*/
readonly "start_line": number;
  /**
* The end line of the annotation.
*/
readonly "end_line": number;
  /**
* The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1.
*/
readonly "start_column"?: number | undefined;
  /**
* The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
*/
readonly "end_column"?: number | undefined;
  /**
* The level of the annotation.
*/
readonly "annotation_level": "notice" | "warning" | "failure";
  /**
* A short description of the feedback for these lines of code. The maximum size is 64 KB.
*/
readonly "message": string;
  /**
* The title that represents the annotation. The maximum size is 255 characters.
*/
readonly "title"?: string | undefined;
  /**
* Details about this annotation. The maximum size is 64 KB.
*/
readonly "raw_details"?: string | undefined
}> | undefined;
  /**
* Adds images to the output displayed in the GitHub pull request UI.
*/
readonly "images"?: ReadonlyArray<{
  /**
* The alternative text for the image.
*/
readonly "alt": string;
  /**
* The full URL of the image.
*/
readonly "image_url": string;
  /**
* A short image description.
*/
readonly "caption"?: string | undefined
}> | undefined
} | undefined;
  /**
* Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions)."
*/
readonly "actions"?: ReadonlyArray<{
  /**
* The text to be displayed on a button in the web UI. The maximum size is 20 characters.
*/
readonly "label": string;
  /**
* A short explanation of what this action would do. The maximum size is 40 characters.
*/
readonly "description": string;
  /**
* A reference for the action on the integrator's system. The maximum size is 20 characters.
*/
readonly "identifier": string
}> | undefined
}

export interface ChecksListAnnotationsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Check Annotation
*/
export interface CheckAnnotation {
  readonly "path": string;
  readonly "start_line": number;
  readonly "end_line": number;
  readonly "start_column": number | null;
  readonly "end_column": number | null;
  readonly "annotation_level": string | null;
  readonly "title": string | null;
  readonly "message": string | null;
  readonly "raw_details": string | null;
  readonly "blob_href": string
}

export type ChecksListAnnotations200 = ReadonlyArray<CheckAnnotation>

export interface ChecksRerequestRunParams {
  
}

export interface ChecksCreateSuiteParams {
  
}

export interface ChecksCreateSuiteRequest {
  /**
* The sha of the head commit.
*/
readonly "head_sha": string
}

/**
* The phase of the lifecycle that the check suite is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check suites.
*/
export type CheckSuiteStatus = "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending"

export type CheckSuiteConclusion = "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required" | "startup_failure" | "stale" | null

/**
* A commit.
*/
export interface SimpleCommit {
  /**
* SHA for the commit
*/
readonly "id": string;
  /**
* SHA for the commit's tree
*/
readonly "tree_id": string;
  /**
* Message describing the purpose of the commit
*/
readonly "message": string;
  /**
* Timestamp of the commit
*/
readonly "timestamp": string;
  /**
* Information about the Git author
*/
readonly "author": {
  /**
* Name of the commit's author
*/
readonly "name": string;
  /**
* Git email address of the commit's author
*/
readonly "email": string
} | null;
  /**
* Information about the Git committer
*/
readonly "committer": {
  /**
* Name of the commit's committer
*/
readonly "name": string;
  /**
* Git email address of the commit's committer
*/
readonly "email": string
} | null
}

/**
* A suite of checks performed on the code of a given code change
*/
export interface CheckSuite {
  readonly "id": number;
  readonly "node_id": string;
  readonly "head_branch": string | null;
  /**
* The SHA of the head commit that is being checked.
*/
readonly "head_sha": string;
  /**
* The phase of the lifecycle that the check suite is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check suites.
*/
readonly "status": CheckSuiteStatus | null;
  readonly "conclusion": CheckSuiteConclusion | null;
  readonly "url": string | null;
  readonly "before": string | null;
  readonly "after": string | null;
  readonly "pull_requests": ReadonlyArray<PullRequestMinimal> | null;
  readonly "app": NullableIntegration | null;
  readonly "repository": MinimalRepository;
  readonly "created_at": string | null;
  readonly "updated_at": string | null;
  readonly "head_commit": SimpleCommit;
  readonly "latest_check_runs_count": number;
  readonly "check_runs_url": string;
  readonly "rerequestable"?: boolean | undefined;
  readonly "runs_rerequestable"?: boolean | undefined
}

export interface ChecksSetSuitesPreferencesParams {
  
}

export interface ChecksSetSuitesPreferencesRequest {
  /**
* Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default.
*/
readonly "auto_trigger_checks"?: ReadonlyArray<{
  /**
* The `id` of the GitHub App.
*/
readonly "app_id": number;
  /**
* Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
*/
readonly "setting": boolean
}> | undefined
}

/**
* Check suite configuration preferences for a repository.
*/
export interface CheckSuitePreference {
  readonly "preferences": {
  readonly "auto_trigger_checks"?: ReadonlyArray<{
  readonly "app_id": number;
  readonly "setting": boolean
}> | undefined
};
  readonly "repository": MinimalRepository
}

export interface ChecksGetSuiteParams {
  
}

export type ChecksListForSuiteParamsStatus = "queued" | "in_progress" | "completed"

export type ChecksListForSuiteParamsFilter = "latest" | "all"

export interface ChecksListForSuiteParams {
  readonly "check_name"?: string | undefined;
  readonly "status"?: ChecksListForSuiteParamsStatus | undefined;
  readonly "filter"?: ChecksListForSuiteParamsFilter | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface ChecksListForSuite200 {
  readonly "total_count": number;
  readonly "check_runs": ReadonlyArray<CheckRun>
}

export interface ChecksRerequestSuiteParams {
  
}

export type CodeScanningListAlertsForRepoParamsDirection = "asc" | "desc"

export type CodeScanningListAlertsForRepoParamsSort = "created" | "updated"

export interface CodeScanningListAlertsForRepoParams {
  readonly "tool_name"?: CodeScanningAnalysisToolName | undefined;
  readonly "tool_guid"?: CodeScanningAnalysisToolGuid | null | undefined;
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined;
  readonly "ref"?: CodeScanningRef | undefined;
  readonly "pr"?: number | undefined;
  readonly "direction"?: CodeScanningListAlertsForRepoParamsDirection | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined;
  readonly "sort"?: CodeScanningListAlertsForRepoParamsSort | undefined;
  readonly "state"?: CodeScanningAlertStateQuery | undefined;
  readonly "severity"?: CodeScanningAlertSeverity | undefined
}

export interface CodeScanningAlertItems {
  readonly "number": AlertNumber;
  readonly "created_at": AlertCreatedAt;
  readonly "updated_at"?: AlertUpdatedAt | undefined;
  readonly "url": AlertUrl;
  readonly "html_url": AlertHtmlUrl;
  readonly "instances_url": AlertInstancesUrl;
  readonly "state": CodeScanningAlertState | null;
  readonly "fixed_at"?: AlertFixedAt | null | undefined;
  readonly "dismissed_by": NullableSimpleUser | null;
  readonly "dismissed_at": AlertDismissedAt | null;
  readonly "dismissed_reason": CodeScanningAlertDismissedReason | null;
  readonly "dismissed_comment"?: CodeScanningAlertDismissedComment | null | undefined;
  readonly "rule": CodeScanningAlertRuleSummary;
  readonly "tool": CodeScanningAnalysisTool;
  readonly "most_recent_instance": CodeScanningAlertInstance;
  readonly "dismissal_approved_by"?: NullableSimpleUser | null | undefined
}

export type CodeScanningListAlertsForRepo200 = ReadonlyArray<CodeScanningAlertItems>

export interface CodeScanningListAlertsForRepo503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodeScanningGetAlertParams {
  
}

/**
* The severity of the alert.
*/
export type CodeScanningAlertRuleSeverity = "none" | "note" | "warning" | "error"

/**
* The security severity of the alert.
*/
export type CodeScanningAlertRuleSecuritySeverityLevel = "low" | "medium" | "high" | "critical"

export interface CodeScanningAlertRule {
  /**
* A unique identifier for the rule used to detect the alert.
*/
readonly "id"?: string | null | undefined;
  /**
* The name of the rule used to detect the alert.
*/
readonly "name"?: string | undefined;
  /**
* The severity of the alert.
*/
readonly "severity"?: CodeScanningAlertRuleSeverity | null | undefined;
  /**
* The security severity of the alert.
*/
readonly "security_severity_level"?: CodeScanningAlertRuleSecuritySeverityLevel | null | undefined;
  /**
* A short description of the rule used to detect the alert.
*/
readonly "description"?: string | undefined;
  /**
* A description of the rule used to detect the alert.
*/
readonly "full_description"?: string | undefined;
  /**
* A set of tags applicable for the rule.
*/
readonly "tags"?: ReadonlyArray<string> | null | undefined;
  /**
* Detailed documentation for the rule as GitHub Flavored Markdown.
*/
readonly "help"?: string | null | undefined;
  /**
* A link to the documentation for the rule used to detect the alert.
*/
readonly "help_uri"?: string | null | undefined
}

export interface CodeScanningAlert {
  readonly "number": AlertNumber;
  readonly "created_at": AlertCreatedAt;
  readonly "updated_at"?: AlertUpdatedAt | undefined;
  readonly "url": AlertUrl;
  readonly "html_url": AlertHtmlUrl;
  readonly "instances_url": AlertInstancesUrl;
  readonly "state": CodeScanningAlertState | null;
  readonly "fixed_at"?: AlertFixedAt | null | undefined;
  readonly "dismissed_by": NullableSimpleUser | null;
  readonly "dismissed_at": AlertDismissedAt | null;
  readonly "dismissed_reason": CodeScanningAlertDismissedReason | null;
  readonly "dismissed_comment"?: CodeScanningAlertDismissedComment | null | undefined;
  readonly "rule": CodeScanningAlertRule;
  readonly "tool": CodeScanningAnalysisTool;
  readonly "most_recent_instance": CodeScanningAlertInstance;
  readonly "dismissal_approved_by"?: NullableSimpleUser | null | undefined
}

export interface CodeScanningGetAlert503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodeScanningUpdateAlertParams {
  
}

/**
* Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.
*/
export type CodeScanningAlertSetState = "open" | "dismissed"

/**
* If `true`, attempt to create an alert dismissal request.
*/
export type CodeScanningAlertCreateRequest = boolean

export interface CodeScanningUpdateAlertRequest {
  readonly "state": CodeScanningAlertSetState;
  readonly "dismissed_reason"?: CodeScanningAlertDismissedReason | null | undefined;
  readonly "dismissed_comment"?: CodeScanningAlertDismissedComment | null | undefined;
  readonly "create_request"?: CodeScanningAlertCreateRequest | undefined
}

export interface CodeScanningUpdateAlert503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodeScanningGetAutofixParams {
  
}

/**
* The status of an autofix.
*/
export type CodeScanningAutofixStatus = "pending" | "error" | "success" | "outdated"

/**
* The description of an autofix.
*/
export type CodeScanningAutofixDescription = string

/**
* The start time of an autofix in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
export type CodeScanningAutofixStartedAt = string

export interface CodeScanningAutofix {
  readonly "status": CodeScanningAutofixStatus;
  readonly "description": CodeScanningAutofixDescription | null;
  readonly "started_at": CodeScanningAutofixStartedAt
}

export interface CodeScanningGetAutofix503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodeScanningCreateAutofixParams {
  
}

export interface CodeScanningCreateAutofix503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodeScanningCommitAutofixParams {
  
}

/**
* Commit an autofix for a code scanning alert
*/
export interface CodeScanningAutofixCommits {
  /**
* The Git reference of target branch for the commit. Branch needs to already exist.  For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
*/
readonly "target_ref"?: string | undefined;
  /**
* Commit message to be used.
*/
readonly "message"?: string | undefined
}

export interface CodeScanningAutofixCommitsResponse {
  /**
* The Git reference of target branch for the commit. For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
*/
readonly "target_ref"?: string | undefined;
  /**
* SHA of commit with autofix.
*/
readonly "sha"?: string | undefined
}

export interface CodeScanningCommitAutofix503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodeScanningListAlertInstancesParams {
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined;
  readonly "ref"?: CodeScanningRef | undefined;
  readonly "pr"?: number | undefined
}

export type CodeScanningListAlertInstances200 = ReadonlyArray<CodeScanningAlertInstance>

export interface CodeScanningListAlertInstances503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

/**
* An identifier for the upload.
*/
export type CodeScanningAnalysisSarifId = string

export type CodeScanningListRecentAnalysesParamsDirection = "asc" | "desc"

export type CodeScanningListRecentAnalysesParamsSort = "created"

export interface CodeScanningListRecentAnalysesParams {
  readonly "tool_name"?: CodeScanningAnalysisToolName | undefined;
  readonly "tool_guid"?: CodeScanningAnalysisToolGuid | null | undefined;
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined;
  readonly "pr"?: number | undefined;
  readonly "ref"?: CodeScanningRef | undefined;
  readonly "sarif_id"?: CodeScanningAnalysisSarifId | undefined;
  readonly "direction"?: CodeScanningListRecentAnalysesParamsDirection | undefined;
  readonly "sort"?: CodeScanningListRecentAnalysesParamsSort | undefined
}

/**
* The SHA of the commit to which the analysis you are uploading relates.
*/
export type CodeScanningAnalysisCommitSha = string

/**
* Identifies the variable values associated with the environment in which this analysis was performed.
*/
export type CodeScanningAnalysisEnvironment = string

/**
* The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
export type CodeScanningAnalysisCreatedAt = string

/**
* The REST API URL of the analysis resource.
*/
export type CodeScanningAnalysisUrl = string

export interface CodeScanningAnalysis {
  readonly "ref": CodeScanningRef;
  readonly "commit_sha": CodeScanningAnalysisCommitSha;
  readonly "analysis_key": CodeScanningAnalysisAnalysisKey;
  readonly "environment": CodeScanningAnalysisEnvironment;
  readonly "category"?: CodeScanningAnalysisCategory | undefined;
  readonly "error": string;
  readonly "created_at": CodeScanningAnalysisCreatedAt;
  /**
* The total number of results in the analysis.
*/
readonly "results_count": number;
  /**
* The total number of rules used in the analysis.
*/
readonly "rules_count": number;
  /**
* Unique identifier for this analysis.
*/
readonly "id": number;
  readonly "url": CodeScanningAnalysisUrl;
  readonly "sarif_id": CodeScanningAnalysisSarifId;
  readonly "tool": CodeScanningAnalysisTool;
  readonly "deletable": boolean;
  /**
* Warning generated when processing the analysis
*/
readonly "warning": string
}

export type CodeScanningListRecentAnalyses200 = ReadonlyArray<CodeScanningAnalysis>

export interface CodeScanningListRecentAnalyses503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodeScanningGetAnalysisParams {
  
}

export interface CodeScanningGetAnalysis503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodeScanningDeleteAnalysisParams {
  readonly "confirm_delete"?: string | null | undefined
}

/**
* Successful deletion of a code scanning analysis
*/
export interface CodeScanningAnalysisDeletion {
  /**
* Next deletable analysis in chain, without last analysis deletion confirmation
*/
readonly "next_analysis_url": string | null;
  /**
* Next deletable analysis in chain, with last analysis deletion confirmation
*/
readonly "confirm_delete_url": string | null
}

export interface CodeScanningDeleteAnalysis503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodeScanningListCodeqlDatabasesParams {
  
}

/**
* A CodeQL database.
*/
export interface CodeScanningCodeqlDatabase {
  /**
* The ID of the CodeQL database.
*/
readonly "id": number;
  /**
* The name of the CodeQL database.
*/
readonly "name": string;
  /**
* The language of the CodeQL database.
*/
readonly "language": string;
  readonly "uploader": SimpleUser;
  /**
* The MIME type of the CodeQL database file.
*/
readonly "content_type": string;
  /**
* The size of the CodeQL database file in bytes.
*/
readonly "size": number;
  /**
* The date and time at which the CodeQL database was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
readonly "created_at": string;
  /**
* The date and time at which the CodeQL database was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
readonly "updated_at": string;
  /**
* The URL at which to download the CodeQL database. The `Accept` header must be set to the value of the `content_type` property.
*/
readonly "url": string;
  /**
* The commit SHA of the repository at the time the CodeQL database was created.
*/
readonly "commit_oid"?: string | null | undefined
}

export type CodeScanningListCodeqlDatabases200 = ReadonlyArray<CodeScanningCodeqlDatabase>

export interface CodeScanningListCodeqlDatabases503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodeScanningGetCodeqlDatabaseParams {
  
}

export interface CodeScanningGetCodeqlDatabase503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodeScanningDeleteCodeqlDatabaseParams {
  
}

export interface CodeScanningDeleteCodeqlDatabase503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodeScanningCreateVariantAnalysisParams {
  
}

/**
* The language targeted by the CodeQL query
*/
export type CodeScanningVariantAnalysisLanguage = "cpp" | "csharp" | "go" | "java" | "javascript" | "python" | "ruby" | "rust" | "swift"

export const CodeScanningCreateVariantAnalysisRequest = {
  readonly "language": CodeScanningVariantAnalysisLanguage;
  /**
* A Base64-encoded tarball containing a CodeQL query and all its dependencies
*/
readonly "query_pack": string;
  /**
* List of repository names (in the form `owner/repo-name`) to run the query against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.
*/
readonly "repositories"?: ReadonlyArray<string> | undefined;
  /**
* List of repository lists to run the query against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.
*/
readonly "repository_lists"?: ReadonlyArray<string> | undefined;
  /**
* List of organization or user names whose repositories the query should be run against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.
*/
readonly "repository_owners"?: ReadonlyArray<string> | undefined
};
export type CodeScanningCreateVariantAnalysisRequest = (typeof CodeScanningCreateVariantAnalysisRequest)[keyof typeof CodeScanningCreateVariantAnalysisRequest];

export type CodeScanningVariantAnalysisStatus = "in_progress" | "succeeded" | "failed" | "cancelled"

/**
* The reason for a failure of the variant analysis. This is only available if the variant analysis has failed.
*/
export type CodeScanningVariantAnalysisFailureReason = "no_repos_queried" | "actions_workflow_run_failed" | "internal_error"

/**
* Repository Identifier
*/
export interface CodeScanningVariantAnalysisRepository {
  /**
* A unique identifier of the repository.
*/
readonly "id": number;
  /**
* The name of the repository.
*/
readonly "name": string;
  /**
* The full, globally unique, name of the repository.
*/
readonly "full_name": string;
  /**
* Whether the repository is private.
*/
readonly "private": boolean;
  readonly "stargazers_count": number;
  readonly "updated_at": string | null
}

export interface CodeScanningVariantAnalysisSkippedRepoGroup {
  /**
* The total number of repositories that were skipped for this reason.
*/
readonly "repository_count": number;
  /**
* A list of repositories that were skipped. This list may not include all repositories that were skipped. This is only available when the repository was found and the user has access to it.
*/
readonly "repositories": ReadonlyArray<CodeScanningVariantAnalysisRepository>
}

/**
* A run of a CodeQL query against one or more repositories.
*/
export interface CodeScanningVariantAnalysis {
  /**
* The ID of the variant analysis.
*/
readonly "id": number;
  readonly "controller_repo": SimpleRepository;
  readonly "actor": SimpleUser;
  readonly "query_language": CodeScanningVariantAnalysisLanguage;
  /**
* The download url for the query pack.
*/
readonly "query_pack_url": string;
  /**
* The date and time at which the variant analysis was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
readonly "created_at"?: string | undefined;
  /**
* The date and time at which the variant analysis was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
readonly "updated_at"?: string | undefined;
  /**
* The date and time at which the variant analysis was completed, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ. Will be null if the variant analysis has not yet completed or this information is not available.
*/
readonly "completed_at"?: string | null | undefined;
  readonly "status": CodeScanningVariantAnalysisStatus;
  /**
* The GitHub Actions workflow run used to execute this variant analysis. This is only available if the workflow run has started.
*/
readonly "actions_workflow_run_id"?: number | undefined;
  /**
* The reason for a failure of the variant analysis. This is only available if the variant analysis has failed.
*/
readonly "failure_reason"?: CodeScanningVariantAnalysisFailureReason | undefined;
  readonly "scanned_repositories"?: ReadonlyArray<{
  readonly "repository": CodeScanningVariantAnalysisRepository;
  readonly "analysis_status": CodeScanningVariantAnalysisStatus;
  /**
* The number of results in the case of a successful analysis. This is only available for successful analyses.
*/
readonly "result_count"?: number | undefined;
  /**
* The size of the artifact. This is only available for successful analyses.
*/
readonly "artifact_size_in_bytes"?: number | undefined;
  /**
* The reason of the failure of this repo task. This is only available if the repository task has failed.
*/
readonly "failure_message"?: string | undefined
}> | undefined;
  /**
* Information about repositories that were skipped from processing. This information is only available to the user that initiated the variant analysis.
*/
readonly "skipped_repositories"?: {
  readonly "access_mismatch_repos": CodeScanningVariantAnalysisSkippedRepoGroup;
  readonly "not_found_repos": {
  /**
* The total number of repositories that were skipped for this reason.
*/
readonly "repository_count": number;
  /**
* A list of full repository names that were skipped. This list may not include all repositories that were skipped.
*/
readonly "repository_full_names": ReadonlyArray<string>
};
  readonly "no_codeql_db_repos": CodeScanningVariantAnalysisSkippedRepoGroup;
  readonly "over_limit_repos": CodeScanningVariantAnalysisSkippedRepoGroup
} | undefined
}

export interface CodeScanningCreateVariantAnalysis503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodeScanningGetVariantAnalysisParams {
  
}

export interface CodeScanningGetVariantAnalysis503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodeScanningGetVariantAnalysisRepoTaskParams {
  
}

export interface CodeScanningVariantAnalysisRepoTask {
  readonly "repository": SimpleRepository;
  readonly "analysis_status": CodeScanningVariantAnalysisStatus;
  /**
* The size of the artifact. This is only available for successful analyses.
*/
readonly "artifact_size_in_bytes"?: number | undefined;
  /**
* The number of results in the case of a successful analysis. This is only available for successful analyses.
*/
readonly "result_count"?: number | undefined;
  /**
* The reason of the failure of this repo task. This is only available if the repository task has failed.
*/
readonly "failure_message"?: string | undefined;
  /**
* The SHA of the commit the CodeQL database was built against. This is only available for successful analyses.
*/
readonly "database_commit_sha"?: string | undefined;
  /**
* The source location prefix to use. This is only available for successful analyses.
*/
readonly "source_location_prefix"?: string | undefined;
  /**
* The URL of the artifact. This is only available for successful analyses.
*/
readonly "artifact_url"?: string | undefined
}

export interface CodeScanningGetVariantAnalysisRepoTask503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodeScanningGetDefaultSetupParams {
  
}

/**
* Code scanning default setup has been configured or not.
*/
export type CodeScanningDefaultSetupState = "configured" | "not-configured"

/**
* Runner type to be used.
*/
export type CodeScanningDefaultSetupRunnerType = "standard" | "labeled"

/**
* CodeQL query suite to be used.
*/
export type CodeScanningDefaultSetupQuerySuite = "default" | "extended"

/**
* Threat model to be used for code scanning analysis. Use `remote` to analyze only network sources and `remote_and_local` to include local sources like filesystem access, command-line arguments, database reads, environment variable and standard input.
*/
export type CodeScanningDefaultSetupThreatModel = "remote" | "remote_and_local"

/**
* The frequency of the periodic analysis.
*/
export type CodeScanningDefaultSetupSchedule = "weekly"

/**
* Configuration for code scanning default setup.
*/
export interface CodeScanningDefaultSetup {
  /**
* Code scanning default setup has been configured or not.
*/
readonly "state"?: CodeScanningDefaultSetupState | undefined;
  /**
* Languages to be analyzed.
*/
readonly "languages"?: ReadonlyArray<"actions" | "c-cpp" | "csharp" | "go" | "java-kotlin" | "javascript-typescript" | "javascript" | "python" | "ruby" | "typescript" | "swift"> | undefined;
  /**
* Runner type to be used.
*/
readonly "runner_type"?: CodeScanningDefaultSetupRunnerType | null | undefined;
  /**
* Runner label to be used if the runner type is labeled.
*/
readonly "runner_label"?: string | null | undefined;
  /**
* CodeQL query suite to be used.
*/
readonly "query_suite"?: CodeScanningDefaultSetupQuerySuite | undefined;
  /**
* Threat model to be used for code scanning analysis. Use `remote` to analyze only network sources and `remote_and_local` to include local sources like filesystem access, command-line arguments, database reads, environment variable and standard input.
*/
readonly "threat_model"?: CodeScanningDefaultSetupThreatModel | undefined;
  /**
* Timestamp of latest configuration update.
*/
readonly "updated_at"?: string | null | undefined;
  /**
* The frequency of the periodic analysis.
*/
readonly "schedule"?: CodeScanningDefaultSetupSchedule | null | undefined
}

export interface CodeScanningGetDefaultSetup503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodeScanningUpdateDefaultSetupParams {
  
}

/**
* The desired state of code scanning default setup.
*/
export type CodeScanningDefaultSetupUpdateState = "configured" | "not-configured"

/**
* Runner type to be used.
*/
export type CodeScanningDefaultSetupUpdateRunnerType = "standard" | "labeled"

/**
* CodeQL query suite to be used.
*/
export type CodeScanningDefaultSetupUpdateQuerySuite = "default" | "extended"

/**
* Threat model to be used for code scanning analysis. Use `remote` to analyze only network sources and `remote_and_local` to include local sources like filesystem access, command-line arguments, database reads, environment variable and standard input.
*/
export type CodeScanningDefaultSetupUpdateThreatModel = "remote" | "remote_and_local"

/**
* Configuration for code scanning default setup.
*/
export interface CodeScanningDefaultSetupUpdate {
  /**
* The desired state of code scanning default setup.
*/
readonly "state"?: CodeScanningDefaultSetupUpdateState | undefined;
  /**
* Runner type to be used.
*/
readonly "runner_type"?: CodeScanningDefaultSetupUpdateRunnerType | undefined;
  /**
* Runner label to be used if the runner type is labeled.
*/
readonly "runner_label"?: string | null | undefined;
  /**
* CodeQL query suite to be used.
*/
readonly "query_suite"?: CodeScanningDefaultSetupUpdateQuerySuite | undefined;
  /**
* Threat model to be used for code scanning analysis. Use `remote` to analyze only network sources and `remote_and_local` to include local sources like filesystem access, command-line arguments, database reads, environment variable and standard input.
*/
readonly "threat_model"?: CodeScanningDefaultSetupUpdateThreatModel | undefined;
  /**
* CodeQL languages to be analyzed.
*/
readonly "languages"?: ReadonlyArray<"actions" | "c-cpp" | "csharp" | "go" | "java-kotlin" | "javascript-typescript" | "python" | "ruby" | "swift"> | undefined
}

/**
* You can use `run_url` to track the status of the run. This includes a property status and conclusion.
* You should not rely on this always being an actions workflow run object.
*/
export interface CodeScanningDefaultSetupUpdateResponse {
  /**
* ID of the corresponding run.
*/
readonly "run_id"?: number | undefined;
  /**
* URL of the corresponding run.
*/
readonly "run_url"?: string | undefined
}

export interface CodeScanningUpdateDefaultSetup503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodeScanningUploadSarifParams {
  
}

/**
* The full Git reference, formatted as `refs/heads/<branch name>`,
* `refs/tags/<tag>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
*/
export type CodeScanningRefFull = string

/**
* A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)."
*/
export type CodeScanningAnalysisSarifFile = string

export interface CodeScanningUploadSarifRequest {
  readonly "commit_sha": CodeScanningAnalysisCommitSha;
  readonly "ref": CodeScanningRefFull;
  readonly "sarif": CodeScanningAnalysisSarifFile;
  /**
* The base directory used in the analysis, as it appears in the SARIF file.
* This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
*/
readonly "checkout_uri"?: string | undefined;
  /**
* The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
readonly "started_at"?: string | undefined;
  /**
* The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
*/
readonly "tool_name"?: string | undefined;
  /**
* Whether the SARIF file will be validated according to the code scanning specifications.
* This parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning.
*/
readonly "validate"?: boolean | undefined
}

export interface CodeScanningSarifsReceipt {
  readonly "id"?: CodeScanningAnalysisSarifId | undefined;
  /**
* The REST API URL for checking the status of the upload.
*/
readonly "url"?: string | undefined
}

export interface CodeScanningUploadSarif503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodeScanningGetSarifParams {
  
}

/**
* `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.
*/
export type CodeScanningSarifsStatusProcessingStatus = "pending" | "complete" | "failed"

export interface CodeScanningSarifsStatus {
  /**
* `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.
*/
readonly "processing_status"?: CodeScanningSarifsStatusProcessingStatus | undefined;
  /**
* The REST API URL for getting the analyses associated with the upload.
*/
readonly "analyses_url"?: string | null | undefined;
  /**
* Any errors that ocurred during processing of the delivery.
*/
readonly "errors"?: ReadonlyArray<string> | null | undefined
}

export interface CodeScanningGetSarif503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodeSecurityGetConfigurationForRepositoryParams {
  
}

/**
* The attachment status of the code security configuration on the repository.
*/
export type CodeSecurityConfigurationForRepositoryStatus = "attached" | "attaching" | "detached" | "removed" | "enforced" | "failed" | "updating" | "removed_by_enterprise"

/**
* Code security configuration associated with a repository and attachment status
*/
export interface CodeSecurityConfigurationForRepository {
  /**
* The attachment status of the code security configuration on the repository.
*/
readonly "status"?: CodeSecurityConfigurationForRepositoryStatus | undefined;
  readonly "configuration"?: CodeSecurityConfiguration | undefined
}

export interface ReposCodeownersErrorsParams {
  readonly "ref"?: string | undefined
}

/**
* A list of errors found in a repo's CODEOWNERS file
*/
export interface CodeownersErrors {
  readonly "errors": ReadonlyArray<{
  /**
* The line number where this errors occurs.
*/
readonly "line": number;
  /**
* The column number where this errors occurs.
*/
readonly "column": number;
  /**
* The contents of the line where the error occurs.
*/
readonly "source"?: string | undefined;
  /**
* The type of error.
*/
readonly "kind": string;
  /**
* Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.
*/
readonly "suggestion"?: string | null | undefined;
  /**
* A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
*/
readonly "message": string;
  /**
* The path of the file where the error occured.
*/
readonly "path": string
}>
}

export interface CodespacesListInRepositoryForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface CodespacesListInRepositoryForAuthenticatedUser200 {
  readonly "total_count": number;
  readonly "codespaces": ReadonlyArray<Codespace>
}

export interface CodespacesCreateWithRepoForAuthenticatedUserParams {
  
}

/**
* The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.
*/
export type CodespacesCreateWithRepoForAuthenticatedUserRequestGeo = "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest"

export interface CodespacesCreateWithRepoForAuthenticatedUserRequest {
  /**
* Git ref (typically a branch name) for this codespace
*/
readonly "ref"?: string | undefined;
  /**
* The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
*/
readonly "location"?: string | undefined;
  /**
* The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.
*/
readonly "geo"?: CodespacesCreateWithRepoForAuthenticatedUserRequestGeo | undefined;
  /**
* IP for location auto-detection when proxying a request
*/
readonly "client_ip"?: string | undefined;
  /**
* Machine type to use for this codespace
*/
readonly "machine"?: string | undefined;
  /**
* Path to devcontainer.json config to use for this codespace
*/
readonly "devcontainer_path"?: string | undefined;
  /**
* Whether to authorize requested permissions from devcontainer.json
*/
readonly "multi_repo_permissions_opt_out"?: boolean | undefined;
  /**
* Working directory for this codespace
*/
readonly "working_directory"?: string | undefined;
  /**
* Time in minutes before codespace stops from inactivity
*/
readonly "idle_timeout_minutes"?: number | undefined;
  /**
* Display name for this codespace
*/
readonly "display_name"?: string | undefined;
  /**
* Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
*/
readonly "retention_period_minutes"?: number | undefined
}

export interface CodespacesCreateWithRepoForAuthenticatedUser503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodespacesListDevcontainersInRepositoryForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface CodespacesListDevcontainersInRepositoryForAuthenticatedUser200 {
  readonly "total_count": number;
  readonly "devcontainers": ReadonlyArray<{
  readonly "path": string;
  readonly "name"?: string | undefined;
  readonly "display_name"?: string | undefined
}>
}

export interface CodespacesRepoMachinesForAuthenticatedUserParams {
  readonly "location"?: string | undefined;
  readonly "client_ip"?: string | undefined;
  readonly "ref"?: string | undefined
}

/**
* Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
*/
export type CodespaceMachinePrebuildAvailability = "none" | "ready" | "in_progress"

/**
* A description of the machine powering a codespace.
*/
export interface CodespaceMachine {
  /**
* The name of the machine.
*/
readonly "name": string;
  /**
* The display name of the machine includes cores, memory, and storage.
*/
readonly "display_name": string;
  /**
* The operating system of the machine.
*/
readonly "operating_system": string;
  /**
* How much storage is available to the codespace.
*/
readonly "storage_in_bytes": number;
  /**
* How much memory is available to the codespace.
*/
readonly "memory_in_bytes": number;
  /**
* How many cores are available to the codespace.
*/
readonly "cpus": number;
  /**
* Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
*/
readonly "prebuild_availability": CodespaceMachinePrebuildAvailability | null
}

export interface CodespacesRepoMachinesForAuthenticatedUser200 {
  readonly "total_count": number;
  readonly "machines": ReadonlyArray<CodespaceMachine>
}

export interface CodespacesPreFlightWithRepoForAuthenticatedUserParams {
  readonly "ref"?: string | undefined;
  readonly "client_ip"?: string | undefined
}

export interface CodespacesPreFlightWithRepoForAuthenticatedUser200 {
  readonly "billable_owner"?: SimpleUser | undefined;
  readonly "defaults"?: {
  readonly "location": string;
  readonly "devcontainer_path": string | null
} | undefined
}

export interface CodespacesCheckPermissionsForDevcontainerParams {
  readonly "ref": string;
  readonly "devcontainer_path": string
}

/**
* Permission check result for a given devcontainer config.
*/
export interface CodespacesPermissionsCheckForDevcontainer {
  /**
* Whether the user has accepted the permissions defined by the devcontainer config
*/
readonly "accepted": boolean
}

export interface CodespacesCheckPermissionsForDevcontainer503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodespacesListRepoSecretsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Set repository secrets for GitHub Codespaces.
*/
export interface RepoCodespacesSecret {
  /**
* The name of the secret.
*/
readonly "name": string;
  readonly "created_at": string;
  readonly "updated_at": string
}

export interface CodespacesListRepoSecrets200 {
  readonly "total_count": number;
  readonly "secrets": ReadonlyArray<RepoCodespacesSecret>
}

export interface CodespacesGetRepoPublicKeyParams {
  
}

export interface CodespacesGetRepoSecretParams {
  
}

export interface CodespacesCreateOrUpdateRepoSecretParams {
  
}

export interface CodespacesCreateOrUpdateRepoSecretRequest {
  /**
* Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/codespaces/repository-secrets#get-a-repository-public-key) endpoint.
*/
readonly "encrypted_value"?: string | undefined;
  /**
* ID of the key you used to encrypt the secret.
*/
readonly "key_id"?: string | undefined
}

export interface CodespacesDeleteRepoSecretParams {
  
}

export type ReposListCollaboratorsParamsAffiliation = "outside" | "direct" | "all"

export type ReposListCollaboratorsParamsPermission = "pull" | "triage" | "push" | "maintain" | "admin"

export interface ReposListCollaboratorsParams {
  readonly "affiliation"?: ReposListCollaboratorsParamsAffiliation | undefined;
  readonly "permission"?: ReposListCollaboratorsParamsPermission | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Collaborator
*/
export interface Collaborator {
  readonly "login": string;
  readonly "id": number;
  readonly "email"?: string | null | undefined;
  readonly "name"?: string | null | undefined;
  readonly "node_id": string;
  readonly "avatar_url": string;
  readonly "gravatar_id": string | null;
  readonly "url": string;
  readonly "html_url": string;
  readonly "followers_url": string;
  readonly "following_url": string;
  readonly "gists_url": string;
  readonly "starred_url": string;
  readonly "subscriptions_url": string;
  readonly "organizations_url": string;
  readonly "repos_url": string;
  readonly "events_url": string;
  readonly "received_events_url": string;
  readonly "type": string;
  readonly "site_admin": boolean;
  readonly "permissions"?: {
  readonly "pull": boolean;
  readonly "triage"?: boolean | undefined;
  readonly "push": boolean;
  readonly "maintain"?: boolean | undefined;
  readonly "admin": boolean
} | undefined;
  readonly "role_name": string;
  readonly "user_view_type"?: string | undefined
}

export type ReposListCollaborators200 = ReadonlyArray<Collaborator>

export interface ReposCheckCollaboratorParams {
  
}

export interface ReposAddCollaboratorParams {
  
}

export interface ReposAddCollaboratorRequest {
  /**
* The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.
*/
readonly "permission"?: string | undefined
}

/**
* The permission associated with the invitation.
*/
export type RepositoryInvitationPermissions = "read" | "write" | "admin" | "triage" | "maintain"

/**
* Repository invitations let you manage who you collaborate with.
*/
export interface RepositoryInvitation {
  /**
* Unique identifier of the repository invitation.
*/
readonly "id": number;
  readonly "repository": MinimalRepository;
  readonly "invitee": NullableSimpleUser | null;
  readonly "inviter": NullableSimpleUser | null;
  /**
* The permission associated with the invitation.
*/
readonly "permissions": RepositoryInvitationPermissions;
  readonly "created_at": string;
  /**
* Whether or not the invitation has expired
*/
readonly "expired"?: boolean | undefined;
  /**
* URL for the repository invitation
*/
readonly "url": string;
  readonly "html_url": string;
  readonly "node_id": string
}

export interface ReposRemoveCollaboratorParams {
  
}

export interface ReposGetCollaboratorPermissionLevelParams {
  
}

/**
* Collaborator
*/
export interface NullableCollaborator {
  readonly "login": string;
  readonly "id": number;
  readonly "email"?: string | null | undefined;
  readonly "name"?: string | null | undefined;
  readonly "node_id": string;
  readonly "avatar_url": string;
  readonly "gravatar_id": string | null;
  readonly "url": string;
  readonly "html_url": string;
  readonly "followers_url": string;
  readonly "following_url": string;
  readonly "gists_url": string;
  readonly "starred_url": string;
  readonly "subscriptions_url": string;
  readonly "organizations_url": string;
  readonly "repos_url": string;
  readonly "events_url": string;
  readonly "received_events_url": string;
  readonly "type": string;
  readonly "site_admin": boolean;
  readonly "permissions"?: {
  readonly "pull": boolean;
  readonly "triage"?: boolean | undefined;
  readonly "push": boolean;
  readonly "maintain"?: boolean | undefined;
  readonly "admin": boolean
} | undefined;
  readonly "role_name": string;
  readonly "user_view_type"?: string | undefined
}

/**
* Repository Collaborator Permission
*/
export interface RepositoryCollaboratorPermission {
  readonly "permission": string;
  readonly "role_name": string;
  readonly "user": NullableCollaborator | null
}

export interface ReposListCommitCommentsForRepoParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Commit Comment
*/
export interface CommitComment {
  readonly "html_url": string;
  readonly "url": string;
  readonly "id": number;
  readonly "node_id": string;
  readonly "body": string;
  readonly "path": string | null;
  readonly "position": number | null;
  readonly "line": number | null;
  readonly "commit_id": string;
  readonly "user": NullableSimpleUser | null;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "author_association": AuthorAssociation;
  readonly "reactions"?: ReactionRollup | undefined
}

export type ReposListCommitCommentsForRepo200 = ReadonlyArray<CommitComment>

export interface ReposGetCommitCommentParams {
  
}

export interface ReposDeleteCommitCommentParams {
  
}

export interface ReposUpdateCommitCommentParams {
  
}

export interface ReposUpdateCommitCommentRequest {
  /**
* The contents of the comment
*/
readonly "body": string
}

export type ReactionsListForCommitCommentParamsContent = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes"

export interface ReactionsListForCommitCommentParams {
  readonly "content"?: ReactionsListForCommitCommentParamsContent | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ReactionsListForCommitComment200 = ReadonlyArray<Reaction>

export interface ReactionsCreateForCommitCommentParams {
  
}

/**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the commit comment.
*/
export type ReactionsCreateForCommitCommentRequestContent = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes"

export interface ReactionsCreateForCommitCommentRequest {
  /**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the commit comment.
*/
readonly "content": ReactionsCreateForCommitCommentRequestContent
}

export interface ReactionsDeleteForCommitCommentParams {
  
}

export interface ReposListCommitsParams {
  readonly "sha"?: string | undefined;
  readonly "path"?: string | undefined;
  readonly "author"?: string | undefined;
  readonly "committer"?: string | undefined;
  readonly "since"?: string | undefined;
  readonly "until"?: string | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ReposListCommits200 = ReadonlyArray<Commit>

export interface ReposListBranchesForHeadCommitParams {
  
}

/**
* Branch Short
*/
export interface BranchShort {
  readonly "name": string;
  readonly "commit": {
  readonly "sha": string;
  readonly "url": string
};
  readonly "protected": boolean
}

export type ReposListBranchesForHeadCommit200 = ReadonlyArray<BranchShort>

export interface ReposListCommentsForCommitParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ReposListCommentsForCommit200 = ReadonlyArray<CommitComment>

export interface ReposCreateCommitCommentParams {
  
}

export interface ReposCreateCommitCommentRequest {
  /**
* The contents of the comment.
*/
readonly "body": string;
  /**
* Relative path of the file to comment on.
*/
readonly "path"?: string | undefined;
  /**
* Line index in the diff to comment on.
*/
readonly "position"?: number | undefined;
  /**
* **Closing down notice**. Use **position** parameter instead. Line number in the file to comment on.
*/
readonly "line"?: number | undefined
}

export interface ReposListPullRequestsAssociatedWithCommitParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Hypermedia Link
*/
export interface Link {
  readonly "href": string
}

/**
* The merge method to use.
*/
export type AutoMergeMergeMethod = "merge" | "squash" | "rebase"

/**
* The status of auto merging a pull request.
*/
export interface AutoMerge {
  readonly "enabled_by": SimpleUser;
  /**
* The merge method to use.
*/
readonly "merge_method": AutoMergeMergeMethod;
  /**
* Title for the merge commit message.
*/
readonly "commit_title": string;
  /**
* Commit message for the merge commit.
*/
readonly "commit_message": string
}

/**
* Pull Request Simple
*/
export interface PullRequestSimple {
  readonly "url": string;
  readonly "id": number;
  readonly "node_id": string;
  readonly "html_url": string;
  readonly "diff_url": string;
  readonly "patch_url": string;
  readonly "issue_url": string;
  readonly "commits_url": string;
  readonly "review_comments_url": string;
  readonly "review_comment_url": string;
  readonly "comments_url": string;
  readonly "statuses_url": string;
  readonly "number": number;
  readonly "state": string;
  readonly "locked": boolean;
  readonly "title": string;
  readonly "user": NullableSimpleUser | null;
  readonly "body": string | null;
  readonly "labels": ReadonlyArray<{
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "name": string;
  readonly "description": string;
  readonly "color": string;
  readonly "default": boolean
}>;
  readonly "milestone": NullableMilestone | null;
  readonly "active_lock_reason"?: string | null | undefined;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "closed_at": string | null;
  readonly "merged_at": string | null;
  readonly "merge_commit_sha": string | null;
  readonly "assignee": NullableSimpleUser | null;
  readonly "assignees"?: ReadonlyArray<SimpleUser> | null | undefined;
  readonly "requested_reviewers"?: ReadonlyArray<SimpleUser> | null | undefined;
  readonly "requested_teams"?: ReadonlyArray<Team> | null | undefined;
  readonly "head": {
  readonly "label": string;
  readonly "ref": string;
  readonly "repo": Repository;
  readonly "sha": string;
  readonly "user": NullableSimpleUser | null
};
  readonly "base": {
  readonly "label": string;
  readonly "ref": string;
  readonly "repo": Repository;
  readonly "sha": string;
  readonly "user": NullableSimpleUser | null
};
  readonly "_links": {
  readonly "comments": Link;
  readonly "commits": Link;
  readonly "statuses": Link;
  readonly "html": Link;
  readonly "issue": Link;
  readonly "review_comments": Link;
  readonly "review_comment": Link;
  readonly "self": Link
};
  readonly "author_association": AuthorAssociation;
  readonly "auto_merge": AutoMerge | null;
  /**
* Indicates whether or not the pull request is a draft.
*/
readonly "draft"?: boolean | undefined
}

export type ReposListPullRequestsAssociatedWithCommit200 = ReadonlyArray<PullRequestSimple>

export interface ReposGetCommitParams {
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

export interface ReposGetCommit503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export type ChecksListForRefParamsStatus = "queued" | "in_progress" | "completed"

export type ChecksListForRefParamsFilter = "latest" | "all"

export interface ChecksListForRefParams {
  readonly "check_name"?: string | undefined;
  readonly "status"?: ChecksListForRefParamsStatus | undefined;
  readonly "filter"?: ChecksListForRefParamsFilter | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined;
  readonly "app_id"?: number | undefined
}

export interface ChecksListForRef200 {
  readonly "total_count": number;
  readonly "check_runs": ReadonlyArray<CheckRun>
}

export interface ChecksListSuitesForRefParams {
  readonly "app_id"?: number | undefined;
  readonly "check_name"?: string | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface ChecksListSuitesForRef200 {
  readonly "total_count": number;
  readonly "check_suites": ReadonlyArray<CheckSuite>
}

export interface ReposGetCombinedStatusForRefParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface SimpleCommitStatus {
  readonly "description": string | null;
  readonly "id": number;
  readonly "node_id": string;
  readonly "state": string;
  readonly "context": string;
  readonly "target_url": string | null;
  readonly "required"?: boolean | null | undefined;
  readonly "avatar_url": string | null;
  readonly "url": string;
  readonly "created_at": string;
  readonly "updated_at": string
}

/**
* Combined Commit Status
*/
export interface CombinedCommitStatus {
  readonly "state": string;
  readonly "statuses": ReadonlyArray<SimpleCommitStatus>;
  readonly "sha": string;
  readonly "total_count": number;
  readonly "repository": MinimalRepository;
  readonly "commit_url": string;
  readonly "url": string
}

export interface ReposListCommitStatusesForRefParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* The status of a commit.
*/
export interface Status {
  readonly "url": string;
  readonly "avatar_url": string | null;
  readonly "id": number;
  readonly "node_id": string;
  readonly "state": string;
  readonly "description": string | null;
  readonly "target_url": string | null;
  readonly "context": string;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "creator": NullableSimpleUser | null
}

export type ReposListCommitStatusesForRef200 = ReadonlyArray<Status>

export interface ReposGetCommunityProfileMetricsParams {
  
}

/**
* Code of Conduct Simple
*/
export interface NullableCodeOfConductSimple {
  readonly "url": string;
  readonly "key": string;
  readonly "name": string;
  readonly "html_url": string | null
}

export interface NullableCommunityHealthFile {
  readonly "url": string;
  readonly "html_url": string
}

/**
* Community Profile
*/
export interface CommunityProfile {
  readonly "health_percentage": number;
  readonly "description": string | null;
  readonly "documentation": string | null;
  readonly "files": {
  readonly "code_of_conduct": NullableCodeOfConductSimple | null;
  readonly "code_of_conduct_file": NullableCommunityHealthFile | null;
  readonly "license": NullableLicenseSimple | null;
  readonly "contributing": NullableCommunityHealthFile | null;
  readonly "readme": NullableCommunityHealthFile | null;
  readonly "issue_template": NullableCommunityHealthFile | null;
  readonly "pull_request_template": NullableCommunityHealthFile | null
};
  readonly "updated_at": string | null;
  readonly "content_reports_enabled"?: boolean | undefined
}

export interface ReposCompareCommitsParams {
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

export type CommitComparisonStatus = "diverged" | "ahead" | "behind" | "identical"

/**
* Commit Comparison
*/
export interface CommitComparison {
  readonly "url": string;
  readonly "html_url": string;
  readonly "permalink_url": string;
  readonly "diff_url": string;
  readonly "patch_url": string;
  readonly "base_commit": Commit;
  readonly "merge_base_commit": Commit;
  readonly "status": CommitComparisonStatus;
  readonly "ahead_by": number;
  readonly "behind_by": number;
  readonly "total_commits": number;
  readonly "commits": ReadonlyArray<Commit>;
  readonly "files"?: ReadonlyArray<DiffEntry> | undefined
}

export interface ReposCompareCommits503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface ReposGetContentParams {
  readonly "ref"?: string | undefined
}

/**
* A list of directory items
*/
export type ContentDirectory = ReadonlyArray<{
  readonly "type": "dir" | "file" | "submodule" | "symlink";
  readonly "size": number;
  readonly "name": string;
  readonly "path": string;
  readonly "content"?: string | undefined;
  readonly "sha": string;
  readonly "url": string;
  readonly "git_url": string | null;
  readonly "html_url": string | null;
  readonly "download_url": string | null;
  readonly "_links": {
  readonly "git": string | null;
  readonly "html": string | null;
  readonly "self": string
}
}>

export type ContentFileType = "file"

/**
* Content File
*/
export interface ContentFile {
  readonly "type": ContentFileType;
  readonly "encoding": string;
  readonly "size": number;
  readonly "name": string;
  readonly "path": string;
  readonly "content": string;
  readonly "sha": string;
  readonly "url": string;
  readonly "git_url": string | null;
  readonly "html_url": string | null;
  readonly "download_url": string | null;
  readonly "_links": {
  readonly "git": string | null;
  readonly "html": string | null;
  readonly "self": string
};
  readonly "target"?: string | undefined;
  readonly "submodule_git_url"?: string | undefined
}

export type ContentSymlinkType = "symlink"

/**
* An object describing a symlink
*/
export interface ContentSymlink {
  readonly "type": ContentSymlinkType;
  readonly "target": string;
  readonly "size": number;
  readonly "name": string;
  readonly "path": string;
  readonly "sha": string;
  readonly "url": string;
  readonly "git_url": string | null;
  readonly "html_url": string | null;
  readonly "download_url": string | null;
  readonly "_links": {
  readonly "git": string | null;
  readonly "html": string | null;
  readonly "self": string
}
}

export type ContentSubmoduleType = "submodule"

/**
* An object describing a submodule
*/
export interface ContentSubmodule {
  readonly "type": ContentSubmoduleType;
  readonly "submodule_git_url": string;
  readonly "size": number;
  readonly "name": string;
  readonly "path": string;
  readonly "sha": string;
  readonly "url": string;
  readonly "git_url": string | null;
  readonly "html_url": string | null;
  readonly "download_url": string | null;
  readonly "_links": {
  readonly "git": string | null;
  readonly "html": string | null;
  readonly "self": string
}
}

export type ReposGetContent200 = ContentDirectory | ContentFile | ContentSymlink | ContentSubmodule

export interface ReposCreateOrUpdateFileContentsParams {
  
}

export interface ReposCreateOrUpdateFileContentsRequest {
  /**
* The commit message.
*/
readonly "message": string;
  /**
* The new file content, using Base64 encoding.
*/
readonly "content": string;
  /**
* **Required if you are updating a file**. The blob SHA of the file being replaced.
*/
readonly "sha"?: string | undefined;
  /**
* The branch name. Default: the repository’s default branch.
*/
readonly "branch"?: string | undefined;
  /**
* The person that committed the file. Default: the authenticated user.
*/
readonly "committer"?: {
  /**
* The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
*/
readonly "name": string;
  /**
* The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
*/
readonly "email": string;
  readonly "date"?: string | undefined
} | undefined;
  /**
* The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
*/
readonly "author"?: {
  /**
* The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
*/
readonly "name": string;
  /**
* The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
*/
readonly "email": string;
  readonly "date"?: string | undefined
} | undefined
}

/**
* File Commit
*/
export interface FileCommit {
  readonly "content": {
  readonly "name"?: string | undefined;
  readonly "path"?: string | undefined;
  readonly "sha"?: string | undefined;
  readonly "size"?: number | undefined;
  readonly "url"?: string | undefined;
  readonly "html_url"?: string | undefined;
  readonly "git_url"?: string | undefined;
  readonly "download_url"?: string | undefined;
  readonly "type"?: string | undefined;
  readonly "_links"?: {
  readonly "self"?: string | undefined;
  readonly "git"?: string | undefined;
  readonly "html"?: string | undefined
} | undefined
} | null;
  readonly "commit": {
  readonly "sha"?: string | undefined;
  readonly "node_id"?: string | undefined;
  readonly "url"?: string | undefined;
  readonly "html_url"?: string | undefined;
  readonly "author"?: {
  readonly "date"?: string | undefined;
  readonly "name"?: string | undefined;
  readonly "email"?: string | undefined
} | undefined;
  readonly "committer"?: {
  readonly "date"?: string | undefined;
  readonly "name"?: string | undefined;
  readonly "email"?: string | undefined
} | undefined;
  readonly "message"?: string | undefined;
  readonly "tree"?: {
  readonly "url"?: string | undefined;
  readonly "sha"?: string | undefined
} | undefined;
  readonly "parents"?: ReadonlyArray<{
  readonly "url"?: string | undefined;
  readonly "html_url"?: string | undefined;
  readonly "sha"?: string | undefined
}> | undefined;
  readonly "verification"?: {
  readonly "verified"?: boolean | undefined;
  readonly "reason"?: string | undefined;
  readonly "signature"?: string | null | undefined;
  readonly "payload"?: string | null | undefined;
  readonly "verified_at"?: string | null | undefined
} | undefined
}
}

/**
* The ID of the push protection bypass placeholder. This value is returned on any push protected routes.
*/
export type SecretScanningPushProtectionBypassPlaceholderId = string

/**
* Repository rule violation was detected
*/
export interface RepositoryRuleViolationError {
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined;
  readonly "status"?: string | undefined;
  readonly "metadata"?: {
  readonly "secret_scanning"?: {
  readonly "bypass_placeholders"?: ReadonlyArray<{
  readonly "placeholder_id"?: SecretScanningPushProtectionBypassPlaceholderId | undefined;
  readonly "token_type"?: string | undefined
}> | undefined
} | undefined
} | undefined
}

export type ReposCreateOrUpdateFileContents409 = BasicError | RepositoryRuleViolationError

export interface ReposDeleteFileParams {
  
}

export interface ReposDeleteFileRequest {
  /**
* The commit message.
*/
readonly "message": string;
  /**
* The blob SHA of the file being deleted.
*/
readonly "sha": string;
  /**
* The branch name. Default: the repository’s default branch
*/
readonly "branch"?: string | undefined;
  /**
* object containing information about the committer.
*/
readonly "committer"?: {
  /**
* The name of the author (or committer) of the commit
*/
readonly "name"?: string | undefined;
  /**
* The email of the author (or committer) of the commit
*/
readonly "email"?: string | undefined
} | undefined;
  /**
* object containing information about the author.
*/
readonly "author"?: {
  /**
* The name of the author (or committer) of the commit
*/
readonly "name"?: string | undefined;
  /**
* The email of the author (or committer) of the commit
*/
readonly "email"?: string | undefined
} | undefined
}

export interface ReposDeleteFile503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface ReposListContributorsParams {
  readonly "anon"?: string | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Contributor
*/
export interface Contributor {
  readonly "login"?: string | undefined;
  readonly "id"?: number | undefined;
  readonly "node_id"?: string | undefined;
  readonly "avatar_url"?: string | undefined;
  readonly "gravatar_id"?: string | null | undefined;
  readonly "url"?: string | undefined;
  readonly "html_url"?: string | undefined;
  readonly "followers_url"?: string | undefined;
  readonly "following_url"?: string | undefined;
  readonly "gists_url"?: string | undefined;
  readonly "starred_url"?: string | undefined;
  readonly "subscriptions_url"?: string | undefined;
  readonly "organizations_url"?: string | undefined;
  readonly "repos_url"?: string | undefined;
  readonly "events_url"?: string | undefined;
  readonly "received_events_url"?: string | undefined;
  readonly "type": string;
  readonly "site_admin"?: boolean | undefined;
  readonly "contributions": number;
  readonly "email"?: string | undefined;
  readonly "name"?: string | undefined;
  readonly "user_view_type"?: string | undefined
}

export type ReposListContributors200 = ReadonlyArray<Contributor>

export type DependabotListAlertsForRepoParamsScope = "development" | "runtime"

export type DependabotListAlertsForRepoParamsSort = "created" | "updated" | "epss_percentage"

export type DependabotListAlertsForRepoParamsDirection = "asc" | "desc"

export interface DependabotListAlertsForRepoParams {
  readonly "state"?: string | undefined;
  readonly "severity"?: string | undefined;
  readonly "ecosystem"?: string | undefined;
  readonly "package"?: string | undefined;
  readonly "manifest"?: string | undefined;
  readonly "epss_percentage"?: string | undefined;
  readonly "has"?: string | ReadonlyArray<"patch"> | undefined;
  readonly "scope"?: DependabotListAlertsForRepoParamsScope | undefined;
  readonly "sort"?: DependabotListAlertsForRepoParamsSort | undefined;
  readonly "direction"?: DependabotListAlertsForRepoParamsDirection | undefined;
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined;
  readonly "first"?: number | undefined;
  readonly "last"?: number | undefined
}

/**
* The state of the Dependabot alert.
*/
export type DependabotAlertState = "auto_dismissed" | "dismissed" | "fixed" | "open"

/**
* The execution scope of the vulnerable dependency.
*/
export type DependabotAlertDependencyScope = "development" | "runtime"

/**
* The vulnerable dependency's relationship to your project.
* 
* > [!NOTE]
* > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
*/
export type DependabotAlertDependencyRelationship = "unknown" | "direct" | "transitive"

/**
* The reason that the alert was dismissed.
*/
export type DependabotAlertDismissedReason = "fix_started" | "inaccurate" | "no_bandwidth" | "not_used" | "tolerable_risk"

/**
* A Dependabot alert.
*/
export interface DependabotAlert {
  readonly "number": AlertNumber;
  /**
* The state of the Dependabot alert.
*/
readonly "state": DependabotAlertState;
  /**
* Details for the vulnerable dependency.
*/
readonly "dependency": {
  readonly "package"?: DependabotAlertPackage | undefined;
  /**
* The full path to the dependency manifest file, relative to the root of the repository.
*/
readonly "manifest_path"?: string | undefined;
  /**
* The execution scope of the vulnerable dependency.
*/
readonly "scope"?: DependabotAlertDependencyScope | null | undefined;
  /**
* The vulnerable dependency's relationship to your project.
* 
* > [!NOTE]
* > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
*/
readonly "relationship"?: DependabotAlertDependencyRelationship | null | undefined
};
  readonly "security_advisory": DependabotAlertSecurityAdvisory;
  readonly "security_vulnerability": DependabotAlertSecurityVulnerability;
  readonly "url": AlertUrl;
  readonly "html_url": AlertHtmlUrl;
  readonly "created_at": AlertCreatedAt;
  readonly "updated_at": AlertUpdatedAt;
  readonly "dismissed_at": AlertDismissedAt | null;
  readonly "dismissed_by": NullableSimpleUser | null;
  /**
* The reason that the alert was dismissed.
*/
readonly "dismissed_reason": DependabotAlertDismissedReason | null;
  /**
* An optional comment associated with the alert's dismissal.
*/
readonly "dismissed_comment": string | null;
  readonly "fixed_at": AlertFixedAt | null;
  readonly "auto_dismissed_at"?: AlertAutoDismissedAt | null | undefined
}

export type DependabotListAlertsForRepo200 = ReadonlyArray<DependabotAlert>

export interface DependabotGetAlertParams {
  
}

export interface DependabotUpdateAlertParams {
  
}

/**
* The state of the Dependabot alert.
* A `dismissed_reason` must be provided when setting the state to `dismissed`.
*/
export type DependabotUpdateAlertRequestState = "dismissed" | "open"

/**
* **Required when `state` is `dismissed`.** A reason for dismissing the alert.
*/
export type DependabotUpdateAlertRequestDismissedReason = "fix_started" | "inaccurate" | "no_bandwidth" | "not_used" | "tolerable_risk"

export interface DependabotUpdateAlertRequest {
  /**
* The state of the Dependabot alert.
* A `dismissed_reason` must be provided when setting the state to `dismissed`.
*/
readonly "state": DependabotUpdateAlertRequestState;
  /**
* **Required when `state` is `dismissed`.** A reason for dismissing the alert.
*/
readonly "dismissed_reason"?: DependabotUpdateAlertRequestDismissedReason | undefined;
  /**
* An optional comment associated with dismissing the alert.
*/
readonly "dismissed_comment"?: string | undefined
}

export interface DependabotListRepoSecretsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Set secrets for Dependabot.
*/
export interface DependabotSecret {
  /**
* The name of the secret.
*/
readonly "name": string;
  readonly "created_at": string;
  readonly "updated_at": string
}

export interface DependabotListRepoSecrets200 {
  readonly "total_count": number;
  readonly "secrets": ReadonlyArray<DependabotSecret>
}

export interface DependabotGetRepoPublicKeyParams {
  
}

export interface DependabotGetRepoSecretParams {
  
}

export interface DependabotCreateOrUpdateRepoSecretParams {
  
}

export interface DependabotCreateOrUpdateRepoSecretRequest {
  /**
* Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/dependabot/secrets#get-a-repository-public-key) endpoint.
*/
readonly "encrypted_value"?: string | undefined;
  /**
* ID of the key you used to encrypt the secret.
*/
readonly "key_id"?: string | undefined
}

export interface DependabotDeleteRepoSecretParams {
  
}

export interface DependencyGraphDiffRangeParams {
  readonly "name"?: string | undefined
}

/**
* A diff of the dependencies between two commits.
*/
export type DependencyGraphDiff = ReadonlyArray<{
  readonly "change_type": "added" | "removed";
  readonly "manifest": string;
  readonly "ecosystem": string;
  readonly "name": string;
  readonly "version": string;
  readonly "package_url": string | null;
  readonly "license": string | null;
  readonly "source_repository_url": string | null;
  readonly "vulnerabilities": ReadonlyArray<{
  readonly "severity": string;
  readonly "advisory_ghsa_id": string;
  readonly "advisory_summary": string;
  readonly "advisory_url": string
}>;
  /**
* Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment.
*/
readonly "scope": "unknown" | "runtime" | "development"
}>

export interface DependencyGraphExportSbomParams {
  
}

/**
* A schema for the SPDX JSON format returned by the Dependency Graph.
*/
export interface DependencyGraphSpdxSbom {
  readonly "sbom": {
  /**
* The SPDX identifier for the SPDX document.
*/
readonly "SPDXID": string;
  /**
* The version of the SPDX specification that this document conforms to.
*/
readonly "spdxVersion": string;
  /**
* An optional comment about the SPDX document.
*/
readonly "comment"?: string | undefined;
  readonly "creationInfo": {
  /**
* The date and time the SPDX document was created.
*/
readonly "created": string;
  /**
* The tools that were used to generate the SPDX document.
*/
readonly "creators": ReadonlyArray<string>
};
  /**
* The name of the SPDX document.
*/
readonly "name": string;
  /**
* The license under which the SPDX document is licensed.
*/
readonly "dataLicense": string;
  /**
* The namespace for the SPDX document.
*/
readonly "documentNamespace": string;
  readonly "packages": ReadonlyArray<{
  /**
* A unique SPDX identifier for the package.
*/
readonly "SPDXID"?: string | undefined;
  /**
* The name of the package.
*/
readonly "name"?: string | undefined;
  /**
* The version of the package. If the package does not have an exact version specified,
* a version range is given.
*/
readonly "versionInfo"?: string | undefined;
  /**
* The location where the package can be downloaded,
* or NOASSERTION if this has not been determined.
*/
readonly "downloadLocation"?: string | undefined;
  /**
* Whether the package's file content has been subjected to
* analysis during the creation of the SPDX document.
*/
readonly "filesAnalyzed"?: boolean | undefined;
  /**
* The license of the package as determined while creating the SPDX document.
*/
readonly "licenseConcluded"?: string | undefined;
  /**
* The license of the package as declared by its author, or NOASSERTION if this information
* was not available when the SPDX document was created.
*/
readonly "licenseDeclared"?: string | undefined;
  /**
* The distribution source of this package, or NOASSERTION if this was not determined.
*/
readonly "supplier"?: string | undefined;
  /**
* The copyright holders of the package, and any dates present with those notices, if available.
*/
readonly "copyrightText"?: string | undefined;
  readonly "externalRefs"?: ReadonlyArray<{
  /**
* The category of reference to an external resource this reference refers to.
*/
readonly "referenceCategory": string;
  /**
* A locator for the particular external resource this reference refers to.
*/
readonly "referenceLocator": string;
  /**
* The category of reference to an external resource this reference refers to.
*/
readonly "referenceType": string
}> | undefined
}>;
  readonly "relationships"?: ReadonlyArray<{
  /**
* The type of relationship between the two SPDX elements.
*/
readonly "relationshipType"?: string | undefined;
  /**
* The SPDX identifier of the package that is the source of the relationship.
*/
readonly "spdxElementId"?: string | undefined;
  /**
* The SPDX identifier of the package that is the target of the relationship.
*/
readonly "relatedSpdxElement"?: string | undefined
}> | undefined
}
}

export interface DependencyGraphCreateRepositorySnapshotParams {
  
}

/**
* User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
*/
export type Metadata = Record<string, unknown>

/**
* Create a new snapshot of a repository's dependencies.
*/
export interface Snapshot {
  /**
* The version of the repository snapshot submission.
*/
readonly "version": number;
  readonly "job": {
  /**
* The external ID of the job.
*/
readonly "id": string;
  /**
* Correlator provides a key that is used to group snapshots submitted over time. Only the "latest" submitted snapshot for a given combination of `job.correlator` and `detector.name` will be considered when calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given "wave" of CI workflow you run. If you're using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build matrix, then you'll also need to add additional key(s) to distinguish between each submission inside a matrix variation.
*/
readonly "correlator": string;
  /**
* The url for the job.
*/
readonly "html_url"?: string | undefined
};
  /**
* The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.
*/
readonly "sha": string;
  /**
* The repository branch that triggered this snapshot.
*/
readonly "ref": string;
  /**
* A description of the detector used.
*/
readonly "detector": {
  /**
* The name of the detector used.
*/
readonly "name": string;
  /**
* The version of the detector used.
*/
readonly "version": string;
  /**
* The url of the detector used.
*/
readonly "url": string
};
  readonly "metadata"?: Metadata | undefined;
  /**
* A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies.
*/
readonly "manifests"?: Record<string, unknown> | undefined;
  /**
* The time at which the snapshot was scanned.
*/
readonly "scanned": string
}

export interface DependencyGraphCreateRepositorySnapshot201 {
  /**
* ID of the created snapshot.
*/
readonly "id": number;
  /**
* The time at which the snapshot was created.
*/
readonly "created_at": string;
  /**
* Either "SUCCESS", "ACCEPTED", or "INVALID". "SUCCESS" indicates that the snapshot was successfully created and the repository's dependencies were updated. "ACCEPTED" indicates that the snapshot was successfully created, but the repository's dependencies were not updated. "INVALID" indicates that the snapshot was malformed.
*/
readonly "result": string;
  /**
* A message providing further details about the result, such as why the dependencies were not updated.
*/
readonly "message": string
}

export interface ReposListDeploymentsParams {
  readonly "sha"?: string | undefined;
  readonly "ref"?: string | undefined;
  readonly "task"?: string | undefined;
  readonly "environment"?: string | null | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ReposListDeployments200 = ReadonlyArray<Deployment>

export interface ReposCreateDeploymentParams {
  
}

export interface ReposCreateDeploymentRequest {
  /**
* The ref to deploy. This can be a branch, tag, or SHA.
*/
readonly "ref": string;
  /**
* Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
*/
readonly "task"?: string | undefined;
  /**
* Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
*/
readonly "auto_merge"?: boolean | undefined;
  /**
* The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
*/
readonly "required_contexts"?: ReadonlyArray<string> | undefined;
  readonly "payload"?: Record<string, unknown> | string | undefined;
  /**
* Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
*/
readonly "environment"?: string | undefined;
  /**
* Short description of the deployment.
*/
readonly "description"?: string | null | undefined;
  /**
* Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
*/
readonly "transient_environment"?: boolean | undefined;
  /**
* Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
*/
readonly "production_environment"?: boolean | undefined
}

export interface ReposCreateDeployment202 {
  readonly "message"?: string | undefined
}

export interface ReposGetDeploymentParams {
  
}

export interface ReposDeleteDeploymentParams {
  
}

export interface ReposListDeploymentStatusesParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* The state of the status.
*/
export type DeploymentStatusState = "error" | "failure" | "inactive" | "pending" | "success" | "queued" | "in_progress"

/**
* The status of a deployment.
*/
export interface DeploymentStatus {
  readonly "url": string;
  readonly "id": number;
  readonly "node_id": string;
  /**
* The state of the status.
*/
readonly "state": DeploymentStatusState;
  readonly "creator": NullableSimpleUser | null;
  /**
* A short description of the status.
*/
readonly "description": string;
  /**
* The environment of the deployment that the status is for.
*/
readonly "environment"?: string | undefined;
  /**
* Closing down notice: the URL to associate with this status.
*/
readonly "target_url": string;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "deployment_url": string;
  readonly "repository_url": string;
  /**
* The URL for accessing your environment.
*/
readonly "environment_url"?: string | undefined;
  /**
* The URL to associate with this status.
*/
readonly "log_url"?: string | undefined;
  readonly "performed_via_github_app"?: NullableIntegration | null | undefined
}

export type ReposListDeploymentStatuses200 = ReadonlyArray<DeploymentStatus>

export interface ReposCreateDeploymentStatusParams {
  
}

/**
* The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
*/
export type ReposCreateDeploymentStatusRequestState = "error" | "failure" | "inactive" | "in_progress" | "queued" | "pending" | "success"

export interface ReposCreateDeploymentStatusRequest {
  /**
* The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
*/
readonly "state": ReposCreateDeploymentStatusRequestState;
  /**
* The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment.
* 
* > [!NOTE]
* > It's recommended to use the `log_url` parameter, which replaces `target_url`.
*/
readonly "target_url"?: string | undefined;
  /**
* The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
*/
readonly "log_url"?: string | undefined;
  /**
* A short description of the status. The maximum description length is 140 characters.
*/
readonly "description"?: string | undefined;
  /**
* Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. If not defined, the environment of the previous status on the deployment will be used, if it exists. Otherwise, the environment of the deployment will be used.
*/
readonly "environment"?: string | undefined;
  /**
* Sets the URL for accessing your environment. Default: `""`
*/
readonly "environment_url"?: string | undefined;
  /**
* Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
*/
readonly "auto_inactive"?: boolean | undefined
}

export interface ReposGetDeploymentStatusParams {
  
}

export interface ReposCreateDispatchEventParams {
  
}

export interface ReposCreateDispatchEventRequest {
  /**
* A custom webhook event name. Must be 100 characters or fewer.
*/
readonly "event_type": string;
  /**
* JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10. The total size of the JSON payload must be less than 64KB.
*/
readonly "client_payload"?: Record<string, unknown> | undefined
}

export interface ReposGetAllEnvironmentsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
*/
export type WaitTimer = number

/**
* The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
*/
export interface DeploymentBranchPolicySettings {
  /**
* Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.
*/
readonly "protected_branches": boolean;
  /**
* Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.
*/
readonly "custom_branch_policies": boolean
}

/**
* Details of a deployment environment
*/
export interface Environment {
  /**
* The id of the environment.
*/
readonly "id": number;
  readonly "node_id": string;
  /**
* The name of the environment.
*/
readonly "name": string;
  readonly "url": string;
  readonly "html_url": string;
  /**
* The time that the environment was created, in ISO 8601 format.
*/
readonly "created_at": string;
  /**
* The time that the environment was last updated, in ISO 8601 format.
*/
readonly "updated_at": string;
  /**
* Built-in deployment protection rules for the environment.
*/
readonly "protection_rules"?: ReadonlyArray<{
  readonly "id": number;
  readonly "node_id": string;
  readonly "type": string;
  readonly "wait_timer"?: WaitTimer | undefined
} | {
  readonly "id": number;
  readonly "node_id": string;
  /**
* Whether deployments to this environment can be approved by the user who created the deployment.
*/
readonly "prevent_self_review"?: boolean | undefined;
  readonly "type": string;
  /**
* The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
*/
readonly "reviewers"?: ReadonlyArray<{
  readonly "type"?: DeploymentReviewerType | undefined;
  readonly "reviewer"?: SimpleUser | Team | undefined
}> | undefined
} | {
  readonly "id": number;
  readonly "node_id": string;
  readonly "type": string
}> | undefined;
  readonly "deployment_branch_policy"?: DeploymentBranchPolicySettings | null | undefined
}

export interface ReposGetAllEnvironments200 {
  /**
* The number of environments in this repository
*/
readonly "total_count"?: number | undefined;
  readonly "environments"?: ReadonlyArray<Environment> | undefined
}

export interface ReposGetEnvironmentParams {
  
}

export interface ReposCreateOrUpdateEnvironmentParams {
  
}

/**
* Whether or not a user who created the job is prevented from approving their own job.
*/
export type PreventSelfReview = boolean

export interface ReposCreateOrUpdateEnvironmentRequest {
  readonly "wait_timer"?: WaitTimer | undefined;
  readonly "prevent_self_review"?: PreventSelfReview | undefined;
  /**
* The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
*/
readonly "reviewers"?: ReadonlyArray<{
  readonly "type"?: DeploymentReviewerType | undefined;
  /**
* The id of the user or team who can review the deployment
*/
readonly "id"?: number | undefined
}> | null | undefined;
  readonly "deployment_branch_policy"?: DeploymentBranchPolicySettings | null | undefined
}

export interface ReposDeleteAnEnvironmentParams {
  
}

export interface ReposListDeploymentBranchPoliciesParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Whether this rule targets a branch or tag.
*/
export type DeploymentBranchPolicyType = "branch" | "tag"

/**
* Details of a deployment branch or tag policy.
*/
export interface DeploymentBranchPolicy {
  /**
* The unique identifier of the branch or tag policy.
*/
readonly "id"?: number | undefined;
  readonly "node_id"?: string | undefined;
  /**
* The name pattern that branches or tags must match in order to deploy to the environment.
*/
readonly "name"?: string | undefined;
  /**
* Whether this rule targets a branch or tag.
*/
readonly "type"?: DeploymentBranchPolicyType | undefined
}

export interface ReposListDeploymentBranchPolicies200 {
  /**
* The number of deployment branch policies for the environment.
*/
readonly "total_count": number;
  readonly "branch_policies": ReadonlyArray<DeploymentBranchPolicy>
}

export interface ReposCreateDeploymentBranchPolicyParams {
  
}

/**
* Whether this rule targets a branch or tag
*/
export type DeploymentBranchPolicyNamePatternWithTypeType = "branch" | "tag"

export interface DeploymentBranchPolicyNamePatternWithType {
  /**
* The name pattern that branches or tags must match in order to deploy to the environment.
* 
* Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/ * /*`.
* For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
*/
readonly "name": string;
  /**
* Whether this rule targets a branch or tag
*/
readonly "type"?: DeploymentBranchPolicyNamePatternWithTypeType | undefined
}

export interface ReposGetDeploymentBranchPolicyParams {
  
}

export interface ReposUpdateDeploymentBranchPolicyParams {
  
}

export interface DeploymentBranchPolicyNamePattern {
  /**
* The name pattern that branches must match in order to deploy to the environment.
* 
* Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/ * /*`.
* For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
*/
readonly "name": string
}

export interface ReposDeleteDeploymentBranchPolicyParams {
  
}

export interface ReposGetAllDeploymentProtectionRulesParams {
  
}

/**
* A GitHub App that is providing a custom deployment protection rule.
*/
export interface CustomDeploymentRuleApp {
  /**
* The unique identifier of the deployment protection rule integration.
*/
readonly "id": number;
  /**
* The slugified name of the deployment protection rule integration.
*/
readonly "slug": string;
  /**
* The URL for the endpoint to get details about the app.
*/
readonly "integration_url": string;
  /**
* The node ID for the deployment protection rule integration.
*/
readonly "node_id": string
}

/**
* Deployment protection rule
*/
export interface DeploymentProtectionRule {
  /**
* The unique identifier for the deployment protection rule.
*/
readonly "id": number;
  /**
* The node ID for the deployment protection rule.
*/
readonly "node_id": string;
  /**
* Whether the deployment protection rule is enabled for the environment.
*/
readonly "enabled": boolean;
  readonly "app": CustomDeploymentRuleApp
}

export interface ReposGetAllDeploymentProtectionRules200 {
  /**
* The number of enabled custom deployment protection rules for this environment
*/
readonly "total_count"?: number | undefined;
  readonly "custom_deployment_protection_rules"?: ReadonlyArray<DeploymentProtectionRule> | undefined
}

export interface ReposCreateDeploymentProtectionRuleParams {
  
}

export interface ReposCreateDeploymentProtectionRuleRequest {
  /**
* The ID of the custom app that will be enabled on the environment.
*/
readonly "integration_id"?: number | undefined
}

export interface ReposListCustomDeploymentRuleIntegrationsParams {
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

export interface ReposListCustomDeploymentRuleIntegrations200 {
  /**
* The total number of custom deployment protection rule integrations available for this environment.
*/
readonly "total_count"?: number | undefined;
  readonly "available_custom_deployment_protection_rule_integrations"?: ReadonlyArray<CustomDeploymentRuleApp> | undefined
}

export interface ReposGetCustomDeploymentProtectionRuleParams {
  
}

export interface ReposDisableDeploymentProtectionRuleParams {
  
}

export interface ActionsListEnvironmentSecretsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface ActionsListEnvironmentSecrets200 {
  readonly "total_count": number;
  readonly "secrets": ReadonlyArray<ActionsSecret>
}

export interface ActionsGetEnvironmentPublicKeyParams {
  
}

export interface ActionsGetEnvironmentSecretParams {
  
}

export interface ActionsCreateOrUpdateEnvironmentSecretParams {
  
}

export interface ActionsCreateOrUpdateEnvironmentSecretRequest {
  /**
* Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/actions/secrets#get-an-environment-public-key) endpoint.
*/
readonly "encrypted_value": string;
  /**
* ID of the key you used to encrypt the secret.
*/
readonly "key_id": string
}

export interface ActionsDeleteEnvironmentSecretParams {
  
}

export interface ActionsListEnvironmentVariablesParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface ActionsListEnvironmentVariables200 {
  readonly "total_count": number;
  readonly "variables": ReadonlyArray<ActionsVariable>
}

export interface ActionsCreateEnvironmentVariableParams {
  
}

export interface ActionsCreateEnvironmentVariableRequest {
  /**
* The name of the variable.
*/
readonly "name": string;
  /**
* The value of the variable.
*/
readonly "value": string
}

export interface ActionsGetEnvironmentVariableParams {
  
}

export interface ActionsDeleteEnvironmentVariableParams {
  
}

export interface ActionsUpdateEnvironmentVariableParams {
  
}

export interface ActionsUpdateEnvironmentVariableRequest {
  /**
* The name of the variable.
*/
readonly "name"?: string | undefined;
  /**
* The value of the variable.
*/
readonly "value"?: string | undefined
}

export interface ActivityListRepoEventsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ActivityListRepoEvents200 = ReadonlyArray<Event>

export type ReposListForksParamsSort = "newest" | "oldest" | "stargazers" | "watchers"

export interface ReposListForksParams {
  readonly "sort"?: ReposListForksParamsSort | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ReposListForks200 = ReadonlyArray<MinimalRepository>

export interface ReposCreateForkParams {
  
}

export interface ReposCreateForkRequest {
  /**
* Optional parameter to specify the organization name if forking into an organization.
*/
readonly "organization"?: string | undefined;
  /**
* When forking from an existing repository, a new name for the fork.
*/
readonly "name"?: string | undefined;
  /**
* When forking from an existing repository, fork with only the default branch.
*/
readonly "default_branch_only"?: boolean | undefined
}

export interface GitCreateBlobParams {
  
}

export interface GitCreateBlobRequest {
  /**
* The new blob's content.
*/
readonly "content": string;
  /**
* The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
*/
readonly "encoding"?: string | undefined
}

/**
* Short Blob
*/
export interface ShortBlob {
  readonly "url": string;
  readonly "sha": string
}

export type GitCreateBlob422 = ValidationError | RepositoryRuleViolationError

export interface GitGetBlobParams {
  
}

/**
* Blob
*/
export interface Blob {
  readonly "content": string;
  readonly "encoding": string;
  readonly "url": string;
  readonly "sha": string;
  readonly "size": number | null;
  readonly "node_id": string;
  readonly "highlighted_content"?: string | undefined
}

export interface GitCreateCommitParams {
  
}

export interface GitCreateCommitRequest {
  /**
* The commit message
*/
readonly "message": string;
  /**
* The SHA of the tree object this commit points to
*/
readonly "tree": string;
  /**
* The full SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
*/
readonly "parents"?: ReadonlyArray<string> | undefined;
  /**
* Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
*/
readonly "author"?: {
  /**
* The name of the author (or committer) of the commit
*/
readonly "name": string;
  /**
* The email of the author (or committer) of the commit
*/
readonly "email": string;
  /**
* Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
readonly "date"?: string | undefined
} | undefined;
  /**
* Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
*/
readonly "committer"?: {
  /**
* The name of the author (or committer) of the commit
*/
readonly "name"?: string | undefined;
  /**
* The email of the author (or committer) of the commit
*/
readonly "email"?: string | undefined;
  /**
* Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
readonly "date"?: string | undefined
} | undefined;
  /**
* The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
*/
readonly "signature"?: string | undefined
}

/**
* Low-level Git commit operations within a repository
*/
export interface GitCommit {
  /**
* SHA for the commit
*/
readonly "sha": string;
  readonly "node_id": string;
  readonly "url": string;
  /**
* Identifying information for the git-user
*/
readonly "author": {
  /**
* Timestamp of the commit
*/
readonly "date": string;
  /**
* Git email address of the user
*/
readonly "email": string;
  /**
* Name of the git user
*/
readonly "name": string
};
  /**
* Identifying information for the git-user
*/
readonly "committer": {
  /**
* Timestamp of the commit
*/
readonly "date": string;
  /**
* Git email address of the user
*/
readonly "email": string;
  /**
* Name of the git user
*/
readonly "name": string
};
  /**
* Message describing the purpose of the commit
*/
readonly "message": string;
  readonly "tree": {
  /**
* SHA for the commit
*/
readonly "sha": string;
  readonly "url": string
};
  readonly "parents": ReadonlyArray<{
  /**
* SHA for the commit
*/
readonly "sha": string;
  readonly "url": string;
  readonly "html_url": string
}>;
  readonly "verification": {
  readonly "verified": boolean;
  readonly "reason": string;
  readonly "signature": string | null;
  readonly "payload": string | null;
  readonly "verified_at": string | null
};
  readonly "html_url": string
}

export interface GitGetCommitParams {
  
}

export interface GitListMatchingRefsParams {
  
}

/**
* Git references within a repository
*/
export interface GitRef {
  readonly "ref": string;
  readonly "node_id": string;
  readonly "url": string;
  readonly "object": {
  readonly "type": string;
  /**
* SHA for the reference
*/
readonly "sha": string;
  readonly "url": string
}
}

export type GitListMatchingRefs200 = ReadonlyArray<GitRef>

export interface GitGetRefParams {
  
}

export interface GitCreateRefParams {
  
}

export interface GitCreateRefRequest {
  /**
* The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
*/
readonly "ref": string;
  /**
* The SHA1 value for this reference.
*/
readonly "sha": string
}

export interface GitDeleteRefParams {
  
}

export interface GitUpdateRefParams {
  
}

export interface GitUpdateRefRequest {
  /**
* The SHA1 value to set this reference to
*/
readonly "sha": string;
  /**
* Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
*/
readonly "force"?: boolean | undefined
}

export interface GitCreateTagParams {
  
}

/**
* The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
*/
export type GitCreateTagRequestType = "commit" | "tree" | "blob"

export interface GitCreateTagRequest {
  /**
* The tag's name. This is typically a version (e.g., "v0.0.1").
*/
readonly "tag": string;
  /**
* The tag message.
*/
readonly "message": string;
  /**
* The SHA of the git object this is tagging.
*/
readonly "object": string;
  /**
* The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
*/
readonly "type": GitCreateTagRequestType;
  /**
* An object with information about the individual creating the tag.
*/
readonly "tagger"?: {
  /**
* The name of the author of the tag
*/
readonly "name": string;
  /**
* The email of the author of the tag
*/
readonly "email": string;
  /**
* When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
readonly "date"?: string | undefined
} | undefined
}

/**
* Metadata for a Git tag
*/
export interface GitTag {
  readonly "node_id": string;
  /**
* Name of the tag
*/
readonly "tag": string;
  readonly "sha": string;
  /**
* URL for the tag
*/
readonly "url": string;
  /**
* Message describing the purpose of the tag
*/
readonly "message": string;
  readonly "tagger": {
  readonly "date": string;
  readonly "email": string;
  readonly "name": string
};
  readonly "object": {
  readonly "sha": string;
  readonly "type": string;
  readonly "url": string
};
  readonly "verification"?: Verification | undefined
}

export interface GitGetTagParams {
  
}

export interface GitCreateTreeParams {
  
}

export interface GitCreateTreeRequest {
  /**
* Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
*/
readonly "tree": ReadonlyArray<{
  /**
* The file referenced in the tree.
*/
readonly "path"?: string | undefined;
  /**
* The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.
*/
readonly "mode"?: "100644" | "100755" | "040000" | "160000" | "120000" | undefined;
  /**
* Either `blob`, `tree`, or `commit`.
*/
readonly "type"?: "blob" | "tree" | "commit" | undefined;
  /**
* The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.  
*   
* **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
*/
readonly "sha"?: string | null | undefined;
  /**
* The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.  
*   
* **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
*/
readonly "content"?: string | undefined
}>;
  /**
* The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
* If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
*/
readonly "base_tree"?: string | undefined
}

/**
* The hierarchy between files in a Git repository.
*/
export interface GitTree {
  readonly "sha": string;
  readonly "url"?: string | undefined;
  readonly "truncated": boolean;
  /**
* Objects specifying a tree structure
*/
readonly "tree": ReadonlyArray<{
  readonly "path": string;
  readonly "mode": string;
  readonly "type": string;
  readonly "sha": string;
  readonly "size"?: number | undefined;
  readonly "url"?: string | undefined
}>
}

export interface GitGetTreeParams {
  readonly "recursive"?: string | undefined
}

export interface ReposListWebhooksParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface HookResponse {
  readonly "code": number | null;
  readonly "status": string | null;
  readonly "message": string | null
}

/**
* Webhooks for repositories.
*/
export interface Hook {
  readonly "type": string;
  /**
* Unique identifier of the webhook.
*/
readonly "id": number;
  /**
* The name of a valid service, use 'web' for a webhook.
*/
readonly "name": string;
  /**
* Determines whether the hook is actually triggered on pushes.
*/
readonly "active": boolean;
  /**
* Determines what events the hook is triggered for. Default: ['push'].
*/
readonly "events": ReadonlyArray<string>;
  readonly "config": WebhookConfig;
  readonly "updated_at": string;
  readonly "created_at": string;
  readonly "url": string;
  readonly "test_url": string;
  readonly "ping_url": string;
  readonly "deliveries_url"?: string | undefined;
  readonly "last_response": HookResponse
}

export type ReposListWebhooks200 = ReadonlyArray<Hook>

export interface ReposCreateWebhookParams {
  
}

export interface ReposCreateWebhookRequest {
  /**
* Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
*/
readonly "name"?: string | undefined;
  /**
* Key/value pairs to provide settings for this webhook.
*/
readonly "config"?: {
  readonly "url"?: WebhookConfigUrl | undefined;
  readonly "content_type"?: WebhookConfigContentType | undefined;
  readonly "secret"?: WebhookConfigSecret | undefined;
  readonly "insecure_ssl"?: WebhookConfigInsecureSsl | undefined
} | undefined;
  /**
* Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
*/
readonly "events"?: ReadonlyArray<string> | undefined;
  /**
* Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
*/
readonly "active"?: boolean | undefined
}

export interface ReposGetWebhookParams {
  
}

export interface ReposDeleteWebhookParams {
  
}

export interface ReposUpdateWebhookParams {
  
}

export interface ReposUpdateWebhookRequest {
  readonly "config"?: WebhookConfig | undefined;
  /**
* Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
*/
readonly "events"?: ReadonlyArray<string> | undefined;
  /**
* Determines a list of events to be added to the list of events that the Hook triggers for.
*/
readonly "add_events"?: ReadonlyArray<string> | undefined;
  /**
* Determines a list of events to be removed from the list of events that the Hook triggers for.
*/
readonly "remove_events"?: ReadonlyArray<string> | undefined;
  /**
* Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
*/
readonly "active"?: boolean | undefined
}

export interface ReposGetWebhookConfigForRepoParams {
  
}

export interface ReposUpdateWebhookConfigForRepoParams {
  
}

export interface ReposUpdateWebhookConfigForRepoRequest {
  readonly "url"?: WebhookConfigUrl | undefined;
  readonly "content_type"?: WebhookConfigContentType | undefined;
  readonly "secret"?: WebhookConfigSecret | undefined;
  readonly "insecure_ssl"?: WebhookConfigInsecureSsl | undefined
}

export interface ReposListWebhookDeliveriesParams {
  readonly "per_page"?: number | undefined;
  readonly "cursor"?: string | undefined
}

export type ReposListWebhookDeliveries200 = ReadonlyArray<HookDeliveryItem>

export interface ReposGetWebhookDeliveryParams {
  
}

export interface ReposRedeliverWebhookDeliveryParams {
  
}

export type ReposRedeliverWebhookDelivery202 = Record<string, unknown>

export interface ReposPingWebhookParams {
  
}

export interface ReposTestPushWebhookParams {
  
}

export interface MigrationsGetImportStatusParams {
  
}

export type ImportStatus = "auth" | "error" | "none" | "detecting" | "choose" | "auth_failed" | "importing" | "mapping" | "waiting_to_push" | "pushing" | "complete" | "setup" | "unknown" | "detection_found_multiple" | "detection_found_nothing" | "detection_needs_auth"

/**
* A repository import from an external source.
*/
export interface Import {
  readonly "vcs": string | null;
  readonly "use_lfs"?: boolean | undefined;
  /**
* The URL of the originating repository.
*/
readonly "vcs_url": string;
  readonly "svc_root"?: string | undefined;
  readonly "tfvc_project"?: string | undefined;
  readonly "status": ImportStatus;
  readonly "status_text"?: string | null | undefined;
  readonly "failed_step"?: string | null | undefined;
  readonly "error_message"?: string | null | undefined;
  readonly "import_percent"?: number | null | undefined;
  readonly "commit_count"?: number | null | undefined;
  readonly "push_percent"?: number | null | undefined;
  readonly "has_large_files"?: boolean | undefined;
  readonly "large_files_size"?: number | undefined;
  readonly "large_files_count"?: number | undefined;
  readonly "project_choices"?: ReadonlyArray<{
  readonly "vcs"?: string | undefined;
  readonly "tfvc_project"?: string | undefined;
  readonly "human_name"?: string | undefined
}> | undefined;
  readonly "message"?: string | undefined;
  readonly "authors_count"?: number | null | undefined;
  readonly "url": string;
  readonly "html_url": string;
  readonly "authors_url": string;
  readonly "repository_url": string;
  readonly "svn_root"?: string | undefined
}

export interface MigrationsStartImportParams {
  
}

/**
* The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
*/
export type MigrationsStartImportRequestVcs = "subversion" | "git" | "mercurial" | "tfvc"

export interface MigrationsStartImportRequest {
  /**
* The URL of the originating repository.
*/
readonly "vcs_url": string;
  /**
* The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
*/
readonly "vcs"?: MigrationsStartImportRequestVcs | undefined;
  /**
* If authentication is required, the username to provide to `vcs_url`.
*/
readonly "vcs_username"?: string | undefined;
  /**
* If authentication is required, the password to provide to `vcs_url`.
*/
readonly "vcs_password"?: string | undefined;
  /**
* For a tfvc import, the name of the project that is being imported.
*/
readonly "tfvc_project"?: string | undefined
}

export interface MigrationsCancelImportParams {
  
}

export interface MigrationsUpdateImportParams {
  
}

/**
* The type of version control system you are migrating from.
*/
export type MigrationsUpdateImportRequestVcs = "subversion" | "tfvc" | "git" | "mercurial"

export interface MigrationsUpdateImportRequest {
  /**
* The username to provide to the originating repository.
*/
readonly "vcs_username"?: string | undefined;
  /**
* The password to provide to the originating repository.
*/
readonly "vcs_password"?: string | undefined;
  /**
* The type of version control system you are migrating from.
*/
readonly "vcs"?: MigrationsUpdateImportRequestVcs | undefined;
  /**
* For a tfvc import, the name of the project that is being imported.
*/
readonly "tfvc_project"?: string | undefined
}

export interface MigrationsGetCommitAuthorsParams {
  readonly "since"?: number | undefined
}

/**
* Porter Author
*/
export interface PorterAuthor {
  readonly "id": number;
  readonly "remote_id": string;
  readonly "remote_name": string;
  readonly "email": string;
  readonly "name": string;
  readonly "url": string;
  readonly "import_url": string
}

export type MigrationsGetCommitAuthors200 = ReadonlyArray<PorterAuthor>

export interface MigrationsMapCommitAuthorParams {
  
}

export interface MigrationsMapCommitAuthorRequest {
  /**
* The new Git author email.
*/
readonly "email"?: string | undefined;
  /**
* The new Git author name.
*/
readonly "name"?: string | undefined
}

export interface MigrationsGetLargeFilesParams {
  
}

/**
* Porter Large File
*/
export interface PorterLargeFile {
  readonly "ref_name": string;
  readonly "path": string;
  readonly "oid": string;
  readonly "size": number
}

export type MigrationsGetLargeFiles200 = ReadonlyArray<PorterLargeFile>

export interface MigrationsSetLfsPreferenceParams {
  
}

/**
* Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import.
*/
export type MigrationsSetLfsPreferenceRequestUseLfs = "opt_in" | "opt_out"

export interface MigrationsSetLfsPreferenceRequest {
  /**
* Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import.
*/
readonly "use_lfs": MigrationsSetLfsPreferenceRequestUseLfs
}

export interface AppsGetRepoInstallationParams {
  
}

export interface InteractionsGetRestrictionsForRepoParams {
  
}

export type InteractionsGetRestrictionsForRepo200 = InteractionLimitResponse | {
  
}

export interface InteractionsSetRestrictionsForRepoParams {
  
}

export interface InteractionsRemoveRestrictionsForRepoParams {
  
}

export interface ReposListInvitationsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ReposListInvitations200 = ReadonlyArray<RepositoryInvitation>

export interface ReposDeleteInvitationParams {
  
}

export interface ReposUpdateInvitationParams {
  
}

/**
* The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
*/
export type ReposUpdateInvitationRequestPermissions = "read" | "write" | "maintain" | "triage" | "admin"

export interface ReposUpdateInvitationRequest {
  /**
* The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
*/
readonly "permissions"?: ReposUpdateInvitationRequestPermissions | undefined
}

export type IssuesListForRepoParamsState = "open" | "closed" | "all"

export type IssuesListForRepoParamsSort = "created" | "updated" | "comments"

export type IssuesListForRepoParamsDirection = "asc" | "desc"

export interface IssuesListForRepoParams {
  readonly "milestone"?: string | undefined;
  readonly "state"?: IssuesListForRepoParamsState | undefined;
  readonly "assignee"?: string | undefined;
  readonly "type"?: string | undefined;
  readonly "creator"?: string | undefined;
  readonly "mentioned"?: string | undefined;
  readonly "labels"?: string | undefined;
  readonly "sort"?: IssuesListForRepoParamsSort | undefined;
  readonly "direction"?: IssuesListForRepoParamsDirection | undefined;
  readonly "since"?: string | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type IssuesListForRepo200 = ReadonlyArray<Issue>

export interface IssuesCreateParams {
  
}

export interface IssuesCreateRequest {
  /**
* The title of the issue.
*/
readonly "title": string | number;
  /**
* The contents of the issue.
*/
readonly "body"?: string | undefined;
  /**
* Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is closing down.**_
*/
readonly "assignee"?: string | null | undefined;
  readonly "milestone"?: string | number | null | undefined;
  /**
* Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
*/
readonly "labels"?: ReadonlyArray<string | {
  readonly "id"?: number | undefined;
  readonly "name"?: string | undefined;
  readonly "description"?: string | null | undefined;
  readonly "color"?: string | null | undefined
}> | undefined;
  /**
* Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
*/
readonly "assignees"?: ReadonlyArray<string> | undefined;
  /**
* The name of the issue type to associate with this issue. _NOTE: Only users with push access can set the type for new issues. The type is silently dropped otherwise._
*/
readonly "type"?: string | null | undefined
}

export interface IssuesCreate503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export type IssuesListCommentsForRepoParamsSort = "created" | "updated"

export type IssuesListCommentsForRepoParamsDirection = "asc" | "desc"

export interface IssuesListCommentsForRepoParams {
  readonly "sort"?: IssuesListCommentsForRepoParamsSort | undefined;
  readonly "direction"?: IssuesListCommentsForRepoParamsDirection | undefined;
  readonly "since"?: string | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type IssuesListCommentsForRepo200 = ReadonlyArray<IssueComment>

export interface IssuesGetCommentParams {
  
}

export interface IssuesDeleteCommentParams {
  
}

export interface IssuesUpdateCommentParams {
  
}

export interface IssuesUpdateCommentRequest {
  /**
* The contents of the comment.
*/
readonly "body": string
}

export type ReactionsListForIssueCommentParamsContent = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes"

export interface ReactionsListForIssueCommentParams {
  readonly "content"?: ReactionsListForIssueCommentParamsContent | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ReactionsListForIssueComment200 = ReadonlyArray<Reaction>

export interface ReactionsCreateForIssueCommentParams {
  
}

/**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue comment.
*/
export type ReactionsCreateForIssueCommentRequestContent = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes"

export interface ReactionsCreateForIssueCommentRequest {
  /**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue comment.
*/
readonly "content": ReactionsCreateForIssueCommentRequestContent
}

export interface ReactionsDeleteForIssueCommentParams {
  
}

export interface IssuesListEventsForRepoParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* The reason for the current state
*/
export type NullableIssueStateReason = "completed" | "reopened" | "not_planned" | "duplicate"

/**
* Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
*/
export interface NullableIssue {
  readonly "id": number;
  readonly "node_id": string;
  /**
* URL for the issue
*/
readonly "url": string;
  readonly "repository_url": string;
  readonly "labels_url": string;
  readonly "comments_url": string;
  readonly "events_url": string;
  readonly "html_url": string;
  /**
* Number uniquely identifying the issue within its repository
*/
readonly "number": number;
  /**
* State of the issue; either 'open' or 'closed'
*/
readonly "state": string;
  /**
* The reason for the current state
*/
readonly "state_reason"?: NullableIssueStateReason | null | undefined;
  /**
* Title of the issue
*/
readonly "title": string;
  /**
* Contents of the issue
*/
readonly "body"?: string | null | undefined;
  readonly "user": NullableSimpleUser | null;
  /**
* Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
*/
readonly "labels": ReadonlyArray<string | {
  readonly "id"?: number | undefined;
  readonly "node_id"?: string | undefined;
  readonly "url"?: string | undefined;
  readonly "name"?: string | undefined;
  readonly "description"?: string | null | undefined;
  readonly "color"?: string | null | undefined;
  readonly "default"?: boolean | undefined
}>;
  readonly "assignee": NullableSimpleUser | null;
  readonly "assignees"?: ReadonlyArray<SimpleUser> | null | undefined;
  readonly "milestone": NullableMilestone | null;
  readonly "locked": boolean;
  readonly "active_lock_reason"?: string | null | undefined;
  readonly "comments": number;
  readonly "pull_request"?: {
  readonly "merged_at"?: string | null | undefined;
  readonly "diff_url": string | null;
  readonly "html_url": string | null;
  readonly "patch_url": string | null;
  readonly "url": string | null
} | undefined;
  readonly "closed_at": string | null;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "draft"?: boolean | undefined;
  readonly "closed_by"?: NullableSimpleUser | null | undefined;
  readonly "body_html"?: string | undefined;
  readonly "body_text"?: string | undefined;
  readonly "timeline_url"?: string | undefined;
  readonly "type"?: IssueType | null | undefined;
  readonly "repository"?: Repository | undefined;
  readonly "performed_via_github_app"?: NullableIntegration | null | undefined;
  readonly "author_association": AuthorAssociation;
  readonly "reactions"?: ReactionRollup | undefined;
  readonly "sub_issues_summary"?: SubIssuesSummary | undefined;
  readonly "issue_dependencies_summary"?: IssueDependenciesSummary | undefined;
  readonly "issue_field_values"?: ReadonlyArray<IssueFieldValue> | undefined
}

/**
* Issue Event Label
*/
export interface IssueEventLabel {
  readonly "name": string | null;
  readonly "color": string | null
}

export interface IssueEventDismissedReview {
  readonly "state": string;
  readonly "review_id": number;
  readonly "dismissal_message": string | null;
  readonly "dismissal_commit_id"?: string | null | undefined
}

/**
* Issue Event Milestone
*/
export interface IssueEventMilestone {
  readonly "title": string
}

/**
* Issue Event Project Card
*/
export interface IssueEventProjectCard {
  readonly "url": string;
  readonly "id": number;
  readonly "project_url": string;
  readonly "project_id": number;
  readonly "column_name": string;
  readonly "previous_column_name"?: string | undefined
}

/**
* Issue Event Rename
*/
export interface IssueEventRename {
  readonly "from": string;
  readonly "to": string
}

/**
* Issue Event
*/
export interface IssueEvent {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "actor": NullableSimpleUser | null;
  readonly "event": string;
  readonly "commit_id": string | null;
  readonly "commit_url": string | null;
  readonly "created_at": string;
  readonly "issue"?: NullableIssue | null | undefined;
  readonly "label"?: IssueEventLabel | undefined;
  readonly "assignee"?: NullableSimpleUser | null | undefined;
  readonly "assigner"?: NullableSimpleUser | null | undefined;
  readonly "review_requester"?: NullableSimpleUser | null | undefined;
  readonly "requested_reviewer"?: NullableSimpleUser | null | undefined;
  readonly "requested_team"?: Team | undefined;
  readonly "dismissed_review"?: IssueEventDismissedReview | undefined;
  readonly "milestone"?: IssueEventMilestone | undefined;
  readonly "project_card"?: IssueEventProjectCard | undefined;
  readonly "rename"?: IssueEventRename | undefined;
  readonly "author_association"?: AuthorAssociation | undefined;
  readonly "lock_reason"?: string | null | undefined;
  readonly "performed_via_github_app"?: NullableIntegration | null | undefined
}

export type IssuesListEventsForRepo200 = ReadonlyArray<IssueEvent>

export interface IssuesGetEventParams {
  
}

export interface IssuesGetParams {
  
}

export interface IssuesUpdateParams {
  
}

/**
* The open or closed state of the issue.
*/
export type IssuesUpdateRequestState = "open" | "closed"

/**
* The reason for the state change. Ignored unless `state` is changed.
*/
export type IssuesUpdateRequestStateReason = "completed" | "not_planned" | "duplicate" | "reopened"

export interface IssuesUpdateRequest {
  /**
* The title of the issue.
*/
readonly "title"?: string | number | null | undefined;
  /**
* The contents of the issue.
*/
readonly "body"?: string | null | undefined;
  /**
* Username to assign to this issue. **This field is closing down.**
*/
readonly "assignee"?: string | null | undefined;
  /**
* The open or closed state of the issue.
*/
readonly "state"?: IssuesUpdateRequestState | undefined;
  /**
* The reason for the state change. Ignored unless `state` is changed.
*/
readonly "state_reason"?: IssuesUpdateRequestStateReason | null | undefined;
  readonly "milestone"?: string | number | null | undefined;
  /**
* Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
*/
readonly "labels"?: ReadonlyArray<string | {
  readonly "id"?: number | undefined;
  readonly "name"?: string | undefined;
  readonly "description"?: string | null | undefined;
  readonly "color"?: string | null | undefined
}> | undefined;
  /**
* Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.
*/
readonly "assignees"?: ReadonlyArray<string> | undefined;
  /**
* The name of the issue type to associate with this issue or use `null` to remove the current issue type. Only users with push access can set the type for issues. Without push access to the repository, type changes are silently dropped.
*/
readonly "type"?: string | null | undefined
}

export interface IssuesUpdate503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface IssuesAddAssigneesParams {
  
}

export interface IssuesAddAssigneesRequest {
  /**
* Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._
*/
readonly "assignees"?: ReadonlyArray<string> | undefined
}

export interface IssuesRemoveAssigneesParams {
  
}

export interface IssuesRemoveAssigneesRequest {
  /**
* Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._
*/
readonly "assignees"?: ReadonlyArray<string> | undefined
}

export interface IssuesCheckUserCanBeAssignedToIssueParams {
  
}

export interface IssuesListCommentsParams {
  readonly "since"?: string | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type IssuesListComments200 = ReadonlyArray<IssueComment>

export interface IssuesCreateCommentParams {
  
}

export interface IssuesCreateCommentRequest {
  /**
* The contents of the comment.
*/
readonly "body": string
}

export interface IssuesListDependenciesBlockedByParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type IssuesListDependenciesBlockedBy200 = ReadonlyArray<Issue>

export interface IssuesAddBlockedByDependencyParams {
  
}

export interface IssuesAddBlockedByDependencyRequest {
  /**
* The id of the issue that blocks the current issue
*/
readonly "issue_id": number
}

export interface IssuesRemoveDependencyBlockedByParams {
  
}

export interface IssuesListDependenciesBlockingParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type IssuesListDependenciesBlocking200 = ReadonlyArray<Issue>

export interface IssuesListEventsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Labeled Issue Event
*/
export interface LabeledIssueEvent {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "actor": SimpleUser;
  readonly "event": string;
  readonly "commit_id": string | null;
  readonly "commit_url": string | null;
  readonly "created_at": string;
  readonly "performed_via_github_app": NullableIntegration | null;
  readonly "label": {
  readonly "name": string;
  readonly "color": string
}
}

/**
* Unlabeled Issue Event
*/
export interface UnlabeledIssueEvent {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "actor": SimpleUser;
  readonly "event": string;
  readonly "commit_id": string | null;
  readonly "commit_url": string | null;
  readonly "created_at": string;
  readonly "performed_via_github_app": NullableIntegration | null;
  readonly "label": {
  readonly "name": string;
  readonly "color": string
}
}

/**
* Assigned Issue Event
*/
export interface AssignedIssueEvent {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "actor": SimpleUser;
  readonly "event": string;
  readonly "commit_id": string | null;
  readonly "commit_url": string | null;
  readonly "created_at": string;
  readonly "performed_via_github_app": Integration | null;
  readonly "assignee": SimpleUser;
  readonly "assigner": SimpleUser
}

/**
* Unassigned Issue Event
*/
export interface UnassignedIssueEvent {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "actor": SimpleUser;
  readonly "event": string;
  readonly "commit_id": string | null;
  readonly "commit_url": string | null;
  readonly "created_at": string;
  readonly "performed_via_github_app": NullableIntegration | null;
  readonly "assignee": SimpleUser;
  readonly "assigner": SimpleUser
}

/**
* Milestoned Issue Event
*/
export interface MilestonedIssueEvent {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "actor": SimpleUser;
  readonly "event": string;
  readonly "commit_id": string | null;
  readonly "commit_url": string | null;
  readonly "created_at": string;
  readonly "performed_via_github_app": NullableIntegration | null;
  readonly "milestone": {
  readonly "title": string
}
}

/**
* Demilestoned Issue Event
*/
export interface DemilestonedIssueEvent {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "actor": SimpleUser;
  readonly "event": string;
  readonly "commit_id": string | null;
  readonly "commit_url": string | null;
  readonly "created_at": string;
  readonly "performed_via_github_app": NullableIntegration | null;
  readonly "milestone": {
  readonly "title": string
}
}

/**
* Renamed Issue Event
*/
export interface RenamedIssueEvent {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "actor": SimpleUser;
  readonly "event": string;
  readonly "commit_id": string | null;
  readonly "commit_url": string | null;
  readonly "created_at": string;
  readonly "performed_via_github_app": NullableIntegration | null;
  readonly "rename": {
  readonly "from": string;
  readonly "to": string
}
}

/**
* Review Requested Issue Event
*/
export interface ReviewRequestedIssueEvent {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "actor": SimpleUser;
  readonly "event": string;
  readonly "commit_id": string | null;
  readonly "commit_url": string | null;
  readonly "created_at": string;
  readonly "performed_via_github_app": NullableIntegration | null;
  readonly "review_requester": SimpleUser;
  readonly "requested_team"?: Team | undefined;
  readonly "requested_reviewer"?: SimpleUser | undefined
}

/**
* Review Request Removed Issue Event
*/
export interface ReviewRequestRemovedIssueEvent {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "actor": SimpleUser;
  readonly "event": string;
  readonly "commit_id": string | null;
  readonly "commit_url": string | null;
  readonly "created_at": string;
  readonly "performed_via_github_app": NullableIntegration | null;
  readonly "review_requester": SimpleUser;
  readonly "requested_team"?: Team | undefined;
  readonly "requested_reviewer"?: SimpleUser | undefined
}

/**
* Review Dismissed Issue Event
*/
export interface ReviewDismissedIssueEvent {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "actor": SimpleUser;
  readonly "event": string;
  readonly "commit_id": string | null;
  readonly "commit_url": string | null;
  readonly "created_at": string;
  readonly "performed_via_github_app": NullableIntegration | null;
  readonly "dismissed_review": {
  readonly "state": string;
  readonly "review_id": number;
  readonly "dismissal_message": string | null;
  readonly "dismissal_commit_id"?: string | undefined
}
}

/**
* Locked Issue Event
*/
export interface LockedIssueEvent {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "actor": SimpleUser;
  readonly "event": string;
  readonly "commit_id": string | null;
  readonly "commit_url": string | null;
  readonly "created_at": string;
  readonly "performed_via_github_app": NullableIntegration | null;
  readonly "lock_reason": string | null
}

/**
* Added to Project Issue Event
*/
export interface AddedToProjectIssueEvent {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "actor": SimpleUser;
  readonly "event": string;
  readonly "commit_id": string | null;
  readonly "commit_url": string | null;
  readonly "created_at": string;
  readonly "performed_via_github_app": NullableIntegration | null;
  readonly "project_card"?: {
  readonly "id": number;
  readonly "url": string;
  readonly "project_id": number;
  readonly "project_url": string;
  readonly "column_name": string;
  readonly "previous_column_name"?: string | undefined
} | undefined
}

/**
* Moved Column in Project Issue Event
*/
export interface MovedColumnInProjectIssueEvent {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "actor": SimpleUser;
  readonly "event": string;
  readonly "commit_id": string | null;
  readonly "commit_url": string | null;
  readonly "created_at": string;
  readonly "performed_via_github_app": NullableIntegration | null;
  readonly "project_card"?: {
  readonly "id": number;
  readonly "url": string;
  readonly "project_id": number;
  readonly "project_url": string;
  readonly "column_name": string;
  readonly "previous_column_name"?: string | undefined
} | undefined
}

/**
* Removed from Project Issue Event
*/
export interface RemovedFromProjectIssueEvent {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "actor": SimpleUser;
  readonly "event": string;
  readonly "commit_id": string | null;
  readonly "commit_url": string | null;
  readonly "created_at": string;
  readonly "performed_via_github_app": NullableIntegration | null;
  readonly "project_card"?: {
  readonly "id": number;
  readonly "url": string;
  readonly "project_id": number;
  readonly "project_url": string;
  readonly "column_name": string;
  readonly "previous_column_name"?: string | undefined
} | undefined
}

/**
* Converted Note to Issue Issue Event
*/
export interface ConvertedNoteToIssueIssueEvent {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "actor": SimpleUser;
  readonly "event": string;
  readonly "commit_id": string | null;
  readonly "commit_url": string | null;
  readonly "created_at": string;
  readonly "performed_via_github_app": Integration | null;
  readonly "project_card"?: {
  readonly "id": number;
  readonly "url": string;
  readonly "project_id": number;
  readonly "project_url": string;
  readonly "column_name": string;
  readonly "previous_column_name"?: string | undefined
} | undefined
}

/**
* Issue Event for Issue
*/
export type IssueEventForIssue = LabeledIssueEvent | UnlabeledIssueEvent | AssignedIssueEvent | UnassignedIssueEvent | MilestonedIssueEvent | DemilestonedIssueEvent | RenamedIssueEvent | ReviewRequestedIssueEvent | ReviewRequestRemovedIssueEvent | ReviewDismissedIssueEvent | LockedIssueEvent | AddedToProjectIssueEvent | MovedColumnInProjectIssueEvent | RemovedFromProjectIssueEvent | ConvertedNoteToIssueIssueEvent

export type IssuesListEvents200 = ReadonlyArray<IssueEventForIssue>

export interface IssuesListLabelsOnIssueParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
*/
export interface Label {
  /**
* Unique identifier for the label.
*/
readonly "id": number;
  readonly "node_id": string;
  /**
* URL for the label
*/
readonly "url": string;
  /**
* The name of the label.
*/
readonly "name": string;
  /**
* Optional description of the label, such as its purpose.
*/
readonly "description": string | null;
  /**
* 6-character hex code, without the leading #, identifying the color
*/
readonly "color": string;
  /**
* Whether this label comes by default in a new repository.
*/
readonly "default": boolean
}

export type IssuesListLabelsOnIssue200 = ReadonlyArray<Label>

export interface IssuesSetLabelsParams {
  
}

export const IssuesSetLabelsRequest = {
  /**
* The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/rest/issues/labels#add-labels-to-an-issue)."
*/
readonly "labels"?: ReadonlyArray<string> | undefined
} | ReadonlyArray<string> | {
  readonly "labels"?: ReadonlyArray<{
  readonly "name": string
}> | undefined
} | ReadonlyArray<{
  readonly "name": string
}> | string;
export type IssuesSetLabelsRequest = (typeof IssuesSetLabelsRequest)[keyof typeof IssuesSetLabelsRequest];

export type IssuesSetLabels200 = ReadonlyArray<Label>

export interface IssuesAddLabelsParams {
  
}

export const IssuesAddLabelsRequest = {
  /**
* The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/rest/issues/labels#set-labels-for-an-issue)."
*/
readonly "labels"?: ReadonlyArray<string> | undefined
} | ReadonlyArray<string> | {
  readonly "labels"?: ReadonlyArray<{
  readonly "name": string
}> | undefined
} | ReadonlyArray<{
  readonly "name": string
}> | string;
export type IssuesAddLabelsRequest = (typeof IssuesAddLabelsRequest)[keyof typeof IssuesAddLabelsRequest];

export type IssuesAddLabels200 = ReadonlyArray<Label>

export interface IssuesRemoveAllLabelsParams {
  
}

export interface IssuesRemoveLabelParams {
  
}

export type IssuesRemoveLabel200 = ReadonlyArray<Label>

export interface IssuesLockParams {
  
}

/**
* The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  
*  * `off-topic`  
*  * `too heated`  
*  * `resolved`  
*  * `spam`
*/
export type IssuesLockRequestLockReason = "off-topic" | "too heated" | "resolved" | "spam"

export interface IssuesLockRequest {
  /**
* The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  
*  * `off-topic`  
*  * `too heated`  
*  * `resolved`  
*  * `spam`
*/
readonly "lock_reason"?: IssuesLockRequestLockReason | undefined
}

export interface IssuesUnlockParams {
  
}

export type ReactionsListForIssueParamsContent = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes"

export interface ReactionsListForIssueParams {
  readonly "content"?: ReactionsListForIssueParamsContent | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ReactionsListForIssue200 = ReadonlyArray<Reaction>

export interface ReactionsCreateForIssueParams {
  
}

/**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue.
*/
export type ReactionsCreateForIssueRequestContent = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes"

export interface ReactionsCreateForIssueRequest {
  /**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue.
*/
readonly "content": ReactionsCreateForIssueRequestContent
}

export interface ReactionsDeleteForIssueParams {
  
}

export interface IssuesRemoveSubIssueParams {
  
}

export interface IssuesRemoveSubIssueRequest {
  /**
* The id of the sub-issue to remove
*/
readonly "sub_issue_id": number
}

export interface IssuesListSubIssuesParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type IssuesListSubIssues200 = ReadonlyArray<Issue>

export interface IssuesAddSubIssueParams {
  
}

export interface IssuesAddSubIssueRequest {
  /**
* The id of the sub-issue to add. The sub-issue must belong to the same repository owner as the parent issue
*/
readonly "sub_issue_id": number;
  /**
* Option that, when true, instructs the operation to replace the sub-issues current parent issue
*/
readonly "replace_parent"?: boolean | undefined
}

export interface IssuesReprioritizeSubIssueParams {
  
}

export interface IssuesReprioritizeSubIssueRequest {
  /**
* The id of the sub-issue to reprioritize
*/
readonly "sub_issue_id": number;
  /**
* The id of the sub-issue to be prioritized after (either positional argument after OR before should be specified).
*/
readonly "after_id"?: number | undefined;
  /**
* The id of the sub-issue to be prioritized before (either positional argument after OR before should be specified).
*/
readonly "before_id"?: number | undefined
}

export interface IssuesReprioritizeSubIssue503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface IssuesListEventsForTimelineParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Timeline Comment Event
*/
export interface TimelineCommentEvent {
  readonly "event": string;
  readonly "actor": SimpleUser;
  /**
* Unique identifier of the issue comment
*/
readonly "id": number;
  readonly "node_id": string;
  /**
* URL for the issue comment
*/
readonly "url": string;
  /**
* Contents of the issue comment
*/
readonly "body"?: string | undefined;
  readonly "body_text"?: string | undefined;
  readonly "body_html"?: string | undefined;
  readonly "html_url": string;
  readonly "user": SimpleUser;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "issue_url": string;
  readonly "author_association": AuthorAssociation;
  readonly "performed_via_github_app"?: NullableIntegration | null | undefined;
  readonly "reactions"?: ReactionRollup | undefined
}

/**
* Timeline Cross Referenced Event
*/
export interface TimelineCrossReferencedEvent {
  readonly "event": string;
  readonly "actor"?: SimpleUser | undefined;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "source": {
  readonly "type"?: string | undefined;
  readonly "issue"?: Issue | undefined
}
}

/**
* Timeline Committed Event
*/
export interface TimelineCommittedEvent {
  readonly "event"?: string | undefined;
  /**
* SHA for the commit
*/
readonly "sha": string;
  readonly "node_id": string;
  readonly "url": string;
  /**
* Identifying information for the git-user
*/
readonly "author": {
  /**
* Timestamp of the commit
*/
readonly "date": string;
  /**
* Git email address of the user
*/
readonly "email": string;
  /**
* Name of the git user
*/
readonly "name": string
};
  /**
* Identifying information for the git-user
*/
readonly "committer": {
  /**
* Timestamp of the commit
*/
readonly "date": string;
  /**
* Git email address of the user
*/
readonly "email": string;
  /**
* Name of the git user
*/
readonly "name": string
};
  /**
* Message describing the purpose of the commit
*/
readonly "message": string;
  readonly "tree": {
  /**
* SHA for the commit
*/
readonly "sha": string;
  readonly "url": string
};
  readonly "parents": ReadonlyArray<{
  /**
* SHA for the commit
*/
readonly "sha": string;
  readonly "url": string;
  readonly "html_url": string
}>;
  readonly "verification": {
  readonly "verified": boolean;
  readonly "reason": string;
  readonly "signature": string | null;
  readonly "payload": string | null;
  readonly "verified_at": string | null
};
  readonly "html_url": string
}

/**
* Timeline Reviewed Event
*/
export interface TimelineReviewedEvent {
  readonly "event": string;
  /**
* Unique identifier of the review
*/
readonly "id": number;
  readonly "node_id": string;
  readonly "user": SimpleUser;
  /**
* The text of the review.
*/
readonly "body": string | null;
  readonly "state": string;
  readonly "html_url": string;
  readonly "pull_request_url": string;
  readonly "_links": {
  readonly "html": {
  readonly "href": string
};
  readonly "pull_request": {
  readonly "href": string
}
};
  readonly "submitted_at"?: string | undefined;
  readonly "updated_at"?: string | null | undefined;
  /**
* A commit SHA for the review.
*/
readonly "commit_id": string;
  readonly "body_html"?: string | undefined;
  readonly "body_text"?: string | undefined;
  readonly "author_association": AuthorAssociation
}

/**
* The side of the first line of the range for a multi-line comment.
*/
export type PullRequestReviewCommentStartSide = "LEFT" | "RIGHT"

/**
* The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
*/
export type PullRequestReviewCommentSide = "LEFT" | "RIGHT"

/**
* The level at which the comment is targeted, can be a diff line or a file.
*/
export type PullRequestReviewCommentSubjectType = "line" | "file"

/**
* Pull Request Review Comments are comments on a portion of the Pull Request's diff.
*/
export interface PullRequestReviewComment {
  /**
* URL for the pull request review comment
*/
readonly "url": string;
  /**
* The ID of the pull request review to which the comment belongs.
*/
readonly "pull_request_review_id": number | null;
  /**
* The ID of the pull request review comment.
*/
readonly "id": number;
  /**
* The node ID of the pull request review comment.
*/
readonly "node_id": string;
  /**
* The diff of the line that the comment refers to.
*/
readonly "diff_hunk": string;
  /**
* The relative path of the file to which the comment applies.
*/
readonly "path": string;
  /**
* The line index in the diff to which the comment applies. This field is closing down; use `line` instead.
*/
readonly "position"?: number | undefined;
  /**
* The index of the original line in the diff to which the comment applies. This field is closing down; use `original_line` instead.
*/
readonly "original_position"?: number | undefined;
  /**
* The SHA of the commit to which the comment applies.
*/
readonly "commit_id": string;
  /**
* The SHA of the original commit to which the comment applies.
*/
readonly "original_commit_id": string;
  /**
* The comment ID to reply to.
*/
readonly "in_reply_to_id"?: number | undefined;
  readonly "user": SimpleUser;
  /**
* The text of the comment.
*/
readonly "body": string;
  readonly "created_at": string;
  readonly "updated_at": string;
  /**
* HTML URL for the pull request review comment.
*/
readonly "html_url": string;
  /**
* URL for the pull request that the review comment belongs to.
*/
readonly "pull_request_url": string;
  readonly "author_association": AuthorAssociation;
  readonly "_links": {
  readonly "self": {
  readonly "href": string
};
  readonly "html": {
  readonly "href": string
};
  readonly "pull_request": {
  readonly "href": string
}
};
  /**
* The first line of the range for a multi-line comment.
*/
readonly "start_line"?: number | null | undefined;
  /**
* The first line of the range for a multi-line comment.
*/
readonly "original_start_line"?: number | null | undefined;
  /**
* The side of the first line of the range for a multi-line comment.
*/
readonly "start_side"?: PullRequestReviewCommentStartSide | null | undefined;
  /**
* The line of the blob to which the comment applies. The last line of the range for a multi-line comment
*/
readonly "line"?: number | undefined;
  /**
* The line of the blob to which the comment applies. The last line of the range for a multi-line comment
*/
readonly "original_line"?: number | undefined;
  /**
* The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
*/
readonly "side"?: PullRequestReviewCommentSide | undefined;
  /**
* The level at which the comment is targeted, can be a diff line or a file.
*/
readonly "subject_type"?: PullRequestReviewCommentSubjectType | undefined;
  readonly "reactions"?: ReactionRollup | undefined;
  readonly "body_html"?: string | undefined;
  readonly "body_text"?: string | undefined
}

/**
* Timeline Line Commented Event
*/
export interface TimelineLineCommentedEvent {
  readonly "event"?: string | undefined;
  readonly "node_id"?: string | undefined;
  readonly "comments"?: ReadonlyArray<PullRequestReviewComment> | undefined
}

/**
* Timeline Commit Commented Event
*/
export interface TimelineCommitCommentedEvent {
  readonly "event"?: string | undefined;
  readonly "node_id"?: string | undefined;
  readonly "commit_id"?: string | undefined;
  readonly "comments"?: ReadonlyArray<CommitComment> | undefined
}

/**
* Timeline Assigned Issue Event
*/
export interface TimelineAssignedIssueEvent {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "actor": SimpleUser;
  readonly "event": string;
  readonly "commit_id": string | null;
  readonly "commit_url": string | null;
  readonly "created_at": string;
  readonly "performed_via_github_app": NullableIntegration | null;
  readonly "assignee": SimpleUser
}

/**
* Timeline Unassigned Issue Event
*/
export interface TimelineUnassignedIssueEvent {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "actor": SimpleUser;
  readonly "event": string;
  readonly "commit_id": string | null;
  readonly "commit_url": string | null;
  readonly "created_at": string;
  readonly "performed_via_github_app": NullableIntegration | null;
  readonly "assignee": SimpleUser
}

/**
* State Change Issue Event
*/
export interface StateChangeIssueEvent {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "actor": SimpleUser;
  readonly "event": string;
  readonly "commit_id": string | null;
  readonly "commit_url": string | null;
  readonly "created_at": string;
  readonly "performed_via_github_app": NullableIntegration | null;
  readonly "state_reason"?: string | null | undefined
}

/**
* Timeline Event
*/
export type TimelineIssueEvents = Record<string, unknown>

export type IssuesListEventsForTimeline200 = ReadonlyArray<TimelineIssueEvents>

export interface ReposListDeployKeysParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* An SSH key granting access to a single repository.
*/
export interface DeployKey {
  readonly "id": number;
  readonly "key": string;
  readonly "url": string;
  readonly "title": string;
  readonly "verified": boolean;
  readonly "created_at": string;
  readonly "read_only": boolean;
  readonly "added_by"?: string | null | undefined;
  readonly "last_used"?: string | null | undefined;
  readonly "enabled"?: boolean | undefined
}

export type ReposListDeployKeys200 = ReadonlyArray<DeployKey>

export interface ReposCreateDeployKeyParams {
  
}

export interface ReposCreateDeployKeyRequest {
  /**
* A name for the key.
*/
readonly "title"?: string | undefined;
  /**
* The contents of the key.
*/
readonly "key": string;
  /**
* If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  
*   
* Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
*/
readonly "read_only"?: boolean | undefined
}

export interface ReposGetDeployKeyParams {
  
}

export interface ReposDeleteDeployKeyParams {
  
}

export interface IssuesListLabelsForRepoParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type IssuesListLabelsForRepo200 = ReadonlyArray<Label>

export interface IssuesCreateLabelParams {
  
}

export interface IssuesCreateLabelRequest {
  /**
* The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
*/
readonly "name": string;
  /**
* The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
*/
readonly "color"?: string | undefined;
  /**
* A short description of the label. Must be 100 characters or fewer.
*/
readonly "description"?: string | undefined
}

export interface IssuesGetLabelParams {
  
}

export interface IssuesDeleteLabelParams {
  
}

export interface IssuesUpdateLabelParams {
  
}

export interface IssuesUpdateLabelRequest {
  /**
* The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
*/
readonly "new_name"?: string | undefined;
  /**
* The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
*/
readonly "color"?: string | undefined;
  /**
* A short description of the label. Must be 100 characters or fewer.
*/
readonly "description"?: string | undefined
}

export interface ReposListLanguagesParams {
  
}

/**
* Language
*/
export type Language = Record<string, unknown>

export interface LicensesGetForRepoParams {
  readonly "ref"?: CodeScanningRef | undefined
}

/**
* License Content
*/
export interface LicenseContent {
  readonly "name": string;
  readonly "path": string;
  readonly "sha": string;
  readonly "size": number;
  readonly "url": string;
  readonly "html_url": string | null;
  readonly "git_url": string | null;
  readonly "download_url": string | null;
  readonly "type": string;
  readonly "content": string;
  readonly "encoding": string;
  readonly "_links": {
  readonly "git": string | null;
  readonly "html": string | null;
  readonly "self": string
};
  readonly "license": NullableLicenseSimple | null
}

export interface ReposMergeUpstreamParams {
  
}

export interface ReposMergeUpstreamRequest {
  /**
* The name of the branch which should be updated to match upstream.
*/
readonly "branch": string
}

export type MergedUpstreamMergeType = "merge" | "fast-forward" | "none"

/**
* Results of a successful merge upstream request
*/
export interface MergedUpstream {
  readonly "message"?: string | undefined;
  readonly "merge_type"?: MergedUpstreamMergeType | undefined;
  readonly "base_branch"?: string | undefined
}

export interface ReposMergeParams {
  
}

export interface ReposMergeRequest {
  /**
* The name of the base branch that the head will be merged into.
*/
readonly "base": string;
  /**
* The head to merge. This can be a branch name or a commit SHA1.
*/
readonly "head": string;
  /**
* Commit message to use for the merge commit. If omitted, a default message will be used.
*/
readonly "commit_message"?: string | undefined
}

export type IssuesListMilestonesParamsState = "open" | "closed" | "all"

export type IssuesListMilestonesParamsSort = "due_on" | "completeness"

export type IssuesListMilestonesParamsDirection = "asc" | "desc"

export interface IssuesListMilestonesParams {
  readonly "state"?: IssuesListMilestonesParamsState | undefined;
  readonly "sort"?: IssuesListMilestonesParamsSort | undefined;
  readonly "direction"?: IssuesListMilestonesParamsDirection | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* The state of the milestone.
*/
export type MilestoneState = "open" | "closed"

/**
* A collection of related issues and pull requests.
*/
export interface Milestone {
  readonly "url": string;
  readonly "html_url": string;
  readonly "labels_url": string;
  readonly "id": number;
  readonly "node_id": string;
  /**
* The number of the milestone.
*/
readonly "number": number;
  /**
* The state of the milestone.
*/
readonly "state": MilestoneState;
  /**
* The title of the milestone.
*/
readonly "title": string;
  readonly "description": string | null;
  readonly "creator": NullableSimpleUser | null;
  readonly "open_issues": number;
  readonly "closed_issues": number;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "closed_at": string | null;
  readonly "due_on": string | null
}

export type IssuesListMilestones200 = ReadonlyArray<Milestone>

export interface IssuesCreateMilestoneParams {
  
}

/**
* The state of the milestone. Either `open` or `closed`.
*/
export type IssuesCreateMilestoneRequestState = "open" | "closed"

export interface IssuesCreateMilestoneRequest {
  /**
* The title of the milestone.
*/
readonly "title": string;
  /**
* The state of the milestone. Either `open` or `closed`.
*/
readonly "state"?: IssuesCreateMilestoneRequestState | undefined;
  /**
* A description of the milestone.
*/
readonly "description"?: string | undefined;
  /**
* The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
readonly "due_on"?: string | undefined
}

export interface IssuesGetMilestoneParams {
  
}

export interface IssuesDeleteMilestoneParams {
  
}

export interface IssuesUpdateMilestoneParams {
  
}

/**
* The state of the milestone. Either `open` or `closed`.
*/
export type IssuesUpdateMilestoneRequestState = "open" | "closed"

export interface IssuesUpdateMilestoneRequest {
  /**
* The title of the milestone.
*/
readonly "title"?: string | undefined;
  /**
* The state of the milestone. Either `open` or `closed`.
*/
readonly "state"?: IssuesUpdateMilestoneRequestState | undefined;
  /**
* A description of the milestone.
*/
readonly "description"?: string | undefined;
  /**
* The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
readonly "due_on"?: string | undefined
}

export interface IssuesListLabelsForMilestoneParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type IssuesListLabelsForMilestone200 = ReadonlyArray<Label>

export interface ActivityListRepoNotificationsForAuthenticatedUserParams {
  readonly "all"?: boolean | undefined;
  readonly "participating"?: boolean | undefined;
  readonly "since"?: string | undefined;
  readonly "before"?: string | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ActivityListRepoNotificationsForAuthenticatedUser200 = ReadonlyArray<Thread>

export interface ActivityMarkRepoNotificationsAsReadParams {
  
}

export interface ActivityMarkRepoNotificationsAsReadRequest {
  /**
* Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
*/
readonly "last_read_at"?: string | undefined
}

export interface ActivityMarkRepoNotificationsAsRead202 {
  readonly "message"?: string | undefined;
  readonly "url"?: string | undefined
}

export interface ReposGetPagesParams {
  
}

/**
* The status of the most recent build of the Page.
*/
export type PageStatus = "built" | "building" | "errored"

/**
* The state if the domain is verified
*/
export type PageProtectedDomainState = "pending" | "verified" | "unverified"

/**
* The process in which the Page will be built.
*/
export type PageBuildType = "legacy" | "workflow"

export interface PagesSourceHash {
  readonly "branch": string;
  readonly "path": string
}

export type PagesHttpsCertificateState = "new" | "authorization_created" | "authorization_pending" | "authorized" | "authorization_revoked" | "issued" | "uploaded" | "approved" | "errored" | "bad_authz" | "destroy_pending" | "dns_changed"

export interface PagesHttpsCertificate {
  readonly "state": PagesHttpsCertificateState;
  readonly "description": string;
  /**
* Array of the domain set and its alternate name (if it is configured)
*/
readonly "domains": ReadonlyArray<string>;
  readonly "expires_at"?: string | undefined
}

/**
* The configuration for GitHub Pages for a repository.
*/
export interface Page {
  /**
* The API address for accessing this Page resource.
*/
readonly "url": string;
  /**
* The status of the most recent build of the Page.
*/
readonly "status": PageStatus | null;
  /**
* The Pages site's custom domain
*/
readonly "cname": string | null;
  /**
* The state if the domain is verified
*/
readonly "protected_domain_state"?: PageProtectedDomainState | null | undefined;
  /**
* The timestamp when a pending domain becomes unverified.
*/
readonly "pending_domain_unverified_at"?: string | null | undefined;
  /**
* Whether the Page has a custom 404 page.
*/
readonly "custom_404": boolean;
  /**
* The web address the Page can be accessed from.
*/
readonly "html_url"?: string | undefined;
  /**
* The process in which the Page will be built.
*/
readonly "build_type"?: PageBuildType | null | undefined;
  readonly "source"?: PagesSourceHash | undefined;
  /**
* Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
*/
readonly "public": boolean;
  readonly "https_certificate"?: PagesHttpsCertificate | undefined;
  /**
* Whether https is enabled on the domain
*/
readonly "https_enforced"?: boolean | undefined
}

export interface ReposUpdateInformationAboutPagesSiteParams {
  
}

/**
* The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
*/
export type ReposUpdateInformationAboutPagesSiteRequestBuildType = "legacy" | "workflow"

/**
* Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`.
*/
export type ReposUpdateInformationAboutPagesSiteRequestSourceEnum = "gh-pages" | "master" | "master /docs"

/**
* The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
*/
export type ReposUpdateInformationAboutPagesSiteRequestSourceEnumPath = "/" | "/docs"

export interface ReposUpdateInformationAboutPagesSiteRequest {
  /**
* Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/pages/configuring-a-custom-domain-for-your-github-pages-site)."
*/
readonly "cname"?: string | null | undefined;
  /**
* Specify whether HTTPS should be enforced for the repository.
*/
readonly "https_enforced"?: boolean | undefined;
  /**
* The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
*/
readonly "build_type"?: ReposUpdateInformationAboutPagesSiteRequestBuildType | undefined;
  readonly "source"?: ReposUpdateInformationAboutPagesSiteRequestSourceEnum | {
  /**
* The repository branch used to publish your site's source files.
*/
readonly "branch": string;
  /**
* The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
*/
readonly "path": ReposUpdateInformationAboutPagesSiteRequestSourceEnumPath
} | undefined
}

export interface ReposCreatePagesSiteParams {
  
}

/**
* The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.
*/
export type ReposCreatePagesSiteRequestBuildType = "legacy" | "workflow"

/**
* The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
*/
export type ReposCreatePagesSiteRequestSourcePath = "/" | "/docs"

/**
* The source branch and directory used to publish your Pages site.
*/
export interface ReposCreatePagesSiteRequest {
  /**
* The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.
*/
readonly "build_type"?: ReposCreatePagesSiteRequestBuildType | undefined;
  /**
* The source branch and directory used to publish your Pages site.
*/
readonly "source"?: {
  /**
* The repository branch used to publish your site's source files.
*/
readonly "branch": string;
  /**
* The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
*/
readonly "path"?: ReposCreatePagesSiteRequestSourcePath | undefined
} | undefined
}

export interface ReposDeletePagesSiteParams {
  
}

export interface ReposListPagesBuildsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Page Build
*/
export interface PageBuild {
  readonly "url": string;
  readonly "status": string;
  readonly "error": {
  readonly "message": string | null
};
  readonly "pusher": NullableSimpleUser | null;
  readonly "commit": string;
  readonly "duration": number;
  readonly "created_at": string;
  readonly "updated_at": string
}

export type ReposListPagesBuilds200 = ReadonlyArray<PageBuild>

export interface ReposRequestPagesBuildParams {
  
}

/**
* Page Build Status
*/
export interface PageBuildStatus {
  readonly "url": string;
  readonly "status": string
}

export interface ReposGetLatestPagesBuildParams {
  
}

export interface ReposGetPagesBuildParams {
  
}

export interface ReposCreatePagesDeploymentParams {
  
}

/**
* The object used to create GitHub Pages deployment
*/
export interface ReposCreatePagesDeploymentRequest {
  /**
* The ID of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required.
*/
readonly "artifact_id"?: number | undefined;
  /**
* The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required.
*/
readonly "artifact_url"?: string | undefined;
  /**
* The target environment for this GitHub Pages deployment.
*/
readonly "environment"?: string | undefined;
  /**
* A unique string that represents the version of the build for this deployment.
*/
readonly "pages_build_version": string;
  /**
* The OIDC token issued by GitHub Actions certifying the origin of the deployment.
*/
readonly "oidc_token": string
}

/**
* The GitHub Pages deployment status.
*/
export interface PageDeployment {
  /**
* The ID of the GitHub Pages deployment. This is the Git SHA of the deployed commit.
*/
readonly "id": number | string;
  /**
* The URI to monitor GitHub Pages deployment status.
*/
readonly "status_url": string;
  /**
* The URI to the deployed GitHub Pages.
*/
readonly "page_url": string;
  /**
* The URI to the deployed GitHub Pages preview.
*/
readonly "preview_url"?: string | undefined
}

export interface ReposGetPagesDeploymentParams {
  
}

/**
* The current status of the deployment.
*/
export type PagesDeploymentStatusStatus = "deployment_in_progress" | "syncing_files" | "finished_file_sync" | "updating_pages" | "purging_cdn" | "deployment_cancelled" | "deployment_failed" | "deployment_content_failed" | "deployment_attempt_error" | "deployment_lost" | "succeed"

export interface PagesDeploymentStatus {
  /**
* The current status of the deployment.
*/
readonly "status"?: PagesDeploymentStatusStatus | undefined
}

export interface ReposCancelPagesDeploymentParams {
  
}

export interface ReposGetPagesHealthCheckParams {
  
}

/**
* Pages Health Check Status
*/
export interface PagesHealthCheck {
  readonly "domain"?: {
  readonly "host"?: string | undefined;
  readonly "uri"?: string | undefined;
  readonly "nameservers"?: string | undefined;
  readonly "dns_resolves"?: boolean | undefined;
  readonly "is_proxied"?: boolean | null | undefined;
  readonly "is_cloudflare_ip"?: boolean | null | undefined;
  readonly "is_fastly_ip"?: boolean | null | undefined;
  readonly "is_old_ip_address"?: boolean | null | undefined;
  readonly "is_a_record"?: boolean | null | undefined;
  readonly "has_cname_record"?: boolean | null | undefined;
  readonly "has_mx_records_present"?: boolean | null | undefined;
  readonly "is_valid_domain"?: boolean | undefined;
  readonly "is_apex_domain"?: boolean | undefined;
  readonly "should_be_a_record"?: boolean | null | undefined;
  readonly "is_cname_to_github_user_domain"?: boolean | null | undefined;
  readonly "is_cname_to_pages_dot_github_dot_com"?: boolean | null | undefined;
  readonly "is_cname_to_fastly"?: boolean | null | undefined;
  readonly "is_pointed_to_github_pages_ip"?: boolean | null | undefined;
  readonly "is_non_github_pages_ip_present"?: boolean | null | undefined;
  readonly "is_pages_domain"?: boolean | undefined;
  readonly "is_served_by_pages"?: boolean | null | undefined;
  readonly "is_valid"?: boolean | undefined;
  readonly "reason"?: string | null | undefined;
  readonly "responds_to_https"?: boolean | undefined;
  readonly "enforces_https"?: boolean | undefined;
  readonly "https_error"?: string | null | undefined;
  readonly "is_https_eligible"?: boolean | null | undefined;
  readonly "caa_error"?: string | null | undefined
} | undefined;
  readonly "alt_domain"?: {
  readonly "host"?: string | undefined;
  readonly "uri"?: string | undefined;
  readonly "nameservers"?: string | undefined;
  readonly "dns_resolves"?: boolean | undefined;
  readonly "is_proxied"?: boolean | null | undefined;
  readonly "is_cloudflare_ip"?: boolean | null | undefined;
  readonly "is_fastly_ip"?: boolean | null | undefined;
  readonly "is_old_ip_address"?: boolean | null | undefined;
  readonly "is_a_record"?: boolean | null | undefined;
  readonly "has_cname_record"?: boolean | null | undefined;
  readonly "has_mx_records_present"?: boolean | null | undefined;
  readonly "is_valid_domain"?: boolean | undefined;
  readonly "is_apex_domain"?: boolean | undefined;
  readonly "should_be_a_record"?: boolean | null | undefined;
  readonly "is_cname_to_github_user_domain"?: boolean | null | undefined;
  readonly "is_cname_to_pages_dot_github_dot_com"?: boolean | null | undefined;
  readonly "is_cname_to_fastly"?: boolean | null | undefined;
  readonly "is_pointed_to_github_pages_ip"?: boolean | null | undefined;
  readonly "is_non_github_pages_ip_present"?: boolean | null | undefined;
  readonly "is_pages_domain"?: boolean | undefined;
  readonly "is_served_by_pages"?: boolean | null | undefined;
  readonly "is_valid"?: boolean | undefined;
  readonly "reason"?: string | null | undefined;
  readonly "responds_to_https"?: boolean | undefined;
  readonly "enforces_https"?: boolean | undefined;
  readonly "https_error"?: string | null | undefined;
  readonly "is_https_eligible"?: boolean | null | undefined;
  readonly "caa_error"?: string | null | undefined
} | null | undefined
}

export interface ReposCheckPrivateVulnerabilityReportingParams {
  
}

export interface ReposCheckPrivateVulnerabilityReporting200 {
  /**
* Whether or not private vulnerability reporting is enabled for the repository.
*/
readonly "enabled": boolean
}

export interface ReposEnablePrivateVulnerabilityReportingParams {
  
}

export interface ReposDisablePrivateVulnerabilityReportingParams {
  
}

export type ProjectsClassicListForRepoParamsState = "open" | "closed" | "all"

export interface ProjectsClassicListForRepoParams {
  readonly "state"?: ProjectsClassicListForRepoParamsState | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ProjectsClassicListForRepo200 = ReadonlyArray<Project>

export interface ProjectsClassicCreateForRepoParams {
  
}

export interface ProjectsClassicCreateForRepoRequest {
  /**
* The name of the project.
*/
readonly "name": string;
  /**
* The description of the project.
*/
readonly "body"?: string | undefined
}

export interface ReposGetCustomPropertiesValuesParams {
  
}

export type ReposGetCustomPropertiesValues200 = ReadonlyArray<CustomPropertyValue>

export interface ReposCreateOrUpdateCustomPropertiesValuesParams {
  
}

export interface ReposCreateOrUpdateCustomPropertiesValuesRequest {
  /**
* A list of custom property names and associated values to apply to the repositories.
*/
readonly "properties": ReadonlyArray<CustomPropertyValue>
}

export type PullsListParamsState = "open" | "closed" | "all"

export type PullsListParamsSort = "created" | "updated" | "popularity" | "long-running"

export type PullsListParamsDirection = "asc" | "desc"

export interface PullsListParams {
  readonly "state"?: PullsListParamsState | undefined;
  readonly "head"?: string | undefined;
  readonly "base"?: string | undefined;
  readonly "sort"?: PullsListParamsSort | undefined;
  readonly "direction"?: PullsListParamsDirection | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type PullsList200 = ReadonlyArray<PullRequestSimple>

export interface PullsCreateParams {
  
}

export interface PullsCreateRequest {
  /**
* The title of the new pull request. Required unless `issue` is specified.
*/
readonly "title"?: string | undefined;
  /**
* The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
*/
readonly "head": string;
  /**
* The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.
*/
readonly "head_repo"?: string | undefined;
  /**
* The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
*/
readonly "base": string;
  /**
* The contents of the pull request.
*/
readonly "body"?: string | undefined;
  /**
* Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
*/
readonly "maintainer_can_modify"?: boolean | undefined;
  /**
* Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.
*/
readonly "draft"?: boolean | undefined;
  /**
* An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.
*/
readonly "issue"?: number | undefined
}

/**
* State of this Pull Request. Either `open` or `closed`.
*/
export type PullRequestState = "open" | "closed"

/**
* Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
*/
export interface PullRequest {
  readonly "url": string;
  readonly "id": number;
  readonly "node_id": string;
  readonly "html_url": string;
  readonly "diff_url": string;
  readonly "patch_url": string;
  readonly "issue_url": string;
  readonly "commits_url": string;
  readonly "review_comments_url": string;
  readonly "review_comment_url": string;
  readonly "comments_url": string;
  readonly "statuses_url": string;
  /**
* Number uniquely identifying the pull request within its repository.
*/
readonly "number": number;
  /**
* State of this Pull Request. Either `open` or `closed`.
*/
readonly "state": PullRequestState;
  readonly "locked": boolean;
  /**
* The title of the pull request.
*/
readonly "title": string;
  readonly "user": SimpleUser;
  readonly "body": string | null;
  readonly "labels": ReadonlyArray<{
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "name": string;
  readonly "description": string | null;
  readonly "color": string;
  readonly "default": boolean
}>;
  readonly "milestone": NullableMilestone | null;
  readonly "active_lock_reason"?: string | null | undefined;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "closed_at": string | null;
  readonly "merged_at": string | null;
  readonly "merge_commit_sha": string | null;
  readonly "assignee": NullableSimpleUser | null;
  readonly "assignees"?: ReadonlyArray<SimpleUser> | null | undefined;
  readonly "requested_reviewers"?: ReadonlyArray<SimpleUser> | null | undefined;
  readonly "requested_teams"?: ReadonlyArray<TeamSimple> | null | undefined;
  readonly "head": {
  readonly "label": string;
  readonly "ref": string;
  readonly "repo": Repository;
  readonly "sha": string;
  readonly "user": SimpleUser
};
  readonly "base": {
  readonly "label": string;
  readonly "ref": string;
  readonly "repo": Repository;
  readonly "sha": string;
  readonly "user": SimpleUser
};
  readonly "_links": {
  readonly "comments": Link;
  readonly "commits": Link;
  readonly "statuses": Link;
  readonly "html": Link;
  readonly "issue": Link;
  readonly "review_comments": Link;
  readonly "review_comment": Link;
  readonly "self": Link
};
  readonly "author_association": AuthorAssociation;
  readonly "auto_merge": AutoMerge | null;
  /**
* Indicates whether or not the pull request is a draft.
*/
readonly "draft"?: boolean | undefined;
  readonly "merged": boolean;
  readonly "mergeable": boolean | null;
  readonly "rebaseable"?: boolean | null | undefined;
  readonly "mergeable_state": string;
  readonly "merged_by": NullableSimpleUser | null;
  readonly "comments": number;
  readonly "review_comments": number;
  /**
* Indicates whether maintainers can modify the pull request.
*/
readonly "maintainer_can_modify": boolean;
  readonly "commits": number;
  readonly "additions": number;
  readonly "deletions": number;
  readonly "changed_files": number
}

export type PullsListReviewCommentsForRepoParamsSort = "created" | "updated" | "created_at"

export type PullsListReviewCommentsForRepoParamsDirection = "asc" | "desc"

export interface PullsListReviewCommentsForRepoParams {
  readonly "sort"?: PullsListReviewCommentsForRepoParamsSort | undefined;
  readonly "direction"?: PullsListReviewCommentsForRepoParamsDirection | undefined;
  readonly "since"?: string | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type PullsListReviewCommentsForRepo200 = ReadonlyArray<PullRequestReviewComment>

export interface PullsGetReviewCommentParams {
  
}

export interface PullsDeleteReviewCommentParams {
  
}

export interface PullsUpdateReviewCommentParams {
  
}

export interface PullsUpdateReviewCommentRequest {
  /**
* The text of the reply to the review comment.
*/
readonly "body": string
}

export type ReactionsListForPullRequestReviewCommentParamsContent = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes"

export interface ReactionsListForPullRequestReviewCommentParams {
  readonly "content"?: ReactionsListForPullRequestReviewCommentParamsContent | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ReactionsListForPullRequestReviewComment200 = ReadonlyArray<Reaction>

export interface ReactionsCreateForPullRequestReviewCommentParams {
  
}

/**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the pull request review comment.
*/
export type ReactionsCreateForPullRequestReviewCommentRequestContent = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes"

export interface ReactionsCreateForPullRequestReviewCommentRequest {
  /**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the pull request review comment.
*/
readonly "content": ReactionsCreateForPullRequestReviewCommentRequestContent
}

export interface ReactionsDeleteForPullRequestCommentParams {
  
}

export interface PullsGetParams {
  
}

export interface PullsGet503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface PullsUpdateParams {
  
}

/**
* State of this Pull Request. Either `open` or `closed`.
*/
export type PullsUpdateRequestState = "open" | "closed"

export interface PullsUpdateRequest {
  /**
* The title of the pull request.
*/
readonly "title"?: string | undefined;
  /**
* The contents of the pull request.
*/
readonly "body"?: string | undefined;
  /**
* State of this Pull Request. Either `open` or `closed`.
*/
readonly "state"?: PullsUpdateRequestState | undefined;
  /**
* The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
*/
readonly "base"?: string | undefined;
  /**
* Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
*/
readonly "maintainer_can_modify"?: boolean | undefined
}

export interface CodespacesCreateWithPrForAuthenticatedUserParams {
  
}

/**
* The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.
*/
export type CodespacesCreateWithPrForAuthenticatedUserRequestGeo = "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest"

export interface CodespacesCreateWithPrForAuthenticatedUserRequest {
  /**
* The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
*/
readonly "location"?: string | undefined;
  /**
* The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.
*/
readonly "geo"?: CodespacesCreateWithPrForAuthenticatedUserRequestGeo | undefined;
  /**
* IP for location auto-detection when proxying a request
*/
readonly "client_ip"?: string | undefined;
  /**
* Machine type to use for this codespace
*/
readonly "machine"?: string | undefined;
  /**
* Path to devcontainer.json config to use for this codespace
*/
readonly "devcontainer_path"?: string | undefined;
  /**
* Whether to authorize requested permissions from devcontainer.json
*/
readonly "multi_repo_permissions_opt_out"?: boolean | undefined;
  /**
* Working directory for this codespace
*/
readonly "working_directory"?: string | undefined;
  /**
* Time in minutes before codespace stops from inactivity
*/
readonly "idle_timeout_minutes"?: number | undefined;
  /**
* Display name for this codespace
*/
readonly "display_name"?: string | undefined;
  /**
* Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
*/
readonly "retention_period_minutes"?: number | undefined
}

export interface CodespacesCreateWithPrForAuthenticatedUser503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export type PullsListReviewCommentsParamsSort = "created" | "updated"

export type PullsListReviewCommentsParamsDirection = "asc" | "desc"

export interface PullsListReviewCommentsParams {
  readonly "sort"?: PullsListReviewCommentsParamsSort | undefined;
  readonly "direction"?: PullsListReviewCommentsParamsDirection | undefined;
  readonly "since"?: string | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type PullsListReviewComments200 = ReadonlyArray<PullRequestReviewComment>

export interface PullsCreateReviewCommentParams {
  
}

/**
* In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
*/
export type PullsCreateReviewCommentRequestSide = "LEFT" | "RIGHT"

/**
* **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
*/
export type PullsCreateReviewCommentRequestStartSide = "LEFT" | "RIGHT" | "side"

/**
* The level at which the comment is targeted.
*/
export type PullsCreateReviewCommentRequestSubjectType = "line" | "file"

export interface PullsCreateReviewCommentRequest {
  /**
* The text of the review comment.
*/
readonly "body": string;
  /**
* The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
*/
readonly "commit_id": string;
  /**
* The relative path to the file that necessitates a comment.
*/
readonly "path": string;
  /**
* **This parameter is closing down. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
*/
readonly "position"?: number | undefined;
  /**
* In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
*/
readonly "side"?: PullsCreateReviewCommentRequestSide | undefined;
  /**
* **Required unless using `subject_type:file`**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
*/
readonly "line"?: number | undefined;
  /**
* **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.
*/
readonly "start_line"?: number | undefined;
  /**
* **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
*/
readonly "start_side"?: PullsCreateReviewCommentRequestStartSide | undefined;
  /**
* The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
*/
readonly "in_reply_to"?: number | undefined;
  /**
* The level at which the comment is targeted.
*/
readonly "subject_type"?: PullsCreateReviewCommentRequestSubjectType | undefined
}

export interface PullsCreateReplyForReviewCommentParams {
  
}

export interface PullsCreateReplyForReviewCommentRequest {
  /**
* The text of the review comment.
*/
readonly "body": string
}

export interface PullsListCommitsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type PullsListCommits200 = ReadonlyArray<Commit>

export interface PullsListFilesParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type PullsListFiles200 = ReadonlyArray<DiffEntry>

export interface PullsListFiles503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface PullsCheckIfMergedParams {
  
}

export interface PullsMergeParams {
  
}

/**
* The merge method to use.
*/
export type PullsMergeRequestMergeMethod = "merge" | "squash" | "rebase"

export interface PullsMergeRequest {
  /**
* Title for the automatic commit message.
*/
readonly "commit_title"?: string | undefined;
  /**
* Extra detail to append to automatic commit message.
*/
readonly "commit_message"?: string | undefined;
  /**
* SHA that pull request head must match to allow merge.
*/
readonly "sha"?: string | undefined;
  /**
* The merge method to use.
*/
readonly "merge_method"?: PullsMergeRequestMergeMethod | undefined
}

/**
* Pull Request Merge Result
*/
export interface PullRequestMergeResult {
  readonly "sha": string;
  readonly "merged": boolean;
  readonly "message": string
}

export interface PullsMerge405 {
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface PullsMerge409 {
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface PullsListRequestedReviewersParams {
  
}

/**
* Pull Request Review Request
*/
export interface PullRequestReviewRequest {
  readonly "users": ReadonlyArray<SimpleUser>;
  readonly "teams": ReadonlyArray<Team>
}

export interface PullsRequestReviewersParams {
  
}

export interface PullsRequestReviewersRequest {
  /**
* An array of user `login`s that will be requested.
*/
readonly "reviewers"?: ReadonlyArray<string> | undefined;
  /**
* An array of team `slug`s that will be requested.
*/
readonly "team_reviewers"?: ReadonlyArray<string> | undefined
}

export interface PullsRemoveRequestedReviewersParams {
  
}

export interface PullsRemoveRequestedReviewersRequest {
  /**
* An array of user `login`s that will be removed.
*/
readonly "reviewers": ReadonlyArray<string>;
  /**
* An array of team `slug`s that will be removed.
*/
readonly "team_reviewers"?: ReadonlyArray<string> | undefined
}

export interface PullsListReviewsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Pull Request Reviews are reviews on pull requests.
*/
export interface PullRequestReview {
  /**
* Unique identifier of the review
*/
readonly "id": number;
  readonly "node_id": string;
  readonly "user": NullableSimpleUser | null;
  /**
* The text of the review.
*/
readonly "body": string;
  readonly "state": string;
  readonly "html_url": string;
  readonly "pull_request_url": string;
  readonly "_links": {
  readonly "html": {
  readonly "href": string
};
  readonly "pull_request": {
  readonly "href": string
}
};
  readonly "submitted_at"?: string | undefined;
  /**
* A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`.
*/
readonly "commit_id": string | null;
  readonly "body_html"?: string | undefined;
  readonly "body_text"?: string | undefined;
  readonly "author_association": AuthorAssociation
}

export type PullsListReviews200 = ReadonlyArray<PullRequestReview>

export interface PullsCreateReviewParams {
  
}

/**
* The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request) when you are ready.
*/
export type PullsCreateReviewRequestEvent = "APPROVE" | "REQUEST_CHANGES" | "COMMENT"

export interface PullsCreateReviewRequest {
  /**
* The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
*/
readonly "commit_id"?: string | undefined;
  /**
* **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
*/
readonly "body"?: string | undefined;
  /**
* The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request) when you are ready.
*/
readonly "event"?: PullsCreateReviewRequestEvent | undefined;
  /**
* Use the following table to specify the location, destination, and contents of the draft review comment.
*/
readonly "comments"?: ReadonlyArray<{
  /**
* The relative path to the file that necessitates a review comment.
*/
readonly "path": string;
  /**
* The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
*/
readonly "position"?: number | undefined;
  /**
* Text of the review comment.
*/
readonly "body": string;
  readonly "line"?: number | undefined;
  readonly "side"?: string | undefined;
  readonly "start_line"?: number | undefined;
  readonly "start_side"?: string | undefined
}> | undefined
}

export interface PullsGetReviewParams {
  
}

export interface PullsUpdateReviewParams {
  
}

export interface PullsUpdateReviewRequest {
  /**
* The body text of the pull request review.
*/
readonly "body": string
}

export interface PullsDeletePendingReviewParams {
  
}

export interface PullsListCommentsForReviewParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* The side of the first line of the range for a multi-line comment.
*/
export type ReviewCommentSide = "LEFT" | "RIGHT"

/**
* The side of the first line of the range for a multi-line comment.
*/
export type ReviewCommentStartSide = "LEFT" | "RIGHT"

/**
* The level at which the comment is targeted, can be a diff line or a file.
*/
export type ReviewCommentSubjectType = "line" | "file"

/**
* Legacy Review Comment
*/
export interface ReviewComment {
  readonly "url": string;
  readonly "pull_request_review_id": number | null;
  readonly "id": number;
  readonly "node_id": string;
  readonly "diff_hunk": string;
  readonly "path": string;
  readonly "position": number | null;
  readonly "original_position": number;
  readonly "commit_id": string;
  readonly "original_commit_id": string;
  readonly "in_reply_to_id"?: number | undefined;
  readonly "user": NullableSimpleUser | null;
  readonly "body": string;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "html_url": string;
  readonly "pull_request_url": string;
  readonly "author_association": AuthorAssociation;
  readonly "_links": {
  readonly "self": Link;
  readonly "html": Link;
  readonly "pull_request": Link
};
  readonly "body_text"?: string | undefined;
  readonly "body_html"?: string | undefined;
  readonly "reactions"?: ReactionRollup | undefined;
  /**
* The side of the first line of the range for a multi-line comment.
*/
readonly "side"?: ReviewCommentSide | undefined;
  /**
* The side of the first line of the range for a multi-line comment.
*/
readonly "start_side"?: ReviewCommentStartSide | null | undefined;
  /**
* The line of the blob to which the comment applies. The last line of the range for a multi-line comment
*/
readonly "line"?: number | undefined;
  /**
* The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
*/
readonly "original_line"?: number | undefined;
  /**
* The first line of the range for a multi-line comment.
*/
readonly "start_line"?: number | null | undefined;
  /**
* The original first line of the range for a multi-line comment.
*/
readonly "original_start_line"?: number | null | undefined;
  /**
* The level at which the comment is targeted, can be a diff line or a file.
*/
readonly "subject_type"?: ReviewCommentSubjectType | undefined
}

export type PullsListCommentsForReview200 = ReadonlyArray<ReviewComment>

export interface PullsDismissReviewParams {
  
}

export type PullsDismissReviewRequestEvent = "DISMISS"

export interface PullsDismissReviewRequest {
  /**
* The message for the pull request review dismissal
*/
readonly "message": string;
  readonly "event"?: PullsDismissReviewRequestEvent | undefined
}

export interface PullsSubmitReviewParams {
  
}

/**
* The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
*/
export type PullsSubmitReviewRequestEvent = "APPROVE" | "REQUEST_CHANGES" | "COMMENT"

export interface PullsSubmitReviewRequest {
  /**
* The body text of the pull request review
*/
readonly "body"?: string | undefined;
  /**
* The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
*/
readonly "event": PullsSubmitReviewRequestEvent
}

export interface PullsUpdateBranchParams {
  
}

export interface PullsUpdateBranchRequest {
  /**
* The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/commits/commits#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.
*/
readonly "expected_head_sha"?: string | undefined
}

export interface PullsUpdateBranch202 {
  readonly "message"?: string | undefined;
  readonly "url"?: string | undefined
}

export interface ReposGetReadmeParams {
  readonly "ref"?: string | undefined
}

export interface ReposGetReadmeInDirectoryParams {
  readonly "ref"?: string | undefined
}

export interface ReposListReleasesParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* State of the release asset.
*/
export type ReleaseAssetState = "uploaded" | "open"

/**
* Data related to a release.
*/
export interface ReleaseAsset {
  readonly "url": string;
  readonly "browser_download_url": string;
  readonly "id": number;
  readonly "node_id": string;
  /**
* The file name of the asset.
*/
readonly "name": string;
  readonly "label": string | null;
  /**
* State of the release asset.
*/
readonly "state": ReleaseAssetState;
  readonly "content_type": string;
  readonly "size": number;
  readonly "digest": string | null;
  readonly "download_count": number;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "uploader": NullableSimpleUser | null
}

/**
* A release.
*/
export interface Release {
  readonly "url": string;
  readonly "html_url": string;
  readonly "assets_url": string;
  readonly "upload_url": string;
  readonly "tarball_url": string | null;
  readonly "zipball_url": string | null;
  readonly "id": number;
  readonly "node_id": string;
  /**
* The name of the tag.
*/
readonly "tag_name": string;
  /**
* Specifies the commitish value that determines where the Git tag is created from.
*/
readonly "target_commitish": string;
  readonly "name": string | null;
  readonly "body"?: string | null | undefined;
  /**
* true to create a draft (unpublished) release, false to create a published one.
*/
readonly "draft": boolean;
  /**
* Whether to identify the release as a prerelease or a full release.
*/
readonly "prerelease": boolean;
  /**
* Whether or not the release is immutable.
*/
readonly "immutable"?: boolean | undefined;
  readonly "created_at": string;
  readonly "published_at": string | null;
  readonly "updated_at"?: string | null | undefined;
  readonly "author": SimpleUser;
  readonly "assets": ReadonlyArray<ReleaseAsset>;
  readonly "body_html"?: string | undefined;
  readonly "body_text"?: string | undefined;
  readonly "mentions_count"?: number | undefined;
  /**
* The URL of the release discussion.
*/
readonly "discussion_url"?: string | undefined;
  readonly "reactions"?: ReactionRollup | undefined
}

export type ReposListReleases200 = ReadonlyArray<Release>

export interface ReposCreateReleaseParams {
  
}

/**
* Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
*/
export type ReposCreateReleaseRequestMakeLatest = "true" | "false" | "legacy"

export interface ReposCreateReleaseRequest {
  /**
* The name of the tag.
*/
readonly "tag_name": string;
  /**
* Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
*/
readonly "target_commitish"?: string | undefined;
  /**
* The name of the release.
*/
readonly "name"?: string | undefined;
  /**
* Text describing the contents of the tag.
*/
readonly "body"?: string | undefined;
  /**
* `true` to create a draft (unpublished) release, `false` to create a published one.
*/
readonly "draft"?: boolean | undefined;
  /**
* `true` to identify the release as a prerelease. `false` to identify the release as a full release.
*/
readonly "prerelease"?: boolean | undefined;
  /**
* If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
*/
readonly "discussion_category_name"?: string | undefined;
  /**
* Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
*/
readonly "generate_release_notes"?: boolean | undefined;
  /**
* Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
*/
readonly "make_latest"?: ReposCreateReleaseRequestMakeLatest | undefined
}

export interface ReposGetReleaseAssetParams {
  
}

export interface ReposDeleteReleaseAssetParams {
  
}

export interface ReposUpdateReleaseAssetParams {
  
}

export interface ReposUpdateReleaseAssetRequest {
  /**
* The file name of the asset.
*/
readonly "name"?: string | undefined;
  /**
* An alternate short description of the asset. Used in place of the filename.
*/
readonly "label"?: string | undefined;
  readonly "state"?: string | undefined
}

export interface ReposGenerateReleaseNotesParams {
  
}

export interface ReposGenerateReleaseNotesRequest {
  /**
* The tag name for the release. This can be an existing tag or a new one.
*/
readonly "tag_name": string;
  /**
* Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.
*/
readonly "target_commitish"?: string | undefined;
  /**
* The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.
*/
readonly "previous_tag_name"?: string | undefined;
  /**
* Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.
*/
readonly "configuration_file_path"?: string | undefined
}

/**
* Generated name and body describing a release
*/
export interface ReleaseNotesContent {
  /**
* The generated name of the release
*/
readonly "name": string;
  /**
* The generated body describing the contents of the release supporting markdown formatting
*/
readonly "body": string
}

export interface ReposGetLatestReleaseParams {
  
}

export interface ReposGetReleaseByTagParams {
  
}

export interface ReposGetReleaseParams {
  
}

export interface ReposDeleteReleaseParams {
  
}

export interface ReposUpdateReleaseParams {
  
}

/**
* Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
*/
export type ReposUpdateReleaseRequestMakeLatest = "true" | "false" | "legacy"

export interface ReposUpdateReleaseRequest {
  /**
* The name of the tag.
*/
readonly "tag_name"?: string | undefined;
  /**
* Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
*/
readonly "target_commitish"?: string | undefined;
  /**
* The name of the release.
*/
readonly "name"?: string | undefined;
  /**
* Text describing the contents of the tag.
*/
readonly "body"?: string | undefined;
  /**
* `true` makes the release a draft, and `false` publishes the release.
*/
readonly "draft"?: boolean | undefined;
  /**
* `true` to identify the release as a prerelease, `false` to identify the release as a full release.
*/
readonly "prerelease"?: boolean | undefined;
  /**
* Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
*/
readonly "make_latest"?: ReposUpdateReleaseRequestMakeLatest | undefined;
  /**
* If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
*/
readonly "discussion_category_name"?: string | undefined
}

export interface ReposListReleaseAssetsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ReposListReleaseAssets200 = ReadonlyArray<ReleaseAsset>

export interface ReposUploadReleaseAssetParams {
  readonly "name": string;
  readonly "label"?: string | undefined
}

export type ReactionsListForReleaseParamsContent = "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes"

export interface ReactionsListForReleaseParams {
  readonly "content"?: ReactionsListForReleaseParamsContent | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ReactionsListForRelease200 = ReadonlyArray<Reaction>

export interface ReactionsCreateForReleaseParams {
  
}

/**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the release.
*/
export type ReactionsCreateForReleaseRequestContent = "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes"

export interface ReactionsCreateForReleaseRequest {
  /**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the release.
*/
readonly "content": ReactionsCreateForReleaseRequestContent
}

export interface ReactionsDeleteForReleaseParams {
  
}

export interface ReposGetBranchRulesParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* The type of source for the ruleset that includes this rule.
*/
export type RepositoryRuleDetailedEnumRulesetSourceType = "Repository" | "Organization"

export type RepositoryRuleDetailedEnumType = "code_scanning"

/**
* Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.
*/
export interface RepositoryRuleDetailedEnum {
  /**
* The type of source for the ruleset that includes this rule.
*/
readonly "ruleset_source_type"?: RepositoryRuleDetailedEnumRulesetSourceType | undefined;
  /**
* The name of the source of the ruleset that includes this rule.
*/
readonly "ruleset_source"?: string | undefined;
  /**
* The ID of the ruleset that includes this rule.
*/
readonly "ruleset_id"?: number | undefined;
  readonly "type": RepositoryRuleDetailedEnumType;
  readonly "parameters"?: {
  /**
* Tools that must provide code scanning results for this rule to pass.
*/
readonly "code_scanning_tools": ReadonlyArray<RepositoryRuleParamsCodeScanningTool>
} | undefined
}

/**
* When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.
*/
export type RepositoryRuleDetailedEnumParametersGroupingStrategy = "ALLGREEN" | "HEADGREEN"

/**
* Method to use when merging changes from queued pull requests.
*/
export type RepositoryRuleDetailedEnumParametersMergeMethod = "MERGE" | "SQUASH" | "REBASE"

/**
* The operator to use for matching.
*/
export type RepositoryRuleDetailedEnumParametersOperator = "starts_with" | "ends_with" | "contains" | "regex"

/**
* A repository rule with ruleset details.
*/
export type RepositoryRuleDetailed = Record<string, unknown>

export type ReposGetBranchRules200 = ReadonlyArray<RepositoryRuleDetailed>

export interface ReposGetRepoRulesetsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined;
  readonly "includes_parents"?: boolean | undefined;
  readonly "targets"?: string | undefined
}

export type ReposGetRepoRulesets200 = ReadonlyArray<RepositoryRuleset>

export interface ReposCreateRepoRulesetParams {
  
}

/**
* The target of the ruleset
*/
export type ReposCreateRepoRulesetRequestTarget = "branch" | "tag" | "push"

export interface ReposCreateRepoRulesetRequest {
  /**
* The name of the ruleset.
*/
readonly "name": string;
  /**
* The target of the ruleset
*/
readonly "target"?: ReposCreateRepoRulesetRequestTarget | undefined;
  readonly "enforcement": RepositoryRuleEnforcement;
  /**
* The actors that can bypass the rules in this ruleset
*/
readonly "bypass_actors"?: ReadonlyArray<RepositoryRulesetBypassActor> | undefined;
  readonly "conditions"?: RepositoryRulesetConditions | undefined;
  /**
* An array of rules within the ruleset.
*/
readonly "rules"?: ReadonlyArray<RepositoryRule> | undefined
}

export type ReposGetRepoRuleSuitesParamsTimePeriod = "hour" | "day" | "week" | "month"

export type ReposGetRepoRuleSuitesParamsRuleSuiteResult = "pass" | "fail" | "bypass" | "all"

export interface ReposGetRepoRuleSuitesParams {
  readonly "ref"?: string | undefined;
  readonly "time_period"?: ReposGetRepoRuleSuitesParamsTimePeriod | undefined;
  readonly "actor_name"?: string | undefined;
  readonly "rule_suite_result"?: ReposGetRepoRuleSuitesParamsRuleSuiteResult | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface ReposGetRepoRuleSuiteParams {
  
}

export interface ReposGetRepoRulesetParams {
  readonly "includes_parents"?: boolean | undefined
}

export interface ReposUpdateRepoRulesetParams {
  
}

/**
* The target of the ruleset
*/
export type ReposUpdateRepoRulesetRequestTarget = "branch" | "tag" | "push"

export interface ReposUpdateRepoRulesetRequest {
  /**
* The name of the ruleset.
*/
readonly "name"?: string | undefined;
  /**
* The target of the ruleset
*/
readonly "target"?: ReposUpdateRepoRulesetRequestTarget | undefined;
  readonly "enforcement"?: RepositoryRuleEnforcement | undefined;
  /**
* The actors that can bypass the rules in this ruleset
*/
readonly "bypass_actors"?: ReadonlyArray<RepositoryRulesetBypassActor> | undefined;
  readonly "conditions"?: RepositoryRulesetConditions | undefined;
  /**
* An array of rules within the ruleset.
*/
readonly "rules"?: ReadonlyArray<RepositoryRule> | undefined
}

export interface ReposDeleteRepoRulesetParams {
  
}

export interface ReposGetRepoRulesetHistoryParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ReposGetRepoRulesetHistory200 = ReadonlyArray<RulesetVersion>

export interface ReposGetRepoRulesetVersionParams {
  
}

export type SecretScanningListAlertsForRepoParamsState = "open" | "resolved"

export type SecretScanningListAlertsForRepoParamsSort = "created" | "updated"

export type SecretScanningListAlertsForRepoParamsDirection = "asc" | "desc"

export interface SecretScanningListAlertsForRepoParams {
  readonly "state"?: SecretScanningListAlertsForRepoParamsState | undefined;
  readonly "secret_type"?: string | undefined;
  readonly "resolution"?: string | undefined;
  readonly "sort"?: SecretScanningListAlertsForRepoParamsSort | undefined;
  readonly "direction"?: SecretScanningListAlertsForRepoParamsDirection | undefined;
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined;
  readonly "validity"?: string | undefined;
  readonly "is_publicly_leaked"?: boolean | undefined;
  readonly "is_multi_repo"?: boolean | undefined;
  readonly "hide_secret"?: boolean | undefined
}

/**
* The token status as of the latest validity check.
*/
export type SecretScanningAlertValidity = "active" | "inactive" | "unknown"

export interface SecretScanningAlert {
  readonly "number"?: AlertNumber | undefined;
  readonly "created_at"?: AlertCreatedAt | undefined;
  readonly "updated_at"?: NullableAlertUpdatedAt | null | undefined;
  readonly "url"?: AlertUrl | undefined;
  readonly "html_url"?: AlertHtmlUrl | undefined;
  /**
* The REST API URL of the code locations for this alert.
*/
readonly "locations_url"?: string | undefined;
  readonly "state"?: SecretScanningAlertState | undefined;
  readonly "resolution"?: SecretScanningAlertResolution | null | undefined;
  /**
* The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
readonly "resolved_at"?: string | null | undefined;
  readonly "resolved_by"?: NullableSimpleUser | null | undefined;
  /**
* An optional comment to resolve an alert.
*/
readonly "resolution_comment"?: string | null | undefined;
  /**
* The type of secret that secret scanning detected.
*/
readonly "secret_type"?: string | undefined;
  /**
* User-friendly name for the detected secret, matching the `secret_type`.
* For a list of built-in patterns, see "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
*/
readonly "secret_type_display_name"?: string | undefined;
  /**
* The secret that was detected.
*/
readonly "secret"?: string | undefined;
  /**
* Whether push protection was bypassed for the detected secret.
*/
readonly "push_protection_bypassed"?: boolean | null | undefined;
  readonly "push_protection_bypassed_by"?: NullableSimpleUser | null | undefined;
  /**
* The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
readonly "push_protection_bypassed_at"?: string | null | undefined;
  readonly "push_protection_bypass_request_reviewer"?: NullableSimpleUser | null | undefined;
  /**
* An optional comment when reviewing a push protection bypass.
*/
readonly "push_protection_bypass_request_reviewer_comment"?: string | null | undefined;
  /**
* An optional comment when requesting a push protection bypass.
*/
readonly "push_protection_bypass_request_comment"?: string | null | undefined;
  /**
* The URL to a push protection bypass request.
*/
readonly "push_protection_bypass_request_html_url"?: string | null | undefined;
  /**
* The token status as of the latest validity check.
*/
readonly "validity"?: SecretScanningAlertValidity | undefined;
  /**
* Whether the detected secret was publicly leaked.
*/
readonly "publicly_leaked"?: boolean | null | undefined;
  /**
* Whether the detected secret was found in multiple repositories under the same organization or enterprise.
*/
readonly "multi_repo"?: boolean | null | undefined;
  /**
* A boolean value representing whether or not alert is base64 encoded
*/
readonly "is_base64_encoded"?: boolean | null | undefined;
  readonly "first_location_detected"?: NullableSecretScanningFirstDetectedLocation | null | undefined;
  /**
* A boolean value representing whether or not the token in the alert was detected in more than one location.
*/
readonly "has_more_locations"?: boolean | undefined
}

export type SecretScanningListAlertsForRepo200 = ReadonlyArray<SecretScanningAlert>

export interface SecretScanningListAlertsForRepo503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface SecretScanningGetAlertParams {
  readonly "hide_secret"?: boolean | undefined
}

export interface SecretScanningGetAlert503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface SecretScanningUpdateAlertParams {
  
}

/**
* An optional comment when closing or reopening an alert. Cannot be updated or deleted.
*/
export type SecretScanningAlertResolutionComment = string

export interface SecretScanningUpdateAlertRequest {
  readonly "state": SecretScanningAlertState;
  readonly "resolution"?: SecretScanningAlertResolution | null | undefined;
  readonly "resolution_comment"?: SecretScanningAlertResolutionComment | null | undefined
}

export interface SecretScanningUpdateAlert503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface SecretScanningListLocationsForAlertParams {
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

/**
* The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.
*/
export type SecretScanningLocationType = "commit" | "wiki_commit" | "issue_title" | "issue_body" | "issue_comment" | "discussion_title" | "discussion_body" | "discussion_comment" | "pull_request_title" | "pull_request_body" | "pull_request_comment" | "pull_request_review" | "pull_request_review_comment"

export interface SecretScanningLocation {
  /**
* The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.
*/
readonly "type"?: SecretScanningLocationType | undefined;
  readonly "details"?: SecretScanningLocationCommit | SecretScanningLocationWikiCommit | SecretScanningLocationIssueTitle | SecretScanningLocationIssueBody | SecretScanningLocationIssueComment | SecretScanningLocationDiscussionTitle | SecretScanningLocationDiscussionBody | SecretScanningLocationDiscussionComment | SecretScanningLocationPullRequestTitle | SecretScanningLocationPullRequestBody | SecretScanningLocationPullRequestComment | SecretScanningLocationPullRequestReview | SecretScanningLocationPullRequestReviewComment | undefined
}

/**
* List of locations where the secret was detected
*/
export type SecretScanningListLocationsForAlert200 = ReadonlyArray<SecretScanningLocation>

export interface SecretScanningListLocationsForAlert503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface SecretScanningCreatePushProtectionBypassParams {
  
}

/**
* The reason for bypassing push protection.
*/
export type SecretScanningPushProtectionBypassReason = "false_positive" | "used_in_tests" | "will_fix_later"

export interface SecretScanningCreatePushProtectionBypassRequest {
  readonly "reason": SecretScanningPushProtectionBypassReason;
  readonly "placeholder_id": SecretScanningPushProtectionBypassPlaceholderId
}

export interface SecretScanningPushProtectionBypass {
  readonly "reason"?: SecretScanningPushProtectionBypassReason | undefined;
  /**
* The time that the bypass will expire in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
readonly "expire_at"?: string | null | undefined;
  /**
* The token type this bypass is for.
*/
readonly "token_type"?: string | undefined
}

export interface SecretScanningCreatePushProtectionBypass503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface SecretScanningGetScanHistoryParams {
  
}

/**
* Information on a single scan performed by secret scanning on the repository
*/
export interface SecretScanningScan {
  /**
* The type of scan
*/
readonly "type"?: string | undefined;
  /**
* The state of the scan. Either "completed", "running", or "pending"
*/
readonly "status"?: string | undefined;
  /**
* The time that the scan was completed. Empty if the scan is running
*/
readonly "completed_at"?: string | null | undefined;
  /**
* The time that the scan was started. Empty if the scan is pending
*/
readonly "started_at"?: string | null | undefined
}

export interface SecretScanningScanHistory {
  readonly "incremental_scans"?: ReadonlyArray<SecretScanningScan> | undefined;
  readonly "pattern_update_scans"?: ReadonlyArray<SecretScanningScan> | undefined;
  readonly "backfill_scans"?: ReadonlyArray<SecretScanningScan> | undefined;
  readonly "custom_pattern_backfill_scans"?: ReadonlyArray<{
  /**
* Name of the custom pattern for custom pattern scans
*/
readonly "pattern_name"?: string | undefined;
  /**
* Level at which the custom pattern is defined, one of "repository", "organization", or "enterprise"
*/
readonly "pattern_scope"?: string | undefined;
  /**
* The type of scan
*/
readonly "type"?: string | undefined;
  /**
* The state of the scan. Either "completed", "running", or "pending"
*/
readonly "status"?: string | undefined;
  /**
* The time that the scan was completed. Empty if the scan is running
*/
readonly "completed_at"?: string | null | undefined;
  /**
* The time that the scan was started. Empty if the scan is pending
*/
readonly "started_at"?: string | null | undefined
}> | undefined
}

export interface SecretScanningGetScanHistory503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export type SecurityAdvisoriesListRepositoryAdvisoriesParamsDirection = "asc" | "desc"

export type SecurityAdvisoriesListRepositoryAdvisoriesParamsSort = "created" | "updated" | "published"

export type SecurityAdvisoriesListRepositoryAdvisoriesParamsState = "triage" | "draft" | "published" | "closed"

export interface SecurityAdvisoriesListRepositoryAdvisoriesParams {
  readonly "direction"?: SecurityAdvisoriesListRepositoryAdvisoriesParamsDirection | undefined;
  readonly "sort"?: SecurityAdvisoriesListRepositoryAdvisoriesParamsSort | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined;
  readonly "per_page"?: number | undefined;
  readonly "state"?: SecurityAdvisoriesListRepositoryAdvisoriesParamsState | undefined
}

export type SecurityAdvisoriesListRepositoryAdvisories200 = ReadonlyArray<RepositoryAdvisory>

export interface SecurityAdvisoriesCreateRepositoryAdvisoryParams {
  
}

/**
* The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
*/
export type RepositoryAdvisoryCreateSeverity = "critical" | "high" | "medium" | "low"

export interface RepositoryAdvisoryCreate {
  /**
* A short summary of the advisory.
*/
readonly "summary": string;
  /**
* A detailed description of what the advisory impacts.
*/
readonly "description": string;
  /**
* The Common Vulnerabilities and Exposures (CVE) ID.
*/
readonly "cve_id"?: string | null | undefined;
  /**
* A product affected by the vulnerability detailed in a repository security advisory.
*/
readonly "vulnerabilities": ReadonlyArray<{
  /**
* The name of the package affected by the vulnerability.
*/
readonly "package": {
  readonly "ecosystem": SecurityAdvisoryEcosystems;
  /**
* The unique package name within its ecosystem.
*/
readonly "name"?: string | null | undefined
};
  /**
* The range of the package versions affected by the vulnerability.
*/
readonly "vulnerable_version_range"?: string | null | undefined;
  /**
* The package version(s) that resolve the vulnerability.
*/
readonly "patched_versions"?: string | null | undefined;
  /**
* The functions in the package that are affected.
*/
readonly "vulnerable_functions"?: ReadonlyArray<string> | null | undefined
}>;
  /**
* A list of Common Weakness Enumeration (CWE) IDs.
*/
readonly "cwe_ids"?: ReadonlyArray<string> | null | undefined;
  /**
* A list of users receiving credit for their participation in the security advisory.
*/
readonly "credits"?: ReadonlyArray<{
  /**
* The username of the user credited.
*/
readonly "login": string;
  readonly "type": SecurityAdvisoryCreditTypes
}> | null | undefined;
  /**
* The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
*/
readonly "severity"?: RepositoryAdvisoryCreateSeverity | null | undefined;
  /**
* The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.
*/
readonly "cvss_vector_string"?: string | null | undefined;
  /**
* Whether to create a temporary private fork of the repository to collaborate on a fix.
*/
readonly "start_private_fork"?: boolean | undefined
}

export interface SecurityAdvisoriesCreatePrivateVulnerabilityReportParams {
  
}

/**
* The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
*/
export type PrivateVulnerabilityReportCreateSeverity = "critical" | "high" | "medium" | "low"

export interface PrivateVulnerabilityReportCreate {
  /**
* A short summary of the advisory.
*/
readonly "summary": string;
  /**
* A detailed description of what the advisory impacts.
*/
readonly "description": string;
  /**
* An array of products affected by the vulnerability detailed in a repository security advisory.
*/
readonly "vulnerabilities"?: ReadonlyArray<{
  /**
* The name of the package affected by the vulnerability.
*/
readonly "package": {
  readonly "ecosystem": SecurityAdvisoryEcosystems;
  /**
* The unique package name within its ecosystem.
*/
readonly "name"?: string | null | undefined
};
  /**
* The range of the package versions affected by the vulnerability.
*/
readonly "vulnerable_version_range"?: string | null | undefined;
  /**
* The package version(s) that resolve the vulnerability.
*/
readonly "patched_versions"?: string | null | undefined;
  /**
* The functions in the package that are affected.
*/
readonly "vulnerable_functions"?: ReadonlyArray<string> | null | undefined
}> | null | undefined;
  /**
* A list of Common Weakness Enumeration (CWE) IDs.
*/
readonly "cwe_ids"?: ReadonlyArray<string> | null | undefined;
  /**
* The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
*/
readonly "severity"?: PrivateVulnerabilityReportCreateSeverity | null | undefined;
  /**
* The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.
*/
readonly "cvss_vector_string"?: string | null | undefined;
  /**
* Whether to create a temporary private fork of the repository to collaborate on a fix.
*/
readonly "start_private_fork"?: boolean | undefined
}

export interface SecurityAdvisoriesGetRepositoryAdvisoryParams {
  
}

export interface SecurityAdvisoriesUpdateRepositoryAdvisoryParams {
  
}

/**
* The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
*/
export type RepositoryAdvisoryUpdateSeverity = "critical" | "high" | "medium" | "low"

/**
* The state of the advisory.
*/
export type RepositoryAdvisoryUpdateState = "published" | "closed" | "draft"

export interface RepositoryAdvisoryUpdate {
  /**
* A short summary of the advisory.
*/
readonly "summary"?: string | undefined;
  /**
* A detailed description of what the advisory impacts.
*/
readonly "description"?: string | undefined;
  /**
* The Common Vulnerabilities and Exposures (CVE) ID.
*/
readonly "cve_id"?: string | null | undefined;
  /**
* A product affected by the vulnerability detailed in a repository security advisory.
*/
readonly "vulnerabilities"?: ReadonlyArray<{
  /**
* The name of the package affected by the vulnerability.
*/
readonly "package": {
  readonly "ecosystem": SecurityAdvisoryEcosystems;
  /**
* The unique package name within its ecosystem.
*/
readonly "name"?: string | null | undefined
};
  /**
* The range of the package versions affected by the vulnerability.
*/
readonly "vulnerable_version_range"?: string | null | undefined;
  /**
* The package version(s) that resolve the vulnerability.
*/
readonly "patched_versions"?: string | null | undefined;
  /**
* The functions in the package that are affected.
*/
readonly "vulnerable_functions"?: ReadonlyArray<string> | null | undefined
}> | undefined;
  /**
* A list of Common Weakness Enumeration (CWE) IDs.
*/
readonly "cwe_ids"?: ReadonlyArray<string> | null | undefined;
  /**
* A list of users receiving credit for their participation in the security advisory.
*/
readonly "credits"?: ReadonlyArray<{
  /**
* The username of the user credited.
*/
readonly "login": string;
  readonly "type": SecurityAdvisoryCreditTypes
}> | null | undefined;
  /**
* The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
*/
readonly "severity"?: RepositoryAdvisoryUpdateSeverity | null | undefined;
  /**
* The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.
*/
readonly "cvss_vector_string"?: string | null | undefined;
  /**
* The state of the advisory.
*/
readonly "state"?: RepositoryAdvisoryUpdateState | undefined;
  /**
* A list of usernames who have been granted write access to the advisory.
*/
readonly "collaborating_users"?: ReadonlyArray<string> | null | undefined;
  /**
* A list of team slugs which have been granted write access to the advisory.
*/
readonly "collaborating_teams"?: ReadonlyArray<string> | null | undefined
}

export interface SecurityAdvisoriesCreateRepositoryAdvisoryCveRequestParams {
  
}

export type SecurityAdvisoriesCreateRepositoryAdvisoryCveRequest202 = Record<string, unknown>

export interface SecurityAdvisoriesCreateForkParams {
  
}

export interface ActivityListStargazersForRepoParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Stargazer
*/
export interface Stargazer {
  readonly "starred_at": string;
  readonly "user": NullableSimpleUser | null
}

export type ActivityListStargazersForRepo200 = ReadonlyArray<SimpleUser> | ReadonlyArray<Stargazer>

export interface ReposGetCodeFrequencyStatsParams {
  
}

/**
* Code Frequency Stat
*/
export type CodeFrequencyStat = ReadonlyArray<number>

export type ReposGetCodeFrequencyStats200 = ReadonlyArray<CodeFrequencyStat>

export type ReposGetCodeFrequencyStats202 = Record<string, unknown>

export interface ReposGetCommitActivityStatsParams {
  
}

/**
* Commit Activity
*/
export interface CommitActivity {
  readonly "days": ReadonlyArray<number>;
  readonly "total": number;
  readonly "week": number
}

export type ReposGetCommitActivityStats200 = ReadonlyArray<CommitActivity>

export type ReposGetCommitActivityStats202 = Record<string, unknown>

export interface ReposGetContributorsStatsParams {
  
}

/**
* Contributor Activity
*/
export interface ContributorActivity {
  readonly "author": NullableSimpleUser | null;
  readonly "total": number;
  readonly "weeks": ReadonlyArray<{
  readonly "w"?: number | undefined;
  readonly "a"?: number | undefined;
  readonly "d"?: number | undefined;
  readonly "c"?: number | undefined
}>
}

export type ReposGetContributorsStats200 = ReadonlyArray<ContributorActivity>

export type ReposGetContributorsStats202 = Record<string, unknown>

export interface ReposGetParticipationStatsParams {
  
}

export interface ParticipationStats {
  readonly "all": ReadonlyArray<number>;
  readonly "owner": ReadonlyArray<number>
}

export interface ReposGetPunchCardStatsParams {
  
}

export type ReposGetPunchCardStats200 = ReadonlyArray<CodeFrequencyStat>

export interface ReposCreateCommitStatusParams {
  
}

/**
* The state of the status.
*/
export type ReposCreateCommitStatusRequestState = "error" | "failure" | "pending" | "success"

export interface ReposCreateCommitStatusRequest {
  /**
* The state of the status.
*/
readonly "state": ReposCreateCommitStatusRequestState;
  /**
* The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  
* For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  
* `http://ci.example.com/user/repo/build/sha`
*/
readonly "target_url"?: string | null | undefined;
  /**
* A short description of the status.
*/
readonly "description"?: string | null | undefined;
  /**
* A string label to differentiate this status from the status of other systems. This field is case-insensitive.
*/
readonly "context"?: string | undefined
}

export interface ActivityListWatchersForRepoParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ActivityListWatchersForRepo200 = ReadonlyArray<SimpleUser>

export interface ActivityGetRepoSubscriptionParams {
  
}

/**
* Repository invitations let you manage who you collaborate with.
*/
export interface RepositorySubscription {
  /**
* Determines if notifications should be received from this repository.
*/
readonly "subscribed": boolean;
  /**
* Determines if all notifications should be blocked from this repository.
*/
readonly "ignored": boolean;
  readonly "reason": string | null;
  readonly "created_at": string;
  readonly "url": string;
  readonly "repository_url": string
}

export interface ActivitySetRepoSubscriptionParams {
  
}

export interface ActivitySetRepoSubscriptionRequest {
  /**
* Determines if notifications should be received from this repository.
*/
readonly "subscribed"?: boolean | undefined;
  /**
* Determines if all notifications should be blocked from this repository.
*/
readonly "ignored"?: boolean | undefined
}

export interface ActivityDeleteRepoSubscriptionParams {
  
}

export interface ReposListTagsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Tag
*/
export interface Tag {
  readonly "name": string;
  readonly "commit": {
  readonly "sha": string;
  readonly "url": string
};
  readonly "zipball_url": string;
  readonly "tarball_url": string;
  readonly "node_id": string
}

export type ReposListTags200 = ReadonlyArray<Tag>

export interface ReposListTagProtectionParams {
  
}

/**
* Tag protection
*/
export interface TagProtection {
  readonly "id"?: number | undefined;
  readonly "created_at"?: string | undefined;
  readonly "updated_at"?: string | undefined;
  readonly "enabled"?: boolean | undefined;
  readonly "pattern": string
}

export type ReposListTagProtection200 = ReadonlyArray<TagProtection>

export interface ReposCreateTagProtectionParams {
  
}

export interface ReposCreateTagProtectionRequest {
  /**
* An optional glob pattern to match against when enforcing tag protection.
*/
readonly "pattern": string
}

export interface ReposDeleteTagProtectionParams {
  
}

export interface ReposDownloadTarballArchiveParams {
  
}

export interface ReposListTeamsParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ReposListTeams200 = ReadonlyArray<Team>

export interface ReposGetAllTopicsParams {
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

/**
* A topic aggregates entities that are related to a subject.
*/
export interface Topic {
  readonly "names": ReadonlyArray<string>
}

export interface ReposReplaceAllTopicsParams {
  
}

export interface ReposReplaceAllTopicsRequest {
  /**
* An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` will be saved as lowercase.
*/
readonly "names": ReadonlyArray<string>
}

export type ReposGetClonesParamsPer = "day" | "week"

export interface ReposGetClonesParams {
  readonly "per"?: ReposGetClonesParamsPer | undefined
}

export interface Traffic {
  readonly "timestamp": string;
  readonly "uniques": number;
  readonly "count": number
}

/**
* Clone Traffic
*/
export interface CloneTraffic {
  readonly "count": number;
  readonly "uniques": number;
  readonly "clones": ReadonlyArray<Traffic>
}

export interface ReposGetTopPathsParams {
  
}

/**
* Content Traffic
*/
export interface ContentTraffic {
  readonly "path": string;
  readonly "title": string;
  readonly "count": number;
  readonly "uniques": number
}

export type ReposGetTopPaths200 = ReadonlyArray<ContentTraffic>

export interface ReposGetTopReferrersParams {
  
}

/**
* Referrer Traffic
*/
export interface ReferrerTraffic {
  readonly "referrer": string;
  readonly "count": number;
  readonly "uniques": number
}

export type ReposGetTopReferrers200 = ReadonlyArray<ReferrerTraffic>

export type ReposGetViewsParamsPer = "day" | "week"

export interface ReposGetViewsParams {
  readonly "per"?: ReposGetViewsParamsPer | undefined
}

/**
* View Traffic
*/
export interface ViewTraffic {
  readonly "count": number;
  readonly "uniques": number;
  readonly "views": ReadonlyArray<Traffic>
}

export interface ReposTransferParams {
  
}

export interface ReposTransferRequest {
  /**
* The username or organization name the repository will be transferred to.
*/
readonly "new_owner": string;
  /**
* The new name to be given to the repository.
*/
readonly "new_name"?: string | undefined;
  /**
* ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
*/
readonly "team_ids"?: ReadonlyArray<number> | undefined
}

export interface ReposCheckVulnerabilityAlertsParams {
  
}

export interface ReposEnableVulnerabilityAlertsParams {
  
}

export interface ReposDisableVulnerabilityAlertsParams {
  
}

export interface ReposDownloadZipballArchiveParams {
  
}

export interface ReposCreateUsingTemplateRequest {
  /**
* The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
*/
readonly "owner"?: string | undefined;
  /**
* The name of the new repository.
*/
readonly "name": string;
  /**
* A short description of the new repository.
*/
readonly "description"?: string | undefined;
  /**
* Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
*/
readonly "include_all_branches"?: boolean | undefined;
  /**
* Either `true` to create a new private repository or `false` to create a new public one.
*/
readonly "private"?: boolean | undefined
}

export interface ReposListPublicParams {
  readonly "since"?: number | undefined
}

export type ReposListPublic200 = ReadonlyArray<MinimalRepository>

export type SearchCodeParamsSort = "indexed"

export type SearchCodeParamsOrder = "desc" | "asc"

export interface SearchCodeParams {
  readonly "q": string;
  readonly "sort"?: SearchCodeParamsSort | undefined;
  readonly "order"?: SearchCodeParamsOrder | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type SearchResultTextMatches = ReadonlyArray<{
  readonly "object_url"?: string | undefined;
  readonly "object_type"?: string | null | undefined;
  readonly "property"?: string | undefined;
  readonly "fragment"?: string | undefined;
  readonly "matches"?: ReadonlyArray<{
  readonly "text"?: string | undefined;
  readonly "indices"?: ReadonlyArray<number> | undefined
}> | undefined
}>

/**
* Code Search Result Item
*/
export interface CodeSearchResultItem {
  readonly "name": string;
  readonly "path": string;
  readonly "sha": string;
  readonly "url": string;
  readonly "git_url": string;
  readonly "html_url": string;
  readonly "repository": MinimalRepository;
  readonly "score": number;
  readonly "file_size"?: number | undefined;
  readonly "language"?: string | null | undefined;
  readonly "last_modified_at"?: string | undefined;
  readonly "line_numbers"?: ReadonlyArray<string> | undefined;
  readonly "text_matches"?: SearchResultTextMatches | undefined
}

export interface SearchCode200 {
  readonly "total_count": number;
  readonly "incomplete_results": boolean;
  readonly "items": ReadonlyArray<CodeSearchResultItem>
}

export interface SearchCode503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export type SearchCommitsParamsSort = "author-date" | "committer-date"

export type SearchCommitsParamsOrder = "desc" | "asc"

export interface SearchCommitsParams {
  readonly "q": string;
  readonly "sort"?: SearchCommitsParamsSort | undefined;
  readonly "order"?: SearchCommitsParamsOrder | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Commit Search Result Item
*/
export interface CommitSearchResultItem {
  readonly "url": string;
  readonly "sha": string;
  readonly "html_url": string;
  readonly "comments_url": string;
  readonly "commit": {
  readonly "author": {
  readonly "name": string;
  readonly "email": string;
  readonly "date": string
};
  readonly "committer": NullableGitUser | null;
  readonly "comment_count": number;
  readonly "message": string;
  readonly "tree": {
  readonly "sha": string;
  readonly "url": string
};
  readonly "url": string;
  readonly "verification"?: Verification | undefined
};
  readonly "author": NullableSimpleUser | null;
  readonly "committer": NullableGitUser | null;
  readonly "parents": ReadonlyArray<{
  readonly "url"?: string | undefined;
  readonly "html_url"?: string | undefined;
  readonly "sha"?: string | undefined
}>;
  readonly "repository": MinimalRepository;
  readonly "score": number;
  readonly "node_id": string;
  readonly "text_matches"?: SearchResultTextMatches | undefined
}

export interface SearchCommits200 {
  readonly "total_count": number;
  readonly "incomplete_results": boolean;
  readonly "items": ReadonlyArray<CommitSearchResultItem>
}

export type SearchIssuesAndPullRequestsParamsSort = "comments" | "reactions" | "reactions-+1" | "reactions--1" | "reactions-smile" | "reactions-thinking_face" | "reactions-heart" | "reactions-tada" | "interactions" | "created" | "updated"

export type SearchIssuesAndPullRequestsParamsOrder = "desc" | "asc"

export interface SearchIssuesAndPullRequestsParams {
  readonly "q": string;
  readonly "sort"?: SearchIssuesAndPullRequestsParamsSort | undefined;
  readonly "order"?: SearchIssuesAndPullRequestsParamsOrder | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined;
  readonly "advanced_search"?: string | undefined
}

/**
* Issue Search Result Item
*/
export interface IssueSearchResultItem {
  readonly "url": string;
  readonly "repository_url": string;
  readonly "labels_url": string;
  readonly "comments_url": string;
  readonly "events_url": string;
  readonly "html_url": string;
  readonly "id": number;
  readonly "node_id": string;
  readonly "number": number;
  readonly "title": string;
  readonly "locked": boolean;
  readonly "active_lock_reason"?: string | null | undefined;
  readonly "assignees"?: ReadonlyArray<SimpleUser> | null | undefined;
  readonly "user": NullableSimpleUser | null;
  readonly "labels": ReadonlyArray<{
  readonly "id"?: number | undefined;
  readonly "node_id"?: string | undefined;
  readonly "url"?: string | undefined;
  readonly "name"?: string | undefined;
  readonly "color"?: string | undefined;
  readonly "default"?: boolean | undefined;
  readonly "description"?: string | null | undefined
}>;
  readonly "sub_issues_summary"?: SubIssuesSummary | undefined;
  readonly "issue_dependencies_summary"?: IssueDependenciesSummary | undefined;
  readonly "issue_field_values"?: ReadonlyArray<IssueFieldValue> | undefined;
  readonly "state": string;
  readonly "state_reason"?: string | null | undefined;
  readonly "assignee": NullableSimpleUser | null;
  readonly "milestone": NullableMilestone | null;
  readonly "comments": number;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "closed_at": string | null;
  readonly "text_matches"?: SearchResultTextMatches | undefined;
  readonly "pull_request"?: {
  readonly "merged_at"?: string | null | undefined;
  readonly "diff_url": string | null;
  readonly "html_url": string | null;
  readonly "patch_url": string | null;
  readonly "url": string | null
} | undefined;
  readonly "body"?: string | undefined;
  readonly "score": number;
  readonly "author_association": AuthorAssociation;
  readonly "draft"?: boolean | undefined;
  readonly "repository"?: Repository | undefined;
  readonly "body_html"?: string | undefined;
  readonly "body_text"?: string | undefined;
  readonly "timeline_url"?: string | undefined;
  readonly "type"?: IssueType | null | undefined;
  readonly "performed_via_github_app"?: NullableIntegration | null | undefined;
  readonly "reactions"?: ReactionRollup | undefined
}

export interface SearchIssuesAndPullRequests200 {
  readonly "total_count": number;
  readonly "incomplete_results": boolean;
  readonly "items": ReadonlyArray<IssueSearchResultItem>
}

export interface SearchIssuesAndPullRequests503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export type SearchLabelsParamsSort = "created" | "updated"

export type SearchLabelsParamsOrder = "desc" | "asc"

export interface SearchLabelsParams {
  readonly "repository_id": number;
  readonly "q": string;
  readonly "sort"?: SearchLabelsParamsSort | undefined;
  readonly "order"?: SearchLabelsParamsOrder | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Label Search Result Item
*/
export interface LabelSearchResultItem {
  readonly "id": number;
  readonly "node_id": string;
  readonly "url": string;
  readonly "name": string;
  readonly "color": string;
  readonly "default": boolean;
  readonly "description": string | null;
  readonly "score": number;
  readonly "text_matches"?: SearchResultTextMatches | undefined
}

export interface SearchLabels200 {
  readonly "total_count": number;
  readonly "incomplete_results": boolean;
  readonly "items": ReadonlyArray<LabelSearchResultItem>
}

export type SearchReposParamsSort = "stars" | "forks" | "help-wanted-issues" | "updated"

export type SearchReposParamsOrder = "desc" | "asc"

export interface SearchReposParams {
  readonly "q": string;
  readonly "sort"?: SearchReposParamsSort | undefined;
  readonly "order"?: SearchReposParamsOrder | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Repo Search Result Item
*/
export interface RepoSearchResultItem {
  readonly "id": number;
  readonly "node_id": string;
  readonly "name": string;
  readonly "full_name": string;
  readonly "owner": NullableSimpleUser | null;
  readonly "private": boolean;
  readonly "html_url": string;
  readonly "description": string | null;
  readonly "fork": boolean;
  readonly "url": string;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "pushed_at": string;
  readonly "homepage": string | null;
  readonly "size": number;
  readonly "stargazers_count": number;
  readonly "watchers_count": number;
  readonly "language": string | null;
  readonly "forks_count": number;
  readonly "open_issues_count": number;
  readonly "master_branch"?: string | undefined;
  readonly "default_branch": string;
  readonly "score": number;
  readonly "forks_url": string;
  readonly "keys_url": string;
  readonly "collaborators_url": string;
  readonly "teams_url": string;
  readonly "hooks_url": string;
  readonly "issue_events_url": string;
  readonly "events_url": string;
  readonly "assignees_url": string;
  readonly "branches_url": string;
  readonly "tags_url": string;
  readonly "blobs_url": string;
  readonly "git_tags_url": string;
  readonly "git_refs_url": string;
  readonly "trees_url": string;
  readonly "statuses_url": string;
  readonly "languages_url": string;
  readonly "stargazers_url": string;
  readonly "contributors_url": string;
  readonly "subscribers_url": string;
  readonly "subscription_url": string;
  readonly "commits_url": string;
  readonly "git_commits_url": string;
  readonly "comments_url": string;
  readonly "issue_comment_url": string;
  readonly "contents_url": string;
  readonly "compare_url": string;
  readonly "merges_url": string;
  readonly "archive_url": string;
  readonly "downloads_url": string;
  readonly "issues_url": string;
  readonly "pulls_url": string;
  readonly "milestones_url": string;
  readonly "notifications_url": string;
  readonly "labels_url": string;
  readonly "releases_url": string;
  readonly "deployments_url": string;
  readonly "git_url": string;
  readonly "ssh_url": string;
  readonly "clone_url": string;
  readonly "svn_url": string;
  readonly "forks": number;
  readonly "open_issues": number;
  readonly "watchers": number;
  readonly "topics"?: ReadonlyArray<string> | undefined;
  readonly "mirror_url": string | null;
  readonly "has_issues": boolean;
  readonly "has_projects": boolean;
  readonly "has_pages": boolean;
  readonly "has_wiki": boolean;
  readonly "has_downloads": boolean;
  readonly "has_discussions"?: boolean | undefined;
  readonly "archived": boolean;
  /**
* Returns whether or not this repository disabled.
*/
readonly "disabled": boolean;
  /**
* The repository visibility: public, private, or internal.
*/
readonly "visibility"?: string | undefined;
  readonly "license": NullableLicenseSimple | null;
  readonly "permissions"?: {
  readonly "admin": boolean;
  readonly "maintain"?: boolean | undefined;
  readonly "push": boolean;
  readonly "triage"?: boolean | undefined;
  readonly "pull": boolean
} | undefined;
  readonly "text_matches"?: SearchResultTextMatches | undefined;
  readonly "temp_clone_token"?: string | undefined;
  readonly "allow_merge_commit"?: boolean | undefined;
  readonly "allow_squash_merge"?: boolean | undefined;
  readonly "allow_rebase_merge"?: boolean | undefined;
  readonly "allow_auto_merge"?: boolean | undefined;
  readonly "delete_branch_on_merge"?: boolean | undefined;
  readonly "allow_forking"?: boolean | undefined;
  readonly "is_template"?: boolean | undefined;
  readonly "web_commit_signoff_required"?: boolean | undefined
}

export interface SearchRepos200 {
  readonly "total_count": number;
  readonly "incomplete_results": boolean;
  readonly "items": ReadonlyArray<RepoSearchResultItem>
}

export interface SearchRepos503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface SearchTopicsParams {
  readonly "q": string;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Topic Search Result Item
*/
export interface TopicSearchResultItem {
  readonly "name": string;
  readonly "display_name": string | null;
  readonly "short_description": string | null;
  readonly "description": string | null;
  readonly "created_by": string | null;
  readonly "released": string | null;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "featured": boolean;
  readonly "curated": boolean;
  readonly "score": number;
  readonly "repository_count"?: number | null | undefined;
  readonly "logo_url"?: string | null | undefined;
  readonly "text_matches"?: SearchResultTextMatches | undefined;
  readonly "related"?: ReadonlyArray<{
  readonly "topic_relation"?: {
  readonly "id"?: number | undefined;
  readonly "name"?: string | undefined;
  readonly "topic_id"?: number | undefined;
  readonly "relation_type"?: string | undefined
} | undefined
}> | null | undefined;
  readonly "aliases"?: ReadonlyArray<{
  readonly "topic_relation"?: {
  readonly "id"?: number | undefined;
  readonly "name"?: string | undefined;
  readonly "topic_id"?: number | undefined;
  readonly "relation_type"?: string | undefined
} | undefined
}> | null | undefined
}

export interface SearchTopics200 {
  readonly "total_count": number;
  readonly "incomplete_results": boolean;
  readonly "items": ReadonlyArray<TopicSearchResultItem>
}

export type SearchUsersParamsSort = "followers" | "repositories" | "joined"

export type SearchUsersParamsOrder = "desc" | "asc"

export interface SearchUsersParams {
  readonly "q": string;
  readonly "sort"?: SearchUsersParamsSort | undefined;
  readonly "order"?: SearchUsersParamsOrder | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* User Search Result Item
*/
export interface UserSearchResultItem {
  readonly "login": string;
  readonly "id": number;
  readonly "node_id": string;
  readonly "avatar_url": string;
  readonly "gravatar_id": string | null;
  readonly "url": string;
  readonly "html_url": string;
  readonly "followers_url": string;
  readonly "subscriptions_url": string;
  readonly "organizations_url": string;
  readonly "repos_url": string;
  readonly "received_events_url": string;
  readonly "type": string;
  readonly "score": number;
  readonly "following_url": string;
  readonly "gists_url": string;
  readonly "starred_url": string;
  readonly "events_url": string;
  readonly "public_repos"?: number | undefined;
  readonly "public_gists"?: number | undefined;
  readonly "followers"?: number | undefined;
  readonly "following"?: number | undefined;
  readonly "created_at"?: string | undefined;
  readonly "updated_at"?: string | undefined;
  readonly "name"?: string | null | undefined;
  readonly "bio"?: string | null | undefined;
  readonly "email"?: string | null | undefined;
  readonly "location"?: string | null | undefined;
  readonly "site_admin": boolean;
  readonly "hireable"?: boolean | null | undefined;
  readonly "text_matches"?: SearchResultTextMatches | undefined;
  readonly "blog"?: string | null | undefined;
  readonly "company"?: string | null | undefined;
  readonly "suspended_at"?: string | null | undefined;
  readonly "user_view_type"?: string | undefined
}

export interface SearchUsers200 {
  readonly "total_count": number;
  readonly "incomplete_results": boolean;
  readonly "items": ReadonlyArray<UserSearchResultItem>
}

export interface SearchUsers503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface TeamsGetLegacyParams {
  
}

export interface TeamsDeleteLegacyParams {
  
}

export interface TeamsUpdateLegacyParams {
  
}

/**
* The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  
* **For a non-nested team:**  
*  * `secret` - only visible to organization owners and members of this team.  
*  * `closed` - visible to all members of this organization.  
* **For a parent or child team:**  
*  * `closed` - visible to all members of this organization.
*/
export type TeamsUpdateLegacyRequestPrivacy = "secret" | "closed"

/**
* The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
*  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
*  * `notifications_disabled` - no one receives notifications.
*/
export type TeamsUpdateLegacyRequestNotificationSetting = "notifications_enabled" | "notifications_disabled"

/**
* **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
*/
export type TeamsUpdateLegacyRequestPermission = "pull" | "push" | "admin"

export interface TeamsUpdateLegacyRequest {
  /**
* The name of the team.
*/
readonly "name": string;
  /**
* The description of the team.
*/
readonly "description"?: string | undefined;
  /**
* The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  
* **For a non-nested team:**  
*  * `secret` - only visible to organization owners and members of this team.  
*  * `closed` - visible to all members of this organization.  
* **For a parent or child team:**  
*  * `closed` - visible to all members of this organization.
*/
readonly "privacy"?: TeamsUpdateLegacyRequestPrivacy | undefined;
  /**
* The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
*  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
*  * `notifications_disabled` - no one receives notifications.
*/
readonly "notification_setting"?: TeamsUpdateLegacyRequestNotificationSetting | undefined;
  /**
* **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
*/
readonly "permission"?: TeamsUpdateLegacyRequestPermission | undefined;
  /**
* The ID of a team to set as the parent team.
*/
readonly "parent_team_id"?: number | null | undefined
}

export type TeamsListDiscussionsLegacyParamsDirection = "asc" | "desc"

export interface TeamsListDiscussionsLegacyParams {
  readonly "direction"?: TeamsListDiscussionsLegacyParamsDirection | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type TeamsListDiscussionsLegacy200 = ReadonlyArray<TeamDiscussion>

export interface TeamsCreateDiscussionLegacyParams {
  
}

export interface TeamsCreateDiscussionLegacyRequest {
  /**
* The discussion post's title.
*/
readonly "title": string;
  /**
* The discussion post's body text.
*/
readonly "body": string;
  /**
* Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
*/
readonly "private"?: boolean | undefined
}

export interface TeamsGetDiscussionLegacyParams {
  
}

export interface TeamsDeleteDiscussionLegacyParams {
  
}

export interface TeamsUpdateDiscussionLegacyParams {
  
}

export interface TeamsUpdateDiscussionLegacyRequest {
  /**
* The discussion post's title.
*/
readonly "title"?: string | undefined;
  /**
* The discussion post's body text.
*/
readonly "body"?: string | undefined
}

export type TeamsListDiscussionCommentsLegacyParamsDirection = "asc" | "desc"

export interface TeamsListDiscussionCommentsLegacyParams {
  readonly "direction"?: TeamsListDiscussionCommentsLegacyParamsDirection | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type TeamsListDiscussionCommentsLegacy200 = ReadonlyArray<TeamDiscussionComment>

export interface TeamsCreateDiscussionCommentLegacyParams {
  
}

export interface TeamsCreateDiscussionCommentLegacyRequest {
  /**
* The discussion comment's body text.
*/
readonly "body": string
}

export interface TeamsGetDiscussionCommentLegacyParams {
  
}

export interface TeamsDeleteDiscussionCommentLegacyParams {
  
}

export interface TeamsUpdateDiscussionCommentLegacyParams {
  
}

export interface TeamsUpdateDiscussionCommentLegacyRequest {
  /**
* The discussion comment's body text.
*/
readonly "body": string
}

export type ReactionsListForTeamDiscussionCommentLegacyParamsContent = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes"

export interface ReactionsListForTeamDiscussionCommentLegacyParams {
  readonly "content"?: ReactionsListForTeamDiscussionCommentLegacyParamsContent | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ReactionsListForTeamDiscussionCommentLegacy200 = ReadonlyArray<Reaction>

export interface ReactionsCreateForTeamDiscussionCommentLegacyParams {
  
}

/**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment.
*/
export type ReactionsCreateForTeamDiscussionCommentLegacyRequestContent = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes"

export interface ReactionsCreateForTeamDiscussionCommentLegacyRequest {
  /**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment.
*/
readonly "content": ReactionsCreateForTeamDiscussionCommentLegacyRequestContent
}

export type ReactionsListForTeamDiscussionLegacyParamsContent = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes"

export interface ReactionsListForTeamDiscussionLegacyParams {
  readonly "content"?: ReactionsListForTeamDiscussionLegacyParamsContent | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ReactionsListForTeamDiscussionLegacy200 = ReadonlyArray<Reaction>

export interface ReactionsCreateForTeamDiscussionLegacyParams {
  
}

/**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion.
*/
export type ReactionsCreateForTeamDiscussionLegacyRequestContent = "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes"

export interface ReactionsCreateForTeamDiscussionLegacyRequest {
  /**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion.
*/
readonly "content": ReactionsCreateForTeamDiscussionLegacyRequestContent
}

export interface TeamsListPendingInvitationsLegacyParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type TeamsListPendingInvitationsLegacy200 = ReadonlyArray<OrganizationInvitation>

export type TeamsListMembersLegacyParamsRole = "member" | "maintainer" | "all"

export interface TeamsListMembersLegacyParams {
  readonly "role"?: TeamsListMembersLegacyParamsRole | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type TeamsListMembersLegacy200 = ReadonlyArray<SimpleUser>

export interface TeamsGetMemberLegacyParams {
  
}

export interface TeamsAddMemberLegacyParams {
  
}

export interface TeamsRemoveMemberLegacyParams {
  
}

export interface TeamsGetMembershipForUserLegacyParams {
  
}

export interface TeamsAddOrUpdateMembershipForUserLegacyParams {
  
}

/**
* The role that this user should have in the team.
*/
export type TeamsAddOrUpdateMembershipForUserLegacyRequestRole = "member" | "maintainer"

export interface TeamsAddOrUpdateMembershipForUserLegacyRequest {
  /**
* The role that this user should have in the team.
*/
readonly "role"?: TeamsAddOrUpdateMembershipForUserLegacyRequestRole | undefined
}

export interface TeamsRemoveMembershipForUserLegacyParams {
  
}

export interface TeamsListProjectsLegacyParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type TeamsListProjectsLegacy200 = ReadonlyArray<TeamProject>

export interface TeamsCheckPermissionsForProjectLegacyParams {
  
}

export interface TeamsAddOrUpdateProjectPermissionsLegacyParams {
  
}

/**
* The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
export type TeamsAddOrUpdateProjectPermissionsLegacyRequestPermission = "read" | "write" | "admin"

export interface TeamsAddOrUpdateProjectPermissionsLegacyRequest {
  /**
* The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
readonly "permission"?: TeamsAddOrUpdateProjectPermissionsLegacyRequestPermission | undefined
}

export interface TeamsAddOrUpdateProjectPermissionsLegacy403 {
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface TeamsRemoveProjectLegacyParams {
  
}

export interface TeamsListReposLegacyParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type TeamsListReposLegacy200 = ReadonlyArray<MinimalRepository>

export interface TeamsCheckPermissionsForRepoLegacyParams {
  
}

export interface TeamsAddOrUpdateRepoPermissionsLegacyParams {
  
}

/**
* The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
*/
export type TeamsAddOrUpdateRepoPermissionsLegacyRequestPermission = "pull" | "push" | "admin"

export interface TeamsAddOrUpdateRepoPermissionsLegacyRequest {
  /**
* The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
*/
readonly "permission"?: TeamsAddOrUpdateRepoPermissionsLegacyRequestPermission | undefined
}

export interface TeamsRemoveRepoLegacyParams {
  
}

export interface TeamsListChildLegacyParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type TeamsListChildLegacy200 = ReadonlyArray<Team>

/**
* Private User
*/
export interface PrivateUser {
  readonly "login": string;
  readonly "id": number;
  readonly "user_view_type"?: string | undefined;
  readonly "node_id": string;
  readonly "avatar_url": string;
  readonly "gravatar_id": string | null;
  readonly "url": string;
  readonly "html_url": string;
  readonly "followers_url": string;
  readonly "following_url": string;
  readonly "gists_url": string;
  readonly "starred_url": string;
  readonly "subscriptions_url": string;
  readonly "organizations_url": string;
  readonly "repos_url": string;
  readonly "events_url": string;
  readonly "received_events_url": string;
  readonly "type": string;
  readonly "site_admin": boolean;
  readonly "name": string | null;
  readonly "company": string | null;
  readonly "blog": string | null;
  readonly "location": string | null;
  readonly "email": string | null;
  readonly "notification_email"?: string | null | undefined;
  readonly "hireable": boolean | null;
  readonly "bio": string | null;
  readonly "twitter_username"?: string | null | undefined;
  readonly "public_repos": number;
  readonly "public_gists": number;
  readonly "followers": number;
  readonly "following": number;
  readonly "created_at": string;
  readonly "updated_at": string;
  readonly "private_gists": number;
  readonly "total_private_repos": number;
  readonly "owned_private_repos": number;
  readonly "disk_usage": number;
  readonly "collaborators": number;
  readonly "two_factor_authentication": boolean;
  readonly "plan"?: {
  readonly "collaborators": number;
  readonly "name": string;
  readonly "space": number;
  readonly "private_repos": number
} | undefined;
  readonly "business_plus"?: boolean | undefined;
  readonly "ldap_dn"?: string | undefined
}

export type UsersGetAuthenticated200 = PrivateUser | PublicUser

export interface UsersUpdateAuthenticatedRequest {
  /**
* The new name of the user.
*/
readonly "name"?: string | undefined;
  /**
* The publicly visible email address of the user.
*/
readonly "email"?: string | undefined;
  /**
* The new blog URL of the user.
*/
readonly "blog"?: string | undefined;
  /**
* The new Twitter username of the user.
*/
readonly "twitter_username"?: string | null | undefined;
  /**
* The new company of the user.
*/
readonly "company"?: string | undefined;
  /**
* The new location of the user.
*/
readonly "location"?: string | undefined;
  /**
* The new hiring availability of the user.
*/
readonly "hireable"?: boolean | undefined;
  /**
* The new short biography of the user.
*/
readonly "bio"?: string | undefined
}

export interface UsersListBlockedByAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type UsersListBlockedByAuthenticatedUser200 = ReadonlyArray<SimpleUser>

export interface UsersCheckBlockedParams {
  
}

export interface UsersBlockParams {
  
}

export interface UsersUnblockParams {
  
}

export interface CodespacesListForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined;
  readonly "repository_id"?: number | undefined
}

export interface CodespacesListForAuthenticatedUser200 {
  readonly "total_count": number;
  readonly "codespaces": ReadonlyArray<Codespace>
}

export const CodespacesCreateForAuthenticatedUserRequest = {
  /**
* Repository id for this codespace
*/
readonly "repository_id": number;
  /**
* Git ref (typically a branch name) for this codespace
*/
readonly "ref"?: string | undefined;
  /**
* The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
*/
readonly "location"?: string | undefined;
  /**
* The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.
*/
readonly "geo"?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest" | undefined;
  /**
* IP for location auto-detection when proxying a request
*/
readonly "client_ip"?: string | undefined;
  /**
* Machine type to use for this codespace
*/
readonly "machine"?: string | undefined;
  /**
* Path to devcontainer.json config to use for this codespace
*/
readonly "devcontainer_path"?: string | undefined;
  /**
* Whether to authorize requested permissions from devcontainer.json
*/
readonly "multi_repo_permissions_opt_out"?: boolean | undefined;
  /**
* Working directory for this codespace
*/
readonly "working_directory"?: string | undefined;
  /**
* Time in minutes before codespace stops from inactivity
*/
readonly "idle_timeout_minutes"?: number | undefined;
  /**
* Display name for this codespace
*/
readonly "display_name"?: string | undefined;
  /**
* Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
*/
readonly "retention_period_minutes"?: number | undefined
} | {
  /**
* Pull request number for this codespace
*/
readonly "pull_request": {
  /**
* Pull request number
*/
readonly "pull_request_number": number;
  /**
* Repository id for this codespace
*/
readonly "repository_id": number
};
  /**
* The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
*/
readonly "location"?: string | undefined;
  /**
* The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.
*/
readonly "geo"?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest" | undefined;
  /**
* Machine type to use for this codespace
*/
readonly "machine"?: string | undefined;
  /**
* Path to devcontainer.json config to use for this codespace
*/
readonly "devcontainer_path"?: string | undefined;
  /**
* Working directory for this codespace
*/
readonly "working_directory"?: string | undefined;
  /**
* Time in minutes before codespace stops from inactivity
*/
readonly "idle_timeout_minutes"?: number | undefined
};
export type CodespacesCreateForAuthenticatedUserRequest = (typeof CodespacesCreateForAuthenticatedUserRequest)[keyof typeof CodespacesCreateForAuthenticatedUserRequest];

export interface CodespacesCreateForAuthenticatedUser503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface CodespacesListSecretsForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* The type of repositories in the organization that the secret is visible to
*/
export type CodespacesSecretVisibility = "all" | "private" | "selected"

/**
* Secrets for a GitHub Codespace.
*/
export interface CodespacesSecret {
  /**
* The name of the secret
*/
readonly "name": string;
  /**
* The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
readonly "created_at": string;
  /**
* The date and time at which the secret was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
readonly "updated_at": string;
  /**
* The type of repositories in the organization that the secret is visible to
*/
readonly "visibility": CodespacesSecretVisibility;
  /**
* The API URL at which the list of repositories this secret is visible to can be retrieved
*/
readonly "selected_repositories_url": string
}

export interface CodespacesListSecretsForAuthenticatedUser200 {
  readonly "total_count": number;
  readonly "secrets": ReadonlyArray<CodespacesSecret>
}

/**
* The public key used for setting user Codespaces' Secrets.
*/
export interface CodespacesUserPublicKey {
  /**
* The identifier for the key.
*/
readonly "key_id": string;
  /**
* The Base64 encoded public key.
*/
readonly "key": string
}

export interface CodespacesGetSecretForAuthenticatedUserParams {
  
}

export interface CodespacesCreateOrUpdateSecretForAuthenticatedUserParams {
  
}

export interface CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest {
  /**
* Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/codespaces/secrets#get-public-key-for-the-authenticated-user) endpoint.
*/
readonly "encrypted_value"?: string | undefined;
  /**
* ID of the key you used to encrypt the secret.
*/
readonly "key_id": string;
  /**
* An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.
*/
readonly "selected_repository_ids"?: ReadonlyArray<number | string> | undefined
}

export interface CodespacesDeleteSecretForAuthenticatedUserParams {
  
}

export interface CodespacesListRepositoriesForSecretForAuthenticatedUserParams {
  
}

export interface CodespacesListRepositoriesForSecretForAuthenticatedUser200 {
  readonly "total_count": number;
  readonly "repositories": ReadonlyArray<MinimalRepository>
}

export interface CodespacesSetRepositoriesForSecretForAuthenticatedUserParams {
  
}

export interface CodespacesSetRepositoriesForSecretForAuthenticatedUserRequest {
  /**
* An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/codespaces/secrets#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.
*/
readonly "selected_repository_ids": ReadonlyArray<number>
}

export interface CodespacesAddRepositoryForSecretForAuthenticatedUserParams {
  
}

export interface CodespacesRemoveRepositoryForSecretForAuthenticatedUserParams {
  
}

export interface CodespacesGetForAuthenticatedUserParams {
  
}

export interface CodespacesDeleteForAuthenticatedUserParams {
  
}

export type CodespacesDeleteForAuthenticatedUser202 = Record<string, unknown>

export interface CodespacesUpdateForAuthenticatedUserParams {
  
}

export interface CodespacesUpdateForAuthenticatedUserRequest {
  /**
* A valid machine to transition this codespace to.
*/
readonly "machine"?: string | undefined;
  /**
* Display name for this codespace
*/
readonly "display_name"?: string | undefined;
  /**
* Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in.
*/
readonly "recent_folders"?: ReadonlyArray<string> | undefined
}

export interface CodespacesExportForAuthenticatedUserParams {
  
}

/**
* An export of a codespace. Also, latest export details for a codespace can be fetched with id = latest
*/
export interface CodespaceExportDetails {
  /**
* State of the latest export
*/
readonly "state"?: string | null | undefined;
  /**
* Completion time of the last export operation
*/
readonly "completed_at"?: string | null | undefined;
  /**
* Name of the exported branch
*/
readonly "branch"?: string | null | undefined;
  /**
* Git commit SHA of the exported branch
*/
readonly "sha"?: string | null | undefined;
  /**
* Id for the export details
*/
readonly "id"?: string | undefined;
  /**
* Url for fetching export details
*/
readonly "export_url"?: string | undefined;
  /**
* Web url for the exported branch
*/
readonly "html_url"?: string | null | undefined
}

export interface CodespacesGetExportDetailsForAuthenticatedUserParams {
  
}

export interface CodespacesCodespaceMachinesForAuthenticatedUserParams {
  
}

export interface CodespacesCodespaceMachinesForAuthenticatedUser200 {
  readonly "total_count": number;
  readonly "machines": ReadonlyArray<CodespaceMachine>
}

export interface CodespacesPublishForAuthenticatedUserParams {
  
}

export interface CodespacesPublishForAuthenticatedUserRequest {
  /**
* A name for the new repository.
*/
readonly "name"?: string | undefined;
  /**
* Whether the new repository should be private.
*/
readonly "private"?: boolean | undefined
}

/**
* State of this codespace.
*/
export type CodespaceWithFullRepositoryState = "Unknown" | "Created" | "Queued" | "Provisioning" | "Available" | "Awaiting" | "Unavailable" | "Deleted" | "Moved" | "Shutdown" | "Archived" | "Starting" | "ShuttingDown" | "Failed" | "Exporting" | "Updating" | "Rebuilding"

/**
* The initally assigned location of a new codespace.
*/
export type CodespaceWithFullRepositoryLocation = "EastUs" | "SouthEastAsia" | "WestEurope" | "WestUs2"

/**
* A codespace.
*/
export interface CodespaceWithFullRepository {
  readonly "id": number;
  /**
* Automatically generated name of this codespace.
*/
readonly "name": string;
  /**
* Display name for this codespace.
*/
readonly "display_name"?: string | null | undefined;
  /**
* UUID identifying this codespace's environment.
*/
readonly "environment_id": string | null;
  readonly "owner": SimpleUser;
  readonly "billable_owner": SimpleUser;
  readonly "repository": FullRepository;
  readonly "machine": NullableCodespaceMachine | null;
  /**
* Path to devcontainer.json from repo root used to create Codespace.
*/
readonly "devcontainer_path"?: string | null | undefined;
  /**
* Whether the codespace was created from a prebuild.
*/
readonly "prebuild": boolean | null;
  readonly "created_at": string;
  readonly "updated_at": string;
  /**
* Last known time this codespace was started.
*/
readonly "last_used_at": string;
  /**
* State of this codespace.
*/
readonly "state": CodespaceWithFullRepositoryState;
  /**
* API URL for this codespace.
*/
readonly "url": string;
  /**
* Details about the codespace's git repository.
*/
readonly "git_status": {
  /**
* The number of commits the local repository is ahead of the remote.
*/
readonly "ahead"?: number | undefined;
  /**
* The number of commits the local repository is behind the remote.
*/
readonly "behind"?: number | undefined;
  /**
* Whether the local repository has unpushed changes.
*/
readonly "has_unpushed_changes"?: boolean | undefined;
  /**
* Whether the local repository has uncommitted changes.
*/
readonly "has_uncommitted_changes"?: boolean | undefined;
  /**
* The current branch (or SHA if in detached HEAD state) of the local repository.
*/
readonly "ref"?: string | undefined
};
  /**
* The initally assigned location of a new codespace.
*/
readonly "location": CodespaceWithFullRepositoryLocation;
  /**
* The number of minutes of inactivity after which this codespace will be automatically stopped.
*/
readonly "idle_timeout_minutes": number | null;
  /**
* URL to access this codespace on the web.
*/
readonly "web_url": string;
  /**
* API URL to access available alternate machine types for this codespace.
*/
readonly "machines_url": string;
  /**
* API URL to start this codespace.
*/
readonly "start_url": string;
  /**
* API URL to stop this codespace.
*/
readonly "stop_url": string;
  /**
* API URL to publish this codespace to a new repository.
*/
readonly "publish_url"?: string | null | undefined;
  /**
* API URL for the Pull Request associated with this codespace, if any.
*/
readonly "pulls_url": string | null;
  readonly "recent_folders": ReadonlyArray<string>;
  readonly "runtime_constraints"?: {
  /**
* The privacy settings a user can select from when forwarding a port.
*/
readonly "allowed_port_privacy_settings"?: ReadonlyArray<string> | null | undefined
} | undefined;
  /**
* Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
*/
readonly "pending_operation"?: boolean | null | undefined;
  /**
* Text to show user when codespace is disabled by a pending operation
*/
readonly "pending_operation_disabled_reason"?: string | null | undefined;
  /**
* Text to show user when codespace idle timeout minutes has been overriden by an organization policy
*/
readonly "idle_timeout_notice"?: string | null | undefined;
  /**
* Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
*/
readonly "retention_period_minutes"?: number | null | undefined;
  /**
* When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
*/
readonly "retention_expires_at"?: string | null | undefined
}

export interface CodespacesStartForAuthenticatedUserParams {
  
}

export interface CodespacesStopForAuthenticatedUserParams {
  
}

export type PackagesListDockerMigrationConflictingPackagesForAuthenticatedUser200 = ReadonlyArray<Package>

/**
* Denotes whether an email is publicly visible.
*/
export type UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequestVisibility = "public" | "private"

export interface UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequest {
  /**
* Denotes whether an email is publicly visible.
*/
readonly "visibility": UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequestVisibility
}

/**
* Email
*/
export interface Email {
  readonly "email": string;
  readonly "primary": boolean;
  readonly "verified": boolean;
  readonly "visibility": string | null
}

export type UsersSetPrimaryEmailVisibilityForAuthenticatedUser200 = ReadonlyArray<Email>

export interface UsersListEmailsForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type UsersListEmailsForAuthenticatedUser200 = ReadonlyArray<Email>

export const UsersAddEmailForAuthenticatedUserRequest = {
  /**
* Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
*/
readonly "emails": ReadonlyArray<string>
} | ReadonlyArray<string> | string;
export type UsersAddEmailForAuthenticatedUserRequest = (typeof UsersAddEmailForAuthenticatedUserRequest)[keyof typeof UsersAddEmailForAuthenticatedUserRequest];

export type UsersAddEmailForAuthenticatedUser201 = ReadonlyArray<Email>

export const UsersDeleteEmailForAuthenticatedUserRequest = {
  /**
* Email addresses associated with the GitHub user account.
*/
readonly "emails": ReadonlyArray<string>
} | ReadonlyArray<string> | string;
export type UsersDeleteEmailForAuthenticatedUserRequest = (typeof UsersDeleteEmailForAuthenticatedUserRequest)[keyof typeof UsersDeleteEmailForAuthenticatedUserRequest];

export interface UsersListFollowersForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type UsersListFollowersForAuthenticatedUser200 = ReadonlyArray<SimpleUser>

export interface UsersListFollowedByAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type UsersListFollowedByAuthenticatedUser200 = ReadonlyArray<SimpleUser>

export interface UsersCheckPersonIsFollowedByAuthenticatedParams {
  
}

export interface UsersFollowParams {
  
}

export interface UsersUnfollowParams {
  
}

export interface UsersListGpgKeysForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* A unique encryption key
*/
export interface GpgKey {
  readonly "id": number;
  readonly "name"?: string | null | undefined;
  readonly "primary_key_id": number | null;
  readonly "key_id": string;
  readonly "public_key": string;
  readonly "emails": ReadonlyArray<{
  readonly "email"?: string | undefined;
  readonly "verified"?: boolean | undefined
}>;
  readonly "subkeys": ReadonlyArray<{
  readonly "id"?: number | undefined;
  readonly "primary_key_id"?: number | undefined;
  readonly "key_id"?: string | undefined;
  readonly "public_key"?: string | undefined;
  readonly "emails"?: ReadonlyArray<{
  readonly "email"?: string | undefined;
  readonly "verified"?: boolean | undefined
}> | undefined;
  readonly "can_sign"?: boolean | undefined;
  readonly "can_encrypt_comms"?: boolean | undefined;
  readonly "can_encrypt_storage"?: boolean | undefined;
  readonly "can_certify"?: boolean | undefined;
  readonly "created_at"?: string | undefined;
  readonly "expires_at"?: string | null | undefined;
  readonly "raw_key"?: string | null | undefined;
  readonly "revoked"?: boolean | undefined
}>;
  readonly "can_sign": boolean;
  readonly "can_encrypt_comms": boolean;
  readonly "can_encrypt_storage": boolean;
  readonly "can_certify": boolean;
  readonly "created_at": string;
  readonly "expires_at": string | null;
  readonly "revoked": boolean;
  readonly "raw_key": string | null
}

export type UsersListGpgKeysForAuthenticatedUser200 = ReadonlyArray<GpgKey>

export interface UsersCreateGpgKeyForAuthenticatedUserRequest {
  /**
* A descriptive name for the new key.
*/
readonly "name"?: string | undefined;
  /**
* A GPG key in ASCII-armored format.
*/
readonly "armored_public_key": string
}

export interface UsersGetGpgKeyForAuthenticatedUserParams {
  
}

export interface UsersDeleteGpgKeyForAuthenticatedUserParams {
  
}

export interface AppsListInstallationsForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface AppsListInstallationsForAuthenticatedUser200 {
  readonly "total_count": number;
  readonly "installations": ReadonlyArray<Installation>
}

export interface AppsListInstallationReposForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface AppsListInstallationReposForAuthenticatedUser200 {
  readonly "total_count": number;
  readonly "repository_selection"?: string | undefined;
  readonly "repositories": ReadonlyArray<Repository>
}

export interface AppsAddRepoToInstallationForAuthenticatedUserParams {
  
}

export interface AppsRemoveRepoFromInstallationForAuthenticatedUserParams {
  
}

export type InteractionsGetRestrictionsForAuthenticatedUser200 = InteractionLimitResponse | {
  
}

export type IssuesListForAuthenticatedUserParamsFilter = "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all"

export type IssuesListForAuthenticatedUserParamsState = "open" | "closed" | "all"

export type IssuesListForAuthenticatedUserParamsSort = "created" | "updated" | "comments"

export type IssuesListForAuthenticatedUserParamsDirection = "asc" | "desc"

export interface IssuesListForAuthenticatedUserParams {
  readonly "filter"?: IssuesListForAuthenticatedUserParamsFilter | undefined;
  readonly "state"?: IssuesListForAuthenticatedUserParamsState | undefined;
  readonly "labels"?: string | undefined;
  readonly "sort"?: IssuesListForAuthenticatedUserParamsSort | undefined;
  readonly "direction"?: IssuesListForAuthenticatedUserParamsDirection | undefined;
  readonly "since"?: string | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type IssuesListForAuthenticatedUser200 = ReadonlyArray<Issue>

export interface UsersListPublicSshKeysForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Key
*/
export interface Key {
  readonly "key": string;
  readonly "id": number;
  readonly "url": string;
  readonly "title": string;
  readonly "created_at": string;
  readonly "verified": boolean;
  readonly "read_only": boolean;
  readonly "last_used"?: string | null | undefined
}

export type UsersListPublicSshKeysForAuthenticatedUser200 = ReadonlyArray<Key>

export interface UsersCreatePublicSshKeyForAuthenticatedUserRequest {
  /**
* A descriptive name for the new key.
*/
readonly "title"?: string | undefined;
  /**
* The public SSH key to add to your GitHub account.
*/
readonly "key": string
}

export interface UsersGetPublicSshKeyForAuthenticatedUserParams {
  
}

export interface UsersDeletePublicSshKeyForAuthenticatedUserParams {
  
}

export interface AppsListSubscriptionsForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export interface MarketplaceAccount {
  readonly "url": string;
  readonly "id": number;
  readonly "type": string;
  readonly "node_id"?: string | undefined;
  readonly "login": string;
  readonly "email"?: string | null | undefined;
  readonly "organization_billing_email"?: string | null | undefined
}

/**
* User Marketplace Purchase
*/
export interface UserMarketplacePurchase {
  readonly "billing_cycle": string;
  readonly "next_billing_date": string | null;
  readonly "unit_count": number | null;
  readonly "on_free_trial": boolean;
  readonly "free_trial_ends_on": string | null;
  readonly "updated_at": string | null;
  readonly "account": MarketplaceAccount;
  readonly "plan": MarketplaceListingPlan
}

export type AppsListSubscriptionsForAuthenticatedUser200 = ReadonlyArray<UserMarketplacePurchase>

export interface AppsListSubscriptionsForAuthenticatedUserStubbedParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type AppsListSubscriptionsForAuthenticatedUserStubbed200 = ReadonlyArray<UserMarketplacePurchase>

export type OrgsListMembershipsForAuthenticatedUserParamsState = "active" | "pending"

export interface OrgsListMembershipsForAuthenticatedUserParams {
  readonly "state"?: OrgsListMembershipsForAuthenticatedUserParamsState | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type OrgsListMembershipsForAuthenticatedUser200 = ReadonlyArray<OrgMembership>

export interface OrgsGetMembershipForAuthenticatedUserParams {
  
}

export interface OrgsUpdateMembershipForAuthenticatedUserParams {
  
}

/**
* The state that the membership should be in. Only `"active"` will be accepted.
*/
export type OrgsUpdateMembershipForAuthenticatedUserRequestState = "active"

export interface OrgsUpdateMembershipForAuthenticatedUserRequest {
  /**
* The state that the membership should be in. Only `"active"` will be accepted.
*/
readonly "state": OrgsUpdateMembershipForAuthenticatedUserRequestState
}

export interface MigrationsListForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type MigrationsListForAuthenticatedUser200 = ReadonlyArray<Migration>

export interface MigrationsStartForAuthenticatedUserRequest {
  /**
* Lock the repositories being migrated at the start of the migration
*/
readonly "lock_repositories"?: boolean | undefined;
  /**
* Indicates whether metadata should be excluded and only git source should be included for the migration.
*/
readonly "exclude_metadata"?: boolean | undefined;
  /**
* Indicates whether the repository git data should be excluded from the migration.
*/
readonly "exclude_git_data"?: boolean | undefined;
  /**
* Do not include attachments in the migration
*/
readonly "exclude_attachments"?: boolean | undefined;
  /**
* Do not include releases in the migration
*/
readonly "exclude_releases"?: boolean | undefined;
  /**
* Indicates whether projects owned by the organization or users should be excluded.
*/
readonly "exclude_owner_projects"?: boolean | undefined;
  /**
* Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
*/
readonly "org_metadata_only"?: boolean | undefined;
  /**
* Exclude attributes from the API response to improve performance
*/
readonly "exclude"?: ReadonlyArray<"repositories"> | undefined;
  readonly "repositories": ReadonlyArray<string>
}

export interface MigrationsGetStatusForAuthenticatedUserParams {
  readonly "exclude"?: ReadonlyArray<string> | undefined
}

export interface MigrationsGetArchiveForAuthenticatedUserParams {
  
}

export interface MigrationsDeleteArchiveForAuthenticatedUserParams {
  
}

export interface MigrationsUnlockRepoForAuthenticatedUserParams {
  
}

export interface MigrationsListReposForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type MigrationsListReposForAuthenticatedUser200 = ReadonlyArray<MinimalRepository>

export interface OrgsListForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type OrgsListForAuthenticatedUser200 = ReadonlyArray<OrganizationSimple>

export type PackagesListPackagesForAuthenticatedUserParamsPackageType = "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"

export type PackagesListPackagesForAuthenticatedUserParamsVisibility = "public" | "private" | "internal"

export interface PackagesListPackagesForAuthenticatedUserParams {
  readonly "package_type": PackagesListPackagesForAuthenticatedUserParamsPackageType;
  readonly "visibility"?: PackagesListPackagesForAuthenticatedUserParamsVisibility | undefined;
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

export type PackagesListPackagesForAuthenticatedUser200 = ReadonlyArray<Package>

export interface PackagesGetPackageForAuthenticatedUserParams {
  
}

export interface PackagesDeletePackageForAuthenticatedUserParams {
  
}

export interface PackagesRestorePackageForAuthenticatedUserParams {
  readonly "token"?: string | undefined
}

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamsState = "active" | "deleted"

export interface PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParams {
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined;
  readonly "state"?: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamsState | undefined
}

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser200 = ReadonlyArray<PackageVersion>

export interface PackagesGetPackageVersionForAuthenticatedUserParams {
  
}

export interface PackagesDeletePackageVersionForAuthenticatedUserParams {
  
}

export interface PackagesRestorePackageVersionForAuthenticatedUserParams {
  
}

export interface ProjectsClassicCreateForAuthenticatedUserRequest {
  /**
* Name of the project
*/
readonly "name": string;
  /**
* Body of the project
*/
readonly "body"?: string | null | undefined
}

export interface UsersListPublicEmailsForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type UsersListPublicEmailsForAuthenticatedUser200 = ReadonlyArray<Email>

export type ReposListForAuthenticatedUserParamsVisibility = "all" | "public" | "private"

export type ReposListForAuthenticatedUserParamsType = "all" | "owner" | "public" | "private" | "member"

export type ReposListForAuthenticatedUserParamsSort = "created" | "updated" | "pushed" | "full_name"

export type ReposListForAuthenticatedUserParamsDirection = "asc" | "desc"

export interface ReposListForAuthenticatedUserParams {
  readonly "visibility"?: ReposListForAuthenticatedUserParamsVisibility | undefined;
  readonly "affiliation"?: string | undefined;
  readonly "type"?: ReposListForAuthenticatedUserParamsType | undefined;
  readonly "sort"?: ReposListForAuthenticatedUserParamsSort | undefined;
  readonly "direction"?: ReposListForAuthenticatedUserParamsDirection | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined;
  readonly "since"?: string | undefined;
  readonly "before"?: string | undefined
}

export type ReposListForAuthenticatedUser200 = ReadonlyArray<Repository>

/**
* Required when using `squash_merge_commit_message`.
* 
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
export type ReposCreateForAuthenticatedUserRequestSquashMergeCommitTitle = "PR_TITLE" | "COMMIT_OR_PR_TITLE"

/**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
export type ReposCreateForAuthenticatedUserRequestSquashMergeCommitMessage = "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"

/**
* Required when using `merge_commit_message`.
* 
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
export type ReposCreateForAuthenticatedUserRequestMergeCommitTitle = "PR_TITLE" | "MERGE_MESSAGE"

/**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
export type ReposCreateForAuthenticatedUserRequestMergeCommitMessage = "PR_BODY" | "PR_TITLE" | "BLANK"

export interface ReposCreateForAuthenticatedUserRequest {
  /**
* The name of the repository.
*/
readonly "name": string;
  /**
* A short description of the repository.
*/
readonly "description"?: string | undefined;
  /**
* A URL with more information about the repository.
*/
readonly "homepage"?: string | undefined;
  /**
* Whether the repository is private.
*/
readonly "private"?: boolean | undefined;
  /**
* Whether issues are enabled.
*/
readonly "has_issues"?: boolean | undefined;
  /**
* Whether projects are enabled.
*/
readonly "has_projects"?: boolean | undefined;
  /**
* Whether the wiki is enabled.
*/
readonly "has_wiki"?: boolean | undefined;
  /**
* Whether discussions are enabled.
*/
readonly "has_discussions"?: boolean | undefined;
  /**
* The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
*/
readonly "team_id"?: number | undefined;
  /**
* Whether the repository is initialized with a minimal README.
*/
readonly "auto_init"?: boolean | undefined;
  /**
* The desired language or platform to apply to the .gitignore.
*/
readonly "gitignore_template"?: string | undefined;
  /**
* The license keyword of the open source license for this repository.
*/
readonly "license_template"?: string | undefined;
  /**
* Whether to allow squash merges for pull requests.
*/
readonly "allow_squash_merge"?: boolean | undefined;
  /**
* Whether to allow merge commits for pull requests.
*/
readonly "allow_merge_commit"?: boolean | undefined;
  /**
* Whether to allow rebase merges for pull requests.
*/
readonly "allow_rebase_merge"?: boolean | undefined;
  /**
* Whether to allow Auto-merge to be used on pull requests.
*/
readonly "allow_auto_merge"?: boolean | undefined;
  /**
* Whether to delete head branches when pull requests are merged
*/
readonly "delete_branch_on_merge"?: boolean | undefined;
  /**
* Required when using `squash_merge_commit_message`.
* 
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
readonly "squash_merge_commit_title"?: ReposCreateForAuthenticatedUserRequestSquashMergeCommitTitle | undefined;
  /**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
readonly "squash_merge_commit_message"?: ReposCreateForAuthenticatedUserRequestSquashMergeCommitMessage | undefined;
  /**
* Required when using `merge_commit_message`.
* 
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
readonly "merge_commit_title"?: ReposCreateForAuthenticatedUserRequestMergeCommitTitle | undefined;
  /**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
readonly "merge_commit_message"?: ReposCreateForAuthenticatedUserRequestMergeCommitMessage | undefined;
  /**
* Whether downloads are enabled.
*/
readonly "has_downloads"?: boolean | undefined;
  /**
* Whether this repository acts as a template that can be used to generate new repositories.
*/
readonly "is_template"?: boolean | undefined
}

export interface ReposListInvitationsForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ReposListInvitationsForAuthenticatedUser200 = ReadonlyArray<RepositoryInvitation>

export interface ReposDeclineInvitationForAuthenticatedUserParams {
  
}

export interface ReposAcceptInvitationForAuthenticatedUserParams {
  
}

export interface UsersListSocialAccountsForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Social media account
*/
export interface SocialAccount {
  readonly "provider": string;
  readonly "url": string
}

export type UsersListSocialAccountsForAuthenticatedUser200 = ReadonlyArray<SocialAccount>

export interface UsersAddSocialAccountForAuthenticatedUserRequest {
  /**
* Full URLs for the social media profiles to add.
*/
readonly "account_urls": ReadonlyArray<string>
}

export type UsersAddSocialAccountForAuthenticatedUser201 = ReadonlyArray<SocialAccount>

export interface UsersDeleteSocialAccountForAuthenticatedUserRequest {
  /**
* Full URLs for the social media profiles to delete.
*/
readonly "account_urls": ReadonlyArray<string>
}

export interface UsersListSshSigningKeysForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* A public SSH key used to sign Git commits
*/
export interface SshSigningKey {
  readonly "key": string;
  readonly "id": number;
  readonly "title": string;
  readonly "created_at": string
}

export type UsersListSshSigningKeysForAuthenticatedUser200 = ReadonlyArray<SshSigningKey>

export interface UsersCreateSshSigningKeyForAuthenticatedUserRequest {
  /**
* A descriptive name for the new key.
*/
readonly "title"?: string | undefined;
  /**
* The public SSH key to add to your GitHub account. For more information, see "[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)."
*/
readonly "key": string
}

export interface UsersGetSshSigningKeyForAuthenticatedUserParams {
  
}

export interface UsersDeleteSshSigningKeyForAuthenticatedUserParams {
  
}

export type ActivityListReposStarredByAuthenticatedUserParamsSort = "created" | "updated"

export type ActivityListReposStarredByAuthenticatedUserParamsDirection = "asc" | "desc"

export interface ActivityListReposStarredByAuthenticatedUserParams {
  readonly "sort"?: ActivityListReposStarredByAuthenticatedUserParamsSort | undefined;
  readonly "direction"?: ActivityListReposStarredByAuthenticatedUserParamsDirection | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ActivityListReposStarredByAuthenticatedUser200 = ReadonlyArray<Repository>

export interface ActivityCheckRepoIsStarredByAuthenticatedUserParams {
  
}

export interface ActivityStarRepoForAuthenticatedUserParams {
  
}

export interface ActivityUnstarRepoForAuthenticatedUserParams {
  
}

export interface ActivityListWatchedReposForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ActivityListWatchedReposForAuthenticatedUser200 = ReadonlyArray<MinimalRepository>

export interface TeamsListForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type TeamsListForAuthenticatedUser200 = ReadonlyArray<TeamFull>

export interface UsersGetByIdParams {
  
}

export type UsersGetById200 = PrivateUser | PublicUser

export interface UsersListParams {
  readonly "since"?: number | undefined;
  readonly "per_page"?: number | undefined
}

export type UsersList200 = ReadonlyArray<SimpleUser>

export interface UsersGetByUsernameParams {
  
}

export type UsersGetByUsername200 = PrivateUser | PublicUser

export interface UsersListAttestationsBulkParams {
  readonly "per_page"?: number | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined
}

export interface UsersListAttestationsBulkRequest {
  /**
* List of subject digests to fetch attestations for.
*/
readonly "subject_digests": ReadonlyArray<string>;
  /**
* Optional filter for fetching attestations with a given predicate type.
* This option accepts `provenance`, `sbom`, or freeform text for custom predicate types.
*/
readonly "predicate_type"?: string | undefined
}

export interface UsersListAttestationsBulk200 {
  /**
* Mapping of subject digest to bundles.
*/
readonly "attestations_subject_digests"?: Record<string, unknown> | undefined;
  /**
* Information about the current page.
*/
readonly "page_info"?: {
  /**
* Indicates whether there is a next page.
*/
readonly "has_next"?: boolean | undefined;
  /**
* Indicates whether there is a previous page.
*/
readonly "has_previous"?: boolean | undefined;
  /**
* The cursor to the next page.
*/
readonly "next"?: string | undefined;
  /**
* The cursor to the previous page.
*/
readonly "previous"?: string | undefined
} | undefined
}

export interface UsersDeleteAttestationsBulkParams {
  
}

/**
* The request body must include either `subject_digests` or `attestation_ids`, but not both.
*/
export type UsersDeleteAttestationsBulkRequest = Record<string, unknown>

export interface UsersDeleteAttestationsBySubjectDigestParams {
  
}

export interface UsersDeleteAttestationsByIdParams {
  
}

export interface UsersListAttestationsParams {
  readonly "per_page"?: number | undefined;
  readonly "before"?: string | undefined;
  readonly "after"?: string | undefined;
  readonly "predicate_type"?: string | undefined
}

export interface UsersListAttestations200 {
  readonly "attestations"?: ReadonlyArray<{
  /**
* The attestation's Sigstore Bundle.
* Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
*/
readonly "bundle"?: {
  readonly "mediaType"?: string | undefined;
  readonly "verificationMaterial"?: {
  
} | undefined;
  readonly "dsseEnvelope"?: {
  
} | undefined
} | undefined;
  readonly "repository_id"?: number | undefined;
  readonly "bundle_url"?: string | undefined
}> | undefined
}

export interface PackagesListDockerMigrationConflictingPackagesForUserParams {
  
}

export type PackagesListDockerMigrationConflictingPackagesForUser200 = ReadonlyArray<Package>

export interface ActivityListEventsForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ActivityListEventsForAuthenticatedUser200 = ReadonlyArray<Event>

export interface ActivityListOrgEventsForAuthenticatedUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ActivityListOrgEventsForAuthenticatedUser200 = ReadonlyArray<Event>

export interface ActivityListPublicEventsForUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ActivityListPublicEventsForUser200 = ReadonlyArray<Event>

export interface UsersListFollowersForUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type UsersListFollowersForUser200 = ReadonlyArray<SimpleUser>

export interface UsersListFollowingForUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type UsersListFollowingForUser200 = ReadonlyArray<SimpleUser>

export interface UsersCheckFollowingForUserParams {
  
}

export interface GistsListForUserParams {
  readonly "since"?: string | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type GistsListForUser200 = ReadonlyArray<BaseGist>

export interface UsersListGpgKeysForUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type UsersListGpgKeysForUser200 = ReadonlyArray<GpgKey>

export type UsersGetContextForUserParamsSubjectType = "organization" | "repository" | "issue" | "pull_request"

export interface UsersGetContextForUserParams {
  readonly "subject_type"?: UsersGetContextForUserParamsSubjectType | undefined;
  readonly "subject_id"?: string | undefined
}

/**
* Hovercard
*/
export interface Hovercard {
  readonly "contexts": ReadonlyArray<{
  readonly "message": string;
  readonly "octicon": string
}>
}

export interface AppsGetUserInstallationParams {
  
}

export interface UsersListPublicKeysForUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Key Simple
*/
export interface KeySimple {
  readonly "id": number;
  readonly "key": string;
  readonly "created_at"?: string | undefined;
  readonly "last_used"?: string | null | undefined
}

export type UsersListPublicKeysForUser200 = ReadonlyArray<KeySimple>

export interface OrgsListForUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type OrgsListForUser200 = ReadonlyArray<OrganizationSimple>

export type PackagesListPackagesForUserParamsPackageType = "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"

export type PackagesListPackagesForUserParamsVisibility = "public" | "private" | "internal"

export interface PackagesListPackagesForUserParams {
  readonly "package_type": PackagesListPackagesForUserParamsPackageType;
  readonly "visibility"?: PackagesListPackagesForUserParamsVisibility | undefined;
  readonly "page"?: number | undefined;
  readonly "per_page"?: number | undefined
}

export type PackagesListPackagesForUser200 = ReadonlyArray<Package>

export interface PackagesGetPackageForUserParams {
  
}

export interface PackagesDeletePackageForUserParams {
  
}

export interface PackagesRestorePackageForUserParams {
  readonly "token"?: string | undefined
}

export interface PackagesGetAllPackageVersionsForPackageOwnedByUserParams {
  
}

export type PackagesGetAllPackageVersionsForPackageOwnedByUser200 = ReadonlyArray<PackageVersion>

export interface PackagesGetPackageVersionForUserParams {
  
}

export interface PackagesDeletePackageVersionForUserParams {
  
}

export interface PackagesRestorePackageVersionForUserParams {
  
}

export type ProjectsClassicListForUserParamsState = "open" | "closed" | "all"

export interface ProjectsClassicListForUserParams {
  readonly "state"?: ProjectsClassicListForUserParamsState | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ProjectsClassicListForUser200 = ReadonlyArray<Project>

export interface ActivityListReceivedEventsForUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ActivityListReceivedEventsForUser200 = ReadonlyArray<Event>

export interface ActivityListReceivedPublicEventsForUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ActivityListReceivedPublicEventsForUser200 = ReadonlyArray<Event>

export type ReposListForUserParamsType = "all" | "owner" | "member"

export type ReposListForUserParamsSort = "created" | "updated" | "pushed" | "full_name"

export type ReposListForUserParamsDirection = "asc" | "desc"

export interface ReposListForUserParams {
  readonly "type"?: ReposListForUserParamsType | undefined;
  readonly "sort"?: ReposListForUserParamsSort | undefined;
  readonly "direction"?: ReposListForUserParamsDirection | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ReposListForUser200 = ReadonlyArray<MinimalRepository>

export interface BillingGetGithubActionsBillingUserParams {
  
}

export interface BillingGetGithubPackagesBillingUserParams {
  
}

export interface BillingGetSharedStorageBillingUserParams {
  
}

export interface BillingGetGithubBillingUsageReportUserParams {
  readonly "year"?: number | undefined;
  readonly "month"?: number | undefined;
  readonly "day"?: number | undefined;
  readonly "hour"?: number | undefined
}

export interface BillingUsageReportUser {
  readonly "usageItems"?: ReadonlyArray<{
  /**
* Date of the usage line item.
*/
readonly "date": string;
  /**
* Product name.
*/
readonly "product": string;
  /**
* SKU name.
*/
readonly "sku": string;
  /**
* Quantity of the usage line item.
*/
readonly "quantity": number;
  /**
* Unit type of the usage line item.
*/
readonly "unitType": string;
  /**
* Price per unit of the usage line item.
*/
readonly "pricePerUnit": number;
  /**
* Gross amount of the usage line item.
*/
readonly "grossAmount": number;
  /**
* Discount amount of the usage line item.
*/
readonly "discountAmount": number;
  /**
* Net amount of the usage line item.
*/
readonly "netAmount": number;
  /**
* Name of the repository.
*/
readonly "repositoryName"?: string | undefined
}> | undefined
}

export interface BillingGetGithubBillingUsageReportUser503 {
  readonly "code"?: string | undefined;
  readonly "message"?: string | undefined;
  readonly "documentation_url"?: string | undefined
}

export interface UsersListSocialAccountsForUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type UsersListSocialAccountsForUser200 = ReadonlyArray<SocialAccount>

export interface UsersListSshSigningKeysForUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type UsersListSshSigningKeysForUser200 = ReadonlyArray<SshSigningKey>

export type ActivityListReposStarredByUserParamsSort = "created" | "updated"

export type ActivityListReposStarredByUserParamsDirection = "asc" | "desc"

export interface ActivityListReposStarredByUserParams {
  readonly "sort"?: ActivityListReposStarredByUserParamsSort | undefined;
  readonly "direction"?: ActivityListReposStarredByUserParamsDirection | undefined;
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

/**
* Starred Repository
*/
export interface StarredRepository {
  readonly "starred_at": string;
  readonly "repo": Repository
}

export type ActivityListReposStarredByUser200 = ReadonlyArray<StarredRepository> | ReadonlyArray<Repository>

export interface ActivityListReposWatchedByUserParams {
  readonly "per_page"?: number | undefined;
  readonly "page"?: number | undefined
}

export type ActivityListReposWatchedByUser200 = ReadonlyArray<MinimalRepository>

export type MetaGetAllVersions200 = ReadonlyArray<string>

export const make = (
  httpClient: HttpClient.HttpClient, 
  options: {
    readonly transformClient?: ((client: HttpClient.HttpClient) => Effect.Effect<HttpClient.HttpClient>) | undefined
  } = {}
): Client => {
  const unexpectedStatus = (response: HttpClientResponse.HttpClientResponse) =>
    Effect.flatMap(
      Effect.orElseSucceed(response.json, () => "Unexpected status code"),
      (description) =>
        Effect.fail(
          new HttpClientError.ResponseError({
            request: response.request,
            response,
            reason: "StatusCode",
            description: typeof description === "string" ? description : JSON.stringify(description),
          }),
        ),
    )
  const withResponse: <A, E>(
    f: (response: HttpClientResponse.HttpClientResponse) => Effect.Effect<A, E>,
  ) => (
    request: HttpClientRequest.HttpClientRequest,
  ) => Effect.Effect<any, any> = options.transformClient
    ? (f) => (request) =>
        Effect.flatMap(
          Effect.flatMap(options.transformClient!(httpClient), (client) =>
            client.execute(request),
          ),
          f,
        )
    : (f) => (request) => Effect.flatMap(httpClient.execute(request), f)
  const decodeSuccess = <A>(response: HttpClientResponse.HttpClientResponse) =>
    response.json as Effect.Effect<A, HttpClientError.ResponseError>
  const decodeVoid = (_response: HttpClientResponse.HttpClientResponse) =>
    Effect.void
  const decodeError =
    <Tag extends string, E>(tag: Tag) =>
    (
      response: HttpClientResponse.HttpClientResponse,
    ): Effect.Effect<
      never,
      ClientError<Tag, E> | HttpClientError.ResponseError
    > =>
      Effect.flatMap(
        response.json as Effect.Effect<E, HttpClientError.ResponseError>,
        (cause) => Effect.fail(ClientError(tag, cause, response)),
      )
  const onRequest = (
    successCodes: ReadonlyArray<string>,
    errorCodes?: Record<string, string>,
  ) => {
    const cases: any = { orElse: unexpectedStatus }
    for (const code of successCodes) {
      cases[code] = decodeSuccess
    }
    if (errorCodes) {
      for (const [code, tag] of Object.entries(errorCodes)) {
        cases[code] = decodeError(tag)
      }
    }
    if (successCodes.length === 0) {
      cases["2xx"] = decodeVoid
    }
    return withResponse(HttpClientResponse.matchStatus(cases) as any)
  }
  return {
    httpClient,
    "metaRoot": () => HttpClientRequest.get(`/`).pipe(
    onRequest(["2xx"])
  ),
  "securityAdvisoriesListGlobalAdvisories": (options) => HttpClientRequest.get(`/advisories`).pipe(
    HttpClientRequest.setUrlParams({ "ghsa_id": options?.["ghsa_id"] as any, "type": options?.["type"] as any, "cve_id": options?.["cve_id"] as any, "ecosystem": options?.["ecosystem"] as any, "severity": options?.["severity"] as any, "cwes": options?.["cwes"] as any, "is_withdrawn": options?.["is_withdrawn"] as any, "affects": options?.["affects"] as any, "published": options?.["published"] as any, "updated": options?.["updated"] as any, "modified": options?.["modified"] as any, "epss_percentage": options?.["epss_percentage"] as any, "epss_percentile": options?.["epss_percentile"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "sort": options?.["sort"] as any }),
    onRequest(["2xx"], {"422":"ValidationErrorSimple","429":"BasicError"})
  ),
  "securityAdvisoriesGetGlobalAdvisory": (ghsaId, options) => HttpClientRequest.get(`/advisories/${ghsaId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "appsGetAuthenticated": () => HttpClientRequest.get(`/app`).pipe(
    onRequest(["2xx"])
  ),
  "appsCreateFromManifest": (code) => HttpClientRequest.post(`/app-manifests/${code}/conversions`).pipe(
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "appsGetWebhookConfigForApp": () => HttpClientRequest.get(`/app/hook/config`).pipe(
    onRequest(["2xx"])
  ),
  "appsUpdateWebhookConfigForApp": (options) => HttpClientRequest.patch(`/app/hook/config`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest(["2xx"])
  ),
  "appsListWebhookDeliveries": (options) => HttpClientRequest.get(`/app/hook/deliveries`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "cursor": options?.["cursor"] as any }),
    onRequest(["2xx"], {"400":"BasicError","422":"ValidationError"})
  ),
  "appsGetWebhookDelivery": (deliveryId, options) => HttpClientRequest.get(`/app/hook/deliveries/${deliveryId}`).pipe(
    onRequest(["2xx"], {"400":"BasicError","422":"ValidationError"})
  ),
  "appsRedeliverWebhookDelivery": (deliveryId, options) => HttpClientRequest.post(`/app/hook/deliveries/${deliveryId}/attempts`).pipe(
    onRequest(["2xx"], {"400":"BasicError","422":"ValidationError"})
  ),
  "appsListInstallationRequestsForAuthenticatedApp": (options) => HttpClientRequest.get(`/app/installation-requests`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError"})
  ),
  "appsListInstallations": (options) => HttpClientRequest.get(`/app/installations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "since": options?.["since"] as any, "outdated": options?.["outdated"] as any }),
    onRequest(["2xx"])
  ),
  "appsGetInstallation": (installationId, options) => HttpClientRequest.get(`/app/installations/${installationId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "appsDeleteInstallation": (installationId, options) => HttpClientRequest.del(`/app/installations/${installationId}`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "appsCreateInstallationAccessToken": (installationId, options) => HttpClientRequest.post(`/app/installations/${installationId}/access_tokens`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "appsSuspendInstallation": (installationId, options) => HttpClientRequest.put(`/app/installations/${installationId}/suspended`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "appsUnsuspendInstallation": (installationId, options) => HttpClientRequest.del(`/app/installations/${installationId}/suspended`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "appsDeleteAuthorization": (clientId, options) => HttpClientRequest.del(`/applications/${clientId}/grant`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"422":"ValidationError"})
  ),
  "appsCheckToken": (clientId, options) => HttpClientRequest.post(`/applications/${clientId}/token`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "appsDeleteToken": (clientId, options) => HttpClientRequest.del(`/applications/${clientId}/token`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"422":"ValidationError"})
  ),
  "appsResetToken": (clientId, options) => HttpClientRequest.patch(`/applications/${clientId}/token`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "appsScopeToken": (clientId, options) => HttpClientRequest.post(`/applications/${clientId}/token/scoped`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "appsGetBySlug": (appSlug, options) => HttpClientRequest.get(`/apps/${appSlug}`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "classroomGetAnAssignment": (assignmentId, options) => HttpClientRequest.get(`/assignments/${assignmentId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "classroomListAcceptedAssignmentsForAnAssignment": (assignmentId, options) => HttpClientRequest.get(`/assignments/${assignmentId}/accepted_assignments`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"])
  ),
  "classroomGetAssignmentGrades": (assignmentId, options) => HttpClientRequest.get(`/assignments/${assignmentId}/grades`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "classroomListClassrooms": (options) => HttpClientRequest.get(`/classrooms`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"])
  ),
  "classroomGetAClassroom": (classroomId, options) => HttpClientRequest.get(`/classrooms/${classroomId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "classroomListAssignmentsForAClassroom": (classroomId, options) => HttpClientRequest.get(`/classrooms/${classroomId}/assignments`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"])
  ),
  "codesOfConductGetAllCodesOfConduct": () => HttpClientRequest.get(`/codes_of_conduct`).pipe(
    onRequest(["2xx"])
  ),
  "codesOfConductGetConductCode": (key) => HttpClientRequest.get(`/codes_of_conduct/${key}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "credentialsRevoke": (options) => HttpClientRequest.post(`/credentials/revoke`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest(["2xx"], {"422":"ValidationErrorSimple","500":"BasicError"})
  ),
  "emojisGet": () => HttpClientRequest.get(`/emojis`).pipe(
    onRequest(["2xx"])
  ),
  "codeSecurityGetConfigurationsForEnterprise": (enterprise, options) => HttpClientRequest.get(`/enterprises/${enterprise}/code-security/configurations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "codeSecurityCreateConfigurationForEnterprise": (enterprise, options) => HttpClientRequest.post(`/enterprises/${enterprise}/code-security/configurations`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"400":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "codeSecurityGetDefaultConfigurationsForEnterprise": (enterprise, options) => HttpClientRequest.get(`/enterprises/${enterprise}/code-security/configurations/defaults`).pipe(
    onRequest(["2xx"])
  ),
  "codeSecurityGetSingleConfigurationForEnterprise": (enterprise, configurationId, options) => HttpClientRequest.get(`/enterprises/${enterprise}/code-security/configurations/${configurationId}`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "codeSecurityDeleteConfigurationForEnterprise": (enterprise, configurationId, options) => HttpClientRequest.del(`/enterprises/${enterprise}/code-security/configurations/${configurationId}`).pipe(
    onRequest([], {"400":"BasicError","403":"BasicError","404":"BasicError","409":"BasicError"})
  ),
  "codeSecurityUpdateEnterpriseConfiguration": (enterprise, configurationId, options) => HttpClientRequest.patch(`/enterprises/${enterprise}/code-security/configurations/${configurationId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","409":"BasicError"})
  ),
  "codeSecurityAttachEnterpriseConfiguration": (enterprise, configurationId, options) => HttpClientRequest.post(`/enterprises/${enterprise}/code-security/configurations/${configurationId}/attach`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","409":"BasicError"})
  ),
  "codeSecuritySetConfigurationAsDefaultForEnterprise": (enterprise, configurationId, options) => HttpClientRequest.put(`/enterprises/${enterprise}/code-security/configurations/${configurationId}/defaults`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "codeSecurityGetRepositoriesForEnterpriseConfiguration": (enterprise, configurationId, options) => HttpClientRequest.get(`/enterprises/${enterprise}/code-security/configurations/${configurationId}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "status": options?.["status"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "dependabotListAlertsForEnterprise": (enterprise, options) => HttpClientRequest.get(`/enterprises/${enterprise}/dependabot/alerts`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "severity": options?.["severity"] as any, "ecosystem": options?.["ecosystem"] as any, "package": options?.["package"] as any, "epss_percentage": options?.["epss_percentage"] as any, "has": options?.["has"] as any, "scope": options?.["scope"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "first": options?.["first"] as any, "last": options?.["last"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "secretScanningListAlertsForEnterprise": (enterprise, options) => HttpClientRequest.get(`/enterprises/${enterprise}/secret-scanning/alerts`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "secret_type": options?.["secret_type"] as any, "resolution": options?.["resolution"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "validity": options?.["validity"] as any, "is_publicly_leaked": options?.["is_publicly_leaked"] as any, "is_multi_repo": options?.["is_multi_repo"] as any, "hide_secret": options?.["hide_secret"] as any }),
    onRequest(["2xx"], {"404":"BasicError","503":"SecretScanningListAlertsForEnterprise503"})
  ),
  "activityListPublicEvents": (options) => HttpClientRequest.get(`/events`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"403":"BasicError","503":"ActivityListPublicEvents503"})
  ),
  "activityGetFeeds": () => HttpClientRequest.get(`/feeds`).pipe(
    onRequest(["2xx"])
  ),
  "gistsList": (options) => HttpClientRequest.get(`/gists`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"403":"BasicError"})
  ),
  "gistsCreate": (options) => HttpClientRequest.post(`/gists`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "gistsListPublic": (options) => HttpClientRequest.get(`/gists/public`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"403":"BasicError","422":"ValidationError"})
  ),
  "gistsListStarred": (options) => HttpClientRequest.get(`/gists/starred`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "gistsGet": (gistId, options) => HttpClientRequest.get(`/gists/${gistId}`).pipe(
    onRequest(["2xx"], {"403":"GistsGet403","404":"BasicError"})
  ),
  "gistsDelete": (gistId, options) => HttpClientRequest.del(`/gists/${gistId}`).pipe(
    onRequest([], {"403":"BasicError","404":"BasicError"})
  ),
  "gistsUpdate": (gistId, options) => HttpClientRequest.patch(`/gists/${gistId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "gistsListComments": (gistId, options) => HttpClientRequest.get(`/gists/${gistId}/comments`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "gistsCreateComment": (gistId, options) => HttpClientRequest.post(`/gists/${gistId}/comments`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "gistsGetComment": (gistId, commentId, options) => HttpClientRequest.get(`/gists/${gistId}/comments/${commentId}`).pipe(
    onRequest(["2xx"], {"403":"GistsGetComment403","404":"BasicError"})
  ),
  "gistsDeleteComment": (gistId, commentId, options) => HttpClientRequest.del(`/gists/${gistId}/comments/${commentId}`).pipe(
    onRequest([], {"403":"BasicError","404":"BasicError"})
  ),
  "gistsUpdateComment": (gistId, commentId, options) => HttpClientRequest.patch(`/gists/${gistId}/comments/${commentId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "gistsListCommits": (gistId, options) => HttpClientRequest.get(`/gists/${gistId}/commits`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "gistsListForks": (gistId, options) => HttpClientRequest.get(`/gists/${gistId}/forks`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "gistsFork": (gistId, options) => HttpClientRequest.post(`/gists/${gistId}/forks`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "gistsCheckIsStarred": (gistId, options) => HttpClientRequest.get(`/gists/${gistId}/star`).pipe(
    onRequest([], {"403":"BasicError","404":"GistsCheckIsStarred404"})
  ),
  "gistsStar": (gistId, options) => HttpClientRequest.put(`/gists/${gistId}/star`).pipe(
    onRequest([], {"403":"BasicError","404":"BasicError"})
  ),
  "gistsUnstar": (gistId, options) => HttpClientRequest.del(`/gists/${gistId}/star`).pipe(
    onRequest([], {"403":"BasicError","404":"BasicError"})
  ),
  "gistsGetRevision": (gistId, sha, options) => HttpClientRequest.get(`/gists/${gistId}/${sha}`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "gitignoreGetAllTemplates": () => HttpClientRequest.get(`/gitignore/templates`).pipe(
    onRequest(["2xx"])
  ),
  "gitignoreGetTemplate": (name) => HttpClientRequest.get(`/gitignore/templates/${name}`).pipe(
    onRequest(["2xx"])
  ),
  "appsListReposAccessibleToInstallation": (options) => HttpClientRequest.get(`/installation/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "appsRevokeInstallationAccessToken": () => HttpClientRequest.del(`/installation/token`).pipe(
    onRequest([])
  ),
  "issuesList": (options) => HttpClientRequest.get(`/issues`).pipe(
    HttpClientRequest.setUrlParams({ "filter": options?.["filter"] as any, "state": options?.["state"] as any, "labels": options?.["labels"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "since": options?.["since"] as any, "collab": options?.["collab"] as any, "orgs": options?.["orgs"] as any, "owned": options?.["owned"] as any, "pulls": options?.["pulls"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "licensesGetAllCommonlyUsed": (options) => HttpClientRequest.get(`/licenses`).pipe(
    HttpClientRequest.setUrlParams({ "featured": options?.["featured"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "licensesGet": (license) => HttpClientRequest.get(`/licenses/${license}`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "markdownRender": (options) => HttpClientRequest.post(`/markdown`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest([])
  ),
  "markdownRenderRaw": () => HttpClientRequest.post(`/markdown/raw`).pipe(
    onRequest([])
  ),
  "appsGetSubscriptionPlanForAccount": (accountId, options) => HttpClientRequest.get(`/marketplace_listing/accounts/${accountId}`).pipe(
    onRequest(["2xx"], {"401":"BasicError","404":"BasicError"})
  ),
  "appsListPlans": (options) => HttpClientRequest.get(`/marketplace_listing/plans`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","404":"BasicError"})
  ),
  "appsListAccountsForPlan": (planId, options) => HttpClientRequest.get(`/marketplace_listing/plans/${planId}/accounts`).pipe(
    HttpClientRequest.setUrlParams({ "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "appsGetSubscriptionPlanForAccountStubbed": (accountId, options) => HttpClientRequest.get(`/marketplace_listing/stubbed/accounts/${accountId}`).pipe(
    onRequest(["2xx"], {"401":"BasicError"})
  ),
  "appsListPlansStubbed": (options) => HttpClientRequest.get(`/marketplace_listing/stubbed/plans`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError"})
  ),
  "appsListAccountsForPlanStubbed": (planId, options) => HttpClientRequest.get(`/marketplace_listing/stubbed/plans/${planId}/accounts`).pipe(
    HttpClientRequest.setUrlParams({ "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError"})
  ),
  "metaGet": () => HttpClientRequest.get(`/meta`).pipe(
    onRequest(["2xx"])
  ),
  "activityListPublicEventsForRepoNetwork": (owner, repo, options) => HttpClientRequest.get(`/networks/${owner}/${repo}/events`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["200", "301"], {"403":"BasicError","404":"BasicError"})
  ),
  "activityListNotificationsForAuthenticatedUser": (options) => HttpClientRequest.get(`/notifications`).pipe(
    HttpClientRequest.setUrlParams({ "all": options?.["all"] as any, "participating": options?.["participating"] as any, "since": options?.["since"] as any, "before": options?.["before"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","422":"ValidationError"})
  ),
  "activityMarkNotificationsAsRead": (options) => HttpClientRequest.put(`/notifications`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "activityGetThread": (threadId, options) => HttpClientRequest.get(`/notifications/threads/${threadId}`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "activityMarkThreadAsDone": (threadId, options) => HttpClientRequest.del(`/notifications/threads/${threadId}`).pipe(
    onRequest([])
  ),
  "activityMarkThreadAsRead": (threadId, options) => HttpClientRequest.patch(`/notifications/threads/${threadId}`).pipe(
    onRequest([], {"403":"BasicError"})
  ),
  "activityGetThreadSubscriptionForAuthenticatedUser": (threadId, options) => HttpClientRequest.get(`/notifications/threads/${threadId}/subscription`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "activitySetThreadSubscription": (threadId, options) => HttpClientRequest.put(`/notifications/threads/${threadId}/subscription`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "activityDeleteThreadSubscription": (threadId, options) => HttpClientRequest.del(`/notifications/threads/${threadId}/subscription`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError"})
  ),
  "metaGetOctocat": (options) => HttpClientRequest.get(`/octocat`).pipe(
    HttpClientRequest.setUrlParams({ "s": options?.["s"] as any }),
    onRequest([])
  ),
  "orgsList": (options) => HttpClientRequest.get(`/organizations`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"])
  ),
  "dependabotRepositoryAccessForOrg": (org, options) => HttpClientRequest.get(`/organizations/${org}/dependabot/repository-access`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "dependabotUpdateRepositoryAccessForOrg": (org, options) => HttpClientRequest.patch(`/organizations/${org}/dependabot/repository-access`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"403":"BasicError","404":"BasicError"})
  ),
  "dependabotSetRepositoryAccessDefaultLevel": (org, options) => HttpClientRequest.put(`/organizations/${org}/dependabot/repository-access/default-level`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"403":"BasicError","404":"BasicError"})
  ),
  "billingGetGithubBillingUsageReportOrg": (org, options) => HttpClientRequest.get(`/organizations/${org}/settings/billing/usage`).pipe(
    HttpClientRequest.setUrlParams({ "year": options?.["year"] as any, "month": options?.["month"] as any, "day": options?.["day"] as any, "hour": options?.["hour"] as any }),
    onRequest(["2xx"], {"400":"BasicError","403":"BasicError","500":"BasicError","503":"BillingGetGithubBillingUsageReportOrg503"})
  ),
  "orgsGet": (org, options) => HttpClientRequest.get(`/orgs/${org}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "orgsDelete": (org, options) => HttpClientRequest.del(`/orgs/${org}`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "orgsUpdate": (org, options) => HttpClientRequest.patch(`/orgs/${org}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"409":"BasicError","422":"OrgsUpdate422"})
  ),
  "actionsGetActionsCacheUsageForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/cache/usage`).pipe(
    onRequest(["2xx"])
  ),
  "actionsGetActionsCacheUsageByRepoForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/cache/usage-by-repository`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsListHostedRunnersForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/hosted-runners`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsCreateHostedRunnerForOrg": (org, options) => HttpClientRequest.post(`/orgs/${org}/actions/hosted-runners`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "actionsGetHostedRunnersGithubOwnedImagesForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/hosted-runners/images/github-owned`).pipe(
    onRequest(["2xx"])
  ),
  "actionsGetHostedRunnersPartnerImagesForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/hosted-runners/images/partner`).pipe(
    onRequest(["2xx"])
  ),
  "actionsGetHostedRunnersLimitsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/hosted-runners/limits`).pipe(
    onRequest(["2xx"])
  ),
  "actionsGetHostedRunnersMachineSpecsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/hosted-runners/machine-sizes`).pipe(
    onRequest(["2xx"])
  ),
  "actionsGetHostedRunnersPlatformsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/hosted-runners/platforms`).pipe(
    onRequest(["2xx"])
  ),
  "actionsGetHostedRunnerForOrg": (org, hostedRunnerId, options) => HttpClientRequest.get(`/orgs/${org}/actions/hosted-runners/${hostedRunnerId}`).pipe(
    onRequest(["2xx"])
  ),
  "actionsDeleteHostedRunnerForOrg": (org, hostedRunnerId, options) => HttpClientRequest.del(`/orgs/${org}/actions/hosted-runners/${hostedRunnerId}`).pipe(
    onRequest(["2xx"])
  ),
  "actionsUpdateHostedRunnerForOrg": (org, hostedRunnerId, options) => HttpClientRequest.patch(`/orgs/${org}/actions/hosted-runners/${hostedRunnerId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "oidcGetOidcCustomSubTemplateForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/oidc/customization/sub`).pipe(
    onRequest(["2xx"])
  ),
  "oidcUpdateOidcCustomSubTemplateForOrg": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/oidc/customization/sub`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "actionsGetGithubActionsPermissionsOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/permissions`).pipe(
    onRequest(["2xx"])
  ),
  "actionsSetGithubActionsPermissionsOrganization": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "actionsGetArtifactAndLogRetentionSettingsOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/permissions/artifact-and-log-retention`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "actionsSetArtifactAndLogRetentionSettingsOrganization": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/artifact-and-log-retention`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"403":"BasicError","404":"BasicError","409":"BasicError","422":"ValidationError"})
  ),
  "actionsGetForkPrContributorApprovalPermissionsOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/permissions/fork-pr-contributor-approval`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "actionsSetForkPrContributorApprovalPermissionsOrganization": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/fork-pr-contributor-approval`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"404":"BasicError","422":"ValidationError"})
  ),
  "actionsGetPrivateRepoForkPrWorkflowsSettingsOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/permissions/fork-pr-workflows-private-repos`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "actionsSetPrivateRepoForkPrWorkflowsSettingsOrganization": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/fork-pr-workflows-private-repos`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "actionsListSelectedRepositoriesEnabledGithubActionsOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/permissions/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsSetSelectedRepositoriesEnabledGithubActionsOrganization": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/repositories`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "actionsEnableSelectedRepositoryGithubActionsOrganization": (org, repositoryId, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/repositories/${repositoryId}`).pipe(
    onRequest([])
  ),
  "actionsDisableSelectedRepositoryGithubActionsOrganization": (org, repositoryId, options) => HttpClientRequest.del(`/orgs/${org}/actions/permissions/repositories/${repositoryId}`).pipe(
    onRequest([])
  ),
  "actionsGetAllowedActionsOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/permissions/selected-actions`).pipe(
    onRequest(["2xx"])
  ),
  "actionsSetAllowedActionsOrganization": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/selected-actions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "actionsGetSelfHostedRunnersPermissionsOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/permissions/self-hosted-runners`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "actionsSetSelfHostedRunnersPermissionsOrganization": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/self-hosted-runners`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"403":"BasicError","404":"BasicError","409":"BasicError","422":"ValidationError"})
  ),
  "actionsListSelectedRepositoriesSelfHostedRunnersOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/permissions/self-hosted-runners/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "actionsSetSelectedRepositoriesSelfHostedRunnersOrganization": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/self-hosted-runners/repositories`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "actionsEnableSelectedRepositorySelfHostedRunnersOrganization": (org, repositoryId, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/self-hosted-runners/repositories/${repositoryId}`).pipe(
    onRequest([], {"403":"BasicError","404":"BasicError","409":"BasicError","422":"ValidationError"})
  ),
  "actionsDisableSelectedRepositorySelfHostedRunnersOrganization": (org, repositoryId, options) => HttpClientRequest.del(`/orgs/${org}/actions/permissions/self-hosted-runners/repositories/${repositoryId}`).pipe(
    onRequest([], {"403":"BasicError","404":"BasicError","409":"BasicError","422":"ValidationError"})
  ),
  "actionsGetGithubActionsDefaultWorkflowPermissionsOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/permissions/workflow`).pipe(
    onRequest(["2xx"])
  ),
  "actionsSetGithubActionsDefaultWorkflowPermissionsOrganization": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/workflow`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "actionsListSelfHostedRunnerGroupsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/runner-groups`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "visible_to_repository": options?.["visible_to_repository"] as any }),
    onRequest(["2xx"])
  ),
  "actionsCreateSelfHostedRunnerGroupForOrg": (org, options) => HttpClientRequest.post(`/orgs/${org}/actions/runner-groups`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "actionsGetSelfHostedRunnerGroupForOrg": (org, runnerGroupId, options) => HttpClientRequest.get(`/orgs/${org}/actions/runner-groups/${runnerGroupId}`).pipe(
    onRequest(["2xx"])
  ),
  "actionsDeleteSelfHostedRunnerGroupFromOrg": (org, runnerGroupId, options) => HttpClientRequest.del(`/orgs/${org}/actions/runner-groups/${runnerGroupId}`).pipe(
    onRequest([])
  ),
  "actionsUpdateSelfHostedRunnerGroupForOrg": (org, runnerGroupId, options) => HttpClientRequest.patch(`/orgs/${org}/actions/runner-groups/${runnerGroupId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "actionsListGithubHostedRunnersInGroupForOrg": (org, runnerGroupId, options) => HttpClientRequest.get(`/orgs/${org}/actions/runner-groups/${runnerGroupId}/hosted-runners`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsListRepoAccessToSelfHostedRunnerGroupInOrg": (org, runnerGroupId, options) => HttpClientRequest.get(`/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsSetRepoAccessToSelfHostedRunnerGroupInOrg": (org, runnerGroupId, options) => HttpClientRequest.put(`/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "actionsAddRepoAccessToSelfHostedRunnerGroupInOrg": (org, runnerGroupId, repositoryId, options) => HttpClientRequest.put(`/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories/${repositoryId}`).pipe(
    onRequest([])
  ),
  "actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg": (org, runnerGroupId, repositoryId, options) => HttpClientRequest.del(`/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories/${repositoryId}`).pipe(
    onRequest([])
  ),
  "actionsListSelfHostedRunnersInGroupForOrg": (org, runnerGroupId, options) => HttpClientRequest.get(`/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsSetSelfHostedRunnersInGroupForOrg": (org, runnerGroupId, options) => HttpClientRequest.put(`/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "actionsAddSelfHostedRunnerToGroupForOrg": (org, runnerGroupId, runnerId, options) => HttpClientRequest.put(`/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners/${runnerId}`).pipe(
    onRequest([])
  ),
  "actionsRemoveSelfHostedRunnerFromGroupForOrg": (org, runnerGroupId, runnerId, options) => HttpClientRequest.del(`/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners/${runnerId}`).pipe(
    onRequest([])
  ),
  "actionsListSelfHostedRunnersForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/runners`).pipe(
    HttpClientRequest.setUrlParams({ "name": options?.["name"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsListRunnerApplicationsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/runners/downloads`).pipe(
    onRequest(["2xx"])
  ),
  "actionsGenerateRunnerJitconfigForOrg": (org, options) => HttpClientRequest.post(`/orgs/${org}/actions/runners/generate-jitconfig`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","409":"BasicError","422":"ValidationErrorSimple"})
  ),
  "actionsCreateRegistrationTokenForOrg": (org, options) => HttpClientRequest.post(`/orgs/${org}/actions/runners/registration-token`).pipe(
    onRequest(["2xx"])
  ),
  "actionsCreateRemoveTokenForOrg": (org, options) => HttpClientRequest.post(`/orgs/${org}/actions/runners/remove-token`).pipe(
    onRequest(["2xx"])
  ),
  "actionsGetSelfHostedRunnerForOrg": (org, runnerId, options) => HttpClientRequest.get(`/orgs/${org}/actions/runners/${runnerId}`).pipe(
    onRequest(["2xx"])
  ),
  "actionsDeleteSelfHostedRunnerFromOrg": (org, runnerId, options) => HttpClientRequest.del(`/orgs/${org}/actions/runners/${runnerId}`).pipe(
    onRequest([], {"422":"ValidationErrorSimple"})
  ),
  "actionsListLabelsForSelfHostedRunnerForOrg": (org, runnerId, options) => HttpClientRequest.get(`/orgs/${org}/actions/runners/${runnerId}/labels`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "actionsSetCustomLabelsForSelfHostedRunnerForOrg": (org, runnerId, options) => HttpClientRequest.put(`/orgs/${org}/actions/runners/${runnerId}/labels`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "actionsAddCustomLabelsToSelfHostedRunnerForOrg": (org, runnerId, options) => HttpClientRequest.post(`/orgs/${org}/actions/runners/${runnerId}/labels`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg": (org, runnerId, options) => HttpClientRequest.del(`/orgs/${org}/actions/runners/${runnerId}/labels`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "actionsRemoveCustomLabelFromSelfHostedRunnerForOrg": (org, runnerId, name, options) => HttpClientRequest.del(`/orgs/${org}/actions/runners/${runnerId}/labels/${name}`).pipe(
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "actionsListOrgSecrets": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/secrets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsGetOrgPublicKey": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/secrets/public-key`).pipe(
    onRequest(["2xx"])
  ),
  "actionsGetOrgSecret": (org, secretName, options) => HttpClientRequest.get(`/orgs/${org}/actions/secrets/${secretName}`).pipe(
    onRequest(["2xx"])
  ),
  "actionsCreateOrUpdateOrgSecret": (org, secretName, options) => HttpClientRequest.put(`/orgs/${org}/actions/secrets/${secretName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "actionsDeleteOrgSecret": (org, secretName, options) => HttpClientRequest.del(`/orgs/${org}/actions/secrets/${secretName}`).pipe(
    onRequest([])
  ),
  "actionsListSelectedReposForOrgSecret": (org, secretName, options) => HttpClientRequest.get(`/orgs/${org}/actions/secrets/${secretName}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsSetSelectedReposForOrgSecret": (org, secretName, options) => HttpClientRequest.put(`/orgs/${org}/actions/secrets/${secretName}/repositories`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "actionsAddSelectedRepoToOrgSecret": (org, secretName, repositoryId, options) => HttpClientRequest.put(`/orgs/${org}/actions/secrets/${secretName}/repositories/${repositoryId}`).pipe(
    onRequest([])
  ),
  "actionsRemoveSelectedRepoFromOrgSecret": (org, secretName, repositoryId, options) => HttpClientRequest.del(`/orgs/${org}/actions/secrets/${secretName}/repositories/${repositoryId}`).pipe(
    onRequest([])
  ),
  "actionsListOrgVariables": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/variables`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsCreateOrgVariable": (org, options) => HttpClientRequest.post(`/orgs/${org}/actions/variables`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "actionsGetOrgVariable": (org, name, options) => HttpClientRequest.get(`/orgs/${org}/actions/variables/${name}`).pipe(
    onRequest(["2xx"])
  ),
  "actionsDeleteOrgVariable": (org, name, options) => HttpClientRequest.del(`/orgs/${org}/actions/variables/${name}`).pipe(
    onRequest([])
  ),
  "actionsUpdateOrgVariable": (org, name, options) => HttpClientRequest.patch(`/orgs/${org}/actions/variables/${name}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "actionsListSelectedReposForOrgVariable": (org, name, options) => HttpClientRequest.get(`/orgs/${org}/actions/variables/${name}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsSetSelectedReposForOrgVariable": (org, name, options) => HttpClientRequest.put(`/orgs/${org}/actions/variables/${name}/repositories`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "actionsAddSelectedRepoToOrgVariable": (org, name, repositoryId, options) => HttpClientRequest.put(`/orgs/${org}/actions/variables/${name}/repositories/${repositoryId}`).pipe(
    onRequest([])
  ),
  "actionsRemoveSelectedRepoFromOrgVariable": (org, name, repositoryId, options) => HttpClientRequest.del(`/orgs/${org}/actions/variables/${name}/repositories/${repositoryId}`).pipe(
    onRequest([])
  ),
  "orgsListAttestationsBulk": (org, options) => HttpClientRequest.post(`/orgs/${org}/attestations/bulk-list`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options.params?.["per_page"] as any, "before": options.params?.["before"] as any, "after": options.params?.["after"] as any }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "orgsDeleteAttestationsBulk": (org, options) => HttpClientRequest.post(`/orgs/${org}/attestations/delete-request`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"404":"BasicError"})
  ),
  "orgsDeleteAttestationsBySubjectDigest": (org, subjectDigest, options) => HttpClientRequest.del(`/orgs/${org}/attestations/digest/${subjectDigest}`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "orgsDeleteAttestationsById": (org, attestationId, options) => HttpClientRequest.del(`/orgs/${org}/attestations/${attestationId}`).pipe(
    onRequest([], {"403":"BasicError","404":"BasicError"})
  ),
  "orgsListAttestations": (org, subjectDigest, options) => HttpClientRequest.get(`/orgs/${org}/attestations/${subjectDigest}`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "predicate_type": options?.["predicate_type"] as any }),
    onRequest(["2xx"])
  ),
  "orgsListBlockedUsers": (org, options) => HttpClientRequest.get(`/orgs/${org}/blocks`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "orgsCheckBlockedUser": (org, username, options) => HttpClientRequest.get(`/orgs/${org}/blocks/${username}`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "orgsBlockUser": (org, username, options) => HttpClientRequest.put(`/orgs/${org}/blocks/${username}`).pipe(
    onRequest([], {"422":"ValidationError"})
  ),
  "orgsUnblockUser": (org, username, options) => HttpClientRequest.del(`/orgs/${org}/blocks/${username}`).pipe(
    onRequest([])
  ),
  "campaignsListOrgCampaigns": (org, options) => HttpClientRequest.get(`/orgs/${org}/campaigns`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "direction": options?.["direction"] as any, "state": options?.["state"] as any, "sort": options?.["sort"] as any }),
    onRequest(["2xx"], {"404":"BasicError","503":"CampaignsListOrgCampaigns503"})
  ),
  "campaignsCreateCampaign": (org, options) => HttpClientRequest.post(`/orgs/${org}/campaigns`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"400":"BasicError","404":"BasicError","422":"BasicError","503":"CampaignsCreateCampaign503"})
  ),
  "campaignsGetCampaignSummary": (org, campaignNumber, options) => HttpClientRequest.get(`/orgs/${org}/campaigns/${campaignNumber}`).pipe(
    onRequest(["2xx"], {"404":"BasicError","422":"BasicError","503":"CampaignsGetCampaignSummary503"})
  ),
  "campaignsDeleteCampaign": (org, campaignNumber, options) => HttpClientRequest.del(`/orgs/${org}/campaigns/${campaignNumber}`).pipe(
    onRequest([], {"404":"BasicError","503":"CampaignsDeleteCampaign503"})
  ),
  "campaignsUpdateCampaign": (org, campaignNumber, options) => HttpClientRequest.patch(`/orgs/${org}/campaigns/${campaignNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"400":"BasicError","404":"BasicError","422":"BasicError","503":"CampaignsUpdateCampaign503"})
  ),
  "codeScanningListAlertsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/code-scanning/alerts`).pipe(
    HttpClientRequest.setUrlParams({ "tool_name": options?.["tool_name"] as any, "tool_guid": options?.["tool_guid"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "direction": options?.["direction"] as any, "state": options?.["state"] as any, "sort": options?.["sort"] as any, "severity": options?.["severity"] as any }),
    onRequest(["2xx"], {"404":"BasicError","503":"CodeScanningListAlertsForOrg503"})
  ),
  "codeSecurityGetConfigurationsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/code-security/configurations`).pipe(
    HttpClientRequest.setUrlParams({ "target_type": options?.["target_type"] as any, "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "codeSecurityCreateConfiguration": (org, options) => HttpClientRequest.post(`/orgs/${org}/code-security/configurations`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "codeSecurityGetDefaultConfigurations": (org, options) => HttpClientRequest.get(`/orgs/${org}/code-security/configurations/defaults`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "codeSecurityDetachConfiguration": (org, options) => HttpClientRequest.del(`/orgs/${org}/code-security/configurations/detach`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"400":"BasicError","403":"BasicError","404":"BasicError","409":"BasicError"})
  ),
  "codeSecurityGetConfiguration": (org, configurationId, options) => HttpClientRequest.get(`/orgs/${org}/code-security/configurations/${configurationId}`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "codeSecurityDeleteConfiguration": (org, configurationId, options) => HttpClientRequest.del(`/orgs/${org}/code-security/configurations/${configurationId}`).pipe(
    onRequest([], {"400":"BasicError","403":"BasicError","404":"BasicError","409":"BasicError"})
  ),
  "codeSecurityUpdateConfiguration": (org, configurationId, options) => HttpClientRequest.patch(`/orgs/${org}/code-security/configurations/${configurationId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "codeSecurityAttachConfiguration": (org, configurationId, options) => HttpClientRequest.post(`/orgs/${org}/code-security/configurations/${configurationId}/attach`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "codeSecuritySetConfigurationAsDefault": (org, configurationId, options) => HttpClientRequest.put(`/orgs/${org}/code-security/configurations/${configurationId}/defaults`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "codeSecurityGetRepositoriesForConfiguration": (org, configurationId, options) => HttpClientRequest.get(`/orgs/${org}/code-security/configurations/${configurationId}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "status": options?.["status"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "codespacesListInOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/codespaces`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "codespacesSetCodespacesAccess": (org, options) => HttpClientRequest.put(`/orgs/${org}/codespaces/access`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"404":"BasicError","422":"ValidationError","500":"BasicError"})
  ),
  "codespacesSetCodespacesAccessUsers": (org, options) => HttpClientRequest.post(`/orgs/${org}/codespaces/access/selected_users`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"404":"BasicError","422":"ValidationError","500":"BasicError"})
  ),
  "codespacesDeleteCodespacesAccessUsers": (org, options) => HttpClientRequest.del(`/orgs/${org}/codespaces/access/selected_users`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"404":"BasicError","422":"ValidationError","500":"BasicError"})
  ),
  "codespacesListOrgSecrets": (org, options) => HttpClientRequest.get(`/orgs/${org}/codespaces/secrets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "codespacesGetOrgPublicKey": (org, options) => HttpClientRequest.get(`/orgs/${org}/codespaces/secrets/public-key`).pipe(
    onRequest(["2xx"])
  ),
  "codespacesGetOrgSecret": (org, secretName, options) => HttpClientRequest.get(`/orgs/${org}/codespaces/secrets/${secretName}`).pipe(
    onRequest(["2xx"])
  ),
  "codespacesCreateOrUpdateOrgSecret": (org, secretName, options) => HttpClientRequest.put(`/orgs/${org}/codespaces/secrets/${secretName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "codespacesDeleteOrgSecret": (org, secretName, options) => HttpClientRequest.del(`/orgs/${org}/codespaces/secrets/${secretName}`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "codespacesListSelectedReposForOrgSecret": (org, secretName, options) => HttpClientRequest.get(`/orgs/${org}/codespaces/secrets/${secretName}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "codespacesSetSelectedReposForOrgSecret": (org, secretName, options) => HttpClientRequest.put(`/orgs/${org}/codespaces/secrets/${secretName}/repositories`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"404":"BasicError"})
  ),
  "codespacesAddSelectedRepoToOrgSecret": (org, secretName, repositoryId, options) => HttpClientRequest.put(`/orgs/${org}/codespaces/secrets/${secretName}/repositories/${repositoryId}`).pipe(
    onRequest([], {"404":"BasicError","422":"ValidationError"})
  ),
  "codespacesRemoveSelectedRepoFromOrgSecret": (org, secretName, repositoryId, options) => HttpClientRequest.del(`/orgs/${org}/codespaces/secrets/${secretName}/repositories/${repositoryId}`).pipe(
    onRequest([], {"404":"BasicError","422":"ValidationError"})
  ),
  "copilotGetCopilotOrganizationDetails": (org, options) => HttpClientRequest.get(`/orgs/${org}/copilot/billing`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "copilotListCopilotSeats": (org, options) => HttpClientRequest.get(`/orgs/${org}/copilot/billing/seats`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "copilotAddCopilotSeatsForTeams": (org, options) => HttpClientRequest.post(`/orgs/${org}/copilot/billing/selected_teams`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "copilotCancelCopilotSeatAssignmentForTeams": (org, options) => HttpClientRequest.del(`/orgs/${org}/copilot/billing/selected_teams`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "copilotAddCopilotSeatsForUsers": (org, options) => HttpClientRequest.post(`/orgs/${org}/copilot/billing/selected_users`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "copilotCancelCopilotSeatAssignmentForUsers": (org, options) => HttpClientRequest.del(`/orgs/${org}/copilot/billing/selected_users`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "copilotCopilotMetricsForOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/copilot/metrics`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any, "until": options?.["until"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"BasicError","500":"BasicError"})
  ),
  "dependabotListAlertsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/dependabot/alerts`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "severity": options?.["severity"] as any, "ecosystem": options?.["ecosystem"] as any, "package": options?.["package"] as any, "epss_percentage": options?.["epss_percentage"] as any, "artifact_registry_url": options?.["artifact_registry_url"] as any, "artifact_registry": options?.["artifact_registry"] as any, "has": options?.["has"] as any, "scope": options?.["scope"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "first": options?.["first"] as any, "last": options?.["last"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"], {"400":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "dependabotListOrgSecrets": (org, options) => HttpClientRequest.get(`/orgs/${org}/dependabot/secrets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "dependabotGetOrgPublicKey": (org, options) => HttpClientRequest.get(`/orgs/${org}/dependabot/secrets/public-key`).pipe(
    onRequest(["2xx"])
  ),
  "dependabotGetOrgSecret": (org, secretName, options) => HttpClientRequest.get(`/orgs/${org}/dependabot/secrets/${secretName}`).pipe(
    onRequest(["2xx"])
  ),
  "dependabotCreateOrUpdateOrgSecret": (org, secretName, options) => HttpClientRequest.put(`/orgs/${org}/dependabot/secrets/${secretName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "dependabotDeleteOrgSecret": (org, secretName, options) => HttpClientRequest.del(`/orgs/${org}/dependabot/secrets/${secretName}`).pipe(
    onRequest([])
  ),
  "dependabotListSelectedReposForOrgSecret": (org, secretName, options) => HttpClientRequest.get(`/orgs/${org}/dependabot/secrets/${secretName}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"])
  ),
  "dependabotSetSelectedReposForOrgSecret": (org, secretName, options) => HttpClientRequest.put(`/orgs/${org}/dependabot/secrets/${secretName}/repositories`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "dependabotAddSelectedRepoToOrgSecret": (org, secretName, repositoryId, options) => HttpClientRequest.put(`/orgs/${org}/dependabot/secrets/${secretName}/repositories/${repositoryId}`).pipe(
    onRequest([])
  ),
  "dependabotRemoveSelectedRepoFromOrgSecret": (org, secretName, repositoryId, options) => HttpClientRequest.del(`/orgs/${org}/dependabot/secrets/${secretName}/repositories/${repositoryId}`).pipe(
    onRequest([])
  ),
  "packagesListDockerMigrationConflictingPackagesForOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/docker/conflicts`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "activityListPublicOrgEvents": (org, options) => HttpClientRequest.get(`/orgs/${org}/events`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "orgsListFailedInvitations": (org, options) => HttpClientRequest.get(`/orgs/${org}/failed_invitations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "orgsListWebhooks": (org, options) => HttpClientRequest.get(`/orgs/${org}/hooks`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "orgsCreateWebhook": (org, options) => HttpClientRequest.post(`/orgs/${org}/hooks`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "orgsGetWebhook": (org, hookId, options) => HttpClientRequest.get(`/orgs/${org}/hooks/${hookId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "orgsDeleteWebhook": (org, hookId, options) => HttpClientRequest.del(`/orgs/${org}/hooks/${hookId}`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "orgsUpdateWebhook": (org, hookId, options) => HttpClientRequest.patch(`/orgs/${org}/hooks/${hookId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "orgsGetWebhookConfigForOrg": (org, hookId, options) => HttpClientRequest.get(`/orgs/${org}/hooks/${hookId}/config`).pipe(
    onRequest(["2xx"])
  ),
  "orgsUpdateWebhookConfigForOrg": (org, hookId, options) => HttpClientRequest.patch(`/orgs/${org}/hooks/${hookId}/config`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "orgsListWebhookDeliveries": (org, hookId, options) => HttpClientRequest.get(`/orgs/${org}/hooks/${hookId}/deliveries`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "cursor": options?.["cursor"] as any }),
    onRequest(["2xx"], {"400":"BasicError","422":"ValidationError"})
  ),
  "orgsGetWebhookDelivery": (org, hookId, deliveryId, options) => HttpClientRequest.get(`/orgs/${org}/hooks/${hookId}/deliveries/${deliveryId}`).pipe(
    onRequest(["2xx"], {"400":"BasicError","422":"ValidationError"})
  ),
  "orgsRedeliverWebhookDelivery": (org, hookId, deliveryId, options) => HttpClientRequest.post(`/orgs/${org}/hooks/${hookId}/deliveries/${deliveryId}/attempts`).pipe(
    onRequest(["2xx"], {"400":"BasicError","422":"ValidationError"})
  ),
  "orgsPingWebhook": (org, hookId, options) => HttpClientRequest.post(`/orgs/${org}/hooks/${hookId}/pings`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "apiInsightsGetRouteStatsByActor": (org, actorType, actorId, options) => HttpClientRequest.get(`/orgs/${org}/insights/api/route-stats/${actorType}/${actorId}`).pipe(
    HttpClientRequest.setUrlParams({ "min_timestamp": options?.["min_timestamp"] as any, "max_timestamp": options?.["max_timestamp"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "direction": options?.["direction"] as any, "sort": options?.["sort"] as any, "api_route_substring": options?.["api_route_substring"] as any }),
    onRequest(["2xx"])
  ),
  "apiInsightsGetSubjectStats": (org, options) => HttpClientRequest.get(`/orgs/${org}/insights/api/subject-stats`).pipe(
    HttpClientRequest.setUrlParams({ "min_timestamp": options?.["min_timestamp"] as any, "max_timestamp": options?.["max_timestamp"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "direction": options?.["direction"] as any, "sort": options?.["sort"] as any, "subject_name_substring": options?.["subject_name_substring"] as any }),
    onRequest(["2xx"])
  ),
  "apiInsightsGetSummaryStats": (org, options) => HttpClientRequest.get(`/orgs/${org}/insights/api/summary-stats`).pipe(
    HttpClientRequest.setUrlParams({ "min_timestamp": options?.["min_timestamp"] as any, "max_timestamp": options?.["max_timestamp"] as any }),
    onRequest(["2xx"])
  ),
  "apiInsightsGetSummaryStatsByUser": (org, userId, options) => HttpClientRequest.get(`/orgs/${org}/insights/api/summary-stats/users/${userId}`).pipe(
    HttpClientRequest.setUrlParams({ "min_timestamp": options?.["min_timestamp"] as any, "max_timestamp": options?.["max_timestamp"] as any }),
    onRequest(["2xx"])
  ),
  "apiInsightsGetSummaryStatsByActor": (org, actorType, actorId, options) => HttpClientRequest.get(`/orgs/${org}/insights/api/summary-stats/${actorType}/${actorId}`).pipe(
    HttpClientRequest.setUrlParams({ "min_timestamp": options?.["min_timestamp"] as any, "max_timestamp": options?.["max_timestamp"] as any }),
    onRequest(["2xx"])
  ),
  "apiInsightsGetTimeStats": (org, options) => HttpClientRequest.get(`/orgs/${org}/insights/api/time-stats`).pipe(
    HttpClientRequest.setUrlParams({ "min_timestamp": options?.["min_timestamp"] as any, "max_timestamp": options?.["max_timestamp"] as any, "timestamp_increment": options?.["timestamp_increment"] as any }),
    onRequest(["2xx"])
  ),
  "apiInsightsGetTimeStatsByUser": (org, userId, options) => HttpClientRequest.get(`/orgs/${org}/insights/api/time-stats/users/${userId}`).pipe(
    HttpClientRequest.setUrlParams({ "min_timestamp": options?.["min_timestamp"] as any, "max_timestamp": options?.["max_timestamp"] as any, "timestamp_increment": options?.["timestamp_increment"] as any }),
    onRequest(["2xx"])
  ),
  "apiInsightsGetTimeStatsByActor": (org, actorType, actorId, options) => HttpClientRequest.get(`/orgs/${org}/insights/api/time-stats/${actorType}/${actorId}`).pipe(
    HttpClientRequest.setUrlParams({ "min_timestamp": options?.["min_timestamp"] as any, "max_timestamp": options?.["max_timestamp"] as any, "timestamp_increment": options?.["timestamp_increment"] as any }),
    onRequest(["2xx"])
  ),
  "apiInsightsGetUserStats": (org, userId, options) => HttpClientRequest.get(`/orgs/${org}/insights/api/user-stats/${userId}`).pipe(
    HttpClientRequest.setUrlParams({ "min_timestamp": options?.["min_timestamp"] as any, "max_timestamp": options?.["max_timestamp"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "direction": options?.["direction"] as any, "sort": options?.["sort"] as any, "actor_name_substring": options?.["actor_name_substring"] as any }),
    onRequest(["2xx"])
  ),
  "appsGetOrgInstallation": (org, options) => HttpClientRequest.get(`/orgs/${org}/installation`).pipe(
    onRequest(["2xx"])
  ),
  "orgsListAppInstallations": (org, options) => HttpClientRequest.get(`/orgs/${org}/installations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "interactionsGetRestrictionsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/interaction-limits`).pipe(
    onRequest(["2xx"])
  ),
  "interactionsSetRestrictionsForOrg": (org, options) => HttpClientRequest.put(`/orgs/${org}/interaction-limits`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "interactionsRemoveRestrictionsForOrg": (org, options) => HttpClientRequest.del(`/orgs/${org}/interaction-limits`).pipe(
    onRequest([])
  ),
  "orgsListPendingInvitations": (org, options) => HttpClientRequest.get(`/orgs/${org}/invitations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "role": options?.["role"] as any, "invitation_source": options?.["invitation_source"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "orgsCreateInvitation": (org, options) => HttpClientRequest.post(`/orgs/${org}/invitations`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "orgsCancelInvitation": (org, invitationId, options) => HttpClientRequest.del(`/orgs/${org}/invitations/${invitationId}`).pipe(
    onRequest([], {"404":"BasicError","422":"ValidationError"})
  ),
  "orgsListInvitationTeams": (org, invitationId, options) => HttpClientRequest.get(`/orgs/${org}/invitations/${invitationId}/teams`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "orgsListIssueTypes": (org, options) => HttpClientRequest.get(`/orgs/${org}/issue-types`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "orgsCreateIssueType": (org, options) => HttpClientRequest.post(`/orgs/${org}/issue-types`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "orgsUpdateIssueType": (org, issueTypeId, options) => HttpClientRequest.put(`/orgs/${org}/issue-types/${issueTypeId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "orgsDeleteIssueType": (org, issueTypeId, options) => HttpClientRequest.del(`/orgs/${org}/issue-types/${issueTypeId}`).pipe(
    onRequest([], {"404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "issuesListForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/issues`).pipe(
    HttpClientRequest.setUrlParams({ "filter": options?.["filter"] as any, "state": options?.["state"] as any, "labels": options?.["labels"] as any, "type": options?.["type"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "orgsListMembers": (org, options) => HttpClientRequest.get(`/orgs/${org}/members`).pipe(
    HttpClientRequest.setUrlParams({ "filter": options?.["filter"] as any, "role": options?.["role"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "orgsCheckMembershipForUser": (org, username, options) => HttpClientRequest.get(`/orgs/${org}/members/${username}`).pipe(
    onRequest([])
  ),
  "orgsRemoveMember": (org, username, options) => HttpClientRequest.del(`/orgs/${org}/members/${username}`).pipe(
    onRequest([], {"403":"BasicError"})
  ),
  "codespacesGetCodespacesForUserInOrg": (org, username, options) => HttpClientRequest.get(`/orgs/${org}/members/${username}/codespaces`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "codespacesDeleteFromOrganization": (org, username, codespaceName, options) => HttpClientRequest.del(`/orgs/${org}/members/${username}/codespaces/${codespaceName}`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "codespacesStopInOrganization": (org, username, codespaceName, options) => HttpClientRequest.post(`/orgs/${org}/members/${username}/codespaces/${codespaceName}/stop`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "copilotGetCopilotSeatDetailsForUser": (org, username, options) => HttpClientRequest.get(`/orgs/${org}/members/${username}/copilot`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "orgsGetMembershipForUser": (org, username, options) => HttpClientRequest.get(`/orgs/${org}/memberships/${username}`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "orgsSetMembershipForUser": (org, username, options) => HttpClientRequest.put(`/orgs/${org}/memberships/${username}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","422":"ValidationError"})
  ),
  "orgsRemoveMembershipForUser": (org, username, options) => HttpClientRequest.del(`/orgs/${org}/memberships/${username}`).pipe(
    onRequest([], {"403":"BasicError","404":"BasicError"})
  ),
  "migrationsListForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/migrations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "exclude": options?.["exclude"] as any }),
    onRequest(["2xx"])
  ),
  "migrationsStartForOrg": (org, options) => HttpClientRequest.post(`/orgs/${org}/migrations`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "migrationsGetStatusForOrg": (org, migrationId, options) => HttpClientRequest.get(`/orgs/${org}/migrations/${migrationId}`).pipe(
    HttpClientRequest.setUrlParams({ "exclude": options?.["exclude"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "migrationsDownloadArchiveForOrg": (org, migrationId, options) => HttpClientRequest.get(`/orgs/${org}/migrations/${migrationId}/archive`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "migrationsDeleteArchiveForOrg": (org, migrationId, options) => HttpClientRequest.del(`/orgs/${org}/migrations/${migrationId}/archive`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "migrationsUnlockRepoForOrg": (org, migrationId, repoName, options) => HttpClientRequest.del(`/orgs/${org}/migrations/${migrationId}/repos/${repoName}/lock`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "migrationsListReposForOrg": (org, migrationId, options) => HttpClientRequest.get(`/orgs/${org}/migrations/${migrationId}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "orgsListOrgRoles": (org, options) => HttpClientRequest.get(`/orgs/${org}/organization-roles`).pipe(
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "orgsRevokeAllOrgRolesTeam": (org, teamSlug, options) => HttpClientRequest.del(`/orgs/${org}/organization-roles/teams/${teamSlug}`).pipe(
    onRequest([])
  ),
  "orgsAssignTeamToOrgRole": (org, teamSlug, roleId, options) => HttpClientRequest.put(`/orgs/${org}/organization-roles/teams/${teamSlug}/${roleId}`).pipe(
    onRequest([])
  ),
  "orgsRevokeOrgRoleTeam": (org, teamSlug, roleId, options) => HttpClientRequest.del(`/orgs/${org}/organization-roles/teams/${teamSlug}/${roleId}`).pipe(
    onRequest([])
  ),
  "orgsRevokeAllOrgRolesUser": (org, username, options) => HttpClientRequest.del(`/orgs/${org}/organization-roles/users/${username}`).pipe(
    onRequest([])
  ),
  "orgsAssignUserToOrgRole": (org, username, roleId, options) => HttpClientRequest.put(`/orgs/${org}/organization-roles/users/${username}/${roleId}`).pipe(
    onRequest([])
  ),
  "orgsRevokeOrgRoleUser": (org, username, roleId, options) => HttpClientRequest.del(`/orgs/${org}/organization-roles/users/${username}/${roleId}`).pipe(
    onRequest([])
  ),
  "orgsGetOrgRole": (org, roleId, options) => HttpClientRequest.get(`/orgs/${org}/organization-roles/${roleId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "orgsListOrgRoleTeams": (org, roleId, options) => HttpClientRequest.get(`/orgs/${org}/organization-roles/${roleId}/teams`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "orgsListOrgRoleUsers": (org, roleId, options) => HttpClientRequest.get(`/orgs/${org}/organization-roles/${roleId}/users`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "orgsListOutsideCollaborators": (org, options) => HttpClientRequest.get(`/orgs/${org}/outside_collaborators`).pipe(
    HttpClientRequest.setUrlParams({ "filter": options?.["filter"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "orgsConvertMemberToOutsideCollaborator": (org, username, options) => HttpClientRequest.put(`/orgs/${org}/outside_collaborators/${username}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "orgsRemoveOutsideCollaborator": (org, username, options) => HttpClientRequest.del(`/orgs/${org}/outside_collaborators/${username}`).pipe(
    onRequest([], {"422":"OrgsRemoveOutsideCollaborator422"})
  ),
  "packagesListPackagesForOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/packages`).pipe(
    HttpClientRequest.setUrlParams({ "package_type": options?.["package_type"] as any, "visibility": options?.["visibility"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "packagesGetPackageForOrganization": (org, packageType, packageName, options) => HttpClientRequest.get(`/orgs/${org}/packages/${packageType}/${packageName}`).pipe(
    onRequest(["2xx"])
  ),
  "packagesDeletePackageForOrg": (org, packageType, packageName, options) => HttpClientRequest.del(`/orgs/${org}/packages/${packageType}/${packageName}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "packagesRestorePackageForOrg": (org, packageType, packageName, options) => HttpClientRequest.post(`/orgs/${org}/packages/${packageType}/${packageName}/restore`).pipe(
    HttpClientRequest.setUrlParams({ "token": options?.["token"] as any }),
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "packagesGetAllPackageVersionsForPackageOwnedByOrg": (org, packageType, packageName, options) => HttpClientRequest.get(`/orgs/${org}/packages/${packageType}/${packageName}/versions`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "state": options?.["state"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "packagesGetPackageVersionForOrganization": (org, packageType, packageName, packageVersionId, options) => HttpClientRequest.get(`/orgs/${org}/packages/${packageType}/${packageName}/versions/${packageVersionId}`).pipe(
    onRequest(["2xx"])
  ),
  "packagesDeletePackageVersionForOrg": (org, packageType, packageName, packageVersionId, options) => HttpClientRequest.del(`/orgs/${org}/packages/${packageType}/${packageName}/versions/${packageVersionId}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "packagesRestorePackageVersionForOrg": (org, packageType, packageName, packageVersionId, options) => HttpClientRequest.post(`/orgs/${org}/packages/${packageType}/${packageName}/versions/${packageVersionId}/restore`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "orgsListPatGrantRequests": (org, options) => HttpClientRequest.get(`/orgs/${org}/personal-access-token-requests`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "owner": options?.["owner"] as any, "repository": options?.["repository"] as any, "permission": options?.["permission"] as any, "last_used_before": options?.["last_used_before"] as any, "last_used_after": options?.["last_used_after"] as any, "token_id": options?.["token_id"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationError","500":"BasicError"})
  ),
  "orgsReviewPatGrantRequestsInBulk": (org, options) => HttpClientRequest.post(`/orgs/${org}/personal-access-token-requests`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationError","500":"BasicError"})
  ),
  "orgsReviewPatGrantRequest": (org, patRequestId, options) => HttpClientRequest.post(`/orgs/${org}/personal-access-token-requests/${patRequestId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"403":"BasicError","404":"BasicError","422":"ValidationError","500":"BasicError"})
  ),
  "orgsListPatGrantRequestRepositories": (org, patRequestId, options) => HttpClientRequest.get(`/orgs/${org}/personal-access-token-requests/${patRequestId}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "orgsListPatGrants": (org, options) => HttpClientRequest.get(`/orgs/${org}/personal-access-tokens`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "owner": options?.["owner"] as any, "repository": options?.["repository"] as any, "permission": options?.["permission"] as any, "last_used_before": options?.["last_used_before"] as any, "last_used_after": options?.["last_used_after"] as any, "token_id": options?.["token_id"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationError","500":"BasicError"})
  ),
  "orgsUpdatePatAccesses": (org, options) => HttpClientRequest.post(`/orgs/${org}/personal-access-tokens`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationError","500":"BasicError"})
  ),
  "orgsUpdatePatAccess": (org, patId, options) => HttpClientRequest.post(`/orgs/${org}/personal-access-tokens/${patId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"403":"BasicError","404":"BasicError","422":"ValidationError","500":"BasicError"})
  ),
  "orgsListPatGrantRepositories": (org, patId, options) => HttpClientRequest.get(`/orgs/${org}/personal-access-tokens/${patId}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "privateRegistriesListOrgPrivateRegistries": (org, options) => HttpClientRequest.get(`/orgs/${org}/private-registries`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"400":"BasicError","404":"BasicError"})
  ),
  "privateRegistriesCreateOrgPrivateRegistry": (org, options) => HttpClientRequest.post(`/orgs/${org}/private-registries`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "privateRegistriesGetOrgPublicKey": (org, options) => HttpClientRequest.get(`/orgs/${org}/private-registries/public-key`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "privateRegistriesGetOrgPrivateRegistry": (org, secretName, options) => HttpClientRequest.get(`/orgs/${org}/private-registries/${secretName}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "privateRegistriesDeleteOrgPrivateRegistry": (org, secretName, options) => HttpClientRequest.del(`/orgs/${org}/private-registries/${secretName}`).pipe(
    onRequest([], {"400":"BasicError","404":"BasicError"})
  ),
  "privateRegistriesUpdateOrgPrivateRegistry": (org, secretName, options) => HttpClientRequest.patch(`/orgs/${org}/private-registries/${secretName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"404":"BasicError","422":"ValidationError"})
  ),
  "projectsClassicListForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"422":"ValidationErrorSimple"})
  ),
  "projectsClassicCreateForOrg": (org, options) => HttpClientRequest.post(`/orgs/${org}/projects`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","410":"BasicError","422":"ValidationErrorSimple"})
  ),
  "orgsGetAllCustomProperties": (org, options) => HttpClientRequest.get(`/orgs/${org}/properties/schema`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "orgsCreateOrUpdateCustomProperties": (org, options) => HttpClientRequest.patch(`/orgs/${org}/properties/schema`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "orgsGetCustomProperty": (org, customPropertyName, options) => HttpClientRequest.get(`/orgs/${org}/properties/schema/${customPropertyName}`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "orgsCreateOrUpdateCustomProperty": (org, customPropertyName, options) => HttpClientRequest.put(`/orgs/${org}/properties/schema/${customPropertyName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "orgsRemoveCustomProperty": (org, customPropertyName, options) => HttpClientRequest.del(`/orgs/${org}/properties/schema/${customPropertyName}`).pipe(
    onRequest([], {"403":"BasicError","404":"BasicError"})
  ),
  "orgsListCustomPropertiesValuesForRepos": (org, options) => HttpClientRequest.get(`/orgs/${org}/properties/values`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "repository_query": options?.["repository_query"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "orgsCreateOrUpdateCustomPropertiesValuesForRepos": (org, options) => HttpClientRequest.patch(`/orgs/${org}/properties/values`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "orgsListPublicMembers": (org, options) => HttpClientRequest.get(`/orgs/${org}/public_members`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "orgsCheckPublicMembershipForUser": (org, username, options) => HttpClientRequest.get(`/orgs/${org}/public_members/${username}`).pipe(
    onRequest([])
  ),
  "orgsSetPublicMembershipForAuthenticatedUser": (org, username, options) => HttpClientRequest.put(`/orgs/${org}/public_members/${username}`).pipe(
    onRequest([], {"403":"BasicError"})
  ),
  "orgsRemovePublicMembershipForAuthenticatedUser": (org, username, options) => HttpClientRequest.del(`/orgs/${org}/public_members/${username}`).pipe(
    onRequest([])
  ),
  "reposListForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/repos`).pipe(
    HttpClientRequest.setUrlParams({ "type": options?.["type"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "reposCreateInOrg": (org, options) => HttpClientRequest.post(`/orgs/${org}/repos`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","422":"ValidationError"})
  ),
  "reposGetOrgRulesets": (org, options) => HttpClientRequest.get(`/orgs/${org}/rulesets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "targets": options?.["targets"] as any }),
    onRequest(["2xx"], {"404":"BasicError","500":"BasicError"})
  ),
  "reposCreateOrgRuleset": (org, options) => HttpClientRequest.post(`/orgs/${org}/rulesets`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","500":"BasicError"})
  ),
  "reposGetOrgRuleSuites": (org, options) => HttpClientRequest.get(`/orgs/${org}/rulesets/rule-suites`).pipe(
    HttpClientRequest.setUrlParams({ "ref": options?.["ref"] as any, "repository_name": options?.["repository_name"] as any, "time_period": options?.["time_period"] as any, "actor_name": options?.["actor_name"] as any, "rule_suite_result": options?.["rule_suite_result"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError","500":"BasicError"})
  ),
  "reposGetOrgRuleSuite": (org, ruleSuiteId, options) => HttpClientRequest.get(`/orgs/${org}/rulesets/rule-suites/${ruleSuiteId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError","500":"BasicError"})
  ),
  "reposGetOrgRuleset": (org, rulesetId, options) => HttpClientRequest.get(`/orgs/${org}/rulesets/${rulesetId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError","500":"BasicError"})
  ),
  "reposUpdateOrgRuleset": (org, rulesetId, options) => HttpClientRequest.put(`/orgs/${org}/rulesets/${rulesetId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","500":"BasicError"})
  ),
  "reposDeleteOrgRuleset": (org, rulesetId, options) => HttpClientRequest.del(`/orgs/${org}/rulesets/${rulesetId}`).pipe(
    onRequest([], {"404":"BasicError","500":"BasicError"})
  ),
  "orgsGetOrgRulesetHistory": (org, rulesetId, options) => HttpClientRequest.get(`/orgs/${org}/rulesets/${rulesetId}/history`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError","500":"BasicError"})
  ),
  "orgsGetOrgRulesetVersion": (org, rulesetId, versionId, options) => HttpClientRequest.get(`/orgs/${org}/rulesets/${rulesetId}/history/${versionId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError","500":"BasicError"})
  ),
  "secretScanningListAlertsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/secret-scanning/alerts`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "secret_type": options?.["secret_type"] as any, "resolution": options?.["resolution"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "validity": options?.["validity"] as any, "is_publicly_leaked": options?.["is_publicly_leaked"] as any, "is_multi_repo": options?.["is_multi_repo"] as any, "hide_secret": options?.["hide_secret"] as any }),
    onRequest(["2xx"], {"404":"BasicError","503":"SecretScanningListAlertsForOrg503"})
  ),
  "secretScanningListOrgPatternConfigs": (org, options) => HttpClientRequest.get(`/orgs/${org}/secret-scanning/pattern-configurations`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "secretScanningUpdateOrgPatternConfigs": (org, options) => HttpClientRequest.patch(`/orgs/${org}/secret-scanning/pattern-configurations`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"400":"BasicError","403":"BasicError","404":"BasicError","409":"BasicError","422":"ValidationError"})
  ),
  "securityAdvisoriesListOrgRepositoryAdvisories": (org, options) => HttpClientRequest.get(`/orgs/${org}/security-advisories`).pipe(
    HttpClientRequest.setUrlParams({ "direction": options?.["direction"] as any, "sort": options?.["sort"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "per_page": options?.["per_page"] as any, "state": options?.["state"] as any }),
    onRequest(["2xx"], {"400":"BasicError","404":"BasicError"})
  ),
  "orgsListSecurityManagerTeams": (org, options) => HttpClientRequest.get(`/orgs/${org}/security-managers`).pipe(
    onRequest(["2xx"])
  ),
  "orgsAddSecurityManagerTeam": (org, teamSlug, options) => HttpClientRequest.put(`/orgs/${org}/security-managers/teams/${teamSlug}`).pipe(
    onRequest([])
  ),
  "orgsRemoveSecurityManagerTeam": (org, teamSlug, options) => HttpClientRequest.del(`/orgs/${org}/security-managers/teams/${teamSlug}`).pipe(
    onRequest([])
  ),
  "billingGetGithubActionsBillingOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/settings/billing/actions`).pipe(
    onRequest(["2xx"])
  ),
  "billingGetGithubPackagesBillingOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/settings/billing/packages`).pipe(
    onRequest(["2xx"])
  ),
  "billingGetSharedStorageBillingOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/settings/billing/shared-storage`).pipe(
    onRequest(["2xx"])
  ),
  "hostedComputeListNetworkConfigurationsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/settings/network-configurations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "hostedComputeCreateNetworkConfigurationForOrg": (org, options) => HttpClientRequest.post(`/orgs/${org}/settings/network-configurations`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "hostedComputeGetNetworkConfigurationForOrg": (org, networkConfigurationId, options) => HttpClientRequest.get(`/orgs/${org}/settings/network-configurations/${networkConfigurationId}`).pipe(
    onRequest(["2xx"])
  ),
  "hostedComputeDeleteNetworkConfigurationFromOrg": (org, networkConfigurationId, options) => HttpClientRequest.del(`/orgs/${org}/settings/network-configurations/${networkConfigurationId}`).pipe(
    onRequest([])
  ),
  "hostedComputeUpdateNetworkConfigurationForOrg": (org, networkConfigurationId, options) => HttpClientRequest.patch(`/orgs/${org}/settings/network-configurations/${networkConfigurationId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "hostedComputeGetNetworkSettingsForOrg": (org, networkSettingsId, options) => HttpClientRequest.get(`/orgs/${org}/settings/network-settings/${networkSettingsId}`).pipe(
    onRequest(["2xx"])
  ),
  "copilotCopilotMetricsForTeam": (org, teamSlug, options) => HttpClientRequest.get(`/orgs/${org}/team/${teamSlug}/copilot/metrics`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any, "until": options?.["until"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"BasicError","500":"BasicError"})
  ),
  "teamsList": (org, options) => HttpClientRequest.get(`/orgs/${org}/teams`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"403":"BasicError"})
  ),
  "teamsCreate": (org, options) => HttpClientRequest.post(`/orgs/${org}/teams`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","422":"ValidationError"})
  ),
  "teamsGetByName": (org, teamSlug, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "teamsDeleteInOrg": (org, teamSlug, options) => HttpClientRequest.del(`/orgs/${org}/teams/${teamSlug}`).pipe(
    onRequest([])
  ),
  "teamsUpdateInOrg": (org, teamSlug, options) => HttpClientRequest.patch(`/orgs/${org}/teams/${teamSlug}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["200", "201"], {"403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "teamsListDiscussionsInOrg": (org, teamSlug, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/discussions`).pipe(
    HttpClientRequest.setUrlParams({ "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "pinned": options?.["pinned"] as any }),
    onRequest(["2xx"])
  ),
  "teamsCreateDiscussionInOrg": (org, teamSlug, options) => HttpClientRequest.post(`/orgs/${org}/teams/${teamSlug}/discussions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "teamsGetDiscussionInOrg": (org, teamSlug, discussionNumber, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}`).pipe(
    onRequest(["2xx"])
  ),
  "teamsDeleteDiscussionInOrg": (org, teamSlug, discussionNumber, options) => HttpClientRequest.del(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}`).pipe(
    onRequest([])
  ),
  "teamsUpdateDiscussionInOrg": (org, teamSlug, discussionNumber, options) => HttpClientRequest.patch(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "teamsListDiscussionCommentsInOrg": (org, teamSlug, discussionNumber, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments`).pipe(
    HttpClientRequest.setUrlParams({ "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "teamsCreateDiscussionCommentInOrg": (org, teamSlug, discussionNumber, options) => HttpClientRequest.post(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "teamsGetDiscussionCommentInOrg": (org, teamSlug, discussionNumber, commentNumber, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}`).pipe(
    onRequest(["2xx"])
  ),
  "teamsDeleteDiscussionCommentInOrg": (org, teamSlug, discussionNumber, commentNumber, options) => HttpClientRequest.del(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}`).pipe(
    onRequest([])
  ),
  "teamsUpdateDiscussionCommentInOrg": (org, teamSlug, discussionNumber, commentNumber, options) => HttpClientRequest.patch(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "reactionsListForTeamDiscussionCommentInOrg": (org, teamSlug, discussionNumber, commentNumber, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}/reactions`).pipe(
    HttpClientRequest.setUrlParams({ "content": options?.["content"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "reactionsCreateForTeamDiscussionCommentInOrg": (org, teamSlug, discussionNumber, commentNumber, options) => HttpClientRequest.post(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}/reactions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["200", "201"])
  ),
  "reactionsDeleteForTeamDiscussionComment": (org, teamSlug, discussionNumber, commentNumber, reactionId, options) => HttpClientRequest.del(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}/reactions/${reactionId}`).pipe(
    onRequest([])
  ),
  "reactionsListForTeamDiscussionInOrg": (org, teamSlug, discussionNumber, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/reactions`).pipe(
    HttpClientRequest.setUrlParams({ "content": options?.["content"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "reactionsCreateForTeamDiscussionInOrg": (org, teamSlug, discussionNumber, options) => HttpClientRequest.post(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/reactions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["200", "201"])
  ),
  "reactionsDeleteForTeamDiscussion": (org, teamSlug, discussionNumber, reactionId, options) => HttpClientRequest.del(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/reactions/${reactionId}`).pipe(
    onRequest([])
  ),
  "teamsListPendingInvitationsInOrg": (org, teamSlug, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/invitations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "teamsListMembersInOrg": (org, teamSlug, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/members`).pipe(
    HttpClientRequest.setUrlParams({ "role": options?.["role"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "teamsGetMembershipForUserInOrg": (org, teamSlug, username, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/memberships/${username}`).pipe(
    onRequest(["2xx"])
  ),
  "teamsAddOrUpdateMembershipForUserInOrg": (org, teamSlug, username, options) => HttpClientRequest.put(`/orgs/${org}/teams/${teamSlug}/memberships/${username}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "teamsRemoveMembershipForUserInOrg": (org, teamSlug, username, options) => HttpClientRequest.del(`/orgs/${org}/teams/${teamSlug}/memberships/${username}`).pipe(
    onRequest([])
  ),
  "teamsListProjectsInOrg": (org, teamSlug, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "teamsCheckPermissionsForProjectInOrg": (org, teamSlug, projectId, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/projects/${projectId}`).pipe(
    onRequest(["2xx"])
  ),
  "teamsAddOrUpdateProjectPermissionsInOrg": (org, teamSlug, projectId, options) => HttpClientRequest.put(`/orgs/${org}/teams/${teamSlug}/projects/${projectId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"403":"TeamsAddOrUpdateProjectPermissionsInOrg403"})
  ),
  "teamsRemoveProjectInOrg": (org, teamSlug, projectId, options) => HttpClientRequest.del(`/orgs/${org}/teams/${teamSlug}/projects/${projectId}`).pipe(
    onRequest([])
  ),
  "teamsListReposInOrg": (org, teamSlug, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/repos`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "teamsCheckPermissionsForRepoInOrg": (org, teamSlug, owner, repo, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/repos/${owner}/${repo}`).pipe(
    onRequest(["2xx"])
  ),
  "teamsAddOrUpdateRepoPermissionsInOrg": (org, teamSlug, owner, repo, options) => HttpClientRequest.put(`/orgs/${org}/teams/${teamSlug}/repos/${owner}/${repo}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "teamsRemoveRepoInOrg": (org, teamSlug, owner, repo, options) => HttpClientRequest.del(`/orgs/${org}/teams/${teamSlug}/repos/${owner}/${repo}`).pipe(
    onRequest([])
  ),
  "teamsListChildInOrg": (org, teamSlug, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/teams`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "orgsEnableOrDisableSecurityProductOnAllOrgRepos": (org, securityProduct, enablement, options) => HttpClientRequest.post(`/orgs/${org}/${securityProduct}/${enablement}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "projectsClassicGetCard": (cardId, options) => HttpClientRequest.get(`/projects/columns/cards/${cardId}`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "projectsClassicDeleteCard": (cardId, options) => HttpClientRequest.del(`/projects/columns/cards/${cardId}`).pipe(
    onRequest([], {"401":"BasicError","403":"ProjectsClassicDeleteCard403","404":"BasicError"})
  ),
  "projectsClassicUpdateCard": (cardId, options) => HttpClientRequest.patch(`/projects/columns/cards/${cardId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "projectsClassicMoveCard": (cardId, options) => HttpClientRequest.post(`/projects/columns/cards/${cardId}/moves`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"401":"BasicError","403":"ProjectsClassicMoveCard403","422":"ValidationError","503":"ProjectsClassicMoveCard503"})
  ),
  "projectsClassicGetColumn": (columnId, options) => HttpClientRequest.get(`/projects/columns/${columnId}`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "projectsClassicDeleteColumn": (columnId, options) => HttpClientRequest.del(`/projects/columns/${columnId}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError"})
  ),
  "projectsClassicUpdateColumn": (columnId, options) => HttpClientRequest.patch(`/projects/columns/${columnId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "projectsClassicListCards": (columnId, options) => HttpClientRequest.get(`/projects/columns/${columnId}/cards`).pipe(
    HttpClientRequest.setUrlParams({ "archived_state": options?.["archived_state"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "projectsClassicCreateCard": (columnId, options) => HttpClientRequest.post(`/projects/columns/${columnId}/cards`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","422":"ProjectsClassicCreateCard422","503":"ProjectsClassicCreateCard503"})
  ),
  "projectsClassicMoveColumn": (columnId, options) => HttpClientRequest.post(`/projects/columns/${columnId}/moves`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","422":"ValidationErrorSimple"})
  ),
  "projectsClassicGet": (projectId, options) => HttpClientRequest.get(`/projects/${projectId}`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "projectsClassicDelete": (projectId, options) => HttpClientRequest.del(`/projects/${projectId}`).pipe(
    onRequest([], {"401":"BasicError","403":"ProjectsClassicDelete403","404":"BasicError","410":"BasicError"})
  ),
  "projectsClassicUpdate": (projectId, options) => HttpClientRequest.patch(`/projects/${projectId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"401":"BasicError","403":"ProjectsClassicUpdate403","410":"BasicError","422":"ValidationErrorSimple"})
  ),
  "projectsClassicListCollaborators": (projectId, options) => HttpClientRequest.get(`/projects/${projectId}/collaborators`).pipe(
    HttpClientRequest.setUrlParams({ "affiliation": options?.["affiliation"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "projectsClassicAddCollaborator": (projectId, username, options) => HttpClientRequest.put(`/projects/${projectId}/collaborators/${username}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "projectsClassicRemoveCollaborator": (projectId, username, options) => HttpClientRequest.del(`/projects/${projectId}/collaborators/${username}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "projectsClassicGetPermissionForUser": (projectId, username, options) => HttpClientRequest.get(`/projects/${projectId}/collaborators/${username}/permission`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "projectsClassicListColumns": (projectId, options) => HttpClientRequest.get(`/projects/${projectId}/columns`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "projectsClassicCreateColumn": (projectId, options) => HttpClientRequest.post(`/projects/${projectId}/columns`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","422":"ValidationErrorSimple"})
  ),
  "rateLimitGet": () => HttpClientRequest.get(`/rate_limit`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposGet": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}`).pipe(
    onRequest(["200", "301"], {"403":"BasicError","404":"BasicError"})
  ),
  "reposDelete": (owner, repo, options) => HttpClientRequest.del(`/repos/${owner}/${repo}`).pipe(
    onRequest(["307"], {"403":"ReposDelete403","404":"BasicError","409":"BasicError"})
  ),
  "reposUpdate": (owner, repo, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["200", "307"], {"403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "actionsListArtifactsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/artifacts`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "name": options?.["name"] as any }),
    onRequest(["2xx"])
  ),
  "actionsGetArtifact": (owner, repo, artifactId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/artifacts/${artifactId}`).pipe(
    onRequest(["2xx"])
  ),
  "actionsDeleteArtifact": (owner, repo, artifactId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/artifacts/${artifactId}`).pipe(
    onRequest([])
  ),
  "actionsDownloadArtifact": (owner, repo, artifactId, archiveFormat, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/artifacts/${artifactId}/${archiveFormat}`).pipe(
    onRequest([], {"410":"BasicError"})
  ),
  "actionsGetActionsCacheUsage": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/cache/usage`).pipe(
    onRequest(["2xx"])
  ),
  "actionsGetActionsCacheList": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/caches`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "ref": options?.["ref"] as any, "key": options?.["key"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any }),
    onRequest(["2xx"])
  ),
  "actionsDeleteActionsCacheByKey": (owner, repo, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/caches`).pipe(
    HttpClientRequest.setUrlParams({ "key": options?.["key"] as any, "ref": options?.["ref"] as any }),
    onRequest(["2xx"])
  ),
  "actionsDeleteActionsCacheById": (owner, repo, cacheId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/caches/${cacheId}`).pipe(
    onRequest([])
  ),
  "actionsGetJobForWorkflowRun": (owner, repo, jobId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/jobs/${jobId}`).pipe(
    onRequest(["2xx"])
  ),
  "actionsDownloadJobLogsForWorkflowRun": (owner, repo, jobId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/jobs/${jobId}/logs`).pipe(
    onRequest([])
  ),
  "actionsReRunJobForWorkflowRun": (owner, repo, jobId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/jobs/${jobId}/rerun`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError"})
  ),
  "actionsGetCustomOidcSubClaimForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/oidc/customization/sub`).pipe(
    onRequest(["2xx"], {"400":"BasicError","404":"BasicError"})
  ),
  "actionsSetCustomOidcSubClaimForRepo": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/oidc/customization/sub`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"400":"BasicError","404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "actionsListRepoOrganizationSecrets": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/organization-secrets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsListRepoOrganizationVariables": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/organization-variables`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsGetGithubActionsPermissionsRepository": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/permissions`).pipe(
    onRequest(["2xx"])
  ),
  "actionsSetGithubActionsPermissionsRepository": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/permissions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "actionsGetWorkflowAccessToRepository": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/permissions/access`).pipe(
    onRequest(["2xx"])
  ),
  "actionsSetWorkflowAccessToRepository": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/permissions/access`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "actionsGetArtifactAndLogRetentionSettingsRepository": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/permissions/artifact-and-log-retention`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "actionsSetArtifactAndLogRetentionSettingsRepository": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/permissions/artifact-and-log-retention`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"404":"BasicError","422":"ValidationError"})
  ),
  "actionsGetForkPrContributorApprovalPermissionsRepository": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/permissions/fork-pr-contributor-approval`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "actionsSetForkPrContributorApprovalPermissionsRepository": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/permissions/fork-pr-contributor-approval`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"404":"BasicError","422":"ValidationError"})
  ),
  "actionsGetPrivateRepoForkPrWorkflowsSettingsRepository": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/permissions/fork-pr-workflows-private-repos`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "actionsSetPrivateRepoForkPrWorkflowsSettingsRepository": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/permissions/fork-pr-workflows-private-repos`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"404":"BasicError","422":"ValidationError"})
  ),
  "actionsGetAllowedActionsRepository": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/permissions/selected-actions`).pipe(
    onRequest(["2xx"])
  ),
  "actionsSetAllowedActionsRepository": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/permissions/selected-actions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "actionsGetGithubActionsDefaultWorkflowPermissionsRepository": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/permissions/workflow`).pipe(
    onRequest(["2xx"])
  ),
  "actionsSetGithubActionsDefaultWorkflowPermissionsRepository": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/permissions/workflow`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "actionsListSelfHostedRunnersForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runners`).pipe(
    HttpClientRequest.setUrlParams({ "name": options?.["name"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsListRunnerApplicationsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runners/downloads`).pipe(
    onRequest(["2xx"])
  ),
  "actionsGenerateRunnerJitconfigForRepo": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runners/generate-jitconfig`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","409":"BasicError","422":"ValidationErrorSimple"})
  ),
  "actionsCreateRegistrationTokenForRepo": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runners/registration-token`).pipe(
    onRequest(["2xx"])
  ),
  "actionsCreateRemoveTokenForRepo": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runners/remove-token`).pipe(
    onRequest(["2xx"])
  ),
  "actionsGetSelfHostedRunnerForRepo": (owner, repo, runnerId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runners/${runnerId}`).pipe(
    onRequest(["2xx"])
  ),
  "actionsDeleteSelfHostedRunnerFromRepo": (owner, repo, runnerId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/runners/${runnerId}`).pipe(
    onRequest([], {"422":"ValidationErrorSimple"})
  ),
  "actionsListLabelsForSelfHostedRunnerForRepo": (owner, repo, runnerId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runners/${runnerId}/labels`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "actionsSetCustomLabelsForSelfHostedRunnerForRepo": (owner, repo, runnerId, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/runners/${runnerId}/labels`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "actionsAddCustomLabelsToSelfHostedRunnerForRepo": (owner, repo, runnerId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runners/${runnerId}/labels`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo": (owner, repo, runnerId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/runners/${runnerId}/labels`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "actionsRemoveCustomLabelFromSelfHostedRunnerForRepo": (owner, repo, runnerId, name, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/runners/${runnerId}/labels/${name}`).pipe(
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "actionsListWorkflowRunsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs`).pipe(
    HttpClientRequest.setUrlParams({ "actor": options?.["actor"] as any, "branch": options?.["branch"] as any, "event": options?.["event"] as any, "status": options?.["status"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "created": options?.["created"] as any, "exclude_pull_requests": options?.["exclude_pull_requests"] as any, "check_suite_id": options?.["check_suite_id"] as any, "head_sha": options?.["head_sha"] as any }),
    onRequest(["2xx"])
  ),
  "actionsGetWorkflowRun": (owner, repo, runId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}`).pipe(
    HttpClientRequest.setUrlParams({ "exclude_pull_requests": options?.["exclude_pull_requests"] as any }),
    onRequest(["2xx"])
  ),
  "actionsDeleteWorkflowRun": (owner, repo, runId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/runs/${runId}`).pipe(
    onRequest([])
  ),
  "actionsGetReviewsForRun": (owner, repo, runId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}/approvals`).pipe(
    onRequest(["2xx"])
  ),
  "actionsApproveWorkflowRun": (owner, repo, runId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runs/${runId}/approve`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "actionsListWorkflowRunArtifacts": (owner, repo, runId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}/artifacts`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "name": options?.["name"] as any }),
    onRequest(["2xx"])
  ),
  "actionsGetWorkflowRunAttempt": (owner, repo, runId, attemptNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}/attempts/${attemptNumber}`).pipe(
    HttpClientRequest.setUrlParams({ "exclude_pull_requests": options?.["exclude_pull_requests"] as any }),
    onRequest(["2xx"])
  ),
  "actionsListJobsForWorkflowRunAttempt": (owner, repo, runId, attemptNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}/attempts/${attemptNumber}/jobs`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "actionsDownloadWorkflowRunAttemptLogs": (owner, repo, runId, attemptNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}/attempts/${attemptNumber}/logs`).pipe(
    onRequest([])
  ),
  "actionsCancelWorkflowRun": (owner, repo, runId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runs/${runId}/cancel`).pipe(
    onRequest(["2xx"], {"409":"BasicError"})
  ),
  "actionsReviewCustomGatesForRun": (owner, repo, runId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runs/${runId}/deployment_protection_rule`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "actionsForceCancelWorkflowRun": (owner, repo, runId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runs/${runId}/force-cancel`).pipe(
    onRequest(["2xx"], {"409":"BasicError"})
  ),
  "actionsListJobsForWorkflowRun": (owner, repo, runId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}/jobs`).pipe(
    HttpClientRequest.setUrlParams({ "filter": options?.["filter"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsDownloadWorkflowRunLogs": (owner, repo, runId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}/logs`).pipe(
    onRequest([])
  ),
  "actionsDeleteWorkflowRunLogs": (owner, repo, runId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/runs/${runId}/logs`).pipe(
    onRequest([], {"403":"BasicError","500":"BasicError"})
  ),
  "actionsGetPendingDeploymentsForRun": (owner, repo, runId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}/pending_deployments`).pipe(
    onRequest(["2xx"])
  ),
  "actionsReviewPendingDeploymentsForRun": (owner, repo, runId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runs/${runId}/pending_deployments`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "actionsReRunWorkflow": (owner, repo, runId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runs/${runId}/rerun`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "actionsReRunWorkflowFailedJobs": (owner, repo, runId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runs/${runId}/rerun-failed-jobs`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "actionsGetWorkflowRunUsage": (owner, repo, runId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}/timing`).pipe(
    onRequest(["2xx"])
  ),
  "actionsListRepoSecrets": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/secrets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsGetRepoPublicKey": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/secrets/public-key`).pipe(
    onRequest(["2xx"])
  ),
  "actionsGetRepoSecret": (owner, repo, secretName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/secrets/${secretName}`).pipe(
    onRequest(["2xx"])
  ),
  "actionsCreateOrUpdateRepoSecret": (owner, repo, secretName, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/secrets/${secretName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "actionsDeleteRepoSecret": (owner, repo, secretName, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/secrets/${secretName}`).pipe(
    onRequest([])
  ),
  "actionsListRepoVariables": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/variables`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsCreateRepoVariable": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/variables`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "actionsGetRepoVariable": (owner, repo, name, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/variables/${name}`).pipe(
    onRequest(["2xx"])
  ),
  "actionsDeleteRepoVariable": (owner, repo, name, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/variables/${name}`).pipe(
    onRequest([])
  ),
  "actionsUpdateRepoVariable": (owner, repo, name, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/actions/variables/${name}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "actionsListRepoWorkflows": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/workflows`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsGetWorkflow": (owner, repo, workflowId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/workflows/${workflowId}`).pipe(
    onRequest(["2xx"])
  ),
  "actionsDisableWorkflow": (owner, repo, workflowId, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/workflows/${workflowId}/disable`).pipe(
    onRequest([])
  ),
  "actionsCreateWorkflowDispatch": (owner, repo, workflowId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/workflows/${workflowId}/dispatches`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "actionsEnableWorkflow": (owner, repo, workflowId, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/workflows/${workflowId}/enable`).pipe(
    onRequest([])
  ),
  "actionsListWorkflowRuns": (owner, repo, workflowId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/workflows/${workflowId}/runs`).pipe(
    HttpClientRequest.setUrlParams({ "actor": options?.["actor"] as any, "branch": options?.["branch"] as any, "event": options?.["event"] as any, "status": options?.["status"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "created": options?.["created"] as any, "exclude_pull_requests": options?.["exclude_pull_requests"] as any, "check_suite_id": options?.["check_suite_id"] as any, "head_sha": options?.["head_sha"] as any }),
    onRequest(["2xx"])
  ),
  "actionsGetWorkflowUsage": (owner, repo, workflowId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/workflows/${workflowId}/timing`).pipe(
    onRequest(["2xx"])
  ),
  "reposListActivities": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/activity`).pipe(
    HttpClientRequest.setUrlParams({ "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "ref": options?.["ref"] as any, "actor": options?.["actor"] as any, "time_period": options?.["time_period"] as any, "activity_type": options?.["activity_type"] as any }),
    onRequest(["2xx"], {"422":"ValidationErrorSimple"})
  ),
  "issuesListAssignees": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/assignees`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "issuesCheckUserCanBeAssigned": (owner, repo, assignee, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/assignees/${assignee}`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "reposCreateAttestation": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/attestations`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","422":"ValidationError"})
  ),
  "reposListAttestations": (owner, repo, subjectDigest, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/attestations/${subjectDigest}`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "predicate_type": options?.["predicate_type"] as any }),
    onRequest(["2xx"])
  ),
  "reposListAutolinks": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/autolinks`).pipe(
    onRequest(["2xx"])
  ),
  "reposCreateAutolink": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/autolinks`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "reposGetAutolink": (owner, repo, autolinkId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/autolinks/${autolinkId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposDeleteAutolink": (owner, repo, autolinkId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/autolinks/${autolinkId}`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "reposCheckAutomatedSecurityFixes": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/automated-security-fixes`).pipe(
    onRequest(["2xx"])
  ),
  "reposEnableAutomatedSecurityFixes": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/automated-security-fixes`).pipe(
    onRequest([])
  ),
  "reposDisableAutomatedSecurityFixes": (owner, repo, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/automated-security-fixes`).pipe(
    onRequest([])
  ),
  "reposListBranches": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches`).pipe(
    HttpClientRequest.setUrlParams({ "protected": options?.["protected"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposGetBranch": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}`).pipe(
    onRequest(["200", "301"], {"404":"BasicError"})
  ),
  "reposGetBranchProtection": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposUpdateBranchProtection": (owner, repo, branch, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/branches/${branch}/protection`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "reposDeleteBranchProtection": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection`).pipe(
    onRequest([], {"403":"BasicError"})
  ),
  "reposGetAdminBranchProtection": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection/enforce_admins`).pipe(
    onRequest(["2xx"])
  ),
  "reposSetAdminBranchProtection": (owner, repo, branch, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/branches/${branch}/protection/enforce_admins`).pipe(
    onRequest(["2xx"])
  ),
  "reposDeleteAdminBranchProtection": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection/enforce_admins`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "reposGetPullRequestReviewProtection": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection/required_pull_request_reviews`).pipe(
    onRequest(["2xx"])
  ),
  "reposDeletePullRequestReviewProtection": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection/required_pull_request_reviews`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "reposUpdatePullRequestReviewProtection": (owner, repo, branch, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/branches/${branch}/protection/required_pull_request_reviews`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "reposGetCommitSignatureProtection": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection/required_signatures`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposCreateCommitSignatureProtection": (owner, repo, branch, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/branches/${branch}/protection/required_signatures`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposDeleteCommitSignatureProtection": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection/required_signatures`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "reposGetStatusChecksProtection": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposRemoveStatusCheckProtection": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks`).pipe(
    onRequest([])
  ),
  "reposUpdateStatusCheckProtection": (owner, repo, branch, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "reposGetAllStatusCheckContexts": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposSetStatusCheckContexts": (owner, repo, branch, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "reposAddStatusCheckContexts": (owner, repo, branch, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "reposRemoveStatusCheckContexts": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "reposGetAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposDeleteAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions`).pipe(
    onRequest([])
  ),
  "reposGetAppsWithAccessToProtectedBranch": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposSetAppAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "reposAddAppAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "reposRemoveAppAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "reposGetTeamsWithAccessToProtectedBranch": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposSetTeamAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "reposAddTeamAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "reposRemoveTeamAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "reposGetUsersWithAccessToProtectedBranch": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposSetUserAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "reposAddUserAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "reposRemoveUserAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "reposRenameBranch": (owner, repo, branch, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/branches/${branch}/rename`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "checksCreate": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/check-runs`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "checksGet": (owner, repo, checkRunId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/check-runs/${checkRunId}`).pipe(
    onRequest(["2xx"])
  ),
  "checksUpdate": (owner, repo, checkRunId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/check-runs/${checkRunId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "checksListAnnotations": (owner, repo, checkRunId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/check-runs/${checkRunId}/annotations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "checksRerequestRun": (owner, repo, checkRunId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/check-runs/${checkRunId}/rerequest`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"BasicError"})
  ),
  "checksCreateSuite": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/check-suites`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["200", "201"])
  ),
  "checksSetSuitesPreferences": (owner, repo, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/check-suites/preferences`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "checksGetSuite": (owner, repo, checkSuiteId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/check-suites/${checkSuiteId}`).pipe(
    onRequest(["2xx"])
  ),
  "checksListForSuite": (owner, repo, checkSuiteId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/check-suites/${checkSuiteId}/check-runs`).pipe(
    HttpClientRequest.setUrlParams({ "check_name": options?.["check_name"] as any, "status": options?.["status"] as any, "filter": options?.["filter"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "checksRerequestSuite": (owner, repo, checkSuiteId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/check-suites/${checkSuiteId}/rerequest`).pipe(
    onRequest(["2xx"])
  ),
  "codeScanningListAlertsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/alerts`).pipe(
    HttpClientRequest.setUrlParams({ "tool_name": options?.["tool_name"] as any, "tool_guid": options?.["tool_guid"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "ref": options?.["ref"] as any, "pr": options?.["pr"] as any, "direction": options?.["direction"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "sort": options?.["sort"] as any, "state": options?.["state"] as any, "severity": options?.["severity"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","503":"CodeScanningListAlertsForRepo503"})
  ),
  "codeScanningGetAlert": (owner, repo, alertNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","503":"CodeScanningGetAlert503"})
  ),
  "codeScanningUpdateAlert": (owner, repo, alertNumber, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"400":"BasicError","403":"BasicError","404":"BasicError","503":"CodeScanningUpdateAlert503"})
  ),
  "codeScanningGetAutofix": (owner, repo, alertNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/autofix`).pipe(
    onRequest(["2xx"], {"400":"BasicError","403":"BasicError","404":"BasicError","503":"CodeScanningGetAutofix503"})
  ),
  "codeScanningCreateAutofix": (owner, repo, alertNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/autofix`).pipe(
    onRequest(["200", "202"], {"400":"BasicError","403":"BasicError","404":"BasicError","503":"CodeScanningCreateAutofix503"})
  ),
  "codeScanningCommitAutofix": (owner, repo, alertNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/autofix/commits`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"400":"BasicError","403":"BasicError","404":"BasicError","503":"CodeScanningCommitAutofix503"})
  ),
  "codeScanningListAlertInstances": (owner, repo, alertNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/instances`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "ref": options?.["ref"] as any, "pr": options?.["pr"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","503":"CodeScanningListAlertInstances503"})
  ),
  "codeScanningListRecentAnalyses": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/analyses`).pipe(
    HttpClientRequest.setUrlParams({ "tool_name": options?.["tool_name"] as any, "tool_guid": options?.["tool_guid"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "pr": options?.["pr"] as any, "ref": options?.["ref"] as any, "sarif_id": options?.["sarif_id"] as any, "direction": options?.["direction"] as any, "sort": options?.["sort"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","503":"CodeScanningListRecentAnalyses503"})
  ),
  "codeScanningGetAnalysis": (owner, repo, analysisId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/analyses/${analysisId}`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"BasicError","503":"CodeScanningGetAnalysis503"})
  ),
  "codeScanningDeleteAnalysis": (owner, repo, analysisId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/code-scanning/analyses/${analysisId}`).pipe(
    HttpClientRequest.setUrlParams({ "confirm_delete": options?.["confirm_delete"] as any }),
    onRequest(["2xx"], {"400":"BasicError","403":"BasicError","404":"BasicError","503":"CodeScanningDeleteAnalysis503"})
  ),
  "codeScanningListCodeqlDatabases": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/codeql/databases`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","503":"CodeScanningListCodeqlDatabases503"})
  ),
  "codeScanningGetCodeqlDatabase": (owner, repo, language, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/codeql/databases/${language}`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","503":"CodeScanningGetCodeqlDatabase503"})
  ),
  "codeScanningDeleteCodeqlDatabase": (owner, repo, language, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/code-scanning/codeql/databases/${language}`).pipe(
    onRequest([], {"403":"BasicError","404":"BasicError","503":"CodeScanningDeleteCodeqlDatabase503"})
  ),
  "codeScanningCreateVariantAnalysis": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/code-scanning/codeql/variant-analyses`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"BasicError","503":"CodeScanningCreateVariantAnalysis503"})
  ),
  "codeScanningGetVariantAnalysis": (owner, repo, codeqlVariantAnalysisId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/codeql/variant-analyses/${codeqlVariantAnalysisId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError","503":"CodeScanningGetVariantAnalysis503"})
  ),
  "codeScanningGetVariantAnalysisRepoTask": (owner, repo, codeqlVariantAnalysisId, repoOwner, repoName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/codeql/variant-analyses/${codeqlVariantAnalysisId}/repos/${repoOwner}/${repoName}`).pipe(
    onRequest(["2xx"], {"404":"BasicError","503":"CodeScanningGetVariantAnalysisRepoTask503"})
  ),
  "codeScanningGetDefaultSetup": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/default-setup`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","503":"CodeScanningGetDefaultSetup503"})
  ),
  "codeScanningUpdateDefaultSetup": (owner, repo, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/code-scanning/default-setup`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["200", "202"], {"403":"BasicError","404":"BasicError","409":"BasicError","422":"BasicError","503":"CodeScanningUpdateDefaultSetup503"})
  ),
  "codeScanningUploadSarif": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/code-scanning/sarifs`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","503":"CodeScanningUploadSarif503"})
  ),
  "codeScanningGetSarif": (owner, repo, sarifId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/sarifs/${sarifId}`).pipe(
    onRequest(["2xx"], {"403":"BasicError","503":"CodeScanningGetSarif503"})
  ),
  "codeSecurityGetConfigurationForRepository": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-security-configuration`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "reposCodeownersErrors": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/codeowners/errors`).pipe(
    HttpClientRequest.setUrlParams({ "ref": options?.["ref"] as any }),
    onRequest(["2xx"])
  ),
  "codespacesListInRepositoryForAuthenticatedUser": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/codespaces`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "codespacesCreateWithRepoForAuthenticatedUser": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/codespaces`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["201", "202"], {"400":"BasicError","401":"BasicError","403":"BasicError","404":"BasicError","503":"CodespacesCreateWithRepoForAuthenticatedUser503"})
  ),
  "codespacesListDevcontainersInRepositoryForAuthenticatedUser": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/codespaces/devcontainers`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"400":"BasicError","401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "codespacesRepoMachinesForAuthenticatedUser": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/codespaces/machines`).pipe(
    HttpClientRequest.setUrlParams({ "location": options?.["location"] as any, "client_ip": options?.["client_ip"] as any, "ref": options?.["ref"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "codespacesPreFlightWithRepoForAuthenticatedUser": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/codespaces/new`).pipe(
    HttpClientRequest.setUrlParams({ "ref": options?.["ref"] as any, "client_ip": options?.["client_ip"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "codespacesCheckPermissionsForDevcontainer": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/codespaces/permissions_check`).pipe(
    HttpClientRequest.setUrlParams({ "ref": options?.["ref"] as any, "devcontainer_path": options?.["devcontainer_path"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError","503":"CodespacesCheckPermissionsForDevcontainer503"})
  ),
  "codespacesListRepoSecrets": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/codespaces/secrets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "codespacesGetRepoPublicKey": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/codespaces/secrets/public-key`).pipe(
    onRequest(["2xx"])
  ),
  "codespacesGetRepoSecret": (owner, repo, secretName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/codespaces/secrets/${secretName}`).pipe(
    onRequest(["2xx"])
  ),
  "codespacesCreateOrUpdateRepoSecret": (owner, repo, secretName, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/codespaces/secrets/${secretName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "codespacesDeleteRepoSecret": (owner, repo, secretName, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/codespaces/secrets/${secretName}`).pipe(
    onRequest([])
  ),
  "reposListCollaborators": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/collaborators`).pipe(
    HttpClientRequest.setUrlParams({ "affiliation": options?.["affiliation"] as any, "permission": options?.["permission"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposCheckCollaborator": (owner, repo, username, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/collaborators/${username}`).pipe(
    onRequest([])
  ),
  "reposAddCollaborator": (owner, repo, username, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/collaborators/${username}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","422":"ValidationError"})
  ),
  "reposRemoveCollaborator": (owner, repo, username, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/collaborators/${username}`).pipe(
    onRequest([], {"403":"BasicError","422":"ValidationError"})
  ),
  "reposGetCollaboratorPermissionLevel": (owner, repo, username, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/collaborators/${username}/permission`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposListCommitCommentsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/comments`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "reposGetCommitComment": (owner, repo, commentId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/comments/${commentId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposDeleteCommitComment": (owner, repo, commentId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/comments/${commentId}`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "reposUpdateCommitComment": (owner, repo, commentId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/comments/${commentId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reactionsListForCommitComment": (owner, repo, commentId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/comments/${commentId}/reactions`).pipe(
    HttpClientRequest.setUrlParams({ "content": options?.["content"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reactionsCreateForCommitComment": (owner, repo, commentId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/comments/${commentId}/reactions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["200", "201"], {"422":"ValidationError"})
  ),
  "reactionsDeleteForCommitComment": (owner, repo, commentId, reactionId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/comments/${commentId}/reactions/${reactionId}`).pipe(
    onRequest([])
  ),
  "reposListCommits": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/commits`).pipe(
    HttpClientRequest.setUrlParams({ "sha": options?.["sha"] as any, "path": options?.["path"] as any, "author": options?.["author"] as any, "committer": options?.["committer"] as any, "since": options?.["since"] as any, "until": options?.["until"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"400":"BasicError","404":"BasicError","409":"BasicError","500":"BasicError"})
  ),
  "reposListBranchesForHeadCommit": (owner, repo, commitSha, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/commits/${commitSha}/branches-where-head`).pipe(
    onRequest(["2xx"], {"409":"BasicError","422":"ValidationError"})
  ),
  "reposListCommentsForCommit": (owner, repo, commitSha, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/commits/${commitSha}/comments`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "reposCreateCommitComment": (owner, repo, commitSha, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/commits/${commitSha}/comments`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","422":"ValidationError"})
  ),
  "reposListPullRequestsAssociatedWithCommit": (owner, repo, commitSha, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/commits/${commitSha}/pulls`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"409":"BasicError"})
  ),
  "reposGetCommit": (owner, repo, ref, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/commits/${ref}`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"], {"404":"BasicError","409":"BasicError","422":"ValidationError","500":"BasicError","503":"ReposGetCommit503"})
  ),
  "checksListForRef": (owner, repo, ref, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/commits/${ref}/check-runs`).pipe(
    HttpClientRequest.setUrlParams({ "check_name": options?.["check_name"] as any, "status": options?.["status"] as any, "filter": options?.["filter"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "app_id": options?.["app_id"] as any }),
    onRequest(["2xx"])
  ),
  "checksListSuitesForRef": (owner, repo, ref, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/commits/${ref}/check-suites`).pipe(
    HttpClientRequest.setUrlParams({ "app_id": options?.["app_id"] as any, "check_name": options?.["check_name"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "reposGetCombinedStatusForRef": (owner, repo, ref, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/commits/${ref}/status`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposListCommitStatusesForRef": (owner, repo, ref, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/commits/${ref}/statuses`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["200", "301"])
  ),
  "reposGetCommunityProfileMetrics": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/community/profile`).pipe(
    onRequest(["2xx"])
  ),
  "reposCompareCommits": (owner, repo, basehead, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/compare/${basehead}`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"], {"404":"BasicError","500":"BasicError","503":"ReposCompareCommits503"})
  ),
  "reposGetContent": (owner, repo, path, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/contents/${path}`).pipe(
    HttpClientRequest.setUrlParams({ "ref": options?.["ref"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "reposCreateOrUpdateFileContents": (owner, repo, path, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/contents/${path}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["200", "201"], {"404":"BasicError","409":"ReposCreateOrUpdateFileContents409","422":"ValidationError"})
  ),
  "reposDeleteFile": (owner, repo, path, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/contents/${path}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","409":"BasicError","422":"ValidationError","503":"ReposDeleteFile503"})
  ),
  "reposListContributors": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/contributors`).pipe(
    HttpClientRequest.setUrlParams({ "anon": options?.["anon"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "dependabotListAlertsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/dependabot/alerts`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "severity": options?.["severity"] as any, "ecosystem": options?.["ecosystem"] as any, "package": options?.["package"] as any, "manifest": options?.["manifest"] as any, "epss_percentage": options?.["epss_percentage"] as any, "has": options?.["has"] as any, "scope": options?.["scope"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "first": options?.["first"] as any, "last": options?.["last"] as any }),
    onRequest(["2xx"], {"400":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "dependabotGetAlert": (owner, repo, alertNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/dependabot/alerts/${alertNumber}`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "dependabotUpdateAlert": (owner, repo, alertNumber, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/dependabot/alerts/${alertNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"400":"BasicError","403":"BasicError","404":"BasicError","409":"BasicError","422":"ValidationErrorSimple"})
  ),
  "dependabotListRepoSecrets": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/dependabot/secrets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "dependabotGetRepoPublicKey": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/dependabot/secrets/public-key`).pipe(
    onRequest(["2xx"])
  ),
  "dependabotGetRepoSecret": (owner, repo, secretName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/dependabot/secrets/${secretName}`).pipe(
    onRequest(["2xx"])
  ),
  "dependabotCreateOrUpdateRepoSecret": (owner, repo, secretName, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/dependabot/secrets/${secretName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "dependabotDeleteRepoSecret": (owner, repo, secretName, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/dependabot/secrets/${secretName}`).pipe(
    onRequest([])
  ),
  "dependencyGraphDiffRange": (owner, repo, basehead, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/dependency-graph/compare/${basehead}`).pipe(
    HttpClientRequest.setUrlParams({ "name": options?.["name"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "dependencyGraphExportSbom": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/dependency-graph/sbom`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "dependencyGraphCreateRepositorySnapshot": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/dependency-graph/snapshots`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "reposListDeployments": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/deployments`).pipe(
    HttpClientRequest.setUrlParams({ "sha": options?.["sha"] as any, "ref": options?.["ref"] as any, "task": options?.["task"] as any, "environment": options?.["environment"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "reposCreateDeployment": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/deployments`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["201", "202"], {"422":"ValidationError"})
  ),
  "reposGetDeployment": (owner, repo, deploymentId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/deployments/${deploymentId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposDeleteDeployment": (owner, repo, deploymentId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/deployments/${deploymentId}`).pipe(
    onRequest([], {"404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "reposListDeploymentStatuses": (owner, repo, deploymentId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/deployments/${deploymentId}/statuses`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposCreateDeploymentStatus": (owner, repo, deploymentId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/deployments/${deploymentId}/statuses`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "reposGetDeploymentStatus": (owner, repo, deploymentId, statusId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/deployments/${deploymentId}/statuses/${statusId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposCreateDispatchEvent": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/dispatches`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"404":"BasicError","422":"ValidationError"})
  ),
  "reposGetAllEnvironments": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "reposGetEnvironment": (owner, repo, environmentName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}`).pipe(
    onRequest(["2xx"])
  ),
  "reposCreateOrUpdateEnvironment": (owner, repo, environmentName, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/environments/${environmentName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"BasicError"})
  ),
  "reposDeleteAnEnvironment": (owner, repo, environmentName, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/environments/${environmentName}`).pipe(
    onRequest([])
  ),
  "reposListDeploymentBranchPolicies": (owner, repo, environmentName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "reposCreateDeploymentBranchPolicy": (owner, repo, environmentName, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "reposGetDeploymentBranchPolicy": (owner, repo, environmentName, branchPolicyId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies/${branchPolicyId}`).pipe(
    onRequest(["2xx"])
  ),
  "reposUpdateDeploymentBranchPolicy": (owner, repo, environmentName, branchPolicyId, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies/${branchPolicyId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "reposDeleteDeploymentBranchPolicy": (owner, repo, environmentName, branchPolicyId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies/${branchPolicyId}`).pipe(
    onRequest([])
  ),
  "reposGetAllDeploymentProtectionRules": (owner, repo, environmentName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules`).pipe(
    onRequest(["2xx"])
  ),
  "reposCreateDeploymentProtectionRule": (owner, repo, environmentName, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "reposListCustomDeploymentRuleIntegrations": (owner, repo, environmentName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules/apps`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"])
  ),
  "reposGetCustomDeploymentProtectionRule": (owner, repo, environmentName, protectionRuleId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules/${protectionRuleId}`).pipe(
    onRequest(["2xx"])
  ),
  "reposDisableDeploymentProtectionRule": (owner, repo, environmentName, protectionRuleId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules/${protectionRuleId}`).pipe(
    onRequest([])
  ),
  "actionsListEnvironmentSecrets": (owner, repo, environmentName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/secrets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsGetEnvironmentPublicKey": (owner, repo, environmentName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/secrets/public-key`).pipe(
    onRequest(["2xx"])
  ),
  "actionsGetEnvironmentSecret": (owner, repo, environmentName, secretName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/secrets/${secretName}`).pipe(
    onRequest(["2xx"])
  ),
  "actionsCreateOrUpdateEnvironmentSecret": (owner, repo, environmentName, secretName, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/environments/${environmentName}/secrets/${secretName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "actionsDeleteEnvironmentSecret": (owner, repo, environmentName, secretName, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/environments/${environmentName}/secrets/${secretName}`).pipe(
    onRequest([])
  ),
  "actionsListEnvironmentVariables": (owner, repo, environmentName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/variables`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "actionsCreateEnvironmentVariable": (owner, repo, environmentName, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/environments/${environmentName}/variables`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "actionsGetEnvironmentVariable": (owner, repo, environmentName, name, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/variables/${name}`).pipe(
    onRequest(["2xx"])
  ),
  "actionsDeleteEnvironmentVariable": (owner, repo, environmentName, name, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/environments/${environmentName}/variables/${name}`).pipe(
    onRequest([])
  ),
  "actionsUpdateEnvironmentVariable": (owner, repo, environmentName, name, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/environments/${environmentName}/variables/${name}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([])
  ),
  "activityListRepoEvents": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/events`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "reposListForks": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/forks`).pipe(
    HttpClientRequest.setUrlParams({ "sort": options?.["sort"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"400":"BasicError"})
  ),
  "reposCreateFork": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/forks`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"400":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "gitCreateBlob": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/git/blobs`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","409":"BasicError","422":"GitCreateBlob422"})
  ),
  "gitGetBlob": (owner, repo, fileSha, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/git/blobs/${fileSha}`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","409":"BasicError","422":"ValidationError"})
  ),
  "gitCreateCommit": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/git/commits`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","409":"BasicError","422":"ValidationError"})
  ),
  "gitGetCommit": (owner, repo, commitSha, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/git/commits/${commitSha}`).pipe(
    onRequest(["2xx"], {"404":"BasicError","409":"BasicError"})
  ),
  "gitListMatchingRefs": (owner, repo, ref, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/git/matching-refs/${ref}`).pipe(
    onRequest(["2xx"], {"409":"BasicError"})
  ),
  "gitGetRef": (owner, repo, ref, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/git/ref/${ref}`).pipe(
    onRequest(["2xx"], {"404":"BasicError","409":"BasicError"})
  ),
  "gitCreateRef": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/git/refs`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"409":"BasicError","422":"ValidationError"})
  ),
  "gitDeleteRef": (owner, repo, ref, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/git/refs/${ref}`).pipe(
    onRequest([], {"409":"BasicError"})
  ),
  "gitUpdateRef": (owner, repo, ref, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/git/refs/${ref}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"409":"BasicError","422":"ValidationError"})
  ),
  "gitCreateTag": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/git/tags`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"409":"BasicError","422":"ValidationError"})
  ),
  "gitGetTag": (owner, repo, tagSha, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/git/tags/${tagSha}`).pipe(
    onRequest(["2xx"], {"404":"BasicError","409":"BasicError"})
  ),
  "gitCreateTree": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/git/trees`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","409":"BasicError","422":"ValidationError"})
  ),
  "gitGetTree": (owner, repo, treeSha, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/git/trees/${treeSha}`).pipe(
    HttpClientRequest.setUrlParams({ "recursive": options?.["recursive"] as any }),
    onRequest(["2xx"], {"404":"BasicError","409":"BasicError","422":"ValidationError"})
  ),
  "reposListWebhooks": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/hooks`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposCreateWebhook": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/hooks`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "reposGetWebhook": (owner, repo, hookId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/hooks/${hookId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposDeleteWebhook": (owner, repo, hookId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/hooks/${hookId}`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "reposUpdateWebhook": (owner, repo, hookId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/hooks/${hookId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "reposGetWebhookConfigForRepo": (owner, repo, hookId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/hooks/${hookId}/config`).pipe(
    onRequest(["2xx"])
  ),
  "reposUpdateWebhookConfigForRepo": (owner, repo, hookId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/hooks/${hookId}/config`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "reposListWebhookDeliveries": (owner, repo, hookId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/hooks/${hookId}/deliveries`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "cursor": options?.["cursor"] as any }),
    onRequest(["2xx"], {"400":"BasicError","422":"ValidationError"})
  ),
  "reposGetWebhookDelivery": (owner, repo, hookId, deliveryId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/hooks/${hookId}/deliveries/${deliveryId}`).pipe(
    onRequest(["2xx"], {"400":"BasicError","422":"ValidationError"})
  ),
  "reposRedeliverWebhookDelivery": (owner, repo, hookId, deliveryId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/hooks/${hookId}/deliveries/${deliveryId}/attempts`).pipe(
    onRequest(["2xx"], {"400":"BasicError","422":"ValidationError"})
  ),
  "reposPingWebhook": (owner, repo, hookId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/hooks/${hookId}/pings`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "reposTestPushWebhook": (owner, repo, hookId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/hooks/${hookId}/tests`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "migrationsGetImportStatus": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/import`).pipe(
    onRequest(["2xx"], {"404":"BasicError","503":"BasicError"})
  ),
  "migrationsStartImport": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/import`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError","503":"BasicError"})
  ),
  "migrationsCancelImport": (owner, repo, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/import`).pipe(
    onRequest([], {"503":"BasicError"})
  ),
  "migrationsUpdateImport": (owner, repo, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/import`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"503":"BasicError"})
  ),
  "migrationsGetCommitAuthors": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/import/authors`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any }),
    onRequest(["2xx"], {"404":"BasicError","503":"BasicError"})
  ),
  "migrationsMapCommitAuthor": (owner, repo, authorId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/import/authors/${authorId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError","503":"BasicError"})
  ),
  "migrationsGetLargeFiles": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/import/large_files`).pipe(
    onRequest(["2xx"], {"503":"BasicError"})
  ),
  "migrationsSetLfsPreference": (owner, repo, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/import/lfs`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"ValidationError","503":"BasicError"})
  ),
  "appsGetRepoInstallation": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/installation`).pipe(
    onRequest(["200", "301"], {"404":"BasicError"})
  ),
  "interactionsGetRestrictionsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/interaction-limits`).pipe(
    onRequest(["2xx"])
  ),
  "interactionsSetRestrictionsForRepo": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/interaction-limits`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "interactionsRemoveRestrictionsForRepo": (owner, repo, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/interaction-limits`).pipe(
    onRequest([])
  ),
  "reposListInvitations": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/invitations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "reposDeleteInvitation": (owner, repo, invitationId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/invitations/${invitationId}`).pipe(
    onRequest([])
  ),
  "reposUpdateInvitation": (owner, repo, invitationId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/invitations/${invitationId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "issuesListForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues`).pipe(
    HttpClientRequest.setUrlParams({ "milestone": options?.["milestone"] as any, "state": options?.["state"] as any, "assignee": options?.["assignee"] as any, "type": options?.["type"] as any, "creator": options?.["creator"] as any, "mentioned": options?.["mentioned"] as any, "labels": options?.["labels"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["200", "301"], {"404":"BasicError","422":"ValidationError"})
  ),
  "issuesCreate": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/issues`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"400":"BasicError","403":"BasicError","404":"BasicError","410":"BasicError","422":"ValidationError","503":"IssuesCreate503"})
  ),
  "issuesListCommentsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/comments`).pipe(
    HttpClientRequest.setUrlParams({ "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "issuesGetComment": (owner, repo, commentId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/comments/${commentId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "issuesDeleteComment": (owner, repo, commentId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/issues/comments/${commentId}`).pipe(
    onRequest([])
  ),
  "issuesUpdateComment": (owner, repo, commentId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/issues/comments/${commentId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "reactionsListForIssueComment": (owner, repo, commentId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/comments/${commentId}/reactions`).pipe(
    HttpClientRequest.setUrlParams({ "content": options?.["content"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reactionsCreateForIssueComment": (owner, repo, commentId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/issues/comments/${commentId}/reactions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["200", "201"], {"422":"ValidationError"})
  ),
  "reactionsDeleteForIssueComment": (owner, repo, commentId, reactionId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/issues/comments/${commentId}/reactions/${reactionId}`).pipe(
    onRequest([])
  ),
  "issuesListEventsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/events`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "issuesGetEvent": (owner, repo, eventId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/events/${eventId}`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","410":"BasicError"})
  ),
  "issuesGet": (owner, repo, issueNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}`).pipe(
    onRequest(["200", "301"], {"404":"BasicError","410":"BasicError"})
  ),
  "issuesUpdate": (owner, repo, issueNumber, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/issues/${issueNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["200", "301"], {"403":"BasicError","404":"BasicError","410":"BasicError","422":"ValidationError","503":"IssuesUpdate503"})
  ),
  "issuesAddAssignees": (owner, repo, issueNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/issues/${issueNumber}/assignees`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "issuesRemoveAssignees": (owner, repo, issueNumber, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/issues/${issueNumber}/assignees`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "issuesCheckUserCanBeAssignedToIssue": (owner, repo, issueNumber, assignee, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}/assignees/${assignee}`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "issuesListComments": (owner, repo, issueNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}/comments`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError","410":"BasicError"})
  ),
  "issuesCreateComment": (owner, repo, issueNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/issues/${issueNumber}/comments`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","410":"BasicError","422":"ValidationError"})
  ),
  "issuesListDependenciesBlockedBy": (owner, repo, issueNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}/dependencies/blocked_by`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["200", "301"], {"404":"BasicError","410":"BasicError"})
  ),
  "issuesAddBlockedByDependency": (owner, repo, issueNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/issues/${issueNumber}/dependencies/blocked_by`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["201", "301"], {"403":"BasicError","404":"BasicError","410":"BasicError","422":"ValidationError"})
  ),
  "issuesRemoveDependencyBlockedBy": (owner, repo, issueNumber, issueId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/issues/${issueNumber}/dependencies/blocked_by/${issueId}`).pipe(
    onRequest(["200", "301"], {"400":"BasicError","401":"BasicError","403":"BasicError","404":"BasicError","410":"BasicError"})
  ),
  "issuesListDependenciesBlocking": (owner, repo, issueNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}/dependencies/blocking`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["200", "301"], {"404":"BasicError","410":"BasicError"})
  ),
  "issuesListEvents": (owner, repo, issueNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}/events`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"410":"BasicError"})
  ),
  "issuesListLabelsOnIssue": (owner, repo, issueNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}/labels`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["200", "301"], {"404":"BasicError","410":"BasicError"})
  ),
  "issuesSetLabels": (owner, repo, issueNumber, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/issues/${issueNumber}/labels`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["200", "301"], {"404":"BasicError","410":"BasicError","422":"ValidationError"})
  ),
  "issuesAddLabels": (owner, repo, issueNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/issues/${issueNumber}/labels`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["200", "301"], {"404":"BasicError","410":"BasicError","422":"ValidationError"})
  ),
  "issuesRemoveAllLabels": (owner, repo, issueNumber, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/issues/${issueNumber}/labels`).pipe(
    onRequest(["301"], {"404":"BasicError","410":"BasicError"})
  ),
  "issuesRemoveLabel": (owner, repo, issueNumber, name, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/issues/${issueNumber}/labels/${name}`).pipe(
    onRequest(["200", "301"], {"404":"BasicError","410":"BasicError"})
  ),
  "issuesLock": (owner, repo, issueNumber, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/issues/${issueNumber}/lock`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"403":"BasicError","404":"BasicError","410":"BasicError","422":"ValidationError"})
  ),
  "issuesUnlock": (owner, repo, issueNumber, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/issues/${issueNumber}/lock`).pipe(
    onRequest([], {"403":"BasicError","404":"BasicError"})
  ),
  "reactionsListForIssue": (owner, repo, issueNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}/reactions`).pipe(
    HttpClientRequest.setUrlParams({ "content": options?.["content"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError","410":"BasicError"})
  ),
  "reactionsCreateForIssue": (owner, repo, issueNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/issues/${issueNumber}/reactions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["200", "201"], {"422":"ValidationError"})
  ),
  "reactionsDeleteForIssue": (owner, repo, issueNumber, reactionId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/issues/${issueNumber}/reactions/${reactionId}`).pipe(
    onRequest([])
  ),
  "issuesRemoveSubIssue": (owner, repo, issueNumber, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/issues/${issueNumber}/sub_issue`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"400":"BasicError","404":"BasicError"})
  ),
  "issuesListSubIssues": (owner, repo, issueNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}/sub_issues`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError","410":"BasicError"})
  ),
  "issuesAddSubIssue": (owner, repo, issueNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/issues/${issueNumber}/sub_issues`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","410":"BasicError","422":"ValidationError"})
  ),
  "issuesReprioritizeSubIssue": (owner, repo, issueNumber, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/issues/${issueNumber}/sub_issues/priority`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationErrorSimple","503":"IssuesReprioritizeSubIssue503"})
  ),
  "issuesListEventsForTimeline": (owner, repo, issueNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}/timeline`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError","410":"BasicError"})
  ),
  "reposListDeployKeys": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/keys`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "reposCreateDeployKey": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/keys`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "reposGetDeployKey": (owner, repo, keyId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/keys/${keyId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposDeleteDeployKey": (owner, repo, keyId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/keys/${keyId}`).pipe(
    onRequest([])
  ),
  "issuesListLabelsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/labels`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "issuesCreateLabel": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/labels`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "issuesGetLabel": (owner, repo, name, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/labels/${name}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "issuesDeleteLabel": (owner, repo, name, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/labels/${name}`).pipe(
    onRequest([])
  ),
  "issuesUpdateLabel": (owner, repo, name, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/labels/${name}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "reposListLanguages": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/languages`).pipe(
    onRequest(["2xx"])
  ),
  "licensesGetForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/license`).pipe(
    HttpClientRequest.setUrlParams({ "ref": options?.["ref"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposMergeUpstream": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/merge-upstream`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "reposMerge": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/merges`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","422":"ValidationError"})
  ),
  "issuesListMilestones": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/milestones`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "issuesCreateMilestone": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/milestones`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "issuesGetMilestone": (owner, repo, milestoneNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/milestones/${milestoneNumber}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "issuesDeleteMilestone": (owner, repo, milestoneNumber, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/milestones/${milestoneNumber}`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "issuesUpdateMilestone": (owner, repo, milestoneNumber, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/milestones/${milestoneNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "issuesListLabelsForMilestone": (owner, repo, milestoneNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/milestones/${milestoneNumber}/labels`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "activityListRepoNotificationsForAuthenticatedUser": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/notifications`).pipe(
    HttpClientRequest.setUrlParams({ "all": options?.["all"] as any, "participating": options?.["participating"] as any, "since": options?.["since"] as any, "before": options?.["before"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "activityMarkRepoNotificationsAsRead": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/notifications`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "reposGetPages": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pages`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposUpdateInformationAboutPagesSite": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/pages`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"400":"BasicError","409":"BasicError","422":"ValidationError"})
  ),
  "reposCreatePagesSite": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pages`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"409":"BasicError","422":"ValidationError"})
  ),
  "reposDeletePagesSite": (owner, repo, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/pages`).pipe(
    onRequest([], {"404":"BasicError","409":"BasicError","422":"ValidationError"})
  ),
  "reposListPagesBuilds": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pages/builds`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "reposRequestPagesBuild": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pages/builds`).pipe(
    onRequest(["2xx"])
  ),
  "reposGetLatestPagesBuild": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pages/builds/latest`).pipe(
    onRequest(["2xx"])
  ),
  "reposGetPagesBuild": (owner, repo, buildId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pages/builds/${buildId}`).pipe(
    onRequest(["2xx"])
  ),
  "reposCreatePagesDeployment": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pages/deployments`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"400":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "reposGetPagesDeployment": (owner, repo, pagesDeploymentId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pages/deployments/${pagesDeploymentId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposCancelPagesDeployment": (owner, repo, pagesDeploymentId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pages/deployments/${pagesDeploymentId}/cancel`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "reposGetPagesHealthCheck": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pages/health`).pipe(
    onRequest(["200", "202"], {"404":"BasicError"})
  ),
  "reposCheckPrivateVulnerabilityReporting": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/private-vulnerability-reporting`).pipe(
    onRequest(["2xx"], {"422":"BasicError"})
  ),
  "reposEnablePrivateVulnerabilityReporting": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/private-vulnerability-reporting`).pipe(
    onRequest([], {"422":"BasicError"})
  ),
  "reposDisablePrivateVulnerabilityReporting": (owner, repo, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/private-vulnerability-reporting`).pipe(
    onRequest([], {"422":"BasicError"})
  ),
  "projectsClassicListForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","410":"BasicError","422":"ValidationErrorSimple"})
  ),
  "projectsClassicCreateForRepo": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/projects`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","410":"BasicError","422":"ValidationErrorSimple"})
  ),
  "reposGetCustomPropertiesValues": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/properties/values`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "reposCreateOrUpdateCustomPropertiesValues": (owner, repo, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/properties/values`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "pullsList": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "head": options?.["head"] as any, "base": options?.["base"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "pullsCreate": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pulls`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","422":"ValidationError"})
  ),
  "pullsListReviewCommentsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/comments`).pipe(
    HttpClientRequest.setUrlParams({ "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "pullsGetReviewComment": (owner, repo, commentId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/comments/${commentId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "pullsDeleteReviewComment": (owner, repo, commentId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/pulls/comments/${commentId}`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "pullsUpdateReviewComment": (owner, repo, commentId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/pulls/comments/${commentId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "reactionsListForPullRequestReviewComment": (owner, repo, commentId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/comments/${commentId}/reactions`).pipe(
    HttpClientRequest.setUrlParams({ "content": options?.["content"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reactionsCreateForPullRequestReviewComment": (owner, repo, commentId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pulls/comments/${commentId}/reactions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["200", "201"], {"422":"ValidationError"})
  ),
  "reactionsDeleteForPullRequestComment": (owner, repo, commentId, reactionId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/pulls/comments/${commentId}/reactions/${reactionId}`).pipe(
    onRequest([])
  ),
  "pullsGet": (owner, repo, pullNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/${pullNumber}`).pipe(
    onRequest(["2xx"], {"404":"BasicError","406":"BasicError","500":"BasicError","503":"PullsGet503"})
  ),
  "pullsUpdate": (owner, repo, pullNumber, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/pulls/${pullNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","422":"ValidationError"})
  ),
  "codespacesCreateWithPrForAuthenticatedUser": (owner, repo, pullNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pulls/${pullNumber}/codespaces`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["201", "202"], {"401":"BasicError","403":"BasicError","404":"BasicError","503":"CodespacesCreateWithPrForAuthenticatedUser503"})
  ),
  "pullsListReviewComments": (owner, repo, pullNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/${pullNumber}/comments`).pipe(
    HttpClientRequest.setUrlParams({ "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "pullsCreateReviewComment": (owner, repo, pullNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pulls/${pullNumber}/comments`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","422":"ValidationError"})
  ),
  "pullsCreateReplyForReviewComment": (owner, repo, pullNumber, commentId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pulls/${pullNumber}/comments/${commentId}/replies`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "pullsListCommits": (owner, repo, pullNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/${pullNumber}/commits`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "pullsListFiles": (owner, repo, pullNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/${pullNumber}/files`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"422":"ValidationError","500":"BasicError","503":"PullsListFiles503"})
  ),
  "pullsCheckIfMerged": (owner, repo, pullNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/${pullNumber}/merge`).pipe(
    onRequest([])
  ),
  "pullsMerge": (owner, repo, pullNumber, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/pulls/${pullNumber}/merge`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","405":"PullsMerge405","409":"PullsMerge409","422":"ValidationError"})
  ),
  "pullsListRequestedReviewers": (owner, repo, pullNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/${pullNumber}/requested_reviewers`).pipe(
    onRequest(["2xx"])
  ),
  "pullsRequestReviewers": (owner, repo, pullNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pulls/${pullNumber}/requested_reviewers`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError"})
  ),
  "pullsRemoveRequestedReviewers": (owner, repo, pullNumber, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/pulls/${pullNumber}/requested_reviewers`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "pullsListReviews": (owner, repo, pullNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/${pullNumber}/reviews`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "pullsCreateReview": (owner, repo, pullNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pulls/${pullNumber}/reviews`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","422":"ValidationErrorSimple"})
  ),
  "pullsGetReview": (owner, repo, pullNumber, reviewId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "pullsUpdateReview": (owner, repo, pullNumber, reviewId, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"422":"ValidationErrorSimple"})
  ),
  "pullsDeletePendingReview": (owner, repo, pullNumber, reviewId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "pullsListCommentsForReview": (owner, repo, pullNumber, reviewId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}/comments`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "pullsDismissReview": (owner, repo, pullNumber, reviewId, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}/dismissals`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "pullsSubmitReview": (owner, repo, pullNumber, reviewId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}/events`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "pullsUpdateBranch": (owner, repo, pullNumber, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/pulls/${pullNumber}/update-branch`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","422":"ValidationError"})
  ),
  "reposGetReadme": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/readme`).pipe(
    HttpClientRequest.setUrlParams({ "ref": options?.["ref"] as any }),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "reposGetReadmeInDirectory": (owner, repo, dir, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/readme/${dir}`).pipe(
    HttpClientRequest.setUrlParams({ "ref": options?.["ref"] as any }),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "reposListReleases": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/releases`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposCreateRelease": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/releases`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "reposGetReleaseAsset": (owner, repo, assetId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/releases/assets/${assetId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposDeleteReleaseAsset": (owner, repo, assetId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/releases/assets/${assetId}`).pipe(
    onRequest([])
  ),
  "reposUpdateReleaseAsset": (owner, repo, assetId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/releases/assets/${assetId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "reposGenerateReleaseNotes": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/releases/generate-notes`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposGetLatestRelease": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/releases/latest`).pipe(
    onRequest(["2xx"])
  ),
  "reposGetReleaseByTag": (owner, repo, tag, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/releases/tags/${tag}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposGetRelease": (owner, repo, releaseId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/releases/${releaseId}`).pipe(
    onRequest(["2xx"])
  ),
  "reposDeleteRelease": (owner, repo, releaseId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/releases/${releaseId}`).pipe(
    onRequest([])
  ),
  "reposUpdateRelease": (owner, repo, releaseId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/releases/${releaseId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposListReleaseAssets": (owner, repo, releaseId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/releases/${releaseId}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "reposUploadReleaseAsset": (owner, repo, releaseId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/releases/${releaseId}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "name": options?.["name"] as any, "label": options?.["label"] as any }),
    onRequest(["2xx"])
  ),
  "reactionsListForRelease": (owner, repo, releaseId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/releases/${releaseId}/reactions`).pipe(
    HttpClientRequest.setUrlParams({ "content": options?.["content"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reactionsCreateForRelease": (owner, repo, releaseId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/releases/${releaseId}/reactions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["200", "201"], {"422":"ValidationError"})
  ),
  "reactionsDeleteForRelease": (owner, repo, releaseId, reactionId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/releases/${releaseId}/reactions/${reactionId}`).pipe(
    onRequest([])
  ),
  "reposGetBranchRules": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/rules/branches/${branch}`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "reposGetRepoRulesets": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/rulesets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "includes_parents": options?.["includes_parents"] as any, "targets": options?.["targets"] as any }),
    onRequest(["2xx"], {"404":"BasicError","500":"BasicError"})
  ),
  "reposCreateRepoRuleset": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/rulesets`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","500":"BasicError"})
  ),
  "reposGetRepoRuleSuites": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/rulesets/rule-suites`).pipe(
    HttpClientRequest.setUrlParams({ "ref": options?.["ref"] as any, "time_period": options?.["time_period"] as any, "actor_name": options?.["actor_name"] as any, "rule_suite_result": options?.["rule_suite_result"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError","500":"BasicError"})
  ),
  "reposGetRepoRuleSuite": (owner, repo, ruleSuiteId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/rulesets/rule-suites/${ruleSuiteId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError","500":"BasicError"})
  ),
  "reposGetRepoRuleset": (owner, repo, rulesetId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/rulesets/${rulesetId}`).pipe(
    HttpClientRequest.setUrlParams({ "includes_parents": options?.["includes_parents"] as any }),
    onRequest(["2xx"], {"404":"BasicError","500":"BasicError"})
  ),
  "reposUpdateRepoRuleset": (owner, repo, rulesetId, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/rulesets/${rulesetId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","500":"BasicError"})
  ),
  "reposDeleteRepoRuleset": (owner, repo, rulesetId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/rulesets/${rulesetId}`).pipe(
    onRequest([], {"404":"BasicError","500":"BasicError"})
  ),
  "reposGetRepoRulesetHistory": (owner, repo, rulesetId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/rulesets/${rulesetId}/history`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError","500":"BasicError"})
  ),
  "reposGetRepoRulesetVersion": (owner, repo, rulesetId, versionId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/rulesets/${rulesetId}/history/${versionId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError","500":"BasicError"})
  ),
  "secretScanningListAlertsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/secret-scanning/alerts`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "secret_type": options?.["secret_type"] as any, "resolution": options?.["resolution"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "validity": options?.["validity"] as any, "is_publicly_leaked": options?.["is_publicly_leaked"] as any, "is_multi_repo": options?.["is_multi_repo"] as any, "hide_secret": options?.["hide_secret"] as any }),
    onRequest(["2xx"], {"503":"SecretScanningListAlertsForRepo503"})
  ),
  "secretScanningGetAlert": (owner, repo, alertNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/secret-scanning/alerts/${alertNumber}`).pipe(
    HttpClientRequest.setUrlParams({ "hide_secret": options?.["hide_secret"] as any }),
    onRequest(["2xx"], {"503":"SecretScanningGetAlert503"})
  ),
  "secretScanningUpdateAlert": (owner, repo, alertNumber, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/secret-scanning/alerts/${alertNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"503":"SecretScanningUpdateAlert503"})
  ),
  "secretScanningListLocationsForAlert": (owner, repo, alertNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/secret-scanning/alerts/${alertNumber}/locations`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"], {"503":"SecretScanningListLocationsForAlert503"})
  ),
  "secretScanningCreatePushProtectionBypass": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/secret-scanning/push-protection-bypasses`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"503":"SecretScanningCreatePushProtectionBypass503"})
  ),
  "secretScanningGetScanHistory": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/secret-scanning/scan-history`).pipe(
    onRequest(["2xx"], {"503":"SecretScanningGetScanHistory503"})
  ),
  "securityAdvisoriesListRepositoryAdvisories": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/security-advisories`).pipe(
    HttpClientRequest.setUrlParams({ "direction": options?.["direction"] as any, "sort": options?.["sort"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "per_page": options?.["per_page"] as any, "state": options?.["state"] as any }),
    onRequest(["2xx"], {"400":"BasicError","404":"BasicError"})
  ),
  "securityAdvisoriesCreateRepositoryAdvisory": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/security-advisories`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "securityAdvisoriesCreatePrivateVulnerabilityReport": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/security-advisories/reports`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "securityAdvisoriesGetRepositoryAdvisory": (owner, repo, ghsaId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/security-advisories/${ghsaId}`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "securityAdvisoriesUpdateRepositoryAdvisory": (owner, repo, ghsaId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/security-advisories/${ghsaId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "securityAdvisoriesCreateRepositoryAdvisoryCveRequest": (owner, repo, ghsaId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/security-advisories/${ghsaId}/cve`).pipe(
    onRequest(["2xx"], {"400":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "securityAdvisoriesCreateFork": (owner, repo, ghsaId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/security-advisories/${ghsaId}/forks`).pipe(
    onRequest(["2xx"], {"400":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "activityListStargazersForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/stargazers`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "reposGetCodeFrequencyStats": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/stats/code_frequency`).pipe(
    onRequest(["200", "202"])
  ),
  "reposGetCommitActivityStats": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/stats/commit_activity`).pipe(
    onRequest(["200", "202"])
  ),
  "reposGetContributorsStats": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/stats/contributors`).pipe(
    onRequest(["200", "202"])
  ),
  "reposGetParticipationStats": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/stats/participation`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposGetPunchCardStats": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/stats/punch_card`).pipe(
    onRequest(["2xx"])
  ),
  "reposCreateCommitStatus": (owner, repo, sha, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/statuses/${sha}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "activityListWatchersForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/subscribers`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "activityGetRepoSubscription": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/subscription`).pipe(
    onRequest(["2xx"], {"403":"BasicError"})
  ),
  "activitySetRepoSubscription": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/subscription`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "activityDeleteRepoSubscription": (owner, repo, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/subscription`).pipe(
    onRequest([])
  ),
  "reposListTags": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/tags`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "reposListTagProtection": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/tags/protection`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "reposCreateTagProtection": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/tags/protection`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "reposDeleteTagProtection": (owner, repo, tagProtectionId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/tags/protection/${tagProtectionId}`).pipe(
    onRequest([], {"403":"BasicError","404":"BasicError"})
  ),
  "reposDownloadTarballArchive": (owner, repo, ref, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/tarball/${ref}`).pipe(
    onRequest([])
  ),
  "reposListTeams": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/teams`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposGetAllTopics": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/topics`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "reposReplaceAllTopics": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/topics`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationErrorSimple"})
  ),
  "reposGetClones": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/traffic/clones`).pipe(
    HttpClientRequest.setUrlParams({ "per": options?.["per"] as any }),
    onRequest(["2xx"], {"403":"BasicError"})
  ),
  "reposGetTopPaths": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/traffic/popular/paths`).pipe(
    onRequest(["2xx"], {"403":"BasicError"})
  ),
  "reposGetTopReferrers": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/traffic/popular/referrers`).pipe(
    onRequest(["2xx"], {"403":"BasicError"})
  ),
  "reposGetViews": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/traffic/views`).pipe(
    HttpClientRequest.setUrlParams({ "per": options?.["per"] as any }),
    onRequest(["2xx"], {"403":"BasicError"})
  ),
  "reposTransfer": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/transfer`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "reposCheckVulnerabilityAlerts": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/vulnerability-alerts`).pipe(
    onRequest([])
  ),
  "reposEnableVulnerabilityAlerts": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/vulnerability-alerts`).pipe(
    onRequest([])
  ),
  "reposDisableVulnerabilityAlerts": (owner, repo, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/vulnerability-alerts`).pipe(
    onRequest([])
  ),
  "reposDownloadZipballArchive": (owner, repo, ref, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/zipball/${ref}`).pipe(
    onRequest([])
  ),
  "reposCreateUsingTemplate": (templateOwner, templateRepo, options) => HttpClientRequest.post(`/repos/${templateOwner}/${templateRepo}/generate`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest(["2xx"])
  ),
  "reposListPublic": (options) => HttpClientRequest.get(`/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any }),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "searchCode": (options) => HttpClientRequest.get(`/search/code`).pipe(
    HttpClientRequest.setUrlParams({ "q": options?.["q"] as any, "sort": options?.["sort"] as any, "order": options?.["order"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"403":"BasicError","422":"ValidationError","503":"SearchCode503"})
  ),
  "searchCommits": (options) => HttpClientRequest.get(`/search/commits`).pipe(
    HttpClientRequest.setUrlParams({ "q": options?.["q"] as any, "sort": options?.["sort"] as any, "order": options?.["order"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "searchIssuesAndPullRequests": (options) => HttpClientRequest.get(`/search/issues`).pipe(
    HttpClientRequest.setUrlParams({ "q": options?.["q"] as any, "sort": options?.["sort"] as any, "order": options?.["order"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "advanced_search": options?.["advanced_search"] as any }),
    onRequest(["2xx"], {"403":"BasicError","422":"ValidationError","503":"SearchIssuesAndPullRequests503"})
  ),
  "searchLabels": (options) => HttpClientRequest.get(`/search/labels`).pipe(
    HttpClientRequest.setUrlParams({ "repository_id": options?.["repository_id"] as any, "q": options?.["q"] as any, "sort": options?.["sort"] as any, "order": options?.["order"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "searchRepos": (options) => HttpClientRequest.get(`/search/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "q": options?.["q"] as any, "sort": options?.["sort"] as any, "order": options?.["order"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"422":"ValidationError","503":"SearchRepos503"})
  ),
  "searchTopics": (options) => HttpClientRequest.get(`/search/topics`).pipe(
    HttpClientRequest.setUrlParams({ "q": options?.["q"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "searchUsers": (options) => HttpClientRequest.get(`/search/users`).pipe(
    HttpClientRequest.setUrlParams({ "q": options?.["q"] as any, "sort": options?.["sort"] as any, "order": options?.["order"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"422":"ValidationError","503":"SearchUsers503"})
  ),
  "teamsGetLegacy": (teamId, options) => HttpClientRequest.get(`/teams/${teamId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "teamsDeleteLegacy": (teamId, options) => HttpClientRequest.del(`/teams/${teamId}`).pipe(
    onRequest([], {"404":"BasicError","422":"ValidationError"})
  ),
  "teamsUpdateLegacy": (teamId, options) => HttpClientRequest.patch(`/teams/${teamId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["200", "201"], {"403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "teamsListDiscussionsLegacy": (teamId, options) => HttpClientRequest.get(`/teams/${teamId}/discussions`).pipe(
    HttpClientRequest.setUrlParams({ "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "teamsCreateDiscussionLegacy": (teamId, options) => HttpClientRequest.post(`/teams/${teamId}/discussions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "teamsGetDiscussionLegacy": (teamId, discussionNumber, options) => HttpClientRequest.get(`/teams/${teamId}/discussions/${discussionNumber}`).pipe(
    onRequest(["2xx"])
  ),
  "teamsDeleteDiscussionLegacy": (teamId, discussionNumber, options) => HttpClientRequest.del(`/teams/${teamId}/discussions/${discussionNumber}`).pipe(
    onRequest([])
  ),
  "teamsUpdateDiscussionLegacy": (teamId, discussionNumber, options) => HttpClientRequest.patch(`/teams/${teamId}/discussions/${discussionNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "teamsListDiscussionCommentsLegacy": (teamId, discussionNumber, options) => HttpClientRequest.get(`/teams/${teamId}/discussions/${discussionNumber}/comments`).pipe(
    HttpClientRequest.setUrlParams({ "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "teamsCreateDiscussionCommentLegacy": (teamId, discussionNumber, options) => HttpClientRequest.post(`/teams/${teamId}/discussions/${discussionNumber}/comments`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "teamsGetDiscussionCommentLegacy": (teamId, discussionNumber, commentNumber, options) => HttpClientRequest.get(`/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}`).pipe(
    onRequest(["2xx"])
  ),
  "teamsDeleteDiscussionCommentLegacy": (teamId, discussionNumber, commentNumber, options) => HttpClientRequest.del(`/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}`).pipe(
    onRequest([])
  ),
  "teamsUpdateDiscussionCommentLegacy": (teamId, discussionNumber, commentNumber, options) => HttpClientRequest.patch(`/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "reactionsListForTeamDiscussionCommentLegacy": (teamId, discussionNumber, commentNumber, options) => HttpClientRequest.get(`/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}/reactions`).pipe(
    HttpClientRequest.setUrlParams({ "content": options?.["content"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "reactionsCreateForTeamDiscussionCommentLegacy": (teamId, discussionNumber, commentNumber, options) => HttpClientRequest.post(`/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}/reactions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "reactionsListForTeamDiscussionLegacy": (teamId, discussionNumber, options) => HttpClientRequest.get(`/teams/${teamId}/discussions/${discussionNumber}/reactions`).pipe(
    HttpClientRequest.setUrlParams({ "content": options?.["content"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "reactionsCreateForTeamDiscussionLegacy": (teamId, discussionNumber, options) => HttpClientRequest.post(`/teams/${teamId}/discussions/${discussionNumber}/reactions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "teamsListPendingInvitationsLegacy": (teamId, options) => HttpClientRequest.get(`/teams/${teamId}/invitations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "teamsListMembersLegacy": (teamId, options) => HttpClientRequest.get(`/teams/${teamId}/members`).pipe(
    HttpClientRequest.setUrlParams({ "role": options?.["role"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "teamsGetMemberLegacy": (teamId, username, options) => HttpClientRequest.get(`/teams/${teamId}/members/${username}`).pipe(
    onRequest([])
  ),
  "teamsAddMemberLegacy": (teamId, username, options) => HttpClientRequest.put(`/teams/${teamId}/members/${username}`).pipe(
    onRequest([], {"403":"BasicError"})
  ),
  "teamsRemoveMemberLegacy": (teamId, username, options) => HttpClientRequest.del(`/teams/${teamId}/members/${username}`).pipe(
    onRequest([])
  ),
  "teamsGetMembershipForUserLegacy": (teamId, username, options) => HttpClientRequest.get(`/teams/${teamId}/memberships/${username}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "teamsAddOrUpdateMembershipForUserLegacy": (teamId, username, options) => HttpClientRequest.put(`/teams/${teamId}/memberships/${username}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "teamsRemoveMembershipForUserLegacy": (teamId, username, options) => HttpClientRequest.del(`/teams/${teamId}/memberships/${username}`).pipe(
    onRequest([])
  ),
  "teamsListProjectsLegacy": (teamId, options) => HttpClientRequest.get(`/teams/${teamId}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "teamsCheckPermissionsForProjectLegacy": (teamId, projectId, options) => HttpClientRequest.get(`/teams/${teamId}/projects/${projectId}`).pipe(
    onRequest(["2xx"])
  ),
  "teamsAddOrUpdateProjectPermissionsLegacy": (teamId, projectId, options) => HttpClientRequest.put(`/teams/${teamId}/projects/${projectId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"403":"TeamsAddOrUpdateProjectPermissionsLegacy403","404":"BasicError","422":"ValidationError"})
  ),
  "teamsRemoveProjectLegacy": (teamId, projectId, options) => HttpClientRequest.del(`/teams/${teamId}/projects/${projectId}`).pipe(
    onRequest([], {"404":"BasicError","422":"ValidationError"})
  ),
  "teamsListReposLegacy": (teamId, options) => HttpClientRequest.get(`/teams/${teamId}/repos`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "teamsCheckPermissionsForRepoLegacy": (teamId, owner, repo, options) => HttpClientRequest.get(`/teams/${teamId}/repos/${owner}/${repo}`).pipe(
    onRequest(["2xx"])
  ),
  "teamsAddOrUpdateRepoPermissionsLegacy": (teamId, owner, repo, options) => HttpClientRequest.put(`/teams/${teamId}/repos/${owner}/${repo}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"403":"BasicError","422":"ValidationError"})
  ),
  "teamsRemoveRepoLegacy": (teamId, owner, repo, options) => HttpClientRequest.del(`/teams/${teamId}/repos/${owner}/${repo}`).pipe(
    onRequest([])
  ),
  "teamsListChildLegacy": (teamId, options) => HttpClientRequest.get(`/teams/${teamId}/teams`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "usersGetAuthenticated": () => HttpClientRequest.get(`/user`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "usersUpdateAuthenticated": (options) => HttpClientRequest.patch(`/user`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "usersListBlockedByAuthenticatedUser": (options) => HttpClientRequest.get(`/user/blocks`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "usersCheckBlocked": (username, options) => HttpClientRequest.get(`/user/blocks/${username}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "usersBlock": (username, options) => HttpClientRequest.put(`/user/blocks/${username}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "usersUnblock": (username, options) => HttpClientRequest.del(`/user/blocks/${username}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "codespacesListForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/codespaces`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "repository_id": options?.["repository_id"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "codespacesCreateForAuthenticatedUser": (options) => HttpClientRequest.post(`/user/codespaces`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest(["201", "202"], {"401":"BasicError","403":"BasicError","404":"BasicError","503":"CodespacesCreateForAuthenticatedUser503"})
  ),
  "codespacesListSecretsForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/codespaces/secrets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "codespacesGetPublicKeyForAuthenticatedUser": () => HttpClientRequest.get(`/user/codespaces/secrets/public-key`).pipe(
    onRequest(["2xx"])
  ),
  "codespacesGetSecretForAuthenticatedUser": (secretName, options) => HttpClientRequest.get(`/user/codespaces/secrets/${secretName}`).pipe(
    onRequest(["2xx"])
  ),
  "codespacesCreateOrUpdateSecretForAuthenticatedUser": (secretName, options) => HttpClientRequest.put(`/user/codespaces/secrets/${secretName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "codespacesDeleteSecretForAuthenticatedUser": (secretName, options) => HttpClientRequest.del(`/user/codespaces/secrets/${secretName}`).pipe(
    onRequest([])
  ),
  "codespacesListRepositoriesForSecretForAuthenticatedUser": (secretName, options) => HttpClientRequest.get(`/user/codespaces/secrets/${secretName}/repositories`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "codespacesSetRepositoriesForSecretForAuthenticatedUser": (secretName, options) => HttpClientRequest.put(`/user/codespaces/secrets/${secretName}/repositories`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "codespacesAddRepositoryForSecretForAuthenticatedUser": (secretName, repositoryId, options) => HttpClientRequest.put(`/user/codespaces/secrets/${secretName}/repositories/${repositoryId}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "codespacesRemoveRepositoryForSecretForAuthenticatedUser": (secretName, repositoryId, options) => HttpClientRequest.del(`/user/codespaces/secrets/${secretName}/repositories/${repositoryId}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "codespacesGetForAuthenticatedUser": (codespaceName, options) => HttpClientRequest.get(`/user/codespaces/${codespaceName}`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "codespacesDeleteForAuthenticatedUser": (codespaceName, options) => HttpClientRequest.del(`/user/codespaces/${codespaceName}`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "codespacesUpdateForAuthenticatedUser": (codespaceName, options) => HttpClientRequest.patch(`/user/codespaces/${codespaceName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "codespacesExportForAuthenticatedUser": (codespaceName, options) => HttpClientRequest.post(`/user/codespaces/${codespaceName}/exports`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError","500":"BasicError"})
  ),
  "codespacesGetExportDetailsForAuthenticatedUser": (codespaceName, exportId, options) => HttpClientRequest.get(`/user/codespaces/${codespaceName}/exports/${exportId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "codespacesCodespaceMachinesForAuthenticatedUser": (codespaceName, options) => HttpClientRequest.get(`/user/codespaces/${codespaceName}/machines`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "codespacesPublishForAuthenticatedUser": (codespaceName, options) => HttpClientRequest.post(`/user/codespaces/${codespaceName}/publish`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "codespacesStartForAuthenticatedUser": (codespaceName, options) => HttpClientRequest.post(`/user/codespaces/${codespaceName}/start`).pipe(
    onRequest(["2xx"], {"400":"BasicError","401":"BasicError","402":"BasicError","403":"BasicError","404":"BasicError","409":"BasicError","500":"BasicError"})
  ),
  "codespacesStopForAuthenticatedUser": (codespaceName, options) => HttpClientRequest.post(`/user/codespaces/${codespaceName}/stop`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","500":"BasicError"})
  ),
  "packagesListDockerMigrationConflictingPackagesForAuthenticatedUser": () => HttpClientRequest.get(`/user/docker/conflicts`).pipe(
    onRequest(["2xx"])
  ),
  "usersSetPrimaryEmailVisibilityForAuthenticatedUser": (options) => HttpClientRequest.patch(`/user/email/visibility`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "usersListEmailsForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/emails`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "usersAddEmailForAuthenticatedUser": (options) => HttpClientRequest.post(`/user/emails`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "usersDeleteEmailForAuthenticatedUser": (options) => HttpClientRequest.del(`/user/emails`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "usersListFollowersForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/followers`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "usersListFollowedByAuthenticatedUser": (options) => HttpClientRequest.get(`/user/following`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "usersCheckPersonIsFollowedByAuthenticated": (username, options) => HttpClientRequest.get(`/user/following/${username}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "usersFollow": (username, options) => HttpClientRequest.put(`/user/following/${username}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "usersUnfollow": (username, options) => HttpClientRequest.del(`/user/following/${username}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "usersListGpgKeysForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/gpg_keys`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "usersCreateGpgKeyForAuthenticatedUser": (options) => HttpClientRequest.post(`/user/gpg_keys`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "usersGetGpgKeyForAuthenticatedUser": (gpgKeyId, options) => HttpClientRequest.get(`/user/gpg_keys/${gpgKeyId}`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "usersDeleteGpgKeyForAuthenticatedUser": (gpgKeyId, options) => HttpClientRequest.del(`/user/gpg_keys/${gpgKeyId}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "appsListInstallationsForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/installations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "appsListInstallationReposForAuthenticatedUser": (installationId, options) => HttpClientRequest.get(`/user/installations/${installationId}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "appsAddRepoToInstallationForAuthenticatedUser": (installationId, repositoryId, options) => HttpClientRequest.put(`/user/installations/${installationId}/repositories/${repositoryId}`).pipe(
    onRequest([], {"403":"BasicError","404":"BasicError"})
  ),
  "appsRemoveRepoFromInstallationForAuthenticatedUser": (installationId, repositoryId, options) => HttpClientRequest.del(`/user/installations/${installationId}/repositories/${repositoryId}`).pipe(
    onRequest([], {"403":"BasicError","404":"BasicError"})
  ),
  "interactionsGetRestrictionsForAuthenticatedUser": () => HttpClientRequest.get(`/user/interaction-limits`).pipe(
    onRequest(["2xx"])
  ),
  "interactionsSetRestrictionsForAuthenticatedUser": (options) => HttpClientRequest.put(`/user/interaction-limits`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "interactionsRemoveRestrictionsForAuthenticatedUser": () => HttpClientRequest.del(`/user/interaction-limits`).pipe(
    onRequest([])
  ),
  "issuesListForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/issues`).pipe(
    HttpClientRequest.setUrlParams({ "filter": options?.["filter"] as any, "state": options?.["state"] as any, "labels": options?.["labels"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "usersListPublicSshKeysForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/keys`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "usersCreatePublicSshKeyForAuthenticatedUser": (options) => HttpClientRequest.post(`/user/keys`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "usersGetPublicSshKeyForAuthenticatedUser": (keyId, options) => HttpClientRequest.get(`/user/keys/${keyId}`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "usersDeletePublicSshKeyForAuthenticatedUser": (keyId, options) => HttpClientRequest.del(`/user/keys/${keyId}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "appsListSubscriptionsForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/marketplace_purchases`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","404":"BasicError"})
  ),
  "appsListSubscriptionsForAuthenticatedUserStubbed": (options) => HttpClientRequest.get(`/user/marketplace_purchases/stubbed`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError"})
  ),
  "orgsListMembershipsForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/memberships/orgs`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","422":"ValidationError"})
  ),
  "orgsGetMembershipForAuthenticatedUser": (org, options) => HttpClientRequest.get(`/user/memberships/orgs/${org}`).pipe(
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "orgsUpdateMembershipForAuthenticatedUser": (org, options) => HttpClientRequest.patch(`/user/memberships/orgs/${org}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "migrationsListForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/migrations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "migrationsStartForAuthenticatedUser": (options) => HttpClientRequest.post(`/user/migrations`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","422":"ValidationError"})
  ),
  "migrationsGetStatusForAuthenticatedUser": (migrationId, options) => HttpClientRequest.get(`/user/migrations/${migrationId}`).pipe(
    HttpClientRequest.setUrlParams({ "exclude": options?.["exclude"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "migrationsGetArchiveForAuthenticatedUser": (migrationId, options) => HttpClientRequest.get(`/user/migrations/${migrationId}/archive`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError"})
  ),
  "migrationsDeleteArchiveForAuthenticatedUser": (migrationId, options) => HttpClientRequest.del(`/user/migrations/${migrationId}/archive`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "migrationsUnlockRepoForAuthenticatedUser": (migrationId, repoName, options) => HttpClientRequest.del(`/user/migrations/${migrationId}/repos/${repoName}/lock`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "migrationsListReposForAuthenticatedUser": (migrationId, options) => HttpClientRequest.get(`/user/migrations/${migrationId}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "orgsListForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/orgs`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "packagesListPackagesForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/packages`).pipe(
    HttpClientRequest.setUrlParams({ "package_type": options?.["package_type"] as any, "visibility": options?.["visibility"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"])
  ),
  "packagesGetPackageForAuthenticatedUser": (packageType, packageName, options) => HttpClientRequest.get(`/user/packages/${packageType}/${packageName}`).pipe(
    onRequest(["2xx"])
  ),
  "packagesDeletePackageForAuthenticatedUser": (packageType, packageName, options) => HttpClientRequest.del(`/user/packages/${packageType}/${packageName}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "packagesRestorePackageForAuthenticatedUser": (packageType, packageName, options) => HttpClientRequest.post(`/user/packages/${packageType}/${packageName}/restore`).pipe(
    HttpClientRequest.setUrlParams({ "token": options?.["token"] as any }),
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser": (packageType, packageName, options) => HttpClientRequest.get(`/user/packages/${packageType}/${packageName}/versions`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "state": options?.["state"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "packagesGetPackageVersionForAuthenticatedUser": (packageType, packageName, packageVersionId, options) => HttpClientRequest.get(`/user/packages/${packageType}/${packageName}/versions/${packageVersionId}`).pipe(
    onRequest(["2xx"])
  ),
  "packagesDeletePackageVersionForAuthenticatedUser": (packageType, packageName, packageVersionId, options) => HttpClientRequest.del(`/user/packages/${packageType}/${packageName}/versions/${packageVersionId}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "packagesRestorePackageVersionForAuthenticatedUser": (packageType, packageName, packageVersionId, options) => HttpClientRequest.post(`/user/packages/${packageType}/${packageName}/versions/${packageVersionId}/restore`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "projectsClassicCreateForAuthenticatedUser": (options) => HttpClientRequest.post(`/user/projects`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","422":"ValidationErrorSimple"})
  ),
  "usersListPublicEmailsForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/public_emails`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "reposListForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/repos`).pipe(
    HttpClientRequest.setUrlParams({ "visibility": options?.["visibility"] as any, "affiliation": options?.["affiliation"] as any, "type": options?.["type"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "since": options?.["since"] as any, "before": options?.["before"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","422":"ValidationError"})
  ),
  "reposCreateForAuthenticatedUser": (options) => HttpClientRequest.post(`/user/repos`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest(["2xx"], {"400":"BasicError","401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "reposListInvitationsForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/repository_invitations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "reposDeclineInvitationForAuthenticatedUser": (invitationId, options) => HttpClientRequest.del(`/user/repository_invitations/${invitationId}`).pipe(
    onRequest([], {"403":"BasicError","404":"BasicError","409":"BasicError"})
  ),
  "reposAcceptInvitationForAuthenticatedUser": (invitationId, options) => HttpClientRequest.patch(`/user/repository_invitations/${invitationId}`).pipe(
    onRequest([], {"403":"BasicError","404":"BasicError","409":"BasicError"})
  ),
  "usersListSocialAccountsForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/social_accounts`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "usersAddSocialAccountForAuthenticatedUser": (options) => HttpClientRequest.post(`/user/social_accounts`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "usersDeleteSocialAccountForAuthenticatedUser": (options) => HttpClientRequest.del(`/user/social_accounts`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "usersListSshSigningKeysForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/ssh_signing_keys`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "usersCreateSshSigningKeyForAuthenticatedUser": (options) => HttpClientRequest.post(`/user/ssh_signing_keys`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError","422":"ValidationError"})
  ),
  "usersGetSshSigningKeyForAuthenticatedUser": (sshSigningKeyId, options) => HttpClientRequest.get(`/user/ssh_signing_keys/${sshSigningKeyId}`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "usersDeleteSshSigningKeyForAuthenticatedUser": (sshSigningKeyId, options) => HttpClientRequest.del(`/user/ssh_signing_keys/${sshSigningKeyId}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "activityListReposStarredByAuthenticatedUser": (options) => HttpClientRequest.get(`/user/starred`).pipe(
    HttpClientRequest.setUrlParams({ "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "activityCheckRepoIsStarredByAuthenticatedUser": (owner, repo, options) => HttpClientRequest.get(`/user/starred/${owner}/${repo}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "activityStarRepoForAuthenticatedUser": (owner, repo, options) => HttpClientRequest.put(`/user/starred/${owner}/${repo}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "activityUnstarRepoForAuthenticatedUser": (owner, repo, options) => HttpClientRequest.del(`/user/starred/${owner}/${repo}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "activityListWatchedReposForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/subscriptions`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "teamsListForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/teams`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"403":"BasicError","404":"BasicError"})
  ),
  "usersGetById": (accountId, options) => HttpClientRequest.get(`/user/${accountId}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "usersList": (options) => HttpClientRequest.get(`/users`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"])
  ),
  "usersGetByUsername": (username, options) => HttpClientRequest.get(`/users/${username}`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "usersListAttestationsBulk": (username, options) => HttpClientRequest.post(`/users/${username}/attestations/bulk-list`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options.params?.["per_page"] as any, "before": options.params?.["before"] as any, "after": options.params?.["after"] as any }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest(["2xx"])
  ),
  "usersDeleteAttestationsBulk": (username, options) => HttpClientRequest.post(`/users/${username}/attestations/delete-request`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    onRequest([], {"404":"BasicError"})
  ),
  "usersDeleteAttestationsBySubjectDigest": (username, subjectDigest, options) => HttpClientRequest.del(`/users/${username}/attestations/digest/${subjectDigest}`).pipe(
    onRequest([], {"404":"BasicError"})
  ),
  "usersDeleteAttestationsById": (username, attestationId, options) => HttpClientRequest.del(`/users/${username}/attestations/${attestationId}`).pipe(
    onRequest([], {"403":"BasicError","404":"BasicError"})
  ),
  "usersListAttestations": (username, subjectDigest, options) => HttpClientRequest.get(`/users/${username}/attestations/${subjectDigest}`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "predicate_type": options?.["predicate_type"] as any }),
    onRequest(["200", "201"], {"404":"BasicError"})
  ),
  "packagesListDockerMigrationConflictingPackagesForUser": (username, options) => HttpClientRequest.get(`/users/${username}/docker/conflicts`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "activityListEventsForAuthenticatedUser": (username, options) => HttpClientRequest.get(`/users/${username}/events`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "activityListOrgEventsForAuthenticatedUser": (username, org, options) => HttpClientRequest.get(`/users/${username}/events/orgs/${org}`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "activityListPublicEventsForUser": (username, options) => HttpClientRequest.get(`/users/${username}/events/public`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "usersListFollowersForUser": (username, options) => HttpClientRequest.get(`/users/${username}/followers`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "usersListFollowingForUser": (username, options) => HttpClientRequest.get(`/users/${username}/following`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "usersCheckFollowingForUser": (username, targetUser, options) => HttpClientRequest.get(`/users/${username}/following/${targetUser}`).pipe(
    onRequest([])
  ),
  "gistsListForUser": (username, options) => HttpClientRequest.get(`/users/${username}/gists`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "usersListGpgKeysForUser": (username, options) => HttpClientRequest.get(`/users/${username}/gpg_keys`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "usersGetContextForUser": (username, options) => HttpClientRequest.get(`/users/${username}/hovercard`).pipe(
    HttpClientRequest.setUrlParams({ "subject_type": options?.["subject_type"] as any, "subject_id": options?.["subject_id"] as any }),
    onRequest(["2xx"], {"404":"BasicError","422":"ValidationError"})
  ),
  "appsGetUserInstallation": (username, options) => HttpClientRequest.get(`/users/${username}/installation`).pipe(
    onRequest(["2xx"])
  ),
  "usersListPublicKeysForUser": (username, options) => HttpClientRequest.get(`/users/${username}/keys`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "orgsListForUser": (username, options) => HttpClientRequest.get(`/users/${username}/orgs`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "packagesListPackagesForUser": (username, options) => HttpClientRequest.get(`/users/${username}/packages`).pipe(
    HttpClientRequest.setUrlParams({ "package_type": options?.["package_type"] as any, "visibility": options?.["visibility"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError"})
  ),
  "packagesGetPackageForUser": (username, packageType, packageName, options) => HttpClientRequest.get(`/users/${username}/packages/${packageType}/${packageName}`).pipe(
    onRequest(["2xx"])
  ),
  "packagesDeletePackageForUser": (username, packageType, packageName, options) => HttpClientRequest.del(`/users/${username}/packages/${packageType}/${packageName}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "packagesRestorePackageForUser": (username, packageType, packageName, options) => HttpClientRequest.post(`/users/${username}/packages/${packageType}/${packageName}/restore`).pipe(
    HttpClientRequest.setUrlParams({ "token": options?.["token"] as any }),
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "packagesGetAllPackageVersionsForPackageOwnedByUser": (username, packageType, packageName, options) => HttpClientRequest.get(`/users/${username}/packages/${packageType}/${packageName}/versions`).pipe(
    onRequest(["2xx"], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "packagesGetPackageVersionForUser": (username, packageType, packageName, packageVersionId, options) => HttpClientRequest.get(`/users/${username}/packages/${packageType}/${packageName}/versions/${packageVersionId}`).pipe(
    onRequest(["2xx"])
  ),
  "packagesDeletePackageVersionForUser": (username, packageType, packageName, packageVersionId, options) => HttpClientRequest.del(`/users/${username}/packages/${packageType}/${packageName}/versions/${packageVersionId}`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "packagesRestorePackageVersionForUser": (username, packageType, packageName, packageVersionId, options) => HttpClientRequest.post(`/users/${username}/packages/${packageType}/${packageName}/versions/${packageVersionId}/restore`).pipe(
    onRequest([], {"401":"BasicError","403":"BasicError","404":"BasicError"})
  ),
  "projectsClassicListForUser": (username, options) => HttpClientRequest.get(`/users/${username}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"], {"422":"ValidationError"})
  ),
  "activityListReceivedEventsForUser": (username, options) => HttpClientRequest.get(`/users/${username}/received_events`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "activityListReceivedPublicEventsForUser": (username, options) => HttpClientRequest.get(`/users/${username}/received_events/public`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "reposListForUser": (username, options) => HttpClientRequest.get(`/users/${username}/repos`).pipe(
    HttpClientRequest.setUrlParams({ "type": options?.["type"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "billingGetGithubActionsBillingUser": (username, options) => HttpClientRequest.get(`/users/${username}/settings/billing/actions`).pipe(
    onRequest(["2xx"])
  ),
  "billingGetGithubPackagesBillingUser": (username, options) => HttpClientRequest.get(`/users/${username}/settings/billing/packages`).pipe(
    onRequest(["2xx"])
  ),
  "billingGetSharedStorageBillingUser": (username, options) => HttpClientRequest.get(`/users/${username}/settings/billing/shared-storage`).pipe(
    onRequest(["2xx"])
  ),
  "billingGetGithubBillingUsageReportUser": (username, options) => HttpClientRequest.get(`/users/${username}/settings/billing/usage`).pipe(
    HttpClientRequest.setUrlParams({ "year": options?.["year"] as any, "month": options?.["month"] as any, "day": options?.["day"] as any, "hour": options?.["hour"] as any }),
    onRequest(["2xx"], {"400":"BasicError","403":"BasicError","500":"BasicError","503":"BillingGetGithubBillingUsageReportUser503"})
  ),
  "usersListSocialAccountsForUser": (username, options) => HttpClientRequest.get(`/users/${username}/social_accounts`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "usersListSshSigningKeysForUser": (username, options) => HttpClientRequest.get(`/users/${username}/ssh_signing_keys`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "activityListReposStarredByUser": (username, options) => HttpClientRequest.get(`/users/${username}/starred`).pipe(
    HttpClientRequest.setUrlParams({ "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "activityListReposWatchedByUser": (username, options) => HttpClientRequest.get(`/users/${username}/subscriptions`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    onRequest(["2xx"])
  ),
  "metaGetAllVersions": () => HttpClientRequest.get(`/versions`).pipe(
    onRequest(["2xx"], {"404":"BasicError"})
  ),
  "metaGetZen": () => HttpClientRequest.get(`/zen`).pipe(
    onRequest([])
  )
  }
}

export interface Client {
  readonly httpClient: HttpClient.HttpClient
  /**
* Get Hypermedia links to resources accessible in GitHub's REST API
*/
readonly "metaRoot": () => Effect.Effect<Root, HttpClientError.HttpClientError>
  /**
* Lists all global security advisories that match the specified parameters. If no other parameters are defined, the request will return only GitHub-reviewed advisories that are not malware.
* 
* By default, all responses will exclude advisories for malware, because malware are not standard vulnerabilities. To list advisories for malware, you must include the `type` parameter in your request, with the value `malware`. For more information about the different types of security advisories, see "[About the GitHub Advisory database](https://docs.github.com/code-security/security-advisories/global-security-advisories/about-the-github-advisory-database#about-types-of-security-advisories)."
*/
readonly "securityAdvisoriesListGlobalAdvisories": (options?: SecurityAdvisoriesListGlobalAdvisoriesParams | undefined) => Effect.Effect<SecurityAdvisoriesListGlobalAdvisories200, HttpClientError.HttpClientError | ClientError<"ValidationErrorSimple", ValidationErrorSimple> | ClientError<"BasicError", BasicError>>
  /**
* Gets a global security advisory using its GitHub Security Advisory (GHSA) identifier.
*/
readonly "securityAdvisoriesGetGlobalAdvisory": (ghsaId: string, options?: SecurityAdvisoriesGetGlobalAdvisoryParams | undefined) => Effect.Effect<GlobalAdvisory, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/apps/apps#list-installations-for-the-authenticated-app)" endpoint.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsGetAuthenticated": () => Effect.Effect<Integration, HttpClientError.HttpClientError>
  /**
* Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
*/
readonly "appsCreateFromManifest": (code: string) => Effect.Effect<AppsCreateFromManifest201, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsGetWebhookConfigForApp": () => Effect.Effect<WebhookConfig, HttpClientError.HttpClientError>
  /**
* Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsUpdateWebhookConfigForApp": (options: AppsUpdateWebhookConfigForAppRequest) => Effect.Effect<WebhookConfig, HttpClientError.HttpClientError>
  /**
* Returns a list of webhook deliveries for the webhook configured for a GitHub App.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsListWebhookDeliveries": (options?: AppsListWebhookDeliveriesParams | undefined) => Effect.Effect<AppsListWebhookDeliveries200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Returns a delivery for the webhook configured for a GitHub App.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsGetWebhookDelivery": (deliveryId: string, options?: AppsGetWebhookDeliveryParams | undefined) => Effect.Effect<HookDelivery, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Redeliver a delivery for the webhook configured for a GitHub App.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsRedeliverWebhookDelivery": (deliveryId: string, options?: AppsRedeliverWebhookDeliveryParams | undefined) => Effect.Effect<AppsRedeliverWebhookDelivery202, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists all the pending installation requests for the authenticated GitHub App.
*/
readonly "appsListInstallationRequestsForAuthenticatedApp": (options?: AppsListInstallationRequestsForAuthenticatedAppParams | undefined) => Effect.Effect<AppsListInstallationRequestsForAuthenticatedApp200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* The permissions the installation has are included under the `permissions` key.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsListInstallations": (options?: AppsListInstallationsParams | undefined) => Effect.Effect<AppsListInstallations200, HttpClientError.HttpClientError>
  /**
* Enables an authenticated GitHub App to find an installation's information using the installation id.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsGetInstallation": (installationId: string, options?: AppsGetInstallationParams | undefined) => Effect.Effect<Installation, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Uninstalls a GitHub App on a user, organization, or enterprise account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/apps/apps#suspend-an-app-installation)" endpoint.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsDeleteInstallation": (installationId: string, options?: AppsDeleteInstallationParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access.
* 
* Optionally, you can use the `repositories` or `repository_ids` body parameters to specify individual repositories that the installation access token can access. If you don't use `repositories` or `repository_ids` to grant access to specific repositories, the installation access token will have access to all repositories that the installation was granted access to. The installation access token cannot be granted access to repositories that the installation was not granted access to. Up to 500 repositories can be listed in this manner.
* 
* Optionally, use the `permissions` body parameter to specify the permissions that the installation access token should have. If `permissions` is not specified, the installation access token will have all of the permissions that were granted to the app. The installation access token cannot be granted permissions that the app was not granted.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsCreateInstallationAccessToken": (installationId: string, options: { readonly params?: AppsCreateInstallationAccessTokenParams | undefined; readonly payload: AppsCreateInstallationAccessTokenRequest }) => Effect.Effect<InstallationToken, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Suspends a GitHub App on a user, organization, or enterprise account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsSuspendInstallation": (installationId: string, options?: AppsSuspendInstallationParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Removes a GitHub App installation suspension.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsUnsuspendInstallation": (installationId: string, options?: AppsUnsuspendInstallationParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* OAuth and GitHub application owners can revoke a grant for their application and a specific user. You must provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
* Deleting an application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
*/
readonly "appsDeleteAuthorization": (clientId: string, options: { readonly params?: AppsDeleteAuthorizationParams | undefined; readonly payload: AppsDeleteAuthorizationRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* OAuth applications and GitHub applications with OAuth authorizations can use this API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. Invalid tokens will return `404 NOT FOUND`.
*/
readonly "appsCheckToken": (clientId: string, options: { readonly params?: AppsCheckTokenParams | undefined; readonly payload: AppsCheckTokenRequest }) => Effect.Effect<Authorization, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* OAuth  or GitHub application owners can revoke a single token for an OAuth application or a GitHub application with an OAuth authorization.
*/
readonly "appsDeleteToken": (clientId: string, options: { readonly params?: AppsDeleteTokenParams | undefined; readonly payload: AppsDeleteTokenRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* OAuth applications and GitHub applications with OAuth authorizations can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. Invalid tokens will return `404 NOT FOUND`.
*/
readonly "appsResetToken": (clientId: string, options: { readonly params?: AppsResetTokenParams | undefined; readonly payload: AppsResetTokenRequest }) => Effect.Effect<Authorization, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Use a non-scoped user access token to create a repository-scoped and/or permission-scoped user access token. You can specify
* which repositories the token can access and which permissions are granted to the
* token.
* 
* Invalid tokens will return `404 NOT FOUND`.
*/
readonly "appsScopeToken": (clientId: string, options: { readonly params?: AppsScopeTokenParams | undefined; readonly payload: AppsScopeTokenRequest }) => Effect.Effect<Authorization, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* > [!NOTE]
* > The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
*/
readonly "appsGetBySlug": (appSlug: string, options?: AppsGetBySlugParams | undefined) => Effect.Effect<Integration, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Gets a GitHub Classroom assignment. Assignment will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
*/
readonly "classroomGetAnAssignment": (assignmentId: string, options?: ClassroomGetAnAssignmentParams | undefined) => Effect.Effect<ClassroomAssignment, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Lists any assignment repositories that have been created by students accepting a GitHub Classroom assignment. Accepted assignments will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
*/
readonly "classroomListAcceptedAssignmentsForAnAssignment": (assignmentId: string, options?: ClassroomListAcceptedAssignmentsForAnAssignmentParams | undefined) => Effect.Effect<ClassroomListAcceptedAssignmentsForAnAssignment200, HttpClientError.HttpClientError>
  /**
* Gets grades for a GitHub Classroom assignment. Grades will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
*/
readonly "classroomGetAssignmentGrades": (assignmentId: string, options?: ClassroomGetAssignmentGradesParams | undefined) => Effect.Effect<ClassroomGetAssignmentGrades200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Lists GitHub Classroom classrooms for the current user. Classrooms will only be returned if the current user is an administrator of one or more GitHub Classrooms.
*/
readonly "classroomListClassrooms": (options?: ClassroomListClassroomsParams | undefined) => Effect.Effect<ClassroomListClassrooms200, HttpClientError.HttpClientError>
  /**
* Gets a GitHub Classroom classroom for the current user. Classroom will only be returned if the current user is an administrator of the GitHub Classroom.
*/
readonly "classroomGetAClassroom": (classroomId: string, options?: ClassroomGetAClassroomParams | undefined) => Effect.Effect<Classroom, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Lists GitHub Classroom assignments for a classroom. Assignments will only be returned if the current user is an administrator of the GitHub Classroom.
*/
readonly "classroomListAssignmentsForAClassroom": (classroomId: string, options?: ClassroomListAssignmentsForAClassroomParams | undefined) => Effect.Effect<ClassroomListAssignmentsForAClassroom200, HttpClientError.HttpClientError>
  /**
* Returns array of all GitHub's codes of conduct.
*/
readonly "codesOfConductGetAllCodesOfConduct": () => Effect.Effect<CodesOfConductGetAllCodesOfConduct200, HttpClientError.HttpClientError>
  /**
* Returns information about the specified GitHub code of conduct.
*/
readonly "codesOfConductGetConductCode": (key: string) => Effect.Effect<CodeOfConduct, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Submit a list of credentials to be revoked. This endpoint is intended to revoke credentials the caller does not own and may have found exposed on GitHub.com or elsewhere. It can also be used for credentials associated with an old user account that you no longer have access to. Credential owners will be notified of the revocation.
* 
* This endpoint currently accepts the following credential types:
* - Personal access tokens (classic)
* - Fine-grained personal access tokens
* 
* Revoked credentials may impact users on GitHub Free, Pro, & Team and GitHub Enterprise Cloud, and GitHub Enterprise Cloud with Enterprise Managed Users.
* GitHub cannot reactivate any credentials that have been revoked; new credentials will need to be generated.
* 
* To prevent abuse, this API is limited to only 60 unauthenticated requests per hour and a max of 1000 tokens per API request.
* 
* > [!NOTE]
* > Any authenticated requests will return a 403.
*/
readonly "credentialsRevoke": (options: CredentialsRevokeRequest) => Effect.Effect<CredentialsRevoke202, HttpClientError.HttpClientError | ClientError<"ValidationErrorSimple", ValidationErrorSimple> | ClientError<"BasicError", BasicError>>
  /**
* Lists all the emojis available to use on GitHub.
*/
readonly "emojisGet": () => Effect.Effect<EmojisGet200, HttpClientError.HttpClientError>
  /**
* Lists all code security configurations available in an enterprise.
* 
* The authenticated user must be an administrator of the enterprise in order to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.
*/
readonly "codeSecurityGetConfigurationsForEnterprise": (enterprise: string, options?: CodeSecurityGetConfigurationsForEnterpriseParams | undefined) => Effect.Effect<CodeSecurityGetConfigurationsForEnterprise200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Creates a code security configuration in an enterprise.
* 
* The authenticated user must be an administrator of the enterprise in order to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
*/
readonly "codeSecurityCreateConfigurationForEnterprise": (enterprise: string, options: { readonly params?: CodeSecurityCreateConfigurationForEnterpriseParams | undefined; readonly payload: CodeSecurityCreateConfigurationForEnterpriseRequest }) => Effect.Effect<CodeSecurityConfiguration, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists the default code security configurations for an enterprise.
* 
* The authenticated user must be an administrator of the enterprise in order to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.
*/
readonly "codeSecurityGetDefaultConfigurationsForEnterprise": (enterprise: string, options?: CodeSecurityGetDefaultConfigurationsForEnterpriseParams | undefined) => Effect.Effect<CodeSecurityDefaultConfigurations, HttpClientError.HttpClientError>
  /**
* Gets a code security configuration available in an enterprise.
* 
* The authenticated user must be an administrator of the enterprise in order to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.
*/
readonly "codeSecurityGetSingleConfigurationForEnterprise": (enterprise: string, configurationId: string, options?: CodeSecurityGetSingleConfigurationForEnterpriseParams | undefined) => Effect.Effect<CodeSecurityConfiguration, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Deletes a code security configuration from an enterprise.
* Repositories attached to the configuration will retain their settings but will no longer be associated with
* the configuration.
* 
* The authenticated user must be an administrator for the enterprise to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
*/
readonly "codeSecurityDeleteConfigurationForEnterprise": (enterprise: string, configurationId: string, options?: CodeSecurityDeleteConfigurationForEnterpriseParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Updates a code security configuration in an enterprise.
* 
* The authenticated user must be an administrator of the enterprise in order to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
*/
readonly "codeSecurityUpdateEnterpriseConfiguration": (enterprise: string, configurationId: string, options: { readonly params?: CodeSecurityUpdateEnterpriseConfigurationParams | undefined; readonly payload: CodeSecurityUpdateEnterpriseConfigurationRequest }) => Effect.Effect<CodeSecurityConfiguration, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Attaches an enterprise code security configuration to repositories. If the repositories specified are already attached to a configuration, they will be re-attached to the provided configuration.
* 
* If insufficient GHAS licenses are available to attach the configuration to a repository, only free features will be enabled.
* 
* The authenticated user must be an administrator for the enterprise to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
*/
readonly "codeSecurityAttachEnterpriseConfiguration": (enterprise: string, configurationId: string, options: { readonly params?: CodeSecurityAttachEnterpriseConfigurationParams | undefined; readonly payload: CodeSecurityAttachEnterpriseConfigurationRequest }) => Effect.Effect<CodeSecurityAttachEnterpriseConfiguration202, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Sets a code security configuration as a default to be applied to new repositories in your enterprise.
* 
* This configuration will be applied by default to the matching repository type when created, but only for organizations within the enterprise that do not already have a default code security configuration set.
* 
* The authenticated user must be an administrator for the enterprise to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
*/
readonly "codeSecuritySetConfigurationAsDefaultForEnterprise": (enterprise: string, configurationId: string, options: { readonly params?: CodeSecuritySetConfigurationAsDefaultForEnterpriseParams | undefined; readonly payload: CodeSecuritySetConfigurationAsDefaultForEnterpriseRequest }) => Effect.Effect<CodeSecuritySetConfigurationAsDefaultForEnterprise200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists the repositories associated with an enterprise code security configuration in an organization.
* 
* The authenticated user must be an administrator of the enterprise in order to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.
*/
readonly "codeSecurityGetRepositoriesForEnterpriseConfiguration": (enterprise: string, configurationId: string, options?: CodeSecurityGetRepositoriesForEnterpriseConfigurationParams | undefined) => Effect.Effect<CodeSecurityGetRepositoriesForEnterpriseConfiguration200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists Dependabot alerts for repositories that are owned by the specified enterprise.
* 
* The authenticated user must be a member of the enterprise to use this endpoint.
* 
* Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint.
*/
readonly "dependabotListAlertsForEnterprise": (enterprise: string, options?: DependabotListAlertsForEnterpriseParams | undefined) => Effect.Effect<DependabotListAlertsForEnterprise200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
* 
* Alerts are only returned for organizations in the enterprise for which the authenticated user is an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
* 
* The authenticated user must be a member of the enterprise in order to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope or `security_events` scope to use this endpoint.
*/
readonly "secretScanningListAlertsForEnterprise": (enterprise: string, options?: SecretScanningListAlertsForEnterpriseParams | undefined) => Effect.Effect<SecretScanningListAlertsForEnterprise200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"SecretScanningListAlertsForEnterprise503", SecretScanningListAlertsForEnterprise503>>
  /**
* > [!NOTE]
* > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
*/
readonly "activityListPublicEvents": (options?: ActivityListPublicEventsParams | undefined) => Effect.Effect<ActivityListPublicEvents200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ActivityListPublicEvents503", ActivityListPublicEvents503>>
  /**
* Lists the feeds available to the authenticated user. The response provides a URL for each feed. You can then get a specific feed by sending a request to one of the feed URLs.
* 
* *   **Timeline**: The GitHub global public timeline
* *   **User**: The public timeline for any user, using `uri_template`. For more information, see "[Hypermedia](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
* *   **Current user public**: The public timeline for the authenticated user
* *   **Current user**: The private timeline for the authenticated user
* *   **Current user actor**: The private timeline for activity created by the authenticated user
* *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
* *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
* 
* By default, timeline resources are returned in JSON. You can specify the `application/atom+xml` type in the `Accept` header to return timeline resources in Atom format. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* > [!NOTE]
* > Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) since current feed URIs use the older, non revocable auth tokens.
*/
readonly "activityGetFeeds": () => Effect.Effect<Feed, HttpClientError.HttpClientError>
  /**
* Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
*/
readonly "gistsList": (options?: GistsListParams | undefined) => Effect.Effect<GistsList200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Allows you to add a new gist with one or more files.
* 
* > [!NOTE]
* > Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
*/
readonly "gistsCreate": (options: GistsCreateRequest) => Effect.Effect<GistSimple, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* List public gists sorted by most recently updated to least recently updated.
* 
* Note: With [pagination](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
*/
readonly "gistsListPublic": (options?: GistsListPublicParams | undefined) => Effect.Effect<GistsListPublic200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* List the authenticated user's starred gists:
*/
readonly "gistsListStarred": (options?: GistsListStarredParams | undefined) => Effect.Effect<GistsListStarred200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Gets a specified gist.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
*/
readonly "gistsGet": (gistId: string, options?: GistsGetParams | undefined) => Effect.Effect<GistSimple, HttpClientError.HttpClientError | ClientError<"GistsGet403", GistsGet403> | ClientError<"BasicError", BasicError>>
  /**
* Delete a gist
*/
readonly "gistsDelete": (gistId: string, options?: GistsDeleteParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Allows you to update a gist's description and to update, delete, or rename gist files. Files
* from the previous version of the gist that aren't explicitly changed during an edit
* are unchanged.
* 
* At least one of `description` or `files` is required.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
*/
readonly "gistsUpdate": (gistId: string, options: { readonly params?: GistsUpdateParams | undefined; readonly payload: GistsUpdateRequest }) => Effect.Effect<GistSimple, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists the comments on a gist.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
*/
readonly "gistsListComments": (gistId: string, options?: GistsListCommentsParams | undefined) => Effect.Effect<GistsListComments200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Creates a comment on a gist.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
*/
readonly "gistsCreateComment": (gistId: string, options: { readonly params?: GistsCreateCommentParams | undefined; readonly payload: GistsCreateCommentRequest }) => Effect.Effect<GistComment, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Gets a comment on a gist.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
*/
readonly "gistsGetComment": (gistId: string, commentId: string, options?: GistsGetCommentParams | undefined) => Effect.Effect<GistComment, HttpClientError.HttpClientError | ClientError<"GistsGetComment403", GistsGetComment403> | ClientError<"BasicError", BasicError>>
  /**
* Delete a gist comment
*/
readonly "gistsDeleteComment": (gistId: string, commentId: string, options?: GistsDeleteCommentParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Updates a comment on a gist.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
*/
readonly "gistsUpdateComment": (gistId: string, commentId: string, options: { readonly params?: GistsUpdateCommentParams | undefined; readonly payload: GistsUpdateCommentRequest }) => Effect.Effect<GistComment, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* List gist commits
*/
readonly "gistsListCommits": (gistId: string, options?: GistsListCommitsParams | undefined) => Effect.Effect<GistsListCommits200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* List gist forks
*/
readonly "gistsListForks": (gistId: string, options?: GistsListForksParams | undefined) => Effect.Effect<GistsListForks200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Fork a gist
*/
readonly "gistsFork": (gistId: string, options?: GistsForkParams | undefined) => Effect.Effect<BaseGist, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Check if a gist is starred
*/
readonly "gistsCheckIsStarred": (gistId: string, options?: GistsCheckIsStarredParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"GistsCheckIsStarred404", GistsCheckIsStarred404>>
  /**
* Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
readonly "gistsStar": (gistId: string, options?: GistsStarParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Unstar a gist
*/
readonly "gistsUnstar": (gistId: string, options?: GistsUnstarParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Gets a specified gist revision.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
*/
readonly "gistsGetRevision": (gistId: string, sha: string, options?: GistsGetRevisionParams | undefined) => Effect.Effect<GistSimple, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user).
*/
readonly "gitignoreGetAllTemplates": () => Effect.Effect<GitignoreGetAllTemplates200, HttpClientError.HttpClientError>
  /**
* Get the content of a gitignore template.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw .gitignore contents.
*/
readonly "gitignoreGetTemplate": (name: string) => Effect.Effect<GitignoreTemplate, HttpClientError.HttpClientError>
  /**
* List repositories that an app installation can access.
*/
readonly "appsListReposAccessibleToInstallation": (options?: AppsListReposAccessibleToInstallationParams | undefined) => Effect.Effect<AppsListReposAccessibleToInstallation200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Revokes the installation token you're using to authenticate as an installation and access this endpoint.
* 
* Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/apps/apps#create-an-installation-access-token-for-an-app)" endpoint.
*/
readonly "appsRevokeInstallationAccessToken": () => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* List issues assigned to the authenticated user across all visible repositories including owned repositories, member
* repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
* necessarily assigned to you.
* 
* > [!NOTE]
* > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesList": (options?: IssuesListParams | undefined) => Effect.Effect<IssuesList200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists the most commonly used licenses on GitHub. For more information, see "[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."
*/
readonly "licensesGetAllCommonlyUsed": (options?: LicensesGetAllCommonlyUsedParams | undefined) => Effect.Effect<LicensesGetAllCommonlyUsed200, HttpClientError.HttpClientError>
  /**
* Gets information about a specific license. For more information, see "[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."
*/
readonly "licensesGet": (license: string) => Effect.Effect<License, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Depending on what is rendered in the Markdown, you may need to provide additional token scopes for labels, such as `issues:read` or `pull_requests:read`.
*/
readonly "markdownRender": (options: MarkdownRenderRequest) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
*/
readonly "markdownRenderRaw": () => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
* 
* GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
*/
readonly "appsGetSubscriptionPlanForAccount": (accountId: string, options?: AppsGetSubscriptionPlanForAccountParams | undefined) => Effect.Effect<MarketplacePurchase, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists all plans that are part of your GitHub Marketplace listing.
* 
* GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
*/
readonly "appsListPlans": (options?: AppsListPlansParams | undefined) => Effect.Effect<AppsListPlans200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
* 
* GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
*/
readonly "appsListAccountsForPlan": (planId: string, options?: AppsListAccountsForPlanParams | undefined) => Effect.Effect<AppsListAccountsForPlan200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
* 
* GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
*/
readonly "appsGetSubscriptionPlanForAccountStubbed": (accountId: string, options?: AppsGetSubscriptionPlanForAccountStubbedParams | undefined) => Effect.Effect<MarketplacePurchase, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Lists all plans that are part of your GitHub Marketplace listing.
* 
* GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
*/
readonly "appsListPlansStubbed": (options?: AppsListPlansStubbedParams | undefined) => Effect.Effect<AppsListPlansStubbed200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
* 
* GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
*/
readonly "appsListAccountsForPlanStubbed": (planId: string, options?: AppsListAccountsForPlanStubbedParams | undefined) => Effect.Effect<AppsListAccountsForPlanStubbed200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)."
* 
* The API's response also includes a list of GitHub's domain names.
* 
* The values shown in the documentation's response are example values. You must always query the API directly to get the latest values.
* 
* > [!NOTE]
* > This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.
*/
readonly "metaGet": () => Effect.Effect<ApiOverview, HttpClientError.HttpClientError>
  /**
* > [!NOTE]
* > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
*/
readonly "activityListPublicEventsForRepoNetwork": (owner: string, repo: string, options?: ActivityListPublicEventsForRepoNetworkParams | undefined) => Effect.Effect<ActivityListPublicEventsForRepoNetwork200 | BasicError, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* List all notifications for the current user, sorted by most recently updated.
*/
readonly "activityListNotificationsForAuthenticatedUser": (options?: ActivityListNotificationsForAuthenticatedUserParams | undefined) => Effect.Effect<ActivityListNotificationsForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
*/
readonly "activityMarkNotificationsAsRead": (options: ActivityMarkNotificationsAsReadRequest) => Effect.Effect<ActivityMarkNotificationsAsRead202, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Gets information about a notification thread.
*/
readonly "activityGetThread": (threadId: string, options?: ActivityGetThreadParams | undefined) => Effect.Effect<Thread, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Marks a thread as "done." Marking a thread as "done" is equivalent to marking a notification in your notification inbox on GitHub as done: https://github.com/notifications.
*/
readonly "activityMarkThreadAsDone": (threadId: string, options?: ActivityMarkThreadAsDoneParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub: https://github.com/notifications.
*/
readonly "activityMarkThreadAsRead": (threadId: string, options?: ActivityMarkThreadAsReadParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/activity/watching#get-a-repository-subscription).
* 
* Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
*/
readonly "activityGetThreadSubscriptionForAuthenticatedUser": (threadId: string, options?: ActivityGetThreadSubscriptionForAuthenticatedUserParams | undefined) => Effect.Effect<ThreadSubscription, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
* 
* You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
* 
* Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/activity/notifications#delete-a-thread-subscription) endpoint.
*/
readonly "activitySetThreadSubscription": (threadId: string, options: { readonly params?: ActivitySetThreadSubscriptionParams | undefined; readonly payload: ActivitySetThreadSubscriptionRequest }) => Effect.Effect<ThreadSubscription, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/activity/notifications#set-a-thread-subscription) endpoint and set `ignore` to `true`.
*/
readonly "activityDeleteThreadSubscription": (threadId: string, options?: ActivityDeleteThreadSubscriptionParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Get the octocat as ASCII art
*/
readonly "metaGetOctocat": (options?: MetaGetOctocatParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists all organizations, in the order that they were created.
* 
* > [!NOTE]
* > Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations.
*/
readonly "orgsList": (options?: OrgsListParams | undefined) => Effect.Effect<OrgsList200, HttpClientError.HttpClientError>
  /**
* Lists repositories that organization admins have allowed Dependabot to access when updating dependencies.
* > [!NOTE]
* >    This operation supports both server-to-server and user-to-server access.
* Unauthorized users will not see the existence of this endpoint.
*/
readonly "dependabotRepositoryAccessForOrg": (org: string, options?: DependabotRepositoryAccessForOrgParams | undefined) => Effect.Effect<DependabotRepositoryAccessDetails, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Updates repositories according to the list of repositories that organization admins have given Dependabot access to when they've updated dependencies.
* 
* > [!NOTE]
* >    This operation supports both server-to-server and user-to-server access.
* Unauthorized users will not see the existence of this endpoint.
* 
* **Example request body:**
* ```json
* {
*   "repository_ids_to_add": [123, 456],
*   "repository_ids_to_remove": [789]
* }
* ```
*/
readonly "dependabotUpdateRepositoryAccessForOrg": (org: string, options: { readonly params?: DependabotUpdateRepositoryAccessForOrgParams | undefined; readonly payload: DependabotUpdateRepositoryAccessForOrgRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Sets the default level of repository access Dependabot will have while performing an update.  Available values are:
* - 'public' - Dependabot will only have access to public repositories, unless access is explicitly granted to non-public repositories.
* - 'internal' - Dependabot will only have access to public and internal repositories, unless access is explicitly granted to private repositories.
* 
* Unauthorized users will not see the existence of this endpoint.
* 
* This operation supports both server-to-server and user-to-server access.
*/
readonly "dependabotSetRepositoryAccessDefaultLevel": (org: string, options: { readonly params?: DependabotSetRepositoryAccessDefaultLevelParams | undefined; readonly payload: DependabotSetRepositoryAccessDefaultLevelRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Gets a report of the total usage for an organization. To use this endpoint, you must be an administrator of an organization within an enterprise or an organization account.
* 
* **Note:** This endpoint is only available to organizations with access to the enhanced billing platform. For more information, see "[About the enhanced billing platform](https://docs.github.com/billing/using-the-new-billing-platform)."
*/
readonly "billingGetGithubBillingUsageReportOrg": (org: string, options?: BillingGetGithubBillingUsageReportOrgParams | undefined) => Effect.Effect<BillingUsageReport, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BillingGetGithubBillingUsageReportOrg503", BillingGetGithubBillingUsageReportOrg503>>
  /**
* Gets information about an organization.
* 
* When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, outside collaborators, guest collaborators, repository collaborators, or everyone with access to any repository within the organization to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
* 
* To see the full details about an organization, the authenticated user must be an organization owner.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to see the full details about an organization.
* 
* To see information about an organization's GitHub plan, GitHub Apps need the `Organization plan` permission.
*/
readonly "orgsGet": (org: string, options?: OrgsGetParams | undefined) => Effect.Effect<OrganizationFull, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Deletes an organization and all its repositories.
* 
* The organization login will be unavailable for 90 days after deletion.
* 
* Please review the Terms of Service regarding account deletion before using this endpoint:
* 
* https://docs.github.com/site-policy/github-terms/github-terms-of-service
*/
readonly "orgsDelete": (org: string, options?: OrgsDeleteParams | undefined) => Effect.Effect<OrgsDelete202, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Closing down notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
* 
* > [!WARNING]
* > **Closing down notice:** Code security product enablement for new repositories through the organization API is closing down. Please use [code security configurations](https://docs.github.com/rest/code-security/configurations#set-a-code-security-configuration-as-a-default-for-an-organization) to set defaults instead. For more information on setting a default security configuration, see the [changelog](https://github.blog/changelog/2024-07-09-sunsetting-security-settings-defaults-parameters-in-the-organizations-rest-api/).
* 
* Updates the organization's profile and member privileges.
* 
* The authenticated user must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` or `repo` scope to use this endpoint.
*/
readonly "orgsUpdate": (org: string, options: { readonly params?: OrgsUpdateParams | undefined; readonly payload: OrgsUpdateRequest }) => Effect.Effect<OrganizationFull, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"OrgsUpdate422", OrgsUpdate422>>
  /**
* Gets the total GitHub Actions cache usage for an organization.
* The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
* 
* OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
*/
readonly "actionsGetActionsCacheUsageForOrg": (org: string, options?: ActionsGetActionsCacheUsageForOrgParams | undefined) => Effect.Effect<ActionsCacheUsageOrgEnterprise, HttpClientError.HttpClientError>
  /**
* Lists repositories and their GitHub Actions cache usage for an organization.
* The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
* 
* OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
*/
readonly "actionsGetActionsCacheUsageByRepoForOrg": (org: string, options?: ActionsGetActionsCacheUsageByRepoForOrgParams | undefined) => Effect.Effect<ActionsGetActionsCacheUsageByRepoForOrg200, HttpClientError.HttpClientError>
  /**
* Lists all GitHub-hosted runners configured in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `manage_runner:org` scope to use this endpoint.
*/
readonly "actionsListHostedRunnersForOrg": (org: string, options?: ActionsListHostedRunnersForOrgParams | undefined) => Effect.Effect<ActionsListHostedRunnersForOrg200, HttpClientError.HttpClientError>
  /**
* Creates a GitHub-hosted runner for an organization.
* OAuth tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.
*/
readonly "actionsCreateHostedRunnerForOrg": (org: string, options: { readonly params?: ActionsCreateHostedRunnerForOrgParams | undefined; readonly payload: ActionsCreateHostedRunnerForOrgRequest }) => Effect.Effect<ActionsHostedRunner, HttpClientError.HttpClientError>
  /**
* Get the list of GitHub-owned images available for GitHub-hosted runners for an organization.
*/
readonly "actionsGetHostedRunnersGithubOwnedImagesForOrg": (org: string, options?: ActionsGetHostedRunnersGithubOwnedImagesForOrgParams | undefined) => Effect.Effect<ActionsGetHostedRunnersGithubOwnedImagesForOrg200, HttpClientError.HttpClientError>
  /**
* Get the list of partner images available for GitHub-hosted runners for an organization.
*/
readonly "actionsGetHostedRunnersPartnerImagesForOrg": (org: string, options?: ActionsGetHostedRunnersPartnerImagesForOrgParams | undefined) => Effect.Effect<ActionsGetHostedRunnersPartnerImagesForOrg200, HttpClientError.HttpClientError>
  /**
* Get the GitHub-hosted runners limits for an organization.
*/
readonly "actionsGetHostedRunnersLimitsForOrg": (org: string, options?: ActionsGetHostedRunnersLimitsForOrgParams | undefined) => Effect.Effect<ActionsHostedRunnerLimits, HttpClientError.HttpClientError>
  /**
* Get the list of machine specs available for GitHub-hosted runners for an organization.
*/
readonly "actionsGetHostedRunnersMachineSpecsForOrg": (org: string, options?: ActionsGetHostedRunnersMachineSpecsForOrgParams | undefined) => Effect.Effect<ActionsGetHostedRunnersMachineSpecsForOrg200, HttpClientError.HttpClientError>
  /**
* Get the list of platforms available for GitHub-hosted runners for an organization.
*/
readonly "actionsGetHostedRunnersPlatformsForOrg": (org: string, options?: ActionsGetHostedRunnersPlatformsForOrgParams | undefined) => Effect.Effect<ActionsGetHostedRunnersPlatformsForOrg200, HttpClientError.HttpClientError>
  /**
* Gets a GitHub-hosted runner configured in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.
*/
readonly "actionsGetHostedRunnerForOrg": (org: string, hostedRunnerId: string, options?: ActionsGetHostedRunnerForOrgParams | undefined) => Effect.Effect<ActionsHostedRunner, HttpClientError.HttpClientError>
  /**
* Deletes a GitHub-hosted runner for an organization.
*/
readonly "actionsDeleteHostedRunnerForOrg": (org: string, hostedRunnerId: string, options?: ActionsDeleteHostedRunnerForOrgParams | undefined) => Effect.Effect<ActionsHostedRunner, HttpClientError.HttpClientError>
  /**
* Updates a GitHub-hosted runner for an organization.
* OAuth app tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.
*/
readonly "actionsUpdateHostedRunnerForOrg": (org: string, hostedRunnerId: string, options: { readonly params?: ActionsUpdateHostedRunnerForOrgParams | undefined; readonly payload: ActionsUpdateHostedRunnerForOrgRequest }) => Effect.Effect<ActionsHostedRunner, HttpClientError.HttpClientError>
  /**
* Gets the customization template for an OpenID Connect (OIDC) subject claim.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
*/
readonly "oidcGetOidcCustomSubTemplateForOrg": (org: string, options?: OidcGetOidcCustomSubTemplateForOrgParams | undefined) => Effect.Effect<OidcCustomSub, HttpClientError.HttpClientError>
  /**
* Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "oidcUpdateOidcCustomSubTemplateForOrg": (org: string, options: { readonly params?: OidcUpdateOidcCustomSubTemplateForOrgParams | undefined; readonly payload: OidcCustomSub }) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsGetGithubActionsPermissionsOrganization": (org: string, options?: ActionsGetGithubActionsPermissionsOrganizationParams | undefined) => Effect.Effect<ActionsOrganizationPermissions, HttpClientError.HttpClientError>
  /**
* Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsSetGithubActionsPermissionsOrganization": (org: string, options: { readonly params?: ActionsSetGithubActionsPermissionsOrganizationParams | undefined; readonly payload: ActionsSetGithubActionsPermissionsOrganizationRequest }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Gets artifact and log retention settings for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
*/
readonly "actionsGetArtifactAndLogRetentionSettingsOrganization": (org: string, options?: ActionsGetArtifactAndLogRetentionSettingsOrganizationParams | undefined) => Effect.Effect<ActionsArtifactAndLogRetentionResponse, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Sets artifact and log retention settings for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
*/
readonly "actionsSetArtifactAndLogRetentionSettingsOrganization": (org: string, options: { readonly params?: ActionsSetArtifactAndLogRetentionSettingsOrganizationParams | undefined; readonly payload: ActionsArtifactAndLogRetention }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Gets the fork PR contributor approval policy for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
*/
readonly "actionsGetForkPrContributorApprovalPermissionsOrganization": (org: string, options?: ActionsGetForkPrContributorApprovalPermissionsOrganizationParams | undefined) => Effect.Effect<ActionsForkPrContributorApproval, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Sets the fork PR contributor approval policy for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsSetForkPrContributorApprovalPermissionsOrganization": (org: string, options: { readonly params?: ActionsSetForkPrContributorApprovalPermissionsOrganizationParams | undefined; readonly payload: ActionsForkPrContributorApproval }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Gets the settings for whether workflows from fork pull requests can run on private repositories in an organization.
*/
readonly "actionsGetPrivateRepoForkPrWorkflowsSettingsOrganization": (org: string, options?: ActionsGetPrivateRepoForkPrWorkflowsSettingsOrganizationParams | undefined) => Effect.Effect<ActionsForkPrWorkflowsPrivateRepos, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Sets the settings for whether workflows from fork pull requests can run on private repositories in an organization.
*/
readonly "actionsSetPrivateRepoForkPrWorkflowsSettingsOrganization": (org: string, options: { readonly params?: ActionsSetPrivateRepoForkPrWorkflowsSettingsOrganizationParams | undefined; readonly payload: ActionsForkPrWorkflowsPrivateReposRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsListSelectedRepositoriesEnabledGithubActionsOrganization": (org: string, options?: ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams | undefined) => Effect.Effect<ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200, HttpClientError.HttpClientError>
  /**
* Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
* 
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsSetSelectedRepositoriesEnabledGithubActionsOrganization": (org: string, options: { readonly params?: ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParams | undefined; readonly payload: ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsEnableSelectedRepositoryGithubActionsOrganization": (org: string, repositoryId: string, options?: ActionsEnableSelectedRepositoryGithubActionsOrganizationParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsDisableSelectedRepositoryGithubActionsOrganization": (org: string, repositoryId: string, options?: ActionsDisableSelectedRepositoryGithubActionsOrganizationParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsGetAllowedActionsOrganization": (org: string, options?: ActionsGetAllowedActionsOrganizationParams | undefined) => Effect.Effect<SelectedActions, HttpClientError.HttpClientError>
  /**
* Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsSetAllowedActionsOrganization": (org: string, options: { readonly params?: ActionsSetAllowedActionsOrganizationParams | undefined; readonly payload: SelectedActions }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Gets the settings for self-hosted runners for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
*/
readonly "actionsGetSelfHostedRunnersPermissionsOrganization": (org: string, options?: ActionsGetSelfHostedRunnersPermissionsOrganizationParams | undefined) => Effect.Effect<SelfHostedRunnersSettings, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Sets the settings for self-hosted runners for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
*/
readonly "actionsSetSelfHostedRunnersPermissionsOrganization": (org: string, options: { readonly params?: ActionsSetSelfHostedRunnersPermissionsOrganizationParams | undefined; readonly payload: ActionsSetSelfHostedRunnersPermissionsOrganizationRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists repositories that are allowed to use self-hosted runners in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
*/
readonly "actionsListSelectedRepositoriesSelfHostedRunnersOrganization": (org: string, options?: ActionsListSelectedRepositoriesSelfHostedRunnersOrganizationParams | undefined) => Effect.Effect<ActionsListSelectedRepositoriesSelfHostedRunnersOrganization200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Sets repositories that are allowed to use self-hosted runners in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
*/
readonly "actionsSetSelectedRepositoriesSelfHostedRunnersOrganization": (org: string, options: { readonly params?: ActionsSetSelectedRepositoriesSelfHostedRunnersOrganizationParams | undefined; readonly payload: ActionsSetSelectedRepositoriesSelfHostedRunnersOrganizationRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Adds a repository to the list of repositories that are allowed to use self-hosted runners in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
*/
readonly "actionsEnableSelectedRepositorySelfHostedRunnersOrganization": (org: string, repositoryId: string, options?: ActionsEnableSelectedRepositorySelfHostedRunnersOrganizationParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Removes a repository from the list of repositories that are allowed to use self-hosted runners in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
*/
readonly "actionsDisableSelectedRepositorySelfHostedRunnersOrganization": (org: string, repositoryId: string, options?: ActionsDisableSelectedRepositorySelfHostedRunnersOrganizationParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
* as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
* "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsGetGithubActionsDefaultWorkflowPermissionsOrganization": (org: string, options?: ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationParams | undefined) => Effect.Effect<ActionsGetDefaultWorkflowPermissions, HttpClientError.HttpClientError>
  /**
* Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions
* can submit approving pull request reviews. For more information, see
* "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsSetGithubActionsDefaultWorkflowPermissionsOrganization": (org: string, options: { readonly params?: ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationParams | undefined; readonly payload: ActionsSetDefaultWorkflowPermissions }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsListSelfHostedRunnerGroupsForOrg": (org: string, options?: ActionsListSelfHostedRunnerGroupsForOrgParams | undefined) => Effect.Effect<ActionsListSelfHostedRunnerGroupsForOrg200, HttpClientError.HttpClientError>
  /**
* Creates a new self-hosted runner group for an organization.
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsCreateSelfHostedRunnerGroupForOrg": (org: string, options: { readonly params?: ActionsCreateSelfHostedRunnerGroupForOrgParams | undefined; readonly payload: ActionsCreateSelfHostedRunnerGroupForOrgRequest }) => Effect.Effect<RunnerGroupsOrg, HttpClientError.HttpClientError>
  /**
* Gets a specific self-hosted runner group for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsGetSelfHostedRunnerGroupForOrg": (org: string, runnerGroupId: string, options?: ActionsGetSelfHostedRunnerGroupForOrgParams | undefined) => Effect.Effect<RunnerGroupsOrg, HttpClientError.HttpClientError>
  /**
* Deletes a self-hosted runner group for an organization.
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsDeleteSelfHostedRunnerGroupFromOrg": (org: string, runnerGroupId: string, options?: ActionsDeleteSelfHostedRunnerGroupFromOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Updates the `name` and `visibility` of a self-hosted runner group in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsUpdateSelfHostedRunnerGroupForOrg": (org: string, runnerGroupId: string, options: { readonly params?: ActionsUpdateSelfHostedRunnerGroupForOrgParams | undefined; readonly payload: ActionsUpdateSelfHostedRunnerGroupForOrgRequest }) => Effect.Effect<RunnerGroupsOrg, HttpClientError.HttpClientError>
  /**
* Lists the GitHub-hosted runners in an organization group.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsListGithubHostedRunnersInGroupForOrg": (org: string, runnerGroupId: string, options?: ActionsListGithubHostedRunnersInGroupForOrgParams | undefined) => Effect.Effect<ActionsListGithubHostedRunnersInGroupForOrg200, HttpClientError.HttpClientError>
  /**
* Lists the repositories with access to a self-hosted runner group configured in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsListRepoAccessToSelfHostedRunnerGroupInOrg": (org: string, runnerGroupId: string, options?: ActionsListRepoAccessToSelfHostedRunnerGroupInOrgParams | undefined) => Effect.Effect<ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200, HttpClientError.HttpClientError>
  /**
* Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsSetRepoAccessToSelfHostedRunnerGroupInOrg": (org: string, runnerGroupId: string, options: { readonly params?: ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgParams | undefined; readonly payload: ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Adds a repository to the list of repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsAddRepoAccessToSelfHostedRunnerGroupInOrg": (org: string, runnerGroupId: string, repositoryId: string, options?: ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg": (org: string, runnerGroupId: string, repositoryId: string, options?: ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists self-hosted runners that are in a specific organization group.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsListSelfHostedRunnersInGroupForOrg": (org: string, runnerGroupId: string, options?: ActionsListSelfHostedRunnersInGroupForOrgParams | undefined) => Effect.Effect<ActionsListSelfHostedRunnersInGroupForOrg200, HttpClientError.HttpClientError>
  /**
* Replaces the list of self-hosted runners that are part of an organization runner group.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsSetSelfHostedRunnersInGroupForOrg": (org: string, runnerGroupId: string, options: { readonly params?: ActionsSetSelfHostedRunnersInGroupForOrgParams | undefined; readonly payload: ActionsSetSelfHostedRunnersInGroupForOrgRequest }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Adds a self-hosted runner to a runner group configured in an organization.
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsAddSelfHostedRunnerToGroupForOrg": (org: string, runnerGroupId: string, runnerId: string, options?: ActionsAddSelfHostedRunnerToGroupForOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsRemoveSelfHostedRunnerFromGroupForOrg": (org: string, runnerGroupId: string, runnerId: string, options?: ActionsRemoveSelfHostedRunnerFromGroupForOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists all self-hosted runners configured in an organization.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsListSelfHostedRunnersForOrg": (org: string, options?: ActionsListSelfHostedRunnersForOrgParams | undefined) => Effect.Effect<ActionsListSelfHostedRunnersForOrg200, HttpClientError.HttpClientError>
  /**
* Lists binaries for the runner application that you can download and run.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.  If the repository is private, the `repo` scope is also required.
*/
readonly "actionsListRunnerApplicationsForOrg": (org: string, options?: ActionsListRunnerApplicationsForOrgParams | undefined) => Effect.Effect<ActionsListRunnerApplicationsForOrg200, HttpClientError.HttpClientError>
  /**
* Generates a configuration that can be passed to the runner application at startup.
* 
* The authenticated user must have admin access to the organization.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGenerateRunnerJitconfigForOrg": (org: string, options: { readonly params?: ActionsGenerateRunnerJitconfigForOrgParams | undefined; readonly payload: ActionsGenerateRunnerJitconfigForOrgRequest }) => Effect.Effect<ActionsGenerateRunnerJitconfigForOrg201, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Returns a token that you can pass to the `config` script. The token expires after one hour.
* 
* For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:
* 
* ```
* ./config.sh --url https://github.com/octo-org --token TOKEN
* ```
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateRegistrationTokenForOrg": (org: string, options?: ActionsCreateRegistrationTokenForOrgParams | undefined) => Effect.Effect<AuthenticationToken, HttpClientError.HttpClientError>
  /**
* Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
* 
* For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:
* 
* ```
* ./config.sh remove --token TOKEN
* ```
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateRemoveTokenForOrg": (org: string, options?: ActionsCreateRemoveTokenForOrgParams | undefined) => Effect.Effect<AuthenticationToken, HttpClientError.HttpClientError>
  /**
* Gets a specific self-hosted runner configured in an organization.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsGetSelfHostedRunnerForOrg": (org: string, runnerId: string, options?: ActionsGetSelfHostedRunnerForOrgParams | undefined) => Effect.Effect<Runner, HttpClientError.HttpClientError>
  /**
* Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteSelfHostedRunnerFromOrg": (org: string, runnerId: string, options?: ActionsDeleteSelfHostedRunnerFromOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Lists all labels for a self-hosted runner configured in an organization.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsListLabelsForSelfHostedRunnerForOrg": (org: string, runnerId: string, options?: ActionsListLabelsForSelfHostedRunnerForOrgParams | undefined) => Effect.Effect<ActionsListLabelsForSelfHostedRunnerForOrg200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Remove all previous custom labels and set the new custom labels for a specific
* self-hosted runner configured in an organization.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsSetCustomLabelsForSelfHostedRunnerForOrg": (org: string, runnerId: string, options: { readonly params?: ActionsSetCustomLabelsForSelfHostedRunnerForOrgParams | undefined; readonly payload: ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest }) => Effect.Effect<ActionsSetCustomLabelsForSelfHostedRunnerForOrg200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Adds custom labels to a self-hosted runner configured in an organization.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsAddCustomLabelsToSelfHostedRunnerForOrg": (org: string, runnerId: string, options: { readonly params?: ActionsAddCustomLabelsToSelfHostedRunnerForOrgParams | undefined; readonly payload: ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest }) => Effect.Effect<ActionsAddCustomLabelsToSelfHostedRunnerForOrg200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Remove all custom labels from a self-hosted runner configured in an
* organization. Returns the remaining read-only labels from the runner.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg": (org: string, runnerId: string, options?: ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgParams | undefined) => Effect.Effect<ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Remove a custom label from a self-hosted runner configured
* in an organization. Returns the remaining labels from the runner.
* 
* This endpoint returns a `404 Not Found` status if the custom label is not
* present on the runner.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsRemoveCustomLabelFromSelfHostedRunnerForOrg": (org: string, runnerId: string, name: string, options?: ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgParams | undefined) => Effect.Effect<ActionsRemoveCustomLabelFromSelfHostedRunnerForOrg200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Lists all secrets available in an organization without revealing their
* encrypted values.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsListOrgSecrets": (org: string, options?: ActionsListOrgSecretsParams | undefined) => Effect.Effect<ActionsListOrgSecrets200, HttpClientError.HttpClientError>
  /**
* Gets your public key, which you need to encrypt secrets. You need to
* encrypt a secret before you can create or update secrets.
* 
* The authenticated user must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetOrgPublicKey": (org: string, options?: ActionsGetOrgPublicKeyParams | undefined) => Effect.Effect<ActionsPublicKey, HttpClientError.HttpClientError>
  /**
* Gets a single organization secret without revealing its encrypted value.
* 
* The authenticated user must have collaborator access to a repository to create, update, or read secrets
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetOrgSecret": (org: string, secretName: string, options?: ActionsGetOrgSecretParams | undefined) => Effect.Effect<OrganizationActionsSecret, HttpClientError.HttpClientError>
  /**
* Creates or updates an organization secret with an encrypted value. Encrypt your secret using
* [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateOrUpdateOrgSecret": (org: string, secretName: string, options: { readonly params?: ActionsCreateOrUpdateOrgSecretParams | undefined; readonly payload: ActionsCreateOrUpdateOrgSecretRequest }) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError>
  /**
* Deletes a secret in an organization using the secret name.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteOrgSecret": (org: string, secretName: string, options?: ActionsDeleteOrgSecretParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists all repositories that have been selected when the `visibility`
* for repository access to a secret is set to `selected`.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsListSelectedReposForOrgSecret": (org: string, secretName: string, options?: ActionsListSelectedReposForOrgSecretParams | undefined) => Effect.Effect<ActionsListSelectedReposForOrgSecret200, HttpClientError.HttpClientError>
  /**
* Replaces all repositories for an organization secret when the `visibility`
* for repository access is set to `selected`. The visibility is set when you [Create
* or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsSetSelectedReposForOrgSecret": (org: string, secretName: string, options: { readonly params?: ActionsSetSelectedReposForOrgSecretParams | undefined; readonly payload: ActionsSetSelectedReposForOrgSecretRequest }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Adds a repository to an organization secret when the `visibility` for
* repository access is set to `selected`. For more information about setting the visibility, see [Create or
* update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsAddSelectedRepoToOrgSecret": (org: string, secretName: string, repositoryId: string, options?: ActionsAddSelectedRepoToOrgSecretParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Removes a repository from an organization secret when the `visibility`
* for repository access is set to `selected`. The visibility is set when you [Create
* or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsRemoveSelectedRepoFromOrgSecret": (org: string, secretName: string, repositoryId: string, options?: ActionsRemoveSelectedRepoFromOrgSecretParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists all organization variables.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsListOrgVariables": (org: string, options?: ActionsListOrgVariablesParams | undefined) => Effect.Effect<ActionsListOrgVariables200, HttpClientError.HttpClientError>
  /**
* Creates an organization variable that you can reference in a GitHub Actions workflow.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateOrgVariable": (org: string, options: { readonly params?: ActionsCreateOrgVariableParams | undefined; readonly payload: ActionsCreateOrgVariableRequest }) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError>
  /**
* Gets a specific variable in an organization.
* 
* The authenticated user must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetOrgVariable": (org: string, name: string, options?: ActionsGetOrgVariableParams | undefined) => Effect.Effect<OrganizationActionsVariable, HttpClientError.HttpClientError>
  /**
* Deletes an organization variable using the variable name.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteOrgVariable": (org: string, name: string, options?: ActionsDeleteOrgVariableParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Updates an organization variable that you can reference in a GitHub Actions workflow.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsUpdateOrgVariable": (org: string, name: string, options: { readonly params?: ActionsUpdateOrgVariableParams | undefined; readonly payload: ActionsUpdateOrgVariableRequest }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists all repositories that can access an organization variable
* that is available to selected repositories.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsListSelectedReposForOrgVariable": (org: string, name: string, options?: ActionsListSelectedReposForOrgVariableParams | undefined) => Effect.Effect<ActionsListSelectedReposForOrgVariable200, HttpClientError.HttpClientError>
  /**
* Replaces all repositories for an organization variable that is available
* to selected repositories. Organization variables that are available to selected
* repositories have their `visibility` field set to `selected`.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsSetSelectedReposForOrgVariable": (org: string, name: string, options: { readonly params?: ActionsSetSelectedReposForOrgVariableParams | undefined; readonly payload: ActionsSetSelectedReposForOrgVariableRequest }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Adds a repository to an organization variable that is available to selected repositories.
* Organization variables that are available to selected repositories have their `visibility` field set to `selected`.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsAddSelectedRepoToOrgVariable": (org: string, name: string, repositoryId: string, options?: ActionsAddSelectedRepoToOrgVariableParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Removes a repository from an organization variable that is
* available to selected repositories. Organization variables that are available to
* selected repositories have their `visibility` field set to `selected`.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsRemoveSelectedRepoFromOrgVariable": (org: string, name: string, repositoryId: string, options?: ActionsRemoveSelectedRepoFromOrgVariableParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* List a collection of artifact attestations associated with any entry in a list of subject digests owned by an organization.
* 
* The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.
* 
* **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
*/
readonly "orgsListAttestationsBulk": (org: string, options: { readonly params?: OrgsListAttestationsBulkParams | undefined; readonly payload: OrgsListAttestationsBulkRequest }) => Effect.Effect<OrgsListAttestationsBulk200, HttpClientError.HttpClientError>
  /**
* Delete artifact attestations in bulk by either subject digests or unique ID.
*/
readonly "orgsDeleteAttestationsBulk": (org: string, options: { readonly params?: OrgsDeleteAttestationsBulkParams | undefined; readonly payload: OrgsDeleteAttestationsBulkRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Delete an artifact attestation by subject digest.
*/
readonly "orgsDeleteAttestationsBySubjectDigest": (org: string, subjectDigest: string, options?: OrgsDeleteAttestationsBySubjectDigestParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Delete an artifact attestation by unique ID that is associated with a repository owned by an org.
*/
readonly "orgsDeleteAttestationsById": (org: string, attestationId: string, options?: OrgsDeleteAttestationsByIdParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* List a collection of artifact attestations with a given subject digest that are associated with repositories owned by an organization.
* 
* The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.
* 
* **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
*/
readonly "orgsListAttestations": (org: string, subjectDigest: string, options?: OrgsListAttestationsParams | undefined) => Effect.Effect<OrgsListAttestations200, HttpClientError.HttpClientError>
  /**
* List the users blocked by an organization.
*/
readonly "orgsListBlockedUsers": (org: string, options?: OrgsListBlockedUsersParams | undefined) => Effect.Effect<OrgsListBlockedUsers200, HttpClientError.HttpClientError>
  /**
* Returns a 204 if the given user is blocked by the given organization. Returns a 404 if the organization is not blocking the user, or if the user account has been identified as spam by GitHub.
*/
readonly "orgsCheckBlockedUser": (org: string, username: string, options?: OrgsCheckBlockedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Blocks the given user on behalf of the specified organization and returns a 204. If the organization cannot block the given user a 422 is returned.
*/
readonly "orgsBlockUser": (org: string, username: string, options?: OrgsBlockUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Unblocks the given user on behalf of the specified organization.
*/
readonly "orgsUnblockUser": (org: string, username: string, options?: OrgsUnblockUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists campaigns in an organization.
* 
* The authenticated user must be an owner or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
*/
readonly "campaignsListOrgCampaigns": (org: string, options?: CampaignsListOrgCampaignsParams | undefined) => Effect.Effect<CampaignsListOrgCampaigns200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"CampaignsListOrgCampaigns503", CampaignsListOrgCampaigns503>>
  /**
* Create a campaign for an organization.
* 
* The authenticated user must be an owner or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
* 
* Fine-grained tokens must have the "Code scanning alerts" repository permissions (read) on all repositories included
* in the campaign.
*/
readonly "campaignsCreateCampaign": (org: string, options: { readonly params?: CampaignsCreateCampaignParams | undefined; readonly payload: CampaignsCreateCampaignRequest }) => Effect.Effect<CampaignSummary, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CampaignsCreateCampaign503", CampaignsCreateCampaign503>>
  /**
* Gets a campaign for an organization.
* 
* The authenticated user must be an owner or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
*/
readonly "campaignsGetCampaignSummary": (org: string, campaignNumber: string, options?: CampaignsGetCampaignSummaryParams | undefined) => Effect.Effect<CampaignSummary, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CampaignsGetCampaignSummary503", CampaignsGetCampaignSummary503>>
  /**
* Deletes a campaign in an organization.
* 
* The authenticated user must be an owner or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
*/
readonly "campaignsDeleteCampaign": (org: string, campaignNumber: string, options?: CampaignsDeleteCampaignParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"CampaignsDeleteCampaign503", CampaignsDeleteCampaign503>>
  /**
* Updates a campaign in an organization.
* 
* The authenticated user must be an owner or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
*/
readonly "campaignsUpdateCampaign": (org: string, campaignNumber: string, options: { readonly params?: CampaignsUpdateCampaignParams | undefined; readonly payload: CampaignsUpdateCampaignRequest }) => Effect.Effect<CampaignSummary, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CampaignsUpdateCampaign503", CampaignsUpdateCampaign503>>
  /**
* Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* The authenticated user must be an owner or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` or `repo`s cope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningListAlertsForOrg": (org: string, options?: CodeScanningListAlertsForOrgParams | undefined) => Effect.Effect<CodeScanningListAlertsForOrg200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningListAlertsForOrg503", CodeScanningListAlertsForOrg503>>
  /**
* Lists all code security configurations available in an organization.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
*/
readonly "codeSecurityGetConfigurationsForOrg": (org: string, options?: CodeSecurityGetConfigurationsForOrgParams | undefined) => Effect.Effect<CodeSecurityGetConfigurationsForOrg200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Creates a code security configuration in an organization.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "codeSecurityCreateConfiguration": (org: string, options: { readonly params?: CodeSecurityCreateConfigurationParams | undefined; readonly payload: CodeSecurityCreateConfigurationRequest }) => Effect.Effect<CodeSecurityConfiguration, HttpClientError.HttpClientError>
  /**
* Lists the default code security configurations for an organization.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
*/
readonly "codeSecurityGetDefaultConfigurations": (org: string, options?: CodeSecurityGetDefaultConfigurationsParams | undefined) => Effect.Effect<CodeSecurityDefaultConfigurations, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Detach code security configuration(s) from a set of repositories.
* Repositories will retain their settings but will no longer be associated with the configuration.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "codeSecurityDetachConfiguration": (org: string, options: { readonly params?: CodeSecurityDetachConfigurationParams | undefined; readonly payload: CodeSecurityDetachConfigurationRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Gets a code security configuration available in an organization.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "codeSecurityGetConfiguration": (org: string, configurationId: string, options?: CodeSecurityGetConfigurationParams | undefined) => Effect.Effect<CodeSecurityConfiguration, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Deletes the desired code security configuration from an organization.
* Repositories attached to the configuration will retain their settings but will no longer be associated with
* the configuration.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "codeSecurityDeleteConfiguration": (org: string, configurationId: string, options?: CodeSecurityDeleteConfigurationParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Updates a code security configuration in an organization.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "codeSecurityUpdateConfiguration": (org: string, configurationId: string, options: { readonly params?: CodeSecurityUpdateConfigurationParams | undefined; readonly payload: CodeSecurityUpdateConfigurationRequest }) => Effect.Effect<CodeSecurityConfiguration, HttpClientError.HttpClientError>
  /**
* Attach a code security configuration to a set of repositories. If the repositories specified are already attached to a configuration, they will be re-attached to the provided configuration.
* 
* If insufficient GHAS licenses are available to attach the configuration to a repository, only free features will be enabled.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "codeSecurityAttachConfiguration": (org: string, configurationId: string, options: { readonly params?: CodeSecurityAttachConfigurationParams | undefined; readonly payload: CodeSecurityAttachConfigurationRequest }) => Effect.Effect<CodeSecurityAttachConfiguration202, HttpClientError.HttpClientError>
  /**
* Sets a code security configuration as a default to be applied to new repositories in your organization.
* 
* This configuration will be applied to the matching repository type (all, none, public, private and internal) by default when they are created.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "codeSecuritySetConfigurationAsDefault": (org: string, configurationId: string, options: { readonly params?: CodeSecuritySetConfigurationAsDefaultParams | undefined; readonly payload: CodeSecuritySetConfigurationAsDefaultRequest }) => Effect.Effect<CodeSecuritySetConfigurationAsDefault200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists the repositories associated with a code security configuration in an organization.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
*/
readonly "codeSecurityGetRepositoriesForConfiguration": (org: string, configurationId: string, options?: CodeSecurityGetRepositoriesForConfigurationParams | undefined) => Effect.Effect<CodeSecurityGetRepositoriesForConfiguration200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists the codespaces associated to a specified organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesListInOrganization": (org: string, options?: CodespacesListInOrganizationParams | undefined) => Effect.Effect<CodespacesListInOrganization200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces access permissions for users according to the visibility.
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesSetCodespacesAccess": (org: string, options: { readonly params?: CodespacesSetCodespacesAccessParams | undefined; readonly payload: CodespacesSetCodespacesAccessRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError> | ClientError<"BasicError", BasicError>>
  /**
* Codespaces for the specified users will be billed to the organization.
* 
* To use this endpoint, the access settings for the organization must be set to `selected_members`.
* For information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesSetCodespacesAccessUsers": (org: string, options: { readonly params?: CodespacesSetCodespacesAccessUsersParams | undefined; readonly payload: CodespacesSetCodespacesAccessUsersRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError> | ClientError<"BasicError", BasicError>>
  /**
* Codespaces for the specified users will no longer be billed to the organization.
* 
* To use this endpoint, the access settings for the organization must be set to `selected_members`.
* For information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesDeleteCodespacesAccessUsers": (org: string, options: { readonly params?: CodespacesDeleteCodespacesAccessUsersParams | undefined; readonly payload: CodespacesDeleteCodespacesAccessUsersRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError> | ClientError<"BasicError", BasicError>>
  /**
* Lists all Codespaces development environment secrets available at the organization-level without revealing their encrypted
* values.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesListOrgSecrets": (org: string, options?: CodespacesListOrgSecretsParams | undefined) => Effect.Effect<CodespacesListOrgSecrets200, HttpClientError.HttpClientError>
  /**
* Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets.
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesGetOrgPublicKey": (org: string, options?: CodespacesGetOrgPublicKeyParams | undefined) => Effect.Effect<CodespacesPublicKey, HttpClientError.HttpClientError>
  /**
* Gets an organization development environment secret without revealing its encrypted value.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesGetOrgSecret": (org: string, secretName: string, options?: CodespacesGetOrgSecretParams | undefined) => Effect.Effect<CodespacesOrgSecret, HttpClientError.HttpClientError>
  /**
* Creates or updates an organization development environment secret with an encrypted value. Encrypt your secret using
* [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesCreateOrUpdateOrgSecret": (org: string, secretName: string, options: { readonly params?: CodespacesCreateOrUpdateOrgSecretParams | undefined; readonly payload: CodespacesCreateOrUpdateOrgSecretRequest }) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Deletes an organization development environment secret using the secret name.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesDeleteOrgSecret": (org: string, secretName: string, options?: CodespacesDeleteOrgSecretParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Lists all repositories that have been selected when the `visibility`
* for repository access to a secret is set to `selected`.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesListSelectedReposForOrgSecret": (org: string, secretName: string, options?: CodespacesListSelectedReposForOrgSecretParams | undefined) => Effect.Effect<CodespacesListSelectedReposForOrgSecret200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Replaces all repositories for an organization development environment secret when the `visibility`
* for repository access is set to `selected`. The visibility is set when you [Create
* or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesSetSelectedReposForOrgSecret": (org: string, secretName: string, options: { readonly params?: CodespacesSetSelectedReposForOrgSecretParams | undefined; readonly payload: CodespacesSetSelectedReposForOrgSecretRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Adds a repository to an organization development environment secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesAddSelectedRepoToOrgSecret": (org: string, secretName: string, repositoryId: string, options?: CodespacesAddSelectedRepoToOrgSecretParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Removes a repository from an organization development environment secret when the `visibility`
* for repository access is set to `selected`. The visibility is set when you [Create
* or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesRemoveSelectedRepoFromOrgSecret": (org: string, secretName: string, repositoryId: string, options?: CodespacesRemoveSelectedRepoFromOrgSecretParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* > [!NOTE]
* > This endpoint is in public preview and is subject to change.
* 
* Gets information about an organization's Copilot subscription, including seat breakdown
* and feature policies. To configure these settings, go to your organization's settings on GitHub.com.
* For more information, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)."
* 
* Only organization owners can view details about the organization's Copilot Business or Copilot Enterprise subscription.
* 
* OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
*/
readonly "copilotGetCopilotOrganizationDetails": (org: string, options?: CopilotGetCopilotOrganizationDetailsParams | undefined) => Effect.Effect<CopilotOrganizationDetails, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!NOTE]
* > This endpoint is in public preview and is subject to change.
* 
* Lists all Copilot seats for which an organization with a Copilot Business or Copilot Enterprise subscription is currently being billed.
* Only organization owners can view assigned seats.
* 
* Each seat object contains information about the assigned user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
* For more information about activity data, see [Metrics data properties for GitHub Copilot](https://docs.github.com/copilot/reference/metrics-data).
* 
* OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
*/
readonly "copilotListCopilotSeats": (org: string, options?: CopilotListCopilotSeatsParams | undefined) => Effect.Effect<CopilotListCopilotSeats200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!NOTE]
* > This endpoint is in public preview and is subject to change.
* 
* Purchases a GitHub Copilot seat for all users within each specified team.
* The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."
* 
* Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
* For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
* For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."
* 
* The response contains the total number of new seats that were created and existing seats that were refreshed.
* 
* OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
*/
readonly "copilotAddCopilotSeatsForTeams": (org: string, options: { readonly params?: CopilotAddCopilotSeatsForTeamsParams | undefined; readonly payload: CopilotAddCopilotSeatsForTeamsRequest }) => Effect.Effect<CopilotAddCopilotSeatsForTeams201, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!NOTE]
* > This endpoint is in public preview and is subject to change.
* 
* Sets seats for all members of each team specified to "pending cancellation".
* This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through another team.
* For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."
* 
* Only organization owners can cancel Copilot seats for their organization members.
* 
* The response contains the total number of seats set to "pending cancellation".
* 
* OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
*/
readonly "copilotCancelCopilotSeatAssignmentForTeams": (org: string, options: { readonly params?: CopilotCancelCopilotSeatAssignmentForTeamsParams | undefined; readonly payload: CopilotCancelCopilotSeatAssignmentForTeamsRequest }) => Effect.Effect<CopilotCancelCopilotSeatAssignmentForTeams200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!NOTE]
* > This endpoint is in public preview and is subject to change.
* 
* Purchases a GitHub Copilot seat for each user specified.
* The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."
* 
* Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
* For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
* For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."
* 
* The response contains the total number of new seats that were created and existing seats that were refreshed.
* 
* OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
*/
readonly "copilotAddCopilotSeatsForUsers": (org: string, options: { readonly params?: CopilotAddCopilotSeatsForUsersParams | undefined; readonly payload: CopilotAddCopilotSeatsForUsersRequest }) => Effect.Effect<CopilotAddCopilotSeatsForUsers201, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!NOTE]
* > This endpoint is in public preview and is subject to change.
* 
* Sets seats for all users specified to "pending cancellation".
* This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through team membership.
* For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."
* 
* Only organization owners can cancel Copilot seats for their organization members.
* 
* The response contains the total number of seats set to "pending cancellation".
* 
* OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
*/
readonly "copilotCancelCopilotSeatAssignmentForUsers": (org: string, options: { readonly params?: CopilotCancelCopilotSeatAssignmentForUsersParams | undefined; readonly payload: CopilotCancelCopilotSeatAssignmentForUsersRequest }) => Effect.Effect<CopilotCancelCopilotSeatAssignmentForUsers200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.
* 
* > [!NOTE]
* > This endpoint will only return results for a given day if the organization contained **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.
* 
* The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
* and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
* they must have telemetry enabled in their IDE.
* 
* To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization.
* Only organization owners and owners and billing managers of the parent enterprise can view Copilot metrics.
* 
* OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
*/
readonly "copilotCopilotMetricsForOrganization": (org: string, options?: CopilotCopilotMetricsForOrganizationParams | undefined) => Effect.Effect<CopilotCopilotMetricsForOrganization200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists Dependabot alerts for an organization.
* 
* The authenticated user must be an owner or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "dependabotListAlertsForOrg": (org: string, options?: DependabotListAlertsForOrgParams | undefined) => Effect.Effect<DependabotListAlertsForOrg200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Lists all secrets available in an organization without revealing their
* encrypted values.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "dependabotListOrgSecrets": (org: string, options?: DependabotListOrgSecretsParams | undefined) => Effect.Effect<DependabotListOrgSecrets200, HttpClientError.HttpClientError>
  /**
* Gets your public key, which you need to encrypt secrets. You need to
* encrypt a secret before you can create or update secrets.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "dependabotGetOrgPublicKey": (org: string, options?: DependabotGetOrgPublicKeyParams | undefined) => Effect.Effect<DependabotPublicKey, HttpClientError.HttpClientError>
  /**
* Gets a single organization secret without revealing its encrypted value.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "dependabotGetOrgSecret": (org: string, secretName: string, options?: DependabotGetOrgSecretParams | undefined) => Effect.Effect<OrganizationDependabotSecret, HttpClientError.HttpClientError>
  /**
* Creates or updates an organization secret with an encrypted value. Encrypt your secret using
* [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "dependabotCreateOrUpdateOrgSecret": (org: string, secretName: string, options: { readonly params?: DependabotCreateOrUpdateOrgSecretParams | undefined; readonly payload: DependabotCreateOrUpdateOrgSecretRequest }) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError>
  /**
* Deletes a secret in an organization using the secret name.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "dependabotDeleteOrgSecret": (org: string, secretName: string, options?: DependabotDeleteOrgSecretParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists all repositories that have been selected when the `visibility`
* for repository access to a secret is set to `selected`.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "dependabotListSelectedReposForOrgSecret": (org: string, secretName: string, options?: DependabotListSelectedReposForOrgSecretParams | undefined) => Effect.Effect<DependabotListSelectedReposForOrgSecret200, HttpClientError.HttpClientError>
  /**
* Replaces all repositories for an organization secret when the `visibility`
* for repository access is set to `selected`. The visibility is set when you [Create
* or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "dependabotSetSelectedReposForOrgSecret": (org: string, secretName: string, options: { readonly params?: DependabotSetSelectedReposForOrgSecretParams | undefined; readonly payload: DependabotSetSelectedReposForOrgSecretRequest }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Adds a repository to an organization secret when the `visibility` for
* repository access is set to `selected`. The visibility is set when you [Create or
* update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "dependabotAddSelectedRepoToOrgSecret": (org: string, secretName: string, repositoryId: string, options?: DependabotAddSelectedRepoToOrgSecretParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Removes a repository from an organization secret when the `visibility`
* for repository access is set to `selected`. The visibility is set when you [Create
* or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "dependabotRemoveSelectedRepoFromOrgSecret": (org: string, secretName: string, repositoryId: string, options?: DependabotRemoveSelectedRepoFromOrgSecretParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists all packages that are in a specific organization, are readable by the requesting user, and that encountered a conflict during a Docker migration.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
*/
readonly "packagesListDockerMigrationConflictingPackagesForOrganization": (org: string, options?: PackagesListDockerMigrationConflictingPackagesForOrganizationParams | undefined) => Effect.Effect<PackagesListDockerMigrationConflictingPackagesForOrganization200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!NOTE]
* > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
*/
readonly "activityListPublicOrgEvents": (org: string, options?: ActivityListPublicOrgEventsParams | undefined) => Effect.Effect<ActivityListPublicOrgEvents200, HttpClientError.HttpClientError>
  /**
* The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
*/
readonly "orgsListFailedInvitations": (org: string, options?: OrgsListFailedInvitationsParams | undefined) => Effect.Effect<OrgsListFailedInvitations200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* List webhooks for an organization.
* 
* The authenticated user must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsListWebhooks": (org: string, options?: OrgsListWebhooksParams | undefined) => Effect.Effect<OrgsListWebhooks200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Create a hook that posts payloads in JSON format.
* 
* You must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or
* edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsCreateWebhook": (org: string, options: { readonly params?: OrgsCreateWebhookParams | undefined; readonly payload: OrgsCreateWebhookRequest }) => Effect.Effect<OrgHook, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Returns a webhook configured in an organization. To get only the webhook
* `config` properties, see "[Get a webhook configuration for an organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization).
* 
* You must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsGetWebhook": (org: string, hookId: string, options?: OrgsGetWebhookParams | undefined) => Effect.Effect<OrgHook, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Delete a webhook for an organization.
* 
* The authenticated user must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsDeleteWebhook": (org: string, hookId: string, options?: OrgsDeleteWebhookParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Updates a webhook configured in an organization. When you update a webhook,
* the `secret` will be overwritten. If you previously had a `secret` set, you must
* provide the same `secret` or set a new `secret` or the secret will be removed. If
* you are only updating individual webhook `config` properties, use "[Update a webhook
* configuration for an organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization)".
* 
* You must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsUpdateWebhook": (org: string, hookId: string, options: { readonly params?: OrgsUpdateWebhookParams | undefined; readonly payload: OrgsUpdateWebhookRequest }) => Effect.Effect<OrgHook, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook)."
* 
* You must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsGetWebhookConfigForOrg": (org: string, hookId: string, options?: OrgsGetWebhookConfigForOrgParams | undefined) => Effect.Effect<WebhookConfig, HttpClientError.HttpClientError>
  /**
* Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/orgs/webhooks#update-an-organization-webhook)."
* 
* You must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsUpdateWebhookConfigForOrg": (org: string, hookId: string, options: { readonly params?: OrgsUpdateWebhookConfigForOrgParams | undefined; readonly payload: OrgsUpdateWebhookConfigForOrgRequest }) => Effect.Effect<WebhookConfig, HttpClientError.HttpClientError>
  /**
* Returns a list of webhook deliveries for a webhook configured in an organization.
* 
* You must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsListWebhookDeliveries": (org: string, hookId: string, options?: OrgsListWebhookDeliveriesParams | undefined) => Effect.Effect<OrgsListWebhookDeliveries200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Returns a delivery for a webhook configured in an organization.
* 
* You must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsGetWebhookDelivery": (org: string, hookId: string, deliveryId: string, options?: OrgsGetWebhookDeliveryParams | undefined) => Effect.Effect<HookDelivery, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Redeliver a delivery for a webhook configured in an organization.
* 
* You must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsRedeliverWebhookDelivery": (org: string, hookId: string, deliveryId: string, options?: OrgsRedeliverWebhookDeliveryParams | undefined) => Effect.Effect<OrgsRedeliverWebhookDelivery202, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event)
* to be sent to the hook.
* 
* You must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsPingWebhook": (org: string, hookId: string, options?: OrgsPingWebhookParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Get API request count statistics for an actor broken down by route within a specified time frame.
*/
readonly "apiInsightsGetRouteStatsByActor": (org: string, actorType: string, actorId: string, options: ApiInsightsGetRouteStatsByActorParams) => Effect.Effect<ApiInsightsRouteStats, HttpClientError.HttpClientError>
  /**
* Get API request statistics for all subjects within an organization within a specified time frame. Subjects can be users or GitHub Apps.
*/
readonly "apiInsightsGetSubjectStats": (org: string, options: ApiInsightsGetSubjectStatsParams) => Effect.Effect<ApiInsightsSubjectStats, HttpClientError.HttpClientError>
  /**
* Get overall statistics of API requests made within an organization by all users and apps within a specified time frame.
*/
readonly "apiInsightsGetSummaryStats": (org: string, options: ApiInsightsGetSummaryStatsParams) => Effect.Effect<ApiInsightsSummaryStats, HttpClientError.HttpClientError>
  /**
* Get overall statistics of API requests within the organization for a user.
*/
readonly "apiInsightsGetSummaryStatsByUser": (org: string, userId: string, options: ApiInsightsGetSummaryStatsByUserParams) => Effect.Effect<ApiInsightsSummaryStats, HttpClientError.HttpClientError>
  /**
* Get overall statistics of API requests within the organization made by a specific actor. Actors can be GitHub App installations, OAuth apps or other tokens on behalf of a user.
*/
readonly "apiInsightsGetSummaryStatsByActor": (org: string, actorType: string, actorId: string, options: ApiInsightsGetSummaryStatsByActorParams) => Effect.Effect<ApiInsightsSummaryStats, HttpClientError.HttpClientError>
  /**
* Get the number of API requests and rate-limited requests made within an organization over a specified time period.
*/
readonly "apiInsightsGetTimeStats": (org: string, options: ApiInsightsGetTimeStatsParams) => Effect.Effect<ApiInsightsTimeStats, HttpClientError.HttpClientError>
  /**
* Get the number of API requests and rate-limited requests made within an organization by a specific user over a specified time period.
*/
readonly "apiInsightsGetTimeStatsByUser": (org: string, userId: string, options: ApiInsightsGetTimeStatsByUserParams) => Effect.Effect<ApiInsightsTimeStats, HttpClientError.HttpClientError>
  /**
* Get the number of API requests and rate-limited requests made within an organization by a specific actor within a specified time period.
*/
readonly "apiInsightsGetTimeStatsByActor": (org: string, actorType: string, actorId: string, options: ApiInsightsGetTimeStatsByActorParams) => Effect.Effect<ApiInsightsTimeStats, HttpClientError.HttpClientError>
  /**
* Get API usage statistics within an organization for a user broken down by the type of access.
*/
readonly "apiInsightsGetUserStats": (org: string, userId: string, options: ApiInsightsGetUserStatsParams) => Effect.Effect<ApiInsightsUserStats, HttpClientError.HttpClientError>
  /**
* Enables an authenticated GitHub App to find the organization's installation information.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsGetOrgInstallation": (org: string, options?: AppsGetOrgInstallationParams | undefined) => Effect.Effect<Installation, HttpClientError.HttpClientError>
  /**
* Lists all GitHub Apps in an organization. The installation count includes
* all GitHub Apps installed on repositories in the organization.
* 
* The authenticated user must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:read` scope to use this endpoint.
*/
readonly "orgsListAppInstallations": (org: string, options?: OrgsListAppInstallationsParams | undefined) => Effect.Effect<OrgsListAppInstallations200, HttpClientError.HttpClientError>
  /**
* Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
*/
readonly "interactionsGetRestrictionsForOrg": (org: string, options?: InteractionsGetRestrictionsForOrgParams | undefined) => Effect.Effect<InteractionsGetRestrictionsForOrg200, HttpClientError.HttpClientError>
  /**
* Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
*/
readonly "interactionsSetRestrictionsForOrg": (org: string, options: { readonly params?: InteractionsSetRestrictionsForOrgParams | undefined; readonly payload: InteractionLimit }) => Effect.Effect<InteractionLimitResponse, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
*/
readonly "interactionsRemoveRestrictionsForOrg": (org: string, options?: InteractionsRemoveRestrictionsForOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* The return hash contains a `role` field which refers to the Organization
* Invitation role and will be one of the following values: `direct_member`, `admin`,
* `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub
* member, the `login` field in the return hash will be `null`.
*/
readonly "orgsListPendingInvitations": (org: string, options?: OrgsListPendingInvitationsParams | undefined) => Effect.Effect<OrgsListPendingInvitations200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
* and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
*/
readonly "orgsCreateInvitation": (org: string, options: { readonly params?: OrgsCreateInvitationParams | undefined; readonly payload: OrgsCreateInvitationRequest }) => Effect.Effect<OrganizationInvitation, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
*/
readonly "orgsCancelInvitation": (org: string, invitationId: string, options?: OrgsCancelInvitationParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
*/
readonly "orgsListInvitationTeams": (org: string, invitationId: string, options?: OrgsListInvitationTeamsParams | undefined) => Effect.Effect<OrgsListInvitationTeams200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Lists all issue types for an organization. OAuth app tokens and personal access tokens (classic) need the read:org scope to use this endpoint.
*/
readonly "orgsListIssueTypes": (org: string, options?: OrgsListIssueTypesParams | undefined) => Effect.Effect<OrgsListIssueTypes200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Create a new issue type for an organization.
* 
* You can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization).
* 
* To use this endpoint, the authenticated user must be an administrator for the organization. OAuth app tokens and
* personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsCreateIssueType": (org: string, options: { readonly params?: OrgsCreateIssueTypeParams | undefined; readonly payload: OrganizationCreateIssueType }) => Effect.Effect<IssueType, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Updates an issue type for an organization.
* 
* You can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization).
* 
* To use this endpoint, the authenticated user must be an administrator for the organization. OAuth app tokens and
* personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsUpdateIssueType": (org: string, issueTypeId: string, options: { readonly params?: OrgsUpdateIssueTypeParams | undefined; readonly payload: OrganizationUpdateIssueType }) => Effect.Effect<IssueType, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Deletes an issue type for an organization.
* 
* You can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization).
* 
* To use this endpoint, the authenticated user must be an administrator for the organization. OAuth app tokens and
* personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsDeleteIssueType": (org: string, issueTypeId: string, options?: OrgsDeleteIssueTypeParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* List issues in an organization assigned to the authenticated user.
* 
* > [!NOTE]
* > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesListForOrg": (org: string, options?: IssuesListForOrgParams | undefined) => Effect.Effect<IssuesListForOrg200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
*/
readonly "orgsListMembers": (org: string, options?: OrgsListMembersParams | undefined) => Effect.Effect<OrgsListMembers200, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Check if a user is, publicly or privately, a member of the organization.
*/
readonly "orgsCheckMembershipForUser": (org: string, username: string, options?: OrgsCheckMembershipForUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
* 
* > [!NOTE]
* > If a user has both direct membership in the organization as well as indirect membership via an enterprise team, only their direct membership will be removed. Their indirect membership via an enterprise team remains until the user is removed from the enterprise team.
*/
readonly "orgsRemoveMember": (org: string, username: string, options?: OrgsRemoveMemberParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Lists the codespaces that a member of an organization has for repositories in that organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesGetCodespacesForUserInOrg": (org: string, username: string, options?: CodespacesGetCodespacesForUserInOrgParams | undefined) => Effect.Effect<CodespacesGetCodespacesForUserInOrg200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Deletes a user's codespace.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesDeleteFromOrganization": (org: string, username: string, codespaceName: string, options?: CodespacesDeleteFromOrganizationParams | undefined) => Effect.Effect<CodespacesDeleteFromOrganization202, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Stops a user's codespace.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesStopInOrganization": (org: string, username: string, codespaceName: string, options?: CodespacesStopInOrganizationParams | undefined) => Effect.Effect<Codespace, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!NOTE]
* > This endpoint is in public preview and is subject to change.
* 
* Gets the GitHub Copilot seat details for a member of an organization who currently has access to GitHub Copilot.
* 
* The seat object contains information about the user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
* For more information about activity data, see [Metrics data properties for GitHub Copilot](https://docs.github.com/copilot/reference/metrics-data).
* 
* Only organization owners can view Copilot seat assignment details for members of their organization.
* 
* OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
*/
readonly "copilotGetCopilotSeatDetailsForUser": (org: string, username: string, options?: CopilotGetCopilotSeatDetailsForUserParams | undefined) => Effect.Effect<CopilotSeatDetails, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
*/
readonly "orgsGetMembershipForUser": (org: string, username: string, options?: OrgsGetMembershipForUserParams | undefined) => Effect.Effect<OrgMembership, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Only authenticated organization owners can add a member to the organization or update the member's role.
* 
* *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
*     
* *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
* 
* **Rate limits**
* 
* To prevent abuse, organization owners are limited to creating 50 organization invitations for an organization within a 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
*/
readonly "orgsSetMembershipForUser": (org: string, username: string, options: { readonly params?: OrgsSetMembershipForUserParams | undefined; readonly payload: OrgsSetMembershipForUserRequest }) => Effect.Effect<OrgMembership, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
* 
* If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
* 
* > [!NOTE]
* > If a user has both direct membership in the organization as well as indirect membership via an enterprise team, only their direct membership will be removed. Their indirect membership via an enterprise team remains until the user is removed from the enterprise team.
*/
readonly "orgsRemoveMembershipForUser": (org: string, username: string, options?: OrgsRemoveMembershipForUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).
* 
* A list of `repositories` is only returned for export migrations.
*/
readonly "migrationsListForOrg": (org: string, options?: MigrationsListForOrgParams | undefined) => Effect.Effect<MigrationsListForOrg200, HttpClientError.HttpClientError>
  /**
* Initiates the generation of a migration archive.
*/
readonly "migrationsStartForOrg": (org: string, options: { readonly params?: MigrationsStartForOrgParams | undefined; readonly payload: MigrationsStartForOrgRequest }) => Effect.Effect<Migration, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Fetches the status of a migration.
* 
* The `state` of a migration can be one of the following values:
* 
* *   `pending`, which means the migration hasn't started yet.
* *   `exporting`, which means the migration is in progress.
* *   `exported`, which means the migration finished successfully.
* *   `failed`, which means the migration failed.
*/
readonly "migrationsGetStatusForOrg": (org: string, migrationId: string, options?: MigrationsGetStatusForOrgParams | undefined) => Effect.Effect<Migration, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Fetches the URL to a migration archive.
*/
readonly "migrationsDownloadArchiveForOrg": (org: string, migrationId: string, options?: MigrationsDownloadArchiveForOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
*/
readonly "migrationsDeleteArchiveForOrg": (org: string, migrationId: string, options?: MigrationsDeleteArchiveForOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
*/
readonly "migrationsUnlockRepoForOrg": (org: string, migrationId: string, repoName: string, options?: MigrationsUnlockRepoForOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* List all the repositories for this organization migration.
*/
readonly "migrationsListReposForOrg": (org: string, migrationId: string, options?: MigrationsListReposForOrgParams | undefined) => Effect.Effect<MigrationsListReposForOrg200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Lists the organization roles available in this organization. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* To use this endpoint, the authenticated user must be one of:
* 
* - An administrator for the organization.
* - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsListOrgRoles": (org: string, options?: OrgsListOrgRolesParams | undefined) => Effect.Effect<OrgsListOrgRoles200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Removes all assigned organization roles from a team. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* The authenticated user must be an administrator for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsRevokeAllOrgRolesTeam": (org: string, teamSlug: string, options?: OrgsRevokeAllOrgRolesTeamParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Assigns an organization role to a team in an organization. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* The authenticated user must be an administrator for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsAssignTeamToOrgRole": (org: string, teamSlug: string, roleId: string, options?: OrgsAssignTeamToOrgRoleParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Removes an organization role from a team. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* The authenticated user must be an administrator for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsRevokeOrgRoleTeam": (org: string, teamSlug: string, roleId: string, options?: OrgsRevokeOrgRoleTeamParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Revokes all assigned organization roles from a user. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* The authenticated user must be an administrator for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsRevokeAllOrgRolesUser": (org: string, username: string, options?: OrgsRevokeAllOrgRolesUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Assigns an organization role to a member of an organization. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* The authenticated user must be an administrator for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsAssignUserToOrgRole": (org: string, username: string, roleId: string, options?: OrgsAssignUserToOrgRoleParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Remove an organization role from a user. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* The authenticated user must be an administrator for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsRevokeOrgRoleUser": (org: string, username: string, roleId: string, options?: OrgsRevokeOrgRoleUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Gets an organization role that is available to this organization. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* To use this endpoint, the authenticated user must be one of:
* 
* - An administrator for the organization.
* - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsGetOrgRole": (org: string, roleId: string, options?: OrgsGetOrgRoleParams | undefined) => Effect.Effect<OrganizationRole, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists the teams that are assigned to an organization role. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* To use this endpoint, you must be an administrator for the organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsListOrgRoleTeams": (org: string, roleId: string, options?: OrgsListOrgRoleTeamsParams | undefined) => Effect.Effect<OrgsListOrgRoleTeams200, HttpClientError.HttpClientError>
  /**
* Lists organization members that are assigned to an organization role. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* To use this endpoint, you must be an administrator for the organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsListOrgRoleUsers": (org: string, roleId: string, options?: OrgsListOrgRoleUsersParams | undefined) => Effect.Effect<OrgsListOrgRoleUsers200, HttpClientError.HttpClientError>
  /**
* List all users who are outside collaborators of an organization.
*/
readonly "orgsListOutsideCollaborators": (org: string, options?: OrgsListOutsideCollaboratorsParams | undefined) => Effect.Effect<OrgsListOutsideCollaborators200, HttpClientError.HttpClientError>
  /**
* When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
*/
readonly "orgsConvertMemberToOutsideCollaborator": (org: string, username: string, options: { readonly params?: OrgsConvertMemberToOutsideCollaboratorParams | undefined; readonly payload: OrgsConvertMemberToOutsideCollaboratorRequest }) => Effect.Effect<OrgsConvertMemberToOutsideCollaborator202, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Removing a user from this list will remove them from all the organization's repositories.
*/
readonly "orgsRemoveOutsideCollaborator": (org: string, username: string, options?: OrgsRemoveOutsideCollaboratorParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"OrgsRemoveOutsideCollaborator422", OrgsRemoveOutsideCollaborator422>>
  /**
* Lists packages in an organization readable by the user.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesListPackagesForOrganization": (org: string, options: PackagesListPackagesForOrganizationParams) => Effect.Effect<PackagesListPackagesForOrganization200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Gets a specific package in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesGetPackageForOrganization": (org: string, packageType: string, packageName: string, options?: PackagesGetPackageForOrganizationParams | undefined) => Effect.Effect<Package, HttpClientError.HttpClientError>
  /**
* Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
* 
* The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesDeletePackageForOrg": (org: string, packageType: string, packageName: string, options?: PackagesDeletePackageForOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Restores an entire package in an organization.
* 
* You can restore a deleted package under the following conditions:
*   - The package was deleted within the last 30 days.
*   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
* 
* The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesRestorePackageForOrg": (org: string, packageType: string, packageName: string, options?: PackagesRestorePackageForOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists package versions for a package owned by an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesGetAllPackageVersionsForPackageOwnedByOrg": (org: string, packageType: string, packageName: string, options?: PackagesGetAllPackageVersionsForPackageOwnedByOrgParams | undefined) => Effect.Effect<PackagesGetAllPackageVersionsForPackageOwnedByOrg200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Gets a specific package version in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesGetPackageVersionForOrganization": (org: string, packageType: string, packageName: string, packageVersionId: string, options?: PackagesGetPackageVersionForOrganizationParams | undefined) => Effect.Effect<PackageVersion, HttpClientError.HttpClientError>
  /**
* Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
* 
* The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesDeletePackageVersionForOrg": (org: string, packageType: string, packageName: string, packageVersionId: string, options?: PackagesDeletePackageVersionForOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Restores a specific package version in an organization.
* 
* You can restore a deleted package under the following conditions:
*   - The package was deleted within the last 30 days.
*   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
* 
* The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesRestorePackageVersionForOrg": (org: string, packageType: string, packageName: string, packageVersionId: string, options?: PackagesRestorePackageVersionForOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists requests from organization members to access organization resources with a fine-grained personal access token.
* 
* Only GitHub Apps can use this endpoint.
*/
readonly "orgsListPatGrantRequests": (org: string, options?: OrgsListPatGrantRequestsParams | undefined) => Effect.Effect<OrgsListPatGrantRequests200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError> | ClientError<"BasicError", BasicError>>
  /**
* Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token.
* 
* Only GitHub Apps can use this endpoint.
*/
readonly "orgsReviewPatGrantRequestsInBulk": (org: string, options: { readonly params?: OrgsReviewPatGrantRequestsInBulkParams | undefined; readonly payload: OrgsReviewPatGrantRequestsInBulkRequest }) => Effect.Effect<OrgsReviewPatGrantRequestsInBulk202, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError> | ClientError<"BasicError", BasicError>>
  /**
* Approves or denies a pending request to access organization resources via a fine-grained personal access token.
* 
* Only GitHub Apps can use this endpoint.
*/
readonly "orgsReviewPatGrantRequest": (org: string, patRequestId: string, options: { readonly params?: OrgsReviewPatGrantRequestParams | undefined; readonly payload: OrgsReviewPatGrantRequestRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError> | ClientError<"BasicError", BasicError>>
  /**
* Lists the repositories a fine-grained personal access token request is requesting access to.
* 
* Only GitHub Apps can use this endpoint.
*/
readonly "orgsListPatGrantRequestRepositories": (org: string, patRequestId: string, options?: OrgsListPatGrantRequestRepositoriesParams | undefined) => Effect.Effect<OrgsListPatGrantRequestRepositories200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists approved fine-grained personal access tokens owned by organization members that can access organization resources.
* 
* Only GitHub Apps can use this endpoint.
*/
readonly "orgsListPatGrants": (org: string, options?: OrgsListPatGrantsParams | undefined) => Effect.Effect<OrgsListPatGrants200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError> | ClientError<"BasicError", BasicError>>
  /**
* Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited to revoking a token's existing access.
* 
* Only GitHub Apps can use this endpoint.
*/
readonly "orgsUpdatePatAccesses": (org: string, options: { readonly params?: OrgsUpdatePatAccessesParams | undefined; readonly payload: OrgsUpdatePatAccessesRequest }) => Effect.Effect<OrgsUpdatePatAccesses202, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError> | ClientError<"BasicError", BasicError>>
  /**
* Updates the access an organization member has to organization resources via a fine-grained personal access token. Limited to revoking the token's existing access. Limited to revoking a token's existing access.
* 
* Only GitHub Apps can use this endpoint.
*/
readonly "orgsUpdatePatAccess": (org: string, patId: string, options: { readonly params?: OrgsUpdatePatAccessParams | undefined; readonly payload: OrgsUpdatePatAccessRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError> | ClientError<"BasicError", BasicError>>
  /**
* Lists the repositories a fine-grained personal access token has access to.
* 
* Only GitHub Apps can use this endpoint.
*/
readonly "orgsListPatGrantRepositories": (org: string, patId: string, options?: OrgsListPatGrantRepositoriesParams | undefined) => Effect.Effect<OrgsListPatGrantRepositories200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists all private registry configurations available at the organization-level without revealing their encrypted
* values.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "privateRegistriesListOrgPrivateRegistries": (org: string, options?: PrivateRegistriesListOrgPrivateRegistriesParams | undefined) => Effect.Effect<PrivateRegistriesListOrgPrivateRegistries200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Creates a private registry configuration with an encrypted value for an organization. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "privateRegistriesCreateOrgPrivateRegistry": (org: string, options: { readonly params?: PrivateRegistriesCreateOrgPrivateRegistryParams | undefined; readonly payload: PrivateRegistriesCreateOrgPrivateRegistryRequest }) => Effect.Effect<OrgPrivateRegistryConfigurationWithSelectedRepositories, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Gets the org public key, which is needed to encrypt private registry secrets. You need to encrypt a secret before you can create or update secrets.
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "privateRegistriesGetOrgPublicKey": (org: string, options?: PrivateRegistriesGetOrgPublicKeyParams | undefined) => Effect.Effect<PrivateRegistriesGetOrgPublicKey200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Get the configuration of a single private registry defined for an organization, omitting its encrypted value.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "privateRegistriesGetOrgPrivateRegistry": (org: string, secretName: string, options?: PrivateRegistriesGetOrgPrivateRegistryParams | undefined) => Effect.Effect<OrgPrivateRegistryConfiguration, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Delete a private registry configuration at the organization-level.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "privateRegistriesDeleteOrgPrivateRegistry": (org: string, secretName: string, options?: PrivateRegistriesDeleteOrgPrivateRegistryParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Updates a private registry configuration with an encrypted value for an organization. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "privateRegistriesUpdateOrgPrivateRegistry": (org: string, secretName: string, options: { readonly params?: PrivateRegistriesUpdateOrgPrivateRegistryParams | undefined; readonly payload: PrivateRegistriesUpdateOrgPrivateRegistryRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicListForOrg": (org: string, options?: ProjectsClassicListForOrgParams | undefined) => Effect.Effect<ProjectsClassicListForOrg200, HttpClientError.HttpClientError | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicCreateForOrg": (org: string, options: { readonly params?: ProjectsClassicCreateForOrgParams | undefined; readonly payload: ProjectsClassicCreateForOrgRequest }) => Effect.Effect<Project, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Gets all custom properties defined for an organization.
* Organization members can read these properties.
*/
readonly "orgsGetAllCustomProperties": (org: string, options?: OrgsGetAllCustomPropertiesParams | undefined) => Effect.Effect<OrgsGetAllCustomProperties200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Creates new or updates existing custom properties defined for an organization in a batch.
* 
* If the property already exists, the existing property will be replaced with the new values.
* Missing optional values will fall back to default values, previous values will be overwritten.
* E.g. if a property exists with `values_editable_by: org_and_repo_actors` and it's updated without specifying `values_editable_by`, it will be updated to default value `org_actors`.
* 
* To use this endpoint, the authenticated user must be one of:
*   - An administrator for the organization.
*   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
*/
readonly "orgsCreateOrUpdateCustomProperties": (org: string, options: { readonly params?: OrgsCreateOrUpdateCustomPropertiesParams | undefined; readonly payload: OrgsCreateOrUpdateCustomPropertiesRequest }) => Effect.Effect<OrgsCreateOrUpdateCustomProperties200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Gets a custom property that is defined for an organization.
* Organization members can read these properties.
*/
readonly "orgsGetCustomProperty": (org: string, customPropertyName: string, options?: OrgsGetCustomPropertyParams | undefined) => Effect.Effect<CustomProperty, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Creates a new or updates an existing custom property that is defined for an organization.
* 
* To use this endpoint, the authenticated user must be one of:
* - An administrator for the organization.
* - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
*/
readonly "orgsCreateOrUpdateCustomProperty": (org: string, customPropertyName: string, options: { readonly params?: OrgsCreateOrUpdateCustomPropertyParams | undefined; readonly payload: CustomPropertySetPayload }) => Effect.Effect<CustomProperty, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Removes a custom property that is defined for an organization.
* 
* To use this endpoint, the authenticated user must be one of:
*   - An administrator for the organization.
*   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
*/
readonly "orgsRemoveCustomProperty": (org: string, customPropertyName: string, options?: OrgsRemoveCustomPropertyParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists organization repositories with all of their custom property values.
* Organization members can read these properties.
*/
readonly "orgsListCustomPropertiesValuesForRepos": (org: string, options?: OrgsListCustomPropertiesValuesForReposParams | undefined) => Effect.Effect<OrgsListCustomPropertiesValuesForRepos200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Create new or update existing custom property values for repositories in a batch that belong to an organization.
* Each target repository will have its custom property values updated to match the values provided in the request.
* 
* A maximum of 30 repositories can be updated in a single request.
* 
* Using a value of `null` for a custom property will remove or 'unset' the property value from the repository.
* 
* To use this endpoint, the authenticated user must be one of:
*   - An administrator for the organization.
*   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_values_editor` in the organization.
*/
readonly "orgsCreateOrUpdateCustomPropertiesValuesForRepos": (org: string, options: { readonly params?: OrgsCreateOrUpdateCustomPropertiesValuesForReposParams | undefined; readonly payload: OrgsCreateOrUpdateCustomPropertiesValuesForReposRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Members of an organization can choose to have their membership publicized or not.
*/
readonly "orgsListPublicMembers": (org: string, options?: OrgsListPublicMembersParams | undefined) => Effect.Effect<OrgsListPublicMembers200, HttpClientError.HttpClientError>
  /**
* Check if the provided user is a public member of the organization.
*/
readonly "orgsCheckPublicMembershipForUser": (org: string, username: string, options?: OrgsCheckPublicMembershipForUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* The user can publicize their own membership. (A user cannot publicize the membership for another user.)
* 
* Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
readonly "orgsSetPublicMembershipForAuthenticatedUser": (org: string, username: string, options?: OrgsSetPublicMembershipForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Removes the public membership for the authenticated user from the specified organization, unless public visibility is enforced by default.
*/
readonly "orgsRemovePublicMembershipForAuthenticatedUser": (org: string, username: string, options?: OrgsRemovePublicMembershipForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists repositories for the specified organization.
* 
* > [!NOTE]
* > In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
*/
readonly "reposListForOrg": (org: string, options?: ReposListForOrgParams | undefined) => Effect.Effect<ReposListForOrg200, HttpClientError.HttpClientError>
  /**
* Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
*/
readonly "reposCreateInOrg": (org: string, options: { readonly params?: ReposCreateInOrgParams | undefined; readonly payload: ReposCreateInOrgRequest }) => Effect.Effect<FullRepository, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Get all the repository rulesets for an organization.
*/
readonly "reposGetOrgRulesets": (org: string, options?: ReposGetOrgRulesetsParams | undefined) => Effect.Effect<ReposGetOrgRulesets200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Create a repository ruleset for an organization.
*/
readonly "reposCreateOrgRuleset": (org: string, options: { readonly params?: ReposCreateOrgRulesetParams | undefined; readonly payload: ReposCreateOrgRulesetRequest }) => Effect.Effect<RepositoryRuleset, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists suites of rule evaluations at the organization level.
* For more information, see "[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
*/
readonly "reposGetOrgRuleSuites": (org: string, options?: ReposGetOrgRuleSuitesParams | undefined) => Effect.Effect<RuleSuites, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Gets information about a suite of rule evaluations from within an organization.
* For more information, see "[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
*/
readonly "reposGetOrgRuleSuite": (org: string, ruleSuiteId: string, options?: ReposGetOrgRuleSuiteParams | undefined) => Effect.Effect<RuleSuite, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Get a repository ruleset for an organization.
* 
* **Note:** To prevent leaking sensitive information, the `bypass_actors` property is only returned if the user
* making the API request has write access to the ruleset.
*/
readonly "reposGetOrgRuleset": (org: string, rulesetId: string, options?: ReposGetOrgRulesetParams | undefined) => Effect.Effect<RepositoryRuleset, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Update a ruleset for an organization.
*/
readonly "reposUpdateOrgRuleset": (org: string, rulesetId: string, options: { readonly params?: ReposUpdateOrgRulesetParams | undefined; readonly payload: ReposUpdateOrgRulesetRequest }) => Effect.Effect<RepositoryRuleset, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Delete a ruleset for an organization.
*/
readonly "reposDeleteOrgRuleset": (org: string, rulesetId: string, options?: ReposDeleteOrgRulesetParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Get the history of an organization ruleset.
*/
readonly "orgsGetOrgRulesetHistory": (org: string, rulesetId: string, options?: OrgsGetOrgRulesetHistoryParams | undefined) => Effect.Effect<OrgsGetOrgRulesetHistory200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Get a version of an organization ruleset.
*/
readonly "orgsGetOrgRulesetVersion": (org: string, rulesetId: string, versionId: string, options?: OrgsGetOrgRulesetVersionParams | undefined) => Effect.Effect<RulesetVersionWithState, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "secretScanningListAlertsForOrg": (org: string, options?: SecretScanningListAlertsForOrgParams | undefined) => Effect.Effect<SecretScanningListAlertsForOrg200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"SecretScanningListAlertsForOrg503", SecretScanningListAlertsForOrg503>>
  /**
* Lists the secret scanning pattern configurations for an organization.
* 
* Personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "secretScanningListOrgPatternConfigs": (org: string, options?: SecretScanningListOrgPatternConfigsParams | undefined) => Effect.Effect<SecretScanningPatternConfiguration, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Updates the secret scanning pattern configurations for an organization.
* 
* Personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "secretScanningUpdateOrgPatternConfigs": (org: string, options: { readonly params?: SecretScanningUpdateOrgPatternConfigsParams | undefined; readonly payload: SecretScanningUpdateOrgPatternConfigsRequest }) => Effect.Effect<SecretScanningUpdateOrgPatternConfigs200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists repository security advisories for an organization.
* 
* The authenticated user must be an owner or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
*/
readonly "securityAdvisoriesListOrgRepositoryAdvisories": (org: string, options?: SecurityAdvisoriesListOrgRepositoryAdvisoriesParams | undefined) => Effect.Effect<SecurityAdvisoriesListOrgRepositoryAdvisories200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the "[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)" endpoints instead.
*/
readonly "orgsListSecurityManagerTeams": (org: string, options?: OrgsListSecurityManagerTeamsParams | undefined) => Effect.Effect<OrgsListSecurityManagerTeams200, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the "[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)" endpoints instead.
*/
readonly "orgsAddSecurityManagerTeam": (org: string, teamSlug: string, options?: OrgsAddSecurityManagerTeamParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the "[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)" endpoints instead.
*/
readonly "orgsRemoveSecurityManagerTeam": (org: string, teamSlug: string, options?: OrgsRemoveSecurityManagerTeamParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Gets the summary of the free and paid GitHub Actions minutes used.
* 
* Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
*/
readonly "billingGetGithubActionsBillingOrg": (org: string, options?: BillingGetGithubActionsBillingOrgParams | undefined) => Effect.Effect<ActionsBillingUsage, HttpClientError.HttpClientError>
  /**
* Gets the free and paid storage used for GitHub Packages in gigabytes.
* 
* Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
*/
readonly "billingGetGithubPackagesBillingOrg": (org: string, options?: BillingGetGithubPackagesBillingOrgParams | undefined) => Effect.Effect<PackagesBillingUsage, HttpClientError.HttpClientError>
  /**
* Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
* 
* Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
*/
readonly "billingGetSharedStorageBillingOrg": (org: string, options?: BillingGetSharedStorageBillingOrgParams | undefined) => Effect.Effect<CombinedBillingUsage, HttpClientError.HttpClientError>
  /**
* Lists all hosted compute network configurations configured in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
*/
readonly "hostedComputeListNetworkConfigurationsForOrg": (org: string, options?: HostedComputeListNetworkConfigurationsForOrgParams | undefined) => Effect.Effect<HostedComputeListNetworkConfigurationsForOrg200, HttpClientError.HttpClientError>
  /**
* Creates a hosted compute network configuration for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
*/
readonly "hostedComputeCreateNetworkConfigurationForOrg": (org: string, options: { readonly params?: HostedComputeCreateNetworkConfigurationForOrgParams | undefined; readonly payload: HostedComputeCreateNetworkConfigurationForOrgRequest }) => Effect.Effect<NetworkConfiguration, HttpClientError.HttpClientError>
  /**
* Gets a hosted compute network configuration configured in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
*/
readonly "hostedComputeGetNetworkConfigurationForOrg": (org: string, networkConfigurationId: string, options?: HostedComputeGetNetworkConfigurationForOrgParams | undefined) => Effect.Effect<NetworkConfiguration, HttpClientError.HttpClientError>
  /**
* Deletes a hosted compute network configuration from an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
*/
readonly "hostedComputeDeleteNetworkConfigurationFromOrg": (org: string, networkConfigurationId: string, options?: HostedComputeDeleteNetworkConfigurationFromOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Updates a hosted compute network configuration for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
*/
readonly "hostedComputeUpdateNetworkConfigurationForOrg": (org: string, networkConfigurationId: string, options: { readonly params?: HostedComputeUpdateNetworkConfigurationForOrgParams | undefined; readonly payload: HostedComputeUpdateNetworkConfigurationForOrgRequest }) => Effect.Effect<NetworkConfiguration, HttpClientError.HttpClientError>
  /**
* Gets a hosted compute network settings resource configured for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
*/
readonly "hostedComputeGetNetworkSettingsForOrg": (org: string, networkSettingsId: string, options?: HostedComputeGetNetworkSettingsForOrgParams | undefined) => Effect.Effect<NetworkSettings, HttpClientError.HttpClientError>
  /**
* Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.
* 
* > [!NOTE]
* > This endpoint will only return results for a given day if the team had **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.
* 
* The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
* and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
* they must have telemetry enabled in their IDE.
* 
* To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization containing the team within GitHub settings.
* Only organization owners for the organization that contains this team and owners and billing managers of the parent enterprise can view Copilot metrics for a team.
* 
* OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
*/
readonly "copilotCopilotMetricsForTeam": (org: string, teamSlug: string, options?: CopilotCopilotMetricsForTeamParams | undefined) => Effect.Effect<CopilotCopilotMetricsForTeam200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists all teams in an organization that are visible to the authenticated user.
*/
readonly "teamsList": (org: string, options?: TeamsListParams | undefined) => Effect.Effect<TeamsList200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization)."
* 
* When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)".
*/
readonly "teamsCreate": (org: string, options: { readonly params?: TeamsCreateParams | undefined; readonly payload: TeamsCreateRequest }) => Effect.Effect<TeamFull, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Gets a team using the team's `slug`. To create the `slug`, GitHub replaces special characters in the `name` string, changes all words to lowercase, and replaces spaces with a `-` separator. For example, `"My TEam Näme"` would become `my-team-name`.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
*/
readonly "teamsGetByName": (org: string, teamSlug: string, options?: TeamsGetByNameParams | undefined) => Effect.Effect<TeamFull, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* To delete a team, the authenticated user must be an organization owner or team maintainer.
* 
* If you are an organization owner, deleting a parent team will delete all of its child teams as well.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
*/
readonly "teamsDeleteInOrg": (org: string, teamSlug: string, options?: TeamsDeleteInOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* To edit a team, the authenticated user must either be an organization owner or a team maintainer.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
*/
readonly "teamsUpdateInOrg": (org: string, teamSlug: string, options: { readonly params?: TeamsUpdateInOrgParams | undefined; readonly payload: TeamsUpdateInOrgRequest }) => Effect.Effect<TeamFull | TeamFull, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* List all discussions on a team's page.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "teamsListDiscussionsInOrg": (org: string, teamSlug: string, options?: TeamsListDiscussionsInOrgParams | undefined) => Effect.Effect<TeamsListDiscussionsInOrg200, HttpClientError.HttpClientError>
  /**
* Creates a new discussion post on a team's page.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsCreateDiscussionInOrg": (org: string, teamSlug: string, options: { readonly params?: TeamsCreateDiscussionInOrgParams | undefined; readonly payload: TeamsCreateDiscussionInOrgRequest }) => Effect.Effect<TeamDiscussion, HttpClientError.HttpClientError>
  /**
* Get a specific discussion on a team's page.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "teamsGetDiscussionInOrg": (org: string, teamSlug: string, discussionNumber: string, options?: TeamsGetDiscussionInOrgParams | undefined) => Effect.Effect<TeamDiscussion, HttpClientError.HttpClientError>
  /**
* Delete a discussion from a team's page.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsDeleteDiscussionInOrg": (org: string, teamSlug: string, discussionNumber: string, options?: TeamsDeleteDiscussionInOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Edits the title and body text of a discussion post. Only the parameters you provide are updated.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsUpdateDiscussionInOrg": (org: string, teamSlug: string, discussionNumber: string, options: { readonly params?: TeamsUpdateDiscussionInOrgParams | undefined; readonly payload: TeamsUpdateDiscussionInOrgRequest }) => Effect.Effect<TeamDiscussion, HttpClientError.HttpClientError>
  /**
* List all comments on a team discussion.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "teamsListDiscussionCommentsInOrg": (org: string, teamSlug: string, discussionNumber: string, options?: TeamsListDiscussionCommentsInOrgParams | undefined) => Effect.Effect<TeamsListDiscussionCommentsInOrg200, HttpClientError.HttpClientError>
  /**
* Creates a new comment on a team discussion.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsCreateDiscussionCommentInOrg": (org: string, teamSlug: string, discussionNumber: string, options: { readonly params?: TeamsCreateDiscussionCommentInOrgParams | undefined; readonly payload: TeamsCreateDiscussionCommentInOrgRequest }) => Effect.Effect<TeamDiscussionComment, HttpClientError.HttpClientError>
  /**
* Get a specific comment on a team discussion.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "teamsGetDiscussionCommentInOrg": (org: string, teamSlug: string, discussionNumber: string, commentNumber: string, options?: TeamsGetDiscussionCommentInOrgParams | undefined) => Effect.Effect<TeamDiscussionComment, HttpClientError.HttpClientError>
  /**
* Deletes a comment on a team discussion.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsDeleteDiscussionCommentInOrg": (org: string, teamSlug: string, discussionNumber: string, commentNumber: string, options?: TeamsDeleteDiscussionCommentInOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Edits the body text of a discussion comment.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsUpdateDiscussionCommentInOrg": (org: string, teamSlug: string, discussionNumber: string, commentNumber: string, options: { readonly params?: TeamsUpdateDiscussionCommentInOrgParams | undefined; readonly payload: TeamsUpdateDiscussionCommentInOrgRequest }) => Effect.Effect<TeamDiscussionComment, HttpClientError.HttpClientError>
  /**
* List the reactions to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "reactionsListForTeamDiscussionCommentInOrg": (org: string, teamSlug: string, discussionNumber: string, commentNumber: string, options?: ReactionsListForTeamDiscussionCommentInOrgParams | undefined) => Effect.Effect<ReactionsListForTeamDiscussionCommentInOrg200, HttpClientError.HttpClientError>
  /**
* Create a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
* 
* A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "reactionsCreateForTeamDiscussionCommentInOrg": (org: string, teamSlug: string, discussionNumber: string, commentNumber: string, options: { readonly params?: ReactionsCreateForTeamDiscussionCommentInOrgParams | undefined; readonly payload: ReactionsCreateForTeamDiscussionCommentInOrgRequest }) => Effect.Effect<Reaction | Reaction, HttpClientError.HttpClientError>
  /**
* > [!NOTE]
* > You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
* 
* Delete a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "reactionsDeleteForTeamDiscussionComment": (org: string, teamSlug: string, discussionNumber: string, commentNumber: string, reactionId: string, options?: ReactionsDeleteForTeamDiscussionCommentParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* List the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "reactionsListForTeamDiscussionInOrg": (org: string, teamSlug: string, discussionNumber: string, options?: ReactionsListForTeamDiscussionInOrgParams | undefined) => Effect.Effect<ReactionsListForTeamDiscussionInOrg200, HttpClientError.HttpClientError>
  /**
* Create a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
* 
* A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "reactionsCreateForTeamDiscussionInOrg": (org: string, teamSlug: string, discussionNumber: string, options: { readonly params?: ReactionsCreateForTeamDiscussionInOrgParams | undefined; readonly payload: ReactionsCreateForTeamDiscussionInOrgRequest }) => Effect.Effect<Reaction | Reaction, HttpClientError.HttpClientError>
  /**
* > [!NOTE]
* > You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
* 
* Delete a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "reactionsDeleteForTeamDiscussion": (org: string, teamSlug: string, discussionNumber: string, reactionId: string, options?: ReactionsDeleteForTeamDiscussionParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
*/
readonly "teamsListPendingInvitationsInOrg": (org: string, teamSlug: string, options?: TeamsListPendingInvitationsInOrgParams | undefined) => Effect.Effect<TeamsListPendingInvitationsInOrg200, HttpClientError.HttpClientError>
  /**
* Team members will include the members of child teams.
* 
* To list members in a team, the team must be visible to the authenticated user.
*/
readonly "teamsListMembersInOrg": (org: string, teamSlug: string, options?: TeamsListMembersInOrgParams | undefined) => Effect.Effect<TeamsListMembersInOrg200, HttpClientError.HttpClientError>
  /**
* Team members will include the members of child teams.
* 
* To get a user's membership with a team, the team must be visible to the authenticated user.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
* 
* > [!NOTE]
* > The response contains the `state` of the membership and the member's `role`.
* 
* The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).
*/
readonly "teamsGetMembershipForUserInOrg": (org: string, teamSlug: string, username: string, options?: TeamsGetMembershipForUserInOrgParams | undefined) => Effect.Effect<TeamMembership, HttpClientError.HttpClientError>
  /**
* Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
* 
* Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* > [!NOTE]
* > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
* 
* An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
* 
* If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
*/
readonly "teamsAddOrUpdateMembershipForUserInOrg": (org: string, teamSlug: string, username: string, options: { readonly params?: TeamsAddOrUpdateMembershipForUserInOrgParams | undefined; readonly payload: TeamsAddOrUpdateMembershipForUserInOrgRequest }) => Effect.Effect<TeamMembership, HttpClientError.HttpClientError>
  /**
* To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
* 
* Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* > [!NOTE]
* > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
*/
readonly "teamsRemoveMembershipForUserInOrg": (org: string, teamSlug: string, username: string, options?: TeamsRemoveMembershipForUserInOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "teamsListProjectsInOrg": (org: string, teamSlug: string, options?: TeamsListProjectsInOrgParams | undefined) => Effect.Effect<TeamsListProjectsInOrg200, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "teamsCheckPermissionsForProjectInOrg": (org: string, teamSlug: string, projectId: string, options?: TeamsCheckPermissionsForProjectInOrgParams | undefined) => Effect.Effect<TeamProject, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "teamsAddOrUpdateProjectPermissionsInOrg": (org: string, teamSlug: string, projectId: string, options: { readonly params?: TeamsAddOrUpdateProjectPermissionsInOrgParams | undefined; readonly payload: TeamsAddOrUpdateProjectPermissionsInOrgRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"TeamsAddOrUpdateProjectPermissionsInOrg403", TeamsAddOrUpdateProjectPermissionsInOrg403>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "teamsRemoveProjectInOrg": (org: string, teamSlug: string, projectId: string, options?: TeamsRemoveProjectInOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists a team's repositories visible to the authenticated user.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
*/
readonly "teamsListReposInOrg": (org: string, teamSlug: string, options?: TeamsListReposInOrgParams | undefined) => Effect.Effect<TeamsListReposInOrg200, HttpClientError.HttpClientError>
  /**
* Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
* 
* You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types/) via the `application/vnd.github.v3.repository+json` accept header.
* 
* If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
* 
* If the repository is private, you must have at least `read` permission for that repository, and your token must have the `repo` or `admin:org` scope. Otherwise, you will receive a `404 Not Found` response status.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
*/
readonly "teamsCheckPermissionsForRepoInOrg": (org: string, teamSlug: string, owner: string, repo: string, options?: TeamsCheckPermissionsForRepoInOrgParams | undefined) => Effect.Effect<TeamRepository, HttpClientError.HttpClientError>
  /**
* To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
* 
* For more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
*/
readonly "teamsAddOrUpdateRepoPermissionsInOrg": (org: string, teamSlug: string, owner: string, repo: string, options: { readonly params?: TeamsAddOrUpdateRepoPermissionsInOrgParams | undefined; readonly payload: TeamsAddOrUpdateRepoPermissionsInOrgRequest }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
*/
readonly "teamsRemoveRepoInOrg": (org: string, teamSlug: string, owner: string, repo: string, options?: TeamsRemoveRepoInOrgParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists the child teams of the team specified by `{team_slug}`.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
*/
readonly "teamsListChildInOrg": (org: string, teamSlug: string, options?: TeamsListChildInOrgParams | undefined) => Effect.Effect<TeamsListChildInOrg200, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Closing down notice:** The ability to enable or disable a security feature for all eligible repositories in an organization is closing down. Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead. For more information, see the [changelog](https://github.blog/changelog/2024-07-22-deprecation-of-api-endpoint-to-enable-or-disable-a-security-feature-for-an-organization/).
* 
* Enables or disables the specified security feature for all eligible repositories in an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* The authenticated user must be an organization owner or be member of a team with the security manager role to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org`, `write:org`, or `repo` scopes to use this endpoint.
*/
readonly "orgsEnableOrDisableSecurityProductOnAllOrgRepos": (org: string, securityProduct: string, enablement: string, options: { readonly params?: OrgsEnableOrDisableSecurityProductOnAllOrgReposParams | undefined; readonly payload: OrgsEnableOrDisableSecurityProductOnAllOrgReposRequest }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicGetCard": (cardId: string, options?: ProjectsClassicGetCardParams | undefined) => Effect.Effect<ProjectCard, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicDeleteCard": (cardId: string, options?: ProjectsClassicDeleteCardParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ProjectsClassicDeleteCard403", ProjectsClassicDeleteCard403> | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicUpdateCard": (cardId: string, options: { readonly params?: ProjectsClassicUpdateCardParams | undefined; readonly payload: ProjectsClassicUpdateCardRequest }) => Effect.Effect<ProjectCard, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicMoveCard": (cardId: string, options: { readonly params?: ProjectsClassicMoveCardParams | undefined; readonly payload: ProjectsClassicMoveCardRequest }) => Effect.Effect<ProjectsClassicMoveCard201, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ProjectsClassicMoveCard403", ProjectsClassicMoveCard403> | ClientError<"ValidationError", ValidationError> | ClientError<"ProjectsClassicMoveCard503", ProjectsClassicMoveCard503>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicGetColumn": (columnId: string, options?: ProjectsClassicGetColumnParams | undefined) => Effect.Effect<ProjectColumn, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicDeleteColumn": (columnId: string, options?: ProjectsClassicDeleteColumnParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicUpdateColumn": (columnId: string, options: { readonly params?: ProjectsClassicUpdateColumnParams | undefined; readonly payload: ProjectsClassicUpdateColumnRequest }) => Effect.Effect<ProjectColumn, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicListCards": (columnId: string, options?: ProjectsClassicListCardsParams | undefined) => Effect.Effect<ProjectsClassicListCards200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicCreateCard": (columnId: string, options: { readonly params?: ProjectsClassicCreateCardParams | undefined; readonly payload: ProjectsClassicCreateCardRequest }) => Effect.Effect<ProjectCard, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ProjectsClassicCreateCard422", ProjectsClassicCreateCard422> | ClientError<"ProjectsClassicCreateCard503", ProjectsClassicCreateCard503>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicMoveColumn": (columnId: string, options: { readonly params?: ProjectsClassicMoveColumnParams | undefined; readonly payload: ProjectsClassicMoveColumnRequest }) => Effect.Effect<ProjectsClassicMoveColumn201, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicGet": (projectId: string, options?: ProjectsClassicGetParams | undefined) => Effect.Effect<Project, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicDelete": (projectId: string, options?: ProjectsClassicDeleteParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ProjectsClassicDelete403", ProjectsClassicDelete403> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicUpdate": (projectId: string, options: { readonly params?: ProjectsClassicUpdateParams | undefined; readonly payload: ProjectsClassicUpdateRequest }) => Effect.Effect<Project, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ProjectsClassicUpdate403", ProjectsClassicUpdate403> | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicListCollaborators": (projectId: string, options?: ProjectsClassicListCollaboratorsParams | undefined) => Effect.Effect<ProjectsClassicListCollaborators200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicAddCollaborator": (projectId: string, username: string, options: { readonly params?: ProjectsClassicAddCollaboratorParams | undefined; readonly payload: ProjectsClassicAddCollaboratorRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicRemoveCollaborator": (projectId: string, username: string, options?: ProjectsClassicRemoveCollaboratorParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicGetPermissionForUser": (projectId: string, username: string, options?: ProjectsClassicGetPermissionForUserParams | undefined) => Effect.Effect<ProjectCollaboratorPermission, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicListColumns": (projectId: string, options?: ProjectsClassicListColumnsParams | undefined) => Effect.Effect<ProjectsClassicListColumns200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicCreateColumn": (projectId: string, options: { readonly params?: ProjectsClassicCreateColumnParams | undefined; readonly payload: ProjectsClassicCreateColumnRequest }) => Effect.Effect<ProjectColumn, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* > [!NOTE]
* > Accessing this endpoint does not count against your REST API rate limit.
* 
* Some categories of endpoints have custom rate limits that are separate from the rate limit governing the other REST API endpoints. For this reason, the API response categorizes your rate limit. Under `resources`, you'll see objects relating to different categories:
* * The `core` object provides your rate limit status for all non-search-related resources in the REST API.
* * The `search` object provides your rate limit status for the REST API for searching (excluding code searches). For more information, see "[Search](https://docs.github.com/rest/search/search)."
* * The `code_search` object provides your rate limit status for the REST API for searching code. For more information, see "[Search code](https://docs.github.com/rest/search/search#search-code)."
* * The `graphql` object provides your rate limit status for the GraphQL API. For more information, see "[Resource limitations](https://docs.github.com/graphql/overview/resource-limitations#rate-limit)."
* * The `integration_manifest` object provides your rate limit status for the `POST /app-manifests/{code}/conversions` operation. For more information, see "[Creating a GitHub App from a manifest](https://docs.github.com/apps/creating-github-apps/setting-up-a-github-app/creating-a-github-app-from-a-manifest#3-you-exchange-the-temporary-code-to-retrieve-the-app-configuration)."
* * The `dependency_snapshots` object provides your rate limit status for submitting snapshots to the dependency graph. For more information, see "[Dependency graph](https://docs.github.com/rest/dependency-graph)."
* * The `dependency_sbom` object provides your rate limit status for requesting SBOMs from the dependency graph. For more information, see "[Dependency graph](https://docs.github.com/rest/dependency-graph)."
* * The `code_scanning_upload` object provides your rate limit status for uploading SARIF results to code scanning. For more information, see "[Uploading a SARIF file to GitHub](https://docs.github.com/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github)."
* * The `actions_runner_registration` object provides your rate limit status for registering self-hosted runners in GitHub Actions. For more information, see "[Self-hosted runners](https://docs.github.com/rest/actions/self-hosted-runners)."
* * The `source_import` object is no longer in use for any API endpoints, and it will be removed in the next API version. For more information about API versions, see "[API Versions](https://docs.github.com/rest/about-the-rest-api/api-versions)."
* 
* > [!NOTE]
* > The `rate` object is closing down. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
*/
readonly "rateLimitGet": () => Effect.Effect<RateLimitOverview, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
* 
* > [!NOTE]
* > In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
*/
readonly "reposGet": (owner: string, repo: string, options?: ReposGetParams | undefined) => Effect.Effect<FullRepository | BasicError, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Deleting a repository requires admin access.
* 
* If an organization owner has configured the organization to prevent members from deleting organization-owned
* repositories, you will get a `403 Forbidden` response.
* 
* OAuth app tokens and personal access tokens (classic) need the `delete_repo` scope to use this endpoint.
*/
readonly "reposDelete": (owner: string, repo: string, options?: ReposDeleteParams | undefined) => Effect.Effect<BasicError, HttpClientError.HttpClientError | ClientError<"ReposDelete403", ReposDelete403> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/repos/repos#replace-all-repository-topics) endpoint.
*/
readonly "reposUpdate": (owner: string, repo: string, options: { readonly params?: ReposUpdateParams | undefined; readonly payload: ReposUpdateRequest }) => Effect.Effect<FullRepository | BasicError, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists all artifacts for a repository.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsListArtifactsForRepo": (owner: string, repo: string, options?: ActionsListArtifactsForRepoParams | undefined) => Effect.Effect<ActionsListArtifactsForRepo200, HttpClientError.HttpClientError>
  /**
* Gets a specific artifact for a workflow run.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetArtifact": (owner: string, repo: string, artifactId: string, options?: ActionsGetArtifactParams | undefined) => Effect.Effect<Artifact, HttpClientError.HttpClientError>
  /**
* Deletes an artifact for a workflow run.
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteArtifact": (owner: string, repo: string, artifactId: string, options?: ActionsDeleteArtifactParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
* the response header to find the URL for the download. The `:archive_format` must be `zip`.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDownloadArtifact": (owner: string, repo: string, artifactId: string, archiveFormat: string, options?: ActionsDownloadArtifactParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Gets GitHub Actions cache usage for a repository.
* The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetActionsCacheUsage": (owner: string, repo: string, options?: ActionsGetActionsCacheUsageParams | undefined) => Effect.Effect<ActionsCacheUsageByRepository, HttpClientError.HttpClientError>
  /**
* Lists the GitHub Actions caches for a repository.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetActionsCacheList": (owner: string, repo: string, options?: ActionsGetActionsCacheListParams | undefined) => Effect.Effect<ActionsCacheList, HttpClientError.HttpClientError>
  /**
* Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteActionsCacheByKey": (owner: string, repo: string, options: ActionsDeleteActionsCacheByKeyParams) => Effect.Effect<ActionsCacheList, HttpClientError.HttpClientError>
  /**
* Deletes a GitHub Actions cache for a repository, using a cache ID.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteActionsCacheById": (owner: string, repo: string, cacheId: string, options?: ActionsDeleteActionsCacheByIdParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Gets a specific job in a workflow run.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetJobForWorkflowRun": (owner: string, repo: string, jobId: string, options?: ActionsGetJobForWorkflowRunParams | undefined) => Effect.Effect<Job, HttpClientError.HttpClientError>
  /**
* Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
* for `Location:` in the response header to find the URL for the download.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDownloadJobLogsForWorkflowRun": (owner: string, repo: string, jobId: string, options?: ActionsDownloadJobLogsForWorkflowRunParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Re-run a job and its dependent jobs in a workflow run.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsReRunJobForWorkflowRun": (owner: string, repo: string, jobId: string, options: { readonly params?: ActionsReRunJobForWorkflowRunParams | undefined; readonly payload: ActionsReRunJobForWorkflowRunRequest }) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Gets the customization template for an OpenID Connect (OIDC) subject claim.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetCustomOidcSubClaimForRepo": (owner: string, repo: string, options?: ActionsGetCustomOidcSubClaimForRepoParams | undefined) => Effect.Effect<OidcCustomSubRepo, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsSetCustomOidcSubClaimForRepo": (owner: string, repo: string, options: { readonly params?: ActionsSetCustomOidcSubClaimForRepoParams | undefined; readonly payload: ActionsSetCustomOidcSubClaimForRepoRequest }) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Lists all organization secrets shared with a repository without revealing their encrypted
* values.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsListRepoOrganizationSecrets": (owner: string, repo: string, options?: ActionsListRepoOrganizationSecretsParams | undefined) => Effect.Effect<ActionsListRepoOrganizationSecrets200, HttpClientError.HttpClientError>
  /**
* Lists all organization variables shared with a repository.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsListRepoOrganizationVariables": (owner: string, repo: string, options?: ActionsListRepoOrganizationVariablesParams | undefined) => Effect.Effect<ActionsListRepoOrganizationVariables200, HttpClientError.HttpClientError>
  /**
* Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetGithubActionsPermissionsRepository": (owner: string, repo: string, options?: ActionsGetGithubActionsPermissionsRepositoryParams | undefined) => Effect.Effect<ActionsRepositoryPermissions, HttpClientError.HttpClientError>
  /**
* Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsSetGithubActionsPermissionsRepository": (owner: string, repo: string, options: { readonly params?: ActionsSetGithubActionsPermissionsRepositoryParams | undefined; readonly payload: ActionsSetGithubActionsPermissionsRepositoryRequest }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
* This endpoint only applies to private repositories.
* For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetWorkflowAccessToRepository": (owner: string, repo: string, options?: ActionsGetWorkflowAccessToRepositoryParams | undefined) => Effect.Effect<ActionsWorkflowAccessToRepository, HttpClientError.HttpClientError>
  /**
* Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
* This endpoint only applies to private repositories.
* For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)".
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsSetWorkflowAccessToRepository": (owner: string, repo: string, options: { readonly params?: ActionsSetWorkflowAccessToRepositoryParams | undefined; readonly payload: ActionsWorkflowAccessToRepository }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Gets artifact and log retention settings for a repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetArtifactAndLogRetentionSettingsRepository": (owner: string, repo: string, options?: ActionsGetArtifactAndLogRetentionSettingsRepositoryParams | undefined) => Effect.Effect<ActionsArtifactAndLogRetentionResponse, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Sets artifact and log retention settings for a repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsSetArtifactAndLogRetentionSettingsRepository": (owner: string, repo: string, options: { readonly params?: ActionsSetArtifactAndLogRetentionSettingsRepositoryParams | undefined; readonly payload: ActionsArtifactAndLogRetention }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Gets the fork PR contributor approval policy for a repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetForkPrContributorApprovalPermissionsRepository": (owner: string, repo: string, options?: ActionsGetForkPrContributorApprovalPermissionsRepositoryParams | undefined) => Effect.Effect<ActionsForkPrContributorApproval, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Sets the fork PR contributor approval policy for a repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsSetForkPrContributorApprovalPermissionsRepository": (owner: string, repo: string, options: { readonly params?: ActionsSetForkPrContributorApprovalPermissionsRepositoryParams | undefined; readonly payload: ActionsForkPrContributorApproval }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Gets the settings for whether workflows from fork pull requests can run on a private repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetPrivateRepoForkPrWorkflowsSettingsRepository": (owner: string, repo: string, options?: ActionsGetPrivateRepoForkPrWorkflowsSettingsRepositoryParams | undefined) => Effect.Effect<ActionsForkPrWorkflowsPrivateRepos, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Sets the settings for whether workflows from fork pull requests can run on a private repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsSetPrivateRepoForkPrWorkflowsSettingsRepository": (owner: string, repo: string, options: { readonly params?: ActionsSetPrivateRepoForkPrWorkflowsSettingsRepositoryParams | undefined; readonly payload: ActionsForkPrWorkflowsPrivateReposRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetAllowedActionsRepository": (owner: string, repo: string, options?: ActionsGetAllowedActionsRepositoryParams | undefined) => Effect.Effect<SelectedActions, HttpClientError.HttpClientError>
  /**
* Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsSetAllowedActionsRepository": (owner: string, repo: string, options: { readonly params?: ActionsSetAllowedActionsRepositoryParams | undefined; readonly payload: SelectedActions }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,
* as well as if GitHub Actions can submit approving pull request reviews.
* For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetGithubActionsDefaultWorkflowPermissionsRepository": (owner: string, repo: string, options?: ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryParams | undefined) => Effect.Effect<ActionsGetDefaultWorkflowPermissions, HttpClientError.HttpClientError>
  /**
* Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions
* can submit approving pull request reviews.
* For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsSetGithubActionsDefaultWorkflowPermissionsRepository": (owner: string, repo: string, options: { readonly params?: ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryParams | undefined; readonly payload: ActionsSetDefaultWorkflowPermissions }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists all self-hosted runners configured in a repository.
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsListSelfHostedRunnersForRepo": (owner: string, repo: string, options?: ActionsListSelfHostedRunnersForRepoParams | undefined) => Effect.Effect<ActionsListSelfHostedRunnersForRepo200, HttpClientError.HttpClientError>
  /**
* Lists binaries for the runner application that you can download and run.
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsListRunnerApplicationsForRepo": (owner: string, repo: string, options?: ActionsListRunnerApplicationsForRepoParams | undefined) => Effect.Effect<ActionsListRunnerApplicationsForRepo200, HttpClientError.HttpClientError>
  /**
* Generates a configuration that can be passed to the runner application at startup.
* 
* The authenticated user must have admin access to the repository.
* 
* OAuth tokens and personal access tokens (classic) need the`repo` scope to use this endpoint.
*/
readonly "actionsGenerateRunnerJitconfigForRepo": (owner: string, repo: string, options: { readonly params?: ActionsGenerateRunnerJitconfigForRepoParams | undefined; readonly payload: ActionsGenerateRunnerJitconfigForRepoRequest }) => Effect.Effect<ActionsGenerateRunnerJitconfigForRepo201, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Returns a token that you can pass to the `config` script. The token expires after one hour.
* 
* For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:
* 
* ```
* ./config.sh --url https://github.com/octo-org --token TOKEN
* ```
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateRegistrationTokenForRepo": (owner: string, repo: string, options?: ActionsCreateRegistrationTokenForRepoParams | undefined) => Effect.Effect<AuthenticationToken, HttpClientError.HttpClientError>
  /**
* Returns a token that you can pass to the `config` script to remove a self-hosted runner from an repository. The token expires after one hour.
* 
* For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:
* 
* ```
* ./config.sh remove --token TOKEN
* ```
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateRemoveTokenForRepo": (owner: string, repo: string, options?: ActionsCreateRemoveTokenForRepoParams | undefined) => Effect.Effect<AuthenticationToken, HttpClientError.HttpClientError>
  /**
* Gets a specific self-hosted runner configured in a repository.
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetSelfHostedRunnerForRepo": (owner: string, repo: string, runnerId: string, options?: ActionsGetSelfHostedRunnerForRepoParams | undefined) => Effect.Effect<Runner, HttpClientError.HttpClientError>
  /**
* Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteSelfHostedRunnerFromRepo": (owner: string, repo: string, runnerId: string, options?: ActionsDeleteSelfHostedRunnerFromRepoParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Lists all labels for a self-hosted runner configured in a repository.
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsListLabelsForSelfHostedRunnerForRepo": (owner: string, repo: string, runnerId: string, options?: ActionsListLabelsForSelfHostedRunnerForRepoParams | undefined) => Effect.Effect<ActionsListLabelsForSelfHostedRunnerForRepo200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Remove all previous custom labels and set the new custom labels for a specific
* self-hosted runner configured in a repository.
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsSetCustomLabelsForSelfHostedRunnerForRepo": (owner: string, repo: string, runnerId: string, options: { readonly params?: ActionsSetCustomLabelsForSelfHostedRunnerForRepoParams | undefined; readonly payload: ActionsSetCustomLabelsForSelfHostedRunnerForRepoRequest }) => Effect.Effect<ActionsSetCustomLabelsForSelfHostedRunnerForRepo200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Adds custom labels to a self-hosted runner configured in a repository.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsAddCustomLabelsToSelfHostedRunnerForRepo": (owner: string, repo: string, runnerId: string, options: { readonly params?: ActionsAddCustomLabelsToSelfHostedRunnerForRepoParams | undefined; readonly payload: ActionsAddCustomLabelsToSelfHostedRunnerForRepoRequest }) => Effect.Effect<ActionsAddCustomLabelsToSelfHostedRunnerForRepo200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Remove all custom labels from a self-hosted runner configured in a
* repository. Returns the remaining read-only labels from the runner.
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo": (owner: string, repo: string, runnerId: string, options?: ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoParams | undefined) => Effect.Effect<ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Remove a custom label from a self-hosted runner configured
* in a repository. Returns the remaining labels from the runner.
* 
* This endpoint returns a `404 Not Found` status if the custom label is not
* present on the runner.
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsRemoveCustomLabelFromSelfHostedRunnerForRepo": (owner: string, repo: string, runnerId: string, name: string, options?: ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoParams | undefined) => Effect.Effect<ActionsRemoveCustomLabelFromSelfHostedRunnerForRepo200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
* 
* This endpoint will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.
*/
readonly "actionsListWorkflowRunsForRepo": (owner: string, repo: string, options?: ActionsListWorkflowRunsForRepoParams | undefined) => Effect.Effect<ActionsListWorkflowRunsForRepo200, HttpClientError.HttpClientError>
  /**
* Gets a specific workflow run.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsGetWorkflowRun": (owner: string, repo: string, runId: string, options?: ActionsGetWorkflowRunParams | undefined) => Effect.Effect<WorkflowRun, HttpClientError.HttpClientError>
  /**
* Deletes a specific workflow run.
* 
* Anyone with write access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteWorkflowRun": (owner: string, repo: string, runId: string, options?: ActionsDeleteWorkflowRunParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsGetReviewsForRun": (owner: string, repo: string, runId: string, options?: ActionsGetReviewsForRunParams | undefined) => Effect.Effect<ActionsGetReviewsForRun200, HttpClientError.HttpClientError>
  /**
* Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsApproveWorkflowRun": (owner: string, repo: string, runId: string, options?: ActionsApproveWorkflowRunParams | undefined) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists artifacts for a workflow run.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsListWorkflowRunArtifacts": (owner: string, repo: string, runId: string, options?: ActionsListWorkflowRunArtifactsParams | undefined) => Effect.Effect<ActionsListWorkflowRunArtifacts200, HttpClientError.HttpClientError>
  /**
* Gets a specific workflow run attempt.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsGetWorkflowRunAttempt": (owner: string, repo: string, runId: string, attemptNumber: string, options?: ActionsGetWorkflowRunAttemptParams | undefined) => Effect.Effect<WorkflowRun, HttpClientError.HttpClientError>
  /**
* Lists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more information
* about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint  with a private repository.
*/
readonly "actionsListJobsForWorkflowRunAttempt": (owner: string, repo: string, runId: string, attemptNumber: string, options?: ActionsListJobsForWorkflowRunAttemptParams | undefined) => Effect.Effect<ActionsListJobsForWorkflowRunAttempt200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
* 1 minute. Look for `Location:` in the response header to find the URL for the download.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDownloadWorkflowRunAttemptLogs": (owner: string, repo: string, runId: string, attemptNumber: string, options?: ActionsDownloadWorkflowRunAttemptLogsParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Cancels a workflow run using its `id`.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCancelWorkflowRun": (owner: string, repo: string, runId: string, options?: ActionsCancelWorkflowRunParams | undefined) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
* 
* > [!NOTE]
* > GitHub Apps can only review their own custom deployment protection rules. To approve or reject pending deployments that are waiting for review from a specific person or team, see [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsReviewCustomGatesForRun": (owner: string, repo: string, runId: string, options: { readonly params?: ActionsReviewCustomGatesForRunParams | undefined; readonly payload: ActionsReviewCustomGatesForRunRequest }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Cancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an `always()` condition on a job.
* You should only use this endpoint to cancel a workflow run when the workflow run is not responding to [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`](/rest/actions/workflow-runs#cancel-a-workflow-run).
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsForceCancelWorkflowRun": (owner: string, repo: string, runId: string, options?: ActionsForceCancelWorkflowRunParams | undefined) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Lists jobs for a workflow run. You can use parameters to narrow the list of results. For more information
* about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsListJobsForWorkflowRun": (owner: string, repo: string, runId: string, options?: ActionsListJobsForWorkflowRunParams | undefined) => Effect.Effect<ActionsListJobsForWorkflowRun200, HttpClientError.HttpClientError>
  /**
* Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
* `Location:` in the response header to find the URL for the download.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDownloadWorkflowRunLogs": (owner: string, repo: string, runId: string, options?: ActionsDownloadWorkflowRunLogsParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Deletes all logs for a workflow run.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteWorkflowRunLogs": (owner: string, repo: string, runId: string, options?: ActionsDeleteWorkflowRunLogsParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Get all deployment environments for a workflow run that are waiting for protection rules to pass.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetPendingDeploymentsForRun": (owner: string, repo: string, runId: string, options?: ActionsGetPendingDeploymentsForRunParams | undefined) => Effect.Effect<ActionsGetPendingDeploymentsForRun200, HttpClientError.HttpClientError>
  /**
* Approve or reject pending deployments that are waiting on approval by a required reviewer.
* 
* Required reviewers with read access to the repository contents and deployments can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsReviewPendingDeploymentsForRun": (owner: string, repo: string, runId: string, options: { readonly params?: ActionsReviewPendingDeploymentsForRunParams | undefined; readonly payload: ActionsReviewPendingDeploymentsForRunRequest }) => Effect.Effect<ActionsReviewPendingDeploymentsForRun200, HttpClientError.HttpClientError>
  /**
* Re-runs your workflow run using its `id`.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsReRunWorkflow": (owner: string, repo: string, runId: string, options: { readonly params?: ActionsReRunWorkflowParams | undefined; readonly payload: ActionsReRunWorkflowRequest }) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError>
  /**
* Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsReRunWorkflowFailedJobs": (owner: string, repo: string, runId: string, options: { readonly params?: ActionsReRunWorkflowFailedJobsParams | undefined; readonly payload: ActionsReRunWorkflowFailedJobsRequest }) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError>
  /**
* > [!WARNING]  
* > This endpoint is in the process of closing down. Refer to "[Actions Get workflow usage and Get workflow run usage endpoints closing down](https://github.blog/changelog/2025-02-02-actions-get-workflow-usage-and-get-workflow-run-usage-endpoints-closing-down/)" for more information.
* 
* Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsGetWorkflowRunUsage": (owner: string, repo: string, runId: string, options?: ActionsGetWorkflowRunUsageParams | undefined) => Effect.Effect<WorkflowRunUsage, HttpClientError.HttpClientError>
  /**
* Lists all secrets available in a repository without revealing their encrypted
* values.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsListRepoSecrets": (owner: string, repo: string, options?: ActionsListRepoSecretsParams | undefined) => Effect.Effect<ActionsListRepoSecrets200, HttpClientError.HttpClientError>
  /**
* Gets your public key, which you need to encrypt secrets. You need to
* encrypt a secret before you can create or update secrets.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetRepoPublicKey": (owner: string, repo: string, options?: ActionsGetRepoPublicKeyParams | undefined) => Effect.Effect<ActionsPublicKey, HttpClientError.HttpClientError>
  /**
* Gets a single repository secret without revealing its encrypted value.
* 
* The authenticated user must have collaborator access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetRepoSecret": (owner: string, repo: string, secretName: string, options?: ActionsGetRepoSecretParams | undefined) => Effect.Effect<ActionsSecret, HttpClientError.HttpClientError>
  /**
* Creates or updates a repository secret with an encrypted value. Encrypt your secret using
* [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateOrUpdateRepoSecret": (owner: string, repo: string, secretName: string, options: { readonly params?: ActionsCreateOrUpdateRepoSecretParams | undefined; readonly payload: ActionsCreateOrUpdateRepoSecretRequest }) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError>
  /**
* Deletes a secret in a repository using the secret name.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteRepoSecret": (owner: string, repo: string, secretName: string, options?: ActionsDeleteRepoSecretParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists all repository variables.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsListRepoVariables": (owner: string, repo: string, options?: ActionsListRepoVariablesParams | undefined) => Effect.Effect<ActionsListRepoVariables200, HttpClientError.HttpClientError>
  /**
* Creates a repository variable that you can reference in a GitHub Actions workflow.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateRepoVariable": (owner: string, repo: string, options: { readonly params?: ActionsCreateRepoVariableParams | undefined; readonly payload: ActionsCreateRepoVariableRequest }) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError>
  /**
* Gets a specific variable in a repository.
* 
* The authenticated user must have collaborator access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetRepoVariable": (owner: string, repo: string, name: string, options?: ActionsGetRepoVariableParams | undefined) => Effect.Effect<ActionsVariable, HttpClientError.HttpClientError>
  /**
* Deletes a repository variable using the variable name.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteRepoVariable": (owner: string, repo: string, name: string, options?: ActionsDeleteRepoVariableParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Updates a repository variable that you can reference in a GitHub Actions workflow.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsUpdateRepoVariable": (owner: string, repo: string, name: string, options: { readonly params?: ActionsUpdateRepoVariableParams | undefined; readonly payload: ActionsUpdateRepoVariableRequest }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists the workflows in a repository.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsListRepoWorkflows": (owner: string, repo: string, options?: ActionsListRepoWorkflowsParams | undefined) => Effect.Effect<ActionsListRepoWorkflows200, HttpClientError.HttpClientError>
  /**
* Gets a specific workflow. You can replace `workflow_id` with the workflow
* file name. For example, you could use `main.yaml`.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsGetWorkflow": (owner: string, repo: string, workflowId: string, options?: ActionsGetWorkflowParams | undefined) => Effect.Effect<Workflow, HttpClientError.HttpClientError>
  /**
* Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDisableWorkflow": (owner: string, repo: string, workflowId: string, options?: ActionsDisableWorkflowParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
* 
* You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateWorkflowDispatch": (owner: string, repo: string, workflowId: string, options: { readonly params?: ActionsCreateWorkflowDispatchParams | undefined; readonly payload: ActionsCreateWorkflowDispatchRequest }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsEnableWorkflow": (owner: string, repo: string, workflowId: string, options?: ActionsEnableWorkflowParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
* 
* Anyone with read access to the repository can use this endpoint
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
* 
* This endpoint will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.
*/
readonly "actionsListWorkflowRuns": (owner: string, repo: string, workflowId: string, options?: ActionsListWorkflowRunsParams | undefined) => Effect.Effect<ActionsListWorkflowRuns200, HttpClientError.HttpClientError>
  /**
* > [!WARNING]  
* > This endpoint is in the process of closing down. Refer to "[Actions Get workflow usage and Get workflow run usage endpoints closing down](https://github.blog/changelog/2025-02-02-actions-get-workflow-usage-and-get-workflow-run-usage-endpoints-closing-down/)" for more information.
* 
* Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
* 
* You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsGetWorkflowUsage": (owner: string, repo: string, workflowId: string, options?: ActionsGetWorkflowUsageParams | undefined) => Effect.Effect<WorkflowUsage, HttpClientError.HttpClientError>
  /**
* Lists a detailed history of changes to a repository, such as pushes, merges, force pushes, and branch changes, and associates these changes with commits and users.
* 
* For more information about viewing repository activity,
* see "[Viewing activity and data for your repository](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository)."
*/
readonly "reposListActivities": (owner: string, repo: string, options?: ReposListActivitiesParams | undefined) => Effect.Effect<ReposListActivities200, HttpClientError.HttpClientError | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
*/
readonly "issuesListAssignees": (owner: string, repo: string, options?: IssuesListAssigneesParams | undefined) => Effect.Effect<IssuesListAssignees200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Checks if a user has permission to be assigned to an issue in this repository.
* 
* If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
* 
* Otherwise a `404` status code is returned.
*/
readonly "issuesCheckUserCanBeAssigned": (owner: string, repo: string, assignee: string, options?: IssuesCheckUserCanBeAssignedParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Store an artifact attestation and associate it with a repository.
* 
* The authenticated user must have write permission to the repository and, if using a fine-grained access token, the `attestations:write` permission is required.
* 
* Artifact attestations are meant to be created using the [attest action](https://github.com/actions/attest). For more information, see our guide on [using artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
*/
readonly "reposCreateAttestation": (owner: string, repo: string, options: { readonly params?: ReposCreateAttestationParams | undefined; readonly payload: ReposCreateAttestationRequest }) => Effect.Effect<ReposCreateAttestation201, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* List a collection of artifact attestations with a given subject digest that are associated with a repository.
* 
* The authenticated user making the request must have read access to the repository. In addition, when using a fine-grained access token the `attestations:read` permission is required.
* 
* **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
*/
readonly "reposListAttestations": (owner: string, repo: string, subjectDigest: string, options?: ReposListAttestationsParams | undefined) => Effect.Effect<ReposListAttestations200, HttpClientError.HttpClientError>
  /**
* Gets all autolinks that are configured for a repository.
* 
* Information about autolinks are only available to repository administrators.
*/
readonly "reposListAutolinks": (owner: string, repo: string, options?: ReposListAutolinksParams | undefined) => Effect.Effect<ReposListAutolinks200, HttpClientError.HttpClientError>
  /**
* Users with admin access to the repository can create an autolink.
*/
readonly "reposCreateAutolink": (owner: string, repo: string, options: { readonly params?: ReposCreateAutolinkParams | undefined; readonly payload: ReposCreateAutolinkRequest }) => Effect.Effect<Autolink, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* This returns a single autolink reference by ID that was configured for the given repository.
* 
* Information about autolinks are only available to repository administrators.
*/
readonly "reposGetAutolink": (owner: string, repo: string, autolinkId: string, options?: ReposGetAutolinkParams | undefined) => Effect.Effect<Autolink, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* This deletes a single autolink reference by ID that was configured for the given repository.
* 
* Information about autolinks are only available to repository administrators.
*/
readonly "reposDeleteAutolink": (owner: string, repo: string, autolinkId: string, options?: ReposDeleteAutolinkParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Shows whether Dependabot security updates are enabled, disabled or paused for a repository. The authenticated user must have admin read access to the repository. For more information, see "[Configuring Dependabot security updates](https://docs.github.com/articles/configuring-automated-security-fixes)".
*/
readonly "reposCheckAutomatedSecurityFixes": (owner: string, repo: string, options?: ReposCheckAutomatedSecurityFixesParams | undefined) => Effect.Effect<CheckAutomatedSecurityFixes, HttpClientError.HttpClientError>
  /**
* Enables Dependabot security updates for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring Dependabot security updates](https://docs.github.com/articles/configuring-automated-security-fixes)".
*/
readonly "reposEnableAutomatedSecurityFixes": (owner: string, repo: string, options?: ReposEnableAutomatedSecurityFixesParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Disables Dependabot security updates for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring Dependabot security updates](https://docs.github.com/articles/configuring-automated-security-fixes)".
*/
readonly "reposDisableAutomatedSecurityFixes": (owner: string, repo: string, options?: ReposDisableAutomatedSecurityFixesParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* List branches
*/
readonly "reposListBranches": (owner: string, repo: string, options?: ReposListBranchesParams | undefined) => Effect.Effect<ReposListBranches200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Get a branch
*/
readonly "reposGetBranch": (owner: string, repo: string, branch: string, options?: ReposGetBranchParams | undefined) => Effect.Effect<BranchWithProtection | BasicError, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposGetBranchProtection": (owner: string, repo: string, branch: string, options?: ReposGetBranchProtectionParams | undefined) => Effect.Effect<BranchProtection, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Protecting a branch requires admin or owner permissions to the repository.
* 
* > [!NOTE]
* > Passing new arrays of `users` and `teams` replaces their previous values.
* 
* > [!NOTE]
* > The list of users, apps, and teams in total is limited to 100 items.
*/
readonly "reposUpdateBranchProtection": (owner: string, repo: string, branch: string, options: { readonly params?: ReposUpdateBranchProtectionParams | undefined; readonly payload: ReposUpdateBranchProtectionRequest }) => Effect.Effect<ProtectedBranch, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposDeleteBranchProtection": (owner: string, repo: string, branch: string, options?: ReposDeleteBranchProtectionParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposGetAdminBranchProtection": (owner: string, repo: string, branch: string, options?: ReposGetAdminBranchProtectionParams | undefined) => Effect.Effect<ProtectedBranchAdminEnforced, HttpClientError.HttpClientError>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
*/
readonly "reposSetAdminBranchProtection": (owner: string, repo: string, branch: string, options?: ReposSetAdminBranchProtectionParams | undefined) => Effect.Effect<ProtectedBranchAdminEnforced, HttpClientError.HttpClientError>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
*/
readonly "reposDeleteAdminBranchProtection": (owner: string, repo: string, branch: string, options?: ReposDeleteAdminBranchProtectionParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposGetPullRequestReviewProtection": (owner: string, repo: string, branch: string, options?: ReposGetPullRequestReviewProtectionParams | undefined) => Effect.Effect<ProtectedBranchPullRequestReview, HttpClientError.HttpClientError>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposDeletePullRequestReviewProtection": (owner: string, repo: string, branch: string, options?: ReposDeletePullRequestReviewProtectionParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
* 
* > [!NOTE]
* > Passing new arrays of `users` and `teams` replaces their previous values.
*/
readonly "reposUpdatePullRequestReviewProtection": (owner: string, repo: string, branch: string, options: { readonly params?: ReposUpdatePullRequestReviewProtectionParams | undefined; readonly payload: ReposUpdatePullRequestReviewProtectionRequest }) => Effect.Effect<ProtectedBranchPullRequestReview, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
* 
* > [!NOTE]
* > You must enable branch protection to require signed commits.
*/
readonly "reposGetCommitSignatureProtection": (owner: string, repo: string, branch: string, options?: ReposGetCommitSignatureProtectionParams | undefined) => Effect.Effect<ProtectedBranchAdminEnforced, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
*/
readonly "reposCreateCommitSignatureProtection": (owner: string, repo: string, branch: string, options?: ReposCreateCommitSignatureProtectionParams | undefined) => Effect.Effect<ProtectedBranchAdminEnforced, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
*/
readonly "reposDeleteCommitSignatureProtection": (owner: string, repo: string, branch: string, options?: ReposDeleteCommitSignatureProtectionParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposGetStatusChecksProtection": (owner: string, repo: string, branch: string, options?: ReposGetStatusChecksProtectionParams | undefined) => Effect.Effect<StatusCheckPolicy, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposRemoveStatusCheckProtection": (owner: string, repo: string, branch: string, options?: ReposRemoveStatusCheckProtectionParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
*/
readonly "reposUpdateStatusCheckProtection": (owner: string, repo: string, branch: string, options: { readonly params?: ReposUpdateStatusCheckProtectionParams | undefined; readonly payload: ReposUpdateStatusCheckProtectionRequest }) => Effect.Effect<StatusCheckPolicy, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposGetAllStatusCheckContexts": (owner: string, repo: string, branch: string, options?: ReposGetAllStatusCheckContextsParams | undefined) => Effect.Effect<ReposGetAllStatusCheckContexts200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposSetStatusCheckContexts": (owner: string, repo: string, branch: string, options: { readonly params?: ReposSetStatusCheckContextsParams | undefined; readonly payload: ReposSetStatusCheckContextsRequest }) => Effect.Effect<ReposSetStatusCheckContexts200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposAddStatusCheckContexts": (owner: string, repo: string, branch: string, options: { readonly params?: ReposAddStatusCheckContextsParams | undefined; readonly payload: ReposAddStatusCheckContextsRequest }) => Effect.Effect<ReposAddStatusCheckContexts200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposRemoveStatusCheckContexts": (owner: string, repo: string, branch: string, options: { readonly params?: ReposRemoveStatusCheckContextsParams | undefined; readonly payload: ReposRemoveStatusCheckContextsRequest }) => Effect.Effect<ReposRemoveStatusCheckContexts200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Lists who has access to this protected branch.
* 
* > [!NOTE]
* > Users, apps, and teams `restrictions` are only available for organization-owned repositories.
*/
readonly "reposGetAccessRestrictions": (owner: string, repo: string, branch: string, options?: ReposGetAccessRestrictionsParams | undefined) => Effect.Effect<BranchRestrictionPolicy, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Disables the ability to restrict who can push to this branch.
*/
readonly "reposDeleteAccessRestrictions": (owner: string, repo: string, branch: string, options?: ReposDeleteAccessRestrictionsParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Lists the GitHub Apps that have push access to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
*/
readonly "reposGetAppsWithAccessToProtectedBranch": (owner: string, repo: string, branch: string, options?: ReposGetAppsWithAccessToProtectedBranchParams | undefined) => Effect.Effect<ReposGetAppsWithAccessToProtectedBranch200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
*/
readonly "reposSetAppAccessRestrictions": (owner: string, repo: string, branch: string, options: { readonly params?: ReposSetAppAccessRestrictionsParams | undefined; readonly payload: ReposSetAppAccessRestrictionsRequest }) => Effect.Effect<ReposSetAppAccessRestrictions200, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Grants the specified apps push access for this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
*/
readonly "reposAddAppAccessRestrictions": (owner: string, repo: string, branch: string, options: { readonly params?: ReposAddAppAccessRestrictionsParams | undefined; readonly payload: ReposAddAppAccessRestrictionsRequest }) => Effect.Effect<ReposAddAppAccessRestrictions200, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Removes the ability of an app to push to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
*/
readonly "reposRemoveAppAccessRestrictions": (owner: string, repo: string, branch: string, options: { readonly params?: ReposRemoveAppAccessRestrictionsParams | undefined; readonly payload: ReposRemoveAppAccessRestrictionsRequest }) => Effect.Effect<ReposRemoveAppAccessRestrictions200, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Lists the teams who have push access to this branch. The list includes child teams.
*/
readonly "reposGetTeamsWithAccessToProtectedBranch": (owner: string, repo: string, branch: string, options?: ReposGetTeamsWithAccessToProtectedBranchParams | undefined) => Effect.Effect<ReposGetTeamsWithAccessToProtectedBranch200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
*/
readonly "reposSetTeamAccessRestrictions": (owner: string, repo: string, branch: string, options: { readonly params?: ReposSetTeamAccessRestrictionsParams | undefined; readonly payload: ReposSetTeamAccessRestrictionsRequest }) => Effect.Effect<ReposSetTeamAccessRestrictions200, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Grants the specified teams push access for this branch. You can also give push access to child teams.
*/
readonly "reposAddTeamAccessRestrictions": (owner: string, repo: string, branch: string, options: { readonly params?: ReposAddTeamAccessRestrictionsParams | undefined; readonly payload: ReposAddTeamAccessRestrictionsRequest }) => Effect.Effect<ReposAddTeamAccessRestrictions200, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Removes the ability of a team to push to this branch. You can also remove push access for child teams.
*/
readonly "reposRemoveTeamAccessRestrictions": (owner: string, repo: string, branch: string, options: { readonly params?: ReposRemoveTeamAccessRestrictionsParams | undefined; readonly payload: ReposRemoveTeamAccessRestrictionsRequest }) => Effect.Effect<ReposRemoveTeamAccessRestrictions200, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Lists the people who have push access to this branch.
*/
readonly "reposGetUsersWithAccessToProtectedBranch": (owner: string, repo: string, branch: string, options?: ReposGetUsersWithAccessToProtectedBranchParams | undefined) => Effect.Effect<ReposGetUsersWithAccessToProtectedBranch200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
* 
* | Type    | Description                                                                                                                   |
* | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
* | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
*/
readonly "reposSetUserAccessRestrictions": (owner: string, repo: string, branch: string, options: { readonly params?: ReposSetUserAccessRestrictionsParams | undefined; readonly payload: ReposSetUserAccessRestrictionsRequest }) => Effect.Effect<ReposSetUserAccessRestrictions200, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Grants the specified people push access for this branch.
* 
* | Type    | Description                                                                                                                   |
* | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
* | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
*/
readonly "reposAddUserAccessRestrictions": (owner: string, repo: string, branch: string, options: { readonly params?: ReposAddUserAccessRestrictionsParams | undefined; readonly payload: ReposAddUserAccessRestrictionsRequest }) => Effect.Effect<ReposAddUserAccessRestrictions200, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Removes the ability of a user to push to this branch.
* 
* | Type    | Description                                                                                                                                   |
* | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
* | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
*/
readonly "reposRemoveUserAccessRestrictions": (owner: string, repo: string, branch: string, options: { readonly params?: ReposRemoveUserAccessRestrictionsParams | undefined; readonly payload: ReposRemoveUserAccessRestrictionsRequest }) => Effect.Effect<ReposRemoveUserAccessRestrictions200, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Renames a branch in a repository.
* 
* > [!NOTE]
* > Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
* 
* The authenticated user must have push access to the branch. If the branch is the default branch, the authenticated user must also have admin or owner permissions.
* 
* In order to rename the default branch, fine-grained access tokens also need the `administration:write` repository permission.
*/
readonly "reposRenameBranch": (owner: string, repo: string, branch: string, options: { readonly params?: ReposRenameBranchParams | undefined; readonly payload: ReposRenameBranchRequest }) => Effect.Effect<BranchWithProtection, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Creates a new check run for a specific commit in a repository.
* 
* To create a check run, you must use a GitHub App. OAuth apps and authenticated users are not able to create a check suite.
* 
* In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
* 
* > [!NOTE]
* > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
*/
readonly "checksCreate": (owner: string, repo: string, options: { readonly params?: ChecksCreateParams | undefined; readonly payload: ChecksCreateRequest }) => Effect.Effect<CheckRun, HttpClientError.HttpClientError>
  /**
* Gets a single check run using its `id`.
* 
* > [!NOTE]
* > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
*/
readonly "checksGet": (owner: string, repo: string, checkRunId: string, options?: ChecksGetParams | undefined) => Effect.Effect<CheckRun, HttpClientError.HttpClientError>
  /**
* Updates a check run for a specific commit in a repository.
* 
* > [!NOTE]
* > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
* 
* OAuth apps and personal access tokens (classic) cannot use this endpoint.
*/
readonly "checksUpdate": (owner: string, repo: string, checkRunId: string, options: { readonly params?: ChecksUpdateParams | undefined; readonly payload: ChecksUpdateRequest }) => Effect.Effect<CheckRun, HttpClientError.HttpClientError>
  /**
* Lists annotations for a check run using the annotation `id`.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
*/
readonly "checksListAnnotations": (owner: string, repo: string, checkRunId: string, options?: ChecksListAnnotationsParams | undefined) => Effect.Effect<ChecksListAnnotations200, HttpClientError.HttpClientError>
  /**
* Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, the `status` of the check suite it belongs to is reset to `queued` and the `conclusion` is cleared. The check run itself is not updated. GitHub apps recieving the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) with the `rerequested` action should then decide if the check run should be reset or updated and call the [update `check_run` endpoint](https://docs.github.com/rest/checks/runs#update-a-check-run) to update the check_run if desired.
* 
* For more information about how to re-run GitHub Actions jobs, see "[Re-run a job from a workflow run](https://docs.github.com/rest/actions/workflow-runs#re-run-a-job-from-a-workflow-run)".
*/
readonly "checksRerequestRun": (owner: string, repo: string, checkRunId: string, options?: ChecksRerequestRunParams | undefined) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Creates a check suite manually. By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/checks/runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/checks/suites#update-repository-preferences-for-check-suites)".
* 
* > [!NOTE]
* > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
* 
* OAuth apps and personal access tokens (classic) cannot use this endpoint.
*/
readonly "checksCreateSuite": (owner: string, repo: string, options: { readonly params?: ChecksCreateSuiteParams | undefined; readonly payload: ChecksCreateSuiteRequest }) => Effect.Effect<CheckSuite | CheckSuite, HttpClientError.HttpClientError>
  /**
* Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/checks/suites#create-a-check-suite).
* You must have admin permissions in the repository to set preferences for check suites.
*/
readonly "checksSetSuitesPreferences": (owner: string, repo: string, options: { readonly params?: ChecksSetSuitesPreferencesParams | undefined; readonly payload: ChecksSetSuitesPreferencesRequest }) => Effect.Effect<CheckSuitePreference, HttpClientError.HttpClientError>
  /**
* Gets a single check suite using its `id`.
* 
* > [!NOTE]
* > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
*/
readonly "checksGetSuite": (owner: string, repo: string, checkSuiteId: string, options?: ChecksGetSuiteParams | undefined) => Effect.Effect<CheckSuite, HttpClientError.HttpClientError>
  /**
* Lists check runs for a check suite using its `id`.
* 
* > [!NOTE]
* > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
*/
readonly "checksListForSuite": (owner: string, repo: string, checkSuiteId: string, options?: ChecksListForSuiteParams | undefined) => Effect.Effect<ChecksListForSuite200, HttpClientError.HttpClientError>
  /**
* Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
*/
readonly "checksRerequestSuite": (owner: string, repo: string, checkSuiteId: string, options?: ChecksRerequestSuiteParams | undefined) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError>
  /**
* Lists code scanning alerts.
* 
* The response includes a `most_recent_instance` object.
* This provides details of the most recent instance of this alert
* for the default branch (or for the specified Git reference if you used `ref` in the request).
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningListAlertsForRepo": (owner: string, repo: string, options?: CodeScanningListAlertsForRepoParams | undefined) => Effect.Effect<CodeScanningListAlertsForRepo200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningListAlertsForRepo503", CodeScanningListAlertsForRepo503>>
  /**
* Gets a single code scanning alert.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningGetAlert": (owner: string, repo: string, alertNumber: string, options?: CodeScanningGetAlertParams | undefined) => Effect.Effect<CodeScanningAlert, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningGetAlert503", CodeScanningGetAlert503>>
  /**
* Updates the status of a single code scanning alert.
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningUpdateAlert": (owner: string, repo: string, alertNumber: string, options: { readonly params?: CodeScanningUpdateAlertParams | undefined; readonly payload: CodeScanningUpdateAlertRequest }) => Effect.Effect<CodeScanningAlert, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningUpdateAlert503", CodeScanningUpdateAlert503>>
  /**
* Gets the status and description of an autofix for a code scanning alert.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningGetAutofix": (owner: string, repo: string, alertNumber: string, options?: CodeScanningGetAutofixParams | undefined) => Effect.Effect<CodeScanningAutofix, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningGetAutofix503", CodeScanningGetAutofix503>>
  /**
* Creates an autofix for a code scanning alert.
* 
* If a new autofix is to be created as a result of this request or is currently being generated, then this endpoint will return a 202 Accepted response.
* 
* If an autofix already exists for a given alert, then this endpoint will return a 200 OK response.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningCreateAutofix": (owner: string, repo: string, alertNumber: string, options?: CodeScanningCreateAutofixParams | undefined) => Effect.Effect<CodeScanningAutofix | CodeScanningAutofix, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningCreateAutofix503", CodeScanningCreateAutofix503>>
  /**
* Commits an autofix for a code scanning alert.
* 
* If an autofix is committed as a result of this request, then this endpoint will return a 201 Created response.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningCommitAutofix": (owner: string, repo: string, alertNumber: string, options: { readonly params?: CodeScanningCommitAutofixParams | undefined; readonly payload: CodeScanningAutofixCommits }) => Effect.Effect<CodeScanningAutofixCommitsResponse, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningCommitAutofix503", CodeScanningCommitAutofix503>>
  /**
* Lists all instances of the specified code scanning alert.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningListAlertInstances": (owner: string, repo: string, alertNumber: string, options?: CodeScanningListAlertInstancesParams | undefined) => Effect.Effect<CodeScanningListAlertInstances200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningListAlertInstances503", CodeScanningListAlertInstances503>>
  /**
* Lists the details of all code scanning analyses for a repository,
* starting with the most recent.
* The response is paginated and you can use the `page` and `per_page` parameters
* to list the analyses you're interested in.
* By default 30 analyses are listed per page.
* 
* The `rules_count` field in the response give the number of rules
* that were run in the analysis.
* For very old analyses this data is not available,
* and `0` is returned in this field.
* 
* > [!WARNING]
* > **Closing down notice:** The `tool_name` field is closing down and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningListRecentAnalyses": (owner: string, repo: string, options?: CodeScanningListRecentAnalysesParams | undefined) => Effect.Effect<CodeScanningListRecentAnalyses200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningListRecentAnalyses503", CodeScanningListRecentAnalyses503>>
  /**
* Gets a specified code scanning analysis for a repository.
* 
* The default JSON response contains fields that describe the analysis.
* This includes the Git reference and commit SHA to which the analysis relates,
* the datetime of the analysis, the name of the code scanning tool,
* and the number of alerts.
* 
* The `rules_count` field in the default response give the number of rules
* that were run in the analysis.
* For very old analyses this data is not available,
* and `0` is returned in this field.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/sarif+json`**: Instead of returning a summary of the analysis, this endpoint returns a subset of the analysis data that was uploaded. The data is formatted as [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html). It also returns additional data such as the `github/alertNumber` and `github/alertUrl` properties.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningGetAnalysis": (owner: string, repo: string, analysisId: string, options?: CodeScanningGetAnalysisParams | undefined) => Effect.Effect<CodeScanningAnalysis, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningGetAnalysis503", CodeScanningGetAnalysis503>>
  /**
* Deletes a specified code scanning analysis from a repository.
* 
* You can delete one analysis at a time.
* To delete a series of analyses, start with the most recent analysis and work backwards.
* Conceptually, the process is similar to the undo function in a text editor.
* 
* When you list the analyses for a repository,
* one or more will be identified as deletable in the response:
* 
* ```
* "deletable": true
* ```
* 
* An analysis is deletable when it's the most recent in a set of analyses.
* Typically, a repository will have multiple sets of analyses
* for each enabled code scanning tool,
* where a set is determined by a unique combination of analysis values:
* 
* * `ref`
* * `tool`
* * `category`
* 
* If you attempt to delete an analysis that is not the most recent in a set,
* you'll get a 400 response with the message:
* 
* ```
* Analysis specified is not deletable.
* ```
* 
* The response from a successful `DELETE` operation provides you with
* two alternative URLs for deleting the next analysis in the set:
* `next_analysis_url` and `confirm_delete_url`.
* Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
* in a set. This is a useful option if you want to preserve at least one analysis
* for the specified tool in your repository.
* Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
* When you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`
* in the 200 response is `null`.
* 
* As an example of the deletion process,
* let's imagine that you added a workflow that configured a particular code scanning tool
* to analyze the code in a repository. This tool has added 15 analyses:
* 10 on the default branch, and another 5 on a topic branch.
* You therefore have two separate sets of analyses for this tool.
* You've now decided that you want to remove all of the analyses for the tool.
* To do this you must make 15 separate deletion requests.
* To start, you must find an analysis that's identified as deletable.
* Each set of analyses always has one that's identified as deletable.
* Having found the deletable analysis for one of the two sets,
* delete this analysis and then continue deleting the next analysis in the set until they're all deleted.
* Then repeat the process for the second set.
* The procedure therefore consists of a nested loop:
* 
* **Outer loop**:
* * List the analyses for the repository, filtered by tool.
* * Parse this list to find a deletable analysis. If found:
* 
*   **Inner loop**:
*   * Delete the identified analysis.
*   * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.
* 
* The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningDeleteAnalysis": (owner: string, repo: string, analysisId: string, options?: CodeScanningDeleteAnalysisParams | undefined) => Effect.Effect<CodeScanningAnalysisDeletion, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningDeleteAnalysis503", CodeScanningDeleteAnalysis503>>
  /**
* Lists the CodeQL databases that are available in a repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningListCodeqlDatabases": (owner: string, repo: string, options?: CodeScanningListCodeqlDatabasesParams | undefined) => Effect.Effect<CodeScanningListCodeqlDatabases200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningListCodeqlDatabases503", CodeScanningListCodeqlDatabases503>>
  /**
* Gets a CodeQL database for a language in a repository.
* 
* By default this endpoint returns JSON metadata about the CodeQL database. To
* download the CodeQL database binary content, set the `Accept` header of the request
* to [`application/zip`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types), and make sure
* your HTTP client is configured to follow redirects or use the `Location` header
* to make a second request to get the redirect URL.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningGetCodeqlDatabase": (owner: string, repo: string, language: string, options?: CodeScanningGetCodeqlDatabaseParams | undefined) => Effect.Effect<CodeScanningCodeqlDatabase, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningGetCodeqlDatabase503", CodeScanningGetCodeqlDatabase503>>
  /**
* Deletes a CodeQL database for a language in a repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningDeleteCodeqlDatabase": (owner: string, repo: string, language: string, options?: CodeScanningDeleteCodeqlDatabaseParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningDeleteCodeqlDatabase503", CodeScanningDeleteCodeqlDatabase503>>
  /**
* Creates a new CodeQL variant analysis, which will run a CodeQL query against one or more repositories.
* 
* Get started by learning more about [running CodeQL queries at scale with Multi-Repository Variant Analysis](https://docs.github.com/code-security/codeql-for-vs-code/getting-started-with-codeql-for-vs-code/running-codeql-queries-at-scale-with-multi-repository-variant-analysis).
* 
* Use the `owner` and `repo` parameters in the URL to specify the controller repository that
* will be used for running GitHub Actions workflows and storing the results of the CodeQL variant analysis.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "codeScanningCreateVariantAnalysis": (owner: string, repo: string, options: { readonly params?: CodeScanningCreateVariantAnalysisParams | undefined; readonly payload: CodeScanningCreateVariantAnalysisRequest }) => Effect.Effect<CodeScanningVariantAnalysis, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningCreateVariantAnalysis503", CodeScanningCreateVariantAnalysis503>>
  /**
* Gets the summary of a CodeQL variant analysis.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningGetVariantAnalysis": (owner: string, repo: string, codeqlVariantAnalysisId: string, options?: CodeScanningGetVariantAnalysisParams | undefined) => Effect.Effect<CodeScanningVariantAnalysis, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningGetVariantAnalysis503", CodeScanningGetVariantAnalysis503>>
  /**
* Gets the analysis status of a repository in a CodeQL variant analysis.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningGetVariantAnalysisRepoTask": (owner: string, repo: string, codeqlVariantAnalysisId: string, repoOwner: string, repoName: string, options?: CodeScanningGetVariantAnalysisRepoTaskParams | undefined) => Effect.Effect<CodeScanningVariantAnalysisRepoTask, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningGetVariantAnalysisRepoTask503", CodeScanningGetVariantAnalysisRepoTask503>>
  /**
* Gets a code scanning default setup configuration.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningGetDefaultSetup": (owner: string, repo: string, options?: CodeScanningGetDefaultSetupParams | undefined) => Effect.Effect<CodeScanningDefaultSetup, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningGetDefaultSetup503", CodeScanningGetDefaultSetup503>>
  /**
* Updates a code scanning default setup configuration.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningUpdateDefaultSetup": (owner: string, repo: string, options: { readonly params?: CodeScanningUpdateDefaultSetupParams | undefined; readonly payload: CodeScanningDefaultSetupUpdate }) => Effect.Effect<EmptyObject | CodeScanningDefaultSetupUpdateResponse, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningUpdateDefaultSetup503", CodeScanningUpdateDefaultSetup503>>
  /**
* Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. For troubleshooting information, see "[Troubleshooting SARIF uploads](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif)."
* 
* There are two places where you can upload code scanning results.
*  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
*  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
* 
* You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
* 
* ```
* gzip -c analysis-data.sarif | base64 -w0
* ```
* 
* SARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.
* To get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries. For more information, see "[SARIF results exceed one or more limits](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif/results-exceed-limit)."
* 
* 
* | **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |
* |----------------------------------|:------------------:|----------------------------------------------------------------------------------|
* | Runs per file                    |         20         |                                                                                  |
* | Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |
* | Rules per run                    |       25,000       |                                                                                  |
* | Tool extensions per run          |        100         |                                                                                  |
* | Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |
* | Location per result	             |       1,000        | Only 100 locations will be included.                                             |
* | Tags per rule	                   |         20         | Only 10 tags will be included.                                                   |
* 
* 
* The `202 Accepted` response includes an `id` value.
* You can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.
* For more information, see "[Get information about a SARIF upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload)."
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
* 
* This endpoint is limited to 1,000 requests per hour for each user or app installation calling it.
*/
readonly "codeScanningUploadSarif": (owner: string, repo: string, options: { readonly params?: CodeScanningUploadSarifParams | undefined; readonly payload: CodeScanningUploadSarifRequest }) => Effect.Effect<CodeScanningSarifsReceipt, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningUploadSarif503", CodeScanningUploadSarif503>>
  /**
* Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository)."
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningGetSarif": (owner: string, repo: string, sarifId: string, options?: CodeScanningGetSarifParams | undefined) => Effect.Effect<CodeScanningSarifsStatus, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"CodeScanningGetSarif503", CodeScanningGetSarif503>>
  /**
* Get the code security configuration that manages a repository's code security settings.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "codeSecurityGetConfigurationForRepository": (owner: string, repo: string, options?: CodeSecurityGetConfigurationForRepositoryParams | undefined) => Effect.Effect<CodeSecurityConfigurationForRepository, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* List any syntax errors that are detected in the CODEOWNERS
* file.
* 
* For more information about the correct CODEOWNERS syntax,
* see "[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
*/
readonly "reposCodeownersErrors": (owner: string, repo: string, options?: ReposCodeownersErrorsParams | undefined) => Effect.Effect<CodeownersErrors, HttpClientError.HttpClientError>
  /**
* Lists the codespaces associated to a specified repository and the authenticated user.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesListInRepositoryForAuthenticatedUser": (owner: string, repo: string, options?: CodespacesListInRepositoryForAuthenticatedUserParams | undefined) => Effect.Effect<CodespacesListInRepositoryForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Creates a codespace owned by the authenticated user in the specified repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesCreateWithRepoForAuthenticatedUser": (owner: string, repo: string, options: { readonly params?: CodespacesCreateWithRepoForAuthenticatedUserParams | undefined; readonly payload: CodespacesCreateWithRepoForAuthenticatedUserRequest }) => Effect.Effect<Codespace | Codespace, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodespacesCreateWithRepoForAuthenticatedUser503", CodespacesCreateWithRepoForAuthenticatedUser503>>
  /**
* Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files
* specify launchpoint configurations for codespaces created within the repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesListDevcontainersInRepositoryForAuthenticatedUser": (owner: string, repo: string, options?: CodespacesListDevcontainersInRepositoryForAuthenticatedUserParams | undefined) => Effect.Effect<CodespacesListDevcontainersInRepositoryForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* List the machine types available for a given repository based on its configuration.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesRepoMachinesForAuthenticatedUser": (owner: string, repo: string, options?: CodespacesRepoMachinesForAuthenticatedUserParams | undefined) => Effect.Effect<CodespacesRepoMachinesForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Gets the default attributes for codespaces created by the user with the repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesPreFlightWithRepoForAuthenticatedUser": (owner: string, repo: string, options?: CodespacesPreFlightWithRepoForAuthenticatedUserParams | undefined) => Effect.Effect<CodespacesPreFlightWithRepoForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Checks whether the permissions defined by a given devcontainer configuration have been accepted by the authenticated user.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesCheckPermissionsForDevcontainer": (owner: string, repo: string, options: CodespacesCheckPermissionsForDevcontainerParams) => Effect.Effect<CodespacesPermissionsCheckForDevcontainer, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError> | ClientError<"CodespacesCheckPermissionsForDevcontainer503", CodespacesCheckPermissionsForDevcontainer503>>
  /**
* Lists all development environment secrets available in a repository without revealing their encrypted
* values.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "codespacesListRepoSecrets": (owner: string, repo: string, options?: CodespacesListRepoSecretsParams | undefined) => Effect.Effect<CodespacesListRepoSecrets200, HttpClientError.HttpClientError>
  /**
* Gets your public key, which you need to encrypt secrets. You need to
* encrypt a secret before you can create or update secrets.
* 
* If the repository is private, OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "codespacesGetRepoPublicKey": (owner: string, repo: string, options?: CodespacesGetRepoPublicKeyParams | undefined) => Effect.Effect<CodespacesPublicKey, HttpClientError.HttpClientError>
  /**
* Gets a single repository development environment secret without revealing its encrypted value.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "codespacesGetRepoSecret": (owner: string, repo: string, secretName: string, options?: CodespacesGetRepoSecretParams | undefined) => Effect.Effect<RepoCodespacesSecret, HttpClientError.HttpClientError>
  /**
* Creates or updates a repository development environment secret with an encrypted value. Encrypt your secret using
* [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The associated user must be a repository admin.
*/
readonly "codespacesCreateOrUpdateRepoSecret": (owner: string, repo: string, secretName: string, options: { readonly params?: CodespacesCreateOrUpdateRepoSecretParams | undefined; readonly payload: CodespacesCreateOrUpdateRepoSecretRequest }) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError>
  /**
* Deletes a development environment secret in a repository using the secret name.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The associated user must be a repository admin.
*/
readonly "codespacesDeleteRepoSecret": (owner: string, repo: string, secretName: string, options?: CodespacesDeleteRepoSecretParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
* The `permissions` hash returned in the response contains the base role permissions of the collaborator. The `role_name` is the highest role assigned to the collaborator after considering all sources of grants, including: repo, teams, organization, and enterprise.
* There is presently not a way to differentiate between an organization level grant and a repository level grant from this endpoint response.
* 
* Team members will include the members of child teams.
* 
* The authenticated user must have write, maintain, or admin privileges on the repository to use this endpoint. For organization-owned repositories, the authenticated user needs to be a member of the organization.
* OAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.
*/
readonly "reposListCollaborators": (owner: string, repo: string, options?: ReposListCollaboratorsParams | undefined) => Effect.Effect<ReposListCollaborators200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
* 
* Team members will include the members of child teams.
* 
* The authenticated user must have push access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.
*/
readonly "reposCheckCollaborator": (owner: string, repo: string, username: string, options?: ReposCheckCollaboratorParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Add a user to a repository with a specified level of access. If the repository is owned by an organization, this API does not add the user to the organization - a user that has repository access without being an organization member is called an "outside collaborator" (if they are not an Enterprise Managed User) or a "repository collaborator" if they are an Enterprise Managed User. These users are exempt from some organization policies - see "[Adding outside collaborators to repositories](https://docs.github.com/organizations/managing-user-access-to-your-organizations-repositories/managing-outside-collaborators/adding-outside-collaborators-to-repositories-in-your-organization)" to learn more about these collaborator types.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
* 
* Adding an outside collaborator may be restricted by enterprise and organization administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)" and "[Setting permissions for adding outside collaborators](https://docs.github.com/organizations/managing-organization-settings/setting-permissions-for-adding-outside-collaborators)" for organization settings.
* 
* For more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the role being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:
* 
* ```
* Cannot assign {member} permission of {role name}
* ```
* 
* Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
* 
* The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [API](https://docs.github.com/rest/collaborators/invitations).
* 
* For Enterprise Managed Users, this endpoint does not send invitations - these users are automatically added to organizations and repositories. Enterprise Managed Users can only be added to organizations and repositories within their enterprise.
* 
* **Updating an existing collaborator's permission level**
* 
* The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.
* 
* **Rate limits**
* 
* You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
*/
readonly "reposAddCollaborator": (owner: string, repo: string, username: string, options: { readonly params?: ReposAddCollaboratorParams | undefined; readonly payload: ReposAddCollaboratorRequest }) => Effect.Effect<RepositoryInvitation, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Removes a collaborator from a repository.
* 
* To use this endpoint, the authenticated user must either be an administrator of the repository or target themselves for removal.
* 
* This endpoint also:
* - Cancels any outstanding invitations sent by the collaborator
* - Unassigns the user from any issues
* - Removes access to organization projects if the user is not an organization member and is not a collaborator on any other organization repositories.
* - Unstars the repository
* - Updates access permissions to packages
* 
* Removing a user as a collaborator has the following effects on forks:
*  - If the user had access to a fork through their membership to this repository, the user will also be removed from the fork.
*  - If the user had their own fork of the repository, the fork will be deleted.
*  - If the user still has read access to the repository, open pull requests by this user from a fork will be denied.
* 
* > [!NOTE]
* > A user can still have access to the repository through organization permissions like base repository permissions.
* 
* Although the API responds immediately, the additional permission updates might take some extra time to complete in the background.
* 
* For more information on fork permissions, see "[About permissions and visibility of forks](https://docs.github.com/pull-requests/collaborating-with-pull-requests/working-with-forks/about-permissions-and-visibility-of-forks)".
*/
readonly "reposRemoveCollaborator": (owner: string, repo: string, username: string, options?: ReposRemoveCollaboratorParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Checks the repository permission and role of a collaborator.
* 
* The `permission` attribute provides the legacy base roles of `admin`, `write`, `read`, and `none`, where the
* `maintain` role is mapped to `write` and the `triage` role is mapped to `read`.
* The `role_name` attribute provides the name of the assigned role, including custom roles. The
* `permission` can also be used to determine which base level of access the collaborator has to the repository.
* 
* The calculated permissions are the highest role assigned to the collaborator after considering all sources of grants, including: repo, teams, organization, and enterprise.
* There is presently not a way to differentiate between an organization level grant and a repository level grant from this endpoint response.
*/
readonly "reposGetCollaboratorPermissionLevel": (owner: string, repo: string, username: string, options?: ReposGetCollaboratorPermissionLevelParams | undefined) => Effect.Effect<RepositoryCollaboratorPermission, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Lists the commit comments for a specified repository. Comments are ordered by ascending ID.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "reposListCommitCommentsForRepo": (owner: string, repo: string, options?: ReposListCommitCommentsForRepoParams | undefined) => Effect.Effect<ReposListCommitCommentsForRepo200, HttpClientError.HttpClientError>
  /**
* Gets a specified commit comment.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "reposGetCommitComment": (owner: string, repo: string, commentId: string, options?: ReposGetCommitCommentParams | undefined) => Effect.Effect<CommitComment, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Delete a commit comment
*/
readonly "reposDeleteCommitComment": (owner: string, repo: string, commentId: string, options?: ReposDeleteCommitCommentParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Updates the contents of a specified commit comment.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "reposUpdateCommitComment": (owner: string, repo: string, commentId: string, options: { readonly params?: ReposUpdateCommitCommentParams | undefined; readonly payload: ReposUpdateCommitCommentRequest }) => Effect.Effect<CommitComment, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* List the reactions to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).
*/
readonly "reactionsListForCommitComment": (owner: string, repo: string, commentId: string, options?: ReactionsListForCommitCommentParams | undefined) => Effect.Effect<ReactionsListForCommitComment200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Create a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
*/
readonly "reactionsCreateForCommitComment": (owner: string, repo: string, commentId: string, options: { readonly params?: ReactionsCreateForCommitCommentParams | undefined; readonly payload: ReactionsCreateForCommitCommentRequest }) => Effect.Effect<Reaction | Reaction, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* > [!NOTE]
* > You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
* 
* Delete a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).
*/
readonly "reactionsDeleteForCommitComment": (owner: string, repo: string, commentId: string, reactionId: string, options?: ReactionsDeleteForCommitCommentParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* **Signature verification object**
* 
* The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
* 
* | Name | Type | Description |
* | ---- | ---- | ----------- |
* | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
* | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
* | `signature` | `string` | The signature that was extracted from the commit. |
* | `payload` | `string` | The value that was signed. |
* | `verified_at` | `string` | The date the signature was verified by GitHub. |
* 
* These are the possible values for `reason` in the `verification` object:
* 
* | Value | Description |
* | ----- | ----------- |
* | `expired_key` | The key that made the signature is expired. |
* | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
* | `gpgverify_error` | There was an error communicating with the signature verification service. |
* | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
* | `unsigned` | The object does not include a signature. |
* | `unknown_signature_type` | A non-PGP signature was found in the commit. |
* | `no_user` | No user was associated with the `committer` email address in the commit. |
* | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
* | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
* | `unknown_key` | The key that made the signature has not been registered with any user's account. |
* | `malformed_signature` | There was an error parsing the signature. |
* | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
* | `valid` | None of the above errors applied, so the signature is considered to be verified. |
*/
readonly "reposListCommits": (owner: string, repo: string, options?: ReposListCommitsParams | undefined) => Effect.Effect<ReposListCommits200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
*/
readonly "reposListBranchesForHeadCommit": (owner: string, repo: string, commitSha: string, options?: ReposListBranchesForHeadCommitParams | undefined) => Effect.Effect<ReposListBranchesForHeadCommit200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists the comments for a specified commit.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "reposListCommentsForCommit": (owner: string, repo: string, commitSha: string, options?: ReposListCommentsForCommitParams | undefined) => Effect.Effect<ReposListCommentsForCommit200, HttpClientError.HttpClientError>
  /**
* Create a comment for a commit using its `:commit_sha`.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "reposCreateCommitComment": (owner: string, repo: string, commitSha: string, options: { readonly params?: ReposCreateCommitCommentParams | undefined; readonly payload: ReposCreateCommitCommentRequest }) => Effect.Effect<CommitComment, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, it will return merged and open pull requests associated with the commit.
* 
* To list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.
*/
readonly "reposListPullRequestsAssociatedWithCommit": (owner: string, repo: string, commitSha: string, options?: ReposListPullRequestsAssociatedWithCommitParams | undefined) => Effect.Effect<ReposListPullRequestsAssociatedWithCommit200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
* 
* > [!NOTE]
* > If there are more than 300 files in the commit diff and the default JSON media type is requested, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." Pagination query parameters are not supported for these media types.
* 
* - **`application/vnd.github.diff`**: Returns the diff of the commit. Larger diffs may time out and return a 5xx status code.
* - **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property. Larger diffs may time out and return a 5xx status code.
* - **`application/vnd.github.sha`**: Returns the commit's SHA-1 hash. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
* 
* **Signature verification object**
* 
* The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
* 
* | Name | Type | Description |
* | ---- | ---- | ----------- |
* | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
* | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
* | `signature` | `string` | The signature that was extracted from the commit. |
* | `payload` | `string` | The value that was signed. |
* | `verified_at` | `string` | The date the signature was verified by GitHub. |
* 
* These are the possible values for `reason` in the `verification` object:
* 
* | Value | Description |
* | ----- | ----------- |
* | `expired_key` | The key that made the signature is expired. |
* | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
* | `gpgverify_error` | There was an error communicating with the signature verification service. |
* | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
* | `unsigned` | The object does not include a signature. |
* | `unknown_signature_type` | A non-PGP signature was found in the commit. |
* | `no_user` | No user was associated with the `committer` email address in the commit. |
* | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
* | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
* | `unknown_key` | The key that made the signature has not been registered with any user's account. |
* | `malformed_signature` | There was an error parsing the signature. |
* | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
* | `valid` | None of the above errors applied, so the signature is considered to be verified. |
*/
readonly "reposGetCommit": (owner: string, repo: string, ref: string, options?: ReposGetCommitParams | undefined) => Effect.Effect<Commit, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError> | ClientError<"BasicError", BasicError> | ClientError<"ReposGetCommit503", ReposGetCommit503>>
  /**
* Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name.
* 
* > [!NOTE]
* > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
* 
* If there are more than 1000 check suites on a single git reference, this endpoint will limit check runs to the 1000 most recent check suites. To iterate over all possible check runs, use the [List check suites for a Git reference](https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference) endpoint and provide the `check_suite_id` parameter to the [List check runs in a check suite](https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite) endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
*/
readonly "checksListForRef": (owner: string, repo: string, ref: string, options?: ChecksListForRefParams | undefined) => Effect.Effect<ChecksListForRef200, HttpClientError.HttpClientError>
  /**
* Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name.
* 
* > [!NOTE]
* > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
*/
readonly "checksListSuitesForRef": (owner: string, repo: string, ref: string, options?: ChecksListSuitesForRefParams | undefined) => Effect.Effect<ChecksListSuitesForRef200, HttpClientError.HttpClientError>
  /**
* Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
* 
* 
* Additionally, a combined `state` is returned. The `state` is one of:
* 
* *   **failure** if any of the contexts report as `error` or `failure`
* *   **pending** if there are no statuses or a context is `pending`
* *   **success** if the latest status for all contexts is `success`
*/
readonly "reposGetCombinedStatusForRef": (owner: string, repo: string, ref: string, options?: ReposGetCombinedStatusForRefParams | undefined) => Effect.Effect<CombinedCommitStatus, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
* 
* This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
*/
readonly "reposListCommitStatusesForRef": (owner: string, repo: string, ref: string, options?: ReposListCommitStatusesForRefParams | undefined) => Effect.Effect<ReposListCommitStatusesForRef200 | BasicError, HttpClientError.HttpClientError>
  /**
* Returns all community profile metrics for a repository. The repository cannot be a fork.
* 
* The returned metrics include an overall health score, the repository description, the presence of documentation, the
* detected code of conduct, the detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
* README, and CONTRIBUTING files.
* 
* The `health_percentage` score is defined as a percentage of how many of
* the recommended community health files are present. For more information, see
* "[About community profiles for public repositories](https://docs.github.com/communities/setting-up-your-project-for-healthy-contributions/about-community-profiles-for-public-repositories)."
* 
* `content_reports_enabled` is only returned for organization-owned repositories.
*/
readonly "reposGetCommunityProfileMetrics": (owner: string, repo: string, options?: ReposGetCommunityProfileMetricsParams | undefined) => Effect.Effect<CommunityProfile, HttpClientError.HttpClientError>
  /**
* Compares two commits against one another. You can compare refs (branches or tags) and commit SHAs in the same repository, or you can compare refs and commit SHAs that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
* 
* This endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.diff`**: Returns the diff of the commit.
* - **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property.
* 
* The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
* 
* When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
* 
* **Working with large comparisons**
* 
* To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
* 
* - The list of changed files is only shown on the first page of results, and it includes up to 300 changed files for the entire comparison.
* - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
* 
* For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
* 
* **Signature verification object**
* 
* The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
* 
* | Name | Type | Description |
* | ---- | ---- | ----------- |
* | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
* | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
* | `signature` | `string` | The signature that was extracted from the commit. |
* | `payload` | `string` | The value that was signed. |
* | `verified_at` | `string` | The date the signature was verified by GitHub. |
* 
* These are the possible values for `reason` in the `verification` object:
* 
* | Value | Description |
* | ----- | ----------- |
* | `expired_key` | The key that made the signature is expired. |
* | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
* | `gpgverify_error` | There was an error communicating with the signature verification service. |
* | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
* | `unsigned` | The object does not include a signature. |
* | `unknown_signature_type` | A non-PGP signature was found in the commit. |
* | `no_user` | No user was associated with the `committer` email address in the commit. |
* | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
* | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
* | `unknown_key` | The key that made the signature has not been registered with any user's account. |
* | `malformed_signature` | There was an error parsing the signature. |
* | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
* | `valid` | None of the above errors applied, so the signature is considered to be verified. |
*/
readonly "reposCompareCommits": (owner: string, repo: string, basehead: string, options?: ReposCompareCommitsParams | undefined) => Effect.Effect<CommitComparison, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ReposCompareCommits503", ReposCompareCommits503>>
  /**
* Gets the contents of a file or directory in a repository. Specify the file path or directory with the `path` parameter. If you omit the `path` parameter, you will receive the contents of the repository's root directory.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw file contents for files and symlinks.
* - **`application/vnd.github.html+json`**: Returns the file contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
* - **`application/vnd.github.object+json`**: Returns the contents in a consistent object format regardless of the content type. For example, instead of an array of objects for a directory, the response will be an object with an `entries` attribute containing the array of objects.
* 
* If the content is a directory, the response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value _should_ be "submodule". This behavior exists [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as "submodule".
* 
* If the content is a symlink and the symlink's target is a normal file in the repository, then the API responds with the content of the file. Otherwise, the API responds with an object describing the symlink itself.
* 
* If the content is a submodule, the `submodule_git_url` field identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit. If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the github.com URLs (`html_url` and `_links["html"]`) will have null values.
* 
* **Notes**:
* 
* - To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/git/trees#get-a-tree).
* - This API has an upper limit of 1,000 files for a directory. If you need to retrieve
* more files, use the [Git Trees API](https://docs.github.com/rest/git/trees#get-a-tree).
* - Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
* - If the requested file's size is:
*   - 1 MB or smaller: All features of this endpoint are supported.
*   - Between 1-100 MB: Only the `raw` or `object` custom media types are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty
* string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.
*   - Greater than 100 MB: This endpoint is not supported.
*/
readonly "reposGetContent": (owner: string, repo: string, path: string, options?: ReposGetContentParams | undefined) => Effect.Effect<ReposGetContent200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Creates a new file or replaces an existing file in a repository.
* 
* > [!NOTE]
* > If you use this endpoint and the "[Delete a file](https://docs.github.com/rest/repos/contents/#delete-a-file)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The `workflow` scope is also required in order to modify files in the `.github/workflows` directory.
*/
readonly "reposCreateOrUpdateFileContents": (owner: string, repo: string, path: string, options: { readonly params?: ReposCreateOrUpdateFileContentsParams | undefined; readonly payload: ReposCreateOrUpdateFileContentsRequest }) => Effect.Effect<FileCommit | FileCommit, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ReposCreateOrUpdateFileContents409", ReposCreateOrUpdateFileContents409> | ClientError<"ValidationError", ValidationError>>
  /**
* Deletes a file in a repository.
* 
* You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
* 
* The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
* 
* You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
* 
* > [!NOTE]
* > If you use this endpoint and the "[Create or update file contents](https://docs.github.com/rest/repos/contents/#create-or-update-file-contents)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
*/
readonly "reposDeleteFile": (owner: string, repo: string, path: string, options: { readonly params?: ReposDeleteFileParams | undefined; readonly payload: ReposDeleteFileRequest }) => Effect.Effect<FileCommit, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError> | ClientError<"ReposDeleteFile503", ReposDeleteFile503>>
  /**
* Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
* 
* GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
*/
readonly "reposListContributors": (owner: string, repo: string, options?: ReposListContributorsParams | undefined) => Effect.Effect<ReposListContributors200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "dependabotListAlertsForRepo": (owner: string, repo: string, options?: DependabotListAlertsForRepoParams | undefined) => Effect.Effect<DependabotListAlertsForRepo200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "dependabotGetAlert": (owner: string, repo: string, alertNumber: string, options?: DependabotGetAlertParams | undefined) => Effect.Effect<DependabotAlert, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* The authenticated user must have access to security alerts for the repository to use this endpoint. For more information, see "[Granting access to security alerts](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository#granting-access-to-security-alerts)."
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "dependabotUpdateAlert": (owner: string, repo: string, alertNumber: string, options: { readonly params?: DependabotUpdateAlertParams | undefined; readonly payload: DependabotUpdateAlertRequest }) => Effect.Effect<DependabotAlert, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Lists all secrets available in a repository without revealing their encrypted
* values.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "dependabotListRepoSecrets": (owner: string, repo: string, options?: DependabotListRepoSecretsParams | undefined) => Effect.Effect<DependabotListRepoSecrets200, HttpClientError.HttpClientError>
  /**
* Gets your public key, which you need to encrypt secrets. You need to
* encrypt a secret before you can create or update secrets. Anyone with read access
* to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint if the repository is private.
*/
readonly "dependabotGetRepoPublicKey": (owner: string, repo: string, options?: DependabotGetRepoPublicKeyParams | undefined) => Effect.Effect<DependabotPublicKey, HttpClientError.HttpClientError>
  /**
* Gets a single repository secret without revealing its encrypted value.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "dependabotGetRepoSecret": (owner: string, repo: string, secretName: string, options?: DependabotGetRepoSecretParams | undefined) => Effect.Effect<DependabotSecret, HttpClientError.HttpClientError>
  /**
* Creates or updates a repository secret with an encrypted value. Encrypt your secret using
* [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "dependabotCreateOrUpdateRepoSecret": (owner: string, repo: string, secretName: string, options: { readonly params?: DependabotCreateOrUpdateRepoSecretParams | undefined; readonly payload: DependabotCreateOrUpdateRepoSecretRequest }) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError>
  /**
* Deletes a secret in a repository using the secret name.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "dependabotDeleteRepoSecret": (owner: string, repo: string, secretName: string, options?: DependabotDeleteRepoSecretParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
*/
readonly "dependencyGraphDiffRange": (owner: string, repo: string, basehead: string, options?: DependencyGraphDiffRangeParams | undefined) => Effect.Effect<DependencyGraphDiff, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Exports the software bill of materials (SBOM) for a repository in SPDX JSON format.
*/
readonly "dependencyGraphExportSbom": (owner: string, repo: string, options?: DependencyGraphExportSbomParams | undefined) => Effect.Effect<DependencyGraphSpdxSbom, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Create a new snapshot of a repository's dependencies.
* 
* The authenticated user must have access to the repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "dependencyGraphCreateRepositorySnapshot": (owner: string, repo: string, options: { readonly params?: DependencyGraphCreateRepositorySnapshotParams | undefined; readonly payload: Snapshot }) => Effect.Effect<DependencyGraphCreateRepositorySnapshot201, HttpClientError.HttpClientError>
  /**
* Simple filtering of deployments is available via query parameters:
*/
readonly "reposListDeployments": (owner: string, repo: string, options?: ReposListDeploymentsParams | undefined) => Effect.Effect<ReposListDeployments200, HttpClientError.HttpClientError>
  /**
* Deployments offer a few configurable parameters with certain defaults.
* 
* The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
* before we merge a pull request.
* 
* The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
* multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
* makes it easier to track which environments have requested deployments. The default environment is `production`.
* 
* The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
* the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
* the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
* return a failure response.
* 
* By default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a `success`
* state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
* specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
* not require any contexts or create any commit statuses, the deployment will always succeed.
* 
* The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
* field that will be passed on when a deployment event is dispatched.
* 
* The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
* be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
* application with debugging enabled.
* 
* Merged branch response:
* 
* You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
* a deployment. This auto-merge happens when:
* *   Auto-merge option is enabled in the repository
* *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
* *   There are no merge conflicts
* 
* If there are no new commits in the base branch, a new request to create a deployment should give a successful
* response.
* 
* Merge conflict response:
* 
* This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
* be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
* 
* Failed commit status checks:
* 
* This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
* status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint.
*/
readonly "reposCreateDeployment": (owner: string, repo: string, options: { readonly params?: ReposCreateDeploymentParams | undefined; readonly payload: ReposCreateDeploymentRequest }) => Effect.Effect<Deployment | ReposCreateDeployment202, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Get a deployment
*/
readonly "reposGetDeployment": (owner: string, repo: string, deploymentId: string, options?: ReposGetDeploymentParams | undefined) => Effect.Effect<Deployment, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment.
* 
* To set a deployment as inactive, you must:
* 
* *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
* *   Mark the active deployment as inactive by adding any non-successful deployment status.
* 
* For more information, see "[Create a deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/deployments/statuses#create-a-deployment-status)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint.
*/
readonly "reposDeleteDeployment": (owner: string, repo: string, deploymentId: string, options?: ReposDeleteDeploymentParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Users with pull access can view deployment statuses for a deployment:
*/
readonly "reposListDeploymentStatuses": (owner: string, repo: string, deploymentId: string, options?: ReposListDeploymentStatusesParams | undefined) => Effect.Effect<ReposListDeploymentStatuses200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Users with `push` access can create deployment statuses for a given deployment.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo_deployment` scope to use this endpoint.
*/
readonly "reposCreateDeploymentStatus": (owner: string, repo: string, deploymentId: string, options: { readonly params?: ReposCreateDeploymentStatusParams | undefined; readonly payload: ReposCreateDeploymentStatusRequest }) => Effect.Effect<DeploymentStatus, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Users with pull access can view a deployment status for a deployment:
*/
readonly "reposGetDeploymentStatus": (owner: string, repo: string, deploymentId: string, statusId: string, options?: ReposGetDeploymentStatusParams | undefined) => Effect.Effect<DeploymentStatus, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
* 
* The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
* 
* This input example shows how you can use the `client_payload` as a test to debug your workflow.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposCreateDispatchEvent": (owner: string, repo: string, options: { readonly params?: ReposCreateDispatchEventParams | undefined; readonly payload: ReposCreateDispatchEventRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists the environments for a repository.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "reposGetAllEnvironments": (owner: string, repo: string, options?: ReposGetAllEnvironmentsParams | undefined) => Effect.Effect<ReposGetAllEnvironments200, HttpClientError.HttpClientError>
  /**
* > [!NOTE]
* > To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "reposGetEnvironment": (owner: string, repo: string, environmentName: string, options?: ReposGetEnvironmentParams | undefined) => Effect.Effect<Environment, HttpClientError.HttpClientError>
  /**
* Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
* 
* > [!NOTE]
* > To create or update name patterns that branches must match in order to deploy to this environment, see "[Deployment branch policies](/rest/deployments/branch-policies)."
* 
* > [!NOTE]
* > To create or update secrets for an environment, see "[GitHub Actions secrets](/rest/actions/secrets)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposCreateOrUpdateEnvironment": (owner: string, repo: string, environmentName: string, options: { readonly params?: ReposCreateOrUpdateEnvironmentParams | undefined; readonly payload: ReposCreateOrUpdateEnvironmentRequest }) => Effect.Effect<Environment, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposDeleteAnEnvironment": (owner: string, repo: string, environmentName: string, options?: ReposDeleteAnEnvironmentParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists the deployment branch policies for an environment.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "reposListDeploymentBranchPolicies": (owner: string, repo: string, environmentName: string, options?: ReposListDeploymentBranchPoliciesParams | undefined) => Effect.Effect<ReposListDeploymentBranchPolicies200, HttpClientError.HttpClientError>
  /**
* Creates a deployment branch or tag policy for an environment.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposCreateDeploymentBranchPolicy": (owner: string, repo: string, environmentName: string, options: { readonly params?: ReposCreateDeploymentBranchPolicyParams | undefined; readonly payload: DeploymentBranchPolicyNamePatternWithType }) => Effect.Effect<DeploymentBranchPolicy, HttpClientError.HttpClientError>
  /**
* Gets a deployment branch or tag policy for an environment.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "reposGetDeploymentBranchPolicy": (owner: string, repo: string, environmentName: string, branchPolicyId: string, options?: ReposGetDeploymentBranchPolicyParams | undefined) => Effect.Effect<DeploymentBranchPolicy, HttpClientError.HttpClientError>
  /**
* Updates a deployment branch or tag policy for an environment.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposUpdateDeploymentBranchPolicy": (owner: string, repo: string, environmentName: string, branchPolicyId: string, options: { readonly params?: ReposUpdateDeploymentBranchPolicyParams | undefined; readonly payload: DeploymentBranchPolicyNamePattern }) => Effect.Effect<DeploymentBranchPolicy, HttpClientError.HttpClientError>
  /**
* Deletes a deployment branch or tag policy for an environment.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposDeleteDeploymentBranchPolicy": (owner: string, repo: string, environmentName: string, branchPolicyId: string, options?: ReposDeleteDeploymentBranchPolicyParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Gets all custom deployment protection rules that are enabled for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
* 
* For more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app).
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "reposGetAllDeploymentProtectionRules": (owner: string, repo: string, environmentName: string, options?: ReposGetAllDeploymentProtectionRulesParams | undefined) => Effect.Effect<ReposGetAllDeploymentProtectionRules200, HttpClientError.HttpClientError>
  /**
* Enable a custom deployment protection rule for an environment.
* 
* The authenticated user must have admin or owner permissions to the repository to use this endpoint.
* 
* For more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app), as well as the [guide to creating custom deployment protection rules](https://docs.github.com/actions/managing-workflow-runs-and-deployments/managing-deployments/creating-custom-deployment-protection-rules).
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposCreateDeploymentProtectionRule": (owner: string, repo: string, environmentName: string, options: { readonly params?: ReposCreateDeploymentProtectionRuleParams | undefined; readonly payload: ReposCreateDeploymentProtectionRuleRequest }) => Effect.Effect<DeploymentProtectionRule, HttpClientError.HttpClientError>
  /**
* Gets all custom deployment protection rule integrations that are available for an environment.
* 
* The authenticated user must have admin or owner permissions to the repository to use this endpoint.
* 
* For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
* 
* For more information about the app that is providing this custom deployment rule, see "[GET an app](https://docs.github.com/rest/apps/apps#get-an-app)".
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "reposListCustomDeploymentRuleIntegrations": (owner: string, repo: string, environmentName: string, options?: ReposListCustomDeploymentRuleIntegrationsParams | undefined) => Effect.Effect<ReposListCustomDeploymentRuleIntegrations200, HttpClientError.HttpClientError>
  /**
* Gets an enabled custom deployment protection rule for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
* 
* For more information about the app that is providing this custom deployment rule, see [`GET /apps/{app_slug}`](https://docs.github.com/rest/apps/apps#get-an-app).
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "reposGetCustomDeploymentProtectionRule": (owner: string, repo: string, environmentName: string, protectionRuleId: string, options?: ReposGetCustomDeploymentProtectionRuleParams | undefined) => Effect.Effect<DeploymentProtectionRule, HttpClientError.HttpClientError>
  /**
* Disables a custom deployment protection rule for an environment.
* 
* The authenticated user must have admin or owner permissions to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposDisableDeploymentProtectionRule": (owner: string, repo: string, environmentName: string, protectionRuleId: string, options?: ReposDisableDeploymentProtectionRuleParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists all secrets available in an environment without revealing their
* encrypted values.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsListEnvironmentSecrets": (owner: string, repo: string, environmentName: string, options?: ActionsListEnvironmentSecretsParams | undefined) => Effect.Effect<ActionsListEnvironmentSecrets200, HttpClientError.HttpClientError>
  /**
* Get the public key for an environment, which you need to encrypt environment
* secrets. You need to encrypt a secret before you can create or update secrets.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetEnvironmentPublicKey": (owner: string, repo: string, environmentName: string, options?: ActionsGetEnvironmentPublicKeyParams | undefined) => Effect.Effect<ActionsPublicKey, HttpClientError.HttpClientError>
  /**
* Gets a single environment secret without revealing its encrypted value.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetEnvironmentSecret": (owner: string, repo: string, environmentName: string, secretName: string, options?: ActionsGetEnvironmentSecretParams | undefined) => Effect.Effect<ActionsSecret, HttpClientError.HttpClientError>
  /**
* Creates or updates an environment secret with an encrypted value. Encrypt your secret using
* [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateOrUpdateEnvironmentSecret": (owner: string, repo: string, environmentName: string, secretName: string, options: { readonly params?: ActionsCreateOrUpdateEnvironmentSecretParams | undefined; readonly payload: ActionsCreateOrUpdateEnvironmentSecretRequest }) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError>
  /**
* Deletes a secret in an environment using the secret name.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteEnvironmentSecret": (owner: string, repo: string, environmentName: string, secretName: string, options?: ActionsDeleteEnvironmentSecretParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists all environment variables.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsListEnvironmentVariables": (owner: string, repo: string, environmentName: string, options?: ActionsListEnvironmentVariablesParams | undefined) => Effect.Effect<ActionsListEnvironmentVariables200, HttpClientError.HttpClientError>
  /**
* Create an environment variable that you can reference in a GitHub Actions workflow.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateEnvironmentVariable": (owner: string, repo: string, environmentName: string, options: { readonly params?: ActionsCreateEnvironmentVariableParams | undefined; readonly payload: ActionsCreateEnvironmentVariableRequest }) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError>
  /**
* Gets a specific variable in an environment.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetEnvironmentVariable": (owner: string, repo: string, environmentName: string, name: string, options?: ActionsGetEnvironmentVariableParams | undefined) => Effect.Effect<ActionsVariable, HttpClientError.HttpClientError>
  /**
* Deletes an environment variable using the variable name.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteEnvironmentVariable": (owner: string, repo: string, environmentName: string, name: string, options?: ActionsDeleteEnvironmentVariableParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Updates an environment variable that you can reference in a GitHub Actions workflow.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsUpdateEnvironmentVariable": (owner: string, repo: string, environmentName: string, name: string, options: { readonly params?: ActionsUpdateEnvironmentVariableParams | undefined; readonly payload: ActionsUpdateEnvironmentVariableRequest }) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* > [!NOTE]
* > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
*/
readonly "activityListRepoEvents": (owner: string, repo: string, options?: ActivityListRepoEventsParams | undefined) => Effect.Effect<ActivityListRepoEvents200, HttpClientError.HttpClientError>
  /**
* List forks
*/
readonly "reposListForks": (owner: string, repo: string, options?: ReposListForksParams | undefined) => Effect.Effect<ReposListForks200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Create a fork for the authenticated user.
* 
* > [!NOTE]
* > Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
* 
* > [!NOTE]
* > Although this endpoint works with GitHub Apps, the GitHub App must be installed on the destination account with access to all repositories and on the source account with access to the source repository.
*/
readonly "reposCreateFork": (owner: string, repo: string, options: { readonly params?: ReposCreateForkParams | undefined; readonly payload: ReposCreateForkRequest }) => Effect.Effect<FullRepository, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Create a blob
*/
readonly "gitCreateBlob": (owner: string, repo: string, options: { readonly params?: GitCreateBlobParams | undefined; readonly payload: GitCreateBlobRequest }) => Effect.Effect<ShortBlob, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"GitCreateBlob422", GitCreateBlob422>>
  /**
* The `content` in the response will always be Base64 encoded.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw blob data.
* - **`application/vnd.github+json`**: Returns a JSON representation of the blob with `content` as a base64 encoded string. This is the default if no media type is specified.
* 
* **Note** This endpoint supports blobs up to 100 megabytes in size.
*/
readonly "gitGetBlob": (owner: string, repo: string, fileSha: string, options?: GitGetBlobParams | undefined) => Effect.Effect<Blob, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Creates a new Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).
* 
* **Signature verification object**
* 
* The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
* 
* | Name | Type | Description |
* | ---- | ---- | ----------- |
* | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
* | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
* | `signature` | `string` | The signature that was extracted from the commit. |
* | `payload` | `string` | The value that was signed. |
* | `verified_at` | `string` | The date the signature was verified by GitHub. |
* 
* These are the possible values for `reason` in the `verification` object:
* 
* | Value | Description |
* | ----- | ----------- |
* | `expired_key` | The key that made the signature is expired. |
* | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
* | `gpgverify_error` | There was an error communicating with the signature verification service. |
* | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
* | `unsigned` | The object does not include a signature. |
* | `unknown_signature_type` | A non-PGP signature was found in the commit. |
* | `no_user` | No user was associated with the `committer` email address in the commit. |
* | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
* | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
* | `unknown_key` | The key that made the signature has not been registered with any user's account. |
* | `malformed_signature` | There was an error parsing the signature. |
* | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
* | `valid` | None of the above errors applied, so the signature is considered to be verified. |
*/
readonly "gitCreateCommit": (owner: string, repo: string, options: { readonly params?: GitCreateCommitParams | undefined; readonly payload: GitCreateCommitRequest }) => Effect.Effect<GitCommit, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Gets a Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).
* 
* To get the contents of a commit, see "[Get a commit](/rest/commits/commits#get-a-commit)."
* 
* **Signature verification object**
* 
* The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
* 
* | Name | Type | Description |
* | ---- | ---- | ----------- |
* | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
* | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
* | `signature` | `string` | The signature that was extracted from the commit. |
* | `payload` | `string` | The value that was signed. |
* | `verified_at` | `string` | The date the signature was verified by GitHub. |
* 
* These are the possible values for `reason` in the `verification` object:
* 
* | Value | Description |
* | ----- | ----------- |
* | `expired_key` | The key that made the signature is expired. |
* | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
* | `gpgverify_error` | There was an error communicating with the signature verification service. |
* | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
* | `unsigned` | The object does not include a signature. |
* | `unknown_signature_type` | A non-PGP signature was found in the commit. |
* | `no_user` | No user was associated with the `committer` email address in the commit. |
* | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
* | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
* | `unknown_key` | The key that made the signature has not been registered with any user's account. |
* | `malformed_signature` | There was an error parsing the signature. |
* | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
* | `valid` | None of the above errors applied, so the signature is considered to be verified. |
*/
readonly "gitGetCommit": (owner: string, repo: string, commitSha: string, options?: GitGetCommitParams | undefined) => Effect.Effect<GitCommit, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
* 
* When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
* 
* > [!NOTE]
* > You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
* 
* If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
*/
readonly "gitListMatchingRefs": (owner: string, repo: string, ref: string, options?: GitListMatchingRefsParams | undefined) => Effect.Effect<GitListMatchingRefs200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
* 
* > [!NOTE]
* > You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
*/
readonly "gitGetRef": (owner: string, repo: string, ref: string, options?: GitGetRefParams | undefined) => Effect.Effect<GitRef, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
*/
readonly "gitCreateRef": (owner: string, repo: string, options: { readonly params?: GitCreateRefParams | undefined; readonly payload: GitCreateRefRequest }) => Effect.Effect<GitRef, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Deletes the provided reference.
*/
readonly "gitDeleteRef": (owner: string, repo: string, ref: string, options?: GitDeleteRefParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Updates the provided reference to point to a new SHA. For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
*/
readonly "gitUpdateRef": (owner: string, repo: string, ref: string, options: { readonly params?: GitUpdateRefParams | undefined; readonly payload: GitUpdateRefRequest }) => Effect.Effect<GitRef, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/git/refs#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/git/refs#create-a-reference) the tag reference - this call would be unnecessary.
* 
* **Signature verification object**
* 
* The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
* 
* | Name | Type | Description |
* | ---- | ---- | ----------- |
* | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
* | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
* | `signature` | `string` | The signature that was extracted from the commit. |
* | `payload` | `string` | The value that was signed. |
* | `verified_at` | `string` | The date the signature was verified by GitHub. |
* 
* These are the possible values for `reason` in the `verification` object:
* 
* | Value | Description |
* | ----- | ----------- |
* | `expired_key` | The key that made the signature is expired. |
* | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
* | `gpgverify_error` | There was an error communicating with the signature verification service. |
* | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
* | `unsigned` | The object does not include a signature. |
* | `unknown_signature_type` | A non-PGP signature was found in the commit. |
* | `no_user` | No user was associated with the `committer` email address in the commit. |
* | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
* | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
* | `unknown_key` | The key that made the signature has not been registered with any user's account. |
* | `malformed_signature` | There was an error parsing the signature. |
* | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
* | `valid` | None of the above errors applied, so the signature is considered to be verified. |
*/
readonly "gitCreateTag": (owner: string, repo: string, options: { readonly params?: GitCreateTagParams | undefined; readonly payload: GitCreateTagRequest }) => Effect.Effect<GitTag, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* **Signature verification object**
* 
* The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
* 
* | Name | Type | Description |
* | ---- | ---- | ----------- |
* | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
* | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
* | `signature` | `string` | The signature that was extracted from the commit. |
* | `payload` | `string` | The value that was signed. |
* | `verified_at` | `string` | The date the signature was verified by GitHub. |
* 
* These are the possible values for `reason` in the `verification` object:
* 
* | Value | Description |
* | ----- | ----------- |
* | `expired_key` | The key that made the signature is expired. |
* | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
* | `gpgverify_error` | There was an error communicating with the signature verification service. |
* | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
* | `unsigned` | The object does not include a signature. |
* | `unknown_signature_type` | A non-PGP signature was found in the commit. |
* | `no_user` | No user was associated with the `committer` email address in the commit. |
* | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
* | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
* | `unknown_key` | The key that made the signature has not been registered with any user's account. |
* | `malformed_signature` | There was an error parsing the signature. |
* | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
* | `valid` | None of the above errors applied, so the signature is considered to be verified. |
*/
readonly "gitGetTag": (owner: string, repo: string, tagSha: string, options?: GitGetTagParams | undefined) => Effect.Effect<GitTag, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
* 
* If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/git/commits#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/git/refs#update-a-reference)."
* 
* Returns an error if you try to delete a file that does not exist.
*/
readonly "gitCreateTree": (owner: string, repo: string, options: { readonly params?: GitCreateTreeParams | undefined; readonly payload: GitCreateTreeRequest }) => Effect.Effect<GitTree, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Returns a single tree using the SHA1 value or ref name for that tree.
* 
* If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
* 
* > [!NOTE]
* > The limit for the `tree` array is 100,000 entries with a maximum size of 7 MB when using the `recursive` parameter.
*/
readonly "gitGetTree": (owner: string, repo: string, treeSha: string, options?: GitGetTreeParams | undefined) => Effect.Effect<GitTree, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days.
*/
readonly "reposListWebhooks": (owner: string, repo: string, options?: ReposListWebhooksParams | undefined) => Effect.Effect<ReposListWebhooks200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
* share the same `config` as long as those webhooks do not have any `events` that overlap.
*/
readonly "reposCreateWebhook": (owner: string, repo: string, options: { readonly params?: ReposCreateWebhookParams | undefined; readonly payload: ReposCreateWebhookRequest }) => Effect.Effect<Hook, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository)."
*/
readonly "reposGetWebhook": (owner: string, repo: string, hookId: string, options?: ReposGetWebhookParams | undefined) => Effect.Effect<Hook, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Delete a webhook for an organization.
* 
* The authenticated user must be a repository owner, or have admin access in the repository, to delete the webhook.
*/
readonly "reposDeleteWebhook": (owner: string, repo: string, hookId: string, options?: ReposDeleteWebhookParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository)."
*/
readonly "reposUpdateWebhook": (owner: string, repo: string, hookId: string, options: { readonly params?: ReposUpdateWebhookParams | undefined; readonly payload: ReposUpdateWebhookRequest }) => Effect.Effect<Hook, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/webhooks/repos#get-a-repository-webhook)."
* 
* OAuth app tokens and personal access tokens (classic) need the `read:repo_hook` or `repo` scope to use this endpoint.
*/
readonly "reposGetWebhookConfigForRepo": (owner: string, repo: string, hookId: string, options?: ReposGetWebhookConfigForRepoParams | undefined) => Effect.Effect<WebhookConfig, HttpClientError.HttpClientError>
  /**
* Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/webhooks/repos#update-a-repository-webhook)."
* 
* OAuth app tokens and personal access tokens (classic) need the `write:repo_hook` or `repo` scope to use this endpoint.
*/
readonly "reposUpdateWebhookConfigForRepo": (owner: string, repo: string, hookId: string, options: { readonly params?: ReposUpdateWebhookConfigForRepoParams | undefined; readonly payload: ReposUpdateWebhookConfigForRepoRequest }) => Effect.Effect<WebhookConfig, HttpClientError.HttpClientError>
  /**
* Returns a list of webhook deliveries for a webhook configured in a repository.
*/
readonly "reposListWebhookDeliveries": (owner: string, repo: string, hookId: string, options?: ReposListWebhookDeliveriesParams | undefined) => Effect.Effect<ReposListWebhookDeliveries200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Returns a delivery for a webhook configured in a repository.
*/
readonly "reposGetWebhookDelivery": (owner: string, repo: string, hookId: string, deliveryId: string, options?: ReposGetWebhookDeliveryParams | undefined) => Effect.Effect<HookDelivery, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Redeliver a webhook delivery for a webhook configured in a repository.
*/
readonly "reposRedeliverWebhookDelivery": (owner: string, repo: string, hookId: string, deliveryId: string, options?: ReposRedeliverWebhookDeliveryParams | undefined) => Effect.Effect<ReposRedeliverWebhookDelivery202, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
*/
readonly "reposPingWebhook": (owner: string, repo: string, hookId: string, options?: ReposPingWebhookParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
* 
* > [!NOTE]
* > Previously `/repos/:owner/:repo/hooks/:hook_id/test`
*/
readonly "reposTestPushWebhook": (owner: string, repo: string, hookId: string, options?: ReposTestPushWebhookParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* View the progress of an import.
* 
* > [!WARNING]
* > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
* 
* **Import status**
* 
* This section includes details about the possible values of the `status` field of the Import Progress response.
* 
* An import that does not have errors will progress through these steps:
* 
* *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
* *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
* *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
* *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
* *   `complete` - the import is complete, and the repository is ready on GitHub.
* 
* If there are problems, you will see one of these in the `status` field:
* 
* *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
* *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.
* *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
* *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL.
* *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
* 
* **The project_choices field**
* 
* When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
* 
* **Git LFS related fields**
* 
* This section includes details about Git LFS related fields that may be present in the Import Progress response.
* 
* *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
* *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
* *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
* *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
*/
readonly "migrationsGetImportStatus": (owner: string, repo: string, options?: MigrationsGetImportStatusParams | undefined) => Effect.Effect<Import, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Start a source import to a GitHub repository using GitHub Importer.
* Importing into a GitHub repository with GitHub Actions enabled is not supported and will
* return a status `422 Unprocessable Entity` response.
* 
* > [!WARNING]
* > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
*/
readonly "migrationsStartImport": (owner: string, repo: string, options: { readonly params?: MigrationsStartImportParams | undefined; readonly payload: MigrationsStartImportRequest }) => Effect.Effect<Import, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError> | ClientError<"BasicError", BasicError>>
  /**
* Stop an import for a repository.
* 
* > [!WARNING]
* > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
*/
readonly "migrationsCancelImport": (owner: string, repo: string, options?: MigrationsCancelImportParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
* request. If no parameters are provided, the import will be restarted.
* 
* Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will
* have the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array.
* You can select the project to import by providing one of the objects in the `project_choices` array in the update request.
* 
* > [!WARNING]
* > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
*/
readonly "migrationsUpdateImport": (owner: string, repo: string, options: { readonly params?: MigrationsUpdateImportParams | undefined; readonly payload: MigrationsUpdateImportRequest }) => Effect.Effect<Import, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
* 
* This endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.
* 
* > [!WARNING]
* > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
*/
readonly "migrationsGetCommitAuthors": (owner: string, repo: string, options?: MigrationsGetCommitAuthorsParams | undefined) => Effect.Effect<MigrationsGetCommitAuthors200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Update an author's identity for the import. Your application can continue updating authors any time before you push
* new commits to the repository.
* 
* > [!WARNING]
* > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
*/
readonly "migrationsMapCommitAuthor": (owner: string, repo: string, authorId: string, options: { readonly params?: MigrationsMapCommitAuthorParams | undefined; readonly payload: MigrationsMapCommitAuthorRequest }) => Effect.Effect<PorterAuthor, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError> | ClientError<"BasicError", BasicError>>
  /**
* List files larger than 100MB found during the import
* 
* > [!WARNING]
* > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
*/
readonly "migrationsGetLargeFiles": (owner: string, repo: string, options?: MigrationsGetLargeFilesParams | undefined) => Effect.Effect<MigrationsGetLargeFiles200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability
* is powered by [Git LFS](https://git-lfs.com).
* 
* You can learn more about our LFS feature and working with large files [on our help
* site](https://docs.github.com/repositories/working-with-files/managing-large-files).
* 
* > [!WARNING]
* > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
*/
readonly "migrationsSetLfsPreference": (owner: string, repo: string, options: { readonly params?: MigrationsSetLfsPreferenceParams | undefined; readonly payload: MigrationsSetLfsPreferenceRequest }) => Effect.Effect<Import, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError> | ClientError<"BasicError", BasicError>>
  /**
* Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsGetRepoInstallation": (owner: string, repo: string, options?: AppsGetRepoInstallationParams | undefined) => Effect.Effect<Installation | BasicError, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
*/
readonly "interactionsGetRestrictionsForRepo": (owner: string, repo: string, options?: InteractionsGetRestrictionsForRepoParams | undefined) => Effect.Effect<InteractionsGetRestrictionsForRepo200, HttpClientError.HttpClientError>
  /**
* Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
*/
readonly "interactionsSetRestrictionsForRepo": (owner: string, repo: string, options: { readonly params?: InteractionsSetRestrictionsForRepoParams | undefined; readonly payload: InteractionLimit }) => Effect.Effect<InteractionLimitResponse, HttpClientError.HttpClientError>
  /**
* Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
*/
readonly "interactionsRemoveRestrictionsForRepo": (owner: string, repo: string, options?: InteractionsRemoveRestrictionsForRepoParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
*/
readonly "reposListInvitations": (owner: string, repo: string, options?: ReposListInvitationsParams | undefined) => Effect.Effect<ReposListInvitations200, HttpClientError.HttpClientError>
  /**
* Delete a repository invitation
*/
readonly "reposDeleteInvitation": (owner: string, repo: string, invitationId: string, options?: ReposDeleteInvitationParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Update a repository invitation
*/
readonly "reposUpdateInvitation": (owner: string, repo: string, invitationId: string, options: { readonly params?: ReposUpdateInvitationParams | undefined; readonly payload: ReposUpdateInvitationRequest }) => Effect.Effect<RepositoryInvitation, HttpClientError.HttpClientError>
  /**
* List issues in a repository. Only open issues will be listed.
* 
* > [!NOTE]
* > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesListForRepo": (owner: string, repo: string, options?: IssuesListForRepoParams | undefined) => Effect.Effect<IssuesListForRepo200 | BasicError, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
* and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesCreate": (owner: string, repo: string, options: { readonly params?: IssuesCreateParams | undefined; readonly payload: IssuesCreateRequest }) => Effect.Effect<Issue, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError> | ClientError<"IssuesCreate503", IssuesCreate503>>
  /**
* You can use the REST API to list comments on issues and pull requests for a repository. Every pull request is an issue, but not every issue is a pull request.
* 
* By default, issue comments are ordered by ascending ID.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesListCommentsForRepo": (owner: string, repo: string, options?: IssuesListCommentsForRepoParams | undefined) => Effect.Effect<IssuesListCommentsForRepo200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* You can use the REST API to get comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesGetComment": (owner: string, repo: string, commentId: string, options?: IssuesGetCommentParams | undefined) => Effect.Effect<IssueComment, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* You can use the REST API to delete comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
*/
readonly "issuesDeleteComment": (owner: string, repo: string, commentId: string, options?: IssuesDeleteCommentParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* You can use the REST API to update comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesUpdateComment": (owner: string, repo: string, commentId: string, options: { readonly params?: IssuesUpdateCommentParams | undefined; readonly payload: IssuesUpdateCommentRequest }) => Effect.Effect<IssueComment, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* List the reactions to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).
*/
readonly "reactionsListForIssueComment": (owner: string, repo: string, commentId: string, options?: ReactionsListForIssueCommentParams | undefined) => Effect.Effect<ReactionsListForIssueComment200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Create a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
*/
readonly "reactionsCreateForIssueComment": (owner: string, repo: string, commentId: string, options: { readonly params?: ReactionsCreateForIssueCommentParams | undefined; readonly payload: ReactionsCreateForIssueCommentRequest }) => Effect.Effect<Reaction | Reaction, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* > [!NOTE]
* > You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
* 
* Delete a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).
*/
readonly "reactionsDeleteForIssueComment": (owner: string, repo: string, commentId: string, reactionId: string, options?: ReactionsDeleteForIssueCommentParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists events for a repository.
*/
readonly "issuesListEventsForRepo": (owner: string, repo: string, options?: IssuesListEventsForRepoParams | undefined) => Effect.Effect<IssuesListEventsForRepo200, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Gets a single event by the event id.
*/
readonly "issuesGetEvent": (owner: string, repo: string, eventId: string, options?: IssuesGetEventParams | undefined) => Effect.Effect<IssueEvent, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api#follow-redirects) if the issue was
* [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
* the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
* returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
* access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
* to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
* 
* > [!NOTE]
* > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesGet": (owner: string, repo: string, issueNumber: string, options?: IssuesGetParams | undefined) => Effect.Effect<Issue | BasicError, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Issue owners and users with push access or Triage role can edit an issue.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesUpdate": (owner: string, repo: string, issueNumber: string, options: { readonly params?: IssuesUpdateParams | undefined; readonly payload: IssuesUpdateRequest }) => Effect.Effect<Issue | BasicError, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError> | ClientError<"IssuesUpdate503", IssuesUpdate503>>
  /**
* Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
*/
readonly "issuesAddAssignees": (owner: string, repo: string, issueNumber: string, options: { readonly params?: IssuesAddAssigneesParams | undefined; readonly payload: IssuesAddAssigneesRequest }) => Effect.Effect<Issue, HttpClientError.HttpClientError>
  /**
* Removes one or more assignees from an issue.
*/
readonly "issuesRemoveAssignees": (owner: string, repo: string, issueNumber: string, options: { readonly params?: IssuesRemoveAssigneesParams | undefined; readonly payload: IssuesRemoveAssigneesRequest }) => Effect.Effect<Issue, HttpClientError.HttpClientError>
  /**
* Checks if a user has permission to be assigned to a specific issue.
* 
* If the `assignee` can be assigned to this issue, a `204` status code with no content is returned.
* 
* Otherwise a `404` status code is returned.
*/
readonly "issuesCheckUserCanBeAssignedToIssue": (owner: string, repo: string, issueNumber: string, assignee: string, options?: IssuesCheckUserCanBeAssignedToIssueParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* You can use the REST API to list comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
* 
* Issue comments are ordered by ascending ID.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesListComments": (owner: string, repo: string, issueNumber: string, options?: IssuesListCommentsParams | undefined) => Effect.Effect<IssuesListComments200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
* Creating content too quickly using this endpoint may result in secondary rate limiting.
* For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
* and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesCreateComment": (owner: string, repo: string, issueNumber: string, options: { readonly params?: IssuesCreateCommentParams | undefined; readonly payload: IssuesCreateCommentRequest }) => Effect.Effect<IssueComment, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* You can use the REST API to list the dependencies an issue is blocked by.
* 
* This endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).
* 
* - **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesListDependenciesBlockedBy": (owner: string, repo: string, issueNumber: string, options?: IssuesListDependenciesBlockedByParams | undefined) => Effect.Effect<IssuesListDependenciesBlockedBy200 | BasicError, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* You can use the REST API to add a 'blocked by' relationship to an issue.
* 
* Creating content too quickly using this endpoint may result in secondary rate limiting.
* For more information, see [Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)
* and [Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).
* 
* This endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).
* 
* - **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesAddBlockedByDependency": (owner: string, repo: string, issueNumber: string, options: { readonly params?: IssuesAddBlockedByDependencyParams | undefined; readonly payload: IssuesAddBlockedByDependencyRequest }) => Effect.Effect<Issue | BasicError, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* You can use the REST API to remove a dependency that an issue is blocked by.
* 
* Removing content too quickly using this endpoint may result in secondary rate limiting.
* For more information, see [Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)
* and [Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).
* 
* This endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).
* - **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass a specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesRemoveDependencyBlockedBy": (owner: string, repo: string, issueNumber: string, issueId: string, options?: IssuesRemoveDependencyBlockedByParams | undefined) => Effect.Effect<Issue | BasicError, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* You can use the REST API to list the dependencies an issue is blocking.
* 
* This endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).
* 
* - **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesListDependenciesBlocking": (owner: string, repo: string, issueNumber: string, options?: IssuesListDependenciesBlockingParams | undefined) => Effect.Effect<IssuesListDependenciesBlocking200 | BasicError, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists all events for an issue.
*/
readonly "issuesListEvents": (owner: string, repo: string, issueNumber: string, options?: IssuesListEventsParams | undefined) => Effect.Effect<IssuesListEvents200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Lists all labels for an issue.
*/
readonly "issuesListLabelsOnIssue": (owner: string, repo: string, issueNumber: string, options?: IssuesListLabelsOnIssueParams | undefined) => Effect.Effect<IssuesListLabelsOnIssue200 | BasicError, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Removes any previous labels and sets the new labels for an issue.
*/
readonly "issuesSetLabels": (owner: string, repo: string, issueNumber: string, options: { readonly params?: IssuesSetLabelsParams | undefined; readonly payload: IssuesSetLabelsRequest }) => Effect.Effect<IssuesSetLabels200 | BasicError, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Adds labels to an issue. If you provide an empty array of labels, all labels are removed from the issue.
*/
readonly "issuesAddLabels": (owner: string, repo: string, issueNumber: string, options: { readonly params?: IssuesAddLabelsParams | undefined; readonly payload: IssuesAddLabelsRequest }) => Effect.Effect<IssuesAddLabels200 | BasicError, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Removes all labels from an issue.
*/
readonly "issuesRemoveAllLabels": (owner: string, repo: string, issueNumber: string, options?: IssuesRemoveAllLabelsParams | undefined) => Effect.Effect<BasicError, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
*/
readonly "issuesRemoveLabel": (owner: string, repo: string, issueNumber: string, name: string, options?: IssuesRemoveLabelParams | undefined) => Effect.Effect<IssuesRemoveLabel200 | BasicError, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Users with push access can lock an issue or pull request's conversation.
* 
* Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
readonly "issuesLock": (owner: string, repo: string, issueNumber: string, options: { readonly params?: IssuesLockParams | undefined; readonly payload: IssuesLockRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Users with push access can unlock an issue's conversation.
*/
readonly "issuesUnlock": (owner: string, repo: string, issueNumber: string, options?: IssuesUnlockParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* List the reactions to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).
*/
readonly "reactionsListForIssue": (owner: string, repo: string, issueNumber: string, options?: ReactionsListForIssueParams | undefined) => Effect.Effect<ReactionsListForIssue200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Create a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue). A response with an HTTP `200` status means that you already added the reaction type to this issue.
*/
readonly "reactionsCreateForIssue": (owner: string, repo: string, issueNumber: string, options: { readonly params?: ReactionsCreateForIssueParams | undefined; readonly payload: ReactionsCreateForIssueRequest }) => Effect.Effect<Reaction | Reaction, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* > [!NOTE]
* > You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
* 
* Delete a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).
*/
readonly "reactionsDeleteForIssue": (owner: string, repo: string, issueNumber: string, reactionId: string, options?: ReactionsDeleteForIssueParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* You can use the REST API to remove a sub-issue from an issue.
* Removing content too quickly using this endpoint may result in secondary rate limiting.
* For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
* and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass a specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesRemoveSubIssue": (owner: string, repo: string, issueNumber: string, options: { readonly params?: IssuesRemoveSubIssueParams | undefined; readonly payload: IssuesRemoveSubIssueRequest }) => Effect.Effect<Issue, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* You can use the REST API to list the sub-issues on an issue.
* 
* This endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).
* 
* - **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesListSubIssues": (owner: string, repo: string, issueNumber: string, options?: IssuesListSubIssuesParams | undefined) => Effect.Effect<IssuesListSubIssues200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* You can use the REST API to add sub-issues to issues.
* 
* Creating content too quickly using this endpoint may result in secondary rate limiting.
* For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
* and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesAddSubIssue": (owner: string, repo: string, issueNumber: string, options: { readonly params?: IssuesAddSubIssueParams | undefined; readonly payload: IssuesAddSubIssueRequest }) => Effect.Effect<Issue, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* You can use the REST API to reprioritize a sub-issue to a different position in the parent list.
*/
readonly "issuesReprioritizeSubIssue": (owner: string, repo: string, issueNumber: string, options: { readonly params?: IssuesReprioritizeSubIssueParams | undefined; readonly payload: IssuesReprioritizeSubIssueRequest }) => Effect.Effect<Issue, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple> | ClientError<"IssuesReprioritizeSubIssue503", IssuesReprioritizeSubIssue503>>
  /**
* List all timeline events for an issue.
*/
readonly "issuesListEventsForTimeline": (owner: string, repo: string, issueNumber: string, options?: IssuesListEventsForTimelineParams | undefined) => Effect.Effect<IssuesListEventsForTimeline200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* List deploy keys
*/
readonly "reposListDeployKeys": (owner: string, repo: string, options?: ReposListDeployKeysParams | undefined) => Effect.Effect<ReposListDeployKeys200, HttpClientError.HttpClientError>
  /**
* You can create a read-only deploy key.
*/
readonly "reposCreateDeployKey": (owner: string, repo: string, options: { readonly params?: ReposCreateDeployKeyParams | undefined; readonly payload: ReposCreateDeployKeyRequest }) => Effect.Effect<DeployKey, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Get a deploy key
*/
readonly "reposGetDeployKey": (owner: string, repo: string, keyId: string, options?: ReposGetDeployKeyParams | undefined) => Effect.Effect<DeployKey, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
*/
readonly "reposDeleteDeployKey": (owner: string, repo: string, keyId: string, options?: ReposDeleteDeployKeyParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists all labels for a repository.
*/
readonly "issuesListLabelsForRepo": (owner: string, repo: string, options?: IssuesListLabelsForRepoParams | undefined) => Effect.Effect<IssuesListLabelsForRepo200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Creates a label for the specified repository with the given name and color. The name and color parameters are required. The color must be a valid [hexadecimal color code](http://www.color-hex.com/).
*/
readonly "issuesCreateLabel": (owner: string, repo: string, options: { readonly params?: IssuesCreateLabelParams | undefined; readonly payload: IssuesCreateLabelRequest }) => Effect.Effect<Label, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Gets a label using the given name.
*/
readonly "issuesGetLabel": (owner: string, repo: string, name: string, options?: IssuesGetLabelParams | undefined) => Effect.Effect<Label, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Deletes a label using the given label name.
*/
readonly "issuesDeleteLabel": (owner: string, repo: string, name: string, options?: IssuesDeleteLabelParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Updates a label using the given label name.
*/
readonly "issuesUpdateLabel": (owner: string, repo: string, name: string, options: { readonly params?: IssuesUpdateLabelParams | undefined; readonly payload: IssuesUpdateLabelRequest }) => Effect.Effect<Label, HttpClientError.HttpClientError>
  /**
* Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
*/
readonly "reposListLanguages": (owner: string, repo: string, options?: ReposListLanguagesParams | undefined) => Effect.Effect<Language, HttpClientError.HttpClientError>
  /**
* This method returns the contents of the repository's license file, if one is detected.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw contents of the license.
* - **`application/vnd.github.html+json`**: Returns the license contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
*/
readonly "licensesGetForRepo": (owner: string, repo: string, options?: LicensesGetForRepoParams | undefined) => Effect.Effect<LicenseContent, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Sync a branch of a forked repository to keep it up-to-date with the upstream repository.
*/
readonly "reposMergeUpstream": (owner: string, repo: string, options: { readonly params?: ReposMergeUpstreamParams | undefined; readonly payload: ReposMergeUpstreamRequest }) => Effect.Effect<MergedUpstream, HttpClientError.HttpClientError>
  /**
* Merge a branch
*/
readonly "reposMerge": (owner: string, repo: string, options: { readonly params?: ReposMergeParams | undefined; readonly payload: ReposMergeRequest }) => Effect.Effect<Commit, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists milestones for a repository.
*/
readonly "issuesListMilestones": (owner: string, repo: string, options?: IssuesListMilestonesParams | undefined) => Effect.Effect<IssuesListMilestones200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Creates a milestone.
*/
readonly "issuesCreateMilestone": (owner: string, repo: string, options: { readonly params?: IssuesCreateMilestoneParams | undefined; readonly payload: IssuesCreateMilestoneRequest }) => Effect.Effect<Milestone, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Gets a milestone using the given milestone number.
*/
readonly "issuesGetMilestone": (owner: string, repo: string, milestoneNumber: string, options?: IssuesGetMilestoneParams | undefined) => Effect.Effect<Milestone, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Deletes a milestone using the given milestone number.
*/
readonly "issuesDeleteMilestone": (owner: string, repo: string, milestoneNumber: string, options?: IssuesDeleteMilestoneParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Update a milestone
*/
readonly "issuesUpdateMilestone": (owner: string, repo: string, milestoneNumber: string, options: { readonly params?: IssuesUpdateMilestoneParams | undefined; readonly payload: IssuesUpdateMilestoneRequest }) => Effect.Effect<Milestone, HttpClientError.HttpClientError>
  /**
* Lists labels for issues in a milestone.
*/
readonly "issuesListLabelsForMilestone": (owner: string, repo: string, milestoneNumber: string, options?: IssuesListLabelsForMilestoneParams | undefined) => Effect.Effect<IssuesListLabelsForMilestone200, HttpClientError.HttpClientError>
  /**
* Lists all notifications for the current user in the specified repository.
*/
readonly "activityListRepoNotificationsForAuthenticatedUser": (owner: string, repo: string, options?: ActivityListRepoNotificationsForAuthenticatedUserParams | undefined) => Effect.Effect<ActivityListRepoNotificationsForAuthenticatedUser200, HttpClientError.HttpClientError>
  /**
* Marks all notifications in a repository as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
*/
readonly "activityMarkRepoNotificationsAsRead": (owner: string, repo: string, options: { readonly params?: ActivityMarkRepoNotificationsAsReadParams | undefined; readonly payload: ActivityMarkRepoNotificationsAsReadRequest }) => Effect.Effect<ActivityMarkRepoNotificationsAsRead202, HttpClientError.HttpClientError>
  /**
* Gets information about a GitHub Pages site.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposGetPages": (owner: string, repo: string, options?: ReposGetPagesParams | undefined) => Effect.Effect<Page, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
* 
* The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposUpdateInformationAboutPagesSite": (owner: string, repo: string, options: { readonly params?: ReposUpdateInformationAboutPagesSiteParams | undefined; readonly payload: ReposUpdateInformationAboutPagesSiteRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
* 
* The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposCreatePagesSite": (owner: string, repo: string, options: { readonly params?: ReposCreatePagesSiteParams | undefined; readonly payload: ReposCreatePagesSiteRequest }) => Effect.Effect<Page, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Deletes a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
* 
* The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposDeletePagesSite": (owner: string, repo: string, options?: ReposDeletePagesSiteParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists builts of a GitHub Pages site.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposListPagesBuilds": (owner: string, repo: string, options?: ReposListPagesBuildsParams | undefined) => Effect.Effect<ReposListPagesBuilds200, HttpClientError.HttpClientError>
  /**
* You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
* 
* Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
*/
readonly "reposRequestPagesBuild": (owner: string, repo: string, options?: ReposRequestPagesBuildParams | undefined) => Effect.Effect<PageBuildStatus, HttpClientError.HttpClientError>
  /**
* Gets information about the single most recent build of a GitHub Pages site.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposGetLatestPagesBuild": (owner: string, repo: string, options?: ReposGetLatestPagesBuildParams | undefined) => Effect.Effect<PageBuild, HttpClientError.HttpClientError>
  /**
* Gets information about a GitHub Pages build.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposGetPagesBuild": (owner: string, repo: string, buildId: string, options?: ReposGetPagesBuildParams | undefined) => Effect.Effect<PageBuild, HttpClientError.HttpClientError>
  /**
* Create a GitHub Pages deployment for a repository.
* 
* The authenticated user must have write permission to the repository.
*/
readonly "reposCreatePagesDeployment": (owner: string, repo: string, options: { readonly params?: ReposCreatePagesDeploymentParams | undefined; readonly payload: ReposCreatePagesDeploymentRequest }) => Effect.Effect<PageDeployment, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Gets the current status of a GitHub Pages deployment.
* 
* The authenticated user must have read permission for the GitHub Pages site.
*/
readonly "reposGetPagesDeployment": (owner: string, repo: string, pagesDeploymentId: string, options?: ReposGetPagesDeploymentParams | undefined) => Effect.Effect<PagesDeploymentStatus, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Cancels a GitHub Pages deployment.
* 
* The authenticated user must have write permissions for the GitHub Pages site.
*/
readonly "reposCancelPagesDeployment": (owner: string, repo: string, pagesDeploymentId: string, options?: ReposCancelPagesDeploymentParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.
* 
* The first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.
* 
* The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposGetPagesHealthCheck": (owner: string, repo: string, options?: ReposGetPagesHealthCheckParams | undefined) => Effect.Effect<PagesHealthCheck | EmptyObject, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Returns a boolean indicating whether or not private vulnerability reporting is enabled for the repository. For more information, see "[Evaluating the security settings of a repository](https://docs.github.com/code-security/security-advisories/working-with-repository-security-advisories/evaluating-the-security-settings-of-a-repository)".
*/
readonly "reposCheckPrivateVulnerabilityReporting": (owner: string, repo: string, options?: ReposCheckPrivateVulnerabilityReportingParams | undefined) => Effect.Effect<ReposCheckPrivateVulnerabilityReporting200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Enables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)."
*/
readonly "reposEnablePrivateVulnerabilityReporting": (owner: string, repo: string, options?: ReposEnablePrivateVulnerabilityReportingParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Disables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)".
*/
readonly "reposDisablePrivateVulnerabilityReporting": (owner: string, repo: string, options?: ReposDisablePrivateVulnerabilityReportingParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicListForRepo": (owner: string, repo: string, options?: ProjectsClassicListForRepoParams | undefined) => Effect.Effect<ProjectsClassicListForRepo200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicCreateForRepo": (owner: string, repo: string, options: { readonly params?: ProjectsClassicCreateForRepoParams | undefined; readonly payload: ProjectsClassicCreateForRepoRequest }) => Effect.Effect<Project, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Gets all custom property values that are set for a repository.
* Users with read access to the repository can use this endpoint.
*/
readonly "reposGetCustomPropertiesValues": (owner: string, repo: string, options?: ReposGetCustomPropertiesValuesParams | undefined) => Effect.Effect<ReposGetCustomPropertiesValues200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Create new or update existing custom property values for a repository.
* Using a value of `null` for a custom property will remove or 'unset' the property value from the repository.
* 
* Repository admins and other users with the repository-level "edit custom property values" fine-grained permission can use this endpoint.
*/
readonly "reposCreateOrUpdateCustomPropertiesValues": (owner: string, repo: string, options: { readonly params?: ReposCreateOrUpdateCustomPropertiesValuesParams | undefined; readonly payload: ReposCreateOrUpdateCustomPropertiesValuesRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists pull requests in a specified repository.
* 
* Draft pull requests are available in public repositories with GitHub
* Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing
* plans, and in public and private repositories with GitHub Team and GitHub Enterprise
* Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
* in the GitHub Help documentation.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsList": (owner: string, repo: string, options?: PullsListParams | undefined) => Effect.Effect<PullsList200, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsCreate": (owner: string, repo: string, options: { readonly params?: PullsCreateParams | undefined; readonly payload: PullsCreateRequest }) => Effect.Effect<PullRequest, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists review comments for all pull requests in a repository. By default,
* review comments are in ascending order by ID.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsListReviewCommentsForRepo": (owner: string, repo: string, options?: PullsListReviewCommentsForRepoParams | undefined) => Effect.Effect<PullsListReviewCommentsForRepo200, HttpClientError.HttpClientError>
  /**
* Provides details for a specified review comment.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsGetReviewComment": (owner: string, repo: string, commentId: string, options?: PullsGetReviewCommentParams | undefined) => Effect.Effect<PullRequestReviewComment, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Deletes a review comment.
*/
readonly "pullsDeleteReviewComment": (owner: string, repo: string, commentId: string, options?: PullsDeleteReviewCommentParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Edits the content of a specified review comment.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsUpdateReviewComment": (owner: string, repo: string, commentId: string, options: { readonly params?: PullsUpdateReviewCommentParams | undefined; readonly payload: PullsUpdateReviewCommentRequest }) => Effect.Effect<PullRequestReviewComment, HttpClientError.HttpClientError>
  /**
* List the reactions to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).
*/
readonly "reactionsListForPullRequestReviewComment": (owner: string, repo: string, commentId: string, options?: ReactionsListForPullRequestReviewCommentParams | undefined) => Effect.Effect<ReactionsListForPullRequestReviewComment200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Create a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
*/
readonly "reactionsCreateForPullRequestReviewComment": (owner: string, repo: string, commentId: string, options: { readonly params?: ReactionsCreateForPullRequestReviewCommentParams | undefined; readonly payload: ReactionsCreateForPullRequestReviewCommentRequest }) => Effect.Effect<Reaction | Reaction, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* > [!NOTE]
* > You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
* 
* Delete a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).
*/
readonly "reactionsDeleteForPullRequestComment": (owner: string, repo: string, commentId: string, reactionId: string, options?: ReactionsDeleteForPullRequestCommentParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Lists details of a pull request by providing its number.
* 
* When you get, [create](https://docs.github.com/rest/pulls/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/pulls/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
* 
* The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
* 
* The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
* 
* *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
* *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
* *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
* 
* Pass the appropriate [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types) to fetch diff and patch formats.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
* - **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.
*/
readonly "pullsGet": (owner: string, repo: string, pullNumber: string, options?: PullsGetParams | undefined) => Effect.Effect<PullRequest, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"PullsGet503", PullsGet503>>
  /**
* Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsUpdate": (owner: string, repo: string, pullNumber: string, options: { readonly params?: PullsUpdateParams | undefined; readonly payload: PullsUpdateRequest }) => Effect.Effect<PullRequest, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Creates a codespace owned by the authenticated user for the specified pull request.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesCreateWithPrForAuthenticatedUser": (owner: string, repo: string, pullNumber: string, options: { readonly params?: CodespacesCreateWithPrForAuthenticatedUserParams | undefined; readonly payload: CodespacesCreateWithPrForAuthenticatedUserRequest }) => Effect.Effect<Codespace | Codespace, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodespacesCreateWithPrForAuthenticatedUser503", CodespacesCreateWithPrForAuthenticatedUser503>>
  /**
* Lists all review comments for a specified pull request. By default, review comments
* are in ascending order by ID.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsListReviewComments": (owner: string, repo: string, pullNumber: string, options?: PullsListReviewCommentsParams | undefined) => Effect.Effect<PullsListReviewComments200, HttpClientError.HttpClientError>
  /**
* Creates a review comment on the diff of a specified pull request. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/issues/comments#create-an-issue-comment)."
* 
* If your comment applies to more than one line in the pull request diff, you should use the parameters `line`, `side`, and optionally `start_line` and `start_side` in your request.
* 
* The `position` parameter is closing down. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
* and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsCreateReviewComment": (owner: string, repo: string, pullNumber: string, options: { readonly params?: PullsCreateReviewCommentParams | undefined; readonly payload: PullsCreateReviewCommentRequest }) => Effect.Effect<PullRequestReviewComment, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
* and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsCreateReplyForReviewComment": (owner: string, repo: string, pullNumber: string, commentId: string, options: { readonly params?: PullsCreateReplyForReviewCommentParams | undefined; readonly payload: PullsCreateReplyForReviewCommentRequest }) => Effect.Effect<PullRequestReviewComment, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Lists a maximum of 250 commits for a pull request. To receive a complete
* commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/commits/commits#list-commits)
* endpoint.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsListCommits": (owner: string, repo: string, pullNumber: string, options?: PullsListCommitsParams | undefined) => Effect.Effect<PullsListCommits200, HttpClientError.HttpClientError>
  /**
* Lists the files in a specified pull request.
* 
* > [!NOTE]
* > Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsListFiles": (owner: string, repo: string, pullNumber: string, options?: PullsListFilesParams | undefined) => Effect.Effect<PullsListFiles200, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError> | ClientError<"BasicError", BasicError> | ClientError<"PullsListFiles503", PullsListFiles503>>
  /**
* Checks if a pull request has been merged into the base branch. The HTTP status of the response indicates whether or not the pull request has been merged; the response body is empty.
*/
readonly "pullsCheckIfMerged": (owner: string, repo: string, pullNumber: string, options?: PullsCheckIfMergedParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Merges a pull request into the base branch.
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
*/
readonly "pullsMerge": (owner: string, repo: string, pullNumber: string, options: { readonly params?: PullsMergeParams | undefined; readonly payload: PullsMergeRequest }) => Effect.Effect<PullRequestMergeResult, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"PullsMerge405", PullsMerge405> | ClientError<"PullsMerge409", PullsMerge409> | ClientError<"ValidationError", ValidationError>>
  /**
* Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
*/
readonly "pullsListRequestedReviewers": (owner: string, repo: string, pullNumber: string, options?: PullsListRequestedReviewersParams | undefined) => Effect.Effect<PullRequestReviewRequest, HttpClientError.HttpClientError>
  /**
* Requests reviews for a pull request from a given set of users and/or teams.
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
*/
readonly "pullsRequestReviewers": (owner: string, repo: string, pullNumber: string, options: { readonly params?: PullsRequestReviewersParams | undefined; readonly payload: PullsRequestReviewersRequest }) => Effect.Effect<PullRequestSimple, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Removes review requests from a pull request for a given set of users and/or teams.
*/
readonly "pullsRemoveRequestedReviewers": (owner: string, repo: string, pullNumber: string, options: { readonly params?: PullsRemoveRequestedReviewersParams | undefined; readonly payload: PullsRemoveRequestedReviewersRequest }) => Effect.Effect<PullRequestSimple, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Lists all reviews for a specified pull request. The list of reviews returns in chronological order.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsListReviews": (owner: string, repo: string, pullNumber: string, options?: PullsListReviewsParams | undefined) => Effect.Effect<PullsListReviews200, HttpClientError.HttpClientError>
  /**
* Creates a review on a specified pull request.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* Pull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see "[Submit a review for a pull request](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request)."
* 
* > [!NOTE]
* > To comment on a specific line in a file, you need to first determine the position of that line in the diff. To see a pull request diff, add the `application/vnd.github.v3.diff` media type to the `Accept` header of a call to the [Get a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) endpoint.
* 
* The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsCreateReview": (owner: string, repo: string, pullNumber: string, options: { readonly params?: PullsCreateReviewParams | undefined; readonly payload: PullsCreateReviewRequest }) => Effect.Effect<PullRequestReview, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Retrieves a pull request review by its ID.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsGetReview": (owner: string, repo: string, pullNumber: string, reviewId: string, options?: PullsGetReviewParams | undefined) => Effect.Effect<PullRequestReview, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Updates the contents of a specified review summary comment.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsUpdateReview": (owner: string, repo: string, pullNumber: string, reviewId: string, options: { readonly params?: PullsUpdateReviewParams | undefined; readonly payload: PullsUpdateReviewRequest }) => Effect.Effect<PullRequestReview, HttpClientError.HttpClientError | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Deletes a pull request review that has not been submitted. Submitted reviews cannot be deleted.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsDeletePendingReview": (owner: string, repo: string, pullNumber: string, reviewId: string, options?: PullsDeletePendingReviewParams | undefined) => Effect.Effect<PullRequestReview, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Lists comments for a specific pull request review.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsListCommentsForReview": (owner: string, repo: string, pullNumber: string, reviewId: string, options?: PullsListCommentsForReviewParams | undefined) => Effect.Effect<PullsListCommentsForReview200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Dismisses a specified review on a pull request.
* 
* > [!NOTE]
* > To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/branches/branch-protection), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsDismissReview": (owner: string, repo: string, pullNumber: string, reviewId: string, options: { readonly params?: PullsDismissReviewParams | undefined; readonly payload: PullsDismissReviewRequest }) => Effect.Effect<PullRequestReview, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see "[Create a review for a pull request](https://docs.github.com/rest/pulls/reviews#create-a-review-for-a-pull-request)."
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsSubmitReview": (owner: string, repo: string, pullNumber: string, reviewId: string, options: { readonly params?: PullsSubmitReviewParams | undefined; readonly payload: PullsSubmitReviewRequest }) => Effect.Effect<PullRequestReview, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
* Note: If making a request on behalf of a GitHub App you must also have permissions to write the contents of the head repository.
*/
readonly "pullsUpdateBranch": (owner: string, repo: string, pullNumber: string, options: { readonly params?: PullsUpdateBranchParams | undefined; readonly payload: PullsUpdateBranchRequest }) => Effect.Effect<PullsUpdateBranch202, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Gets the preferred README for a repository.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.
* - **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
*/
readonly "reposGetReadme": (owner: string, repo: string, options?: ReposGetReadmeParams | undefined) => Effect.Effect<ContentFile, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Gets the README from a repository directory.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.
* - **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
*/
readonly "reposGetReadmeInDirectory": (owner: string, repo: string, dir: string, options?: ReposGetReadmeInDirectoryParams | undefined) => Effect.Effect<ContentFile, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/repos/repos#list-repository-tags).
* 
* Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
*/
readonly "reposListReleases": (owner: string, repo: string, options?: ReposListReleasesParams | undefined) => Effect.Effect<ReposListReleases200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Users with push access to the repository can create a release.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
*/
readonly "reposCreateRelease": (owner: string, repo: string, options: { readonly params?: ReposCreateReleaseParams | undefined; readonly payload: ReposCreateReleaseRequest }) => Effect.Effect<Release, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* To download the asset's binary content:
* 
* - If within a browser, fetch the location specified in the `browser_download_url` key provided in the response.
* - Alternatively, set the `Accept` header of the request to 
*   [`application/octet-stream`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types). 
*   The API will either redirect the client to the location, or stream it directly if possible.
*   API clients should handle both a `200` or `302` response.
*/
readonly "reposGetReleaseAsset": (owner: string, repo: string, assetId: string, options?: ReposGetReleaseAssetParams | undefined) => Effect.Effect<ReleaseAsset, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Delete a release asset
*/
readonly "reposDeleteReleaseAsset": (owner: string, repo: string, assetId: string, options?: ReposDeleteReleaseAssetParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Users with push access to the repository can edit a release asset.
*/
readonly "reposUpdateReleaseAsset": (owner: string, repo: string, assetId: string, options: { readonly params?: ReposUpdateReleaseAssetParams | undefined; readonly payload: ReposUpdateReleaseAssetRequest }) => Effect.Effect<ReleaseAsset, HttpClientError.HttpClientError>
  /**
* Generate a name and body describing a [release](https://docs.github.com/rest/releases/releases#get-a-release). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.
*/
readonly "reposGenerateReleaseNotes": (owner: string, repo: string, options: { readonly params?: ReposGenerateReleaseNotesParams | undefined; readonly payload: ReposGenerateReleaseNotesRequest }) => Effect.Effect<ReleaseNotesContent, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* View the latest published full release for the repository.
* 
* The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
*/
readonly "reposGetLatestRelease": (owner: string, repo: string, options?: ReposGetLatestReleaseParams | undefined) => Effect.Effect<Release, HttpClientError.HttpClientError>
  /**
* Get a published release with the specified tag.
*/
readonly "reposGetReleaseByTag": (owner: string, repo: string, tag: string, options?: ReposGetReleaseByTagParams | undefined) => Effect.Effect<Release, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Gets a public release with the specified release ID.
* 
* > [!NOTE]
* > This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a hypermedia resource. For more information, see "[Getting started with the REST API](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
*/
readonly "reposGetRelease": (owner: string, repo: string, releaseId: string, options?: ReposGetReleaseParams | undefined) => Effect.Effect<Release, HttpClientError.HttpClientError>
  /**
* Users with push access to the repository can delete a release.
*/
readonly "reposDeleteRelease": (owner: string, repo: string, releaseId: string, options?: ReposDeleteReleaseParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Users with push access to the repository can edit a release.
*/
readonly "reposUpdateRelease": (owner: string, repo: string, releaseId: string, options: { readonly params?: ReposUpdateReleaseParams | undefined; readonly payload: ReposUpdateReleaseRequest }) => Effect.Effect<Release, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* List release assets
*/
readonly "reposListReleaseAssets": (owner: string, repo: string, releaseId: string, options?: ReposListReleaseAssetsParams | undefined) => Effect.Effect<ReposListReleaseAssets200, HttpClientError.HttpClientError>
  /**
* This endpoint makes use of a [Hypermedia relation](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
* the response of the [Create a release endpoint](https://docs.github.com/rest/releases/releases#create-a-release) to upload a release asset.
* 
* You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
* 
* Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example: 
* 
* `application/zip`
* 
* GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
* you'll still need to pass your authentication to be able to upload an asset.
* 
* When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
* 
* **Notes:**
* *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List release assets](https://docs.github.com/rest/releases/assets#list-release-assets)"
* endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
* *   To find the `release_id` query the [`GET /repos/{owner}/{repo}/releases/latest` endpoint](https://docs.github.com/rest/releases/releases#get-the-latest-release). 
* *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
*/
readonly "reposUploadReleaseAsset": (owner: string, repo: string, releaseId: string, options: ReposUploadReleaseAssetParams) => Effect.Effect<ReleaseAsset, HttpClientError.HttpClientError>
  /**
* List the reactions to a [release](https://docs.github.com/rest/releases/releases#get-a-release).
*/
readonly "reactionsListForRelease": (owner: string, repo: string, releaseId: string, options?: ReactionsListForReleaseParams | undefined) => Effect.Effect<ReactionsListForRelease200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Create a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release). A response with a `Status: 200 OK` means that you already added the reaction type to this release.
*/
readonly "reactionsCreateForRelease": (owner: string, repo: string, releaseId: string, options: { readonly params?: ReactionsCreateForReleaseParams | undefined; readonly payload: ReactionsCreateForReleaseRequest }) => Effect.Effect<Reaction | Reaction, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* > [!NOTE]
* > You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.
* 
* Delete a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release).
*/
readonly "reactionsDeleteForRelease": (owner: string, repo: string, releaseId: string, reactionId: string, options?: ReactionsDeleteForReleaseParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Returns all active rules that apply to the specified branch. The branch does not need to exist; rules that would apply
* to a branch with that name will be returned. All active rules that apply will be returned, regardless of the level
* at which they are configured (e.g. repository or organization). Rules in rulesets with "evaluate" or "disabled"
* enforcement statuses are not returned.
*/
readonly "reposGetBranchRules": (owner: string, repo: string, branch: string, options?: ReposGetBranchRulesParams | undefined) => Effect.Effect<ReposGetBranchRules200, HttpClientError.HttpClientError>
  /**
* Get all the rulesets for a repository.
*/
readonly "reposGetRepoRulesets": (owner: string, repo: string, options?: ReposGetRepoRulesetsParams | undefined) => Effect.Effect<ReposGetRepoRulesets200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Create a ruleset for a repository.
*/
readonly "reposCreateRepoRuleset": (owner: string, repo: string, options: { readonly params?: ReposCreateRepoRulesetParams | undefined; readonly payload: ReposCreateRepoRulesetRequest }) => Effect.Effect<RepositoryRuleset, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists suites of rule evaluations at the repository level.
* For more information, see "[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."
*/
readonly "reposGetRepoRuleSuites": (owner: string, repo: string, options?: ReposGetRepoRuleSuitesParams | undefined) => Effect.Effect<RuleSuites, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Gets information about a suite of rule evaluations from within a repository.
* For more information, see "[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."
*/
readonly "reposGetRepoRuleSuite": (owner: string, repo: string, ruleSuiteId: string, options?: ReposGetRepoRuleSuiteParams | undefined) => Effect.Effect<RuleSuite, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Get a ruleset for a repository.
* 
* **Note:** To prevent leaking sensitive information, the `bypass_actors` property is only returned if the user
* making the API request has write access to the ruleset.
*/
readonly "reposGetRepoRuleset": (owner: string, repo: string, rulesetId: string, options?: ReposGetRepoRulesetParams | undefined) => Effect.Effect<RepositoryRuleset, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Update a ruleset for a repository.
*/
readonly "reposUpdateRepoRuleset": (owner: string, repo: string, rulesetId: string, options: { readonly params?: ReposUpdateRepoRulesetParams | undefined; readonly payload: ReposUpdateRepoRulesetRequest }) => Effect.Effect<RepositoryRuleset, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Delete a ruleset for a repository.
*/
readonly "reposDeleteRepoRuleset": (owner: string, repo: string, rulesetId: string, options?: ReposDeleteRepoRulesetParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Get the history of a repository ruleset.
*/
readonly "reposGetRepoRulesetHistory": (owner: string, repo: string, rulesetId: string, options?: ReposGetRepoRulesetHistoryParams | undefined) => Effect.Effect<ReposGetRepoRulesetHistory200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Get a version of a repository ruleset.
*/
readonly "reposGetRepoRulesetVersion": (owner: string, repo: string, rulesetId: string, versionId: string, options?: ReposGetRepoRulesetVersionParams | undefined) => Effect.Effect<RulesetVersionWithState, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists secret scanning alerts for an eligible repository, from newest to oldest.
* 
* The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "secretScanningListAlertsForRepo": (owner: string, repo: string, options?: SecretScanningListAlertsForRepoParams | undefined) => Effect.Effect<SecretScanningListAlertsForRepo200, HttpClientError.HttpClientError | ClientError<"SecretScanningListAlertsForRepo503", SecretScanningListAlertsForRepo503>>
  /**
* Gets a single secret scanning alert detected in an eligible repository.
* 
* The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "secretScanningGetAlert": (owner: string, repo: string, alertNumber: string, options?: SecretScanningGetAlertParams | undefined) => Effect.Effect<SecretScanningAlert, HttpClientError.HttpClientError | ClientError<"SecretScanningGetAlert503", SecretScanningGetAlert503>>
  /**
* Updates the status of a secret scanning alert in an eligible repository.
* 
* The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "secretScanningUpdateAlert": (owner: string, repo: string, alertNumber: string, options: { readonly params?: SecretScanningUpdateAlertParams | undefined; readonly payload: SecretScanningUpdateAlertRequest }) => Effect.Effect<SecretScanningAlert, HttpClientError.HttpClientError | ClientError<"SecretScanningUpdateAlert503", SecretScanningUpdateAlert503>>
  /**
* Lists all locations for a given secret scanning alert for an eligible repository.
* 
* The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "secretScanningListLocationsForAlert": (owner: string, repo: string, alertNumber: string, options?: SecretScanningListLocationsForAlertParams | undefined) => Effect.Effect<SecretScanningListLocationsForAlert200, HttpClientError.HttpClientError | ClientError<"SecretScanningListLocationsForAlert503", SecretScanningListLocationsForAlert503>>
  /**
* Creates a bypass for a previously push protected secret.
* 
* The authenticated user must be the original author of the committed secret.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "secretScanningCreatePushProtectionBypass": (owner: string, repo: string, options: { readonly params?: SecretScanningCreatePushProtectionBypassParams | undefined; readonly payload: SecretScanningCreatePushProtectionBypassRequest }) => Effect.Effect<SecretScanningPushProtectionBypass, HttpClientError.HttpClientError | ClientError<"SecretScanningCreatePushProtectionBypass503", SecretScanningCreatePushProtectionBypass503>>
  /**
* Lists the latest default incremental and backfill scans by type for a repository. Scans from Copilot Secret Scanning are not included.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "secretScanningGetScanHistory": (owner: string, repo: string, options?: SecretScanningGetScanHistoryParams | undefined) => Effect.Effect<SecretScanningScanHistory, HttpClientError.HttpClientError | ClientError<"SecretScanningGetScanHistory503", SecretScanningGetScanHistory503>>
  /**
* Lists security advisories in a repository.
* 
* The authenticated user can access unpublished security advisories from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on any security advisory.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
*/
readonly "securityAdvisoriesListRepositoryAdvisories": (owner: string, repo: string, options?: SecurityAdvisoriesListRepositoryAdvisoriesParams | undefined) => Effect.Effect<SecurityAdvisoriesListRepositoryAdvisories200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Creates a new repository security advisory.
* 
* In order to create a draft repository security advisory, the authenticated user must be a security manager or administrator of that repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
*/
readonly "securityAdvisoriesCreateRepositoryAdvisory": (owner: string, repo: string, options: { readonly params?: SecurityAdvisoriesCreateRepositoryAdvisoryParams | undefined; readonly payload: RepositoryAdvisoryCreate }) => Effect.Effect<RepositoryAdvisory, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Report a security vulnerability to the maintainers of the repository.
* See "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)" for more information about private vulnerability reporting.
*/
readonly "securityAdvisoriesCreatePrivateVulnerabilityReport": (owner: string, repo: string, options: { readonly params?: SecurityAdvisoriesCreatePrivateVulnerabilityReportParams | undefined; readonly payload: PrivateVulnerabilityReportCreate }) => Effect.Effect<RepositoryAdvisory, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
* 
* Anyone can access any published security advisory on a public repository.
* 
* The authenticated user can access an unpublished security advisory from a repository if they are a security manager or administrator of that repository, or if they are a
* collaborator on the security advisory.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
*/
readonly "securityAdvisoriesGetRepositoryAdvisory": (owner: string, repo: string, ghsaId: string, options?: SecurityAdvisoriesGetRepositoryAdvisoryParams | undefined) => Effect.Effect<RepositoryAdvisory, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
* 
* In order to update any security advisory, the authenticated user must be a security manager or administrator of that repository,
* or a collaborator on the repository security advisory.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
*/
readonly "securityAdvisoriesUpdateRepositoryAdvisory": (owner: string, repo: string, ghsaId: string, options: { readonly params?: SecurityAdvisoriesUpdateRepositoryAdvisoryParams | undefined; readonly payload: RepositoryAdvisoryUpdate }) => Effect.Effect<RepositoryAdvisory, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* If you want a CVE identification number for the security vulnerability in your project, and don't already have one, you can request a CVE identification number from GitHub. For more information see "[Requesting a CVE identification number](https://docs.github.com/code-security/security-advisories/repository-security-advisories/publishing-a-repository-security-advisory#requesting-a-cve-identification-number-optional)."
* 
* You may request a CVE for public repositories, but cannot do so for private repositories.
* 
* In order to request a CVE for a repository security advisory, the authenticated user must be a security manager or administrator of that repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
*/
readonly "securityAdvisoriesCreateRepositoryAdvisoryCveRequest": (owner: string, repo: string, ghsaId: string, options?: SecurityAdvisoriesCreateRepositoryAdvisoryCveRequestParams | undefined) => Effect.Effect<SecurityAdvisoriesCreateRepositoryAdvisoryCveRequest202, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Create a temporary private fork to collaborate on fixing a security vulnerability in your repository.
* 
* > [!NOTE]
* > Forking a repository happens asynchronously. You may have to wait up to 5 minutes before you can access the fork.
*/
readonly "securityAdvisoriesCreateFork": (owner: string, repo: string, ghsaId: string, options?: SecurityAdvisoriesCreateForkParams | undefined) => Effect.Effect<FullRepository, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists the people that have starred the repository.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
*/
readonly "activityListStargazersForRepo": (owner: string, repo: string, options?: ActivityListStargazersForRepoParams | undefined) => Effect.Effect<ActivityListStargazersForRepo200, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
* 
* > [!NOTE]
* > This endpoint can only be used for repositories with fewer than 10,000 commits. If the repository contains 10,000 or more commits, a 422 status code will be returned.
*/
readonly "reposGetCodeFrequencyStats": (owner: string, repo: string, options?: ReposGetCodeFrequencyStatsParams | undefined) => Effect.Effect<ReposGetCodeFrequencyStats200 | ReposGetCodeFrequencyStats202, HttpClientError.HttpClientError>
  /**
* Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
*/
readonly "reposGetCommitActivityStats": (owner: string, repo: string, options?: ReposGetCommitActivityStatsParams | undefined) => Effect.Effect<ReposGetCommitActivityStats200 | ReposGetCommitActivityStats202, HttpClientError.HttpClientError>
  /**
* Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
* 
* *   `w` - Start of the week, given as a [Unix timestamp](https://en.wikipedia.org/wiki/Unix_time).
* *   `a` - Number of additions
* *   `d` - Number of deletions
* *   `c` - Number of commits
* 
* > [!NOTE]
* > This endpoint will return `0` values for all addition and deletion counts in repositories with 10,000 or more commits.
*/
readonly "reposGetContributorsStats": (owner: string, repo: string, options?: ReposGetContributorsStatsParams | undefined) => Effect.Effect<ReposGetContributorsStats200 | ReposGetContributorsStats202, HttpClientError.HttpClientError>
  /**
* Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
* 
* The array order is oldest week (index 0) to most recent week.
* 
* The most recent week is seven days ago at UTC midnight to today at UTC midnight.
*/
readonly "reposGetParticipationStats": (owner: string, repo: string, options?: ReposGetParticipationStatsParams | undefined) => Effect.Effect<ParticipationStats, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Each array contains the day number, hour number, and number of commits:
* 
* *   `0-6`: Sunday - Saturday
* *   `0-23`: Hour of day
* *   Number of commits
* 
* For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
*/
readonly "reposGetPunchCardStats": (owner: string, repo: string, options?: ReposGetPunchCardStatsParams | undefined) => Effect.Effect<ReposGetPunchCardStats200, HttpClientError.HttpClientError>
  /**
* Users with push access in a repository can create commit statuses for a given SHA.
* 
* Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
*/
readonly "reposCreateCommitStatus": (owner: string, repo: string, sha: string, options: { readonly params?: ReposCreateCommitStatusParams | undefined; readonly payload: ReposCreateCommitStatusRequest }) => Effect.Effect<Status, HttpClientError.HttpClientError>
  /**
* Lists the people watching the specified repository.
*/
readonly "activityListWatchersForRepo": (owner: string, repo: string, options?: ActivityListWatchersForRepoParams | undefined) => Effect.Effect<ActivityListWatchersForRepo200, HttpClientError.HttpClientError>
  /**
* Gets information about whether the authenticated user is subscribed to the repository.
*/
readonly "activityGetRepoSubscription": (owner: string, repo: string, options?: ActivityGetRepoSubscriptionParams | undefined) => Effect.Effect<RepositorySubscription, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/activity/watching#delete-a-repository-subscription) completely.
*/
readonly "activitySetRepoSubscription": (owner: string, repo: string, options: { readonly params?: ActivitySetRepoSubscriptionParams | undefined; readonly payload: ActivitySetRepoSubscriptionRequest }) => Effect.Effect<RepositorySubscription, HttpClientError.HttpClientError>
  /**
* This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/activity/watching#set-a-repository-subscription).
*/
readonly "activityDeleteRepoSubscription": (owner: string, repo: string, options?: ActivityDeleteRepoSubscriptionParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* List repository tags
*/
readonly "reposListTags": (owner: string, repo: string, options?: ReposListTagsParams | undefined) => Effect.Effect<ReposListTags200, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#get-all-repository-rulesets)" endpoint instead.
* 
* This returns the tag protection states of a repository.
* 
* This information is only available to repository administrators.
*/
readonly "reposListTagProtection": (owner: string, repo: string, options?: ReposListTagProtectionParams | undefined) => Effect.Effect<ReposListTagProtection200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#create-a-repository-ruleset)" endpoint instead.
* 
* This creates a tag protection state for a repository.
* This endpoint is only available to repository administrators.
*/
readonly "reposCreateTagProtection": (owner: string, repo: string, options: { readonly params?: ReposCreateTagProtectionParams | undefined; readonly payload: ReposCreateTagProtectionRequest }) => Effect.Effect<TagProtection, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#delete-a-repository-ruleset)" endpoint instead.
* 
* This deletes a tag protection state for a repository.
* This endpoint is only available to repository administrators.
*/
readonly "reposDeleteTagProtection": (owner: string, repo: string, tagProtectionId: string, options?: ReposDeleteTagProtectionParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
* `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
* the `Location` header to make a second `GET` request.
* 
* > [!NOTE]
* > For private repositories, these links are temporary and expire after five minutes.
*/
readonly "reposDownloadTarballArchive": (owner: string, repo: string, ref: string, options?: ReposDownloadTarballArchiveParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists the teams that have access to the specified repository and that are also visible to the authenticated user.
* 
* For a public repository, a team is listed only if that team added the public repository explicitly.
* 
* OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to use this endpoint with a public repository, and `repo` scope to use this endpoint with a private repository.
*/
readonly "reposListTeams": (owner: string, repo: string, options?: ReposListTeamsParams | undefined) => Effect.Effect<ReposListTeams200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Get all repository topics
*/
readonly "reposGetAllTopics": (owner: string, repo: string, options?: ReposGetAllTopicsParams | undefined) => Effect.Effect<Topic, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Replace all repository topics
*/
readonly "reposReplaceAllTopics": (owner: string, repo: string, options: { readonly params?: ReposReplaceAllTopicsParams | undefined; readonly payload: ReposReplaceAllTopicsRequest }) => Effect.Effect<Topic, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
*/
readonly "reposGetClones": (owner: string, repo: string, options?: ReposGetClonesParams | undefined) => Effect.Effect<CloneTraffic, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Get the top 10 popular contents over the last 14 days.
*/
readonly "reposGetTopPaths": (owner: string, repo: string, options?: ReposGetTopPathsParams | undefined) => Effect.Effect<ReposGetTopPaths200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Get the top 10 referrers over the last 14 days.
*/
readonly "reposGetTopReferrers": (owner: string, repo: string, options?: ReposGetTopReferrersParams | undefined) => Effect.Effect<ReposGetTopReferrers200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
*/
readonly "reposGetViews": (owner: string, repo: string, options?: ReposGetViewsParams | undefined) => Effect.Effect<ViewTraffic, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).
*/
readonly "reposTransfer": (owner: string, repo: string, options: { readonly params?: ReposTransferParams | undefined; readonly payload: ReposTransferRequest }) => Effect.Effect<MinimalRepository, HttpClientError.HttpClientError>
  /**
* Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
*/
readonly "reposCheckVulnerabilityAlerts": (owner: string, repo: string, options?: ReposCheckVulnerabilityAlertsParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
*/
readonly "reposEnableVulnerabilityAlerts": (owner: string, repo: string, options?: ReposEnableVulnerabilityAlertsParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Disables dependency alerts and the dependency graph for a repository.
* The authenticated user must have admin access to the repository. For more information,
* see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
*/
readonly "reposDisableVulnerabilityAlerts": (owner: string, repo: string, options?: ReposDisableVulnerabilityAlertsParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
* `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
* the `Location` header to make a second `GET` request.
* 
* > [!NOTE]
* > For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.
*/
readonly "reposDownloadZipballArchive": (owner: string, repo: string, ref: string, options?: ReposDownloadZipballArchiveParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/repos/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
* 
* OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
*/
readonly "reposCreateUsingTemplate": (templateOwner: string, templateRepo: string, options: ReposCreateUsingTemplateRequest) => Effect.Effect<FullRepository, HttpClientError.HttpClientError>
  /**
* Lists all public repositories in the order that they were created.
* 
* Note:
* - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
* - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of repositories.
*/
readonly "reposListPublic": (options?: ReposListPublicParams | undefined) => Effect.Effect<ReposListPublic200, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
* 
* When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
* 
* For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
* 
* `q=addClass+in:file+language:js+repo:jquery/jquery`
* 
* This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
* 
* Considerations for code search:
* 
* Due to the complexity of searching code, there are a few restrictions on how searches are performed:
* 
* *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
* *   Only files smaller than 384 KB are searchable.
* *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
* language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
* 
* This endpoint requires you to authenticate and limits you to 10 requests per minute.
*/
readonly "searchCode": (options: SearchCodeParams) => Effect.Effect<SearchCode200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError> | ClientError<"SearchCode503", SearchCode503>>
  /**
* Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
* 
* When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
* metadata](https://docs.github.com/rest/search/search#text-match-metadata).
* 
* For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
* 
* `q=repo:octocat/Spoon-Knife+css`
*/
readonly "searchCommits": (options: SearchCommitsParams) => Effect.Effect<SearchCommits200, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Notice:** Search for issues and pull requests will be overridden by advanced search on September 4, 2025.
* > You can read more about this change on [the GitHub blog](https://github.blog/changelog/2025-03-06-github-issues-projects-api-support-for-issues-advanced-search-and-more/).
*/
readonly "searchIssuesAndPullRequests": (options: SearchIssuesAndPullRequestsParams) => Effect.Effect<SearchIssuesAndPullRequests200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError> | ClientError<"SearchIssuesAndPullRequests503", SearchIssuesAndPullRequests503>>
  /**
* Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
* 
* When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
* 
* For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
* 
* `q=bug+defect+enhancement&repository_id=64778136`
* 
* The labels that best match the query appear first in the search results.
*/
readonly "searchLabels": (options: SearchLabelsParams) => Effect.Effect<SearchLabels200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
* 
* When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
* 
* For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
* 
* `q=tetris+language:assembly&sort=stars&order=desc`
* 
* This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
*/
readonly "searchRepos": (options: SearchReposParams) => Effect.Effect<SearchRepos200, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError> | ClientError<"SearchRepos503", SearchRepos503>>
  /**
* Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
* 
* When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
* 
* For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
* 
* `q=ruby+is:featured`
* 
* This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
*/
readonly "searchTopics": (options: SearchTopicsParams) => Effect.Effect<SearchTopics200, HttpClientError.HttpClientError>
  /**
* Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
* 
* When searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
* 
* For example, if you're looking for a list of popular users, you might try this query:
* 
* `q=tom+repos:%3E42+followers:%3E1000`
* 
* This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
* 
* This endpoint does not accept authentication and will only include publicly visible users. As an alternative, you can use the GraphQL API. The GraphQL API requires authentication and will return private users, including Enterprise Managed Users (EMUs), that you are authorized to view. For more information, see "[GraphQL Queries](https://docs.github.com/graphql/reference/queries#search)."
*/
readonly "searchUsers": (options: SearchUsersParams) => Effect.Effect<SearchUsers200, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError> | ClientError<"SearchUsers503", SearchUsers503>>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/teams/teams#get-a-team-by-name) endpoint.
*/
readonly "teamsGetLegacy": (teamId: string, options?: TeamsGetLegacyParams | undefined) => Effect.Effect<TeamFull, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/teams/teams#delete-a-team) endpoint.
* 
* To delete a team, the authenticated user must be an organization owner or team maintainer.
* 
* If you are an organization owner, deleting a parent team will delete all of its child teams as well.
*/
readonly "teamsDeleteLegacy": (teamId: string, options?: TeamsDeleteLegacyParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/teams/teams#update-a-team) endpoint.
* 
* To edit a team, the authenticated user must either be an organization owner or a team maintainer.
* 
* > [!NOTE]
* > With nested teams, the `privacy` for parent teams cannot be `secret`.
*/
readonly "teamsUpdateLegacy": (teamId: string, options: { readonly params?: TeamsUpdateLegacyParams | undefined; readonly payload: TeamsUpdateLegacyRequest }) => Effect.Effect<TeamFull | TeamFull, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/teams/discussions#list-discussions) endpoint.
* 
* List all discussions on a team's page.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "teamsListDiscussionsLegacy": (teamId: string, options?: TeamsListDiscussionsLegacyParams | undefined) => Effect.Effect<TeamsListDiscussionsLegacy200, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/teams/discussions#create-a-discussion) endpoint.
* 
* Creates a new discussion post on a team's page.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsCreateDiscussionLegacy": (teamId: string, options: { readonly params?: TeamsCreateDiscussionLegacyParams | undefined; readonly payload: TeamsCreateDiscussionLegacyRequest }) => Effect.Effect<TeamDiscussion, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion) endpoint.
* 
* Get a specific discussion on a team's page.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "teamsGetDiscussionLegacy": (teamId: string, discussionNumber: string, options?: TeamsGetDiscussionLegacyParams | undefined) => Effect.Effect<TeamDiscussion, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/teams/discussions#delete-a-discussion) endpoint.
* 
* Delete a discussion from a team's page.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsDeleteDiscussionLegacy": (teamId: string, discussionNumber: string, options?: TeamsDeleteDiscussionLegacyParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/teams/discussions#update-a-discussion) endpoint.
* 
* Edits the title and body text of a discussion post. Only the parameters you provide are updated.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsUpdateDiscussionLegacy": (teamId: string, discussionNumber: string, options: { readonly params?: TeamsUpdateDiscussionLegacyParams | undefined; readonly payload: TeamsUpdateDiscussionLegacyRequest }) => Effect.Effect<TeamDiscussion, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/teams/discussion-comments#list-discussion-comments) endpoint.
* 
* List all comments on a team discussion.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "teamsListDiscussionCommentsLegacy": (teamId: string, discussionNumber: string, options?: TeamsListDiscussionCommentsLegacyParams | undefined) => Effect.Effect<TeamsListDiscussionCommentsLegacy200, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/teams/discussion-comments#create-a-discussion-comment) endpoint.
* 
* Creates a new comment on a team discussion.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsCreateDiscussionCommentLegacy": (teamId: string, discussionNumber: string, options: { readonly params?: TeamsCreateDiscussionCommentLegacyParams | undefined; readonly payload: TeamsCreateDiscussionCommentLegacyRequest }) => Effect.Effect<TeamDiscussionComment, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment) endpoint.
* 
* Get a specific comment on a team discussion.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "teamsGetDiscussionCommentLegacy": (teamId: string, discussionNumber: string, commentNumber: string, options?: TeamsGetDiscussionCommentLegacyParams | undefined) => Effect.Effect<TeamDiscussionComment, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/teams/discussion-comments#delete-a-discussion-comment) endpoint.
* 
* Deletes a comment on a team discussion.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsDeleteDiscussionCommentLegacy": (teamId: string, discussionNumber: string, commentNumber: string, options?: TeamsDeleteDiscussionCommentLegacyParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/teams/discussion-comments#update-a-discussion-comment) endpoint.
* 
* Edits the body text of a discussion comment.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsUpdateDiscussionCommentLegacy": (teamId: string, discussionNumber: string, commentNumber: string, options: { readonly params?: TeamsUpdateDiscussionCommentLegacyParams | undefined; readonly payload: TeamsUpdateDiscussionCommentLegacyRequest }) => Effect.Effect<TeamDiscussionComment, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
* 
* List the reactions to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "reactionsListForTeamDiscussionCommentLegacy": (teamId: string, discussionNumber: string, commentNumber: string, options?: ReactionsListForTeamDiscussionCommentLegacyParams | undefined) => Effect.Effect<ReactionsListForTeamDiscussionCommentLegacy200, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
* 
* Create a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
* 
* A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "reactionsCreateForTeamDiscussionCommentLegacy": (teamId: string, discussionNumber: string, commentNumber: string, options: { readonly params?: ReactionsCreateForTeamDiscussionCommentLegacyParams | undefined; readonly payload: ReactionsCreateForTeamDiscussionCommentLegacyRequest }) => Effect.Effect<Reaction, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion) endpoint.
* 
* List the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "reactionsListForTeamDiscussionLegacy": (teamId: string, discussionNumber: string, options?: ReactionsListForTeamDiscussionLegacyParams | undefined) => Effect.Effect<ReactionsListForTeamDiscussionLegacy200, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion) endpoint.
* 
* Create a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
* 
* A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "reactionsCreateForTeamDiscussionLegacy": (teamId: string, discussionNumber: string, options: { readonly params?: ReactionsCreateForTeamDiscussionLegacyParams | undefined; readonly payload: ReactionsCreateForTeamDiscussionLegacyRequest }) => Effect.Effect<Reaction, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/teams/members#list-pending-team-invitations) endpoint.
* 
* The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
*/
readonly "teamsListPendingInvitationsLegacy": (teamId: string, options?: TeamsListPendingInvitationsLegacyParams | undefined) => Effect.Effect<TeamsListPendingInvitationsLegacy200, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/teams/members#list-team-members) endpoint.
* 
* Team members will include the members of child teams.
*/
readonly "teamsListMembersLegacy": (teamId: string, options?: TeamsListMembersLegacyParams | undefined) => Effect.Effect<TeamsListMembersLegacy200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* The "Get team member" endpoint (described below) is closing down.
* 
* We recommend using the [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
* 
* To list members in a team, the team must be visible to the authenticated user.
*/
readonly "teamsGetMemberLegacy": (teamId: string, username: string, options?: TeamsGetMemberLegacyParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* The "Add team member" endpoint (described below) is closing down.
* 
* We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
* 
* Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
* 
* > [!NOTE]
* > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
* 
* Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
readonly "teamsAddMemberLegacy": (teamId: string, username: string, options?: TeamsAddMemberLegacyParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* The "Remove team member" endpoint (described below) is closing down.
* 
* We recommend using the [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
* 
* Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
* 
* > [!NOTE]
* > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
*/
readonly "teamsRemoveMemberLegacy": (teamId: string, username: string, options?: TeamsRemoveMemberLegacyParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint.
* 
* Team members will include the members of child teams.
* 
* To get a user's membership with a team, the team must be visible to the authenticated user.
* 
* **Note:**
* The response contains the `state` of the membership and the member's `role`.
* 
* The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).
*/
readonly "teamsGetMembershipForUserLegacy": (teamId: string, username: string, options?: TeamsGetMembershipForUserLegacyParams | undefined) => Effect.Effect<TeamMembership, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint.
* 
* Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
* 
* > [!NOTE]
* > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
* 
* If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
* 
* If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
*/
readonly "teamsAddOrUpdateMembershipForUserLegacy": (teamId: string, username: string, options: { readonly params?: TeamsAddOrUpdateMembershipForUserLegacyParams | undefined; readonly payload: TeamsAddOrUpdateMembershipForUserLegacyRequest }) => Effect.Effect<TeamMembership, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint.
* 
* Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
* 
* > [!NOTE]
* > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
*/
readonly "teamsRemoveMembershipForUserLegacy": (teamId: string, username: string, options?: TeamsRemoveMembershipForUserLegacyParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "teamsListProjectsLegacy": (teamId: string, options?: TeamsListProjectsLegacyParams | undefined) => Effect.Effect<TeamsListProjectsLegacy200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "teamsCheckPermissionsForProjectLegacy": (teamId: string, projectId: string, options?: TeamsCheckPermissionsForProjectLegacyParams | undefined) => Effect.Effect<TeamProject, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "teamsAddOrUpdateProjectPermissionsLegacy": (teamId: string, projectId: string, options: { readonly params?: TeamsAddOrUpdateProjectPermissionsLegacyParams | undefined; readonly payload: TeamsAddOrUpdateProjectPermissionsLegacyRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"TeamsAddOrUpdateProjectPermissionsLegacy403", TeamsAddOrUpdateProjectPermissionsLegacy403> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "teamsRemoveProjectLegacy": (teamId: string, projectId: string, options?: TeamsRemoveProjectLegacyParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/teams/teams#list-team-repositories) endpoint.
*/
readonly "teamsListReposLegacy": (teamId: string, options?: TeamsListReposLegacyParams | undefined) => Effect.Effect<TeamsListReposLegacy200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-repository) endpoint.
* 
* > [!NOTE]
* > Repositories inherited through a parent team will also be checked.
* 
* You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types/) via the `Accept` header:
*/
readonly "teamsCheckPermissionsForRepoLegacy": (teamId: string, owner: string, repo: string, options?: TeamsCheckPermissionsForRepoLegacyParams | undefined) => Effect.Effect<TeamRepository, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-repository-permissions)" endpoint.
* 
* To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
* 
* Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
readonly "teamsAddOrUpdateRepoPermissionsLegacy": (teamId: string, owner: string, repo: string, options: { readonly params?: TeamsAddOrUpdateRepoPermissionsLegacyParams | undefined; readonly payload: TeamsAddOrUpdateRepoPermissionsLegacyRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/teams/teams#remove-a-repository-from-a-team) endpoint.
* 
* If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
*/
readonly "teamsRemoveRepoLegacy": (teamId: string, owner: string, repo: string, options?: TeamsRemoveRepoLegacyParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/teams/teams#list-child-teams) endpoint.
*/
readonly "teamsListChildLegacy": (teamId: string, options?: TeamsListChildLegacyParams | undefined) => Effect.Effect<TeamsListChildLegacy200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* OAuth app tokens and personal access tokens (classic) need the `user` scope in order for the response to include private profile information.
*/
readonly "usersGetAuthenticated": () => Effect.Effect<UsersGetAuthenticated200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
*/
readonly "usersUpdateAuthenticated": (options: UsersUpdateAuthenticatedRequest) => Effect.Effect<PrivateUser, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* List the users you've blocked on your personal account.
*/
readonly "usersListBlockedByAuthenticatedUser": (options?: UsersListBlockedByAuthenticatedUserParams | undefined) => Effect.Effect<UsersListBlockedByAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Returns a 204 if the given user is blocked by the authenticated user. Returns a 404 if the given user is not blocked by the authenticated user, or if the given user account has been identified as spam by GitHub.
*/
readonly "usersCheckBlocked": (username: string, options?: UsersCheckBlockedParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Blocks the given user and returns a 204. If the authenticated user cannot block the given user a 422 is returned.
*/
readonly "usersBlock": (username: string, options?: UsersBlockParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Unblocks the given user and returns a 204.
*/
readonly "usersUnblock": (username: string, options?: UsersUnblockParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists the authenticated user's codespaces.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesListForAuthenticatedUser": (options?: CodespacesListForAuthenticatedUserParams | undefined) => Effect.Effect<CodespacesListForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Creates a new codespace, owned by the authenticated user.
* 
* This endpoint requires either a `repository_id` OR a `pull_request` but not both.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesCreateForAuthenticatedUser": (options: CodespacesCreateForAuthenticatedUserRequest) => Effect.Effect<Codespace | Codespace, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"CodespacesCreateForAuthenticatedUser503", CodespacesCreateForAuthenticatedUser503>>
  /**
* Lists all development environment secrets available for a user's codespaces without revealing their
* encrypted values.
* 
* The authenticated user must have Codespaces access to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
*/
readonly "codespacesListSecretsForAuthenticatedUser": (options?: CodespacesListSecretsForAuthenticatedUserParams | undefined) => Effect.Effect<CodespacesListSecretsForAuthenticatedUser200, HttpClientError.HttpClientError>
  /**
* Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.
* 
* The authenticated user must have Codespaces access to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
*/
readonly "codespacesGetPublicKeyForAuthenticatedUser": () => Effect.Effect<CodespacesUserPublicKey, HttpClientError.HttpClientError>
  /**
* Gets a development environment secret available to a user's codespaces without revealing its encrypted value.
* 
* The authenticated user must have Codespaces access to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
*/
readonly "codespacesGetSecretForAuthenticatedUser": (secretName: string, options?: CodespacesGetSecretForAuthenticatedUserParams | undefined) => Effect.Effect<CodespacesSecret, HttpClientError.HttpClientError>
  /**
* Creates or updates a development environment secret for a user's codespace with an encrypted value. Encrypt your secret using
* [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* The authenticated user must have Codespaces access to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
*/
readonly "codespacesCreateOrUpdateSecretForAuthenticatedUser": (secretName: string, options: { readonly params?: CodespacesCreateOrUpdateSecretForAuthenticatedUserParams | undefined; readonly payload: CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest }) => Effect.Effect<EmptyObject, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Deletes a development environment secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.
* 
* The authenticated user must have Codespaces access to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
*/
readonly "codespacesDeleteSecretForAuthenticatedUser": (secretName: string, options?: CodespacesDeleteSecretForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* List the repositories that have been granted the ability to use a user's development environment secret.
* 
* The authenticated user must have Codespaces access to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
*/
readonly "codespacesListRepositoriesForSecretForAuthenticatedUser": (secretName: string, options?: CodespacesListRepositoriesForSecretForAuthenticatedUserParams | undefined) => Effect.Effect<CodespacesListRepositoriesForSecretForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Select the repositories that will use a user's development environment secret.
* 
* The authenticated user must have Codespaces access to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
*/
readonly "codespacesSetRepositoriesForSecretForAuthenticatedUser": (secretName: string, options: { readonly params?: CodespacesSetRepositoriesForSecretForAuthenticatedUserParams | undefined; readonly payload: CodespacesSetRepositoriesForSecretForAuthenticatedUserRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Adds a repository to the selected repositories for a user's development environment secret.
* 
* The authenticated user must have Codespaces access to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
*/
readonly "codespacesAddRepositoryForSecretForAuthenticatedUser": (secretName: string, repositoryId: string, options?: CodespacesAddRepositoryForSecretForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Removes a repository from the selected repositories for a user's development environment secret.
* 
* The authenticated user must have Codespaces access to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
*/
readonly "codespacesRemoveRepositoryForSecretForAuthenticatedUser": (secretName: string, repositoryId: string, options?: CodespacesRemoveRepositoryForSecretForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Gets information about a user's codespace.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesGetForAuthenticatedUser": (codespaceName: string, options?: CodespacesGetForAuthenticatedUserParams | undefined) => Effect.Effect<Codespace, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Deletes a user's codespace.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesDeleteForAuthenticatedUser": (codespaceName: string, options?: CodespacesDeleteForAuthenticatedUserParams | undefined) => Effect.Effect<CodespacesDeleteForAuthenticatedUser202, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.
* 
* If you specify a new machine type it will be applied the next time your codespace is started.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesUpdateForAuthenticatedUser": (codespaceName: string, options: { readonly params?: CodespacesUpdateForAuthenticatedUserParams | undefined; readonly payload: CodespacesUpdateForAuthenticatedUserRequest }) => Effect.Effect<Codespace, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.
* 
* If changes cannot be pushed to the codespace's repository, they will be pushed to a new or previously-existing fork instead.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesExportForAuthenticatedUser": (codespaceName: string, options?: CodespacesExportForAuthenticatedUserParams | undefined) => Effect.Effect<CodespaceExportDetails, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError> | ClientError<"BasicError", BasicError>>
  /**
* Gets information about an export of a codespace.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesGetExportDetailsForAuthenticatedUser": (codespaceName: string, exportId: string, options?: CodespacesGetExportDetailsForAuthenticatedUserParams | undefined) => Effect.Effect<CodespaceExportDetails, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* List the machine types a codespace can transition to use.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesCodespaceMachinesForAuthenticatedUser": (codespaceName: string, options?: CodespacesCodespaceMachinesForAuthenticatedUserParams | undefined) => Effect.Effect<CodespacesCodespaceMachinesForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.
* 
* The codespace's token is granted write permissions to the repository, allowing the user to push their changes.
* 
* This will fail for a codespace that is already published, meaning it has an associated repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesPublishForAuthenticatedUser": (codespaceName: string, options: { readonly params?: CodespacesPublishForAuthenticatedUserParams | undefined; readonly payload: CodespacesPublishForAuthenticatedUserRequest }) => Effect.Effect<CodespaceWithFullRepository, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Starts a user's codespace.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesStartForAuthenticatedUser": (codespaceName: string, options?: CodespacesStartForAuthenticatedUserParams | undefined) => Effect.Effect<Codespace, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Stops a user's codespace.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesStopForAuthenticatedUser": (codespaceName: string, options?: CodespacesStopForAuthenticatedUserParams | undefined) => Effect.Effect<Codespace, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists all packages that are owned by the authenticated user within the user's namespace, and that encountered a conflict during a Docker migration.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
*/
readonly "packagesListDockerMigrationConflictingPackagesForAuthenticatedUser": () => Effect.Effect<PackagesListDockerMigrationConflictingPackagesForAuthenticatedUser200, HttpClientError.HttpClientError>
  /**
* Sets the visibility for your primary email addresses.
*/
readonly "usersSetPrimaryEmailVisibilityForAuthenticatedUser": (options: UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequest) => Effect.Effect<UsersSetPrimaryEmailVisibilityForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists all of your email addresses, and specifies which one is visible
* to the public.
* 
* OAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint.
*/
readonly "usersListEmailsForAuthenticatedUser": (options?: UsersListEmailsForAuthenticatedUserParams | undefined) => Effect.Effect<UsersListEmailsForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
*/
readonly "usersAddEmailForAuthenticatedUser": (options: UsersAddEmailForAuthenticatedUserRequest) => Effect.Effect<UsersAddEmailForAuthenticatedUser201, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
*/
readonly "usersDeleteEmailForAuthenticatedUser": (options: UsersDeleteEmailForAuthenticatedUserRequest) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists the people following the authenticated user.
*/
readonly "usersListFollowersForAuthenticatedUser": (options?: UsersListFollowersForAuthenticatedUserParams | undefined) => Effect.Effect<UsersListFollowersForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists the people who the authenticated user follows.
*/
readonly "usersListFollowedByAuthenticatedUser": (options?: UsersListFollowedByAuthenticatedUserParams | undefined) => Effect.Effect<UsersListFollowedByAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Check if a person is followed by the authenticated user
*/
readonly "usersCheckPersonIsFollowedByAuthenticated": (username: string, options?: UsersCheckPersonIsFollowedByAuthenticatedParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
* 
* OAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint.
*/
readonly "usersFollow": (username: string, options?: UsersFollowParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* OAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint.
*/
readonly "usersUnfollow": (username: string, options?: UsersUnfollowParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists the current user's GPG keys.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint.
*/
readonly "usersListGpgKeysForAuthenticatedUser": (options?: UsersListGpgKeysForAuthenticatedUserParams | undefined) => Effect.Effect<UsersListGpgKeysForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Adds a GPG key to the authenticated user's GitHub account.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:gpg_key` scope to use this endpoint.
*/
readonly "usersCreateGpgKeyForAuthenticatedUser": (options: UsersCreateGpgKeyForAuthenticatedUserRequest) => Effect.Effect<GpgKey, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* View extended details for a single GPG key.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint.
*/
readonly "usersGetGpgKeyForAuthenticatedUser": (gpgKeyId: string, options?: UsersGetGpgKeyForAuthenticatedUserParams | undefined) => Effect.Effect<GpgKey, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Removes a GPG key from the authenticated user's GitHub account.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:gpg_key` scope to use this endpoint.
*/
readonly "usersDeleteGpgKeyForAuthenticatedUser": (gpgKeyId: string, options?: UsersDeleteGpgKeyForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
* 
* The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
* 
* You can find the permissions for the installation under the `permissions` key.
*/
readonly "appsListInstallationsForAuthenticatedUser": (options?: AppsListInstallationsForAuthenticatedUserParams | undefined) => Effect.Effect<AppsListInstallationsForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
* 
* The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
* 
* The access the user has to each repository is included in the hash under the `permissions` key.
*/
readonly "appsListInstallationReposForAuthenticatedUser": (installationId: string, options?: AppsListInstallationReposForAuthenticatedUserParams | undefined) => Effect.Effect<AppsListInstallationReposForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Add a single repository to an installation. The authenticated user must have admin access to the repository.    
* 
* This endpoint only works for PATs (classic) with the `repo` scope.
*/
readonly "appsAddRepoToInstallationForAuthenticatedUser": (installationId: string, repositoryId: string, options?: AppsAddRepoToInstallationForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Remove a single repository from an installation. The authenticated user must have admin access to the repository. The installation must have the `repository_selection` of `selected`. 
* 
* This endpoint only works for PATs (classic) with the `repo` scope.
*/
readonly "appsRemoveRepoFromInstallationForAuthenticatedUser": (installationId: string, repositoryId: string, options?: AppsRemoveRepoFromInstallationForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
*/
readonly "interactionsGetRestrictionsForAuthenticatedUser": () => Effect.Effect<InteractionsGetRestrictionsForAuthenticatedUser200, HttpClientError.HttpClientError>
  /**
* Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
*/
readonly "interactionsSetRestrictionsForAuthenticatedUser": (options: InteractionLimit) => Effect.Effect<InteractionLimitResponse, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Removes any interaction restrictions from your public repositories.
*/
readonly "interactionsRemoveRestrictionsForAuthenticatedUser": () => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* List issues across owned and member repositories assigned to the authenticated user.
* 
* > [!NOTE]
* > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesListForAuthenticatedUser": (options?: IssuesListForAuthenticatedUserParams | undefined) => Effect.Effect<IssuesListForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Lists the public SSH keys for the authenticated user's GitHub account.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint.
*/
readonly "usersListPublicSshKeysForAuthenticatedUser": (options?: UsersListPublicSshKeysForAuthenticatedUserParams | undefined) => Effect.Effect<UsersListPublicSshKeysForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Adds a public SSH key to the authenticated user's GitHub account.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:public_key` scope to use this endpoint.
*/
readonly "usersCreatePublicSshKeyForAuthenticatedUser": (options: UsersCreatePublicSshKeyForAuthenticatedUserRequest) => Effect.Effect<Key, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* View extended details for a single public SSH key.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint.
*/
readonly "usersGetPublicSshKeyForAuthenticatedUser": (keyId: string, options?: UsersGetPublicSshKeyForAuthenticatedUserParams | undefined) => Effect.Effect<Key, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Removes a public SSH key from the authenticated user's GitHub account.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:public_key` scope to use this endpoint.
*/
readonly "usersDeletePublicSshKeyForAuthenticatedUser": (keyId: string, options?: UsersDeletePublicSshKeyForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists the active subscriptions for the authenticated user.
*/
readonly "appsListSubscriptionsForAuthenticatedUser": (options?: AppsListSubscriptionsForAuthenticatedUserParams | undefined) => Effect.Effect<AppsListSubscriptionsForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists the active subscriptions for the authenticated user.
*/
readonly "appsListSubscriptionsForAuthenticatedUserStubbed": (options?: AppsListSubscriptionsForAuthenticatedUserStubbedParams | undefined) => Effect.Effect<AppsListSubscriptionsForAuthenticatedUserStubbed200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Lists all of the authenticated user's organization memberships.
*/
readonly "orgsListMembershipsForAuthenticatedUser": (options?: OrgsListMembershipsForAuthenticatedUserParams | undefined) => Effect.Effect<OrgsListMembershipsForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* If the authenticated user is an active or pending member of the organization, this endpoint will return the user's membership. If the authenticated user is not affiliated with the organization, a `404` is returned. This endpoint will return a `403` if the request is made by a GitHub App that is blocked by the organization.
*/
readonly "orgsGetMembershipForAuthenticatedUser": (org: string, options?: OrgsGetMembershipForAuthenticatedUserParams | undefined) => Effect.Effect<OrgMembership, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Converts the authenticated user to an active member of the organization, if that user has a pending invitation from the organization.
*/
readonly "orgsUpdateMembershipForAuthenticatedUser": (org: string, options: { readonly params?: OrgsUpdateMembershipForAuthenticatedUserParams | undefined; readonly payload: OrgsUpdateMembershipForAuthenticatedUserRequest }) => Effect.Effect<OrgMembership, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists all migrations a user has started.
*/
readonly "migrationsListForAuthenticatedUser": (options?: MigrationsListForAuthenticatedUserParams | undefined) => Effect.Effect<MigrationsListForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Initiates the generation of a user migration archive.
*/
readonly "migrationsStartForAuthenticatedUser": (options: MigrationsStartForAuthenticatedUserRequest) => Effect.Effect<Migration, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
* 
* *   `pending` - the migration hasn't started yet.
* *   `exporting` - the migration is in progress.
* *   `exported` - the migration finished successfully.
* *   `failed` - the migration failed.
* 
* Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).
*/
readonly "migrationsGetStatusForAuthenticatedUser": (migrationId: string, options?: MigrationsGetStatusForAuthenticatedUserParams | undefined) => Effect.Effect<Migration, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
* 
* *   attachments
* *   bases
* *   commit\_comments
* *   issue\_comments
* *   issue\_events
* *   issues
* *   milestones
* *   organizations
* *   projects
* *   protected\_branches
* *   pull\_request\_reviews
* *   pull\_requests
* *   releases
* *   repositories
* *   review\_comments
* *   schema
* *   users
* 
* The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
*/
readonly "migrationsGetArchiveForAuthenticatedUser": (migrationId: string, options?: MigrationsGetArchiveForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
*/
readonly "migrationsDeleteArchiveForAuthenticatedUser": (migrationId: string, options?: MigrationsDeleteArchiveForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
*/
readonly "migrationsUnlockRepoForAuthenticatedUser": (migrationId: string, repoName: string, options?: MigrationsUnlockRepoForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists all the repositories for this user migration.
*/
readonly "migrationsListReposForAuthenticatedUser": (migrationId: string, options?: MigrationsListReposForAuthenticatedUserParams | undefined) => Effect.Effect<MigrationsListReposForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* List organizations for the authenticated user.
* 
* For OAuth app tokens and personal access tokens (classic), this endpoint only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope for OAuth app tokens and personal access tokens (classic). Requests with insufficient scope will receive a `403 Forbidden` response.
* 
* > [!NOTE]
* > Requests using a fine-grained access token will receive a `200 Success` response with an empty list.
*/
readonly "orgsListForAuthenticatedUser": (options?: OrgsListForAuthenticatedUserParams | undefined) => Effect.Effect<OrgsListForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists packages owned by the authenticated user within the user's namespace.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesListPackagesForAuthenticatedUser": (options: PackagesListPackagesForAuthenticatedUserParams) => Effect.Effect<PackagesListPackagesForAuthenticatedUser200, HttpClientError.HttpClientError>
  /**
* Gets a specific package for a package owned by the authenticated user.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesGetPackageForAuthenticatedUser": (packageType: string, packageName: string, options?: PackagesGetPackageForAuthenticatedUserParams | undefined) => Effect.Effect<Package, HttpClientError.HttpClientError>
  /**
* Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesDeletePackageForAuthenticatedUser": (packageType: string, packageName: string, options?: PackagesDeletePackageForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Restores a package owned by the authenticated user.
* 
* You can restore a deleted package under the following conditions:
*   - The package was deleted within the last 30 days.
*   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesRestorePackageForAuthenticatedUser": (packageType: string, packageName: string, options?: PackagesRestorePackageForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists package versions for a package owned by the authenticated user.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser": (packageType: string, packageName: string, options?: PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParams | undefined) => Effect.Effect<PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Gets a specific package version for a package owned by the authenticated user.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesGetPackageVersionForAuthenticatedUser": (packageType: string, packageName: string, packageVersionId: string, options?: PackagesGetPackageVersionForAuthenticatedUserParams | undefined) => Effect.Effect<PackageVersion, HttpClientError.HttpClientError>
  /**
* Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
* 
* The authenticated user must have admin permissions in the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesDeletePackageVersionForAuthenticatedUser": (packageType: string, packageName: string, packageVersionId: string, options?: PackagesDeletePackageVersionForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Restores a package version owned by the authenticated user.
* 
* You can restore a deleted package version under the following conditions:
*   - The package was deleted within the last 30 days.
*   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesRestorePackageVersionForAuthenticatedUser": (packageType: string, packageName: string, packageVersionId: string, options?: PackagesRestorePackageVersionForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicCreateForAuthenticatedUser": (options: ProjectsClassicCreateForAuthenticatedUserRequest) => Effect.Effect<Project, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationErrorSimple", ValidationErrorSimple>>
  /**
* Lists your publicly visible email address, which you can set with the
* [Set primary email visibility for the authenticated user](https://docs.github.com/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user)
* endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint.
*/
readonly "usersListPublicEmailsForAuthenticatedUser": (options?: UsersListPublicEmailsForAuthenticatedUserParams | undefined) => Effect.Effect<UsersListPublicEmailsForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
* 
* The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
*/
readonly "reposListForAuthenticatedUser": (options?: ReposListForAuthenticatedUserParams | undefined) => Effect.Effect<ReposListForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Creates a new repository for the authenticated user.
* 
* OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
*/
readonly "reposCreateForAuthenticatedUser": (options: ReposCreateForAuthenticatedUserRequest) => Effect.Effect<FullRepository, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
*/
readonly "reposListInvitationsForAuthenticatedUser": (options?: ReposListInvitationsForAuthenticatedUserParams | undefined) => Effect.Effect<ReposListInvitationsForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Decline a repository invitation
*/
readonly "reposDeclineInvitationForAuthenticatedUser": (invitationId: string, options?: ReposDeclineInvitationForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Accept a repository invitation
*/
readonly "reposAcceptInvitationForAuthenticatedUser": (invitationId: string, options?: ReposAcceptInvitationForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists all of your social accounts.
*/
readonly "usersListSocialAccountsForAuthenticatedUser": (options?: UsersListSocialAccountsForAuthenticatedUserParams | undefined) => Effect.Effect<UsersListSocialAccountsForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Add one or more social accounts to the authenticated user's profile.
* 
* OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
*/
readonly "usersAddSocialAccountForAuthenticatedUser": (options: UsersAddSocialAccountForAuthenticatedUserRequest) => Effect.Effect<UsersAddSocialAccountForAuthenticatedUser201, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Deletes one or more social accounts from the authenticated user's profile.
* 
* OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
*/
readonly "usersDeleteSocialAccountForAuthenticatedUser": (options: UsersDeleteSocialAccountForAuthenticatedUserRequest) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Lists the SSH signing keys for the authenticated user's GitHub account.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint.
*/
readonly "usersListSshSigningKeysForAuthenticatedUser": (options?: UsersListSshSigningKeysForAuthenticatedUserParams | undefined) => Effect.Effect<UsersListSshSigningKeysForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Creates an SSH signing key for the authenticated user's GitHub account.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:ssh_signing_key` scope to use this endpoint.
*/
readonly "usersCreateSshSigningKeyForAuthenticatedUser": (options: UsersCreateSshSigningKeyForAuthenticatedUserRequest) => Effect.Effect<SshSigningKey, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Gets extended details for an SSH signing key.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint.
*/
readonly "usersGetSshSigningKeyForAuthenticatedUser": (sshSigningKeyId: string, options?: UsersGetSshSigningKeyForAuthenticatedUserParams | undefined) => Effect.Effect<SshSigningKey, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Deletes an SSH signing key from the authenticated user's GitHub account.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:ssh_signing_key` scope to use this endpoint.
*/
readonly "usersDeleteSshSigningKeyForAuthenticatedUser": (sshSigningKeyId: string, options?: UsersDeleteSshSigningKeyForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists repositories the authenticated user has starred.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
*/
readonly "activityListReposStarredByAuthenticatedUser": (options?: ActivityListReposStarredByAuthenticatedUserParams | undefined) => Effect.Effect<ActivityListReposStarredByAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Whether the authenticated user has starred the repository.
*/
readonly "activityCheckRepoIsStarredByAuthenticatedUser": (owner: string, repo: string, options?: ActivityCheckRepoIsStarredByAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
readonly "activityStarRepoForAuthenticatedUser": (owner: string, repo: string, options?: ActivityStarRepoForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Unstar a repository that the authenticated user has previously starred.
*/
readonly "activityUnstarRepoForAuthenticatedUser": (owner: string, repo: string, options?: ActivityUnstarRepoForAuthenticatedUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists repositories the authenticated user is watching.
*/
readonly "activityListWatchedReposForAuthenticatedUser": (options?: ActivityListWatchedReposForAuthenticatedUserParams | undefined) => Effect.Effect<ActivityListWatchedReposForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* List all of the teams across all of the organizations to which the authenticated
* user belongs.
* 
* OAuth app tokens and personal access tokens (classic) need the `user`, `repo`, or `read:org` scope to use this endpoint.
* 
* When using a fine-grained personal access token, the resource owner of the token must be a single organization, and the response will only include the teams from that organization.
*/
readonly "teamsListForAuthenticatedUser": (options?: TeamsListForAuthenticatedUserParams | undefined) => Effect.Effect<TeamsListForAuthenticatedUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Provides publicly available information about someone with a GitHub account. This method takes their durable user `ID` instead of their `login`, which can change over time.
* 
* If you are requesting information about an [Enterprise Managed User](https://docs.github.com/enterprise-cloud@latest/admin/managing-iam/understanding-iam-for-enterprises/about-enterprise-managed-users), or a GitHub App bot that is installed in an organization that uses Enterprise Managed Users, your requests must be authenticated as a user or GitHub App that has access to the organization to view that account's information. If you are not authorized, the request will return a `404 Not Found` status.
* 
* The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be public which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).
* 
* The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see [Emails API](https://docs.github.com/rest/users/emails).
*/
readonly "usersGetById": (accountId: string, options?: UsersGetByIdParams | undefined) => Effect.Effect<UsersGetById200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
* 
* Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of users.
*/
readonly "usersList": (options?: UsersListParams | undefined) => Effect.Effect<UsersList200, HttpClientError.HttpClientError>
  /**
* Provides publicly available information about someone with a GitHub account.
* 
* If you are requesting information about an [Enterprise Managed User](https://docs.github.com/enterprise-cloud@latest/admin/managing-iam/understanding-iam-for-enterprises/about-enterprise-managed-users), or a GitHub App bot that is installed in an organization that uses Enterprise Managed Users, your requests must be authenticated as a user or GitHub App that has access to the organization to view that account's information. If you are not authorized, the request will return a `404 Not Found` status.
* 
* The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be public which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).
* 
* The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see [Emails API](https://docs.github.com/rest/users/emails).
*/
readonly "usersGetByUsername": (username: string, options?: UsersGetByUsernameParams | undefined) => Effect.Effect<UsersGetByUsername200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* List a collection of artifact attestations associated with any entry in a list of subject digests owned by a user.
* 
* The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.
* 
* **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
*/
readonly "usersListAttestationsBulk": (username: string, options: { readonly params?: UsersListAttestationsBulkParams | undefined; readonly payload: UsersListAttestationsBulkRequest }) => Effect.Effect<UsersListAttestationsBulk200, HttpClientError.HttpClientError>
  /**
* Delete artifact attestations in bulk by either subject digests or unique ID.
*/
readonly "usersDeleteAttestationsBulk": (username: string, options: { readonly params?: UsersDeleteAttestationsBulkParams | undefined; readonly payload: UsersDeleteAttestationsBulkRequest }) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Delete an artifact attestation by subject digest.
*/
readonly "usersDeleteAttestationsBySubjectDigest": (username: string, subjectDigest: string, options?: UsersDeleteAttestationsBySubjectDigestParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Delete an artifact attestation by unique ID that is associated with a repository owned by a user.
*/
readonly "usersDeleteAttestationsById": (username: string, attestationId: string, options?: UsersDeleteAttestationsByIdParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* List a collection of artifact attestations with a given subject digest that are associated with repositories owned by a user.
* 
* The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.
* 
* **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
*/
readonly "usersListAttestations": (username: string, subjectDigest: string, options?: UsersListAttestationsParams | undefined) => Effect.Effect<UsersListAttestations200 | EmptyObject, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Lists all packages that are in a specific user's namespace, that the requesting user has access to, and that encountered a conflict during Docker migration.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
*/
readonly "packagesListDockerMigrationConflictingPackagesForUser": (username: string, options?: PackagesListDockerMigrationConflictingPackagesForUserParams | undefined) => Effect.Effect<PackagesListDockerMigrationConflictingPackagesForUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events. _Optional_: use the fine-grained token with following permission set to view private events: "Events" user permissions (read).
* 
* > [!NOTE]
* > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
*/
readonly "activityListEventsForAuthenticatedUser": (username: string, options?: ActivityListEventsForAuthenticatedUserParams | undefined) => Effect.Effect<ActivityListEventsForAuthenticatedUser200, HttpClientError.HttpClientError>
  /**
* This is the user's organization dashboard. You must be authenticated as the user to view this.
* 
* > [!NOTE]
* > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
*/
readonly "activityListOrgEventsForAuthenticatedUser": (username: string, org: string, options?: ActivityListOrgEventsForAuthenticatedUserParams | undefined) => Effect.Effect<ActivityListOrgEventsForAuthenticatedUser200, HttpClientError.HttpClientError>
  /**
* > [!NOTE]
* > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
*/
readonly "activityListPublicEventsForUser": (username: string, options?: ActivityListPublicEventsForUserParams | undefined) => Effect.Effect<ActivityListPublicEventsForUser200, HttpClientError.HttpClientError>
  /**
* Lists the people following the specified user.
*/
readonly "usersListFollowersForUser": (username: string, options?: UsersListFollowersForUserParams | undefined) => Effect.Effect<UsersListFollowersForUser200, HttpClientError.HttpClientError>
  /**
* Lists the people who the specified user follows.
*/
readonly "usersListFollowingForUser": (username: string, options?: UsersListFollowingForUserParams | undefined) => Effect.Effect<UsersListFollowingForUser200, HttpClientError.HttpClientError>
  /**
* Check if a user follows another user
*/
readonly "usersCheckFollowingForUser": (username: string, targetUser: string, options?: UsersCheckFollowingForUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError>
  /**
* Lists public gists for the specified user:
*/
readonly "gistsListForUser": (username: string, options?: GistsListForUserParams | undefined) => Effect.Effect<GistsListForUser200, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* Lists the GPG keys for a user. This information is accessible by anyone.
*/
readonly "usersListGpgKeysForUser": (username: string, options?: UsersListGpgKeysForUserParams | undefined) => Effect.Effect<UsersListGpgKeysForUser200, HttpClientError.HttpClientError>
  /**
* Provides hovercard information. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
* 
*   The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository, you would use a `subject_type` value of `repository` and a `subject_id` value of `1300192` (the ID of the `Spoon-Knife` repository).
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "usersGetContextForUser": (username: string, options?: UsersGetContextForUserParams | undefined) => Effect.Effect<Hovercard, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"ValidationError", ValidationError>>
  /**
* Enables an authenticated GitHub App to find the user’s installation information.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsGetUserInstallation": (username: string, options?: AppsGetUserInstallationParams | undefined) => Effect.Effect<Installation, HttpClientError.HttpClientError>
  /**
* Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
*/
readonly "usersListPublicKeysForUser": (username: string, options?: UsersListPublicKeysForUserParams | undefined) => Effect.Effect<UsersListPublicKeysForUser200, HttpClientError.HttpClientError>
  /**
* List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
* 
* This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user) API instead.
*/
readonly "orgsListForUser": (username: string, options?: OrgsListForUserParams | undefined) => Effect.Effect<OrgsListForUser200, HttpClientError.HttpClientError>
  /**
* Lists all packages in a user's namespace for which the requesting user has access.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesListPackagesForUser": (username: string, options: PackagesListPackagesForUserParams) => Effect.Effect<PackagesListPackagesForUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Gets a specific package metadata for a public package owned by a user.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesGetPackageForUser": (username: string, packageType: string, packageName: string, options?: PackagesGetPackageForUserParams | undefined) => Effect.Effect<Package, HttpClientError.HttpClientError>
  /**
* Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
* 
* If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesDeletePackageForUser": (username: string, packageType: string, packageName: string, options?: PackagesDeletePackageForUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Restores an entire package for a user.
* 
* You can restore a deleted package under the following conditions:
*   - The package was deleted within the last 30 days.
*   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
* 
* If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesRestorePackageForUser": (username: string, packageType: string, packageName: string, options?: PackagesRestorePackageForUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Lists package versions for a public package owned by a specified user.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesGetAllPackageVersionsForPackageOwnedByUser": (username: string, packageType: string, packageName: string, options?: PackagesGetAllPackageVersionsForPackageOwnedByUserParams | undefined) => Effect.Effect<PackagesGetAllPackageVersionsForPackageOwnedByUser200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Gets a specific package version for a public package owned by a specified user.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesGetPackageVersionForUser": (username: string, packageType: string, packageName: string, packageVersionId: string, options?: PackagesGetPackageVersionForUserParams | undefined) => Effect.Effect<PackageVersion, HttpClientError.HttpClientError>
  /**
* Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
* 
* If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesDeletePackageVersionForUser": (username: string, packageType: string, packageName: string, packageVersionId: string, options?: PackagesDeletePackageVersionForUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* Restores a specific package version for a user.
* 
* You can restore a deleted package under the following conditions:
*   - The package was deleted within the last 30 days.
*   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
* 
* If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesRestorePackageVersionForUser": (username: string, packageType: string, packageName: string, packageVersionId: string, options?: PackagesRestorePackageVersionForUserParams | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicListForUser": (username: string, options?: ProjectsClassicListForUserParams | undefined) => Effect.Effect<ProjectsClassicListForUser200, HttpClientError.HttpClientError | ClientError<"ValidationError", ValidationError>>
  /**
* These are events that you've received by watching repositories and following users. If you are authenticated as the
* given user, you will see private events. Otherwise, you'll only see public events.
* 
* > [!NOTE]
* > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
*/
readonly "activityListReceivedEventsForUser": (username: string, options?: ActivityListReceivedEventsForUserParams | undefined) => Effect.Effect<ActivityListReceivedEventsForUser200, HttpClientError.HttpClientError>
  /**
* > [!NOTE]
* > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
*/
readonly "activityListReceivedPublicEventsForUser": (username: string, options?: ActivityListReceivedPublicEventsForUserParams | undefined) => Effect.Effect<ActivityListReceivedPublicEventsForUser200, HttpClientError.HttpClientError>
  /**
* Lists public repositories for the specified user.
*/
readonly "reposListForUser": (username: string, options?: ReposListForUserParams | undefined) => Effect.Effect<ReposListForUser200, HttpClientError.HttpClientError>
  /**
* Gets the summary of the free and paid GitHub Actions minutes used.
* 
* Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
* 
* OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
*/
readonly "billingGetGithubActionsBillingUser": (username: string, options?: BillingGetGithubActionsBillingUserParams | undefined) => Effect.Effect<ActionsBillingUsage, HttpClientError.HttpClientError>
  /**
* Gets the free and paid storage used for GitHub Packages in gigabytes.
* 
* Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
*/
readonly "billingGetGithubPackagesBillingUser": (username: string, options?: BillingGetGithubPackagesBillingUserParams | undefined) => Effect.Effect<PackagesBillingUsage, HttpClientError.HttpClientError>
  /**
* Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
* 
* Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
*/
readonly "billingGetSharedStorageBillingUser": (username: string, options?: BillingGetSharedStorageBillingUserParams | undefined) => Effect.Effect<CombinedBillingUsage, HttpClientError.HttpClientError>
  /**
* Gets a report of the total usage for a user.
* 
* **Note:** This endpoint is only available to users with access to the enhanced billing platform.
*/
readonly "billingGetGithubBillingUsageReportUser": (username: string, options?: BillingGetGithubBillingUsageReportUserParams | undefined) => Effect.Effect<BillingUsageReportUser, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BasicError", BasicError> | ClientError<"BillingGetGithubBillingUsageReportUser503", BillingGetGithubBillingUsageReportUser503>>
  /**
* Lists social media accounts for a user. This endpoint is accessible by anyone.
*/
readonly "usersListSocialAccountsForUser": (username: string, options?: UsersListSocialAccountsForUserParams | undefined) => Effect.Effect<UsersListSocialAccountsForUser200, HttpClientError.HttpClientError>
  /**
* Lists the SSH signing keys for a user. This operation is accessible by anyone.
*/
readonly "usersListSshSigningKeysForUser": (username: string, options?: UsersListSshSigningKeysForUserParams | undefined) => Effect.Effect<UsersListSshSigningKeysForUser200, HttpClientError.HttpClientError>
  /**
* Lists repositories a user has starred.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
*/
readonly "activityListReposStarredByUser": (username: string, options?: ActivityListReposStarredByUserParams | undefined) => Effect.Effect<ActivityListReposStarredByUser200, HttpClientError.HttpClientError>
  /**
* Lists repositories a user is watching.
*/
readonly "activityListReposWatchedByUser": (username: string, options?: ActivityListReposWatchedByUserParams | undefined) => Effect.Effect<ActivityListReposWatchedByUser200, HttpClientError.HttpClientError>
  /**
* Get all supported GitHub API versions.
*/
readonly "metaGetAllVersions": () => Effect.Effect<MetaGetAllVersions200, HttpClientError.HttpClientError | ClientError<"BasicError", BasicError>>
  /**
* Get a random sentence from the Zen of GitHub
*/
readonly "metaGetZen": () => Effect.Effect<void, HttpClientError.HttpClientError>
}

export interface ClientError<Tag extends string, E> {
  readonly _tag: Tag
  readonly request: HttpClientRequest.HttpClientRequest
  readonly response: HttpClientResponse.HttpClientResponse
  readonly cause: E
}

class ClientErrorImpl extends Data.Error<{
  _tag: string
  cause: any
  request: HttpClientRequest.HttpClientRequest
  response: HttpClientResponse.HttpClientResponse
}> {}

export const ClientError = <Tag extends string, E>(
  tag: Tag,
  cause: E,
  response: HttpClientResponse.HttpClientResponse,
): ClientError<Tag, E> =>
  new ClientErrorImpl({
    _tag: tag,
    cause,
    response,
    request: response.request,
  }) as any
