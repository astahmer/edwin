export namespace Schemas {
  // <Schemas>
  export type root = {
    current_user_url: string;
    current_user_authorizations_html_url: string;
    authorizations_url: string;
    code_search_url: string;
    commit_search_url: string;
    emails_url: string;
    emojis_url: string;
    events_url: string;
    feeds_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    hub_url?: string | undefined;
    issue_search_url: string;
    issues_url: string;
    keys_url: string;
    label_search_url: string;
    notifications_url: string;
    organization_url: string;
    organization_repositories_url: string;
    organization_teams_url: string;
    public_gists_url: string;
    rate_limit_url: string;
    repository_url: string;
    repository_search_url: string;
    current_user_repositories_url: string;
    starred_url: string;
    starred_gists_url: string;
    topic_search_url?: string | undefined;
    user_url: string;
    user_organizations_url: string;
    user_repositories_url: string;
    user_search_url: string;
  };
  export type security_advisory_ecosystems =
    | "rubygems"
    | "npm"
    | "pip"
    | "maven"
    | "nuget"
    | "composer"
    | "go"
    | "rust"
    | "erlang"
    | "actions"
    | "pub"
    | "other"
    | "swift";
  export type vulnerability = {
    package: { ecosystem: security_advisory_ecosystems; name: string | null } | null;
    vulnerable_version_range: string | null;
    first_patched_version: string | null;
    vulnerable_functions: Array<string> | null;
  };
  export type cvss_severities = Partial<{
    cvss_v3: { vector_string: string | null; score: number | null } | null;
    cvss_v4: { vector_string: string | null; score: number | null } | null;
  }> | null;
  export type security_advisory_epss = Partial<{ percentage: number; percentile: number }> | null;
  export type simple_user = {
    name?: (string | null) | undefined;
    email?: (string | null) | undefined;
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string | null;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    starred_at?: string | undefined;
    user_view_type?: string | undefined;
  };
  export type security_advisory_credit_types =
    | "analyst"
    | "finder"
    | "reporter"
    | "coordinator"
    | "remediation_developer"
    | "remediation_reviewer"
    | "remediation_verifier"
    | "tool"
    | "sponsor"
    | "other";
  export type global_advisory = {
    ghsa_id: string;
    cve_id: string | null;
    url: string;
    html_url: string;
    repository_advisory_url: string | null;
    summary: string;
    description: string | null;
    type: "reviewed" | "unreviewed" | "malware";
    severity: "critical" | "high" | "medium" | "low" | "unknown";
    source_code_location: string | null;
    identifiers: Array<{ type: "CVE" | "GHSA"; value: string }> | null;
    references: Array<string> | null;
    published_at: string;
    updated_at: string;
    github_reviewed_at: string | null;
    nvd_published_at: string | null;
    withdrawn_at: string | null;
    vulnerabilities: Array<vulnerability> | null;
    cvss: { vector_string: string | null; score: number | null } | null;
    cvss_severities?: cvss_severities | undefined;
    epss?: security_advisory_epss | undefined;
    cwes: Array<{ cwe_id: string; name: string }> | null;
    credits: Array<{ user: simple_user; type: security_advisory_credit_types }> | null;
  };
  export type basic_error = Partial<{ message: string; documentation_url: string; url: string; status: string }>;
  export type validation_error_simple = {
    message: string;
    documentation_url: string;
    errors?: Array<string> | undefined;
  };
  export type enterprise = {
    description?: (string | null) | undefined;
    html_url: string;
    website_url?: (string | null) | undefined;
    id: number;
    node_id: string;
    name: string;
    slug: string;
    created_at: string | null;
    updated_at: string | null;
    avatar_url: string;
  };
  export type integration = {
    id: number;
    slug?: string | undefined;
    node_id: string;
    client_id?: string | undefined;
    owner: simple_user | enterprise;
    name: string;
    description: string | null;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    permissions: Partial<
      { issues: string; checks: string; metadata: string; contents: string; deployments: string } & Record<
        string,
        string
      >
    >;
    events: Array<string>;
    installations_count?: number | undefined;
  } | null;
  export type webhook_config_url = string;
  export type webhook_config_content_type = string;
  export type webhook_config_secret = string;
  export type webhook_config_insecure_ssl = string | number;
  export type webhook_config = Partial<{
    url: webhook_config_url;
    content_type: webhook_config_content_type;
    secret: webhook_config_secret;
    insecure_ssl: webhook_config_insecure_ssl;
  }>;
  export type hook_delivery_item = {
    id: number;
    guid: string;
    delivered_at: string;
    redelivery: boolean;
    duration: number;
    status: string;
    status_code: number;
    event: string;
    action: string | null;
    installation_id: number | null;
    repository_id: number | null;
    throttled_at?: (string | null) | undefined;
  };
  export type scim_error = Partial<{
    message: string | null;
    documentation_url: string | null;
    detail: string | null;
    status: number;
    scimType: string | null;
    schemas: Array<string>;
  }>;
  export type validation_error = {
    message: string;
    documentation_url: string;
    errors?:
      | Array<{
          resource?: string | undefined;
          field?: string | undefined;
          message?: string | undefined;
          code: string;
          index?: number | undefined;
          value?: ((string | null) | (number | null) | (Array<string> | null)) | undefined;
        }>
      | undefined;
  };
  export type hook_delivery = {
    id: number;
    guid: string;
    delivered_at: string;
    redelivery: boolean;
    duration: number;
    status: string;
    status_code: number;
    event: string;
    action: string | null;
    installation_id: number | null;
    repository_id: number | null;
    throttled_at?: (string | null) | undefined;
    url?: string | undefined;
    request: { headers: Record<string, unknown> | null; payload: Record<string, unknown> | null };
    response: { headers: Record<string, unknown> | null; payload: string | null };
  };
  export type integration_installation_request = {
    id: number;
    node_id?: string | undefined;
    account: simple_user | enterprise;
    requester: simple_user;
    created_at: string;
  };
  export type app_permissions = Partial<{
    actions: "read" | "write";
    administration: "read" | "write";
    checks: "read" | "write";
    codespaces: "read" | "write";
    contents: "read" | "write";
    dependabot_secrets: "read" | "write";
    deployments: "read" | "write";
    environments: "read" | "write";
    issues: "read" | "write";
    metadata: "read" | "write";
    packages: "read" | "write";
    pages: "read" | "write";
    pull_requests: "read" | "write";
    repository_custom_properties: "read" | "write";
    repository_hooks: "read" | "write";
    repository_projects: "read" | "write" | "admin";
    secret_scanning_alerts: "read" | "write";
    secrets: "read" | "write";
    security_events: "read" | "write";
    single_file: "read" | "write";
    statuses: "read" | "write";
    vulnerability_alerts: "read" | "write";
    workflows: "write";
    members: "read" | "write";
    organization_administration: "read" | "write";
    organization_custom_roles: "read" | "write";
    organization_custom_org_roles: "read" | "write";
    organization_custom_properties: "read" | "write" | "admin";
    organization_copilot_seat_management: "write";
    organization_announcement_banners: "read" | "write";
    organization_events: "read";
    organization_hooks: "read" | "write";
    organization_personal_access_tokens: "read" | "write";
    organization_personal_access_token_requests: "read" | "write";
    organization_plan: "read";
    organization_projects: "read" | "write" | "admin";
    organization_packages: "read" | "write";
    organization_secrets: "read" | "write";
    organization_self_hosted_runners: "read" | "write";
    organization_user_blocking: "read" | "write";
    team_discussions: "read" | "write";
    email_addresses: "read" | "write";
    followers: "read" | "write";
    git_ssh_keys: "read" | "write";
    gpg_keys: "read" | "write";
    interaction_limits: "read" | "write";
    profile: "write";
    starring: "read" | "write";
  }>;
  export type nullable_simple_user = {
    name?: (string | null) | undefined;
    email?: (string | null) | undefined;
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string | null;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    starred_at?: string | undefined;
    user_view_type?: string | undefined;
  } | null;
  export type installation = {
    id: number;
    account: (simple_user | enterprise) | null;
    repository_selection: "all" | "selected";
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    client_id?: string | undefined;
    target_id: number;
    target_type: string;
    permissions: app_permissions;
    events: Array<string>;
    created_at: string;
    updated_at: string;
    single_file_name: string | null;
    has_multiple_single_files?: boolean | undefined;
    single_file_paths?: Array<string> | undefined;
    app_slug: string;
    suspended_by: nullable_simple_user;
    suspended_at: string | null;
    contact_email?: (string | null) | undefined;
  };
  export type nullable_license_simple = {
    key: string;
    name: string;
    url: string | null;
    spdx_id: string | null;
    node_id: string;
    html_url?: string | undefined;
  } | null;
  export type repository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    license: nullable_license_simple;
    forks: number;
    permissions?:
      | { admin: boolean; pull: boolean; triage?: boolean | undefined; push: boolean; maintain?: boolean | undefined }
      | undefined;
    owner: simple_user;
    private: boolean;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string | null;
    hooks_url: string;
    svn_url: string;
    homepage: string | null;
    language: string | null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template?: boolean | undefined;
    topics?: Array<string> | undefined;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    has_discussions?: boolean | undefined;
    archived: boolean;
    disabled: boolean;
    visibility?: string | undefined;
    pushed_at: string | null;
    created_at: string | null;
    updated_at: string | null;
    allow_rebase_merge?: boolean | undefined;
    temp_clone_token?: string | undefined;
    allow_squash_merge?: boolean | undefined;
    allow_auto_merge?: boolean | undefined;
    delete_branch_on_merge?: boolean | undefined;
    allow_update_branch?: boolean | undefined;
    use_squash_pr_title_as_default?: boolean | undefined;
    squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
    squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
    merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
    merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
    allow_merge_commit?: boolean | undefined;
    allow_forking?: boolean | undefined;
    web_commit_signoff_required?: boolean | undefined;
    open_issues: number;
    watchers: number;
    master_branch?: string | undefined;
    starred_at?: string | undefined;
    anonymous_access_enabled?: boolean | undefined;
    code_search_index_status?: Partial<{ lexical_search_ok: boolean; lexical_commit_sha: string }> | undefined;
  };
  export type installation_token = {
    token: string;
    expires_at: string;
    permissions?: app_permissions | undefined;
    repository_selection?: ("all" | "selected") | undefined;
    repositories?: Array<repository> | undefined;
    single_file?: string | undefined;
    has_multiple_single_files?: boolean | undefined;
    single_file_paths?: Array<string> | undefined;
  };
  export type nullable_scoped_installation = {
    permissions: app_permissions;
    repository_selection: "all" | "selected";
    single_file_name: string | null;
    has_multiple_single_files?: boolean | undefined;
    single_file_paths?: Array<string> | undefined;
    repositories_url: string;
    account: simple_user;
  } | null;
  export type authorization = {
    id: number;
    url: string;
    scopes: Array<string> | null;
    token: string;
    token_last_eight: string | null;
    hashed_token: string | null;
    app: { client_id: string; name: string; url: string };
    note: string | null;
    note_url: string | null;
    updated_at: string;
    created_at: string;
    fingerprint: string | null;
    user?: nullable_simple_user | undefined;
    installation?: nullable_scoped_installation | undefined;
    expires_at: string | null;
  };
  export type simple_classroom_repository = {
    id: number;
    full_name: string;
    html_url: string;
    node_id: string;
    private: boolean;
    default_branch: string;
  };
  export type simple_classroom_organization = {
    id: number;
    login: string;
    node_id: string;
    html_url: string;
    name: string | null;
    avatar_url: string;
  };
  export type classroom = {
    id: number;
    name: string;
    archived: boolean;
    organization: simple_classroom_organization;
    url: string;
  };
  export type classroom_assignment = {
    id: number;
    public_repo: boolean;
    title: string;
    type: "individual" | "group";
    invite_link: string;
    invitations_enabled: boolean;
    slug: string;
    students_are_repo_admins: boolean;
    feedback_pull_requests_enabled: boolean;
    max_teams: number | null;
    max_members: number | null;
    editor: string;
    accepted: number;
    submitted: number;
    passing: number;
    language: string;
    deadline: string | null;
    starter_code_repository: simple_classroom_repository;
    classroom: classroom;
  };
  export type simple_classroom_user = { id: number; login: string; avatar_url: string; html_url: string };
  export type simple_classroom = { id: number; name: string; archived: boolean; url: string };
  export type simple_classroom_assignment = {
    id: number;
    public_repo: boolean;
    title: string;
    type: "individual" | "group";
    invite_link: string;
    invitations_enabled: boolean;
    slug: string;
    students_are_repo_admins: boolean;
    feedback_pull_requests_enabled: boolean;
    max_teams?: (number | null) | undefined;
    max_members?: (number | null) | undefined;
    editor: string;
    accepted: number;
    submitted: number;
    passing: number;
    language: string;
    deadline: string | null;
    classroom: simple_classroom;
  };
  export type classroom_accepted_assignment = {
    id: number;
    submitted: boolean;
    passing: boolean;
    commit_count: number;
    grade: string;
    students: Array<simple_classroom_user>;
    repository: simple_classroom_repository;
    assignment: simple_classroom_assignment;
  };
  export type classroom_assignment_grade = {
    assignment_name: string;
    assignment_url: string;
    starter_code_url: string;
    github_username: string;
    roster_identifier: string;
    student_repository_name: string;
    student_repository_url: string;
    submission_timestamp: string;
    points_awarded: number;
    points_available: number;
    group_name?: string | undefined;
  };
  export type code_of_conduct = {
    key: string;
    name: string;
    url: string;
    body?: string | undefined;
    html_url: string | null;
  };
  export type code_security_configuration = Partial<{
    id: number;
    name: string;
    target_type: "global" | "organization" | "enterprise";
    description: string;
    advanced_security: "enabled" | "disabled" | "code_security" | "secret_protection";
    dependency_graph: "enabled" | "disabled" | "not_set";
    dependency_graph_autosubmit_action: "enabled" | "disabled" | "not_set";
    dependency_graph_autosubmit_action_options: Partial<{ labeled_runners: boolean }>;
    dependabot_alerts: "enabled" | "disabled" | "not_set";
    dependabot_security_updates: "enabled" | "disabled" | "not_set";
    code_scanning_options: Partial<{ allow_advanced: boolean | null }> | null;
    code_scanning_default_setup: "enabled" | "disabled" | "not_set";
    code_scanning_default_setup_options: Partial<{
      runner_type: ("standard" | "labeled" | "not_set") | null;
      runner_label: string | null;
    }> | null;
    code_scanning_delegated_alert_dismissal: "enabled" | "disabled" | "not_set";
    secret_scanning: "enabled" | "disabled" | "not_set";
    secret_scanning_push_protection: "enabled" | "disabled" | "not_set";
    secret_scanning_delegated_bypass: "enabled" | "disabled" | "not_set";
    secret_scanning_delegated_bypass_options: Partial<{
      reviewers: Array<{ reviewer_id: number; reviewer_type: "TEAM" | "ROLE" }>;
    }>;
    secret_scanning_validity_checks: "enabled" | "disabled" | "not_set";
    secret_scanning_non_provider_patterns: "enabled" | "disabled" | "not_set";
    secret_scanning_generic_secrets: "enabled" | "disabled" | "not_set";
    secret_scanning_delegated_alert_dismissal: "enabled" | "disabled" | "not_set";
    private_vulnerability_reporting: "enabled" | "disabled" | "not_set";
    enforcement: "enforced" | "unenforced";
    url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
  }>;
  export type code_scanning_options = Partial<{ allow_advanced: boolean | null }> | null;
  export type code_scanning_default_setup_options = Partial<{
    runner_type: "standard" | "labeled" | "not_set";
    runner_label: string | null;
  }> | null;
  export type code_security_default_configurations = Array<
    Partial<{
      default_for_new_repos: "public" | "private_and_internal" | "all";
      configuration: code_security_configuration;
    }>
  >;
  export type simple_repository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: simple_user;
    private: boolean;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    hooks_url: string;
  };
  export type code_security_configuration_repositories = Partial<{
    status:
      | "attached"
      | "attaching"
      | "detached"
      | "removed"
      | "enforced"
      | "failed"
      | "updating"
      | "removed_by_enterprise";
    repository: simple_repository;
  }>;
  export type alert_number = number;
  export type dependabot_alert_package = { ecosystem: string; name: string };
  export type dependabot_alert_security_vulnerability = {
    package: dependabot_alert_package;
    severity: "low" | "medium" | "high" | "critical";
    vulnerable_version_range: string;
    first_patched_version: { identifier: string } | null;
  };
  export type dependabot_alert_security_advisory = {
    ghsa_id: string;
    cve_id: string | null;
    summary: string;
    description: string;
    vulnerabilities: Array<dependabot_alert_security_vulnerability>;
    severity: "low" | "medium" | "high" | "critical";
    cvss: { score: number; vector_string: string | null };
    cvss_severities?: cvss_severities | undefined;
    epss?: security_advisory_epss | undefined;
    cwes: Array<{ cwe_id: string; name: string }>;
    identifiers: Array<{ type: "CVE" | "GHSA"; value: string }>;
    references: Array<{ url: string }>;
    published_at: string;
    updated_at: string;
    withdrawn_at: string | null;
  };
  export type alert_url = string;
  export type alert_html_url = string;
  export type alert_created_at = string;
  export type alert_updated_at = string;
  export type alert_dismissed_at = string | null;
  export type alert_fixed_at = string | null;
  export type alert_auto_dismissed_at = string | null;
  export type dependabot_alert_with_repository = {
    number: alert_number;
    state: "auto_dismissed" | "dismissed" | "fixed" | "open";
    dependency: Partial<{
      package: dependabot_alert_package;
      manifest_path: string;
      scope: ("development" | "runtime") | null;
      relationship: ("unknown" | "direct" | "transitive") | null;
    }>;
    security_advisory: dependabot_alert_security_advisory;
    security_vulnerability: dependabot_alert_security_vulnerability;
    url: alert_url;
    html_url: alert_html_url;
    created_at: alert_created_at;
    updated_at: alert_updated_at;
    dismissed_at: alert_dismissed_at;
    dismissed_by: nullable_simple_user;
    dismissed_reason: ("fix_started" | "inaccurate" | "no_bandwidth" | "not_used" | "tolerable_risk") | null;
    dismissed_comment: string | null;
    fixed_at: alert_fixed_at;
    auto_dismissed_at?: alert_auto_dismissed_at | undefined;
    repository: simple_repository;
  };
  export type nullable_alert_updated_at = string | null;
  export type secret_scanning_alert_state = "open" | "resolved";
  export type secret_scanning_alert_resolution = ("false_positive" | "wont_fix" | "revoked" | "used_in_tests") | null;
  export type secret_scanning_location_commit = {
    path: string;
    start_line: number;
    end_line: number;
    start_column: number;
    end_column: number;
    blob_sha: string;
    blob_url: string;
    commit_sha: string;
    commit_url: string;
  };
  export type secret_scanning_location_wiki_commit = {
    path: string;
    start_line: number;
    end_line: number;
    start_column: number;
    end_column: number;
    blob_sha: string;
    page_url: string;
    commit_sha: string;
    commit_url: string;
  };
  export type secret_scanning_location_issue_title = { issue_title_url: string };
  export type secret_scanning_location_issue_body = { issue_body_url: string };
  export type secret_scanning_location_issue_comment = { issue_comment_url: string };
  export type secret_scanning_location_discussion_title = { discussion_title_url: string };
  export type secret_scanning_location_discussion_body = { discussion_body_url: string };
  export type secret_scanning_location_discussion_comment = { discussion_comment_url: string };
  export type secret_scanning_location_pull_request_title = { pull_request_title_url: string };
  export type secret_scanning_location_pull_request_body = { pull_request_body_url: string };
  export type secret_scanning_location_pull_request_comment = { pull_request_comment_url: string };
  export type secret_scanning_location_pull_request_review = { pull_request_review_url: string };
  export type secret_scanning_location_pull_request_review_comment = { pull_request_review_comment_url: string };
  export type nullable_secret_scanning_first_detected_location =
    | (
        | secret_scanning_location_commit
        | secret_scanning_location_wiki_commit
        | secret_scanning_location_issue_title
        | secret_scanning_location_issue_body
        | secret_scanning_location_issue_comment
        | secret_scanning_location_discussion_title
        | secret_scanning_location_discussion_body
        | secret_scanning_location_discussion_comment
        | secret_scanning_location_pull_request_title
        | secret_scanning_location_pull_request_body
        | secret_scanning_location_pull_request_comment
        | secret_scanning_location_pull_request_review
        | secret_scanning_location_pull_request_review_comment
      )
    | null;
  export type organization_secret_scanning_alert = Partial<{
    number: alert_number;
    created_at: alert_created_at;
    updated_at: nullable_alert_updated_at;
    url: alert_url;
    html_url: alert_html_url;
    locations_url: string;
    state: secret_scanning_alert_state;
    resolution: secret_scanning_alert_resolution;
    resolved_at: string | null;
    resolved_by: nullable_simple_user;
    secret_type: string;
    secret_type_display_name: string;
    secret: string;
    repository: simple_repository;
    push_protection_bypassed: boolean | null;
    push_protection_bypassed_by: nullable_simple_user;
    push_protection_bypassed_at: string | null;
    push_protection_bypass_request_reviewer: nullable_simple_user;
    push_protection_bypass_request_reviewer_comment: string | null;
    push_protection_bypass_request_comment: string | null;
    push_protection_bypass_request_html_url: string | null;
    resolution_comment: string | null;
    validity: "active" | "inactive" | "unknown";
    publicly_leaked: boolean | null;
    multi_repo: boolean | null;
    is_base64_encoded: boolean | null;
    first_location_detected: nullable_secret_scanning_first_detected_location;
    has_more_locations: boolean;
  }>;
  export type actor = {
    id: number;
    login: string;
    display_login?: string | undefined;
    gravatar_id: string | null;
    url: string;
    avatar_url: string;
  };
  export type nullable_milestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: "open" | "closed";
    title: string;
    description: string | null;
    creator: nullable_simple_user;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    due_on: string | null;
  } | null;
  export type issue_type = {
    id: number;
    node_id: string;
    name: string;
    description: string | null;
    color?: (("gray" | "blue" | "green" | "yellow" | "orange" | "red" | "pink" | "purple") | null) | undefined;
    created_at?: string | undefined;
    updated_at?: string | undefined;
    is_enabled?: boolean | undefined;
  } | null;
  export type nullable_integration = {
    id: number;
    slug?: string | undefined;
    node_id: string;
    client_id?: string | undefined;
    owner: simple_user | enterprise;
    name: string;
    description: string | null;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    permissions: Partial<
      { issues: string; checks: string; metadata: string; contents: string; deployments: string } & Record<
        string,
        string
      >
    >;
    events: Array<string>;
    installations_count?: number | undefined;
  } | null;
  export type author_association =
    | "COLLABORATOR"
    | "CONTRIBUTOR"
    | "FIRST_TIMER"
    | "FIRST_TIME_CONTRIBUTOR"
    | "MANNEQUIN"
    | "MEMBER"
    | "NONE"
    | "OWNER";
  export type reaction_rollup = {
    url: string;
    total_count: number;
    "+1": number;
    "-1": number;
    laugh: number;
    confused: number;
    heart: number;
    hooray: number;
    eyes: number;
    rocket: number;
  };
  export type sub_issues_summary = { total: number; completed: number; percent_completed: number };
  export type issue_dependencies_summary = {
    blocked_by: number;
    blocking: number;
    total_blocked_by: number;
    total_blocking: number;
  };
  export type issue_field_value = {
    issue_field_id: number;
    node_id: string;
    data_type: "text" | "single_select" | "number" | "date";
    value: (string | number | number) | null;
    single_select_option?: ({ id: number; name: string; color: string } | null) | undefined;
  };
  export type issue = {
    id: number;
    node_id: string;
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    number: number;
    state: string;
    state_reason?: (("completed" | "reopened" | "not_planned" | "duplicate") | null) | undefined;
    title: string;
    body?: (string | null) | undefined;
    user: nullable_simple_user;
    labels: Array<
      | string
      | Partial<{
          id: number;
          node_id: string;
          url: string;
          name: string;
          description: string | null;
          color: string | null;
          default: boolean;
        }>
    >;
    assignee: nullable_simple_user;
    assignees?: (Array<simple_user> | null) | undefined;
    milestone: nullable_milestone;
    locked: boolean;
    active_lock_reason?: (string | null) | undefined;
    comments: number;
    pull_request?:
      | {
          merged_at?: (string | null) | undefined;
          diff_url: string | null;
          html_url: string | null;
          patch_url: string | null;
          url: string | null;
        }
      | undefined;
    closed_at: string | null;
    created_at: string;
    updated_at: string;
    draft?: boolean | undefined;
    closed_by?: nullable_simple_user | undefined;
    body_html?: string | undefined;
    body_text?: string | undefined;
    timeline_url?: string | undefined;
    type?: issue_type | undefined;
    repository?: repository | undefined;
    performed_via_github_app?: nullable_integration | undefined;
    author_association: author_association;
    reactions?: reaction_rollup | undefined;
    sub_issues_summary?: sub_issues_summary | undefined;
    issue_dependencies_summary?: issue_dependencies_summary | undefined;
    issue_field_values?: Array<issue_field_value> | undefined;
  };
  export type issue_comment = {
    id: number;
    node_id: string;
    url: string;
    body?: string | undefined;
    body_text?: string | undefined;
    body_html?: string | undefined;
    html_url: string;
    user: nullable_simple_user;
    created_at: string;
    updated_at: string;
    issue_url: string;
    author_association: author_association;
    performed_via_github_app?: nullable_integration | undefined;
    reactions?: reaction_rollup | undefined;
  };
  export type event = {
    id: string;
    type: string | null;
    actor: actor;
    repo: { id: number; name: string; url: string };
    org?: actor | undefined;
    payload: Partial<{
      action: string;
      issue: issue;
      comment: issue_comment;
      pages: Array<
        Partial<{
          page_name: string;
          title: string;
          summary: string | null;
          action: string;
          sha: string;
          html_url: string;
        }>
      >;
    }>;
    public: boolean;
    created_at: string | null;
  };
  export type link_with_type = { href: string; type: string };
  export type feed = {
    timeline_url: string;
    user_url: string;
    current_user_public_url?: string | undefined;
    current_user_url?: string | undefined;
    current_user_actor_url?: string | undefined;
    current_user_organization_url?: string | undefined;
    current_user_organization_urls?: Array<string> | undefined;
    security_advisories_url?: string | undefined;
    repository_discussions_url?: string | undefined;
    repository_discussions_category_url?: string | undefined;
    _links: {
      timeline: link_with_type;
      user: link_with_type;
      security_advisories?: link_with_type | undefined;
      current_user?: link_with_type | undefined;
      current_user_public?: link_with_type | undefined;
      current_user_actor?: link_with_type | undefined;
      current_user_organization?: link_with_type | undefined;
      current_user_organizations?: Array<link_with_type> | undefined;
      repository_discussions?: link_with_type | undefined;
      repository_discussions_category?: link_with_type | undefined;
    };
  };
  export type base_gist = {
    url: string;
    forks_url: string;
    commits_url: string;
    id: string;
    node_id: string;
    git_pull_url: string;
    git_push_url: string;
    html_url: string;
    files: Record<
      string,
      Partial<{ filename: string; type: string; language: string; raw_url: string; size: number; encoding: string }>
    >;
    public: boolean;
    created_at: string;
    updated_at: string;
    description: string | null;
    comments: number;
    comments_enabled?: boolean | undefined;
    user: nullable_simple_user;
    comments_url: string;
    owner?: simple_user | undefined;
    truncated?: boolean | undefined;
    forks?: Array<unknown> | undefined;
    history?: Array<unknown> | undefined;
  };
  export type public_user = {
    login: string;
    id: number;
    user_view_type?: string | undefined;
    node_id: string;
    avatar_url: string;
    gravatar_id: string | null;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    name: string | null;
    company: string | null;
    blog: string | null;
    location: string | null;
    email: string | null;
    notification_email?: (string | null) | undefined;
    hireable: boolean | null;
    bio: string | null;
    twitter_username?: (string | null) | undefined;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    created_at: string;
    updated_at: string;
    plan?: { collaborators: number; name: string; space: number; private_repos: number } | undefined;
    private_gists?: number | undefined;
    total_private_repos?: number | undefined;
    owned_private_repos?: number | undefined;
    disk_usage?: number | undefined;
    collaborators?: number | undefined;
  };
  export type gist_history = Partial<{
    user: nullable_simple_user;
    version: string;
    committed_at: string;
    change_status: Partial<{ total: number; additions: number; deletions: number }>;
    url: string;
  }>;
  export type gist_simple = Partial<{
    forks: Array<
      Partial<{ id: string; url: string; user: public_user; created_at: string; updated_at: string }>
    > | null;
    history: Array<gist_history> | null;
    fork_of: {
      url: string;
      forks_url: string;
      commits_url: string;
      id: string;
      node_id: string;
      git_pull_url: string;
      git_push_url: string;
      html_url: string;
      files: Record<
        string,
        Partial<{ filename: string; type: string; language: string; raw_url: string; size: number }>
      >;
      public: boolean;
      created_at: string;
      updated_at: string;
      description: string | null;
      comments: number;
      comments_enabled?: boolean | undefined;
      user: nullable_simple_user;
      comments_url: string;
      owner?: nullable_simple_user | undefined;
      truncated?: boolean | undefined;
      forks?: Array<unknown> | undefined;
      history?: Array<unknown> | undefined;
    } | null;
    url: string;
    forks_url: string;
    commits_url: string;
    id: string;
    node_id: string;
    git_pull_url: string;
    git_push_url: string;
    html_url: string;
    files: Record<
      string,
      Partial<{
        filename: string;
        type: string;
        language: string;
        raw_url: string;
        size: number;
        truncated: boolean;
        content: string;
        encoding: string;
      }> | null
    >;
    public: boolean;
    created_at: string;
    updated_at: string;
    description: string | null;
    comments: number;
    comments_enabled: boolean;
    user: string | null;
    comments_url: string;
    owner: simple_user;
    truncated: boolean;
  }>;
  export type gist_comment = {
    id: number;
    node_id: string;
    url: string;
    body: string;
    user: nullable_simple_user;
    created_at: string;
    updated_at: string;
    author_association: author_association;
  };
  export type gist_commit = {
    url: string;
    version: string;
    user: nullable_simple_user;
    change_status: Partial<{ total: number; additions: number; deletions: number }>;
    committed_at: string;
  };
  export type gitignore_template = { name: string; source: string };
  export type license_simple = {
    key: string;
    name: string;
    url: string | null;
    spdx_id: string | null;
    node_id: string;
    html_url?: string | undefined;
  };
  export type license = {
    key: string;
    name: string;
    spdx_id: string | null;
    url: string | null;
    node_id: string;
    html_url: string;
    description: string;
    implementation: string;
    permissions: Array<string>;
    conditions: Array<string>;
    limitations: Array<string>;
    body: string;
    featured: boolean;
  };
  export type marketplace_listing_plan = {
    url: string;
    accounts_url: string;
    id: number;
    number: number;
    name: string;
    description: string;
    monthly_price_in_cents: number;
    yearly_price_in_cents: number;
    price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
    has_free_trial: boolean;
    unit_name: string | null;
    state: string;
    bullets: Array<string>;
  };
  export type marketplace_purchase = {
    url: string;
    type: string;
    id: number;
    login: string;
    organization_billing_email?: string | undefined;
    email?: (string | null) | undefined;
    marketplace_pending_change?:
      | (Partial<{
          is_installed: boolean;
          effective_date: string;
          unit_count: number | null;
          id: number;
          plan: marketplace_listing_plan;
        }> | null)
      | undefined;
    marketplace_purchase: Partial<{
      billing_cycle: string;
      next_billing_date: string | null;
      is_installed: boolean;
      unit_count: number | null;
      on_free_trial: boolean;
      free_trial_ends_on: string | null;
      updated_at: string;
      plan: marketplace_listing_plan;
    }>;
  };
  export type api_overview = {
    verifiable_password_authentication: boolean;
    ssh_key_fingerprints?:
      | Partial<{ SHA256_RSA: string; SHA256_DSA: string; SHA256_ECDSA: string; SHA256_ED25519: string }>
      | undefined;
    ssh_keys?: Array<string> | undefined;
    hooks?: Array<string> | undefined;
    github_enterprise_importer?: Array<string> | undefined;
    web?: Array<string> | undefined;
    api?: Array<string> | undefined;
    git?: Array<string> | undefined;
    packages?: Array<string> | undefined;
    pages?: Array<string> | undefined;
    importer?: Array<string> | undefined;
    actions?: Array<string> | undefined;
    actions_macos?: Array<string> | undefined;
    codespaces?: Array<string> | undefined;
    dependabot?: Array<string> | undefined;
    copilot?: Array<string> | undefined;
    domains?:
      | Partial<{
          website: Array<string>;
          codespaces: Array<string>;
          copilot: Array<string>;
          packages: Array<string>;
          actions: Array<string>;
          actions_inbound: Partial<{ full_domains: Array<string>; wildcard_domains: Array<string> }>;
          artifact_attestations: Partial<{ trust_domain: string; services: Array<string> }>;
        }>
      | undefined;
  };
  export type security_and_analysis = Partial<{
    advanced_security: Partial<{ status: "enabled" | "disabled" }>;
    code_security: Partial<{ status: "enabled" | "disabled" }>;
    dependabot_security_updates: Partial<{ status: "enabled" | "disabled" }>;
    secret_scanning: Partial<{ status: "enabled" | "disabled" }>;
    secret_scanning_push_protection: Partial<{ status: "enabled" | "disabled" }>;
    secret_scanning_non_provider_patterns: Partial<{ status: "enabled" | "disabled" }>;
    secret_scanning_ai_detection: Partial<{ status: "enabled" | "disabled" }>;
  }> | null;
  export type minimal_repository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: simple_user;
    private: boolean;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url?: string | undefined;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url?: string | undefined;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url?: string | undefined;
    mirror_url?: (string | null) | undefined;
    hooks_url: string;
    svn_url?: string | undefined;
    homepage?: (string | null) | undefined;
    language?: (string | null) | undefined;
    forks_count?: number | undefined;
    stargazers_count?: number | undefined;
    watchers_count?: number | undefined;
    size?: number | undefined;
    default_branch?: string | undefined;
    open_issues_count?: number | undefined;
    is_template?: boolean | undefined;
    topics?: Array<string> | undefined;
    has_issues?: boolean | undefined;
    has_projects?: boolean | undefined;
    has_wiki?: boolean | undefined;
    has_pages?: boolean | undefined;
    has_downloads?: boolean | undefined;
    has_discussions?: boolean | undefined;
    archived?: boolean | undefined;
    disabled?: boolean | undefined;
    visibility?: string | undefined;
    pushed_at?: (string | null) | undefined;
    created_at?: (string | null) | undefined;
    updated_at?: (string | null) | undefined;
    permissions?:
      | Partial<{ admin: boolean; maintain: boolean; push: boolean; triage: boolean; pull: boolean }>
      | undefined;
    role_name?: string | undefined;
    temp_clone_token?: string | undefined;
    delete_branch_on_merge?: boolean | undefined;
    subscribers_count?: number | undefined;
    network_count?: number | undefined;
    code_of_conduct?: code_of_conduct | undefined;
    license?:
      | (Partial<{ key: string; name: string; spdx_id: string; url: string; node_id: string }> | null)
      | undefined;
    forks?: number | undefined;
    open_issues?: number | undefined;
    watchers?: number | undefined;
    allow_forking?: boolean | undefined;
    web_commit_signoff_required?: boolean | undefined;
    security_and_analysis?: security_and_analysis | undefined;
    custom_properties?: Record<string, unknown> | undefined;
  };
  export type thread = {
    id: string;
    repository: minimal_repository;
    subject: { title: string; url: string; latest_comment_url: string; type: string };
    reason: string;
    unread: boolean;
    updated_at: string;
    last_read_at: string | null;
    url: string;
    subscription_url: string;
  };
  export type thread_subscription = {
    subscribed: boolean;
    ignored: boolean;
    reason: string | null;
    created_at: string | null;
    url: string;
    thread_url?: string | undefined;
    repository_url?: string | undefined;
  };
  export type organization_simple = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string | null;
  };
  export type nullable_simple_repository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: simple_user;
    private: boolean;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    hooks_url: string;
  } | null;
  export type dependabot_repository_access_details = Partial<{
    default_level: ("public" | "internal") | null;
    accessible_repositories: Array<nullable_simple_repository>;
  }>;
  export type billing_usage_report = Partial<{
    usageItems: Array<{
      date: string;
      product: string;
      sku: string;
      quantity: number;
      unitType: string;
      pricePerUnit: number;
      grossAmount: number;
      discountAmount: number;
      netAmount: number;
      organizationName: string;
      repositoryName?: string | undefined;
    }>;
  }>;
  export type organization_full = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string | null;
    name?: string | undefined;
    company?: string | undefined;
    blog?: string | undefined;
    location?: string | undefined;
    email?: string | undefined;
    twitter_username?: (string | null) | undefined;
    is_verified?: boolean | undefined;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    type: string;
    total_private_repos?: number | undefined;
    owned_private_repos?: number | undefined;
    private_gists?: (number | null) | undefined;
    disk_usage?: (number | null) | undefined;
    collaborators?: (number | null) | undefined;
    billing_email?: (string | null) | undefined;
    plan?:
      | {
          name: string;
          space: number;
          private_repos: number;
          filled_seats?: number | undefined;
          seats?: number | undefined;
        }
      | undefined;
    default_repository_permission?: (string | null) | undefined;
    default_repository_branch?: (string | null) | undefined;
    members_can_create_repositories?: (boolean | null) | undefined;
    two_factor_requirement_enabled?: (boolean | null) | undefined;
    members_allowed_repository_creation_type?: string | undefined;
    members_can_create_public_repositories?: boolean | undefined;
    members_can_create_private_repositories?: boolean | undefined;
    members_can_create_internal_repositories?: boolean | undefined;
    members_can_create_pages?: boolean | undefined;
    members_can_create_public_pages?: boolean | undefined;
    members_can_create_private_pages?: boolean | undefined;
    members_can_delete_repositories?: boolean | undefined;
    members_can_change_repo_visibility?: boolean | undefined;
    members_can_invite_outside_collaborators?: boolean | undefined;
    members_can_delete_issues?: boolean | undefined;
    display_commenter_full_name_setting_enabled?: boolean | undefined;
    readers_can_create_discussions?: boolean | undefined;
    members_can_create_teams?: boolean | undefined;
    members_can_view_dependency_insights?: boolean | undefined;
    members_can_fork_private_repositories?: (boolean | null) | undefined;
    web_commit_signoff_required?: boolean | undefined;
    advanced_security_enabled_for_new_repositories?: boolean | undefined;
    dependabot_alerts_enabled_for_new_repositories?: boolean | undefined;
    dependabot_security_updates_enabled_for_new_repositories?: boolean | undefined;
    dependency_graph_enabled_for_new_repositories?: boolean | undefined;
    secret_scanning_enabled_for_new_repositories?: boolean | undefined;
    secret_scanning_push_protection_enabled_for_new_repositories?: boolean | undefined;
    secret_scanning_push_protection_custom_link_enabled?: boolean | undefined;
    secret_scanning_push_protection_custom_link?: (string | null) | undefined;
    created_at: string;
    updated_at: string;
    archived_at: string | null;
    deploy_keys_enabled_for_repositories?: boolean | undefined;
  };
  export type actions_cache_usage_org_enterprise = {
    total_active_caches_count: number;
    total_active_caches_size_in_bytes: number;
  };
  export type actions_cache_usage_by_repository = {
    full_name: string;
    active_caches_size_in_bytes: number;
    active_caches_count: number;
  };
  export type nullable_actions_hosted_runner_pool_image = {
    id: string;
    size_gb: number;
    display_name: string;
    source: "github" | "partner" | "custom";
  } | null;
  export type actions_hosted_runner_machine_spec = {
    id: string;
    cpu_cores: number;
    memory_gb: number;
    storage_gb: number;
  };
  export type public_ip = Partial<{ enabled: boolean; prefix: string; length: number }>;
  export type actions_hosted_runner = {
    id: number;
    name: string;
    runner_group_id?: number | undefined;
    image_details: nullable_actions_hosted_runner_pool_image;
    machine_size_details: actions_hosted_runner_machine_spec;
    status: "Ready" | "Provisioning" | "Shutdown" | "Deleting" | "Stuck";
    platform: string;
    maximum_runners?: number | undefined;
    public_ip_enabled: boolean;
    public_ips?: Array<public_ip> | undefined;
    last_active_on?: (string | null) | undefined;
  };
  export type actions_hosted_runner_curated_image = {
    id: string;
    platform: string;
    size_gb: number;
    display_name: string;
    source: "github" | "partner" | "custom";
  };
  export type actions_hosted_runner_limits = { public_ips: { maximum: number; current_usage: number } };
  export type oidc_custom_sub = { include_claim_keys: Array<string> };
  export type empty_object = Partial<{}>;
  export type enabled_repositories = "all" | "none" | "selected";
  export type allowed_actions = "all" | "local_only" | "selected";
  export type selected_actions_url = string;
  export type sha_pinning_required = boolean;
  export type actions_organization_permissions = {
    enabled_repositories: enabled_repositories;
    selected_repositories_url?: string | undefined;
    allowed_actions?: allowed_actions | undefined;
    selected_actions_url?: selected_actions_url | undefined;
    sha_pinning_required?: sha_pinning_required | undefined;
  };
  export type actions_artifact_and_log_retention_response = { days: number; maximum_allowed_days: number };
  export type actions_artifact_and_log_retention = { days: number };
  export type actions_fork_pr_contributor_approval = {
    approval_policy: "first_time_contributors_new_to_github" | "first_time_contributors" | "all_external_contributors";
  };
  export type actions_fork_pr_workflows_private_repos = {
    run_workflows_from_fork_pull_requests: boolean;
    send_write_tokens_to_workflows: boolean;
    send_secrets_and_variables: boolean;
    require_approval_for_fork_pr_workflows: boolean;
  };
  export type actions_fork_pr_workflows_private_repos_request = {
    run_workflows_from_fork_pull_requests: boolean;
    send_write_tokens_to_workflows?: boolean | undefined;
    send_secrets_and_variables?: boolean | undefined;
    require_approval_for_fork_pr_workflows?: boolean | undefined;
  };
  export type selected_actions = Partial<{
    github_owned_allowed: boolean;
    verified_allowed: boolean;
    patterns_allowed: Array<string>;
  }>;
  export type self_hosted_runners_settings = {
    enabled_repositories: "all" | "selected" | "none";
    selected_repositories_url?: string | undefined;
  };
  export type actions_default_workflow_permissions = "read" | "write";
  export type actions_can_approve_pull_request_reviews = boolean;
  export type actions_get_default_workflow_permissions = {
    default_workflow_permissions: actions_default_workflow_permissions;
    can_approve_pull_request_reviews: actions_can_approve_pull_request_reviews;
  };
  export type actions_set_default_workflow_permissions = Partial<{
    default_workflow_permissions: actions_default_workflow_permissions;
    can_approve_pull_request_reviews: actions_can_approve_pull_request_reviews;
  }>;
  export type runner_groups_org = {
    id: number;
    name: string;
    visibility: string;
    default: boolean;
    selected_repositories_url?: string | undefined;
    runners_url: string;
    hosted_runners_url?: string | undefined;
    network_configuration_id?: string | undefined;
    inherited: boolean;
    inherited_allows_public_repositories?: boolean | undefined;
    allows_public_repositories: boolean;
    workflow_restrictions_read_only?: boolean | undefined;
    restricted_to_workflows?: boolean | undefined;
    selected_workflows?: Array<string> | undefined;
  };
  export type runner_label = { id?: number | undefined; name: string; type?: ("read-only" | "custom") | undefined };
  export type runner = {
    id: number;
    runner_group_id?: number | undefined;
    name: string;
    os: string;
    status: string;
    busy: boolean;
    labels: Array<runner_label>;
    ephemeral?: boolean | undefined;
  };
  export type runner_application = {
    os: string;
    architecture: string;
    download_url: string;
    filename: string;
    temp_download_token?: string | undefined;
    sha256_checksum?: string | undefined;
  };
  export type authentication_token = {
    token: string;
    expires_at: string;
    permissions?: Record<string, unknown> | undefined;
    repositories?: Array<repository> | undefined;
    single_file?: (string | null) | undefined;
    repository_selection?: ("all" | "selected") | undefined;
  };
  export type organization_actions_secret = {
    name: string;
    created_at: string;
    updated_at: string;
    visibility: "all" | "private" | "selected";
    selected_repositories_url?: string | undefined;
  };
  export type actions_public_key = {
    key_id: string;
    key: string;
    id?: number | undefined;
    url?: string | undefined;
    title?: string | undefined;
    created_at?: string | undefined;
  };
  export type organization_actions_variable = {
    name: string;
    value: string;
    created_at: string;
    updated_at: string;
    visibility: "all" | "private" | "selected";
    selected_repositories_url?: string | undefined;
  };
  export type campaign_state = "open" | "closed";
  export type nullable_team_simple = {
    id: number;
    node_id: string;
    url: string;
    members_url: string;
    name: string;
    description: string | null;
    permission: string;
    privacy?: string | undefined;
    notification_setting?: string | undefined;
    html_url: string;
    repositories_url: string;
    slug: string;
    ldap_dn?: string | undefined;
  } | null;
  export type team = {
    id: number;
    node_id: string;
    name: string;
    slug: string;
    description: string | null;
    privacy?: string | undefined;
    notification_setting?: string | undefined;
    permission: string;
    permissions?: { pull: boolean; triage: boolean; push: boolean; maintain: boolean; admin: boolean } | undefined;
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    parent: nullable_team_simple;
  };
  export type campaign_summary = {
    number: number;
    created_at: string;
    updated_at: string;
    name?: string | undefined;
    description: string;
    managers: Array<simple_user>;
    team_managers?: Array<team> | undefined;
    published_at?: string | undefined;
    ends_at: string;
    closed_at?: (string | null) | undefined;
    state: campaign_state;
    contact_link: string | null;
    alert_stats?: { open_count: number; closed_count: number; in_progress_count: number } | undefined;
  };
  export type code_scanning_analysis_tool_name = string;
  export type code_scanning_analysis_tool_guid = string | null;
  export type code_scanning_alert_state_query = "open" | "closed" | "dismissed" | "fixed";
  export type code_scanning_alert_severity = "critical" | "high" | "medium" | "low" | "warning" | "note" | "error";
  export type alert_instances_url = string;
  export type code_scanning_alert_state = ("open" | "dismissed" | "fixed") | null;
  export type code_scanning_alert_dismissed_reason = ("false positive" | "won't fix" | "used in tests") | null;
  export type code_scanning_alert_dismissed_comment = string | null;
  export type code_scanning_alert_rule_summary = Partial<{
    id: string | null;
    name: string;
    severity: ("none" | "note" | "warning" | "error") | null;
    security_severity_level: ("low" | "medium" | "high" | "critical") | null;
    description: string;
    full_description: string;
    tags: Array<string> | null;
    help: string | null;
    help_uri: string | null;
  }>;
  export type code_scanning_analysis_tool_version = string | null;
  export type code_scanning_analysis_tool = Partial<{
    name: code_scanning_analysis_tool_name;
    version: code_scanning_analysis_tool_version;
    guid: code_scanning_analysis_tool_guid;
  }>;
  export type code_scanning_ref = string;
  export type code_scanning_analysis_analysis_key = string;
  export type code_scanning_alert_environment = string;
  export type code_scanning_analysis_category = string;
  export type code_scanning_alert_location = Partial<{
    path: string;
    start_line: number;
    end_line: number;
    start_column: number;
    end_column: number;
  }>;
  export type code_scanning_alert_classification = ("source" | "generated" | "test" | "library") | null;
  export type code_scanning_alert_instance = Partial<{
    ref: code_scanning_ref;
    analysis_key: code_scanning_analysis_analysis_key;
    environment: code_scanning_alert_environment;
    category: code_scanning_analysis_category;
    state: code_scanning_alert_state;
    commit_sha: string;
    message: Partial<{ text: string }>;
    location: code_scanning_alert_location;
    html_url: string;
    classifications: Array<code_scanning_alert_classification>;
  }>;
  export type code_scanning_organization_alert_items = {
    number: alert_number;
    created_at: alert_created_at;
    updated_at?: alert_updated_at | undefined;
    url: alert_url;
    html_url: alert_html_url;
    instances_url: alert_instances_url;
    state: code_scanning_alert_state;
    fixed_at?: alert_fixed_at | undefined;
    dismissed_by: nullable_simple_user;
    dismissed_at: alert_dismissed_at;
    dismissed_reason: code_scanning_alert_dismissed_reason;
    dismissed_comment?: code_scanning_alert_dismissed_comment | undefined;
    rule: code_scanning_alert_rule_summary;
    tool: code_scanning_analysis_tool;
    most_recent_instance: code_scanning_alert_instance;
    repository: simple_repository;
    dismissal_approved_by?: nullable_simple_user | undefined;
  };
  export type nullable_codespace_machine = {
    name: string;
    display_name: string;
    operating_system: string;
    storage_in_bytes: number;
    memory_in_bytes: number;
    cpus: number;
    prebuild_availability: ("none" | "ready" | "in_progress") | null;
  } | null;
  export type codespace = {
    id: number;
    name: string;
    display_name?: (string | null) | undefined;
    environment_id: string | null;
    owner: simple_user;
    billable_owner: simple_user;
    repository: minimal_repository;
    machine: nullable_codespace_machine;
    devcontainer_path?: (string | null) | undefined;
    prebuild: boolean | null;
    created_at: string;
    updated_at: string;
    last_used_at: string;
    state:
      | "Unknown"
      | "Created"
      | "Queued"
      | "Provisioning"
      | "Available"
      | "Awaiting"
      | "Unavailable"
      | "Deleted"
      | "Moved"
      | "Shutdown"
      | "Archived"
      | "Starting"
      | "ShuttingDown"
      | "Failed"
      | "Exporting"
      | "Updating"
      | "Rebuilding";
    url: string;
    git_status: Partial<{
      ahead: number;
      behind: number;
      has_unpushed_changes: boolean;
      has_uncommitted_changes: boolean;
      ref: string;
    }>;
    location: "EastUs" | "SouthEastAsia" | "WestEurope" | "WestUs2";
    idle_timeout_minutes: number | null;
    web_url: string;
    machines_url: string;
    start_url: string;
    stop_url: string;
    publish_url?: (string | null) | undefined;
    pulls_url: string | null;
    recent_folders: Array<string>;
    runtime_constraints?: Partial<{ allowed_port_privacy_settings: Array<string> | null }> | undefined;
    pending_operation?: (boolean | null) | undefined;
    pending_operation_disabled_reason?: (string | null) | undefined;
    idle_timeout_notice?: (string | null) | undefined;
    retention_period_minutes?: (number | null) | undefined;
    retention_expires_at?: (string | null) | undefined;
    last_known_stop_notice?: (string | null) | undefined;
  };
  export type codespaces_org_secret = {
    name: string;
    created_at: string;
    updated_at: string;
    visibility: "all" | "private" | "selected";
    selected_repositories_url?: string | undefined;
  };
  export type codespaces_public_key = {
    key_id: string;
    key: string;
    id?: number | undefined;
    url?: string | undefined;
    title?: string | undefined;
    created_at?: string | undefined;
  };
  export type copilot_organization_seat_breakdown = Partial<{
    total: number;
    added_this_cycle: number;
    pending_cancellation: number;
    pending_invitation: number;
    active_this_cycle: number;
    inactive_this_cycle: number;
  }>;
  export type copilot_organization_details = {
    seat_breakdown: copilot_organization_seat_breakdown;
    public_code_suggestions: "allow" | "block" | "unconfigured";
    ide_chat?: ("enabled" | "disabled" | "unconfigured") | undefined;
    platform_chat?: ("enabled" | "disabled" | "unconfigured") | undefined;
    cli?: ("enabled" | "disabled" | "unconfigured") | undefined;
    seat_management_setting: "assign_all" | "assign_selected" | "disabled" | "unconfigured";
    plan_type?: ("business" | "enterprise") | undefined;
  } & Record<string, any>;
  export type nullable_organization_simple = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string | null;
  } | null;
  export type enterprise_team = {
    id: number;
    name: string;
    description?: string | undefined;
    slug: string;
    url: string;
    sync_to_organizations?: string | undefined;
    organization_selection_type?: string | undefined;
    group_id?: (string | null) | undefined;
    group_name?: (string | null) | undefined;
    html_url: string;
    members_url: string;
    created_at: string;
    updated_at: string;
  };
  export type copilot_seat_details = {
    assignee?: nullable_simple_user | undefined;
    organization?: nullable_organization_simple | undefined;
    assigning_team?: ((team | enterprise_team) | null) | undefined;
    pending_cancellation_date?: (string | null) | undefined;
    last_activity_at?: (string | null) | undefined;
    last_activity_editor?: (string | null) | undefined;
    last_authenticated_at?: (string | null) | undefined;
    created_at: string;
    updated_at?: string | undefined;
    plan_type?: ("business" | "enterprise" | "unknown") | undefined;
  };
  export type copilot_ide_code_completions = Partial<
    {
      total_engaged_users: number;
      languages: Array<Partial<{ name: string; total_engaged_users: number }>>;
      editors: Array<
        Partial<
          {
            name: string;
            total_engaged_users: number;
            models: Array<
              Partial<{
                name: string;
                is_custom_model: boolean;
                custom_model_training_date: string | null;
                total_engaged_users: number;
                languages: Array<
                  Partial<{
                    name: string;
                    total_engaged_users: number;
                    total_code_suggestions: number;
                    total_code_acceptances: number;
                    total_code_lines_suggested: number;
                    total_code_lines_accepted: number;
                  }>
                >;
              }>
            >;
          } & Record<string, any>
        >
      >;
    } & Record<string, any>
  > | null;
  export type copilot_ide_chat = Partial<
    {
      total_engaged_users: number;
      editors: Array<
        Partial<{
          name: string;
          total_engaged_users: number;
          models: Array<
            Partial<{
              name: string;
              is_custom_model: boolean;
              custom_model_training_date: string | null;
              total_engaged_users: number;
              total_chats: number;
              total_chat_insertion_events: number;
              total_chat_copy_events: number;
            }>
          >;
        }>
      >;
    } & Record<string, any>
  > | null;
  export type copilot_dotcom_chat = Partial<
    {
      total_engaged_users: number;
      models: Array<
        Partial<{
          name: string;
          is_custom_model: boolean;
          custom_model_training_date: string | null;
          total_engaged_users: number;
          total_chats: number;
        }>
      >;
    } & Record<string, any>
  > | null;
  export type copilot_dotcom_pull_requests = Partial<
    {
      total_engaged_users: number;
      repositories: Array<
        Partial<{
          name: string;
          total_engaged_users: number;
          models: Array<
            Partial<{
              name: string;
              is_custom_model: boolean;
              custom_model_training_date: string | null;
              total_pr_summaries_created: number;
              total_engaged_users: number;
            }>
          >;
        }>
      >;
    } & Record<string, any>
  > | null;
  export type copilot_usage_metrics_day = {
    date: string;
    total_active_users?: number | undefined;
    total_engaged_users?: number | undefined;
    copilot_ide_code_completions?: copilot_ide_code_completions | undefined;
    copilot_ide_chat?: copilot_ide_chat | undefined;
    copilot_dotcom_chat?: copilot_dotcom_chat | undefined;
    copilot_dotcom_pull_requests?: copilot_dotcom_pull_requests | undefined;
  } & Record<string, any>;
  export type organization_dependabot_secret = {
    name: string;
    created_at: string;
    updated_at: string;
    visibility: "all" | "private" | "selected";
    selected_repositories_url?: string | undefined;
  };
  export type dependabot_public_key = { key_id: string; key: string };
  export type nullable_minimal_repository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: simple_user;
    private: boolean;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url?: string | undefined;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url?: string | undefined;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url?: string | undefined;
    mirror_url?: (string | null) | undefined;
    hooks_url: string;
    svn_url?: string | undefined;
    homepage?: (string | null) | undefined;
    language?: (string | null) | undefined;
    forks_count?: number | undefined;
    stargazers_count?: number | undefined;
    watchers_count?: number | undefined;
    size?: number | undefined;
    default_branch?: string | undefined;
    open_issues_count?: number | undefined;
    is_template?: boolean | undefined;
    topics?: Array<string> | undefined;
    has_issues?: boolean | undefined;
    has_projects?: boolean | undefined;
    has_wiki?: boolean | undefined;
    has_pages?: boolean | undefined;
    has_downloads?: boolean | undefined;
    has_discussions?: boolean | undefined;
    archived?: boolean | undefined;
    disabled?: boolean | undefined;
    visibility?: string | undefined;
    pushed_at?: (string | null) | undefined;
    created_at?: (string | null) | undefined;
    updated_at?: (string | null) | undefined;
    permissions?:
      | Partial<{ admin: boolean; maintain: boolean; push: boolean; triage: boolean; pull: boolean }>
      | undefined;
    role_name?: string | undefined;
    temp_clone_token?: string | undefined;
    delete_branch_on_merge?: boolean | undefined;
    subscribers_count?: number | undefined;
    network_count?: number | undefined;
    code_of_conduct?: code_of_conduct | undefined;
    license?:
      | (Partial<{ key: string; name: string; spdx_id: string; url: string; node_id: string }> | null)
      | undefined;
    forks?: number | undefined;
    open_issues?: number | undefined;
    watchers?: number | undefined;
    allow_forking?: boolean | undefined;
    web_commit_signoff_required?: boolean | undefined;
    security_and_analysis?: security_and_analysis | undefined;
    custom_properties?: Record<string, unknown> | undefined;
  } | null;
  export type Schema_package = {
    id: number;
    name: string;
    package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
    url: string;
    html_url: string;
    version_count: number;
    visibility: "private" | "public";
    owner?: nullable_simple_user | undefined;
    repository?: nullable_minimal_repository | undefined;
    created_at: string;
    updated_at: string;
  };
  export type organization_invitation = {
    id: number;
    login: string | null;
    email: string | null;
    role: string;
    created_at: string;
    failed_at?: (string | null) | undefined;
    failed_reason?: (string | null) | undefined;
    inviter: simple_user;
    team_count: number;
    node_id: string;
    invitation_teams_url: string;
    invitation_source?: string | undefined;
  };
  export type org_hook = {
    id: number;
    url: string;
    ping_url: string;
    deliveries_url?: string | undefined;
    name: string;
    events: Array<string>;
    active: boolean;
    config: Partial<{ url: string; insecure_ssl: string; content_type: string; secret: string }>;
    updated_at: string;
    created_at: string;
    type: string;
  };
  export type api_insights_route_stats = Array<
    Partial<{
      http_method: string;
      api_route: string;
      total_request_count: number;
      rate_limited_request_count: number;
      last_rate_limited_timestamp: string | null;
      last_request_timestamp: string;
    }>
  >;
  export type api_insights_subject_stats = Array<
    Partial<{
      subject_type: string;
      subject_name: string;
      subject_id: number;
      total_request_count: number;
      rate_limited_request_count: number;
      last_rate_limited_timestamp: string | null;
      last_request_timestamp: string;
    }>
  >;
  export type api_insights_summary_stats = Partial<{ total_request_count: number; rate_limited_request_count: number }>;
  export type api_insights_time_stats = Array<
    Partial<{ timestamp: string; total_request_count: number; rate_limited_request_count: number }>
  >;
  export type api_insights_user_stats = Array<
    Partial<{
      actor_type: string;
      actor_name: string;
      actor_id: number;
      integration_id: number | null;
      oauth_application_id: number | null;
      total_request_count: number;
      rate_limited_request_count: number;
      last_rate_limited_timestamp: string | null;
      last_request_timestamp: string;
    }>
  >;
  export type interaction_group = "existing_users" | "contributors_only" | "collaborators_only";
  export type interaction_limit_response = { limit: interaction_group; origin: string; expires_at: string };
  export type interaction_expiry = "one_day" | "three_days" | "one_week" | "one_month" | "six_months";
  export type interaction_limit = { limit: interaction_group; expiry?: interaction_expiry | undefined };
  export type organization_create_issue_type = {
    name: string;
    is_enabled: boolean;
    description?: (string | null) | undefined;
    color?: (("gray" | "blue" | "green" | "yellow" | "orange" | "red" | "pink" | "purple") | null) | undefined;
  };
  export type organization_update_issue_type = {
    name: string;
    is_enabled: boolean;
    description?: (string | null) | undefined;
    color?: (("gray" | "blue" | "green" | "yellow" | "orange" | "red" | "pink" | "purple") | null) | undefined;
  };
  export type org_membership = {
    url: string;
    state: "active" | "pending";
    role: "admin" | "member" | "billing_manager";
    direct_membership?: boolean | undefined;
    enterprise_teams_providing_indirect_membership?: Array<string> | undefined;
    organization_url: string;
    organization: organization_simple;
    user: nullable_simple_user;
    permissions?: { can_create_repository: boolean } | undefined;
  };
  export type migration = {
    id: number;
    owner: nullable_simple_user;
    guid: string;
    state: string;
    lock_repositories: boolean;
    exclude_metadata: boolean;
    exclude_git_data: boolean;
    exclude_attachments: boolean;
    exclude_releases: boolean;
    exclude_owner_projects: boolean;
    org_metadata_only: boolean;
    repositories: Array<repository>;
    url: string;
    created_at: string;
    updated_at: string;
    node_id: string;
    archive_url?: string | undefined;
    exclude?: Array<string> | undefined;
  };
  export type organization_role = {
    id: number;
    name: string;
    description?: (string | null) | undefined;
    base_role?: (("read" | "triage" | "write" | "maintain" | "admin") | null) | undefined;
    source?: (("Organization" | "Enterprise" | "Predefined") | null) | undefined;
    permissions: Array<string>;
    organization: nullable_simple_user;
    created_at: string;
    updated_at: string;
  };
  export type team_role_assignment = {
    assignment?: ("direct" | "indirect" | "mixed") | undefined;
    id: number;
    node_id: string;
    name: string;
    slug: string;
    description: string | null;
    privacy?: string | undefined;
    notification_setting?: string | undefined;
    permission: string;
    permissions?: { pull: boolean; triage: boolean; push: boolean; maintain: boolean; admin: boolean } | undefined;
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    parent: nullable_team_simple;
  };
  export type team_simple = {
    id: number;
    node_id: string;
    url: string;
    members_url: string;
    name: string;
    description: string | null;
    permission: string;
    privacy?: string | undefined;
    notification_setting?: string | undefined;
    html_url: string;
    repositories_url: string;
    slug: string;
    ldap_dn?: string | undefined;
  };
  export type user_role_assignment = {
    assignment?: ("direct" | "indirect" | "mixed") | undefined;
    inherited_from?: Array<team_simple> | undefined;
    name?: (string | null) | undefined;
    email?: (string | null) | undefined;
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string | null;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    starred_at?: string | undefined;
    user_view_type?: string | undefined;
  };
  export type package_version = {
    id: number;
    name: string;
    url: string;
    package_html_url: string;
    html_url?: string | undefined;
    license?: string | undefined;
    description?: string | undefined;
    created_at: string;
    updated_at: string;
    deleted_at?: string | undefined;
    metadata?:
      | {
          package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
          container?: { tags: Array<string> } | undefined;
          docker?: { tag?: Array<string> | undefined } | undefined;
        }
      | undefined;
  };
  export type organization_programmatic_access_grant_request = {
    id: number;
    reason: string | null;
    owner: simple_user;
    repository_selection: "none" | "all" | "subset";
    repositories_url: string;
    permissions: Partial<{
      organization: Record<string, string>;
      repository: Record<string, string>;
      other: Record<string, string>;
    }>;
    created_at: string;
    token_id: number;
    token_name: string;
    token_expired: boolean;
    token_expires_at: string | null;
    token_last_used_at: string | null;
  };
  export type organization_programmatic_access_grant = {
    id: number;
    owner: simple_user;
    repository_selection: "none" | "all" | "subset";
    repositories_url: string;
    permissions: Partial<{
      organization: Record<string, string>;
      repository: Record<string, string>;
      other: Record<string, string>;
    }>;
    access_granted_at: string;
    token_id: number;
    token_name: string;
    token_expired: boolean;
    token_expires_at: string | null;
    token_last_used_at: string | null;
  };
  export type org_private_registry_configuration = {
    name: string;
    registry_type:
      | "maven_repository"
      | "nuget_feed"
      | "goproxy_server"
      | "npm_registry"
      | "rubygems_server"
      | "cargo_registry"
      | "composer_repository"
      | "docker_registry"
      | "git_source"
      | "helm_registry"
      | "hex_organization"
      | "hex_repository"
      | "pub_repository"
      | "python_index"
      | "terraform_registry";
    username?: (string | null) | undefined;
    visibility: "all" | "private" | "selected";
    created_at: string;
    updated_at: string;
  };
  export type org_private_registry_configuration_with_selected_repositories = {
    name: string;
    registry_type:
      | "maven_repository"
      | "nuget_feed"
      | "goproxy_server"
      | "npm_registry"
      | "rubygems_server"
      | "cargo_registry"
      | "composer_repository"
      | "docker_registry"
      | "git_source"
      | "helm_registry"
      | "hex_organization"
      | "hex_repository"
      | "pub_repository"
      | "python_index"
      | "terraform_registry";
    username?: string | undefined;
    visibility: "all" | "private" | "selected";
    selected_repository_ids?: Array<number> | undefined;
    created_at: string;
    updated_at: string;
  };
  export type project = {
    owner_url: string;
    url: string;
    html_url: string;
    columns_url: string;
    id: number;
    node_id: string;
    name: string;
    body: string | null;
    number: number;
    state: string;
    creator: nullable_simple_user;
    created_at: string;
    updated_at: string;
    organization_permission?: ("read" | "write" | "admin" | "none") | undefined;
    private?: boolean | undefined;
  };
  export type custom_property = {
    property_name: string;
    url?: string | undefined;
    source_type?: ("organization" | "enterprise") | undefined;
    value_type: "string" | "single_select" | "multi_select" | "true_false";
    required?: boolean | undefined;
    default_value?: ((string | Array<string>) | null) | undefined;
    description?: (string | null) | undefined;
    allowed_values?: (Array<string> | null) | undefined;
    values_editable_by?: (("org_actors" | "org_and_repo_actors") | null) | undefined;
  };
  export type custom_property_set_payload = {
    value_type: "string" | "single_select" | "multi_select" | "true_false";
    required?: boolean | undefined;
    default_value?: ((string | Array<string>) | null) | undefined;
    description?: (string | null) | undefined;
    allowed_values?: (Array<string> | null) | undefined;
    values_editable_by?: (("org_actors" | "org_and_repo_actors") | null) | undefined;
  };
  export type custom_property_value = { property_name: string; value: (string | Array<string>) | null };
  export type org_repo_custom_property_values = {
    repository_id: number;
    repository_name: string;
    repository_full_name: string;
    properties: Array<custom_property_value>;
  };
  export type nullable_repository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    license: nullable_license_simple;
    forks: number;
    permissions?:
      | { admin: boolean; pull: boolean; triage?: boolean | undefined; push: boolean; maintain?: boolean | undefined }
      | undefined;
    owner: simple_user;
    private: boolean;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string | null;
    hooks_url: string;
    svn_url: string;
    homepage: string | null;
    language: string | null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template?: boolean | undefined;
    topics?: Array<string> | undefined;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    has_discussions?: boolean | undefined;
    archived: boolean;
    disabled: boolean;
    visibility?: string | undefined;
    pushed_at: string | null;
    created_at: string | null;
    updated_at: string | null;
    allow_rebase_merge?: boolean | undefined;
    temp_clone_token?: string | undefined;
    allow_squash_merge?: boolean | undefined;
    allow_auto_merge?: boolean | undefined;
    delete_branch_on_merge?: boolean | undefined;
    allow_update_branch?: boolean | undefined;
    use_squash_pr_title_as_default?: boolean | undefined;
    squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
    squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
    merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
    merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
    allow_merge_commit?: boolean | undefined;
    allow_forking?: boolean | undefined;
    web_commit_signoff_required?: boolean | undefined;
    open_issues: number;
    watchers: number;
    master_branch?: string | undefined;
    starred_at?: string | undefined;
    anonymous_access_enabled?: boolean | undefined;
    code_search_index_status?: Partial<{ lexical_search_ok: boolean; lexical_commit_sha: string }> | undefined;
  } | null;
  export type code_of_conduct_simple = { url: string; key: string; name: string; html_url: string | null };
  export type full_repository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: simple_user;
    private: boolean;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string | null;
    hooks_url: string;
    svn_url: string;
    homepage: string | null;
    language: string | null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template?: boolean | undefined;
    topics?: Array<string> | undefined;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads?: boolean | undefined;
    has_discussions: boolean;
    archived: boolean;
    disabled: boolean;
    visibility?: string | undefined;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions?:
      | { admin: boolean; maintain?: boolean | undefined; push: boolean; triage?: boolean | undefined; pull: boolean }
      | undefined;
    allow_rebase_merge?: boolean | undefined;
    template_repository?: nullable_repository | undefined;
    temp_clone_token?: (string | null) | undefined;
    allow_squash_merge?: boolean | undefined;
    allow_auto_merge?: boolean | undefined;
    delete_branch_on_merge?: boolean | undefined;
    allow_merge_commit?: boolean | undefined;
    allow_update_branch?: boolean | undefined;
    use_squash_pr_title_as_default?: boolean | undefined;
    squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
    squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
    merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
    merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
    allow_forking?: boolean | undefined;
    web_commit_signoff_required?: boolean | undefined;
    subscribers_count: number;
    network_count: number;
    license: nullable_license_simple;
    organization?: nullable_simple_user | undefined;
    parent?: repository | undefined;
    source?: repository | undefined;
    forks: number;
    master_branch?: string | undefined;
    open_issues: number;
    watchers: number;
    anonymous_access_enabled?: boolean | undefined;
    code_of_conduct?: code_of_conduct_simple | undefined;
    security_and_analysis?: security_and_analysis | undefined;
    custom_properties?: Record<string, unknown> | undefined;
  };
  export type repository_rule_enforcement = "disabled" | "active" | "evaluate";
  export type repository_ruleset_bypass_actor = {
    actor_id?: (number | null) | undefined;
    actor_type: "Integration" | "OrganizationAdmin" | "RepositoryRole" | "Team" | "DeployKey";
    bypass_mode?: ("always" | "pull_request") | undefined;
  };
  export type repository_ruleset_conditions = Partial<{
    ref_name: Partial<{ include: Array<string>; exclude: Array<string> }>;
  }>;
  export type repository_ruleset_conditions_repository_name_target = {
    repository_name: Partial<{ include: Array<string>; exclude: Array<string>; protected: boolean }>;
  };
  export type repository_ruleset_conditions_repository_id_target = {
    repository_id: Partial<{ repository_ids: Array<number> }>;
  };
  export type repository_ruleset_conditions_repository_property_spec = {
    name: string;
    property_values: Array<string>;
    source?: ("custom" | "system") | undefined;
  };
  export type repository_ruleset_conditions_repository_property_target = {
    repository_property: Partial<{
      include: Array<repository_ruleset_conditions_repository_property_spec>;
      exclude: Array<repository_ruleset_conditions_repository_property_spec>;
    }>;
  };
  export type org_ruleset_conditions =
    | (repository_ruleset_conditions & repository_ruleset_conditions_repository_name_target & Record<string, unknown>)
    | (repository_ruleset_conditions & repository_ruleset_conditions_repository_id_target & Record<string, unknown>)
    | (repository_ruleset_conditions &
        repository_ruleset_conditions_repository_property_target &
        Record<string, unknown>);
  export type repository_rule_creation = { type: "creation" };
  export type repository_rule_update = {
    type: "update";
    parameters?: { update_allows_fetch_and_merge: boolean } | undefined;
  };
  export type repository_rule_deletion = { type: "deletion" };
  export type repository_rule_required_linear_history = { type: "required_linear_history" };
  export type repository_rule_merge_queue = {
    type: "merge_queue";
    parameters?:
      | {
          check_response_timeout_minutes: number;
          grouping_strategy: "ALLGREEN" | "HEADGREEN";
          max_entries_to_build: number;
          max_entries_to_merge: number;
          merge_method: "MERGE" | "SQUASH" | "REBASE";
          min_entries_to_merge: number;
          min_entries_to_merge_wait_minutes: number;
        }
      | undefined;
  };
  export type repository_rule_required_deployments = {
    type: "required_deployments";
    parameters?: { required_deployment_environments: Array<string> } | undefined;
  };
  export type repository_rule_required_signatures = { type: "required_signatures" };
  export type repository_rule_params_reviewer = { id: number; type: "Team" };
  export type repository_rule_params_required_reviewer_configuration = {
    file_patterns: Array<string>;
    minimum_approvals: number;
    reviewer: repository_rule_params_reviewer;
  };
  export type repository_rule_pull_request = {
    type: "pull_request";
    parameters?:
      | {
          allowed_merge_methods?: Array<"merge" | "squash" | "rebase"> | undefined;
          automatic_copilot_code_review_enabled?: boolean | undefined;
          dismiss_stale_reviews_on_push: boolean;
          require_code_owner_review: boolean;
          require_last_push_approval: boolean;
          required_approving_review_count: number;
          required_review_thread_resolution: boolean;
        }
      | undefined;
  };
  export type repository_rule_params_status_check_configuration = {
    context: string;
    integration_id?: number | undefined;
  };
  export type repository_rule_required_status_checks = {
    type: "required_status_checks";
    parameters?:
      | {
          do_not_enforce_on_create?: boolean | undefined;
          required_status_checks: Array<repository_rule_params_status_check_configuration>;
          strict_required_status_checks_policy: boolean;
        }
      | undefined;
  };
  export type repository_rule_non_fast_forward = { type: "non_fast_forward" };
  export type repository_rule_commit_message_pattern = {
    type: "commit_message_pattern";
    parameters?:
      | {
          name?: string | undefined;
          negate?: boolean | undefined;
          operator: "starts_with" | "ends_with" | "contains" | "regex";
          pattern: string;
        }
      | undefined;
  };
  export type repository_rule_commit_author_email_pattern = {
    type: "commit_author_email_pattern";
    parameters?:
      | {
          name?: string | undefined;
          negate?: boolean | undefined;
          operator: "starts_with" | "ends_with" | "contains" | "regex";
          pattern: string;
        }
      | undefined;
  };
  export type repository_rule_committer_email_pattern = {
    type: "committer_email_pattern";
    parameters?:
      | {
          name?: string | undefined;
          negate?: boolean | undefined;
          operator: "starts_with" | "ends_with" | "contains" | "regex";
          pattern: string;
        }
      | undefined;
  };
  export type repository_rule_branch_name_pattern = {
    type: "branch_name_pattern";
    parameters?:
      | {
          name?: string | undefined;
          negate?: boolean | undefined;
          operator: "starts_with" | "ends_with" | "contains" | "regex";
          pattern: string;
        }
      | undefined;
  };
  export type repository_rule_tag_name_pattern = {
    type: "tag_name_pattern";
    parameters?:
      | {
          name?: string | undefined;
          negate?: boolean | undefined;
          operator: "starts_with" | "ends_with" | "contains" | "regex";
          pattern: string;
        }
      | undefined;
  };
  export type repository_rule_file_path_restriction = {
    type: "file_path_restriction";
    parameters?: { restricted_file_paths: Array<string> } | undefined;
  };
  export type repository_rule_max_file_path_length = {
    type: "max_file_path_length";
    parameters?: { max_file_path_length: number } | undefined;
  };
  export type repository_rule_file_extension_restriction = {
    type: "file_extension_restriction";
    parameters?: { restricted_file_extensions: Array<string> } | undefined;
  };
  export type repository_rule_max_file_size = {
    type: "max_file_size";
    parameters?: { max_file_size: number } | undefined;
  };
  export type repository_rule_params_restricted_commits = { oid: string; reason?: string | undefined };
  export type repository_rule_params_workflow_file_reference = {
    path: string;
    ref?: string | undefined;
    repository_id: number;
    sha?: string | undefined;
  };
  export type repository_rule_workflows = {
    type: "workflows";
    parameters?:
      | {
          do_not_enforce_on_create?: boolean | undefined;
          workflows: Array<repository_rule_params_workflow_file_reference>;
        }
      | undefined;
  };
  export type repository_rule_params_code_scanning_tool = {
    alerts_threshold: "none" | "errors" | "errors_and_warnings" | "all";
    security_alerts_threshold: "none" | "critical" | "high_or_higher" | "medium_or_higher" | "all";
    tool: string;
  };
  export type repository_rule_code_scanning = {
    type: "code_scanning";
    parameters?: { code_scanning_tools: Array<repository_rule_params_code_scanning_tool> } | undefined;
  };
  export type repository_rule =
    | repository_rule_creation
    | repository_rule_update
    | repository_rule_deletion
    | repository_rule_required_linear_history
    | repository_rule_merge_queue
    | repository_rule_required_deployments
    | repository_rule_required_signatures
    | repository_rule_pull_request
    | repository_rule_required_status_checks
    | repository_rule_non_fast_forward
    | repository_rule_commit_message_pattern
    | repository_rule_commit_author_email_pattern
    | repository_rule_committer_email_pattern
    | repository_rule_branch_name_pattern
    | repository_rule_tag_name_pattern
    | repository_rule_file_path_restriction
    | repository_rule_max_file_path_length
    | repository_rule_file_extension_restriction
    | repository_rule_max_file_size
    | repository_rule_workflows
    | repository_rule_code_scanning;
  export type repository_ruleset = {
    id: number;
    name: string;
    target?: ("branch" | "tag" | "push" | "repository") | undefined;
    source_type?: ("Repository" | "Organization" | "Enterprise") | undefined;
    source: string;
    enforcement: repository_rule_enforcement;
    bypass_actors?: Array<repository_ruleset_bypass_actor> | undefined;
    current_user_can_bypass?: ("always" | "pull_requests_only" | "never") | undefined;
    node_id?: string | undefined;
    _links?: Partial<{ self: Partial<{ href: string }>; html: Partial<{ href: string }> | null }> | undefined;
    conditions?: ((repository_ruleset_conditions | org_ruleset_conditions) | null) | undefined;
    rules?: Array<repository_rule> | undefined;
    created_at?: string | undefined;
    updated_at?: string | undefined;
  };
  export type org_rules =
    | repository_rule_creation
    | repository_rule_update
    | repository_rule_deletion
    | repository_rule_required_linear_history
    | repository_rule_required_deployments
    | repository_rule_required_signatures
    | repository_rule_pull_request
    | repository_rule_required_status_checks
    | repository_rule_non_fast_forward
    | repository_rule_commit_message_pattern
    | repository_rule_commit_author_email_pattern
    | repository_rule_committer_email_pattern
    | repository_rule_branch_name_pattern
    | repository_rule_tag_name_pattern
    | repository_rule_file_path_restriction
    | repository_rule_max_file_path_length
    | repository_rule_file_extension_restriction
    | repository_rule_max_file_size
    | repository_rule_workflows
    | repository_rule_code_scanning;
  export type rule_suites = Array<
    Partial<{
      id: number;
      actor_id: number;
      actor_name: string;
      before_sha: string;
      after_sha: string;
      ref: string;
      repository_id: number;
      repository_name: string;
      pushed_at: string;
      result: "pass" | "fail" | "bypass";
      evaluation_result: "pass" | "fail" | "bypass";
    }>
  >;
  export type rule_suite = Partial<{
    id: number;
    actor_id: number | null;
    actor_name: string | null;
    before_sha: string;
    after_sha: string;
    ref: string;
    repository_id: number;
    repository_name: string;
    pushed_at: string;
    result: "pass" | "fail" | "bypass";
    evaluation_result: ("pass" | "fail" | "bypass") | null;
    rule_evaluations: Array<
      Partial<{
        rule_source: Partial<{ type: string; id: number | null; name: string | null }>;
        enforcement: "active" | "evaluate" | "deleted ruleset";
        result: "pass" | "fail";
        rule_type: string;
        details: string | null;
      }>
    >;
  }>;
  export type ruleset_version = {
    version_id: number;
    actor: Partial<{ id: number; type: string }>;
    updated_at: string;
  };
  export type ruleset_version_with_state = ruleset_version & { state: Record<string, unknown> };
  export type secret_scanning_row_version = string | null;
  export type secret_scanning_pattern_override = Partial<{
    token_type: string;
    custom_pattern_version: string | null;
    slug: string;
    display_name: string;
    alert_total: number;
    alert_total_percentage: number;
    false_positives: number;
    false_positive_rate: number;
    bypass_rate: number;
    default_setting: "disabled" | "enabled";
    enterprise_setting: ("not-set" | "disabled" | "enabled") | null;
    setting: "not-set" | "disabled" | "enabled";
  }>;
  export type secret_scanning_pattern_configuration = Partial<{
    pattern_config_version: secret_scanning_row_version;
    provider_pattern_overrides: Array<secret_scanning_pattern_override>;
    custom_pattern_overrides: Array<secret_scanning_pattern_override>;
  }>;
  export type repository_advisory_vulnerability = {
    package: { ecosystem: security_advisory_ecosystems; name: string | null } | null;
    vulnerable_version_range: string | null;
    patched_versions: string | null;
    vulnerable_functions: Array<string> | null;
  };
  export type repository_advisory_credit = {
    user: simple_user;
    type: security_advisory_credit_types;
    state: "accepted" | "declined" | "pending";
  };
  export type repository_advisory = {
    ghsa_id: string;
    cve_id: string | null;
    url: string;
    html_url: string;
    summary: string;
    description: string | null;
    severity: ("critical" | "high" | "medium" | "low") | null;
    author: (simple_user & (unknown | null)) | null;
    publisher: (simple_user & (unknown | null)) | null;
    identifiers: Array<{ type: "CVE" | "GHSA"; value: string }>;
    state: "published" | "closed" | "withdrawn" | "draft" | "triage";
    created_at: string | null;
    updated_at: string | null;
    published_at: string | null;
    closed_at: string | null;
    withdrawn_at: string | null;
    submission: { accepted: boolean } | null;
    vulnerabilities: Array<repository_advisory_vulnerability> | null;
    cvss: { vector_string: string | null; score: number | null } | null;
    cvss_severities?: cvss_severities | undefined;
    cwes: Array<{ cwe_id: string; name: string }> | null;
    cwe_ids: Array<string> | null;
    credits: Array<Partial<{ login: string; type: security_advisory_credit_types }>> | null;
    credits_detailed: Array<repository_advisory_credit> | null;
    collaborating_users: Array<simple_user> | null;
    collaborating_teams: Array<team> | null;
    private_fork: (simple_repository & (unknown | null)) | null;
  };
  export type actions_billing_usage = {
    total_minutes_used: number;
    total_paid_minutes_used: number;
    included_minutes: number;
    minutes_used_breakdown: Partial<{
      UBUNTU: number;
      MACOS: number;
      WINDOWS: number;
      ubuntu_4_core: number;
      ubuntu_8_core: number;
      ubuntu_16_core: number;
      ubuntu_32_core: number;
      ubuntu_64_core: number;
      windows_4_core: number;
      windows_8_core: number;
      windows_16_core: number;
      windows_32_core: number;
      windows_64_core: number;
      macos_12_core: number;
      total: number;
    }>;
  };
  export type packages_billing_usage = {
    total_gigabytes_bandwidth_used: number;
    total_paid_gigabytes_bandwidth_used: number;
    included_gigabytes_bandwidth: number;
  };
  export type combined_billing_usage = {
    days_left_in_billing_cycle: number;
    estimated_paid_storage_for_month: number;
    estimated_storage_for_month: number;
  };
  export type network_configuration = {
    id: string;
    name: string;
    compute_service?: ("none" | "actions" | "codespaces") | undefined;
    network_settings_ids?: Array<string> | undefined;
    created_on: string | null;
  };
  export type network_settings = {
    id: string;
    network_configuration_id?: string | undefined;
    name: string;
    subnet_id: string;
    region: string;
  };
  export type team_organization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string | null;
    name?: string | undefined;
    company?: string | undefined;
    blog?: string | undefined;
    location?: string | undefined;
    email?: string | undefined;
    twitter_username?: (string | null) | undefined;
    is_verified?: boolean | undefined;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    type: string;
    total_private_repos?: number | undefined;
    owned_private_repos?: number | undefined;
    private_gists?: (number | null) | undefined;
    disk_usage?: (number | null) | undefined;
    collaborators?: (number | null) | undefined;
    billing_email?: (string | null) | undefined;
    plan?:
      | {
          name: string;
          space: number;
          private_repos: number;
          filled_seats?: number | undefined;
          seats?: number | undefined;
        }
      | undefined;
    default_repository_permission?: (string | null) | undefined;
    members_can_create_repositories?: (boolean | null) | undefined;
    two_factor_requirement_enabled?: (boolean | null) | undefined;
    members_allowed_repository_creation_type?: string | undefined;
    members_can_create_public_repositories?: boolean | undefined;
    members_can_create_private_repositories?: boolean | undefined;
    members_can_create_internal_repositories?: boolean | undefined;
    members_can_create_pages?: boolean | undefined;
    members_can_create_public_pages?: boolean | undefined;
    members_can_create_private_pages?: boolean | undefined;
    members_can_fork_private_repositories?: (boolean | null) | undefined;
    web_commit_signoff_required?: boolean | undefined;
    updated_at: string;
    archived_at: string | null;
  };
  export type team_full = {
    id: number;
    node_id: string;
    url: string;
    html_url: string;
    name: string;
    slug: string;
    description: string | null;
    privacy?: ("closed" | "secret") | undefined;
    notification_setting?: ("notifications_enabled" | "notifications_disabled") | undefined;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent?: nullable_team_simple | undefined;
    members_count: number;
    repos_count: number;
    created_at: string;
    updated_at: string;
    organization: team_organization;
    ldap_dn?: string | undefined;
  };
  export type team_discussion = {
    author: nullable_simple_user;
    body: string;
    body_html: string;
    body_version: string;
    comments_count: number;
    comments_url: string;
    created_at: string;
    last_edited_at: string | null;
    html_url: string;
    node_id: string;
    number: number;
    pinned: boolean;
    private: boolean;
    team_url: string;
    title: string;
    updated_at: string;
    url: string;
    reactions?: reaction_rollup | undefined;
  };
  export type team_discussion_comment = {
    author: nullable_simple_user;
    body: string;
    body_html: string;
    body_version: string;
    created_at: string;
    last_edited_at: string | null;
    discussion_url: string;
    html_url: string;
    node_id: string;
    number: number;
    updated_at: string;
    url: string;
    reactions?: reaction_rollup | undefined;
  };
  export type reaction = {
    id: number;
    node_id: string;
    user: nullable_simple_user;
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
    created_at: string;
  };
  export type team_membership = { url: string; role: "member" | "maintainer"; state: "active" | "pending" };
  export type team_project = {
    owner_url: string;
    url: string;
    html_url: string;
    columns_url: string;
    id: number;
    node_id: string;
    name: string;
    body: string | null;
    number: number;
    state: string;
    creator: simple_user;
    created_at: string;
    updated_at: string;
    organization_permission?: string | undefined;
    private?: boolean | undefined;
    permissions: { read: boolean; write: boolean; admin: boolean };
  };
  export type team_repository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    license: nullable_license_simple;
    forks: number;
    permissions?:
      | { admin: boolean; pull: boolean; triage?: boolean | undefined; push: boolean; maintain?: boolean | undefined }
      | undefined;
    role_name?: string | undefined;
    owner: nullable_simple_user;
    private: boolean;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string | null;
    hooks_url: string;
    svn_url: string;
    homepage: string | null;
    language: string | null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template?: boolean | undefined;
    topics?: Array<string> | undefined;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility?: string | undefined;
    pushed_at: string | null;
    created_at: string | null;
    updated_at: string | null;
    allow_rebase_merge?: boolean | undefined;
    temp_clone_token?: string | undefined;
    allow_squash_merge?: boolean | undefined;
    allow_auto_merge?: boolean | undefined;
    delete_branch_on_merge?: boolean | undefined;
    allow_merge_commit?: boolean | undefined;
    allow_forking?: boolean | undefined;
    web_commit_signoff_required?: boolean | undefined;
    subscribers_count?: number | undefined;
    network_count?: number | undefined;
    open_issues: number;
    watchers: number;
    master_branch?: string | undefined;
  };
  export type project_card = {
    url: string;
    id: number;
    node_id: string;
    note: string | null;
    creator: nullable_simple_user;
    created_at: string;
    updated_at: string;
    archived?: boolean | undefined;
    column_name?: string | undefined;
    project_id?: string | undefined;
    column_url: string;
    content_url?: string | undefined;
    project_url: string;
  };
  export type project_column = {
    url: string;
    project_url: string;
    cards_url: string;
    id: number;
    node_id: string;
    name: string;
    created_at: string;
    updated_at: string;
  };
  export type project_collaborator_permission = { permission: string; user: nullable_simple_user };
  export type rate_limit = { limit: number; remaining: number; reset: number; used: number };
  export type rate_limit_overview = {
    resources: {
      core: rate_limit;
      graphql?: rate_limit | undefined;
      search: rate_limit;
      code_search?: rate_limit | undefined;
      source_import?: rate_limit | undefined;
      integration_manifest?: rate_limit | undefined;
      code_scanning_upload?: rate_limit | undefined;
      actions_runner_registration?: rate_limit | undefined;
      scim?: rate_limit | undefined;
      dependency_snapshots?: rate_limit | undefined;
      dependency_sbom?: rate_limit | undefined;
      code_scanning_autofix?: rate_limit | undefined;
    };
    rate: rate_limit;
  };
  export type artifact = {
    id: number;
    node_id: string;
    name: string;
    size_in_bytes: number;
    url: string;
    archive_download_url: string;
    expired: boolean;
    created_at: string | null;
    expires_at: string | null;
    updated_at: string | null;
    digest?: (string | null) | undefined;
    workflow_run?:
      | (Partial<{
          id: number;
          repository_id: number;
          head_repository_id: number;
          head_branch: string;
          head_sha: string;
        }> | null)
      | undefined;
  };
  export type actions_cache_list = {
    total_count: number;
    actions_caches: Array<
      Partial<{
        id: number;
        ref: string;
        key: string;
        version: string;
        last_accessed_at: string;
        created_at: string;
        size_in_bytes: number;
      }>
    >;
  };
  export type job = {
    id: number;
    run_id: number;
    run_url: string;
    run_attempt?: number | undefined;
    node_id: string;
    head_sha: string;
    url: string;
    html_url: string | null;
    status: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending";
    conclusion: ("success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required") | null;
    created_at: string;
    started_at: string;
    completed_at: string | null;
    name: string;
    steps?:
      | Array<{
          status: "queued" | "in_progress" | "completed";
          conclusion: string | null;
          name: string;
          number: number;
          started_at?: (string | null) | undefined;
          completed_at?: (string | null) | undefined;
        }>
      | undefined;
    check_run_url: string;
    labels: Array<string>;
    runner_id: number | null;
    runner_name: string | null;
    runner_group_id: number | null;
    runner_group_name: string | null;
    workflow_name: string | null;
    head_branch: string | null;
  };
  export type oidc_custom_sub_repo = { use_default: boolean; include_claim_keys?: Array<string> | undefined };
  export type actions_secret = { name: string; created_at: string; updated_at: string };
  export type actions_variable = { name: string; value: string; created_at: string; updated_at: string };
  export type actions_enabled = boolean;
  export type actions_repository_permissions = {
    enabled: actions_enabled;
    allowed_actions?: allowed_actions | undefined;
    selected_actions_url?: selected_actions_url | undefined;
    sha_pinning_required?: sha_pinning_required | undefined;
  };
  export type actions_workflow_access_to_repository = { access_level: "none" | "user" | "organization" };
  export type referenced_workflow = { path: string; sha: string; ref?: string | undefined };
  export type pull_request_minimal = {
    id: number;
    number: number;
    url: string;
    head: { ref: string; sha: string; repo: { id: number; url: string; name: string } };
    base: { ref: string; sha: string; repo: { id: number; url: string; name: string } };
  };
  export type nullable_simple_commit = {
    id: string;
    tree_id: string;
    message: string;
    timestamp: string;
    author: { name: string; email: string } | null;
    committer: { name: string; email: string } | null;
  } | null;
  export type workflow_run = {
    id: number;
    name?: (string | null) | undefined;
    node_id: string;
    check_suite_id?: number | undefined;
    check_suite_node_id?: string | undefined;
    head_branch: string | null;
    head_sha: string;
    path: string;
    run_number: number;
    run_attempt?: number | undefined;
    referenced_workflows?: (Array<referenced_workflow> | null) | undefined;
    event: string;
    status: string | null;
    conclusion: string | null;
    workflow_id: number;
    url: string;
    html_url: string;
    pull_requests: Array<pull_request_minimal> | null;
    created_at: string;
    updated_at: string;
    actor?: simple_user | undefined;
    triggering_actor?: simple_user | undefined;
    run_started_at?: string | undefined;
    jobs_url: string;
    logs_url: string;
    check_suite_url: string;
    artifacts_url: string;
    cancel_url: string;
    rerun_url: string;
    previous_attempt_url?: (string | null) | undefined;
    workflow_url: string;
    head_commit: nullable_simple_commit;
    repository: minimal_repository;
    head_repository: minimal_repository;
    head_repository_id?: number | undefined;
    display_title: string;
  };
  export type environment_approvals = {
    environments: Array<
      Partial<{
        id: number;
        node_id: string;
        name: string;
        url: string;
        html_url: string;
        created_at: string;
        updated_at: string;
      }>
    >;
    state: "approved" | "rejected" | "pending";
    user: simple_user;
    comment: string;
  };
  export type review_custom_gates_comment_required = { environment_name: string; comment: string };
  export type review_custom_gates_state_required = {
    environment_name: string;
    state: "approved" | "rejected";
    comment?: string | undefined;
  };
  export type deployment_reviewer_type = "User" | "Team";
  export type pending_deployment = {
    environment: Partial<{ id: number; node_id: string; name: string; url: string; html_url: string }>;
    wait_timer: number;
    wait_timer_started_at: string | null;
    current_user_can_approve: boolean;
    reviewers: Array<Partial<{ type: deployment_reviewer_type; reviewer: simple_user | team }>>;
  };
  export type deployment = {
    url: string;
    id: number;
    node_id: string;
    sha: string;
    ref: string;
    task: string;
    payload: Record<string, unknown> | string;
    original_environment?: string | undefined;
    environment: string;
    description: string | null;
    creator: nullable_simple_user;
    created_at: string;
    updated_at: string;
    statuses_url: string;
    repository_url: string;
    transient_environment?: boolean | undefined;
    production_environment?: boolean | undefined;
    performed_via_github_app?: nullable_integration | undefined;
  };
  export type workflow_run_usage = {
    billable: Partial<{
      UBUNTU: { total_ms: number; jobs: number; job_runs?: Array<{ job_id: number; duration_ms: number }> | undefined };
      MACOS: { total_ms: number; jobs: number; job_runs?: Array<{ job_id: number; duration_ms: number }> | undefined };
      WINDOWS: {
        total_ms: number;
        jobs: number;
        job_runs?: Array<{ job_id: number; duration_ms: number }> | undefined;
      };
    }>;
    run_duration_ms?: number | undefined;
  };
  export type workflow = {
    id: number;
    node_id: string;
    name: string;
    path: string;
    state: "active" | "deleted" | "disabled_fork" | "disabled_inactivity" | "disabled_manually";
    created_at: string;
    updated_at: string;
    url: string;
    html_url: string;
    badge_url: string;
    deleted_at?: string | undefined;
  };
  export type workflow_usage = {
    billable: Partial<{
      UBUNTU: Partial<{ total_ms: number }>;
      MACOS: Partial<{ total_ms: number }>;
      WINDOWS: Partial<{ total_ms: number }>;
    }>;
  };
  export type activity = {
    id: number;
    node_id: string;
    before: string;
    after: string;
    ref: string;
    timestamp: string;
    activity_type: "push" | "force_push" | "branch_deletion" | "branch_creation" | "pr_merge" | "merge_queue_merge";
    actor: nullable_simple_user;
  };
  export type autolink = {
    id: number;
    key_prefix: string;
    url_template: string;
    is_alphanumeric: boolean;
    updated_at?: (string | null) | undefined;
  };
  export type check_automated_security_fixes = { enabled: boolean; paused: boolean };
  export type protected_branch_required_status_check = {
    url?: string | undefined;
    enforcement_level?: string | undefined;
    contexts: Array<string>;
    checks: Array<{ context: string; app_id: number | null }>;
    contexts_url?: string | undefined;
    strict?: boolean | undefined;
  };
  export type protected_branch_admin_enforced = { url: string; enabled: boolean };
  export type protected_branch_pull_request_review = {
    url?: string | undefined;
    dismissal_restrictions?:
      | Partial<{
          users: Array<simple_user>;
          teams: Array<team>;
          apps: Array<integration>;
          url: string;
          users_url: string;
          teams_url: string;
        }>
      | undefined;
    bypass_pull_request_allowances?:
      | Partial<{ users: Array<simple_user>; teams: Array<team>; apps: Array<integration> }>
      | undefined;
    dismiss_stale_reviews: boolean;
    require_code_owner_reviews: boolean;
    required_approving_review_count?: number | undefined;
    require_last_push_approval?: boolean | undefined;
  };
  export type branch_restriction_policy = {
    url: string;
    users_url: string;
    teams_url: string;
    apps_url: string;
    users: Array<
      Partial<{
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
        user_view_type: string;
      }>
    >;
    teams: Array<
      Partial<{
        id: number;
        node_id: string;
        url: string;
        html_url: string;
        name: string;
        slug: string;
        description: string | null;
        privacy: string;
        notification_setting: string;
        permission: string;
        members_url: string;
        repositories_url: string;
        parent: string | null;
      }>
    >;
    apps: Array<
      Partial<{
        id: number;
        slug: string;
        node_id: string;
        owner: Partial<{
          login: string;
          id: number;
          node_id: string;
          url: string;
          repos_url: string;
          events_url: string;
          hooks_url: string;
          issues_url: string;
          members_url: string;
          public_members_url: string;
          avatar_url: string;
          description: string;
          gravatar_id: string;
          html_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          starred_url: string;
          subscriptions_url: string;
          organizations_url: string;
          received_events_url: string;
          type: string;
          site_admin: boolean;
          user_view_type: string;
        }>;
        name: string;
        client_id: string;
        description: string;
        external_url: string;
        html_url: string;
        created_at: string;
        updated_at: string;
        permissions: Partial<{ metadata: string; contents: string; issues: string; single_file: string }>;
        events: Array<string>;
      }>
    >;
  };
  export type branch_protection = Partial<{
    url: string;
    enabled: boolean;
    required_status_checks: protected_branch_required_status_check;
    enforce_admins: protected_branch_admin_enforced;
    required_pull_request_reviews: protected_branch_pull_request_review;
    restrictions: branch_restriction_policy;
    required_linear_history: Partial<{ enabled: boolean }>;
    allow_force_pushes: Partial<{ enabled: boolean }>;
    allow_deletions: Partial<{ enabled: boolean }>;
    block_creations: Partial<{ enabled: boolean }>;
    required_conversation_resolution: Partial<{ enabled: boolean }>;
    name: string;
    protection_url: string;
    required_signatures: { url: string; enabled: boolean };
    lock_branch: Partial<{ enabled: boolean }>;
    allow_fork_syncing: Partial<{ enabled: boolean }>;
  }>;
  export type short_branch = {
    name: string;
    commit: { sha: string; url: string };
    protected: boolean;
    protection?: branch_protection | undefined;
    protection_url?: string | undefined;
  };
  export type nullable_git_user = Partial<{ name: string; email: string; date: string }> | null;
  export type verification = {
    verified: boolean;
    reason: string;
    payload: string | null;
    signature: string | null;
    verified_at: string | null;
  };
  export type diff_entry = {
    sha: string;
    filename: string;
    status: "added" | "removed" | "modified" | "renamed" | "copied" | "changed" | "unchanged";
    additions: number;
    deletions: number;
    changes: number;
    blob_url: string;
    raw_url: string;
    contents_url: string;
    patch?: string | undefined;
    previous_filename?: string | undefined;
  };
  export type commit = {
    url: string;
    sha: string;
    node_id: string;
    html_url: string;
    comments_url: string;
    commit: {
      url: string;
      author: nullable_git_user;
      committer: nullable_git_user;
      message: string;
      comment_count: number;
      tree: { sha: string; url: string };
      verification?: verification | undefined;
    };
    author: (simple_user | empty_object) | null;
    committer: (simple_user | empty_object) | null;
    parents: Array<{ sha: string; url: string; html_url?: string | undefined }>;
    stats?: Partial<{ additions: number; deletions: number; total: number }> | undefined;
    files?: Array<diff_entry> | undefined;
  };
  export type branch_with_protection = {
    name: string;
    commit: commit;
    _links: { html: string; self: string };
    protected: boolean;
    protection: branch_protection;
    protection_url: string;
    pattern?: string | undefined;
    required_approving_review_count?: number | undefined;
  };
  export type status_check_policy = {
    url: string;
    strict: boolean;
    contexts: Array<string>;
    checks: Array<{ context: string; app_id: number | null }>;
    contexts_url: string;
  };
  export type protected_branch = {
    url: string;
    required_status_checks?: status_check_policy | undefined;
    required_pull_request_reviews?:
      | {
          url: string;
          dismiss_stale_reviews?: boolean | undefined;
          require_code_owner_reviews?: boolean | undefined;
          required_approving_review_count?: number | undefined;
          require_last_push_approval?: boolean | undefined;
          dismissal_restrictions?:
            | {
                url: string;
                users_url: string;
                teams_url: string;
                users: Array<simple_user>;
                teams: Array<team>;
                apps?: Array<integration> | undefined;
              }
            | undefined;
          bypass_pull_request_allowances?:
            | { users: Array<simple_user>; teams: Array<team>; apps?: Array<integration> | undefined }
            | undefined;
        }
      | undefined;
    required_signatures?: { url: string; enabled: boolean } | undefined;
    enforce_admins?: { url: string; enabled: boolean } | undefined;
    required_linear_history?: { enabled: boolean } | undefined;
    allow_force_pushes?: { enabled: boolean } | undefined;
    allow_deletions?: { enabled: boolean } | undefined;
    restrictions?: branch_restriction_policy | undefined;
    required_conversation_resolution?: Partial<{ enabled: boolean }> | undefined;
    block_creations?: { enabled: boolean } | undefined;
    lock_branch?: Partial<{ enabled: boolean }> | undefined;
    allow_fork_syncing?: Partial<{ enabled: boolean }> | undefined;
  };
  export type deployment_simple = {
    url: string;
    id: number;
    node_id: string;
    task: string;
    original_environment?: string | undefined;
    environment: string;
    description: string | null;
    created_at: string;
    updated_at: string;
    statuses_url: string;
    repository_url: string;
    transient_environment?: boolean | undefined;
    production_environment?: boolean | undefined;
    performed_via_github_app?: nullable_integration | undefined;
  };
  export type check_run = {
    id: number;
    head_sha: string;
    node_id: string;
    external_id: string | null;
    url: string;
    html_url: string | null;
    details_url: string | null;
    status: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending";
    conclusion: ("success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required") | null;
    started_at: string | null;
    completed_at: string | null;
    output: {
      title: string | null;
      summary: string | null;
      text: string | null;
      annotations_count: number;
      annotations_url: string;
    };
    name: string;
    check_suite: { id: number } | null;
    app: nullable_integration;
    pull_requests: Array<pull_request_minimal>;
    deployment?: deployment_simple | undefined;
  };
  export type check_annotation = {
    path: string;
    start_line: number;
    end_line: number;
    start_column: number | null;
    end_column: number | null;
    annotation_level: string | null;
    title: string | null;
    message: string | null;
    raw_details: string | null;
    blob_href: string;
  };
  export type simple_commit = {
    id: string;
    tree_id: string;
    message: string;
    timestamp: string;
    author: { name: string; email: string } | null;
    committer: { name: string; email: string } | null;
  };
  export type check_suite = {
    id: number;
    node_id: string;
    head_branch: string | null;
    head_sha: string;
    status: ("queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending") | null;
    conclusion:
      | (
          | "success"
          | "failure"
          | "neutral"
          | "cancelled"
          | "skipped"
          | "timed_out"
          | "action_required"
          | "startup_failure"
          | "stale"
          | "null"
        )
      | null;
    url: string | null;
    before: string | null;
    after: string | null;
    pull_requests: Array<pull_request_minimal> | null;
    app: nullable_integration;
    repository: minimal_repository;
    created_at: string | null;
    updated_at: string | null;
    head_commit: simple_commit;
    latest_check_runs_count: number;
    check_runs_url: string;
    rerequestable?: boolean | undefined;
    runs_rerequestable?: boolean | undefined;
  };
  export type check_suite_preference = {
    preferences: Partial<{ auto_trigger_checks: Array<{ app_id: number; setting: boolean }> }>;
    repository: minimal_repository;
  };
  export type code_scanning_alert_items = {
    number: alert_number;
    created_at: alert_created_at;
    updated_at?: alert_updated_at | undefined;
    url: alert_url;
    html_url: alert_html_url;
    instances_url: alert_instances_url;
    state: code_scanning_alert_state;
    fixed_at?: alert_fixed_at | undefined;
    dismissed_by: nullable_simple_user;
    dismissed_at: alert_dismissed_at;
    dismissed_reason: code_scanning_alert_dismissed_reason;
    dismissed_comment?: code_scanning_alert_dismissed_comment | undefined;
    rule: code_scanning_alert_rule_summary;
    tool: code_scanning_analysis_tool;
    most_recent_instance: code_scanning_alert_instance;
    dismissal_approved_by?: nullable_simple_user | undefined;
  };
  export type code_scanning_alert_rule = Partial<{
    id: string | null;
    name: string;
    severity: ("none" | "note" | "warning" | "error") | null;
    security_severity_level: ("low" | "medium" | "high" | "critical") | null;
    description: string;
    full_description: string;
    tags: Array<string> | null;
    help: string | null;
    help_uri: string | null;
  }>;
  export type code_scanning_alert = {
    number: alert_number;
    created_at: alert_created_at;
    updated_at?: alert_updated_at | undefined;
    url: alert_url;
    html_url: alert_html_url;
    instances_url: alert_instances_url;
    state: code_scanning_alert_state;
    fixed_at?: alert_fixed_at | undefined;
    dismissed_by: nullable_simple_user;
    dismissed_at: alert_dismissed_at;
    dismissed_reason: code_scanning_alert_dismissed_reason;
    dismissed_comment?: code_scanning_alert_dismissed_comment | undefined;
    rule: code_scanning_alert_rule;
    tool: code_scanning_analysis_tool;
    most_recent_instance: code_scanning_alert_instance;
    dismissal_approved_by?: nullable_simple_user | undefined;
  };
  export type code_scanning_alert_set_state = "open" | "dismissed";
  export type code_scanning_alert_create_request = boolean;
  export type code_scanning_autofix_status = "pending" | "error" | "success" | "outdated";
  export type code_scanning_autofix_description = string | null;
  export type code_scanning_autofix_started_at = string;
  export type code_scanning_autofix = {
    status: code_scanning_autofix_status;
    description: code_scanning_autofix_description;
    started_at: code_scanning_autofix_started_at;
  };
  export type code_scanning_autofix_commits = Partial<{ target_ref: string; message: string }> | null;
  export type code_scanning_autofix_commits_response = Partial<{ target_ref: string; sha: string }>;
  export type code_scanning_analysis_sarif_id = string;
  export type code_scanning_analysis_commit_sha = string;
  export type code_scanning_analysis_environment = string;
  export type code_scanning_analysis_created_at = string;
  export type code_scanning_analysis_url = string;
  export type code_scanning_analysis = {
    ref: code_scanning_ref;
    commit_sha: code_scanning_analysis_commit_sha;
    analysis_key: code_scanning_analysis_analysis_key;
    environment: code_scanning_analysis_environment;
    category?: code_scanning_analysis_category | undefined;
    error: string;
    created_at: code_scanning_analysis_created_at;
    results_count: number;
    rules_count: number;
    id: number;
    url: code_scanning_analysis_url;
    sarif_id: code_scanning_analysis_sarif_id;
    tool: code_scanning_analysis_tool;
    deletable: boolean;
    warning: string;
  };
  export type code_scanning_analysis_deletion = { next_analysis_url: string | null; confirm_delete_url: string | null };
  export type code_scanning_codeql_database = {
    id: number;
    name: string;
    language: string;
    uploader: simple_user;
    content_type: string;
    size: number;
    created_at: string;
    updated_at: string;
    url: string;
    commit_oid?: (string | null) | undefined;
  };
  export type code_scanning_variant_analysis_language =
    | "cpp"
    | "csharp"
    | "go"
    | "java"
    | "javascript"
    | "python"
    | "ruby"
    | "rust"
    | "swift";
  export type code_scanning_variant_analysis_repository = {
    id: number;
    name: string;
    full_name: string;
    private: boolean;
    stargazers_count: number;
    updated_at: string | null;
  };
  export type code_scanning_variant_analysis_status =
    | "pending"
    | "in_progress"
    | "succeeded"
    | "failed"
    | "canceled"
    | "timed_out";
  export type code_scanning_variant_analysis_skipped_repo_group = {
    repository_count: number;
    repositories: Array<code_scanning_variant_analysis_repository>;
  };
  export type code_scanning_variant_analysis = {
    id: number;
    controller_repo: simple_repository;
    actor: simple_user;
    query_language: code_scanning_variant_analysis_language;
    query_pack_url: string;
    created_at?: string | undefined;
    updated_at?: string | undefined;
    completed_at?: (string | null) | undefined;
    status: "in_progress" | "succeeded" | "failed" | "cancelled";
    actions_workflow_run_id?: number | undefined;
    failure_reason?: ("no_repos_queried" | "actions_workflow_run_failed" | "internal_error") | undefined;
    scanned_repositories?:
      | Array<{
          repository: code_scanning_variant_analysis_repository;
          analysis_status: code_scanning_variant_analysis_status;
          result_count?: number | undefined;
          artifact_size_in_bytes?: number | undefined;
          failure_message?: string | undefined;
        }>
      | undefined;
    skipped_repositories?:
      | {
          access_mismatch_repos: code_scanning_variant_analysis_skipped_repo_group;
          not_found_repos: { repository_count: number; repository_full_names: Array<string> };
          no_codeql_db_repos: code_scanning_variant_analysis_skipped_repo_group;
          over_limit_repos: code_scanning_variant_analysis_skipped_repo_group;
        }
      | undefined;
  };
  export type code_scanning_variant_analysis_repo_task = {
    repository: simple_repository;
    analysis_status: code_scanning_variant_analysis_status;
    artifact_size_in_bytes?: number | undefined;
    result_count?: number | undefined;
    failure_message?: string | undefined;
    database_commit_sha?: string | undefined;
    source_location_prefix?: string | undefined;
    artifact_url?: string | undefined;
  };
  export type code_scanning_default_setup = Partial<{
    state: "configured" | "not-configured";
    languages: Array<
      | "actions"
      | "c-cpp"
      | "csharp"
      | "go"
      | "java-kotlin"
      | "javascript-typescript"
      | "javascript"
      | "python"
      | "ruby"
      | "typescript"
      | "swift"
    >;
    runner_type: ("standard" | "labeled") | null;
    runner_label: string | null;
    query_suite: "default" | "extended";
    threat_model: "remote" | "remote_and_local";
    updated_at: string | null;
    schedule: "weekly" | null;
  }>;
  export type code_scanning_default_setup_update = Partial<{
    state: "configured" | "not-configured";
    runner_type: "standard" | "labeled";
    runner_label: string | null;
    query_suite: "default" | "extended";
    threat_model: "remote" | "remote_and_local";
    languages: Array<
      "actions" | "c-cpp" | "csharp" | "go" | "java-kotlin" | "javascript-typescript" | "python" | "ruby" | "swift"
    >;
  }>;
  export type code_scanning_default_setup_update_response = Partial<{ run_id: number; run_url: string }>;
  export type code_scanning_ref_full = string;
  export type code_scanning_analysis_sarif_file = string;
  export type code_scanning_sarifs_receipt = Partial<{ id: code_scanning_analysis_sarif_id; url: string }>;
  export type code_scanning_sarifs_status = Partial<{
    processing_status: "pending" | "complete" | "failed";
    analyses_url: string | null;
    errors: Array<string> | null;
  }>;
  export type code_security_configuration_for_repository = Partial<{
    status:
      | "attached"
      | "attaching"
      | "detached"
      | "removed"
      | "enforced"
      | "failed"
      | "updating"
      | "removed_by_enterprise";
    configuration: code_security_configuration;
  }>;
  export type codeowners_errors = {
    errors: Array<{
      line: number;
      column: number;
      source?: string | undefined;
      kind: string;
      suggestion?: (string | null) | undefined;
      message: string;
      path: string;
    }>;
  };
  export type codespace_machine = {
    name: string;
    display_name: string;
    operating_system: string;
    storage_in_bytes: number;
    memory_in_bytes: number;
    cpus: number;
    prebuild_availability: ("none" | "ready" | "in_progress") | null;
  };
  export type codespaces_permissions_check_for_devcontainer = { accepted: boolean };
  export type repo_codespaces_secret = { name: string; created_at: string; updated_at: string };
  export type collaborator = {
    login: string;
    id: number;
    email?: (string | null) | undefined;
    name?: (string | null) | undefined;
    node_id: string;
    avatar_url: string;
    gravatar_id: string | null;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    permissions?:
      | { pull: boolean; triage?: boolean | undefined; push: boolean; maintain?: boolean | undefined; admin: boolean }
      | undefined;
    role_name: string;
    user_view_type?: string | undefined;
  };
  export type repository_invitation = {
    id: number;
    repository: minimal_repository;
    invitee: nullable_simple_user;
    inviter: nullable_simple_user;
    permissions: "read" | "write" | "admin" | "triage" | "maintain";
    created_at: string;
    expired?: boolean | undefined;
    url: string;
    html_url: string;
    node_id: string;
  };
  export type nullable_collaborator = {
    login: string;
    id: number;
    email?: (string | null) | undefined;
    name?: (string | null) | undefined;
    node_id: string;
    avatar_url: string;
    gravatar_id: string | null;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    permissions?:
      | { pull: boolean; triage?: boolean | undefined; push: boolean; maintain?: boolean | undefined; admin: boolean }
      | undefined;
    role_name: string;
    user_view_type?: string | undefined;
  } | null;
  export type repository_collaborator_permission = {
    permission: string;
    role_name: string;
    user: nullable_collaborator;
  };
  export type commit_comment = {
    html_url: string;
    url: string;
    id: number;
    node_id: string;
    body: string;
    path: string | null;
    position: number | null;
    line: number | null;
    commit_id: string;
    user: nullable_simple_user;
    created_at: string;
    updated_at: string;
    author_association: author_association;
    reactions?: reaction_rollup | undefined;
  };
  export type branch_short = { name: string; commit: { sha: string; url: string }; protected: boolean };
  export type link = { href: string };
  export type auto_merge = {
    enabled_by: simple_user;
    merge_method: "merge" | "squash" | "rebase";
    commit_title: string;
    commit_message: string;
  } | null;
  export type pull_request_simple = {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    number: number;
    state: string;
    locked: boolean;
    title: string;
    user: nullable_simple_user;
    body: string | null;
    labels: Array<{
      id: number;
      node_id: string;
      url: string;
      name: string;
      description: string;
      color: string;
      default: boolean;
    }>;
    milestone: nullable_milestone;
    active_lock_reason?: (string | null) | undefined;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    merged_at: string | null;
    merge_commit_sha: string | null;
    assignee: nullable_simple_user;
    assignees?: (Array<simple_user> | null) | undefined;
    requested_reviewers?: (Array<simple_user> | null) | undefined;
    requested_teams?: (Array<team> | null) | undefined;
    head: { label: string; ref: string; repo: repository; sha: string; user: nullable_simple_user };
    base: { label: string; ref: string; repo: repository; sha: string; user: nullable_simple_user };
    _links: {
      comments: link;
      commits: link;
      statuses: link;
      html: link;
      issue: link;
      review_comments: link;
      review_comment: link;
      self: link;
    };
    author_association: author_association;
    auto_merge: auto_merge;
    draft?: boolean | undefined;
  };
  export type simple_commit_status = {
    description: string | null;
    id: number;
    node_id: string;
    state: string;
    context: string;
    target_url: string | null;
    required?: (boolean | null) | undefined;
    avatar_url: string | null;
    url: string;
    created_at: string;
    updated_at: string;
  };
  export type combined_commit_status = {
    state: string;
    statuses: Array<simple_commit_status>;
    sha: string;
    total_count: number;
    repository: minimal_repository;
    commit_url: string;
    url: string;
  };
  export type status = {
    url: string;
    avatar_url: string | null;
    id: number;
    node_id: string;
    state: string;
    description: string | null;
    target_url: string | null;
    context: string;
    created_at: string;
    updated_at: string;
    creator: nullable_simple_user;
  };
  export type nullable_code_of_conduct_simple = {
    url: string;
    key: string;
    name: string;
    html_url: string | null;
  } | null;
  export type nullable_community_health_file = { url: string; html_url: string } | null;
  export type community_profile = {
    health_percentage: number;
    description: string | null;
    documentation: string | null;
    files: {
      code_of_conduct: nullable_code_of_conduct_simple;
      code_of_conduct_file: nullable_community_health_file;
      license: nullable_license_simple;
      contributing: nullable_community_health_file;
      readme: nullable_community_health_file;
      issue_template: nullable_community_health_file;
      pull_request_template: nullable_community_health_file;
    };
    updated_at: string | null;
    content_reports_enabled?: boolean | undefined;
  };
  export type commit_comparison = {
    url: string;
    html_url: string;
    permalink_url: string;
    diff_url: string;
    patch_url: string;
    base_commit: commit;
    merge_base_commit: commit;
    status: "diverged" | "ahead" | "behind" | "identical";
    ahead_by: number;
    behind_by: number;
    total_commits: number;
    commits: Array<commit>;
    files?: Array<diff_entry> | undefined;
  };
  export type content_tree = {
    type: string;
    size: number;
    name: string;
    path: string;
    sha: string;
    content?: string | undefined;
    url: string;
    git_url: string | null;
    html_url: string | null;
    download_url: string | null;
    entries?:
      | Array<{
          type: string;
          size: number;
          name: string;
          path: string;
          sha: string;
          url: string;
          git_url: string | null;
          html_url: string | null;
          download_url: string | null;
          _links: { git: string | null; html: string | null; self: string };
        }>
      | undefined;
    encoding?: string | undefined;
    _links: { git: string | null; html: string | null; self: string };
  };
  export type content_directory = Array<{
    type: "dir" | "file" | "submodule" | "symlink";
    size: number;
    name: string;
    path: string;
    content?: string | undefined;
    sha: string;
    url: string;
    git_url: string | null;
    html_url: string | null;
    download_url: string | null;
    _links: { git: string | null; html: string | null; self: string };
  }>;
  export type content_file = {
    type: "file";
    encoding: string;
    size: number;
    name: string;
    path: string;
    content: string;
    sha: string;
    url: string;
    git_url: string | null;
    html_url: string | null;
    download_url: string | null;
    _links: { git: string | null; html: string | null; self: string };
    target?: string | undefined;
    submodule_git_url?: string | undefined;
  };
  export type content_symlink = {
    type: "symlink";
    target: string;
    size: number;
    name: string;
    path: string;
    sha: string;
    url: string;
    git_url: string | null;
    html_url: string | null;
    download_url: string | null;
    _links: { git: string | null; html: string | null; self: string };
  };
  export type content_submodule = {
    type: "submodule";
    submodule_git_url: string;
    size: number;
    name: string;
    path: string;
    sha: string;
    url: string;
    git_url: string | null;
    html_url: string | null;
    download_url: string | null;
    _links: { git: string | null; html: string | null; self: string };
  };
  export type file_commit = {
    content: Partial<{
      name: string;
      path: string;
      sha: string;
      size: number;
      url: string;
      html_url: string;
      git_url: string;
      download_url: string;
      type: string;
      _links: Partial<{ self: string; git: string; html: string }>;
    }> | null;
    commit: Partial<{
      sha: string;
      node_id: string;
      url: string;
      html_url: string;
      author: Partial<{ date: string; name: string; email: string }>;
      committer: Partial<{ date: string; name: string; email: string }>;
      message: string;
      tree: Partial<{ url: string; sha: string }>;
      parents: Array<Partial<{ url: string; html_url: string; sha: string }>>;
      verification: Partial<{
        verified: boolean;
        reason: string;
        signature: string | null;
        payload: string | null;
        verified_at: string | null;
      }>;
    }>;
  };
  export type secret_scanning_push_protection_bypass_placeholder_id = string;
  export type repository_rule_violation_error = Partial<{
    message: string;
    documentation_url: string;
    status: string;
    metadata: Partial<{
      secret_scanning: Partial<{
        bypass_placeholders: Array<
          Partial<{ placeholder_id: secret_scanning_push_protection_bypass_placeholder_id; token_type: string }>
        >;
      }>;
    }>;
  }>;
  export type contributor = {
    login?: string | undefined;
    id?: number | undefined;
    node_id?: string | undefined;
    avatar_url?: string | undefined;
    gravatar_id?: (string | null) | undefined;
    url?: string | undefined;
    html_url?: string | undefined;
    followers_url?: string | undefined;
    following_url?: string | undefined;
    gists_url?: string | undefined;
    starred_url?: string | undefined;
    subscriptions_url?: string | undefined;
    organizations_url?: string | undefined;
    repos_url?: string | undefined;
    events_url?: string | undefined;
    received_events_url?: string | undefined;
    type: string;
    site_admin?: boolean | undefined;
    contributions: number;
    email?: string | undefined;
    name?: string | undefined;
    user_view_type?: string | undefined;
  };
  export type dependabot_alert = {
    number: alert_number;
    state: "auto_dismissed" | "dismissed" | "fixed" | "open";
    dependency: Partial<{
      package: dependabot_alert_package;
      manifest_path: string;
      scope: ("development" | "runtime") | null;
      relationship: ("unknown" | "direct" | "transitive") | null;
    }>;
    security_advisory: dependabot_alert_security_advisory;
    security_vulnerability: dependabot_alert_security_vulnerability;
    url: alert_url;
    html_url: alert_html_url;
    created_at: alert_created_at;
    updated_at: alert_updated_at;
    dismissed_at: alert_dismissed_at;
    dismissed_by: nullable_simple_user;
    dismissed_reason: ("fix_started" | "inaccurate" | "no_bandwidth" | "not_used" | "tolerable_risk") | null;
    dismissed_comment: string | null;
    fixed_at: alert_fixed_at;
    auto_dismissed_at?: alert_auto_dismissed_at | undefined;
  };
  export type dependabot_secret = { name: string; created_at: string; updated_at: string };
  export type dependency_graph_diff = Array<{
    change_type: "added" | "removed";
    manifest: string;
    ecosystem: string;
    name: string;
    version: string;
    package_url: string | null;
    license: string | null;
    source_repository_url: string | null;
    vulnerabilities: Array<{
      severity: string;
      advisory_ghsa_id: string;
      advisory_summary: string;
      advisory_url: string;
    }>;
    scope: "unknown" | "runtime" | "development";
  }>;
  export type dependency_graph_spdx_sbom = {
    sbom: {
      SPDXID: string;
      spdxVersion: string;
      comment?: string | undefined;
      creationInfo: { created: string; creators: Array<string> };
      name: string;
      dataLicense: string;
      documentNamespace: string;
      packages: Array<
        Partial<{
          SPDXID: string;
          name: string;
          versionInfo: string;
          downloadLocation: string;
          filesAnalyzed: boolean;
          licenseConcluded: string;
          licenseDeclared: string;
          supplier: string;
          copyrightText: string;
          externalRefs: Array<{ referenceCategory: string; referenceLocator: string; referenceType: string }>;
        }>
      >;
      relationships?:
        | Array<Partial<{ relationshipType: string; spdxElementId: string; relatedSpdxElement: string }>>
        | undefined;
    };
  };
  export type metadata = Record<string, unknown>;
  export type dependency = Partial<{
    package_url: string;
    metadata: metadata;
    relationship: "direct" | "indirect";
    scope: "runtime" | "development";
    dependencies: Array<string>;
  }>;
  export type manifest = {
    name: string;
    file?: Partial<{ source_location: string }> | undefined;
    metadata?: metadata | undefined;
    resolved?: Record<string, unknown> | undefined;
  };
  export type snapshot = {
    version: number;
    job: { id: string; correlator: string; html_url?: string | undefined };
    sha: string;
    ref: string;
    detector: { name: string; version: string; url: string };
    metadata?: metadata | undefined;
    manifests?: Record<string, unknown> | undefined;
    scanned: string;
  };
  export type deployment_status = {
    url: string;
    id: number;
    node_id: string;
    state: "error" | "failure" | "inactive" | "pending" | "success" | "queued" | "in_progress";
    creator: nullable_simple_user;
    description: string;
    environment?: string | undefined;
    target_url: string;
    created_at: string;
    updated_at: string;
    deployment_url: string;
    repository_url: string;
    environment_url?: string | undefined;
    log_url?: string | undefined;
    performed_via_github_app?: nullable_integration | undefined;
  };
  export type wait_timer = number;
  export type deployment_branch_policy_settings = {
    protected_branches: boolean;
    custom_branch_policies: boolean;
  } | null;
  export type environment = {
    id: number;
    node_id: string;
    name: string;
    url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    protection_rules?:
      | Array<
          | { id: number; node_id: string; type: string; wait_timer?: wait_timer | undefined }
          | {
              id: number;
              node_id: string;
              prevent_self_review?: boolean | undefined;
              type: string;
              reviewers?: Array<Partial<{ type: deployment_reviewer_type; reviewer: simple_user | team }>> | undefined;
            }
          | { id: number; node_id: string; type: string }
        >
      | undefined;
    deployment_branch_policy?: deployment_branch_policy_settings | undefined;
  };
  export type prevent_self_review = boolean;
  export type deployment_branch_policy = Partial<{ id: number; node_id: string; name: string; type: "branch" | "tag" }>;
  export type deployment_branch_policy_name_pattern_with_type = { name: string; type?: ("branch" | "tag") | undefined };
  export type deployment_branch_policy_name_pattern = { name: string };
  export type custom_deployment_rule_app = { id: number; slug: string; integration_url: string; node_id: string };
  export type deployment_protection_rule = {
    id: number;
    node_id: string;
    enabled: boolean;
    app: custom_deployment_rule_app;
  };
  export type short_blob = { url: string; sha: string };
  export type blob = {
    content: string;
    encoding: string;
    url: string;
    sha: string;
    size: number | null;
    node_id: string;
    highlighted_content?: string | undefined;
  };
  export type git_commit = {
    sha: string;
    node_id: string;
    url: string;
    author: { date: string; email: string; name: string };
    committer: { date: string; email: string; name: string };
    message: string;
    tree: { sha: string; url: string };
    parents: Array<{ sha: string; url: string; html_url: string }>;
    verification: {
      verified: boolean;
      reason: string;
      signature: string | null;
      payload: string | null;
      verified_at: string | null;
    };
    html_url: string;
  };
  export type git_ref = {
    ref: string;
    node_id: string;
    url: string;
    object: { type: string; sha: string; url: string };
  };
  export type git_tag = {
    node_id: string;
    tag: string;
    sha: string;
    url: string;
    message: string;
    tagger: { date: string; email: string; name: string };
    object: { sha: string; type: string; url: string };
    verification?: verification | undefined;
  };
  export type git_tree = {
    sha: string;
    url?: string | undefined;
    truncated: boolean;
    tree: Array<{
      path: string;
      mode: string;
      type: string;
      sha: string;
      size?: number | undefined;
      url?: string | undefined;
    }>;
  };
  export type hook_response = { code: number | null; status: string | null; message: string | null };
  export type hook = {
    type: string;
    id: number;
    name: string;
    active: boolean;
    events: Array<string>;
    config: webhook_config;
    updated_at: string;
    created_at: string;
    url: string;
    test_url: string;
    ping_url: string;
    deliveries_url?: string | undefined;
    last_response: hook_response;
  };
  export type Schema_import = {
    vcs: string | null;
    use_lfs?: boolean | undefined;
    vcs_url: string;
    svc_root?: string | undefined;
    tfvc_project?: string | undefined;
    status:
      | "auth"
      | "error"
      | "none"
      | "detecting"
      | "choose"
      | "auth_failed"
      | "importing"
      | "mapping"
      | "waiting_to_push"
      | "pushing"
      | "complete"
      | "setup"
      | "unknown"
      | "detection_found_multiple"
      | "detection_found_nothing"
      | "detection_needs_auth";
    status_text?: (string | null) | undefined;
    failed_step?: (string | null) | undefined;
    error_message?: (string | null) | undefined;
    import_percent?: (number | null) | undefined;
    commit_count?: (number | null) | undefined;
    push_percent?: (number | null) | undefined;
    has_large_files?: boolean | undefined;
    large_files_size?: number | undefined;
    large_files_count?: number | undefined;
    project_choices?: Array<Partial<{ vcs: string; tfvc_project: string; human_name: string }>> | undefined;
    message?: string | undefined;
    authors_count?: (number | null) | undefined;
    url: string;
    html_url: string;
    authors_url: string;
    repository_url: string;
    svn_root?: string | undefined;
  };
  export type porter_author = {
    id: number;
    remote_id: string;
    remote_name: string;
    email: string;
    name: string;
    url: string;
    import_url: string;
  };
  export type porter_large_file = { ref_name: string; path: string; oid: string; size: number };
  export type nullable_issue = {
    id: number;
    node_id: string;
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    number: number;
    state: string;
    state_reason?: (("completed" | "reopened" | "not_planned" | "duplicate") | null) | undefined;
    title: string;
    body?: (string | null) | undefined;
    user: nullable_simple_user;
    labels: Array<
      | string
      | Partial<{
          id: number;
          node_id: string;
          url: string;
          name: string;
          description: string | null;
          color: string | null;
          default: boolean;
        }>
    >;
    assignee: nullable_simple_user;
    assignees?: (Array<simple_user> | null) | undefined;
    milestone: nullable_milestone;
    locked: boolean;
    active_lock_reason?: (string | null) | undefined;
    comments: number;
    pull_request?:
      | {
          merged_at?: (string | null) | undefined;
          diff_url: string | null;
          html_url: string | null;
          patch_url: string | null;
          url: string | null;
        }
      | undefined;
    closed_at: string | null;
    created_at: string;
    updated_at: string;
    draft?: boolean | undefined;
    closed_by?: nullable_simple_user | undefined;
    body_html?: string | undefined;
    body_text?: string | undefined;
    timeline_url?: string | undefined;
    type?: issue_type | undefined;
    repository?: repository | undefined;
    performed_via_github_app?: nullable_integration | undefined;
    author_association: author_association;
    reactions?: reaction_rollup | undefined;
    sub_issues_summary?: sub_issues_summary | undefined;
    issue_dependencies_summary?: issue_dependencies_summary | undefined;
    issue_field_values?: Array<issue_field_value> | undefined;
  } | null;
  export type issue_event_label = { name: string | null; color: string | null };
  export type issue_event_dismissed_review = {
    state: string;
    review_id: number;
    dismissal_message: string | null;
    dismissal_commit_id?: (string | null) | undefined;
  };
  export type issue_event_milestone = { title: string };
  export type issue_event_project_card = {
    url: string;
    id: number;
    project_url: string;
    project_id: number;
    column_name: string;
    previous_column_name?: string | undefined;
  };
  export type issue_event_rename = { from: string; to: string };
  export type issue_event = {
    id: number;
    node_id: string;
    url: string;
    actor: nullable_simple_user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    issue?: nullable_issue | undefined;
    label?: issue_event_label | undefined;
    assignee?: nullable_simple_user | undefined;
    assigner?: nullable_simple_user | undefined;
    review_requester?: nullable_simple_user | undefined;
    requested_reviewer?: nullable_simple_user | undefined;
    requested_team?: team | undefined;
    dismissed_review?: issue_event_dismissed_review | undefined;
    milestone?: issue_event_milestone | undefined;
    project_card?: issue_event_project_card | undefined;
    rename?: issue_event_rename | undefined;
    author_association?: author_association | undefined;
    lock_reason?: (string | null) | undefined;
    performed_via_github_app?: nullable_integration | undefined;
  };
  export type labeled_issue_event = {
    id: number;
    node_id: string;
    url: string;
    actor: simple_user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: nullable_integration;
    label: { name: string; color: string };
  };
  export type unlabeled_issue_event = {
    id: number;
    node_id: string;
    url: string;
    actor: simple_user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: nullable_integration;
    label: { name: string; color: string };
  };
  export type assigned_issue_event = {
    id: number;
    node_id: string;
    url: string;
    actor: simple_user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: integration;
    assignee: simple_user;
    assigner: simple_user;
  };
  export type unassigned_issue_event = {
    id: number;
    node_id: string;
    url: string;
    actor: simple_user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: nullable_integration;
    assignee: simple_user;
    assigner: simple_user;
  };
  export type milestoned_issue_event = {
    id: number;
    node_id: string;
    url: string;
    actor: simple_user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: nullable_integration;
    milestone: { title: string };
  };
  export type demilestoned_issue_event = {
    id: number;
    node_id: string;
    url: string;
    actor: simple_user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: nullable_integration;
    milestone: { title: string };
  };
  export type renamed_issue_event = {
    id: number;
    node_id: string;
    url: string;
    actor: simple_user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: nullable_integration;
    rename: { from: string; to: string };
  };
  export type review_requested_issue_event = {
    id: number;
    node_id: string;
    url: string;
    actor: simple_user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: nullable_integration;
    review_requester: simple_user;
    requested_team?: team | undefined;
    requested_reviewer?: simple_user | undefined;
  };
  export type review_request_removed_issue_event = {
    id: number;
    node_id: string;
    url: string;
    actor: simple_user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: nullable_integration;
    review_requester: simple_user;
    requested_team?: team | undefined;
    requested_reviewer?: simple_user | undefined;
  };
  export type review_dismissed_issue_event = {
    id: number;
    node_id: string;
    url: string;
    actor: simple_user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: nullable_integration;
    dismissed_review: {
      state: string;
      review_id: number;
      dismissal_message: string | null;
      dismissal_commit_id?: string | undefined;
    };
  };
  export type locked_issue_event = {
    id: number;
    node_id: string;
    url: string;
    actor: simple_user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: nullable_integration;
    lock_reason: string | null;
  };
  export type added_to_project_issue_event = {
    id: number;
    node_id: string;
    url: string;
    actor: simple_user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: nullable_integration;
    project_card?:
      | {
          id: number;
          url: string;
          project_id: number;
          project_url: string;
          column_name: string;
          previous_column_name?: string | undefined;
        }
      | undefined;
  };
  export type moved_column_in_project_issue_event = {
    id: number;
    node_id: string;
    url: string;
    actor: simple_user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: nullable_integration;
    project_card?:
      | {
          id: number;
          url: string;
          project_id: number;
          project_url: string;
          column_name: string;
          previous_column_name?: string | undefined;
        }
      | undefined;
  };
  export type removed_from_project_issue_event = {
    id: number;
    node_id: string;
    url: string;
    actor: simple_user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: nullable_integration;
    project_card?:
      | {
          id: number;
          url: string;
          project_id: number;
          project_url: string;
          column_name: string;
          previous_column_name?: string | undefined;
        }
      | undefined;
  };
  export type converted_note_to_issue_issue_event = {
    id: number;
    node_id: string;
    url: string;
    actor: simple_user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: integration;
    project_card?:
      | {
          id: number;
          url: string;
          project_id: number;
          project_url: string;
          column_name: string;
          previous_column_name?: string | undefined;
        }
      | undefined;
  };
  export type issue_event_for_issue =
    | labeled_issue_event
    | unlabeled_issue_event
    | assigned_issue_event
    | unassigned_issue_event
    | milestoned_issue_event
    | demilestoned_issue_event
    | renamed_issue_event
    | review_requested_issue_event
    | review_request_removed_issue_event
    | review_dismissed_issue_event
    | locked_issue_event
    | added_to_project_issue_event
    | moved_column_in_project_issue_event
    | removed_from_project_issue_event
    | converted_note_to_issue_issue_event;
  export type label = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string | null;
    color: string;
    default: boolean;
  };
  export type timeline_comment_event = {
    event: string;
    actor: simple_user;
    id: number;
    node_id: string;
    url: string;
    body?: string | undefined;
    body_text?: string | undefined;
    body_html?: string | undefined;
    html_url: string;
    user: simple_user;
    created_at: string;
    updated_at: string;
    issue_url: string;
    author_association: author_association;
    performed_via_github_app?: nullable_integration | undefined;
    reactions?: reaction_rollup | undefined;
  };
  export type timeline_cross_referenced_event = {
    event: string;
    actor?: simple_user | undefined;
    created_at: string;
    updated_at: string;
    source: Partial<{ type: string; issue: issue }>;
  };
  export type timeline_committed_event = {
    event?: string | undefined;
    sha: string;
    node_id: string;
    url: string;
    author: { date: string; email: string; name: string };
    committer: { date: string; email: string; name: string };
    message: string;
    tree: { sha: string; url: string };
    parents: Array<{ sha: string; url: string; html_url: string }>;
    verification: {
      verified: boolean;
      reason: string;
      signature: string | null;
      payload: string | null;
      verified_at: string | null;
    };
    html_url: string;
  };
  export type timeline_reviewed_event = {
    event: string;
    id: number;
    node_id: string;
    user: simple_user;
    body: string | null;
    state: string;
    html_url: string;
    pull_request_url: string;
    _links: { html: { href: string }; pull_request: { href: string } };
    submitted_at?: string | undefined;
    updated_at?: (string | null) | undefined;
    commit_id: string;
    body_html?: string | undefined;
    body_text?: string | undefined;
    author_association: author_association;
  };
  export type pull_request_review_comment = {
    url: string;
    pull_request_review_id: number | null;
    id: number;
    node_id: string;
    diff_hunk: string;
    path: string;
    position?: number | undefined;
    original_position?: number | undefined;
    commit_id: string;
    original_commit_id: string;
    in_reply_to_id?: number | undefined;
    user: simple_user;
    body: string;
    created_at: string;
    updated_at: string;
    html_url: string;
    pull_request_url: string;
    author_association: author_association;
    _links: { self: { href: string }; html: { href: string }; pull_request: { href: string } };
    start_line?: (number | null) | undefined;
    original_start_line?: (number | null) | undefined;
    start_side?: (("LEFT" | "RIGHT") | null) | undefined;
    line?: number | undefined;
    original_line?: number | undefined;
    side?: ("LEFT" | "RIGHT") | undefined;
    subject_type?: ("line" | "file") | undefined;
    reactions?: reaction_rollup | undefined;
    body_html?: string | undefined;
    body_text?: string | undefined;
  };
  export type timeline_line_commented_event = Partial<{
    event: string;
    node_id: string;
    comments: Array<pull_request_review_comment>;
  }>;
  export type timeline_commit_commented_event = Partial<{
    event: string;
    node_id: string;
    commit_id: string;
    comments: Array<commit_comment>;
  }>;
  export type timeline_assigned_issue_event = {
    id: number;
    node_id: string;
    url: string;
    actor: simple_user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: nullable_integration;
    assignee: simple_user;
  };
  export type timeline_unassigned_issue_event = {
    id: number;
    node_id: string;
    url: string;
    actor: simple_user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: nullable_integration;
    assignee: simple_user;
  };
  export type state_change_issue_event = {
    id: number;
    node_id: string;
    url: string;
    actor: simple_user;
    event: string;
    commit_id: string | null;
    commit_url: string | null;
    created_at: string;
    performed_via_github_app: nullable_integration;
    state_reason?: (string | null) | undefined;
  };
  export type timeline_issue_events =
    | labeled_issue_event
    | unlabeled_issue_event
    | milestoned_issue_event
    | demilestoned_issue_event
    | renamed_issue_event
    | review_requested_issue_event
    | review_request_removed_issue_event
    | review_dismissed_issue_event
    | locked_issue_event
    | added_to_project_issue_event
    | moved_column_in_project_issue_event
    | removed_from_project_issue_event
    | converted_note_to_issue_issue_event
    | timeline_comment_event
    | timeline_cross_referenced_event
    | timeline_committed_event
    | timeline_reviewed_event
    | timeline_line_commented_event
    | timeline_commit_commented_event
    | timeline_assigned_issue_event
    | timeline_unassigned_issue_event
    | state_change_issue_event;
  export type deploy_key = {
    id: number;
    key: string;
    url: string;
    title: string;
    verified: boolean;
    created_at: string;
    read_only: boolean;
    added_by?: (string | null) | undefined;
    last_used?: (string | null) | undefined;
    enabled?: boolean | undefined;
  };
  export type language = Record<string, number>;
  export type license_content = {
    name: string;
    path: string;
    sha: string;
    size: number;
    url: string;
    html_url: string | null;
    git_url: string | null;
    download_url: string | null;
    type: string;
    content: string;
    encoding: string;
    _links: { git: string | null; html: string | null; self: string };
    license: nullable_license_simple;
  };
  export type merged_upstream = Partial<{
    message: string;
    merge_type: "merge" | "fast-forward" | "none";
    base_branch: string;
  }>;
  export type milestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: "open" | "closed";
    title: string;
    description: string | null;
    creator: nullable_simple_user;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    due_on: string | null;
  };
  export type pages_source_hash = { branch: string; path: string };
  export type pages_https_certificate = {
    state:
      | "new"
      | "authorization_created"
      | "authorization_pending"
      | "authorized"
      | "authorization_revoked"
      | "issued"
      | "uploaded"
      | "approved"
      | "errored"
      | "bad_authz"
      | "destroy_pending"
      | "dns_changed";
    description: string;
    domains: Array<string>;
    expires_at?: string | undefined;
  };
  export type page = {
    url: string;
    status: ("built" | "building" | "errored") | null;
    cname: string | null;
    protected_domain_state?: (("pending" | "verified" | "unverified") | null) | undefined;
    pending_domain_unverified_at?: (string | null) | undefined;
    custom_404: boolean;
    html_url?: string | undefined;
    build_type?: (("legacy" | "workflow") | null) | undefined;
    source?: pages_source_hash | undefined;
    public: boolean;
    https_certificate?: pages_https_certificate | undefined;
    https_enforced?: boolean | undefined;
  };
  export type page_build = {
    url: string;
    status: string;
    error: { message: string | null };
    pusher: nullable_simple_user;
    commit: string;
    duration: number;
    created_at: string;
    updated_at: string;
  };
  export type page_build_status = { url: string; status: string };
  export type page_deployment = {
    id: number | string;
    status_url: string;
    page_url: string;
    preview_url?: string | undefined;
  };
  export type pages_deployment_status = Partial<{
    status:
      | "deployment_in_progress"
      | "syncing_files"
      | "finished_file_sync"
      | "updating_pages"
      | "purging_cdn"
      | "deployment_cancelled"
      | "deployment_failed"
      | "deployment_content_failed"
      | "deployment_attempt_error"
      | "deployment_lost"
      | "succeed";
  }>;
  export type pages_health_check = Partial<{
    domain: Partial<{
      host: string;
      uri: string;
      nameservers: string;
      dns_resolves: boolean;
      is_proxied: boolean | null;
      is_cloudflare_ip: boolean | null;
      is_fastly_ip: boolean | null;
      is_old_ip_address: boolean | null;
      is_a_record: boolean | null;
      has_cname_record: boolean | null;
      has_mx_records_present: boolean | null;
      is_valid_domain: boolean;
      is_apex_domain: boolean;
      should_be_a_record: boolean | null;
      is_cname_to_github_user_domain: boolean | null;
      is_cname_to_pages_dot_github_dot_com: boolean | null;
      is_cname_to_fastly: boolean | null;
      is_pointed_to_github_pages_ip: boolean | null;
      is_non_github_pages_ip_present: boolean | null;
      is_pages_domain: boolean;
      is_served_by_pages: boolean | null;
      is_valid: boolean;
      reason: string | null;
      responds_to_https: boolean;
      enforces_https: boolean;
      https_error: string | null;
      is_https_eligible: boolean | null;
      caa_error: string | null;
    }>;
    alt_domain: Partial<{
      host: string;
      uri: string;
      nameservers: string;
      dns_resolves: boolean;
      is_proxied: boolean | null;
      is_cloudflare_ip: boolean | null;
      is_fastly_ip: boolean | null;
      is_old_ip_address: boolean | null;
      is_a_record: boolean | null;
      has_cname_record: boolean | null;
      has_mx_records_present: boolean | null;
      is_valid_domain: boolean;
      is_apex_domain: boolean;
      should_be_a_record: boolean | null;
      is_cname_to_github_user_domain: boolean | null;
      is_cname_to_pages_dot_github_dot_com: boolean | null;
      is_cname_to_fastly: boolean | null;
      is_pointed_to_github_pages_ip: boolean | null;
      is_non_github_pages_ip_present: boolean | null;
      is_pages_domain: boolean;
      is_served_by_pages: boolean | null;
      is_valid: boolean;
      reason: string | null;
      responds_to_https: boolean;
      enforces_https: boolean;
      https_error: string | null;
      is_https_eligible: boolean | null;
      caa_error: string | null;
    }> | null;
  }>;
  export type pull_request = {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    number: number;
    state: "open" | "closed";
    locked: boolean;
    title: string;
    user: simple_user;
    body: string | null;
    labels: Array<{
      id: number;
      node_id: string;
      url: string;
      name: string;
      description: string | null;
      color: string;
      default: boolean;
    }>;
    milestone: nullable_milestone;
    active_lock_reason?: (string | null) | undefined;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    merged_at: string | null;
    merge_commit_sha: string | null;
    assignee: nullable_simple_user;
    assignees?: (Array<simple_user> | null) | undefined;
    requested_reviewers?: (Array<simple_user> | null) | undefined;
    requested_teams?: (Array<team_simple> | null) | undefined;
    head: { label: string; ref: string; repo: repository; sha: string; user: simple_user };
    base: { label: string; ref: string; repo: repository; sha: string; user: simple_user };
    _links: {
      comments: link;
      commits: link;
      statuses: link;
      html: link;
      issue: link;
      review_comments: link;
      review_comment: link;
      self: link;
    };
    author_association: author_association;
    auto_merge: auto_merge;
    draft?: boolean | undefined;
    merged: boolean;
    mergeable: boolean | null;
    rebaseable?: (boolean | null) | undefined;
    mergeable_state: string;
    merged_by: nullable_simple_user;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  export type pull_request_merge_result = { sha: string; merged: boolean; message: string };
  export type pull_request_review_request = { users: Array<simple_user>; teams: Array<team> };
  export type pull_request_review = {
    id: number;
    node_id: string;
    user: nullable_simple_user;
    body: string;
    state: string;
    html_url: string;
    pull_request_url: string;
    _links: { html: { href: string }; pull_request: { href: string } };
    submitted_at?: string | undefined;
    commit_id: string | null;
    body_html?: string | undefined;
    body_text?: string | undefined;
    author_association: author_association;
  };
  export type review_comment = {
    url: string;
    pull_request_review_id: number | null;
    id: number;
    node_id: string;
    diff_hunk: string;
    path: string;
    position: number | null;
    original_position: number;
    commit_id: string;
    original_commit_id: string;
    in_reply_to_id?: number | undefined;
    user: nullable_simple_user;
    body: string;
    created_at: string;
    updated_at: string;
    html_url: string;
    pull_request_url: string;
    author_association: author_association;
    _links: { self: link; html: link; pull_request: link };
    body_text?: string | undefined;
    body_html?: string | undefined;
    reactions?: reaction_rollup | undefined;
    side?: ("LEFT" | "RIGHT") | undefined;
    start_side?: (("LEFT" | "RIGHT") | null) | undefined;
    line?: number | undefined;
    original_line?: number | undefined;
    start_line?: (number | null) | undefined;
    original_start_line?: (number | null) | undefined;
    subject_type?: ("line" | "file") | undefined;
  };
  export type release_asset = {
    url: string;
    browser_download_url: string;
    id: number;
    node_id: string;
    name: string;
    label: string | null;
    state: "uploaded" | "open";
    content_type: string;
    size: number;
    digest: string | null;
    download_count: number;
    created_at: string;
    updated_at: string;
    uploader: nullable_simple_user;
  };
  export type release = {
    url: string;
    html_url: string;
    assets_url: string;
    upload_url: string;
    tarball_url: string | null;
    zipball_url: string | null;
    id: number;
    node_id: string;
    tag_name: string;
    target_commitish: string;
    name: string | null;
    body?: (string | null) | undefined;
    draft: boolean;
    prerelease: boolean;
    immutable?: boolean | undefined;
    created_at: string;
    published_at: string | null;
    updated_at?: (string | null) | undefined;
    author: simple_user;
    assets: Array<release_asset>;
    body_html?: string | undefined;
    body_text?: string | undefined;
    mentions_count?: number | undefined;
    discussion_url?: string | undefined;
    reactions?: reaction_rollup | undefined;
  };
  export type release_notes_content = { name: string; body: string };
  export type repository_rule_ruleset_info = Partial<{
    ruleset_source_type: "Repository" | "Organization";
    ruleset_source: string;
    ruleset_id: number;
  }>;
  export type repository_rule_detailed =
    | (repository_rule_creation & repository_rule_ruleset_info)
    | (repository_rule_update & repository_rule_ruleset_info)
    | (repository_rule_deletion & repository_rule_ruleset_info)
    | (repository_rule_required_linear_history & repository_rule_ruleset_info)
    | (repository_rule_merge_queue & repository_rule_ruleset_info)
    | (repository_rule_required_deployments & repository_rule_ruleset_info)
    | (repository_rule_required_signatures & repository_rule_ruleset_info)
    | (repository_rule_pull_request & repository_rule_ruleset_info)
    | (repository_rule_required_status_checks & repository_rule_ruleset_info)
    | (repository_rule_non_fast_forward & repository_rule_ruleset_info)
    | (repository_rule_commit_message_pattern & repository_rule_ruleset_info)
    | (repository_rule_commit_author_email_pattern & repository_rule_ruleset_info)
    | (repository_rule_committer_email_pattern & repository_rule_ruleset_info)
    | (repository_rule_branch_name_pattern & repository_rule_ruleset_info)
    | (repository_rule_tag_name_pattern & repository_rule_ruleset_info)
    | (repository_rule_file_path_restriction & repository_rule_ruleset_info)
    | (repository_rule_max_file_path_length & repository_rule_ruleset_info)
    | (repository_rule_file_extension_restriction & repository_rule_ruleset_info)
    | (repository_rule_max_file_size & repository_rule_ruleset_info)
    | (repository_rule_workflows & repository_rule_ruleset_info)
    | (repository_rule_code_scanning & repository_rule_ruleset_info);
  export type secret_scanning_alert = Partial<{
    number: alert_number;
    created_at: alert_created_at;
    updated_at: nullable_alert_updated_at;
    url: alert_url;
    html_url: alert_html_url;
    locations_url: string;
    state: secret_scanning_alert_state;
    resolution: secret_scanning_alert_resolution;
    resolved_at: string | null;
    resolved_by: nullable_simple_user;
    resolution_comment: string | null;
    secret_type: string;
    secret_type_display_name: string;
    secret: string;
    push_protection_bypassed: boolean | null;
    push_protection_bypassed_by: nullable_simple_user;
    push_protection_bypassed_at: string | null;
    push_protection_bypass_request_reviewer: nullable_simple_user;
    push_protection_bypass_request_reviewer_comment: string | null;
    push_protection_bypass_request_comment: string | null;
    push_protection_bypass_request_html_url: string | null;
    validity: "active" | "inactive" | "unknown";
    publicly_leaked: boolean | null;
    multi_repo: boolean | null;
    is_base64_encoded: boolean | null;
    first_location_detected: nullable_secret_scanning_first_detected_location;
    has_more_locations: boolean;
  }>;
  export type secret_scanning_alert_resolution_comment = string | null;
  export type secret_scanning_location = Partial<{
    type:
      | "commit"
      | "wiki_commit"
      | "issue_title"
      | "issue_body"
      | "issue_comment"
      | "discussion_title"
      | "discussion_body"
      | "discussion_comment"
      | "pull_request_title"
      | "pull_request_body"
      | "pull_request_comment"
      | "pull_request_review"
      | "pull_request_review_comment";
    details:
      | secret_scanning_location_commit
      | secret_scanning_location_wiki_commit
      | secret_scanning_location_issue_title
      | secret_scanning_location_issue_body
      | secret_scanning_location_issue_comment
      | secret_scanning_location_discussion_title
      | secret_scanning_location_discussion_body
      | secret_scanning_location_discussion_comment
      | secret_scanning_location_pull_request_title
      | secret_scanning_location_pull_request_body
      | secret_scanning_location_pull_request_comment
      | secret_scanning_location_pull_request_review
      | secret_scanning_location_pull_request_review_comment;
  }>;
  export type secret_scanning_push_protection_bypass_reason = "false_positive" | "used_in_tests" | "will_fix_later";
  export type secret_scanning_push_protection_bypass = Partial<{
    reason: secret_scanning_push_protection_bypass_reason;
    expire_at: string | null;
    token_type: string;
  }>;
  export type secret_scanning_scan = Partial<{
    type: string;
    status: string;
    completed_at: string | null;
    started_at: string | null;
  }>;
  export type secret_scanning_scan_history = Partial<{
    incremental_scans: Array<secret_scanning_scan>;
    pattern_update_scans: Array<secret_scanning_scan>;
    backfill_scans: Array<secret_scanning_scan>;
    custom_pattern_backfill_scans: Array<
      secret_scanning_scan & Partial<{ pattern_name: string; pattern_scope: string }>
    >;
  }>;
  export type repository_advisory_create = {
    summary: string;
    description: string;
    cve_id?: (string | null) | undefined;
    vulnerabilities: Array<{
      package: { ecosystem: security_advisory_ecosystems; name?: (string | null) | undefined };
      vulnerable_version_range?: (string | null) | undefined;
      patched_versions?: (string | null) | undefined;
      vulnerable_functions?: (Array<string> | null) | undefined;
    }>;
    cwe_ids?: (Array<string> | null) | undefined;
    credits?: (Array<{ login: string; type: security_advisory_credit_types }> | null) | undefined;
    severity?: (("critical" | "high" | "medium" | "low") | null) | undefined;
    cvss_vector_string?: (string | null) | undefined;
    start_private_fork?: boolean | undefined;
  };
  export type private_vulnerability_report_create = {
    summary: string;
    description: string;
    vulnerabilities?:
      | (Array<{
          package: { ecosystem: security_advisory_ecosystems; name?: (string | null) | undefined };
          vulnerable_version_range?: (string | null) | undefined;
          patched_versions?: (string | null) | undefined;
          vulnerable_functions?: (Array<string> | null) | undefined;
        }> | null)
      | undefined;
    cwe_ids?: (Array<string> | null) | undefined;
    severity?: (("critical" | "high" | "medium" | "low") | null) | undefined;
    cvss_vector_string?: (string | null) | undefined;
    start_private_fork?: boolean | undefined;
  };
  export type repository_advisory_update = Partial<{
    summary: string;
    description: string;
    cve_id: string | null;
    vulnerabilities: Array<{
      package: { ecosystem: security_advisory_ecosystems; name?: (string | null) | undefined };
      vulnerable_version_range?: (string | null) | undefined;
      patched_versions?: (string | null) | undefined;
      vulnerable_functions?: (Array<string> | null) | undefined;
    }>;
    cwe_ids: Array<string> | null;
    credits: Array<{ login: string; type: security_advisory_credit_types }> | null;
    severity: ("critical" | "high" | "medium" | "low") | null;
    cvss_vector_string: string | null;
    state: "published" | "closed" | "draft";
    collaborating_users: Array<string> | null;
    collaborating_teams: Array<string> | null;
  }>;
  export type stargazer = { starred_at: string; user: nullable_simple_user };
  export type code_frequency_stat = Array<number>;
  export type commit_activity = { days: Array<number>; total: number; week: number };
  export type contributor_activity = {
    author: nullable_simple_user;
    total: number;
    weeks: Array<Partial<{ w: number; a: number; d: number; c: number }>>;
  };
  export type participation_stats = { all: Array<number>; owner: Array<number> };
  export type repository_subscription = {
    subscribed: boolean;
    ignored: boolean;
    reason: string | null;
    created_at: string;
    url: string;
    repository_url: string;
  };
  export type tag = {
    name: string;
    commit: { sha: string; url: string };
    zipball_url: string;
    tarball_url: string;
    node_id: string;
  };
  export type tag_protection = {
    id?: number | undefined;
    created_at?: string | undefined;
    updated_at?: string | undefined;
    enabled?: boolean | undefined;
    pattern: string;
  };
  export type topic = { names: Array<string> };
  export type traffic = { timestamp: string; uniques: number; count: number };
  export type clone_traffic = { count: number; uniques: number; clones: Array<traffic> };
  export type content_traffic = { path: string; title: string; count: number; uniques: number };
  export type referrer_traffic = { referrer: string; count: number; uniques: number };
  export type view_traffic = { count: number; uniques: number; views: Array<traffic> };
  export type search_result_text_matches = Array<
    Partial<{
      object_url: string;
      object_type: string | null;
      property: string;
      fragment: string;
      matches: Array<Partial<{ text: string; indices: Array<number> }>>;
    }>
  >;
  export type code_search_result_item = {
    name: string;
    path: string;
    sha: string;
    url: string;
    git_url: string;
    html_url: string;
    repository: minimal_repository;
    score: number;
    file_size?: number | undefined;
    language?: (string | null) | undefined;
    last_modified_at?: string | undefined;
    line_numbers?: Array<string> | undefined;
    text_matches?: search_result_text_matches | undefined;
  };
  export type commit_search_result_item = {
    url: string;
    sha: string;
    html_url: string;
    comments_url: string;
    commit: {
      author: { name: string; email: string; date: string };
      committer: nullable_git_user;
      comment_count: number;
      message: string;
      tree: { sha: string; url: string };
      url: string;
      verification?: verification | undefined;
    };
    author: nullable_simple_user;
    committer: nullable_git_user;
    parents: Array<Partial<{ url: string; html_url: string; sha: string }>>;
    repository: minimal_repository;
    score: number;
    node_id: string;
    text_matches?: search_result_text_matches | undefined;
  };
  export type issue_search_result_item = {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    locked: boolean;
    active_lock_reason?: (string | null) | undefined;
    assignees?: (Array<simple_user> | null) | undefined;
    user: nullable_simple_user;
    labels: Array<
      Partial<{
        id: number;
        node_id: string;
        url: string;
        name: string;
        color: string;
        default: boolean;
        description: string | null;
      }>
    >;
    sub_issues_summary?: sub_issues_summary | undefined;
    issue_dependencies_summary?: issue_dependencies_summary | undefined;
    issue_field_values?: Array<issue_field_value> | undefined;
    state: string;
    state_reason?: (string | null) | undefined;
    assignee: nullable_simple_user;
    milestone: nullable_milestone;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    text_matches?: search_result_text_matches | undefined;
    pull_request?:
      | {
          merged_at?: (string | null) | undefined;
          diff_url: string | null;
          html_url: string | null;
          patch_url: string | null;
          url: string | null;
        }
      | undefined;
    body?: string | undefined;
    score: number;
    author_association: author_association;
    draft?: boolean | undefined;
    repository?: repository | undefined;
    body_html?: string | undefined;
    body_text?: string | undefined;
    timeline_url?: string | undefined;
    type?: issue_type | undefined;
    performed_via_github_app?: nullable_integration | undefined;
    reactions?: reaction_rollup | undefined;
  };
  export type label_search_result_item = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
    description: string | null;
    score: number;
    text_matches?: search_result_text_matches | undefined;
  };
  export type repo_search_result_item = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: nullable_simple_user;
    private: boolean;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    homepage: string | null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string | null;
    forks_count: number;
    open_issues_count: number;
    master_branch?: string | undefined;
    default_branch: string;
    score: number;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    forks: number;
    open_issues: number;
    watchers: number;
    topics?: Array<string> | undefined;
    mirror_url: string | null;
    has_issues: boolean;
    has_projects: boolean;
    has_pages: boolean;
    has_wiki: boolean;
    has_downloads: boolean;
    has_discussions?: boolean | undefined;
    archived: boolean;
    disabled: boolean;
    visibility?: string | undefined;
    license: nullable_license_simple;
    permissions?:
      | { admin: boolean; maintain?: boolean | undefined; push: boolean; triage?: boolean | undefined; pull: boolean }
      | undefined;
    text_matches?: search_result_text_matches | undefined;
    temp_clone_token?: string | undefined;
    allow_merge_commit?: boolean | undefined;
    allow_squash_merge?: boolean | undefined;
    allow_rebase_merge?: boolean | undefined;
    allow_auto_merge?: boolean | undefined;
    delete_branch_on_merge?: boolean | undefined;
    allow_forking?: boolean | undefined;
    is_template?: boolean | undefined;
    web_commit_signoff_required?: boolean | undefined;
  };
  export type topic_search_result_item = {
    name: string;
    display_name: string | null;
    short_description: string | null;
    description: string | null;
    created_by: string | null;
    released: string | null;
    created_at: string;
    updated_at: string;
    featured: boolean;
    curated: boolean;
    score: number;
    repository_count?: (number | null) | undefined;
    logo_url?: (string | null) | undefined;
    text_matches?: search_result_text_matches | undefined;
    related?:
      | (Array<
          Partial<{ topic_relation: Partial<{ id: number; name: string; topic_id: number; relation_type: string }> }>
        > | null)
      | undefined;
    aliases?:
      | (Array<
          Partial<{ topic_relation: Partial<{ id: number; name: string; topic_id: number; relation_type: string }> }>
        > | null)
      | undefined;
  };
  export type user_search_result_item = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string | null;
    url: string;
    html_url: string;
    followers_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    received_events_url: string;
    type: string;
    score: number;
    following_url: string;
    gists_url: string;
    starred_url: string;
    events_url: string;
    public_repos?: number | undefined;
    public_gists?: number | undefined;
    followers?: number | undefined;
    following?: number | undefined;
    created_at?: string | undefined;
    updated_at?: string | undefined;
    name?: (string | null) | undefined;
    bio?: (string | null) | undefined;
    email?: (string | null) | undefined;
    location?: (string | null) | undefined;
    site_admin: boolean;
    hireable?: (boolean | null) | undefined;
    text_matches?: search_result_text_matches | undefined;
    blog?: (string | null) | undefined;
    company?: (string | null) | undefined;
    suspended_at?: (string | null) | undefined;
    user_view_type?: string | undefined;
  };
  export type private_user = {
    login: string;
    id: number;
    user_view_type?: string | undefined;
    node_id: string;
    avatar_url: string;
    gravatar_id: string | null;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    name: string | null;
    company: string | null;
    blog: string | null;
    location: string | null;
    email: string | null;
    notification_email?: (string | null) | undefined;
    hireable: boolean | null;
    bio: string | null;
    twitter_username?: (string | null) | undefined;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    created_at: string;
    updated_at: string;
    private_gists: number;
    total_private_repos: number;
    owned_private_repos: number;
    disk_usage: number;
    collaborators: number;
    two_factor_authentication: boolean;
    plan?: { collaborators: number; name: string; space: number; private_repos: number } | undefined;
    business_plus?: boolean | undefined;
    ldap_dn?: string | undefined;
  };
  export type codespaces_secret = {
    name: string;
    created_at: string;
    updated_at: string;
    visibility: "all" | "private" | "selected";
    selected_repositories_url: string;
  };
  export type codespaces_user_public_key = { key_id: string; key: string };
  export type codespace_export_details = Partial<{
    state: string | null;
    completed_at: string | null;
    branch: string | null;
    sha: string | null;
    id: string;
    export_url: string;
    html_url: string | null;
  }>;
  export type codespace_with_full_repository = {
    id: number;
    name: string;
    display_name?: (string | null) | undefined;
    environment_id: string | null;
    owner: simple_user;
    billable_owner: simple_user;
    repository: full_repository;
    machine: nullable_codespace_machine;
    devcontainer_path?: (string | null) | undefined;
    prebuild: boolean | null;
    created_at: string;
    updated_at: string;
    last_used_at: string;
    state:
      | "Unknown"
      | "Created"
      | "Queued"
      | "Provisioning"
      | "Available"
      | "Awaiting"
      | "Unavailable"
      | "Deleted"
      | "Moved"
      | "Shutdown"
      | "Archived"
      | "Starting"
      | "ShuttingDown"
      | "Failed"
      | "Exporting"
      | "Updating"
      | "Rebuilding";
    url: string;
    git_status: Partial<{
      ahead: number;
      behind: number;
      has_unpushed_changes: boolean;
      has_uncommitted_changes: boolean;
      ref: string;
    }>;
    location: "EastUs" | "SouthEastAsia" | "WestEurope" | "WestUs2";
    idle_timeout_minutes: number | null;
    web_url: string;
    machines_url: string;
    start_url: string;
    stop_url: string;
    publish_url?: (string | null) | undefined;
    pulls_url: string | null;
    recent_folders: Array<string>;
    runtime_constraints?: Partial<{ allowed_port_privacy_settings: Array<string> | null }> | undefined;
    pending_operation?: (boolean | null) | undefined;
    pending_operation_disabled_reason?: (string | null) | undefined;
    idle_timeout_notice?: (string | null) | undefined;
    retention_period_minutes?: (number | null) | undefined;
    retention_expires_at?: (string | null) | undefined;
  };
  export type email = { email: string; primary: boolean; verified: boolean; visibility: string | null };
  export type gpg_key = {
    id: number;
    name?: (string | null) | undefined;
    primary_key_id: number | null;
    key_id: string;
    public_key: string;
    emails: Array<Partial<{ email: string; verified: boolean }>>;
    subkeys: Array<
      Partial<{
        id: number;
        primary_key_id: number;
        key_id: string;
        public_key: string;
        emails: Array<Partial<{ email: string; verified: boolean }>>;
        subkeys: Array<unknown>;
        can_sign: boolean;
        can_encrypt_comms: boolean;
        can_encrypt_storage: boolean;
        can_certify: boolean;
        created_at: string;
        expires_at: string | null;
        raw_key: string | null;
        revoked: boolean;
      }>
    >;
    can_sign: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_certify: boolean;
    created_at: string;
    expires_at: string | null;
    revoked: boolean;
    raw_key: string | null;
  };
  export type key = {
    key: string;
    id: number;
    url: string;
    title: string;
    created_at: string;
    verified: boolean;
    read_only: boolean;
    last_used?: (string | null) | undefined;
  };
  export type marketplace_account = {
    url: string;
    id: number;
    type: string;
    node_id?: string | undefined;
    login: string;
    email?: (string | null) | undefined;
    organization_billing_email?: (string | null) | undefined;
  };
  export type user_marketplace_purchase = {
    billing_cycle: string;
    next_billing_date: string | null;
    unit_count: number | null;
    on_free_trial: boolean;
    free_trial_ends_on: string | null;
    updated_at: string | null;
    account: marketplace_account;
    plan: marketplace_listing_plan;
  };
  export type social_account = { provider: string; url: string };
  export type ssh_signing_key = { key: string; id: number; title: string; created_at: string };
  export type starred_repository = { starred_at: string; repo: repository };
  export type hovercard = { contexts: Array<{ message: string; octicon: string }> };
  export type key_simple = {
    id: number;
    key: string;
    created_at?: string | undefined;
    last_used?: (string | null) | undefined;
  };
  export type billing_usage_report_user = Partial<{
    usageItems: Array<{
      date: string;
      product: string;
      sku: string;
      quantity: number;
      unitType: string;
      pricePerUnit: number;
      grossAmount: number;
      discountAmount: number;
      netAmount: number;
      repositoryName?: string | undefined;
    }>;
  }>;
  export type enterprise_webhooks = {
    description?: (string | null) | undefined;
    html_url: string;
    website_url?: (string | null) | undefined;
    id: number;
    node_id: string;
    name: string;
    slug: string;
    created_at: string | null;
    updated_at: string | null;
    avatar_url: string;
  };
  export type simple_installation = { id: number; node_id: string };
  export type organization_simple_webhooks = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string | null;
  };
  export type repository_webhooks = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    license: nullable_license_simple;
    organization?: nullable_simple_user | undefined;
    forks: number;
    permissions?:
      | { admin: boolean; pull: boolean; triage?: boolean | undefined; push: boolean; maintain?: boolean | undefined }
      | undefined;
    owner: simple_user;
    private: boolean;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string | null;
    hooks_url: string;
    svn_url: string;
    homepage: string | null;
    language: string | null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template?: boolean | undefined;
    topics?: Array<string> | undefined;
    custom_properties?: Record<string, unknown> | undefined;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    has_discussions?: boolean | undefined;
    archived: boolean;
    disabled: boolean;
    visibility?: string | undefined;
    pushed_at: string | null;
    created_at: string | null;
    updated_at: string | null;
    allow_rebase_merge?: boolean | undefined;
    template_repository?:
      | (Partial<{
          id: number;
          node_id: string;
          name: string;
          full_name: string;
          owner: Partial<{
            login: string;
            id: number;
            node_id: string;
            avatar_url: string;
            gravatar_id: string;
            url: string;
            html_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            subscriptions_url: string;
            organizations_url: string;
            repos_url: string;
            events_url: string;
            received_events_url: string;
            type: string;
            site_admin: boolean;
          }>;
          private: boolean;
          html_url: string;
          description: string;
          fork: boolean;
          url: string;
          archive_url: string;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          deployments_url: string;
          downloads_url: string;
          events_url: string;
          forks_url: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          languages_url: string;
          merges_url: string;
          milestones_url: string;
          notifications_url: string;
          pulls_url: string;
          releases_url: string;
          ssh_url: string;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          tags_url: string;
          teams_url: string;
          trees_url: string;
          clone_url: string;
          mirror_url: string;
          hooks_url: string;
          svn_url: string;
          homepage: string;
          language: string;
          forks_count: number;
          stargazers_count: number;
          watchers_count: number;
          size: number;
          default_branch: string;
          open_issues_count: number;
          is_template: boolean;
          topics: Array<string>;
          has_issues: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_pages: boolean;
          has_downloads: boolean;
          archived: boolean;
          disabled: boolean;
          visibility: string;
          pushed_at: string;
          created_at: string;
          updated_at: string;
          permissions: Partial<{ admin: boolean; maintain: boolean; push: boolean; triage: boolean; pull: boolean }>;
          allow_rebase_merge: boolean;
          temp_clone_token: string;
          allow_squash_merge: boolean;
          allow_auto_merge: boolean;
          delete_branch_on_merge: boolean;
          allow_update_branch: boolean;
          use_squash_pr_title_as_default: boolean;
          squash_merge_commit_title: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
          squash_merge_commit_message: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
          merge_commit_title: "PR_TITLE" | "MERGE_MESSAGE";
          merge_commit_message: "PR_BODY" | "PR_TITLE" | "BLANK";
          allow_merge_commit: boolean;
          subscribers_count: number;
          network_count: number;
        }> | null)
      | undefined;
    temp_clone_token?: string | undefined;
    allow_squash_merge?: boolean | undefined;
    allow_auto_merge?: boolean | undefined;
    delete_branch_on_merge?: boolean | undefined;
    allow_update_branch?: boolean | undefined;
    use_squash_pr_title_as_default?: boolean | undefined;
    squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
    squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
    merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
    merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
    allow_merge_commit?: boolean | undefined;
    allow_forking?: boolean | undefined;
    web_commit_signoff_required?: boolean | undefined;
    subscribers_count?: number | undefined;
    network_count?: number | undefined;
    open_issues: number;
    watchers: number;
    master_branch?: string | undefined;
    starred_at?: string | undefined;
    anonymous_access_enabled?: boolean | undefined;
  };
  export type webhooks_rule = {
    admin_enforced: boolean;
    allow_deletions_enforcement_level: "off" | "non_admins" | "everyone";
    allow_force_pushes_enforcement_level: "off" | "non_admins" | "everyone";
    authorized_actor_names: Array<string>;
    authorized_actors_only: boolean;
    authorized_dismissal_actors_only: boolean;
    create_protected?: boolean | undefined;
    created_at: string;
    dismiss_stale_reviews_on_push: boolean;
    id: number;
    ignore_approvals_from_contributors: boolean;
    linear_history_requirement_enforcement_level: "off" | "non_admins" | "everyone";
    lock_branch_enforcement_level: "off" | "non_admins" | "everyone";
    lock_allows_fork_sync?: boolean | undefined;
    merge_queue_enforcement_level: "off" | "non_admins" | "everyone";
    name: string;
    pull_request_reviews_enforcement_level: "off" | "non_admins" | "everyone";
    repository_id: number;
    require_code_owner_review: boolean;
    require_last_push_approval?: boolean | undefined;
    required_approving_review_count: number;
    required_conversation_resolution_level: "off" | "non_admins" | "everyone";
    required_deployments_enforcement_level: "off" | "non_admins" | "everyone";
    required_status_checks: Array<string>;
    required_status_checks_enforcement_level: "off" | "non_admins" | "everyone";
    signature_requirement_enforcement_level: "off" | "non_admins" | "everyone";
    strict_required_status_checks_policy: boolean;
    updated_at: string;
  };
  export type simple_check_suite = Partial<{
    after: string | null;
    app: integration;
    before: string | null;
    conclusion:
      | (
          | "success"
          | "failure"
          | "neutral"
          | "cancelled"
          | "skipped"
          | "timed_out"
          | "action_required"
          | "stale"
          | "startup_failure"
        )
      | null;
    created_at: string;
    head_branch: string | null;
    head_sha: string;
    id: number;
    node_id: string;
    pull_requests: Array<pull_request_minimal>;
    repository: minimal_repository;
    status: "queued" | "in_progress" | "completed" | "pending" | "waiting";
    updated_at: string;
    url: string;
  }>;
  export type check_run_with_simple_check_suite = {
    app: integration;
    check_suite: simple_check_suite;
    completed_at: string | null;
    conclusion:
      | (
          | "waiting"
          | "pending"
          | "startup_failure"
          | "stale"
          | "success"
          | "failure"
          | "neutral"
          | "cancelled"
          | "skipped"
          | "timed_out"
          | "action_required"
        )
      | null;
    deployment?: deployment_simple | undefined;
    details_url: string;
    external_id: string;
    head_sha: string;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    output: {
      annotations_count: number;
      annotations_url: string;
      summary: string | null;
      text: string | null;
      title: string | null;
    };
    pull_requests: Array<pull_request_minimal>;
    started_at: string;
    status: "queued" | "in_progress" | "completed" | "pending";
    url: string;
  };
  export type webhooks_code_scanning_commit_oid = string;
  export type webhooks_code_scanning_ref = string;
  export type webhooks_deploy_pusher_type = string;
  export type webhooks_ref_0 = string;
  export type webhooks_deploy_key = {
    added_by?: (string | null) | undefined;
    created_at: string;
    id: number;
    key: string;
    last_used?: (string | null) | undefined;
    read_only: boolean;
    title: string;
    url: string;
    verified: boolean;
    enabled?: boolean | undefined;
  };
  export type webhooks_workflow = {
    badge_url: string;
    created_at: string;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    updated_at: string;
    url: string;
  } | null;
  export type webhooks_approver = Partial<{
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
    user_view_type: string;
  }>;
  export type webhooks_reviewers = Array<
    Partial<{
      reviewer: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
      } | null;
      type: "User";
    }>
  >;
  export type webhooks_workflow_job_run = {
    conclusion: unknown | null;
    created_at: string;
    environment: string;
    html_url: string;
    id: number;
    name: unknown | null;
    status: string;
    updated_at: string;
  };
  export type webhooks_user = {
    avatar_url?: string | undefined;
    deleted?: boolean | undefined;
    email?: (string | null) | undefined;
    events_url?: string | undefined;
    followers_url?: string | undefined;
    following_url?: string | undefined;
    gists_url?: string | undefined;
    gravatar_id?: string | undefined;
    html_url?: string | undefined;
    id: number;
    login: string;
    name?: string | undefined;
    node_id?: string | undefined;
    organizations_url?: string | undefined;
    received_events_url?: string | undefined;
    repos_url?: string | undefined;
    site_admin?: boolean | undefined;
    starred_url?: string | undefined;
    subscriptions_url?: string | undefined;
    type?: ("Bot" | "User" | "Organization") | undefined;
    url?: string | undefined;
    user_view_type?: string | undefined;
  } | null;
  export type webhooks_answer = {
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    body: string;
    child_comment_count: number;
    created_at: string;
    discussion_id: number;
    html_url: string;
    id: number;
    node_id: string;
    parent_id: unknown | null;
    reactions?:
      | {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          url: string;
        }
      | undefined;
    repository_url: string;
    updated_at: string;
    user: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
  };
  export type discussion = {
    active_lock_reason: string | null;
    answer_chosen_at: string | null;
    answer_chosen_by: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
    answer_html_url: string | null;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    body: string;
    category: {
      created_at: string;
      description: string;
      emoji: string;
      id: number;
      is_answerable: boolean;
      name: string;
      node_id?: string | undefined;
      repository_id: number;
      slug: string;
      updated_at: string;
    };
    comments: number;
    created_at: string;
    html_url: string;
    id: number;
    locked: boolean;
    node_id: string;
    number: number;
    reactions?:
      | {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          url: string;
        }
      | undefined;
    repository_url: string;
    state: "open" | "closed" | "locked" | "converting" | "transferring";
    state_reason: ("resolved" | "outdated" | "duplicate" | "reopened") | null;
    timeline_url?: string | undefined;
    title: string;
    updated_at: string;
    user: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
    labels?: Array<label> | undefined;
  };
  export type webhooks_comment = {
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    body: string;
    child_comment_count: number;
    created_at: string;
    discussion_id: number;
    html_url: string;
    id: number;
    node_id: string;
    parent_id: number | null;
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    updated_at: string;
    user: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
  };
  export type webhooks_label = {
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    name: string;
    node_id: string;
    url: string;
  };
  export type webhooks_repositories = Array<{
    full_name: string;
    id: number;
    name: string;
    node_id: string;
    private: boolean;
  }>;
  export type webhooks_repositories_added = Array<{
    full_name: string;
    id: number;
    name: string;
    node_id: string;
    private: boolean;
  }>;
  export type webhooks_repository_selection = "all" | "selected";
  export type webhooks_issue_comment = {
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    body: string;
    created_at: string;
    html_url: string;
    id: number;
    issue_url: string;
    node_id: string;
    performed_via_github_app: integration;
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
  };
  export type webhooks_changes = Partial<{ body: { from: string } }>;
  export type webhooks_issue = {
    active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
    assignee?:
      | ({
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null)
      | undefined;
    assignees: Array<{
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null>;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean | undefined;
    events_url: string;
    html_url: string;
    id: number;
    labels?:
      | Array<{
          color: string;
          default: boolean;
          description: string | null;
          id: number;
          name: string;
          node_id: string;
          url: string;
        }>
      | undefined;
    labels_url: string;
    locked?: boolean | undefined;
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      number: number;
      open_issues: number;
      state: "open" | "closed";
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    performed_via_github_app?:
      | ({
          created_at: string | null;
          description: string | null;
          events?:
            | Array<
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
                | "reminder"
                | "pull_request_review_thread"
              >
            | undefined;
          external_url: string | null;
          html_url: string;
          id: number | null;
          name: string;
          node_id: string;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | Partial<{
                actions: "read" | "write";
                administration: "read" | "write";
                checks: "read" | "write";
                content_references: "read" | "write";
                contents: "read" | "write";
                deployments: "read" | "write";
                discussions: "read" | "write";
                emails: "read" | "write";
                environments: "read" | "write";
                issues: "read" | "write";
                keys: "read" | "write";
                members: "read" | "write";
                metadata: "read" | "write";
                organization_administration: "read" | "write";
                organization_hooks: "read" | "write";
                organization_packages: "read" | "write";
                organization_plan: "read" | "write";
                organization_projects: "read" | "write" | "admin";
                organization_secrets: "read" | "write";
                organization_self_hosted_runners: "read" | "write";
                organization_user_blocking: "read" | "write";
                packages: "read" | "write";
                pages: "read" | "write";
                pull_requests: "read" | "write";
                repository_hooks: "read" | "write";
                repository_projects: "read" | "write";
                secret_scanning_alerts: "read" | "write";
                secrets: "read" | "write";
                security_events: "read" | "write";
                security_scanning_alert: "read" | "write";
                single_file: "read" | "write";
                statuses: "read" | "write";
                team_discussions: "read" | "write";
                vulnerability_alerts: "read" | "write";
                workflows: "read" | "write";
              }>
            | undefined;
          slug?: string | undefined;
          updated_at: string | null;
        } | null)
      | undefined;
    pull_request?:
      | Partial<{ diff_url: string; html_url: string; merged_at: string | null; patch_url: string; url: string }>
      | undefined;
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    sub_issues_summary?: sub_issues_summary | undefined;
    issue_dependencies_summary?: issue_dependencies_summary | undefined;
    issue_field_values?: Array<issue_field_value> | undefined;
    state?: ("open" | "closed") | undefined;
    state_reason?: (string | null) | undefined;
    timeline_url?: string | undefined;
    title: string;
    type?: issue_type | undefined;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
  };
  export type webhooks_milestone = {
    closed_at: string | null;
    closed_issues: number;
    created_at: string;
    creator: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
    description: string | null;
    due_on: string | null;
    html_url: string;
    id: number;
    labels_url: string;
    node_id: string;
    number: number;
    open_issues: number;
    state: "open" | "closed";
    title: string;
    updated_at: string;
    url: string;
  };
  export type webhooks_issue_2 = {
    active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
    assignee?:
      | ({
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null)
      | undefined;
    assignees: Array<{
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null>;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean | undefined;
    events_url: string;
    html_url: string;
    id: number;
    labels?:
      | Array<{
          color: string;
          default: boolean;
          description: string | null;
          id: number;
          name: string;
          node_id: string;
          url: string;
        }>
      | undefined;
    labels_url: string;
    locked?: boolean | undefined;
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      number: number;
      open_issues: number;
      state: "open" | "closed";
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    performed_via_github_app?:
      | ({
          created_at: string | null;
          description: string | null;
          events?:
            | Array<
                | "branch_protection_rule"
                | "check_run"
                | "check_suite"
                | "code_scanning_alert"
                | "commit_comment"
                | "content_reference"
                | "create"
                | "delete"
                | "deployment"
                | "deployment_review"
                | "deployment_status"
                | "deploy_key"
                | "discussion"
                | "discussion_comment"
                | "fork"
                | "gollum"
                | "issues"
                | "issue_comment"
                | "label"
                | "member"
                | "membership"
                | "milestone"
                | "organization"
                | "org_block"
                | "page_build"
                | "project"
                | "project_card"
                | "project_column"
                | "public"
                | "pull_request"
                | "pull_request_review"
                | "pull_request_review_comment"
                | "push"
                | "registry_package"
                | "release"
                | "repository"
                | "repository_dispatch"
                | "secret_scanning_alert"
                | "star"
                | "status"
                | "team"
                | "team_add"
                | "watch"
                | "workflow_dispatch"
                | "workflow_run"
              >
            | undefined;
          external_url: string | null;
          html_url: string;
          id: number | null;
          name: string;
          node_id: string;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | Partial<{
                actions: "read" | "write";
                administration: "read" | "write";
                checks: "read" | "write";
                content_references: "read" | "write";
                contents: "read" | "write";
                deployments: "read" | "write";
                discussions: "read" | "write";
                emails: "read" | "write";
                environments: "read" | "write";
                issues: "read" | "write";
                keys: "read" | "write";
                members: "read" | "write";
                metadata: "read" | "write";
                organization_administration: "read" | "write";
                organization_hooks: "read" | "write";
                organization_packages: "read" | "write";
                organization_plan: "read" | "write";
                organization_projects: "read" | "write";
                organization_secrets: "read" | "write";
                organization_self_hosted_runners: "read" | "write";
                organization_user_blocking: "read" | "write";
                packages: "read" | "write";
                pages: "read" | "write";
                pull_requests: "read" | "write";
                repository_hooks: "read" | "write";
                repository_projects: "read" | "write";
                secret_scanning_alerts: "read" | "write";
                secrets: "read" | "write";
                security_events: "read" | "write";
                security_scanning_alert: "read" | "write";
                single_file: "read" | "write";
                statuses: "read" | "write";
                team_discussions: "read" | "write";
                vulnerability_alerts: "read" | "write";
                workflows: "read" | "write";
              }>
            | undefined;
          slug?: string | undefined;
          updated_at: string | null;
        } | null)
      | undefined;
    pull_request?:
      | Partial<{ diff_url: string; html_url: string; merged_at: string | null; patch_url: string; url: string }>
      | undefined;
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    sub_issues_summary?: sub_issues_summary | undefined;
    issue_dependencies_summary?: issue_dependencies_summary | undefined;
    issue_field_values?: Array<issue_field_value> | undefined;
    state?: ("open" | "closed") | undefined;
    state_reason?: (string | null) | undefined;
    timeline_url?: string | undefined;
    title: string;
    type?: issue_type | undefined;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
  };
  export type webhooks_user_mannequin = {
    avatar_url?: string | undefined;
    deleted?: boolean | undefined;
    email?: (string | null) | undefined;
    events_url?: string | undefined;
    followers_url?: string | undefined;
    following_url?: string | undefined;
    gists_url?: string | undefined;
    gravatar_id?: string | undefined;
    html_url?: string | undefined;
    id: number;
    login: string;
    name?: string | undefined;
    node_id?: string | undefined;
    organizations_url?: string | undefined;
    received_events_url?: string | undefined;
    repos_url?: string | undefined;
    site_admin?: boolean | undefined;
    starred_url?: string | undefined;
    subscriptions_url?: string | undefined;
    type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
    url?: string | undefined;
    user_view_type?: string | undefined;
  } | null;
  export type webhooks_marketplace_purchase = {
    account: { id: number; login: string; node_id: string; organization_billing_email: string | null; type: string };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: Array<string | null>;
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  export type webhooks_previous_marketplace_purchase = {
    account: { id: number; login: string; node_id: string; organization_billing_email: string | null; type: string };
    billing_cycle: string;
    free_trial_ends_on: unknown | null;
    next_billing_date?: (string | null) | undefined;
    on_free_trial: boolean;
    plan: {
      bullets: Array<string>;
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  export type webhooks_team = {
    deleted?: boolean | undefined;
    description?: (string | null) | undefined;
    html_url?: string | undefined;
    id: number;
    members_url?: string | undefined;
    name: string;
    node_id?: string | undefined;
    parent?:
      | ({
          description: string | null;
          html_url: string;
          id: number;
          members_url: string;
          name: string;
          node_id: string;
          permission: string;
          privacy: "open" | "closed" | "secret";
          notification_setting: "notifications_enabled" | "notifications_disabled";
          repositories_url: string;
          slug: string;
          url: string;
        } | null)
      | undefined;
    permission?: string | undefined;
    privacy?: ("open" | "closed" | "secret") | undefined;
    notification_setting?: ("notifications_enabled" | "notifications_disabled") | undefined;
    repositories_url?: string | undefined;
    slug?: string | undefined;
    url?: string | undefined;
  };
  export type merge_group = {
    head_sha: string;
    head_ref: string;
    base_sha: string;
    base_ref: string;
    head_commit: simple_commit;
  };
  export type nullable_repository_webhooks = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    license: nullable_license_simple;
    organization?: nullable_simple_user | undefined;
    forks: number;
    permissions?:
      | { admin: boolean; pull: boolean; triage?: boolean | undefined; push: boolean; maintain?: boolean | undefined }
      | undefined;
    owner: simple_user;
    private: boolean;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string | null;
    hooks_url: string;
    svn_url: string;
    homepage: string | null;
    language: string | null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template?: boolean | undefined;
    topics?: Array<string> | undefined;
    custom_properties?: Record<string, unknown> | undefined;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    has_discussions?: boolean | undefined;
    archived: boolean;
    disabled: boolean;
    visibility?: string | undefined;
    pushed_at: string | null;
    created_at: string | null;
    updated_at: string | null;
    allow_rebase_merge?: boolean | undefined;
    template_repository?:
      | (Partial<{
          id: number;
          node_id: string;
          name: string;
          full_name: string;
          owner: Partial<{
            login: string;
            id: number;
            node_id: string;
            avatar_url: string;
            gravatar_id: string;
            url: string;
            html_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            subscriptions_url: string;
            organizations_url: string;
            repos_url: string;
            events_url: string;
            received_events_url: string;
            type: string;
            site_admin: boolean;
          }>;
          private: boolean;
          html_url: string;
          description: string;
          fork: boolean;
          url: string;
          archive_url: string;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          deployments_url: string;
          downloads_url: string;
          events_url: string;
          forks_url: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          languages_url: string;
          merges_url: string;
          milestones_url: string;
          notifications_url: string;
          pulls_url: string;
          releases_url: string;
          ssh_url: string;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          tags_url: string;
          teams_url: string;
          trees_url: string;
          clone_url: string;
          mirror_url: string;
          hooks_url: string;
          svn_url: string;
          homepage: string;
          language: string;
          forks_count: number;
          stargazers_count: number;
          watchers_count: number;
          size: number;
          default_branch: string;
          open_issues_count: number;
          is_template: boolean;
          topics: Array<string>;
          has_issues: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_pages: boolean;
          has_downloads: boolean;
          archived: boolean;
          disabled: boolean;
          visibility: string;
          pushed_at: string;
          created_at: string;
          updated_at: string;
          permissions: Partial<{ admin: boolean; maintain: boolean; push: boolean; triage: boolean; pull: boolean }>;
          allow_rebase_merge: boolean;
          temp_clone_token: string;
          allow_squash_merge: boolean;
          allow_auto_merge: boolean;
          delete_branch_on_merge: boolean;
          allow_update_branch: boolean;
          use_squash_pr_title_as_default: boolean;
          squash_merge_commit_title: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
          squash_merge_commit_message: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
          merge_commit_title: "PR_TITLE" | "MERGE_MESSAGE";
          merge_commit_message: "PR_BODY" | "PR_TITLE" | "BLANK";
          allow_merge_commit: boolean;
          subscribers_count: number;
          network_count: number;
        }> | null)
      | undefined;
    temp_clone_token?: string | undefined;
    allow_squash_merge?: boolean | undefined;
    allow_auto_merge?: boolean | undefined;
    delete_branch_on_merge?: boolean | undefined;
    allow_update_branch?: boolean | undefined;
    use_squash_pr_title_as_default?: boolean | undefined;
    squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
    squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
    merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
    merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
    allow_merge_commit?: boolean | undefined;
    allow_forking?: boolean | undefined;
    web_commit_signoff_required?: boolean | undefined;
    subscribers_count?: number | undefined;
    network_count?: number | undefined;
    open_issues: number;
    watchers: number;
    master_branch?: string | undefined;
    starred_at?: string | undefined;
    anonymous_access_enabled?: boolean | undefined;
  } | null;
  export type webhooks_milestone_3 = {
    closed_at: string | null;
    closed_issues: number;
    created_at: string;
    creator: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
    description: string | null;
    due_on: string | null;
    html_url: string;
    id: number;
    labels_url: string;
    node_id: string;
    number: number;
    open_issues: number;
    state: "open" | "closed";
    title: string;
    updated_at: string;
    url: string;
  };
  export type webhooks_membership = {
    organization_url: string;
    role: string;
    direct_membership?: boolean | undefined;
    enterprise_teams_providing_indirect_membership?: Array<string> | undefined;
    state: string;
    url: string;
    user: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
  };
  export type personal_access_token_request = {
    id: number;
    owner: simple_user;
    permissions_added: Partial<{
      organization: Record<string, string>;
      repository: Record<string, string>;
      other: Record<string, string>;
    }>;
    permissions_upgraded: Partial<{
      organization: Record<string, string>;
      repository: Record<string, string>;
      other: Record<string, string>;
    }>;
    permissions_result: Partial<{
      organization: Record<string, string>;
      repository: Record<string, string>;
      other: Record<string, string>;
    }>;
    repository_selection: "none" | "all" | "subset";
    repository_count: number | null;
    repositories: Array<{ full_name: string; id: number; name: string; node_id: string; private: boolean }> | null;
    created_at: string;
    token_id: number;
    token_name: string;
    token_expired: boolean;
    token_expires_at: string | null;
    token_last_used_at: string | null;
  };
  export type webhooks_project_card = {
    after_id?: (number | null) | undefined;
    archived: boolean;
    column_id: number;
    column_url: string;
    content_url?: string | undefined;
    created_at: string;
    creator: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
    id: number;
    node_id: string;
    note: string | null;
    project_url: string;
    updated_at: string;
    url: string;
  };
  export type webhooks_project = {
    body: string | null;
    columns_url: string;
    created_at: string;
    creator: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    number: number;
    owner_url: string;
    state: "open" | "closed";
    updated_at: string;
    url: string;
  };
  export type webhooks_project_column = {
    after_id?: (number | null) | undefined;
    cards_url: string;
    created_at: string;
    id: number;
    name: string;
    node_id: string;
    project_url: string;
    updated_at: string;
    url: string;
  };
  export type nullable_projects_v2_status_update = {
    id: number;
    node_id: string;
    project_node_id?: string | undefined;
    creator?: simple_user | undefined;
    created_at: string;
    updated_at: string;
    status?: (("INACTIVE" | "ON_TRACK" | "AT_RISK" | "OFF_TRACK" | "COMPLETE") | null) | undefined;
    start_date?: string | undefined;
    target_date?: string | undefined;
    body?: (string | null) | undefined;
  } | null;
  export type projects_v2 = {
    id: number;
    node_id: string;
    owner: simple_user;
    creator: simple_user;
    title: string;
    description: string | null;
    public: boolean;
    closed_at: string | null;
    created_at: string;
    updated_at: string;
    number: number;
    short_description: string | null;
    deleted_at: string | null;
    deleted_by: nullable_simple_user;
    state?: ("open" | "closed") | undefined;
    latest_status_update?: nullable_projects_v2_status_update | undefined;
    is_template?: boolean | undefined;
  };
  export type webhooks_project_changes = Partial<{ archived_at: Partial<{ from: string | null; to: string | null }> }>;
  export type projects_v2_item_content_type = "Issue" | "PullRequest" | "DraftIssue";
  export type projects_v2_item = {
    id: number;
    node_id?: string | undefined;
    project_node_id?: string | undefined;
    content_node_id: string;
    content_type: projects_v2_item_content_type;
    creator?: simple_user | undefined;
    created_at: string;
    updated_at: string;
    archived_at: string | null;
  };
  export type projects_v2_single_select_option = {
    id: string;
    name: string;
    color?: (string | null) | undefined;
    description?: (string | null) | undefined;
  };
  export type projects_v2_iteration_setting = {
    id: string;
    title: string;
    title_html?: string | undefined;
    duration?: (number | null) | undefined;
    start_date?: (string | null) | undefined;
    completed?: boolean | undefined;
  };
  export type projects_v2_status_update = {
    id: number;
    node_id: string;
    project_node_id?: string | undefined;
    creator?: simple_user | undefined;
    created_at: string;
    updated_at: string;
    status?: (("INACTIVE" | "ON_TRACK" | "AT_RISK" | "OFF_TRACK" | "COMPLETE") | null) | undefined;
    start_date?: string | undefined;
    target_date?: string | undefined;
    body?: (string | null) | undefined;
  };
  export type webhooks_number = number;
  export type pull_request_webhook = pull_request &
    Partial<{
      allow_auto_merge: boolean;
      allow_update_branch: boolean;
      delete_branch_on_merge: boolean;
      merge_commit_message: "PR_BODY" | "PR_TITLE" | "BLANK";
      merge_commit_title: "PR_TITLE" | "MERGE_MESSAGE";
      squash_merge_commit_message: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
      squash_merge_commit_title: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
      use_squash_pr_title_as_default: boolean;
    }>;
  export type webhooks_pull_request_5 = {
    _links: {
      comments: { href: string };
      commits: { href: string };
      html: { href: string };
      issue: { href: string };
      review_comment: { href: string };
      review_comments: { href: string };
      self: { href: string };
      statuses: { href: string };
    };
    active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
    additions?: number | undefined;
    assignee: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
    assignees: Array<{
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
      url?: string | undefined;
    } | null>;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    auto_merge: {
      commit_message: string | null;
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      merge_method: "merge" | "squash" | "rebase";
    } | null;
    base: {
      label: string;
      ref: string;
      repo: {
        allow_auto_merge?: boolean | undefined;
        allow_forking?: boolean | undefined;
        allow_merge_commit?: boolean | undefined;
        allow_rebase_merge?: boolean | undefined;
        allow_squash_merge?: boolean | undefined;
        allow_update_branch?: boolean | undefined;
        archive_url: string;
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        default_branch: string;
        delete_branch_on_merge?: boolean | undefined;
        deployments_url: string;
        description: string | null;
        disabled?: boolean | undefined;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        has_downloads: boolean;
        has_issues: boolean;
        has_pages: boolean;
        has_projects: boolean;
        has_wiki: boolean;
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        id: number;
        is_template?: boolean | undefined;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
        master_branch?: string | undefined;
        merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
        merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string | undefined;
        owner: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        permissions?:
          | {
              admin: boolean;
              maintain?: boolean | undefined;
              pull: boolean;
              push: boolean;
              triage?: boolean | undefined;
            }
          | undefined;
        private: boolean;
        public?: boolean | undefined;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: (string | null) | undefined;
        size: number;
        squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
        squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
        ssh_url: string;
        stargazers?: number | undefined;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        use_squash_pr_title_as_default?: boolean | undefined;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        web_commit_signoff_required?: boolean | undefined;
      };
      sha: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    body: string | null;
    changed_files?: number | undefined;
    closed_at: string | null;
    comments?: number | undefined;
    comments_url: string;
    commits?: number | undefined;
    commits_url: string;
    created_at: string;
    deletions?: number | undefined;
    diff_url: string;
    draft: boolean;
    head: {
      label: string;
      ref: string;
      repo: {
        allow_auto_merge?: boolean | undefined;
        allow_forking?: boolean | undefined;
        allow_merge_commit?: boolean | undefined;
        allow_rebase_merge?: boolean | undefined;
        allow_squash_merge?: boolean | undefined;
        allow_update_branch?: boolean | undefined;
        archive_url: string;
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        default_branch: string;
        delete_branch_on_merge?: boolean | undefined;
        deployments_url: string;
        description: string | null;
        disabled?: boolean | undefined;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        has_downloads: boolean;
        has_issues: boolean;
        has_pages: boolean;
        has_projects: boolean;
        has_wiki: boolean;
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        id: number;
        is_template?: boolean | undefined;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
        master_branch?: string | undefined;
        merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
        merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string | undefined;
        owner: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        permissions?:
          | {
              admin: boolean;
              maintain?: boolean | undefined;
              pull: boolean;
              push: boolean;
              triage?: boolean | undefined;
            }
          | undefined;
        private: boolean;
        public?: boolean | undefined;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: (string | null) | undefined;
        size: number;
        squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
        squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
        ssh_url: string;
        stargazers?: number | undefined;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        use_squash_pr_title_as_default?: boolean | undefined;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        web_commit_signoff_required?: boolean | undefined;
      };
      sha: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      name: string;
      node_id: string;
      url: string;
    }>;
    locked: boolean;
    maintainer_can_modify?: boolean | undefined;
    merge_commit_sha: string | null;
    mergeable?: (boolean | null) | undefined;
    mergeable_state?: string | undefined;
    merged?: (boolean | null) | undefined;
    merged_at: string | null;
    merged_by?:
      | ({
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null)
      | undefined;
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      number: number;
      open_issues: number;
      state: "open" | "closed";
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    patch_url: string;
    rebaseable?: (boolean | null) | undefined;
    requested_reviewers: Array<
      | ({
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
        } | null)
      | {
          deleted?: boolean | undefined;
          description?: (string | null) | undefined;
          html_url?: string | undefined;
          id: number;
          members_url?: string | undefined;
          name: string;
          node_id?: string | undefined;
          parent?:
            | ({
                description: string | null;
                html_url: string;
                id: number;
                members_url: string;
                name: string;
                node_id: string;
                permission: string;
                privacy: "open" | "closed" | "secret";
                repositories_url: string;
                slug: string;
                url: string;
              } | null)
            | undefined;
          permission?: string | undefined;
          privacy?: ("open" | "closed" | "secret") | undefined;
          repositories_url?: string | undefined;
          slug?: string | undefined;
          url?: string | undefined;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean | undefined;
      description?: (string | null) | undefined;
      html_url?: string | undefined;
      id: number;
      members_url?: string | undefined;
      name: string;
      node_id?: string | undefined;
      parent?:
        | ({
            description: string | null;
            html_url: string;
            id: number;
            members_url: string;
            name: string;
            node_id: string;
            permission: string;
            privacy: "open" | "closed" | "secret";
            repositories_url: string;
            slug: string;
            url: string;
          } | null)
        | undefined;
      permission?: string | undefined;
      privacy?: ("open" | "closed" | "secret") | undefined;
      repositories_url?: string | undefined;
      slug?: string | undefined;
      url?: string | undefined;
    }>;
    review_comment_url: string;
    review_comments?: number | undefined;
    review_comments_url: string;
    state: "open" | "closed";
    statuses_url: string;
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
  };
  export type webhooks_review_comment = {
    _links: { html: { href: string }; pull_request: { href: string }; self: { href: string } };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    body: string;
    commit_id: string;
    created_at: string;
    diff_hunk: string;
    html_url: string;
    id: number;
    in_reply_to_id?: number | undefined;
    line: number | null;
    node_id: string;
    original_commit_id: string;
    original_line: number;
    original_position: number;
    original_start_line: number | null;
    path: string;
    position: number | null;
    pull_request_review_id: number | null;
    pull_request_url: string;
    reactions: {
      "+1": number;
      "-1": number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    side: "LEFT" | "RIGHT";
    start_line: number | null;
    start_side: ("LEFT" | "RIGHT" | "null") | null;
    subject_type?: ("line" | "file") | undefined;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
  };
  export type webhooks_review = {
    _links: { html: { href: string }; pull_request: { href: string } };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    body: string | null;
    commit_id: string;
    html_url: string;
    id: number;
    node_id: string;
    pull_request_url: string;
    state: string;
    submitted_at: string | null;
    updated_at?: (string | null) | undefined;
    user: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
  };
  export type webhooks_nullable_string = string | null;
  export type webhooks_release = {
    assets: Array<{
      browser_download_url: string;
      content_type: string;
      created_at: string;
      download_count: number;
      id: number;
      label: string | null;
      name: string;
      node_id: string;
      size: number;
      digest: string | null;
      state: "uploaded";
      updated_at: string;
      uploader?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
          } | null)
        | undefined;
      url: string;
    }>;
    assets_url: string;
    author: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
    body: string | null;
    created_at: string | null;
    updated_at: string | null;
    discussion_url?: string | undefined;
    draft: boolean;
    html_url: string;
    id: number;
    immutable: boolean;
    name: string | null;
    node_id: string;
    prerelease: boolean;
    published_at: string | null;
    reactions?:
      | {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          url: string;
        }
      | undefined;
    tag_name: string;
    tarball_url: string | null;
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string | null;
  };
  export type webhooks_release_1 = {
    assets: Array<{
      browser_download_url: string;
      content_type: string;
      created_at: string;
      download_count: number;
      id: number;
      label: string | null;
      name: string;
      node_id: string;
      size: number;
      digest: string | null;
      state: "uploaded";
      updated_at: string;
      uploader?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
          } | null)
        | undefined;
      url: string;
    } | null>;
    assets_url: string;
    author: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
    body: string | null;
    created_at: string | null;
    discussion_url?: string | undefined;
    draft: boolean;
    html_url: string;
    id: number;
    immutable: boolean;
    name: string | null;
    node_id: string;
    prerelease: boolean;
    published_at: string | null;
    reactions?:
      | {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          url: string;
        }
      | undefined;
    tag_name: string;
    tarball_url: string | null;
    target_commitish: string;
    updated_at: string | null;
    upload_url: string;
    url: string;
    zipball_url: string | null;
  };
  export type webhooks_alert = {
    affected_package_name: string;
    affected_range: string;
    created_at: string;
    dismiss_reason?: string | undefined;
    dismissed_at?: string | undefined;
    dismisser?:
      | ({
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
        } | null)
      | undefined;
    external_identifier: string;
    external_reference: string | null;
    fix_reason?: string | undefined;
    fixed_at?: string | undefined;
    fixed_in?: string | undefined;
    ghsa_id: string;
    id: number;
    node_id: string;
    number: number;
    severity: string;
    state: "open";
  };
  export type secret_scanning_alert_resolution_webhook =
    | ("false_positive" | "wont_fix" | "revoked" | "used_in_tests" | "pattern_deleted" | "pattern_edited")
    | null;
  export type secret_scanning_alert_webhook = Partial<{
    number: alert_number;
    created_at: alert_created_at;
    updated_at: nullable_alert_updated_at;
    url: alert_url;
    html_url: alert_html_url;
    locations_url: string;
    resolution: secret_scanning_alert_resolution_webhook;
    resolved_at: string | null;
    resolved_by: nullable_simple_user;
    resolution_comment: string | null;
    secret_type: string;
    secret_type_display_name: string;
    validity: "active" | "inactive" | "unknown";
    push_protection_bypassed: boolean | null;
    push_protection_bypassed_by: nullable_simple_user;
    push_protection_bypassed_at: string | null;
    push_protection_bypass_request_reviewer: nullable_simple_user;
    push_protection_bypass_request_reviewer_comment: string | null;
    push_protection_bypass_request_comment: string | null;
    push_protection_bypass_request_html_url: string | null;
    publicly_leaked: boolean | null;
    multi_repo: boolean | null;
  }>;
  export type webhooks_security_advisory = {
    cvss: { score: number; vector_string: string | null };
    cvss_severities?: cvss_severities | undefined;
    cwes: Array<{ cwe_id: string; name: string }>;
    description: string;
    ghsa_id: string;
    identifiers: Array<{ type: string; value: string }>;
    published_at: string;
    references: Array<{ url: string }>;
    severity: string;
    summary: string;
    updated_at: string;
    vulnerabilities: Array<{
      first_patched_version: { identifier: string } | null;
      package: { ecosystem: string; name: string };
      severity: string;
      vulnerable_version_range: string;
    }>;
    withdrawn_at: string | null;
  };
  export type webhooks_sponsorship = {
    created_at: string;
    maintainer?:
      | Partial<{
          avatar_url: string;
          events_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: string;
          html_url: string;
          id: number;
          login: string;
          node_id: string;
          organizations_url: string;
          received_events_url: string;
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          subscriptions_url: string;
          type: string;
          url: string;
          user_view_type: string;
        }>
      | undefined;
    node_id: string;
    privacy_level: string;
    sponsor: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
    sponsorable: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
    tier: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean | undefined;
      is_custom_amount?: boolean | undefined;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
  export type webhooks_effective_date = string;
  export type webhooks_changes_8 = {
    tier: {
      from: {
        created_at: string;
        description: string;
        is_custom_ammount?: boolean | undefined;
        is_custom_amount?: boolean | undefined;
        is_one_time: boolean;
        monthly_price_in_cents: number;
        monthly_price_in_dollars: number;
        name: string;
        node_id: string;
      };
    };
  };
  export type webhooks_team_1 = {
    deleted?: boolean | undefined;
    description?: (string | null) | undefined;
    html_url?: string | undefined;
    id: number;
    members_url?: string | undefined;
    name: string;
    node_id?: string | undefined;
    parent?:
      | ({
          description: string | null;
          html_url: string;
          id: number;
          members_url: string;
          name: string;
          node_id: string;
          permission: string;
          privacy: "open" | "closed" | "secret";
          notification_setting: "notifications_enabled" | "notifications_disabled";
          repositories_url: string;
          slug: string;
          url: string;
        } | null)
      | undefined;
    permission?: string | undefined;
    privacy?: ("open" | "closed" | "secret") | undefined;
    notification_setting?: ("notifications_enabled" | "notifications_disabled") | undefined;
    repositories_url?: string | undefined;
    slug?: string | undefined;
    url?: string | undefined;
  };
  export type webhook_branch_protection_configuration_disabled = {
    action: "disabled";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_branch_protection_configuration_enabled = {
    action: "enabled";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_branch_protection_rule_created = {
    action: "created";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    rule: webhooks_rule;
    sender: simple_user;
  };
  export type webhook_branch_protection_rule_deleted = {
    action: "deleted";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    rule: webhooks_rule;
    sender: simple_user;
  };
  export type webhook_branch_protection_rule_edited = {
    action: "edited";
    changes?:
      | Partial<{
          admin_enforced: { from: boolean | null };
          authorized_actor_names: { from: Array<string> };
          authorized_actors_only: { from: boolean | null };
          authorized_dismissal_actors_only: { from: boolean | null };
          linear_history_requirement_enforcement_level: { from: "off" | "non_admins" | "everyone" };
          lock_branch_enforcement_level: { from: "off" | "non_admins" | "everyone" };
          lock_allows_fork_sync: { from: boolean | null };
          pull_request_reviews_enforcement_level: { from: "off" | "non_admins" | "everyone" };
          require_last_push_approval: { from: boolean | null };
          required_status_checks: { from: Array<string> };
          required_status_checks_enforcement_level: { from: "off" | "non_admins" | "everyone" };
        }>
      | undefined;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    rule: webhooks_rule;
    sender: simple_user;
  };
  export type webhook_check_run_completed = {
    action?: "completed" | undefined;
    check_run: check_run_with_simple_check_suite;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_check_run_completed_form_encoded = { payload: string };
  export type webhook_check_run_created = {
    action?: "created" | undefined;
    check_run: check_run_with_simple_check_suite;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_check_run_created_form_encoded = { payload: string };
  export type webhook_check_run_requested_action = {
    action: "requested_action";
    check_run: check_run_with_simple_check_suite;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    requested_action?: Partial<{ identifier: string }> | undefined;
    sender: simple_user;
  };
  export type webhook_check_run_requested_action_form_encoded = { payload: string };
  export type webhook_check_run_rerequested = {
    action?: "rerequested" | undefined;
    check_run: check_run_with_simple_check_suite;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_check_run_rerequested_form_encoded = { payload: string };
  export type webhook_check_suite_completed = {
    action: "completed";
    check_suite: {
      after: string | null;
      app: {
        created_at: string | null;
        description: string | null;
        events?:
          | Array<
              | "branch_protection_rule"
              | "check_run"
              | "check_suite"
              | "code_scanning_alert"
              | "commit_comment"
              | "content_reference"
              | "create"
              | "delete"
              | "deployment"
              | "deployment_review"
              | "deployment_status"
              | "deploy_key"
              | "discussion"
              | "discussion_comment"
              | "fork"
              | "gollum"
              | "issues"
              | "issue_comment"
              | "label"
              | "member"
              | "membership"
              | "milestone"
              | "organization"
              | "org_block"
              | "page_build"
              | "project"
              | "project_card"
              | "project_column"
              | "public"
              | "pull_request"
              | "pull_request_review"
              | "pull_request_review_comment"
              | "push"
              | "registry_package"
              | "release"
              | "repository"
              | "repository_dispatch"
              | "secret_scanning_alert"
              | "star"
              | "status"
              | "team"
              | "team_add"
              | "watch"
              | "workflow_dispatch"
              | "workflow_run"
              | "merge_group"
              | "pull_request_review_thread"
              | "workflow_job"
              | "merge_queue_entry"
              | "security_and_analysis"
              | "projects_v2_item"
              | "secret_scanning_alert_location"
            >
          | undefined;
        external_url: string | null;
        html_url: string;
        id: number | null;
        client_id?: (string | null) | undefined;
        name: string;
        node_id: string;
        owner: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        permissions?:
          | Partial<{
              actions: "read" | "write";
              administration: "read" | "write";
              checks: "read" | "write";
              content_references: "read" | "write";
              contents: "read" | "write";
              deployments: "read" | "write";
              discussions: "read" | "write";
              emails: "read" | "write";
              environments: "read" | "write";
              issues: "read" | "write";
              keys: "read" | "write";
              members: "read" | "write";
              metadata: "read" | "write";
              organization_administration: "read" | "write";
              organization_hooks: "read" | "write";
              organization_packages: "read" | "write";
              organization_plan: "read" | "write";
              organization_projects: "read" | "write" | "admin";
              organization_secrets: "read" | "write";
              organization_self_hosted_runners: "read" | "write";
              organization_user_blocking: "read" | "write";
              packages: "read" | "write";
              pages: "read" | "write";
              pull_requests: "read" | "write";
              repository_hooks: "read" | "write";
              repository_projects: "read" | "write" | "admin";
              secret_scanning_alerts: "read" | "write";
              secrets: "read" | "write";
              security_events: "read" | "write";
              security_scanning_alert: "read" | "write";
              single_file: "read" | "write";
              statuses: "read" | "write";
              team_discussions: "read" | "write";
              vulnerability_alerts: "read" | "write";
              workflows: "read" | "write";
            }>
          | undefined;
        slug?: string | undefined;
        updated_at: string | null;
      };
      before: string | null;
      check_runs_url: string;
      conclusion:
        | (
            | "success"
            | "failure"
            | "neutral"
            | "cancelled"
            | "timed_out"
            | "action_required"
            | "stale"
            | "null"
            | "skipped"
            | "startup_failure"
          )
        | null;
      created_at: string;
      head_branch: string | null;
      head_commit: {
        author: { date?: string | undefined; email: string | null; name: string; username?: string | undefined };
        committer: { date?: string | undefined; email: string | null; name: string; username?: string | undefined };
        id: string;
        message: string;
        timestamp: string;
        tree_id: string;
      };
      head_sha: string;
      id: number;
      latest_check_runs_count: number;
      node_id: string;
      pull_requests: Array<{
        base: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        head: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        id: number;
        number: number;
        url: string;
      }>;
      rerequestable?: boolean | undefined;
      runs_rerequestable?: boolean | undefined;
      status: ("requested" | "in_progress" | "completed" | "queued" | "null" | "pending") | null;
      updated_at: string;
      url: string;
    };
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_check_suite_requested = {
    action: "requested";
    check_suite: {
      after: string | null;
      app: {
        created_at: string | null;
        description: string | null;
        events?:
          | Array<
              | "branch_protection_rule"
              | "check_run"
              | "check_suite"
              | "code_scanning_alert"
              | "commit_comment"
              | "content_reference"
              | "create"
              | "delete"
              | "deployment"
              | "deployment_review"
              | "deployment_status"
              | "deploy_key"
              | "discussion"
              | "discussion_comment"
              | "fork"
              | "gollum"
              | "issues"
              | "issue_comment"
              | "label"
              | "member"
              | "membership"
              | "milestone"
              | "organization"
              | "org_block"
              | "page_build"
              | "project"
              | "project_card"
              | "project_column"
              | "public"
              | "pull_request"
              | "pull_request_review"
              | "pull_request_review_comment"
              | "push"
              | "registry_package"
              | "release"
              | "repository"
              | "repository_dispatch"
              | "secret_scanning_alert"
              | "star"
              | "status"
              | "team"
              | "team_add"
              | "watch"
              | "workflow_dispatch"
              | "workflow_run"
              | "pull_request_review_thread"
              | "workflow_job"
              | "merge_queue_entry"
              | "security_and_analysis"
              | "secret_scanning_alert_location"
              | "projects_v2_item"
              | "merge_group"
              | "repository_import"
            >
          | undefined;
        external_url: string | null;
        html_url: string;
        id: number | null;
        client_id?: (string | null) | undefined;
        name: string;
        node_id: string;
        owner: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        permissions?:
          | Partial<{
              actions: "read" | "write";
              administration: "read" | "write";
              checks: "read" | "write";
              content_references: "read" | "write";
              contents: "read" | "write";
              deployments: "read" | "write";
              discussions: "read" | "write";
              emails: "read" | "write";
              environments: "read" | "write";
              issues: "read" | "write";
              keys: "read" | "write";
              members: "read" | "write";
              metadata: "read" | "write";
              organization_administration: "read" | "write";
              organization_hooks: "read" | "write";
              organization_packages: "read" | "write";
              organization_plan: "read" | "write";
              organization_projects: "read" | "write" | "admin";
              organization_secrets: "read" | "write";
              organization_self_hosted_runners: "read" | "write";
              organization_user_blocking: "read" | "write";
              packages: "read" | "write";
              pages: "read" | "write";
              pull_requests: "read" | "write";
              repository_hooks: "read" | "write";
              repository_projects: "read" | "write" | "admin";
              secret_scanning_alerts: "read" | "write";
              secrets: "read" | "write";
              security_events: "read" | "write";
              security_scanning_alert: "read" | "write";
              single_file: "read" | "write";
              statuses: "read" | "write";
              team_discussions: "read" | "write";
              vulnerability_alerts: "read" | "write";
              workflows: "read" | "write";
            }>
          | undefined;
        slug?: string | undefined;
        updated_at: string | null;
      };
      before: string | null;
      check_runs_url: string;
      conclusion:
        | (
            | "success"
            | "failure"
            | "neutral"
            | "cancelled"
            | "timed_out"
            | "action_required"
            | "stale"
            | "null"
            | "skipped"
          )
        | null;
      created_at: string;
      head_branch: string | null;
      head_commit: {
        author: { date?: string | undefined; email: string | null; name: string; username?: string | undefined };
        committer: { date?: string | undefined; email: string | null; name: string; username?: string | undefined };
        id: string;
        message: string;
        timestamp: string;
        tree_id: string;
      };
      head_sha: string;
      id: number;
      latest_check_runs_count: number;
      node_id: string;
      pull_requests: Array<{
        base: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        head: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        id: number;
        number: number;
        url: string;
      }>;
      rerequestable?: boolean | undefined;
      runs_rerequestable?: boolean | undefined;
      status: ("requested" | "in_progress" | "completed" | "queued" | "null") | null;
      updated_at: string;
      url: string;
    };
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_check_suite_rerequested = {
    action: "rerequested";
    check_suite: {
      after: string | null;
      app: {
        created_at: string | null;
        description: string | null;
        events?:
          | Array<
              | "branch_protection_rule"
              | "check_run"
              | "check_suite"
              | "code_scanning_alert"
              | "commit_comment"
              | "content_reference"
              | "create"
              | "delete"
              | "deployment"
              | "deployment_review"
              | "deployment_status"
              | "deploy_key"
              | "discussion"
              | "discussion_comment"
              | "fork"
              | "gollum"
              | "issues"
              | "issue_comment"
              | "label"
              | "member"
              | "membership"
              | "milestone"
              | "organization"
              | "org_block"
              | "page_build"
              | "project"
              | "project_card"
              | "project_column"
              | "public"
              | "pull_request"
              | "pull_request_review"
              | "pull_request_review_comment"
              | "push"
              | "registry_package"
              | "release"
              | "repository"
              | "repository_dispatch"
              | "secret_scanning_alert"
              | "star"
              | "status"
              | "team"
              | "team_add"
              | "watch"
              | "workflow_dispatch"
              | "workflow_run"
              | "pull_request_review_thread"
              | "merge_queue_entry"
              | "workflow_job"
            >
          | undefined;
        external_url: string | null;
        html_url: string;
        id: number | null;
        client_id?: (string | null) | undefined;
        name: string;
        node_id: string;
        owner: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        permissions?:
          | Partial<{
              actions: "read" | "write";
              administration: "read" | "write";
              checks: "read" | "write";
              content_references: "read" | "write";
              contents: "read" | "write";
              deployments: "read" | "write";
              discussions: "read" | "write";
              emails: "read" | "write";
              environments: "read" | "write";
              issues: "read" | "write";
              keys: "read" | "write";
              members: "read" | "write";
              metadata: "read" | "write";
              organization_administration: "read" | "write";
              organization_hooks: "read" | "write";
              organization_packages: "read" | "write";
              organization_plan: "read" | "write";
              organization_projects: "read" | "write" | "admin";
              organization_secrets: "read" | "write";
              organization_self_hosted_runners: "read" | "write";
              organization_user_blocking: "read" | "write";
              packages: "read" | "write";
              pages: "read" | "write";
              pull_requests: "read" | "write";
              repository_hooks: "read" | "write";
              repository_projects: "read" | "write" | "admin";
              secret_scanning_alerts: "read" | "write";
              secrets: "read" | "write";
              security_events: "read" | "write";
              security_scanning_alert: "read" | "write";
              single_file: "read" | "write";
              statuses: "read" | "write";
              team_discussions: "read" | "write";
              vulnerability_alerts: "read" | "write";
              workflows: "read" | "write";
            }>
          | undefined;
        slug?: string | undefined;
        updated_at: string | null;
      };
      before: string | null;
      check_runs_url: string;
      conclusion:
        | ("success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | "null")
        | null;
      created_at: string;
      head_branch: string | null;
      head_commit: {
        author: { date?: string | undefined; email: string | null; name: string; username?: string | undefined };
        committer: { date?: string | undefined; email: string | null; name: string; username?: string | undefined };
        id: string;
        message: string;
        timestamp: string;
        tree_id: string;
      };
      head_sha: string;
      id: number;
      latest_check_runs_count: number;
      node_id: string;
      pull_requests: Array<{
        base: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        head: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        id: number;
        number: number;
        url: string;
      }>;
      rerequestable?: boolean | undefined;
      runs_rerequestable?: boolean | undefined;
      status: ("requested" | "in_progress" | "completed" | "queued" | "null") | null;
      updated_at: string;
      url: string;
    };
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_code_scanning_alert_appeared_in_branch = {
    action: "appeared_in_branch";
    alert: {
      created_at: string;
      dismissed_at: string | null;
      dismissed_by: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      dismissed_comment?: code_scanning_alert_dismissed_comment | undefined;
      dismissed_reason: ("false positive" | "won't fix" | "used in tests" | "null") | null;
      fixed_at?: (unknown | null) | undefined;
      html_url: string;
      most_recent_instance?:
        | ({
            analysis_key: string;
            category?: string | undefined;
            classifications?: Array<string> | undefined;
            commit_sha?: string | undefined;
            environment: string;
            location?:
              | Partial<{
                  end_column: number;
                  end_line: number;
                  path: string;
                  start_column: number;
                  start_line: number;
                }>
              | undefined;
            message?: Partial<{ text: string }> | undefined;
            ref: string;
            state: "open" | "dismissed" | "fixed";
          } | null)
        | undefined;
      number: number;
      rule: { description: string; id: string; severity: ("none" | "note" | "warning" | "error" | "null") | null };
      state: ("open" | "dismissed" | "fixed") | null;
      tool: { name: string; version: string | null };
      url: string;
    };
    commit_oid: webhooks_code_scanning_commit_oid;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    ref: webhooks_code_scanning_ref;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_code_scanning_alert_closed_by_user = {
    action: "closed_by_user";
    alert: {
      created_at: string;
      dismissed_at: string;
      dismissed_by: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      dismissed_comment?: code_scanning_alert_dismissed_comment | undefined;
      dismissed_reason: ("false positive" | "won't fix" | "used in tests" | "null") | null;
      fixed_at?: (unknown | null) | undefined;
      html_url: string;
      most_recent_instance?:
        | ({
            analysis_key: string;
            category?: string | undefined;
            classifications?: Array<string> | undefined;
            commit_sha?: string | undefined;
            environment: string;
            location?:
              | Partial<{
                  end_column: number;
                  end_line: number;
                  path: string;
                  start_column: number;
                  start_line: number;
                }>
              | undefined;
            message?: Partial<{ text: string }> | undefined;
            ref: string;
            state: "open" | "dismissed" | "fixed";
          } | null)
        | undefined;
      number: number;
      rule: {
        description: string;
        full_description?: string | undefined;
        help?: (string | null) | undefined;
        help_uri?: (string | null) | undefined;
        id: string;
        name?: string | undefined;
        severity: ("none" | "note" | "warning" | "error" | "null") | null;
        tags?: (Array<string> | null) | undefined;
      };
      state: "dismissed" | "fixed";
      tool: { guid?: (string | null) | undefined; name: string; version: string | null };
      url: string;
      dismissal_approved_by?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
    };
    commit_oid: webhooks_code_scanning_commit_oid;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    ref: webhooks_code_scanning_ref;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_code_scanning_alert_created = {
    action: "created";
    alert: {
      created_at: string | null;
      dismissed_at: unknown | null;
      dismissed_by: unknown | null;
      dismissed_comment?: code_scanning_alert_dismissed_comment | undefined;
      dismissed_reason: unknown | null;
      fixed_at?: (unknown | null) | undefined;
      html_url: string;
      instances_url?: string | undefined;
      most_recent_instance?:
        | ({
            analysis_key: string;
            category?: string | undefined;
            classifications?: Array<string> | undefined;
            commit_sha?: string | undefined;
            environment: string;
            location?:
              | Partial<{
                  end_column: number;
                  end_line: number;
                  path: string;
                  start_column: number;
                  start_line: number;
                }>
              | undefined;
            message?: Partial<{ text: string }> | undefined;
            ref: string;
            state: "open" | "dismissed" | "fixed";
          } | null)
        | undefined;
      number: number;
      rule: {
        description: string;
        full_description?: string | undefined;
        help?: (string | null) | undefined;
        help_uri?: (string | null) | undefined;
        id: string;
        name?: string | undefined;
        severity: ("none" | "note" | "warning" | "error" | "null") | null;
        tags?: (Array<string> | null) | undefined;
      };
      state: ("open" | "dismissed") | null;
      tool: { guid?: (string | null) | undefined; name: string; version: string | null } | null;
      updated_at?: (string | null) | undefined;
      url: string;
      dismissal_approved_by?: (unknown | null) | undefined;
    };
    commit_oid: webhooks_code_scanning_commit_oid;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    ref: webhooks_code_scanning_ref;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_code_scanning_alert_fixed = {
    action: "fixed";
    alert: {
      created_at: string;
      dismissed_at: string | null;
      dismissed_by: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      dismissed_comment?: code_scanning_alert_dismissed_comment | undefined;
      dismissed_reason: ("false positive" | "won't fix" | "used in tests" | "null") | null;
      fixed_at?: (unknown | null) | undefined;
      html_url: string;
      instances_url?: string | undefined;
      most_recent_instance?:
        | ({
            analysis_key: string;
            category?: string | undefined;
            classifications?: Array<string> | undefined;
            commit_sha?: string | undefined;
            environment: string;
            location?:
              | Partial<{
                  end_column: number;
                  end_line: number;
                  path: string;
                  start_column: number;
                  start_line: number;
                }>
              | undefined;
            message?: Partial<{ text: string }> | undefined;
            ref: string;
            state: "open" | "dismissed" | "fixed";
          } | null)
        | undefined;
      number: number;
      rule: {
        description: string;
        full_description?: string | undefined;
        help?: (string | null) | undefined;
        help_uri?: (string | null) | undefined;
        id: string;
        name?: string | undefined;
        severity: ("none" | "note" | "warning" | "error" | "null") | null;
        tags?: (Array<string> | null) | undefined;
      };
      state: "fixed" | null;
      tool: { guid?: (string | null) | undefined; name: string; version: string | null };
      url: string;
    };
    commit_oid: webhooks_code_scanning_commit_oid;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    ref: webhooks_code_scanning_ref;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_code_scanning_alert_reopened = {
    action: "reopened";
    alert: {
      created_at: string;
      dismissed_at: string | null;
      dismissed_by: Record<string, unknown> | null;
      dismissed_comment?: code_scanning_alert_dismissed_comment | undefined;
      dismissed_reason: string | null;
      fixed_at?: (unknown | null) | undefined;
      html_url: string;
      most_recent_instance?:
        | ({
            analysis_key: string;
            category?: string | undefined;
            classifications?: Array<string> | undefined;
            commit_sha?: string | undefined;
            environment: string;
            location?:
              | Partial<{
                  end_column: number;
                  end_line: number;
                  path: string;
                  start_column: number;
                  start_line: number;
                }>
              | undefined;
            message?: Partial<{ text: string }> | undefined;
            ref: string;
            state: "open" | "dismissed" | "fixed";
          } | null)
        | undefined;
      number: number;
      rule: {
        description: string;
        full_description?: string | undefined;
        help?: (string | null) | undefined;
        help_uri?: (string | null) | undefined;
        id: string;
        name?: string | undefined;
        severity: ("none" | "note" | "warning" | "error" | "null") | null;
        tags?: (Array<string> | null) | undefined;
      };
      state: ("open" | "dismissed" | "fixed") | null;
      tool: { guid?: (string | null) | undefined; name: string; version: string | null };
      url: string;
    } | null;
    commit_oid: string | null;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    ref: string | null;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_code_scanning_alert_reopened_by_user = {
    action: "reopened_by_user";
    alert: {
      created_at: string;
      dismissed_at: unknown | null;
      dismissed_by: unknown | null;
      dismissed_comment?: code_scanning_alert_dismissed_comment | undefined;
      dismissed_reason: unknown | null;
      fixed_at?: (unknown | null) | undefined;
      html_url: string;
      most_recent_instance?:
        | ({
            analysis_key: string;
            category?: string | undefined;
            classifications?: Array<string> | undefined;
            commit_sha?: string | undefined;
            environment: string;
            location?:
              | Partial<{
                  end_column: number;
                  end_line: number;
                  path: string;
                  start_column: number;
                  start_line: number;
                }>
              | undefined;
            message?: Partial<{ text: string }> | undefined;
            ref: string;
            state: "open" | "dismissed" | "fixed";
          } | null)
        | undefined;
      number: number;
      rule: { description: string; id: string; severity: ("none" | "note" | "warning" | "error" | "null") | null };
      state: ("open" | "fixed") | null;
      tool: { name: string; version: string | null };
      url: string;
    };
    commit_oid: webhooks_code_scanning_commit_oid;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    ref: webhooks_code_scanning_ref;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_commit_comment_created = {
    action: "created";
    comment: {
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      body: string;
      commit_id: string;
      created_at: string;
      html_url: string;
      id: number;
      line: number | null;
      node_id: string;
      path: string | null;
      position: number | null;
      reactions?:
        | {
            "+1": number;
            "-1": number;
            confused: number;
            eyes: number;
            heart: number;
            hooray: number;
            laugh: number;
            rocket: number;
            total_count: number;
            url: string;
          }
        | undefined;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_create = {
    description: string | null;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    master_branch: string;
    organization?: organization_simple_webhooks | undefined;
    pusher_type: webhooks_deploy_pusher_type;
    ref: webhooks_ref_0;
    ref_type: "tag" | "branch";
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_custom_property_created = {
    action: "created";
    definition: custom_property;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    sender?: simple_user | undefined;
  };
  export type webhook_custom_property_deleted = {
    action: "deleted";
    definition: { property_name: string };
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    sender?: simple_user | undefined;
  };
  export type webhook_custom_property_promoted_to_enterprise = {
    action: "promote_to_enterprise";
    definition: custom_property;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    sender?: simple_user | undefined;
  };
  export type webhook_custom_property_updated = {
    action: "updated";
    definition: custom_property;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    sender?: simple_user | undefined;
  };
  export type webhook_custom_property_values_updated = {
    action: "updated";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    repository: repository_webhooks;
    organization: organization_simple_webhooks;
    sender?: simple_user | undefined;
    new_property_values: Array<custom_property_value>;
    old_property_values: Array<custom_property_value>;
  };
  export type webhook_delete = {
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    pusher_type: webhooks_deploy_pusher_type;
    ref: webhooks_ref_0;
    ref_type: "tag" | "branch";
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_dependabot_alert_auto_dismissed = {
    action: "auto_dismissed";
    alert: dependabot_alert;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    enterprise?: enterprise_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_dependabot_alert_auto_reopened = {
    action: "auto_reopened";
    alert: dependabot_alert;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    enterprise?: enterprise_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_dependabot_alert_created = {
    action: "created";
    alert: dependabot_alert;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    enterprise?: enterprise_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_dependabot_alert_dismissed = {
    action: "dismissed";
    alert: dependabot_alert;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    enterprise?: enterprise_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_dependabot_alert_fixed = {
    action: "fixed";
    alert: dependabot_alert;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    enterprise?: enterprise_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_dependabot_alert_reintroduced = {
    action: "reintroduced";
    alert: dependabot_alert;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    enterprise?: enterprise_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_dependabot_alert_reopened = {
    action: "reopened";
    alert: dependabot_alert;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    enterprise?: enterprise_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_deploy_key_created = {
    action: "created";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    key: webhooks_deploy_key;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_deploy_key_deleted = {
    action: "deleted";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    key: webhooks_deploy_key;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_deployment_created = {
    action: "created";
    deployment: {
      created_at: string;
      creator: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      description: string | null;
      environment: string;
      id: number;
      node_id: string;
      original_environment: string;
      payload: Record<string, unknown> | string;
      performed_via_github_app?:
        | ({
            created_at: string | null;
            description: string | null;
            events?:
              | Array<
                  | "branch_protection_rule"
                  | "check_run"
                  | "check_suite"
                  | "code_scanning_alert"
                  | "commit_comment"
                  | "content_reference"
                  | "create"
                  | "delete"
                  | "deployment"
                  | "deployment_review"
                  | "deployment_status"
                  | "deploy_key"
                  | "discussion"
                  | "discussion_comment"
                  | "fork"
                  | "gollum"
                  | "issues"
                  | "issue_comment"
                  | "label"
                  | "member"
                  | "membership"
                  | "milestone"
                  | "organization"
                  | "org_block"
                  | "page_build"
                  | "project"
                  | "project_card"
                  | "project_column"
                  | "public"
                  | "pull_request"
                  | "pull_request_review"
                  | "pull_request_review_comment"
                  | "push"
                  | "registry_package"
                  | "release"
                  | "repository"
                  | "repository_dispatch"
                  | "secret_scanning_alert"
                  | "star"
                  | "status"
                  | "team"
                  | "team_add"
                  | "watch"
                  | "workflow_dispatch"
                  | "workflow_run"
                  | "workflow_job"
                  | "pull_request_review_thread"
                  | "merge_queue_entry"
                  | "secret_scanning_alert_location"
                  | "merge_group"
                >
              | undefined;
            external_url: string | null;
            html_url: string;
            id: number | null;
            name: string;
            node_id: string;
            owner: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            permissions?:
              | Partial<{
                  actions: "read" | "write";
                  administration: "read" | "write";
                  checks: "read" | "write";
                  content_references: "read" | "write";
                  contents: "read" | "write";
                  deployments: "read" | "write";
                  discussions: "read" | "write";
                  emails: "read" | "write";
                  environments: "read" | "write";
                  issues: "read" | "write";
                  keys: "read" | "write";
                  members: "read" | "write";
                  metadata: "read" | "write";
                  organization_administration: "read" | "write";
                  organization_hooks: "read" | "write";
                  organization_packages: "read" | "write";
                  organization_plan: "read" | "write";
                  organization_projects: "read" | "write";
                  organization_secrets: "read" | "write";
                  organization_self_hosted_runners: "read" | "write";
                  organization_user_blocking: "read" | "write";
                  packages: "read" | "write";
                  pages: "read" | "write";
                  pull_requests: "read" | "write";
                  repository_hooks: "read" | "write";
                  repository_projects: "read" | "write";
                  secret_scanning_alerts: "read" | "write";
                  secrets: "read" | "write";
                  security_events: "read" | "write";
                  security_scanning_alert: "read" | "write";
                  single_file: "read" | "write";
                  statuses: "read" | "write";
                  team_discussions: "read" | "write";
                  vulnerability_alerts: "read" | "write";
                  workflows: "read" | "write";
                }>
              | undefined;
            slug?: string | undefined;
            updated_at: string | null;
          } | null)
        | undefined;
      production_environment?: boolean | undefined;
      ref: string;
      repository_url: string;
      sha: string;
      statuses_url: string;
      task: string;
      transient_environment?: boolean | undefined;
      updated_at: string;
      url: string;
    };
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
    workflow: webhooks_workflow;
    workflow_run: {
      actor: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      artifacts_url?: string | undefined;
      cancel_url?: string | undefined;
      check_suite_id: number;
      check_suite_node_id: string;
      check_suite_url?: string | undefined;
      conclusion:
        | ("success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | "null")
        | null;
      created_at: string;
      display_title: string;
      event: string;
      head_branch: string;
      head_commit?: (unknown | null) | undefined;
      head_repository?:
        | Partial<{
            archive_url: string;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            deployments_url: string;
            description: unknown | null;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            hooks_url: string;
            html_url: string;
            id: number;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            languages_url: string;
            merges_url: string;
            milestones_url: string;
            name: string;
            node_id: string;
            notifications_url: string;
            owner: Partial<{
              avatar_url: string;
              events_url: string;
              followers_url: string;
              following_url: string;
              gists_url: string;
              gravatar_id: string;
              html_url: string;
              id: number;
              login: string;
              node_id: string;
              organizations_url: string;
              received_events_url: string;
              repos_url: string;
              site_admin: boolean;
              starred_url: string;
              subscriptions_url: string;
              type: string;
              url: string;
            }>;
            private: boolean;
            pulls_url: string;
            releases_url: string;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            tags_url: string;
            teams_url: string;
            trees_url: string;
            url: string;
          }>
        | undefined;
      head_sha: string;
      html_url: string;
      id: number;
      jobs_url?: string | undefined;
      logs_url?: string | undefined;
      name: string;
      node_id: string;
      path: string;
      previous_attempt_url?: (unknown | null) | undefined;
      pull_requests: Array<{
        base: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        head: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        id: number;
        number: number;
        url: string;
      }>;
      referenced_workflows?: (Array<{ path: string; ref?: string | undefined; sha: string }> | null) | undefined;
      repository?:
        | Partial<{
            archive_url: string;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            deployments_url: string;
            description: unknown | null;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            hooks_url: string;
            html_url: string;
            id: number;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            languages_url: string;
            merges_url: string;
            milestones_url: string;
            name: string;
            node_id: string;
            notifications_url: string;
            owner: Partial<{
              avatar_url: string;
              events_url: string;
              followers_url: string;
              following_url: string;
              gists_url: string;
              gravatar_id: string;
              html_url: string;
              id: number;
              login: string;
              node_id: string;
              organizations_url: string;
              received_events_url: string;
              repos_url: string;
              site_admin: boolean;
              starred_url: string;
              subscriptions_url: string;
              type: string;
              url: string;
            }>;
            private: boolean;
            pulls_url: string;
            releases_url: string;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            tags_url: string;
            teams_url: string;
            trees_url: string;
            url: string;
          }>
        | undefined;
      rerun_url?: string | undefined;
      run_attempt: number;
      run_number: number;
      run_started_at: string;
      status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending";
      triggering_actor?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      updated_at: string;
      url: string;
      workflow_id: number;
      workflow_url?: string | undefined;
    } | null;
  };
  export type webhook_deployment_protection_rule_requested = Partial<{
    action: "requested";
    environment: string;
    event: string;
    deployment_callback_url: string;
    deployment: deployment;
    pull_requests: Array<pull_request>;
    repository: repository_webhooks;
    organization: organization_simple_webhooks;
    installation: simple_installation;
    sender: simple_user;
  }>;
  export type webhook_deployment_review_approved = {
    action: "approved";
    approver?: webhooks_approver | undefined;
    comment?: string | undefined;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    repository: repository_webhooks;
    reviewers?: webhooks_reviewers | undefined;
    sender: simple_user;
    since: string;
    workflow_job_run?: webhooks_workflow_job_run | undefined;
    workflow_job_runs?:
      | Array<
          Partial<{
            conclusion: unknown | null;
            created_at: string;
            environment: string;
            html_url: string;
            id: number;
            name: string | null;
            status: string;
            updated_at: string;
          }>
        >
      | undefined;
    workflow_run: {
      actor: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      artifacts_url?: string | undefined;
      cancel_url?: string | undefined;
      check_suite_id: number;
      check_suite_node_id: string;
      check_suite_url?: string | undefined;
      conclusion:
        | ("success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | "null")
        | null;
      created_at: string;
      display_title: string;
      event: string;
      head_branch: string;
      head_commit?: (Record<string, unknown> | null) | undefined;
      head_repository?:
        | Partial<{
            archive_url: string;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            deployments_url: string;
            description: string | null;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            hooks_url: string;
            html_url: string;
            id: number;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            languages_url: string;
            merges_url: string;
            milestones_url: string;
            name: string;
            node_id: string;
            notifications_url: string;
            owner: Partial<{
              avatar_url: string;
              events_url: string;
              followers_url: string;
              following_url: string;
              gists_url: string;
              gravatar_id: string;
              html_url: string;
              id: number;
              login: string;
              node_id: string;
              organizations_url: string;
              received_events_url: string;
              repos_url: string;
              site_admin: boolean;
              starred_url: string;
              subscriptions_url: string;
              type: string;
              url: string;
              user_view_type: string;
            }>;
            private: boolean;
            pulls_url: string;
            releases_url: string;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            tags_url: string;
            teams_url: string;
            trees_url: string;
            url: string;
          }>
        | undefined;
      head_sha: string;
      html_url: string;
      id: number;
      jobs_url?: string | undefined;
      logs_url?: string | undefined;
      name: string;
      node_id: string;
      path: string;
      previous_attempt_url?: (string | null) | undefined;
      pull_requests: Array<{
        base: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        head: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        id: number;
        number: number;
        url: string;
      }>;
      referenced_workflows?: (Array<{ path: string; ref?: string | undefined; sha: string }> | null) | undefined;
      repository?:
        | Partial<{
            archive_url: string;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            deployments_url: string;
            description: string | null;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            hooks_url: string;
            html_url: string;
            id: number;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            languages_url: string;
            merges_url: string;
            milestones_url: string;
            name: string;
            node_id: string;
            notifications_url: string;
            owner: Partial<{
              avatar_url: string;
              events_url: string;
              followers_url: string;
              following_url: string;
              gists_url: string;
              gravatar_id: string;
              html_url: string;
              id: number;
              login: string;
              node_id: string;
              organizations_url: string;
              received_events_url: string;
              repos_url: string;
              site_admin: boolean;
              starred_url: string;
              subscriptions_url: string;
              type: string;
              url: string;
              user_view_type: string;
            }>;
            private: boolean;
            pulls_url: string;
            releases_url: string;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            tags_url: string;
            teams_url: string;
            trees_url: string;
            url: string;
          }>
        | undefined;
      rerun_url?: string | undefined;
      run_attempt: number;
      run_number: number;
      run_started_at: string;
      status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending";
      triggering_actor: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      updated_at: string;
      url: string;
      workflow_id: number;
      workflow_url?: string | undefined;
    } | null;
  };
  export type webhook_deployment_review_rejected = {
    action: "rejected";
    approver?: webhooks_approver | undefined;
    comment?: string | undefined;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    repository: repository_webhooks;
    reviewers?: webhooks_reviewers | undefined;
    sender: simple_user;
    since: string;
    workflow_job_run?: webhooks_workflow_job_run | undefined;
    workflow_job_runs?:
      | Array<
          Partial<{
            conclusion: string | null;
            created_at: string;
            environment: string;
            html_url: string;
            id: number;
            name: string | null;
            status: string;
            updated_at: string;
          }>
        >
      | undefined;
    workflow_run: {
      actor: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      artifacts_url?: string | undefined;
      cancel_url?: string | undefined;
      check_suite_id: number;
      check_suite_node_id: string;
      check_suite_url?: string | undefined;
      conclusion:
        | ("success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | "null")
        | null;
      created_at: string;
      event: string;
      head_branch: string;
      head_commit?: (Record<string, unknown> | null) | undefined;
      head_repository?:
        | Partial<{
            archive_url: string;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            deployments_url: string;
            description: string | null;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            hooks_url: string;
            html_url: string;
            id: number;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            languages_url: string;
            merges_url: string;
            milestones_url: string;
            name: string;
            node_id: string;
            notifications_url: string;
            owner: Partial<{
              avatar_url: string;
              events_url: string;
              followers_url: string;
              following_url: string;
              gists_url: string;
              gravatar_id: string;
              html_url: string;
              id: number;
              login: string;
              node_id: string;
              organizations_url: string;
              received_events_url: string;
              repos_url: string;
              site_admin: boolean;
              starred_url: string;
              subscriptions_url: string;
              type: string;
              url: string;
              user_view_type: string;
            }>;
            private: boolean;
            pulls_url: string;
            releases_url: string;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            tags_url: string;
            teams_url: string;
            trees_url: string;
            url: string;
          }>
        | undefined;
      head_sha: string;
      html_url: string;
      id: number;
      jobs_url?: string | undefined;
      logs_url?: string | undefined;
      name: string;
      node_id: string;
      path: string;
      previous_attempt_url?: (string | null) | undefined;
      pull_requests: Array<{
        base: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        head: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        id: number;
        number: number;
        url: string;
      }>;
      referenced_workflows?: (Array<{ path: string; ref?: string | undefined; sha: string }> | null) | undefined;
      repository?:
        | Partial<{
            archive_url: string;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            deployments_url: string;
            description: string | null;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            hooks_url: string;
            html_url: string;
            id: number;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            languages_url: string;
            merges_url: string;
            milestones_url: string;
            name: string;
            node_id: string;
            notifications_url: string;
            owner: Partial<{
              avatar_url: string;
              events_url: string;
              followers_url: string;
              following_url: string;
              gists_url: string;
              gravatar_id: string;
              html_url: string;
              id: number;
              login: string;
              node_id: string;
              organizations_url: string;
              received_events_url: string;
              repos_url: string;
              site_admin: boolean;
              starred_url: string;
              subscriptions_url: string;
              type: string;
              url: string;
              user_view_type: string;
            }>;
            private: boolean;
            pulls_url: string;
            releases_url: string;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            tags_url: string;
            teams_url: string;
            trees_url: string;
            url: string;
          }>
        | undefined;
      rerun_url?: string | undefined;
      run_attempt: number;
      run_number: number;
      run_started_at: string;
      status: "requested" | "in_progress" | "completed" | "queued" | "waiting";
      triggering_actor: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      updated_at: string;
      url: string;
      workflow_id: number;
      workflow_url?: string | undefined;
      display_title: string;
    } | null;
  };
  export type webhook_deployment_review_requested = {
    action: "requested";
    enterprise?: enterprise_webhooks | undefined;
    environment: string;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    repository: repository_webhooks;
    requestor: webhooks_user;
    reviewers: Array<
      Partial<{
        reviewer: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login?: string | undefined;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        type: "User" | "Team";
      }>
    >;
    sender: simple_user;
    since: string;
    workflow_job_run: {
      conclusion: unknown | null;
      created_at: string;
      environment: string;
      html_url: string;
      id: number;
      name: string | null;
      status: string;
      updated_at: string;
    };
    workflow_run: {
      actor: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      artifacts_url?: string | undefined;
      cancel_url?: string | undefined;
      check_suite_id: number;
      check_suite_node_id: string;
      check_suite_url?: string | undefined;
      conclusion:
        | ("success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | "null")
        | null;
      created_at: string;
      event: string;
      head_branch: string;
      head_commit?: (Record<string, unknown> | null) | undefined;
      head_repository?:
        | Partial<{
            archive_url: string;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            deployments_url: string;
            description: string | null;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            hooks_url: string;
            html_url: string;
            id: number;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            languages_url: string;
            merges_url: string;
            milestones_url: string;
            name: string;
            node_id: string;
            notifications_url: string;
            owner: Partial<{
              avatar_url: string;
              events_url: string;
              followers_url: string;
              following_url: string;
              gists_url: string;
              gravatar_id: string;
              html_url: string;
              id: number;
              login: string;
              node_id: string;
              organizations_url: string;
              received_events_url: string;
              repos_url: string;
              site_admin: boolean;
              starred_url: string;
              subscriptions_url: string;
              type: string;
              url: string;
              user_view_type: string;
            }>;
            private: boolean;
            pulls_url: string;
            releases_url: string;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            tags_url: string;
            teams_url: string;
            trees_url: string;
            url: string;
          }>
        | undefined;
      head_sha: string;
      html_url: string;
      id: number;
      jobs_url?: string | undefined;
      logs_url?: string | undefined;
      name: string;
      node_id: string;
      path: string;
      previous_attempt_url?: (string | null) | undefined;
      pull_requests: Array<{
        base: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        head: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        id: number;
        number: number;
        url: string;
      }>;
      referenced_workflows?: (Array<{ path: string; ref?: string | undefined; sha: string }> | null) | undefined;
      repository?:
        | Partial<{
            archive_url: string;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            deployments_url: string;
            description: string | null;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            hooks_url: string;
            html_url: string;
            id: number;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            languages_url: string;
            merges_url: string;
            milestones_url: string;
            name: string;
            node_id: string;
            notifications_url: string;
            owner: Partial<{
              avatar_url: string;
              events_url: string;
              followers_url: string;
              following_url: string;
              gists_url: string;
              gravatar_id: string;
              html_url: string;
              id: number;
              login: string;
              node_id: string;
              organizations_url: string;
              received_events_url: string;
              repos_url: string;
              site_admin: boolean;
              starred_url: string;
              subscriptions_url: string;
              type: string;
              url: string;
              user_view_type: string;
            }>;
            private: boolean;
            pulls_url: string;
            releases_url: string;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            tags_url: string;
            teams_url: string;
            trees_url: string;
            url: string;
          }>
        | undefined;
      rerun_url?: string | undefined;
      run_attempt: number;
      run_number: number;
      run_started_at: string;
      status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending";
      triggering_actor: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      updated_at: string;
      url: string;
      workflow_id: number;
      workflow_url?: string | undefined;
      display_title: string;
    } | null;
  };
  export type webhook_deployment_status_created = {
    action: "created";
    check_run?:
      | ({
          completed_at: string | null;
          conclusion:
            | (
                | "success"
                | "failure"
                | "neutral"
                | "cancelled"
                | "timed_out"
                | "action_required"
                | "stale"
                | "skipped"
                | "null"
              )
            | null;
          details_url: string;
          external_id: string;
          head_sha: string;
          html_url: string;
          id: number;
          name: string;
          node_id: string;
          started_at: string;
          status: "queued" | "in_progress" | "completed" | "waiting" | "pending";
          url: string;
        } | null)
      | undefined;
    deployment: {
      created_at: string;
      creator: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      description: string | null;
      environment: string;
      id: number;
      node_id: string;
      original_environment: string;
      payload: (string | Record<string, unknown>) | null;
      performed_via_github_app?:
        | ({
            created_at: string | null;
            description: string | null;
            events?:
              | Array<
                  | "branch_protection_rule"
                  | "check_run"
                  | "check_suite"
                  | "code_scanning_alert"
                  | "commit_comment"
                  | "content_reference"
                  | "create"
                  | "delete"
                  | "deployment"
                  | "deployment_review"
                  | "deployment_status"
                  | "deploy_key"
                  | "discussion"
                  | "discussion_comment"
                  | "fork"
                  | "gollum"
                  | "issues"
                  | "issue_comment"
                  | "label"
                  | "member"
                  | "membership"
                  | "milestone"
                  | "organization"
                  | "org_block"
                  | "page_build"
                  | "project"
                  | "project_card"
                  | "project_column"
                  | "public"
                  | "pull_request"
                  | "pull_request_review"
                  | "pull_request_review_comment"
                  | "push"
                  | "registry_package"
                  | "release"
                  | "repository"
                  | "repository_dispatch"
                  | "secret_scanning_alert"
                  | "star"
                  | "status"
                  | "team"
                  | "team_add"
                  | "watch"
                  | "workflow_dispatch"
                  | "workflow_run"
                  | "merge_queue_entry"
                  | "workflow_job"
                  | "pull_request_review_thread"
                  | "secret_scanning_alert_location"
                  | "merge_group"
                >
              | undefined;
            external_url: string | null;
            html_url: string;
            id: number | null;
            name: string;
            node_id: string;
            owner: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            permissions?:
              | Partial<{
                  actions: "read" | "write";
                  administration: "read" | "write";
                  checks: "read" | "write";
                  content_references: "read" | "write";
                  contents: "read" | "write";
                  deployments: "read" | "write";
                  discussions: "read" | "write";
                  emails: "read" | "write";
                  environments: "read" | "write";
                  issues: "read" | "write";
                  keys: "read" | "write";
                  members: "read" | "write";
                  metadata: "read" | "write";
                  organization_administration: "read" | "write";
                  organization_hooks: "read" | "write";
                  organization_packages: "read" | "write";
                  organization_plan: "read" | "write";
                  organization_projects: "read" | "write";
                  organization_secrets: "read" | "write";
                  organization_self_hosted_runners: "read" | "write";
                  organization_user_blocking: "read" | "write";
                  packages: "read" | "write";
                  pages: "read" | "write";
                  pull_requests: "read" | "write";
                  repository_hooks: "read" | "write";
                  repository_projects: "read" | "write";
                  secret_scanning_alerts: "read" | "write";
                  secrets: "read" | "write";
                  security_events: "read" | "write";
                  security_scanning_alert: "read" | "write";
                  single_file: "read" | "write";
                  statuses: "read" | "write";
                  team_discussions: "read" | "write";
                  vulnerability_alerts: "read" | "write";
                  workflows: "read" | "write";
                }>
              | undefined;
            slug?: string | undefined;
            updated_at: string | null;
          } | null)
        | undefined;
      production_environment?: boolean | undefined;
      ref: string;
      repository_url: string;
      sha: string;
      statuses_url: string;
      task: string;
      transient_environment?: boolean | undefined;
      updated_at: string;
      url: string;
    };
    deployment_status: {
      created_at: string;
      creator: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      deployment_url: string;
      description: string;
      environment: string;
      environment_url?: string | undefined;
      id: number;
      log_url?: string | undefined;
      node_id: string;
      performed_via_github_app?:
        | ({
            created_at: string | null;
            description: string | null;
            events?:
              | Array<
                  | "branch_protection_rule"
                  | "check_run"
                  | "check_suite"
                  | "code_scanning_alert"
                  | "commit_comment"
                  | "content_reference"
                  | "create"
                  | "delete"
                  | "deployment"
                  | "deployment_review"
                  | "deployment_status"
                  | "deploy_key"
                  | "discussion"
                  | "discussion_comment"
                  | "fork"
                  | "gollum"
                  | "issues"
                  | "issue_comment"
                  | "label"
                  | "member"
                  | "membership"
                  | "milestone"
                  | "organization"
                  | "org_block"
                  | "page_build"
                  | "project"
                  | "project_card"
                  | "project_column"
                  | "public"
                  | "pull_request"
                  | "pull_request_review"
                  | "pull_request_review_comment"
                  | "push"
                  | "registry_package"
                  | "release"
                  | "repository"
                  | "repository_dispatch"
                  | "secret_scanning_alert"
                  | "star"
                  | "status"
                  | "team"
                  | "team_add"
                  | "watch"
                  | "workflow_dispatch"
                  | "workflow_run"
                  | "pull_request_review_thread"
                  | "merge_queue_entry"
                  | "workflow_job"
                  | "merge_group"
                  | "secret_scanning_alert_location"
                >
              | undefined;
            external_url: string | null;
            html_url: string;
            id: number | null;
            name: string;
            node_id: string;
            owner: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            permissions?:
              | Partial<{
                  actions: "read" | "write";
                  administration: "read" | "write";
                  checks: "read" | "write";
                  content_references: "read" | "write";
                  contents: "read" | "write";
                  deployments: "read" | "write";
                  discussions: "read" | "write";
                  emails: "read" | "write";
                  environments: "read" | "write";
                  issues: "read" | "write";
                  keys: "read" | "write";
                  members: "read" | "write";
                  metadata: "read" | "write";
                  organization_administration: "read" | "write";
                  organization_hooks: "read" | "write";
                  organization_packages: "read" | "write";
                  organization_plan: "read" | "write";
                  organization_projects: "read" | "write";
                  organization_secrets: "read" | "write";
                  organization_self_hosted_runners: "read" | "write";
                  organization_user_blocking: "read" | "write";
                  packages: "read" | "write";
                  pages: "read" | "write";
                  pull_requests: "read" | "write";
                  repository_hooks: "read" | "write";
                  repository_projects: "read" | "write";
                  secret_scanning_alerts: "read" | "write";
                  secrets: "read" | "write";
                  security_events: "read" | "write";
                  security_scanning_alert: "read" | "write";
                  single_file: "read" | "write";
                  statuses: "read" | "write";
                  team_discussions: "read" | "write";
                  vulnerability_alerts: "read" | "write";
                  workflows: "read" | "write";
                }>
              | undefined;
            slug?: string | undefined;
            updated_at: string | null;
          } | null)
        | undefined;
      repository_url: string;
      state: string;
      target_url: string;
      updated_at: string;
      url: string;
    };
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
    workflow?: webhooks_workflow | undefined;
    workflow_run?:
      | ({
          actor: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          artifacts_url?: string | undefined;
          cancel_url?: string | undefined;
          check_suite_id: number;
          check_suite_node_id: string;
          check_suite_url?: string | undefined;
          conclusion:
            | (
                | "success"
                | "failure"
                | "neutral"
                | "cancelled"
                | "timed_out"
                | "action_required"
                | "stale"
                | "null"
                | "startup_failure"
              )
            | null;
          created_at: string;
          display_title: string;
          event: string;
          head_branch: string;
          head_commit?: (unknown | null) | undefined;
          head_repository?:
            | Partial<{
                archive_url: string;
                assignees_url: string;
                blobs_url: string;
                branches_url: string;
                collaborators_url: string;
                comments_url: string;
                commits_url: string;
                compare_url: string;
                contents_url: string;
                contributors_url: string;
                deployments_url: string;
                description: unknown | null;
                downloads_url: string;
                events_url: string;
                fork: boolean;
                forks_url: string;
                full_name: string;
                git_commits_url: string;
                git_refs_url: string;
                git_tags_url: string;
                hooks_url: string;
                html_url: string;
                id: number;
                issue_comment_url: string;
                issue_events_url: string;
                issues_url: string;
                keys_url: string;
                labels_url: string;
                languages_url: string;
                merges_url: string;
                milestones_url: string;
                name: string;
                node_id: string;
                notifications_url: string;
                owner: Partial<{
                  avatar_url: string;
                  events_url: string;
                  followers_url: string;
                  following_url: string;
                  gists_url: string;
                  gravatar_id: string;
                  html_url: string;
                  id: number;
                  login: string;
                  node_id: string;
                  organizations_url: string;
                  received_events_url: string;
                  repos_url: string;
                  site_admin: boolean;
                  starred_url: string;
                  subscriptions_url: string;
                  type: string;
                  url: string;
                }>;
                private: boolean;
                pulls_url: string;
                releases_url: string;
                stargazers_url: string;
                statuses_url: string;
                subscribers_url: string;
                subscription_url: string;
                tags_url: string;
                teams_url: string;
                trees_url: string;
                url: string;
              }>
            | undefined;
          head_sha: string;
          html_url: string;
          id: number;
          jobs_url?: string | undefined;
          logs_url?: string | undefined;
          name: string;
          node_id: string;
          path: string;
          previous_attempt_url?: (unknown | null) | undefined;
          pull_requests: Array<{
            base: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
            head: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
            id: number;
            number: number;
            url: string;
          }>;
          referenced_workflows?: (Array<{ path: string; ref?: string | undefined; sha: string }> | null) | undefined;
          repository?:
            | Partial<{
                archive_url: string;
                assignees_url: string;
                blobs_url: string;
                branches_url: string;
                collaborators_url: string;
                comments_url: string;
                commits_url: string;
                compare_url: string;
                contents_url: string;
                contributors_url: string;
                deployments_url: string;
                description: unknown | null;
                downloads_url: string;
                events_url: string;
                fork: boolean;
                forks_url: string;
                full_name: string;
                git_commits_url: string;
                git_refs_url: string;
                git_tags_url: string;
                hooks_url: string;
                html_url: string;
                id: number;
                issue_comment_url: string;
                issue_events_url: string;
                issues_url: string;
                keys_url: string;
                labels_url: string;
                languages_url: string;
                merges_url: string;
                milestones_url: string;
                name: string;
                node_id: string;
                notifications_url: string;
                owner: Partial<{
                  avatar_url: string;
                  events_url: string;
                  followers_url: string;
                  following_url: string;
                  gists_url: string;
                  gravatar_id: string;
                  html_url: string;
                  id: number;
                  login: string;
                  node_id: string;
                  organizations_url: string;
                  received_events_url: string;
                  repos_url: string;
                  site_admin: boolean;
                  starred_url: string;
                  subscriptions_url: string;
                  type: string;
                  url: string;
                }>;
                private: boolean;
                pulls_url: string;
                releases_url: string;
                stargazers_url: string;
                statuses_url: string;
                subscribers_url: string;
                subscription_url: string;
                tags_url: string;
                teams_url: string;
                trees_url: string;
                url: string;
              }>
            | undefined;
          rerun_url?: string | undefined;
          run_attempt: number;
          run_number: number;
          run_started_at: string;
          status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending";
          triggering_actor: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          updated_at: string;
          url: string;
          workflow_id: number;
          workflow_url?: string | undefined;
        } | null)
      | undefined;
  };
  export type webhook_discussion_answered = {
    action: "answered";
    answer: webhooks_answer;
    discussion: discussion;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_discussion_category_changed = {
    action: "category_changed";
    changes: {
      category: {
        from: {
          created_at: string;
          description: string;
          emoji: string;
          id: number;
          is_answerable: boolean;
          name: string;
          node_id?: string | undefined;
          repository_id: number;
          slug: string;
          updated_at: string;
        };
      };
    };
    discussion: discussion;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_discussion_closed = {
    action: "closed";
    discussion: discussion;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_discussion_comment_created = {
    action: "created";
    comment: webhooks_comment;
    discussion: discussion;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_discussion_comment_deleted = {
    action: "deleted";
    comment: webhooks_comment;
    discussion: discussion;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_discussion_comment_edited = {
    action: "edited";
    changes: { body: { from: string } };
    comment: webhooks_comment;
    discussion: discussion;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_discussion_created = {
    action: "created";
    discussion: discussion;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_discussion_deleted = {
    action: "deleted";
    discussion: discussion;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_discussion_edited = {
    action: "edited";
    changes?: Partial<{ body: { from: string }; title: { from: string } }> | undefined;
    discussion: discussion;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_discussion_labeled = {
    action: "labeled";
    discussion: discussion;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    label: webhooks_label;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_discussion_locked = {
    action: "locked";
    discussion: discussion;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_discussion_pinned = {
    action: "pinned";
    discussion: discussion;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_discussion_reopened = {
    action: "reopened";
    discussion: discussion;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_discussion_transferred = {
    action: "transferred";
    changes: { new_discussion: discussion; new_repository: repository_webhooks };
    discussion: discussion;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_discussion_unanswered = {
    action: "unanswered";
    discussion: discussion;
    old_answer: webhooks_answer;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender?: simple_user | undefined;
  };
  export type webhook_discussion_unlabeled = {
    action: "unlabeled";
    discussion: discussion;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    label: webhooks_label;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_discussion_unlocked = {
    action: "unlocked";
    discussion: discussion;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_discussion_unpinned = {
    action: "unpinned";
    discussion: discussion;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_fork = {
    enterprise?: enterprise_webhooks | undefined;
    forkee: {
      allow_auto_merge?: boolean | undefined;
      allow_forking?: boolean | undefined;
      allow_merge_commit?: boolean | undefined;
      allow_rebase_merge?: boolean | undefined;
      allow_squash_merge?: boolean | undefined;
      allow_update_branch?: boolean | undefined;
      archive_url: string;
      archived: boolean;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      clone_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      created_at: number | string;
      default_branch: string;
      delete_branch_on_merge?: boolean | undefined;
      deployments_url: string;
      description: string | null;
      disabled?: boolean | undefined;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      has_downloads: boolean;
      has_issues: boolean;
      has_pages: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      homepage: string | null;
      hooks_url: string;
      html_url: string;
      id: number;
      is_template?: boolean | undefined;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      language: string | null;
      languages_url: string;
      license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
      master_branch?: string | undefined;
      merges_url: string;
      milestones_url: string;
      mirror_url: string | null;
      name: string;
      node_id: string;
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      organization?: string | undefined;
      owner: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      permissions?:
        | { admin: boolean; maintain?: boolean | undefined; pull: boolean; push: boolean; triage?: boolean | undefined }
        | undefined;
      private: boolean;
      public?: boolean | undefined;
      pulls_url: string;
      pushed_at: (number | string) | null;
      releases_url: string;
      role_name?: (string | null) | undefined;
      size: number;
      ssh_url: string;
      stargazers?: number | undefined;
      stargazers_count: number;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      svn_url: string;
      tags_url: string;
      teams_url: string;
      topics: Array<string>;
      trees_url: string;
      updated_at: string;
      url: string;
      visibility: "public" | "private" | "internal";
      watchers: number;
      watchers_count: number;
      web_commit_signoff_required?: boolean | undefined;
    } & Partial<{
      allow_forking: boolean;
      archive_url: string;
      archived: boolean;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      clone_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      created_at: string;
      default_branch: string;
      deployments_url: string;
      description: string | null;
      disabled: boolean;
      downloads_url: string;
      events_url: string;
      fork: true;
      forks: number;
      forks_count: number;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      has_downloads: boolean;
      has_issues: boolean;
      has_pages: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      homepage: string | null;
      hooks_url: string;
      html_url: string;
      id: number;
      is_template: boolean;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      language: unknown | null;
      languages_url: string;
      license: Record<string, unknown> | null;
      merges_url: string;
      milestones_url: string;
      mirror_url: unknown | null;
      name: string;
      node_id: string;
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      owner: Partial<{
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      }>;
      private: boolean;
      public: boolean;
      pulls_url: string;
      pushed_at: string;
      releases_url: string;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      svn_url: string;
      tags_url: string;
      teams_url: string;
      topics: Array<unknown | null>;
      trees_url: string;
      updated_at: string;
      url: string;
      visibility: string;
      watchers: number;
      watchers_count: number;
    }>;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_github_app_authorization_revoked = { action: "revoked"; sender: simple_user };
  export type webhook_gollum = {
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    pages: Array<{
      action: "created" | "edited";
      html_url: string;
      page_name: string;
      sha: string;
      summary: string | null;
      title: string;
    }>;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_installation_created = {
    action: "created";
    enterprise?: enterprise_webhooks | undefined;
    installation: installation;
    organization?: organization_simple_webhooks | undefined;
    repositories?: webhooks_repositories | undefined;
    repository?: repository_webhooks | undefined;
    requester?: webhooks_user | undefined;
    sender: simple_user;
  };
  export type webhook_installation_deleted = {
    action: "deleted";
    enterprise?: enterprise_webhooks | undefined;
    installation: installation;
    organization?: organization_simple_webhooks | undefined;
    repositories?: webhooks_repositories | undefined;
    repository?: repository_webhooks | undefined;
    requester?: (unknown | null) | undefined;
    sender: simple_user;
  };
  export type webhook_installation_new_permissions_accepted = {
    action: "new_permissions_accepted";
    enterprise?: enterprise_webhooks | undefined;
    installation: installation;
    organization?: organization_simple_webhooks | undefined;
    repositories?: webhooks_repositories | undefined;
    repository?: repository_webhooks | undefined;
    requester?: (unknown | null) | undefined;
    sender: simple_user;
  };
  export type webhook_installation_repositories_added = {
    action: "added";
    enterprise?: enterprise_webhooks | undefined;
    installation: installation;
    organization?: organization_simple_webhooks | undefined;
    repositories_added: webhooks_repositories_added;
    repositories_removed: Array<
      Partial<{ full_name: string; id: number; name: string; node_id: string; private: boolean }>
    >;
    repository?: repository_webhooks | undefined;
    repository_selection: webhooks_repository_selection;
    requester: webhooks_user;
    sender: simple_user;
  };
  export type webhook_installation_repositories_removed = {
    action: "removed";
    enterprise?: enterprise_webhooks | undefined;
    installation: installation;
    organization?: organization_simple_webhooks | undefined;
    repositories_added: webhooks_repositories_added;
    repositories_removed: Array<{ full_name: string; id: number; name: string; node_id: string; private: boolean }>;
    repository?: repository_webhooks | undefined;
    repository_selection: webhooks_repository_selection;
    requester: webhooks_user;
    sender: simple_user;
  };
  export type webhook_installation_suspend = {
    action: "suspend";
    enterprise?: enterprise_webhooks | undefined;
    installation: installation;
    organization?: organization_simple_webhooks | undefined;
    repositories?: webhooks_repositories | undefined;
    repository?: repository_webhooks | undefined;
    requester?: (unknown | null) | undefined;
    sender: simple_user;
  };
  export type webhook_installation_target_renamed = {
    account: {
      archived_at?: (string | null) | undefined;
      avatar_url: string;
      created_at?: string | undefined;
      description?: (unknown | null) | undefined;
      events_url?: string | undefined;
      followers?: number | undefined;
      followers_url?: string | undefined;
      following?: number | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      has_organization_projects?: boolean | undefined;
      has_repository_projects?: boolean | undefined;
      hooks_url?: string | undefined;
      html_url: string;
      id: number;
      is_verified?: boolean | undefined;
      issues_url?: string | undefined;
      login?: string | undefined;
      members_url?: string | undefined;
      name?: string | undefined;
      node_id: string;
      organizations_url?: string | undefined;
      public_gists?: number | undefined;
      public_members_url?: string | undefined;
      public_repos?: number | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      slug?: string | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: string | undefined;
      updated_at?: string | undefined;
      url?: string | undefined;
      website_url?: (unknown | null) | undefined;
      user_view_type?: string | undefined;
    };
    action: "renamed";
    changes: Partial<{ login: { from: string }; slug: { from: string } }>;
    enterprise?: enterprise_webhooks | undefined;
    installation: simple_installation;
    organization?: organization_simple_webhooks | undefined;
    repository?: repository_webhooks | undefined;
    sender?: simple_user | undefined;
    target_type: string;
  };
  export type webhook_installation_unsuspend = {
    action: "unsuspend";
    enterprise?: enterprise_webhooks | undefined;
    installation: installation;
    organization?: organization_simple_webhooks | undefined;
    repositories?: webhooks_repositories | undefined;
    repository?: repository_webhooks | undefined;
    requester?: (unknown | null) | undefined;
    sender: simple_user;
  };
  export type webhook_issue_comment_created = {
    action: "created";
    comment: {
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      body: string;
      created_at: string;
      html_url: string;
      id: number;
      issue_url: string;
      node_id: string;
      performed_via_github_app: nullable_integration;
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: {
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      body: string | null;
      closed_at: string | null;
      comments: number;
      comments_url: string;
      created_at: string;
      draft?: boolean | undefined;
      events_url: string;
      html_url: string;
      id: number;
      labels?:
        | Array<{
            color: string;
            default: boolean;
            description: string | null;
            id: number;
            name: string;
            node_id: string;
            url: string;
          }>
        | undefined;
      labels_url: string;
      locked?: boolean | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      performed_via_github_app?:
        | ({
            created_at: string | null;
            description: string | null;
            events?:
              | Array<
                  | "branch_protection_rule"
                  | "check_run"
                  | "check_suite"
                  | "code_scanning_alert"
                  | "commit_comment"
                  | "content_reference"
                  | "create"
                  | "delete"
                  | "deployment"
                  | "deployment_review"
                  | "deployment_status"
                  | "deploy_key"
                  | "discussion"
                  | "discussion_comment"
                  | "fork"
                  | "gollum"
                  | "issues"
                  | "issue_comment"
                  | "label"
                  | "member"
                  | "membership"
                  | "milestone"
                  | "organization"
                  | "org_block"
                  | "page_build"
                  | "project"
                  | "project_card"
                  | "project_column"
                  | "public"
                  | "pull_request"
                  | "pull_request_review"
                  | "pull_request_review_comment"
                  | "push"
                  | "registry_package"
                  | "release"
                  | "repository"
                  | "repository_dispatch"
                  | "secret_scanning_alert"
                  | "star"
                  | "status"
                  | "team"
                  | "team_add"
                  | "watch"
                  | "workflow_dispatch"
                  | "workflow_run"
                  | "reminder"
                  | "pull_request_review_thread"
                >
              | undefined;
            external_url: string | null;
            html_url: string;
            id: number | null;
            name: string;
            node_id: string;
            owner: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            permissions?:
              | Partial<{
                  actions: "read" | "write";
                  administration: "read" | "write";
                  checks: "read" | "write";
                  content_references: "read" | "write";
                  contents: "read" | "write";
                  deployments: "read" | "write";
                  discussions: "read" | "write";
                  emails: "read" | "write";
                  environments: "read" | "write";
                  issues: "read" | "write";
                  keys: "read" | "write";
                  members: "read" | "write";
                  metadata: "read" | "write";
                  organization_administration: "read" | "write";
                  organization_hooks: "read" | "write";
                  organization_packages: "read" | "write";
                  organization_plan: "read" | "write";
                  organization_projects: "read" | "write" | "admin";
                  organization_secrets: "read" | "write";
                  organization_self_hosted_runners: "read" | "write";
                  organization_user_blocking: "read" | "write";
                  packages: "read" | "write";
                  pages: "read" | "write";
                  pull_requests: "read" | "write";
                  repository_hooks: "read" | "write";
                  repository_projects: "read" | "write" | "admin";
                  secret_scanning_alerts: "read" | "write";
                  secrets: "read" | "write";
                  security_events: "read" | "write";
                  security_scanning_alert: "read" | "write";
                  single_file: "read" | "write";
                  statuses: "read" | "write";
                  team_discussions: "read" | "write";
                  vulnerability_alerts: "read" | "write";
                  workflows: "read" | "write";
                }>
              | undefined;
            slug?: string | undefined;
            updated_at: string | null;
          } | null)
        | undefined;
      pull_request?:
        | Partial<{ diff_url: string; html_url: string; merged_at: string | null; patch_url: string; url: string }>
        | undefined;
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      repository_url: string;
      sub_issues_summary?: sub_issues_summary | undefined;
      issue_dependencies_summary?: issue_dependencies_summary | undefined;
      state?: ("open" | "closed") | undefined;
      state_reason?: (string | null) | undefined;
      timeline_url?: string | undefined;
      title: string;
      type?: issue_type | undefined;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    } & {
      active_lock_reason?: (string | null) | undefined;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees?: Array<Record<string, unknown> | null> | undefined;
      author_association?: string | undefined;
      body?: (string | null) | undefined;
      closed_at?: (string | null) | undefined;
      comments?: number | undefined;
      comments_url?: string | undefined;
      created_at?: string | undefined;
      events_url?: string | undefined;
      html_url?: string | undefined;
      id?: number | undefined;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      labels_url?: string | undefined;
      locked: boolean;
      milestone?: (Record<string, unknown> | null) | undefined;
      node_id?: string | undefined;
      number?: number | undefined;
      performed_via_github_app?: (Record<string, unknown> | null) | undefined;
      reactions?:
        | Partial<{
            "+1": number;
            "-1": number;
            confused: number;
            eyes: number;
            heart: number;
            hooray: number;
            laugh: number;
            rocket: number;
            total_count: number;
            url: string;
          }>
        | undefined;
      repository_url?: string | undefined;
      state: "open" | "closed";
      timeline_url?: string | undefined;
      title?: string | undefined;
      updated_at?: string | undefined;
      url?: string | undefined;
      user?:
        | Partial<{
            avatar_url: string;
            events_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            gravatar_id: string;
            html_url: string;
            id: number;
            login: string;
            node_id: string;
            organizations_url: string;
            received_events_url: string;
            repos_url: string;
            site_admin: boolean;
            starred_url: string;
            subscriptions_url: string;
            type: string;
            url: string;
          }>
        | undefined;
    };
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issue_comment_deleted = {
    action: "deleted";
    comment: webhooks_issue_comment;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: {
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      body: string | null;
      closed_at: string | null;
      comments: number;
      comments_url: string;
      created_at: string;
      draft?: boolean | undefined;
      events_url: string;
      html_url: string;
      id: number;
      labels?:
        | Array<{
            color: string;
            default: boolean;
            description: string | null;
            id: number;
            name: string;
            node_id: string;
            url: string;
          }>
        | undefined;
      labels_url: string;
      locked?: boolean | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      performed_via_github_app?:
        | ({
            created_at: string | null;
            description: string | null;
            events?:
              | Array<
                  | "branch_protection_rule"
                  | "check_run"
                  | "check_suite"
                  | "code_scanning_alert"
                  | "commit_comment"
                  | "content_reference"
                  | "create"
                  | "delete"
                  | "deployment"
                  | "deployment_review"
                  | "deployment_status"
                  | "deploy_key"
                  | "discussion"
                  | "discussion_comment"
                  | "fork"
                  | "gollum"
                  | "issues"
                  | "issue_comment"
                  | "label"
                  | "member"
                  | "membership"
                  | "milestone"
                  | "organization"
                  | "org_block"
                  | "page_build"
                  | "project"
                  | "project_card"
                  | "project_column"
                  | "public"
                  | "pull_request"
                  | "pull_request_review"
                  | "pull_request_review_comment"
                  | "push"
                  | "registry_package"
                  | "release"
                  | "repository"
                  | "repository_dispatch"
                  | "secret_scanning_alert"
                  | "star"
                  | "status"
                  | "team"
                  | "team_add"
                  | "watch"
                  | "workflow_dispatch"
                  | "workflow_run"
                >
              | undefined;
            external_url: string | null;
            html_url: string;
            id: number | null;
            name: string;
            node_id: string;
            owner: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            permissions?:
              | Partial<{
                  actions: "read" | "write";
                  administration: "read" | "write";
                  checks: "read" | "write";
                  content_references: "read" | "write";
                  contents: "read" | "write";
                  deployments: "read" | "write";
                  discussions: "read" | "write";
                  emails: "read" | "write";
                  environments: "read" | "write";
                  issues: "read" | "write";
                  keys: "read" | "write";
                  members: "read" | "write";
                  metadata: "read" | "write";
                  organization_administration: "read" | "write";
                  organization_hooks: "read" | "write";
                  organization_packages: "read" | "write";
                  organization_plan: "read" | "write";
                  organization_projects: "read" | "write";
                  organization_secrets: "read" | "write";
                  organization_self_hosted_runners: "read" | "write";
                  organization_user_blocking: "read" | "write";
                  packages: "read" | "write";
                  pages: "read" | "write";
                  pull_requests: "read" | "write";
                  repository_hooks: "read" | "write";
                  repository_projects: "read" | "write";
                  secret_scanning_alerts: "read" | "write";
                  secrets: "read" | "write";
                  security_events: "read" | "write";
                  security_scanning_alert: "read" | "write";
                  single_file: "read" | "write";
                  statuses: "read" | "write";
                  team_discussions: "read" | "write";
                  vulnerability_alerts: "read" | "write";
                  workflows: "read" | "write";
                }>
              | undefined;
            slug?: string | undefined;
            updated_at: string | null;
          } | null)
        | undefined;
      pull_request?:
        | Partial<{ diff_url: string; html_url: string; merged_at: string | null; patch_url: string; url: string }>
        | undefined;
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      repository_url: string;
      sub_issues_summary?: sub_issues_summary | undefined;
      issue_dependencies_summary?: issue_dependencies_summary | undefined;
      state?: ("open" | "closed") | undefined;
      state_reason?: (string | null) | undefined;
      timeline_url?: string | undefined;
      title: string;
      type?: issue_type | undefined;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    } & {
      active_lock_reason?: (string | null) | undefined;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees?: Array<Record<string, unknown> | null> | undefined;
      author_association?: string | undefined;
      body?: (string | null) | undefined;
      closed_at?: (string | null) | undefined;
      comments?: number | undefined;
      comments_url?: string | undefined;
      created_at?: string | undefined;
      events_url?: string | undefined;
      html_url?: string | undefined;
      id?: number | undefined;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      labels_url?: string | undefined;
      locked: boolean;
      milestone?: (Record<string, unknown> | null) | undefined;
      node_id?: string | undefined;
      number?: number | undefined;
      performed_via_github_app?: (Record<string, unknown> | null) | undefined;
      reactions?:
        | Partial<{
            "+1": number;
            "-1": number;
            confused: number;
            eyes: number;
            heart: number;
            hooray: number;
            laugh: number;
            rocket: number;
            total_count: number;
            url: string;
          }>
        | undefined;
      repository_url?: string | undefined;
      state: "open" | "closed";
      timeline_url?: string | undefined;
      title?: string | undefined;
      updated_at?: string | undefined;
      url?: string | undefined;
      user?:
        | Partial<{
            avatar_url: string;
            events_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            gravatar_id: string;
            html_url: string;
            id: number;
            login: string;
            node_id: string;
            organizations_url: string;
            received_events_url: string;
            repos_url: string;
            site_admin: boolean;
            starred_url: string;
            subscriptions_url: string;
            type: string;
            url: string;
            user_view_type: string;
          }>
        | undefined;
    };
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issue_comment_edited = {
    action: "edited";
    changes: webhooks_changes;
    comment: webhooks_issue_comment;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: {
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      body: string | null;
      closed_at: string | null;
      comments: number;
      comments_url: string;
      created_at: string;
      draft?: boolean | undefined;
      events_url: string;
      html_url: string;
      id: number;
      labels?:
        | Array<{
            color: string;
            default: boolean;
            description: string | null;
            id: number;
            name: string;
            node_id: string;
            url: string;
          }>
        | undefined;
      labels_url: string;
      locked?: boolean | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      performed_via_github_app?:
        | ({
            created_at: string | null;
            description: string | null;
            events?:
              | Array<
                  | "branch_protection_rule"
                  | "check_run"
                  | "check_suite"
                  | "code_scanning_alert"
                  | "commit_comment"
                  | "content_reference"
                  | "create"
                  | "delete"
                  | "deployment"
                  | "deployment_review"
                  | "deployment_status"
                  | "deploy_key"
                  | "discussion"
                  | "discussion_comment"
                  | "fork"
                  | "gollum"
                  | "issues"
                  | "issue_comment"
                  | "label"
                  | "member"
                  | "membership"
                  | "milestone"
                  | "organization"
                  | "org_block"
                  | "page_build"
                  | "project"
                  | "project_card"
                  | "project_column"
                  | "public"
                  | "pull_request"
                  | "pull_request_review"
                  | "pull_request_review_comment"
                  | "push"
                  | "registry_package"
                  | "release"
                  | "repository"
                  | "repository_dispatch"
                  | "secret_scanning_alert"
                  | "star"
                  | "status"
                  | "team"
                  | "team_add"
                  | "watch"
                  | "workflow_dispatch"
                  | "workflow_run"
                  | "reminder"
                  | "pull_request_review_thread"
                >
              | undefined;
            external_url: string | null;
            html_url: string;
            id: number | null;
            name: string;
            node_id: string;
            owner: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            permissions?:
              | Partial<{
                  actions: "read" | "write";
                  administration: "read" | "write";
                  checks: "read" | "write";
                  content_references: "read" | "write";
                  contents: "read" | "write";
                  deployments: "read" | "write";
                  discussions: "read" | "write";
                  emails: "read" | "write";
                  environments: "read" | "write";
                  issues: "read" | "write";
                  keys: "read" | "write";
                  members: "read" | "write";
                  metadata: "read" | "write";
                  organization_administration: "read" | "write";
                  organization_hooks: "read" | "write";
                  organization_packages: "read" | "write";
                  organization_plan: "read" | "write";
                  organization_projects: "read" | "write" | "admin";
                  organization_secrets: "read" | "write";
                  organization_self_hosted_runners: "read" | "write";
                  organization_user_blocking: "read" | "write";
                  packages: "read" | "write";
                  pages: "read" | "write";
                  pull_requests: "read" | "write";
                  repository_hooks: "read" | "write";
                  repository_projects: "read" | "write";
                  secret_scanning_alerts: "read" | "write";
                  secrets: "read" | "write";
                  security_events: "read" | "write";
                  security_scanning_alert: "read" | "write";
                  single_file: "read" | "write";
                  statuses: "read" | "write";
                  team_discussions: "read" | "write";
                  vulnerability_alerts: "read" | "write";
                  workflows: "read" | "write";
                }>
              | undefined;
            slug?: string | undefined;
            updated_at: string | null;
          } | null)
        | undefined;
      pull_request?:
        | Partial<{ diff_url: string; html_url: string; merged_at: string | null; patch_url: string; url: string }>
        | undefined;
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      repository_url: string;
      sub_issues_summary?: sub_issues_summary | undefined;
      issue_dependencies_summary?: issue_dependencies_summary | undefined;
      state?: ("open" | "closed") | undefined;
      state_reason?: (string | null) | undefined;
      timeline_url?: string | undefined;
      title: string;
      type?: issue_type | undefined;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    } & {
      active_lock_reason?: (string | null) | undefined;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees?: Array<Record<string, unknown> | null> | undefined;
      author_association?: string | undefined;
      body?: (string | null) | undefined;
      closed_at?: (string | null) | undefined;
      comments?: number | undefined;
      comments_url?: string | undefined;
      created_at?: string | undefined;
      events_url?: string | undefined;
      html_url?: string | undefined;
      id?: number | undefined;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      labels_url?: string | undefined;
      locked: boolean;
      milestone?: (Record<string, unknown> | null) | undefined;
      node_id?: string | undefined;
      number?: number | undefined;
      performed_via_github_app?: (Record<string, unknown> | null) | undefined;
      reactions?:
        | Partial<{
            "+1": number;
            "-1": number;
            confused: number;
            eyes: number;
            heart: number;
            hooray: number;
            laugh: number;
            rocket: number;
            total_count: number;
            url: string;
          }>
        | undefined;
      repository_url?: string | undefined;
      state: "open" | "closed";
      timeline_url?: string | undefined;
      title?: string | undefined;
      updated_at?: string | undefined;
      url?: string | undefined;
      user?:
        | Partial<{
            avatar_url: string;
            events_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            gravatar_id: string;
            html_url: string;
            id: number;
            login: string;
            node_id: string;
            organizations_url: string;
            received_events_url: string;
            repos_url: string;
            site_admin: boolean;
            starred_url: string;
            subscriptions_url: string;
            type: string;
            url: string;
          }>
        | undefined;
    };
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issue_dependencies_blocked_by_added = {
    action: "blocked_by_added";
    blocked_issue_id: number;
    blocked_issue: issue;
    blocking_issue_id: number;
    blocking_issue: issue;
    blocking_issue_repo: repository;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issue_dependencies_blocked_by_removed = {
    action: "blocked_by_removed";
    blocked_issue_id: number;
    blocked_issue: issue;
    blocking_issue_id: number;
    blocking_issue: issue;
    blocking_issue_repo: repository;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issue_dependencies_blocking_added = {
    action: "blocking_added";
    blocked_issue_id: number;
    blocked_issue: issue;
    blocked_issue_repo: repository;
    blocking_issue_id: number;
    blocking_issue: issue;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issue_dependencies_blocking_removed = {
    action: "blocking_removed";
    blocked_issue_id: number;
    blocked_issue: issue;
    blocked_issue_repo: repository;
    blocking_issue_id: number;
    blocking_issue: issue;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issues_assigned = {
    action: "assigned";
    assignee?: webhooks_user | undefined;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: webhooks_issue;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issues_closed = {
    action: "closed";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: {
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      body: string | null;
      closed_at: string | null;
      comments: number;
      comments_url: string;
      created_at: string;
      draft?: boolean | undefined;
      events_url: string;
      html_url: string;
      id: number;
      labels?:
        | Array<{
            color: string;
            default: boolean;
            description: string | null;
            id: number;
            name: string;
            node_id: string;
            url: string;
          }>
        | undefined;
      labels_url: string;
      locked?: boolean | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      performed_via_github_app?:
        | ({
            created_at: string | null;
            description: string | null;
            events?:
              | Array<
                  | "branch_protection_rule"
                  | "check_run"
                  | "check_suite"
                  | "code_scanning_alert"
                  | "commit_comment"
                  | "content_reference"
                  | "create"
                  | "delete"
                  | "deployment"
                  | "deployment_review"
                  | "deployment_status"
                  | "deploy_key"
                  | "discussion"
                  | "discussion_comment"
                  | "fork"
                  | "gollum"
                  | "issues"
                  | "issue_comment"
                  | "label"
                  | "member"
                  | "membership"
                  | "milestone"
                  | "organization"
                  | "org_block"
                  | "page_build"
                  | "project"
                  | "project_card"
                  | "project_column"
                  | "public"
                  | "pull_request"
                  | "pull_request_review"
                  | "pull_request_review_comment"
                  | "push"
                  | "registry_package"
                  | "release"
                  | "repository"
                  | "repository_dispatch"
                  | "secret_scanning_alert"
                  | "star"
                  | "status"
                  | "team"
                  | "team_add"
                  | "watch"
                  | "workflow_dispatch"
                  | "workflow_run"
                  | "security_and_analysis"
                  | "reminder"
                  | "pull_request_review_thread"
                >
              | undefined;
            external_url: string | null;
            html_url: string;
            id: number | null;
            name: string;
            node_id: string;
            owner: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            permissions?:
              | Partial<{
                  actions: "read" | "write";
                  administration: "read" | "write";
                  checks: "read" | "write";
                  content_references: "read" | "write";
                  contents: "read" | "write";
                  deployments: "read" | "write";
                  discussions: "read" | "write";
                  emails: "read" | "write";
                  environments: "read" | "write";
                  issues: "read" | "write";
                  keys: "read" | "write";
                  members: "read" | "write";
                  metadata: "read" | "write";
                  organization_administration: "read" | "write";
                  organization_hooks: "read" | "write";
                  organization_packages: "read" | "write";
                  organization_plan: "read" | "write";
                  organization_projects: "read" | "write" | "admin";
                  organization_secrets: "read" | "write";
                  organization_self_hosted_runners: "read" | "write";
                  organization_user_blocking: "read" | "write";
                  packages: "read" | "write";
                  pages: "read" | "write";
                  pull_requests: "read" | "write";
                  repository_hooks: "read" | "write";
                  repository_projects: "read" | "write";
                  secret_scanning_alerts: "read" | "write";
                  secrets: "read" | "write";
                  security_events: "read" | "write";
                  security_scanning_alert: "read" | "write";
                  single_file: "read" | "write";
                  statuses: "read" | "write";
                  team_discussions: "read" | "write";
                  vulnerability_alerts: "read" | "write";
                  workflows: "read" | "write";
                }>
              | undefined;
            slug?: string | undefined;
            updated_at: string | null;
          } | null)
        | undefined;
      pull_request?:
        | Partial<{ diff_url: string; html_url: string; merged_at: string | null; patch_url: string; url: string }>
        | undefined;
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      repository_url: string;
      sub_issues_summary?: sub_issues_summary | undefined;
      issue_dependencies_summary?: issue_dependencies_summary | undefined;
      issue_field_values?: Array<issue_field_value> | undefined;
      state?: ("open" | "closed") | undefined;
      state_reason?: (string | null) | undefined;
      timeline_url?: string | undefined;
      title: string;
      type?: issue_type | undefined;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    } & {
      active_lock_reason?: (string | null) | undefined;
      assignee?: (Record<string, unknown> | null) | undefined;
      assignees?: Array<Record<string, unknown> | null> | undefined;
      author_association?: string | undefined;
      body?: (string | null) | undefined;
      closed_at: string | null;
      comments?: number | undefined;
      comments_url?: string | undefined;
      created_at?: string | undefined;
      events_url?: string | undefined;
      html_url?: string | undefined;
      id?: number | undefined;
      labels?: Array<Record<string, unknown> | null> | undefined;
      labels_url?: string | undefined;
      locked?: boolean | undefined;
      milestone?: (Record<string, unknown> | null) | undefined;
      node_id?: string | undefined;
      number?: number | undefined;
      performed_via_github_app?: (Record<string, unknown> | null) | undefined;
      reactions?:
        | Partial<{
            "+1": number;
            "-1": number;
            confused: number;
            eyes: number;
            heart: number;
            hooray: number;
            laugh: number;
            rocket: number;
            total_count: number;
            url: string;
          }>
        | undefined;
      repository_url?: string | undefined;
      state: "closed" | "open";
      timeline_url?: string | undefined;
      title?: string | undefined;
      updated_at?: string | undefined;
      url?: string | undefined;
      user?:
        | Partial<{
            avatar_url: string;
            events_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            gravatar_id: string;
            html_url: string;
            id: number;
            login: string;
            node_id: string;
            organizations_url: string;
            received_events_url: string;
            repos_url: string;
            site_admin: boolean;
            starred_url: string;
            subscriptions_url: string;
            type: string;
            url: string;
            user_view_type: string;
          }>
        | undefined;
    };
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issues_deleted = {
    action: "deleted";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: {
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      body: string | null;
      closed_at: string | null;
      comments: number;
      comments_url: string;
      created_at: string;
      draft?: boolean | undefined;
      events_url: string;
      html_url: string;
      id: number;
      labels?:
        | Array<{
            color: string;
            default: boolean;
            description: string | null;
            id: number;
            name: string;
            node_id: string;
            url: string;
          }>
        | undefined;
      labels_url: string;
      locked?: boolean | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      performed_via_github_app?:
        | ({
            created_at: string | null;
            description: string | null;
            events?:
              | Array<
                  | "branch_protection_rule"
                  | "check_run"
                  | "check_suite"
                  | "code_scanning_alert"
                  | "commit_comment"
                  | "content_reference"
                  | "create"
                  | "delete"
                  | "deployment"
                  | "deployment_review"
                  | "deployment_status"
                  | "deploy_key"
                  | "discussion"
                  | "discussion_comment"
                  | "fork"
                  | "gollum"
                  | "issues"
                  | "issue_comment"
                  | "label"
                  | "member"
                  | "membership"
                  | "milestone"
                  | "organization"
                  | "org_block"
                  | "page_build"
                  | "project"
                  | "project_card"
                  | "project_column"
                  | "public"
                  | "pull_request"
                  | "pull_request_review"
                  | "pull_request_review_comment"
                  | "push"
                  | "registry_package"
                  | "release"
                  | "repository"
                  | "repository_dispatch"
                  | "secret_scanning_alert"
                  | "star"
                  | "status"
                  | "team"
                  | "team_add"
                  | "watch"
                  | "workflow_dispatch"
                  | "workflow_run"
                  | "reminder"
                >
              | undefined;
            external_url: string | null;
            html_url: string;
            id: number | null;
            name: string;
            node_id: string;
            owner: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            permissions?:
              | Partial<{
                  actions: "read" | "write";
                  administration: "read" | "write";
                  checks: "read" | "write";
                  content_references: "read" | "write";
                  contents: "read" | "write";
                  deployments: "read" | "write";
                  discussions: "read" | "write";
                  emails: "read" | "write";
                  environments: "read" | "write";
                  issues: "read" | "write";
                  keys: "read" | "write";
                  members: "read" | "write";
                  metadata: "read" | "write";
                  organization_administration: "read" | "write";
                  organization_hooks: "read" | "write";
                  organization_packages: "read" | "write";
                  organization_plan: "read" | "write";
                  organization_projects: "read" | "write";
                  organization_secrets: "read" | "write";
                  organization_self_hosted_runners: "read" | "write";
                  organization_user_blocking: "read" | "write";
                  packages: "read" | "write";
                  pages: "read" | "write";
                  pull_requests: "read" | "write";
                  repository_hooks: "read" | "write";
                  repository_projects: "read" | "write";
                  secret_scanning_alerts: "read" | "write";
                  secrets: "read" | "write";
                  security_events: "read" | "write";
                  security_scanning_alert: "read" | "write";
                  single_file: "read" | "write";
                  statuses: "read" | "write";
                  team_discussions: "read" | "write";
                  vulnerability_alerts: "read" | "write";
                  workflows: "read" | "write";
                }>
              | undefined;
            slug?: string | undefined;
            updated_at: string | null;
          } | null)
        | undefined;
      pull_request?:
        | Partial<{ diff_url: string; html_url: string; merged_at: string | null; patch_url: string; url: string }>
        | undefined;
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      repository_url: string;
      sub_issues_summary?: sub_issues_summary | undefined;
      issue_dependencies_summary?: issue_dependencies_summary | undefined;
      issue_field_values?: Array<issue_field_value> | undefined;
      state?: ("open" | "closed") | undefined;
      state_reason?: (string | null) | undefined;
      timeline_url?: string | undefined;
      title: string;
      type?: issue_type | undefined;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issues_demilestoned = {
    action: "demilestoned";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: {
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
          } | null)
        | undefined;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      body: string | null;
      closed_at: string | null;
      comments: number;
      comments_url: string;
      created_at: string;
      draft?: boolean | undefined;
      events_url: string;
      html_url: string;
      id: number;
      labels?:
        | Array<{
            color: string;
            default: boolean;
            description: string | null;
            id: number;
            name: string;
            node_id: string;
            url: string;
          } | null>
        | undefined;
      labels_url: string;
      locked?: boolean | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      performed_via_github_app?:
        | ({
            created_at: string | null;
            description: string | null;
            events?:
              | Array<
                  | "branch_protection_rule"
                  | "check_run"
                  | "check_suite"
                  | "code_scanning_alert"
                  | "commit_comment"
                  | "content_reference"
                  | "create"
                  | "delete"
                  | "deployment"
                  | "deployment_review"
                  | "deployment_status"
                  | "deploy_key"
                  | "discussion"
                  | "discussion_comment"
                  | "fork"
                  | "gollum"
                  | "issues"
                  | "issue_comment"
                  | "label"
                  | "member"
                  | "membership"
                  | "milestone"
                  | "organization"
                  | "org_block"
                  | "page_build"
                  | "project"
                  | "project_card"
                  | "project_column"
                  | "public"
                  | "pull_request"
                  | "pull_request_review"
                  | "pull_request_review_comment"
                  | "push"
                  | "registry_package"
                  | "release"
                  | "repository"
                  | "repository_dispatch"
                  | "secret_scanning_alert"
                  | "star"
                  | "status"
                  | "team"
                  | "team_add"
                  | "watch"
                  | "workflow_dispatch"
                  | "workflow_run"
                >
              | undefined;
            external_url: string | null;
            html_url: string;
            id: number | null;
            name: string;
            node_id: string;
            owner: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            permissions?:
              | Partial<{
                  actions: "read" | "write";
                  administration: "read" | "write";
                  checks: "read" | "write";
                  content_references: "read" | "write";
                  contents: "read" | "write";
                  deployments: "read" | "write";
                  discussions: "read" | "write";
                  emails: "read" | "write";
                  environments: "read" | "write";
                  issues: "read" | "write";
                  keys: "read" | "write";
                  members: "read" | "write";
                  metadata: "read" | "write";
                  organization_administration: "read" | "write";
                  organization_hooks: "read" | "write";
                  organization_packages: "read" | "write";
                  organization_plan: "read" | "write";
                  organization_projects: "read" | "write" | "admin";
                  organization_secrets: "read" | "write";
                  organization_self_hosted_runners: "read" | "write";
                  organization_user_blocking: "read" | "write";
                  packages: "read" | "write";
                  pages: "read" | "write";
                  pull_requests: "read" | "write";
                  repository_hooks: "read" | "write";
                  repository_projects: "read" | "write";
                  secret_scanning_alerts: "read" | "write";
                  secrets: "read" | "write";
                  security_events: "read" | "write";
                  security_scanning_alert: "read" | "write";
                  single_file: "read" | "write";
                  statuses: "read" | "write";
                  team_discussions: "read" | "write";
                  vulnerability_alerts: "read" | "write";
                  workflows: "read" | "write";
                }>
              | undefined;
            slug?: string | undefined;
            updated_at: string | null;
          } | null)
        | undefined;
      pull_request?:
        | Partial<{ diff_url: string; html_url: string; merged_at: string | null; patch_url: string; url: string }>
        | undefined;
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      repository_url: string;
      sub_issues_summary?: sub_issues_summary | undefined;
      issue_dependencies_summary?: issue_dependencies_summary | undefined;
      issue_field_values?: Array<issue_field_value> | undefined;
      state?: ("open" | "closed") | undefined;
      state_reason?: (string | null) | undefined;
      timeline_url?: string | undefined;
      title: string;
      type?: issue_type | undefined;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    milestone?: webhooks_milestone | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issues_edited = {
    action: "edited";
    changes: Partial<{ body: { from: string }; title: { from: string } }>;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: {
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      body: string | null;
      closed_at: string | null;
      comments: number;
      comments_url: string;
      created_at: string;
      draft?: boolean | undefined;
      events_url: string;
      html_url: string;
      id: number;
      labels?:
        | Array<{
            color: string;
            default: boolean;
            description: string | null;
            id: number;
            name: string;
            node_id: string;
            url: string;
          }>
        | undefined;
      labels_url: string;
      locked?: boolean | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      performed_via_github_app?:
        | ({
            created_at: string | null;
            description: string | null;
            events?:
              | Array<
                  | "branch_protection_rule"
                  | "check_run"
                  | "check_suite"
                  | "code_scanning_alert"
                  | "commit_comment"
                  | "content_reference"
                  | "create"
                  | "delete"
                  | "deployment"
                  | "deployment_review"
                  | "deployment_status"
                  | "deploy_key"
                  | "discussion"
                  | "discussion_comment"
                  | "fork"
                  | "gollum"
                  | "issues"
                  | "issue_comment"
                  | "label"
                  | "member"
                  | "membership"
                  | "milestone"
                  | "organization"
                  | "org_block"
                  | "page_build"
                  | "project"
                  | "project_card"
                  | "project_column"
                  | "public"
                  | "pull_request"
                  | "pull_request_review"
                  | "pull_request_review_comment"
                  | "push"
                  | "registry_package"
                  | "release"
                  | "repository"
                  | "repository_dispatch"
                  | "secret_scanning_alert"
                  | "star"
                  | "status"
                  | "team"
                  | "team_add"
                  | "watch"
                  | "workflow_dispatch"
                  | "workflow_run"
                  | "security_and_analysis"
                  | "pull_request_review_thread"
                  | "reminder"
                >
              | undefined;
            external_url: string | null;
            html_url: string;
            id: number | null;
            name: string;
            node_id: string;
            owner: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            permissions?:
              | Partial<{
                  actions: "read" | "write";
                  administration: "read" | "write";
                  checks: "read" | "write";
                  content_references: "read" | "write";
                  contents: "read" | "write";
                  deployments: "read" | "write";
                  discussions: "read" | "write";
                  emails: "read" | "write";
                  environments: "read" | "write";
                  issues: "read" | "write";
                  keys: "read" | "write";
                  members: "read" | "write";
                  metadata: "read" | "write";
                  organization_administration: "read" | "write";
                  organization_hooks: "read" | "write";
                  organization_packages: "read" | "write";
                  organization_plan: "read" | "write";
                  organization_projects: "read" | "write" | "admin";
                  organization_secrets: "read" | "write";
                  organization_self_hosted_runners: "read" | "write";
                  organization_user_blocking: "read" | "write";
                  packages: "read" | "write";
                  pages: "read" | "write";
                  pull_requests: "read" | "write";
                  repository_hooks: "read" | "write";
                  repository_projects: "read" | "write";
                  secret_scanning_alerts: "read" | "write";
                  secrets: "read" | "write";
                  security_events: "read" | "write";
                  security_scanning_alert: "read" | "write";
                  single_file: "read" | "write";
                  statuses: "read" | "write";
                  team_discussions: "read" | "write";
                  vulnerability_alerts: "read" | "write";
                  workflows: "read" | "write";
                }>
              | undefined;
            slug?: string | undefined;
            updated_at: string | null;
          } | null)
        | undefined;
      pull_request?:
        | Partial<{ diff_url: string; html_url: string; merged_at: string | null; patch_url: string; url: string }>
        | undefined;
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      repository_url: string;
      sub_issues_summary?: sub_issues_summary | undefined;
      issue_dependencies_summary?: issue_dependencies_summary | undefined;
      issue_field_values?: Array<issue_field_value> | undefined;
      state?: ("open" | "closed") | undefined;
      state_reason?: (string | null) | undefined;
      timeline_url?: string | undefined;
      type?: issue_type | undefined;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    label?: webhooks_label | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issues_labeled = {
    action: "labeled";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: {
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      body: string | null;
      closed_at: string | null;
      comments: number;
      comments_url: string;
      created_at: string;
      draft?: boolean | undefined;
      events_url: string;
      html_url: string;
      id: number;
      labels?:
        | Array<{
            color: string;
            default: boolean;
            description: string | null;
            id: number;
            name: string;
            node_id: string;
            url: string;
          }>
        | undefined;
      labels_url: string;
      locked?: boolean | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      performed_via_github_app?:
        | ({
            created_at: string | null;
            description: string | null;
            events?:
              | Array<
                  | "branch_protection_rule"
                  | "check_run"
                  | "check_suite"
                  | "code_scanning_alert"
                  | "commit_comment"
                  | "content_reference"
                  | "create"
                  | "delete"
                  | "deployment"
                  | "deployment_review"
                  | "deployment_status"
                  | "deploy_key"
                  | "discussion"
                  | "discussion_comment"
                  | "fork"
                  | "gollum"
                  | "issues"
                  | "issue_comment"
                  | "label"
                  | "member"
                  | "membership"
                  | "milestone"
                  | "organization"
                  | "org_block"
                  | "page_build"
                  | "project"
                  | "project_card"
                  | "project_column"
                  | "public"
                  | "pull_request"
                  | "pull_request_review"
                  | "pull_request_review_comment"
                  | "push"
                  | "registry_package"
                  | "release"
                  | "repository"
                  | "repository_dispatch"
                  | "secret_scanning_alert"
                  | "star"
                  | "status"
                  | "team"
                  | "team_add"
                  | "watch"
                  | "workflow_dispatch"
                  | "workflow_run"
                  | "pull_request_review_thread"
                  | "reminder"
                >
              | undefined;
            external_url: string | null;
            html_url: string;
            id: number | null;
            name: string;
            node_id: string;
            owner: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            permissions?:
              | Partial<{
                  actions: "read" | "write";
                  administration: "read" | "write";
                  checks: "read" | "write";
                  content_references: "read" | "write";
                  contents: "read" | "write";
                  deployments: "read" | "write";
                  discussions: "read" | "write";
                  emails: "read" | "write";
                  environments: "read" | "write";
                  issues: "read" | "write";
                  keys: "read" | "write";
                  members: "read" | "write";
                  metadata: "read" | "write";
                  organization_administration: "read" | "write";
                  organization_hooks: "read" | "write";
                  organization_packages: "read" | "write";
                  organization_plan: "read" | "write";
                  organization_projects: "read" | "write" | "admin";
                  organization_secrets: "read" | "write";
                  organization_self_hosted_runners: "read" | "write";
                  organization_user_blocking: "read" | "write";
                  packages: "read" | "write";
                  pages: "read" | "write";
                  pull_requests: "read" | "write";
                  repository_hooks: "read" | "write";
                  repository_projects: "read" | "write";
                  secret_scanning_alerts: "read" | "write";
                  secrets: "read" | "write";
                  security_events: "read" | "write";
                  security_scanning_alert: "read" | "write";
                  single_file: "read" | "write";
                  statuses: "read" | "write";
                  team_discussions: "read" | "write";
                  vulnerability_alerts: "read" | "write";
                  workflows: "read" | "write";
                }>
              | undefined;
            slug?: string | undefined;
            updated_at: string | null;
          } | null)
        | undefined;
      pull_request?:
        | Partial<{ diff_url: string; html_url: string; merged_at: string | null; patch_url: string; url: string }>
        | undefined;
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      repository_url: string;
      sub_issues_summary?: sub_issues_summary | undefined;
      issue_dependencies_summary?: issue_dependencies_summary | undefined;
      issue_field_values?: Array<issue_field_value> | undefined;
      state?: ("open" | "closed") | undefined;
      state_reason?: (string | null) | undefined;
      timeline_url?: string | undefined;
      type?: issue_type | undefined;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    label?: webhooks_label | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issues_locked = {
    action: "locked";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: {
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      body: string | null;
      closed_at: string | null;
      comments: number;
      comments_url: string;
      created_at: string;
      draft?: boolean | undefined;
      events_url: string;
      html_url: string;
      id: number;
      labels?:
        | Array<{
            color: string;
            default: boolean;
            description: string | null;
            id: number;
            name: string;
            node_id: string;
            url: string;
          } | null>
        | undefined;
      labels_url: string;
      locked: true;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      performed_via_github_app?:
        | ({
            created_at: string | null;
            description: string | null;
            events?:
              | Array<
                  | "branch_protection_rule"
                  | "check_run"
                  | "check_suite"
                  | "code_scanning_alert"
                  | "commit_comment"
                  | "content_reference"
                  | "create"
                  | "delete"
                  | "deployment"
                  | "deployment_review"
                  | "deployment_status"
                  | "deploy_key"
                  | "discussion"
                  | "discussion_comment"
                  | "fork"
                  | "gollum"
                  | "issues"
                  | "issue_comment"
                  | "label"
                  | "member"
                  | "membership"
                  | "milestone"
                  | "organization"
                  | "org_block"
                  | "page_build"
                  | "project"
                  | "project_card"
                  | "project_column"
                  | "public"
                  | "pull_request"
                  | "pull_request_review"
                  | "pull_request_review_comment"
                  | "push"
                  | "registry_package"
                  | "release"
                  | "repository"
                  | "repository_dispatch"
                  | "secret_scanning_alert"
                  | "star"
                  | "status"
                  | "team"
                  | "team_add"
                  | "watch"
                  | "workflow_dispatch"
                  | "workflow_run"
                  | "reminder"
                  | "security_and_analysis"
                >
              | undefined;
            external_url: string | null;
            html_url: string;
            id: number | null;
            name: string;
            node_id: string;
            owner: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            permissions?:
              | Partial<{
                  actions: "read" | "write";
                  administration: "read" | "write";
                  checks: "read" | "write";
                  content_references: "read" | "write";
                  contents: "read" | "write";
                  deployments: "read" | "write";
                  discussions: "read" | "write";
                  emails: "read" | "write";
                  environments: "read" | "write";
                  issues: "read" | "write";
                  keys: "read" | "write";
                  members: "read" | "write";
                  metadata: "read" | "write";
                  organization_administration: "read" | "write";
                  organization_hooks: "read" | "write";
                  organization_packages: "read" | "write";
                  organization_plan: "read" | "write";
                  organization_projects: "read" | "write";
                  organization_secrets: "read" | "write";
                  organization_self_hosted_runners: "read" | "write";
                  organization_user_blocking: "read" | "write";
                  packages: "read" | "write";
                  pages: "read" | "write";
                  pull_requests: "read" | "write";
                  repository_hooks: "read" | "write";
                  repository_projects: "read" | "write";
                  secret_scanning_alerts: "read" | "write";
                  secrets: "read" | "write";
                  security_events: "read" | "write";
                  security_scanning_alert: "read" | "write";
                  single_file: "read" | "write";
                  statuses: "read" | "write";
                  team_discussions: "read" | "write";
                  vulnerability_alerts: "read" | "write";
                  workflows: "read" | "write";
                }>
              | undefined;
            slug?: string | undefined;
            updated_at: string | null;
          } | null)
        | undefined;
      pull_request?:
        | Partial<{ diff_url: string; html_url: string; merged_at: string | null; patch_url: string; url: string }>
        | undefined;
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      repository_url: string;
      sub_issues_summary?: sub_issues_summary | undefined;
      issue_dependencies_summary?: issue_dependencies_summary | undefined;
      issue_field_values?: Array<issue_field_value> | undefined;
      state?: ("open" | "closed") | undefined;
      state_reason?: (string | null) | undefined;
      timeline_url?: string | undefined;
      type?: issue_type | undefined;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issues_milestoned = {
    action: "milestoned";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: {
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
          } | null)
        | undefined;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      body: string | null;
      closed_at: string | null;
      comments: number;
      comments_url: string;
      created_at: string;
      draft?: boolean | undefined;
      events_url: string;
      html_url: string;
      id: number;
      labels?:
        | Array<{
            color: string;
            default: boolean;
            description: string | null;
            id: number;
            name: string;
            node_id: string;
            url: string;
          } | null>
        | undefined;
      labels_url: string;
      locked?: boolean | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      performed_via_github_app?:
        | ({
            created_at: string | null;
            description: string | null;
            events?:
              | Array<
                  | "branch_protection_rule"
                  | "check_run"
                  | "check_suite"
                  | "code_scanning_alert"
                  | "commit_comment"
                  | "content_reference"
                  | "create"
                  | "delete"
                  | "deployment"
                  | "deployment_review"
                  | "deployment_status"
                  | "deploy_key"
                  | "discussion"
                  | "discussion_comment"
                  | "fork"
                  | "gollum"
                  | "issues"
                  | "issue_comment"
                  | "label"
                  | "member"
                  | "membership"
                  | "milestone"
                  | "organization"
                  | "org_block"
                  | "page_build"
                  | "project"
                  | "project_card"
                  | "project_column"
                  | "public"
                  | "pull_request"
                  | "pull_request_review"
                  | "pull_request_review_comment"
                  | "push"
                  | "registry_package"
                  | "release"
                  | "repository"
                  | "repository_dispatch"
                  | "secret_scanning_alert"
                  | "star"
                  | "status"
                  | "team"
                  | "team_add"
                  | "watch"
                  | "workflow_dispatch"
                  | "workflow_run"
                  | "reminder"
                >
              | undefined;
            external_url: string | null;
            html_url: string;
            id: number | null;
            name: string;
            node_id: string;
            owner: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            permissions?:
              | Partial<{
                  actions: "read" | "write";
                  administration: "read" | "write";
                  checks: "read" | "write";
                  content_references: "read" | "write";
                  contents: "read" | "write";
                  deployments: "read" | "write";
                  discussions: "read" | "write";
                  emails: "read" | "write";
                  environments: "read" | "write";
                  issues: "read" | "write";
                  keys: "read" | "write";
                  members: "read" | "write";
                  metadata: "read" | "write";
                  organization_administration: "read" | "write";
                  organization_hooks: "read" | "write";
                  organization_packages: "read" | "write";
                  organization_plan: "read" | "write";
                  organization_projects: "read" | "write" | "admin";
                  organization_secrets: "read" | "write";
                  organization_self_hosted_runners: "read" | "write";
                  organization_user_blocking: "read" | "write";
                  packages: "read" | "write";
                  pages: "read" | "write";
                  pull_requests: "read" | "write";
                  repository_hooks: "read" | "write";
                  repository_projects: "read" | "write";
                  secret_scanning_alerts: "read" | "write";
                  secrets: "read" | "write";
                  security_events: "read" | "write";
                  security_scanning_alert: "read" | "write";
                  single_file: "read" | "write";
                  statuses: "read" | "write";
                  team_discussions: "read" | "write";
                  vulnerability_alerts: "read" | "write";
                  workflows: "read" | "write";
                }>
              | undefined;
            slug?: string | undefined;
            updated_at: string | null;
          } | null)
        | undefined;
      pull_request?:
        | Partial<{ diff_url: string; html_url: string; merged_at: string | null; patch_url: string; url: string }>
        | undefined;
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      repository_url: string;
      sub_issues_summary?: sub_issues_summary | undefined;
      issue_dependencies_summary?: issue_dependencies_summary | undefined;
      issue_field_values?: Array<issue_field_value> | undefined;
      state?: ("open" | "closed") | undefined;
      state_reason?: (string | null) | undefined;
      timeline_url?: string | undefined;
      title: string;
      type?: issue_type | undefined;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    milestone: webhooks_milestone;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issues_opened = {
    action: "opened";
    changes?:
      | {
          old_issue: {
            active_lock_reason?: (("resolved" | "off-topic" | "too heated" | "spam" | "null") | null) | undefined;
            assignee?:
              | ({
                  avatar_url?: string | undefined;
                  deleted?: boolean | undefined;
                  email?: (string | null) | undefined;
                  events_url?: string | undefined;
                  followers_url?: string | undefined;
                  following_url?: string | undefined;
                  gists_url?: string | undefined;
                  gravatar_id?: string | undefined;
                  html_url?: string | undefined;
                  id: number;
                  login: string;
                  name?: string | undefined;
                  node_id?: string | undefined;
                  organizations_url?: string | undefined;
                  received_events_url?: string | undefined;
                  repos_url?: string | undefined;
                  site_admin?: boolean | undefined;
                  starred_url?: string | undefined;
                  subscriptions_url?: string | undefined;
                  type?: ("Bot" | "User" | "Organization") | undefined;
                  url?: string | undefined;
                  user_view_type?: string | undefined;
                } | null)
              | undefined;
            assignees?:
              | Array<{
                  avatar_url?: string | undefined;
                  deleted?: boolean | undefined;
                  email?: (string | null) | undefined;
                  events_url?: string | undefined;
                  followers_url?: string | undefined;
                  following_url?: string | undefined;
                  gists_url?: string | undefined;
                  gravatar_id?: string | undefined;
                  html_url?: string | undefined;
                  id: number;
                  login: string;
                  name?: string | undefined;
                  node_id?: string | undefined;
                  organizations_url?: string | undefined;
                  received_events_url?: string | undefined;
                  repos_url?: string | undefined;
                  site_admin?: boolean | undefined;
                  starred_url?: string | undefined;
                  subscriptions_url?: string | undefined;
                  type?: ("Bot" | "User" | "Organization") | undefined;
                  url?: string | undefined;
                  user_view_type?: string | undefined;
                } | null>
              | undefined;
            author_association?:
              | (
                  | "COLLABORATOR"
                  | "CONTRIBUTOR"
                  | "FIRST_TIMER"
                  | "FIRST_TIME_CONTRIBUTOR"
                  | "MANNEQUIN"
                  | "MEMBER"
                  | "NONE"
                  | "OWNER"
                )
              | undefined;
            body?: (string | null) | undefined;
            closed_at?: (string | null) | undefined;
            comments?: number | undefined;
            comments_url?: string | undefined;
            created_at?: string | undefined;
            draft?: boolean | undefined;
            events_url?: string | undefined;
            html_url?: string | undefined;
            id: number;
            labels?:
              | Array<{
                  color: string;
                  default: boolean;
                  description: string | null;
                  id: number;
                  name: string;
                  node_id: string;
                  url: string;
                }>
              | undefined;
            labels_url?: string | undefined;
            locked?: boolean | undefined;
            milestone?:
              | ({
                  closed_at: string | null;
                  closed_issues: number;
                  created_at: string;
                  creator: {
                    avatar_url?: string | undefined;
                    deleted?: boolean | undefined;
                    email?: (string | null) | undefined;
                    events_url?: string | undefined;
                    followers_url?: string | undefined;
                    following_url?: string | undefined;
                    gists_url?: string | undefined;
                    gravatar_id?: string | undefined;
                    html_url?: string | undefined;
                    id: number;
                    login: string;
                    name?: string | undefined;
                    node_id?: string | undefined;
                    organizations_url?: string | undefined;
                    received_events_url?: string | undefined;
                    repos_url?: string | undefined;
                    site_admin?: boolean | undefined;
                    starred_url?: string | undefined;
                    subscriptions_url?: string | undefined;
                    type?: ("Bot" | "User" | "Organization") | undefined;
                    url?: string | undefined;
                    user_view_type?: string | undefined;
                  } | null;
                  description: string | null;
                  due_on: string | null;
                  html_url: string;
                  id: number;
                  labels_url: string;
                  node_id: string;
                  number: number;
                  open_issues: number;
                  state: "open" | "closed";
                  title: string;
                  updated_at: string;
                  url: string;
                } | null)
              | undefined;
            node_id?: string | undefined;
            number: number;
            performed_via_github_app?:
              | ({
                  created_at: string | null;
                  description: string | null;
                  events?:
                    | Array<
                        | "branch_protection_rule"
                        | "check_run"
                        | "check_suite"
                        | "code_scanning_alert"
                        | "commit_comment"
                        | "content_reference"
                        | "create"
                        | "delete"
                        | "deployment"
                        | "deployment_review"
                        | "deployment_status"
                        | "deploy_key"
                        | "discussion"
                        | "discussion_comment"
                        | "fork"
                        | "gollum"
                        | "issues"
                        | "issue_comment"
                        | "label"
                        | "member"
                        | "membership"
                        | "milestone"
                        | "organization"
                        | "org_block"
                        | "page_build"
                        | "project"
                        | "project_card"
                        | "project_column"
                        | "public"
                        | "pull_request"
                        | "pull_request_review"
                        | "pull_request_review_comment"
                        | "push"
                        | "registry_package"
                        | "release"
                        | "repository"
                        | "repository_dispatch"
                        | "secret_scanning_alert"
                        | "star"
                        | "status"
                        | "team"
                        | "team_add"
                        | "watch"
                        | "workflow_dispatch"
                        | "workflow_run"
                      >
                    | undefined;
                  external_url: string | null;
                  html_url: string;
                  id: number | null;
                  name: string;
                  node_id: string;
                  owner: {
                    avatar_url?: string | undefined;
                    deleted?: boolean | undefined;
                    email?: (string | null) | undefined;
                    events_url?: string | undefined;
                    followers_url?: string | undefined;
                    following_url?: string | undefined;
                    gists_url?: string | undefined;
                    gravatar_id?: string | undefined;
                    html_url?: string | undefined;
                    id: number;
                    login: string;
                    name?: string | undefined;
                    node_id?: string | undefined;
                    organizations_url?: string | undefined;
                    received_events_url?: string | undefined;
                    repos_url?: string | undefined;
                    site_admin?: boolean | undefined;
                    starred_url?: string | undefined;
                    subscriptions_url?: string | undefined;
                    type?: ("Bot" | "User" | "Organization") | undefined;
                    url?: string | undefined;
                    user_view_type?: string | undefined;
                  } | null;
                  permissions?:
                    | Partial<{
                        actions: "read" | "write";
                        administration: "read" | "write";
                        checks: "read" | "write";
                        content_references: "read" | "write";
                        contents: "read" | "write";
                        deployments: "read" | "write";
                        discussions: "read" | "write";
                        emails: "read" | "write";
                        environments: "read" | "write";
                        issues: "read" | "write";
                        keys: "read" | "write";
                        members: "read" | "write";
                        metadata: "read" | "write";
                        organization_administration: "read" | "write";
                        organization_hooks: "read" | "write";
                        organization_packages: "read" | "write";
                        organization_plan: "read" | "write";
                        organization_projects: "read" | "write";
                        organization_secrets: "read" | "write";
                        organization_self_hosted_runners: "read" | "write";
                        organization_user_blocking: "read" | "write";
                        packages: "read" | "write";
                        pages: "read" | "write";
                        pull_requests: "read" | "write";
                        repository_hooks: "read" | "write";
                        repository_projects: "read" | "write";
                        secret_scanning_alerts: "read" | "write";
                        secrets: "read" | "write";
                        security_events: "read" | "write";
                        security_scanning_alert: "read" | "write";
                        single_file: "read" | "write";
                        statuses: "read" | "write";
                        team_discussions: "read" | "write";
                        vulnerability_alerts: "read" | "write";
                        workflows: "read" | "write";
                      }>
                    | undefined;
                  slug?: string | undefined;
                  updated_at: string | null;
                } | null)
              | undefined;
            pull_request?:
              | Partial<{
                  diff_url: string;
                  html_url: string;
                  merged_at: string | null;
                  patch_url: string;
                  url: string;
                }>
              | undefined;
            reactions?:
              | {
                  "+1": number;
                  "-1": number;
                  confused: number;
                  eyes: number;
                  heart: number;
                  hooray: number;
                  laugh: number;
                  rocket: number;
                  total_count: number;
                  url: string;
                }
              | undefined;
            repository_url?: string | undefined;
            sub_issues_summary?: sub_issues_summary | undefined;
            issue_dependencies_summary?: issue_dependencies_summary | undefined;
            issue_field_values?: Array<issue_field_value> | undefined;
            state?: ("open" | "closed") | undefined;
            state_reason?: (string | null) | undefined;
            timeline_url?: string | undefined;
            title?: string | undefined;
            updated_at?: string | undefined;
            url?: string | undefined;
            user?:
              | ({
                  avatar_url?: string | undefined;
                  deleted?: boolean | undefined;
                  email?: (string | null) | undefined;
                  events_url?: string | undefined;
                  followers_url?: string | undefined;
                  following_url?: string | undefined;
                  gists_url?: string | undefined;
                  gravatar_id?: string | undefined;
                  html_url?: string | undefined;
                  id: number;
                  login: string;
                  name?: string | undefined;
                  node_id?: string | undefined;
                  organizations_url?: string | undefined;
                  received_events_url?: string | undefined;
                  repos_url?: string | undefined;
                  site_admin?: boolean | undefined;
                  starred_url?: string | undefined;
                  subscriptions_url?: string | undefined;
                  type?: ("Bot" | "User" | "Organization") | undefined;
                  url?: string | undefined;
                  user_view_type?: string | undefined;
                } | null)
              | undefined;
            type?: issue_type | undefined;
          } | null;
          old_repository: {
            allow_auto_merge?: boolean | undefined;
            allow_forking?: boolean | undefined;
            allow_merge_commit?: boolean | undefined;
            allow_rebase_merge?: boolean | undefined;
            allow_squash_merge?: boolean | undefined;
            allow_update_branch?: boolean | undefined;
            archive_url: string;
            archived: boolean;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            clone_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            created_at: number | string;
            custom_properties?: Record<string, unknown> | undefined;
            default_branch: string;
            delete_branch_on_merge?: boolean | undefined;
            deployments_url: string;
            description: string | null;
            disabled?: boolean | undefined;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            has_discussions?: boolean | undefined;
            has_downloads: boolean;
            has_issues: boolean;
            has_pages: boolean;
            has_projects: boolean;
            has_wiki: boolean;
            homepage: string | null;
            hooks_url: string;
            html_url: string;
            id: number;
            is_template?: boolean | undefined;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            language: string | null;
            languages_url: string;
            license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
            master_branch?: string | undefined;
            merges_url: string;
            milestones_url: string;
            mirror_url: string | null;
            name: string;
            node_id: string;
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string | undefined;
            owner: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            permissions?:
              | {
                  admin: boolean;
                  maintain?: boolean | undefined;
                  pull: boolean;
                  push: boolean;
                  triage?: boolean | undefined;
                }
              | undefined;
            private: boolean;
            public?: boolean | undefined;
            pulls_url: string;
            pushed_at: (number | string) | null;
            releases_url: string;
            role_name?: (string | null) | undefined;
            size: number;
            ssh_url: string;
            stargazers?: number | undefined;
            stargazers_count: number;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            svn_url: string;
            tags_url: string;
            teams_url: string;
            topics: Array<string>;
            trees_url: string;
            updated_at: string;
            url: string;
            visibility: "public" | "private" | "internal";
            watchers: number;
            watchers_count: number;
            web_commit_signoff_required?: boolean | undefined;
          };
        }
      | undefined;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: {
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      body: string | null;
      closed_at: string | null;
      comments: number;
      comments_url: string;
      created_at: string;
      draft?: boolean | undefined;
      events_url: string;
      html_url: string;
      id: number;
      labels?:
        | Array<{
            color: string;
            default: boolean;
            description: string | null;
            id: number;
            name: string;
            node_id: string;
            url: string;
          }>
        | undefined;
      labels_url: string;
      locked?: boolean | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      performed_via_github_app?:
        | ({
            created_at: string | null;
            description: string | null;
            events?:
              | Array<
                  | "branch_protection_rule"
                  | "check_run"
                  | "check_suite"
                  | "code_scanning_alert"
                  | "commit_comment"
                  | "content_reference"
                  | "create"
                  | "delete"
                  | "deployment"
                  | "deployment_review"
                  | "deployment_status"
                  | "deploy_key"
                  | "discussion"
                  | "discussion_comment"
                  | "fork"
                  | "gollum"
                  | "issues"
                  | "issue_comment"
                  | "label"
                  | "member"
                  | "membership"
                  | "milestone"
                  | "organization"
                  | "org_block"
                  | "page_build"
                  | "project"
                  | "project_card"
                  | "project_column"
                  | "public"
                  | "pull_request"
                  | "pull_request_review"
                  | "pull_request_review_comment"
                  | "push"
                  | "registry_package"
                  | "release"
                  | "repository"
                  | "repository_dispatch"
                  | "secret_scanning_alert"
                  | "star"
                  | "status"
                  | "team"
                  | "team_add"
                  | "watch"
                  | "workflow_dispatch"
                  | "workflow_run"
                  | "security_and_analysis"
                  | "pull_request_review_thread"
                  | "reminder"
                >
              | undefined;
            external_url: string | null;
            html_url: string;
            id: number | null;
            name: string;
            node_id: string;
            owner: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            permissions?:
              | Partial<{
                  actions: "read" | "write";
                  administration: "read" | "write";
                  checks: "read" | "write";
                  content_references: "read" | "write";
                  contents: "read" | "write";
                  deployments: "read" | "write";
                  discussions: "read" | "write";
                  emails: "read" | "write";
                  environments: "read" | "write";
                  issues: "read" | "write";
                  keys: "read" | "write";
                  members: "read" | "write";
                  metadata: "read" | "write";
                  organization_administration: "read" | "write";
                  organization_hooks: "read" | "write";
                  organization_packages: "read" | "write";
                  organization_plan: "read" | "write";
                  organization_projects: "read" | "write" | "admin";
                  organization_secrets: "read" | "write";
                  organization_self_hosted_runners: "read" | "write";
                  organization_user_blocking: "read" | "write";
                  packages: "read" | "write";
                  pages: "read" | "write";
                  pull_requests: "read" | "write";
                  repository_hooks: "read" | "write";
                  repository_projects: "read" | "write";
                  secret_scanning_alerts: "read" | "write";
                  secrets: "read" | "write";
                  security_events: "read" | "write";
                  security_scanning_alert: "read" | "write";
                  single_file: "read" | "write";
                  statuses: "read" | "write";
                  team_discussions: "read" | "write";
                  vulnerability_alerts: "read" | "write";
                  workflows: "read" | "write";
                }>
              | undefined;
            slug?: string | undefined;
            updated_at: string | null;
          } | null)
        | undefined;
      pull_request?:
        | Partial<{ diff_url: string; html_url: string; merged_at: string | null; patch_url: string; url: string }>
        | undefined;
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      repository_url: string;
      sub_issues_summary?: sub_issues_summary | undefined;
      issue_dependencies_summary?: issue_dependencies_summary | undefined;
      issue_field_values?: Array<issue_field_value> | undefined;
      state?: ("open" | "closed") | undefined;
      state_reason?: (string | null) | undefined;
      timeline_url?: string | undefined;
      title: string;
      type?: issue_type | undefined;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issues_pinned = {
    action: "pinned";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: webhooks_issue_2;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issues_reopened = {
    action: "reopened";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: {
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
          } | null)
        | undefined;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      body: string | null;
      closed_at: string | null;
      comments: number;
      comments_url: string;
      created_at: string;
      draft?: boolean | undefined;
      events_url: string;
      html_url: string;
      id: number;
      labels?:
        | Array<{
            color: string;
            default: boolean;
            description: string | null;
            id: number;
            name: string;
            node_id: string;
            url: string;
          } | null>
        | undefined;
      labels_url: string;
      locked?: boolean | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      performed_via_github_app?:
        | ({
            created_at: string | null;
            description: string | null;
            events?:
              | Array<
                  | "branch_protection_rule"
                  | "check_run"
                  | "check_suite"
                  | "code_scanning_alert"
                  | "commit_comment"
                  | "content_reference"
                  | "create"
                  | "delete"
                  | "deployment"
                  | "deployment_review"
                  | "deployment_status"
                  | "deploy_key"
                  | "discussion"
                  | "discussion_comment"
                  | "fork"
                  | "gollum"
                  | "issues"
                  | "issue_comment"
                  | "label"
                  | "member"
                  | "membership"
                  | "milestone"
                  | "organization"
                  | "org_block"
                  | "page_build"
                  | "project"
                  | "project_card"
                  | "project_column"
                  | "public"
                  | "pull_request"
                  | "pull_request_review"
                  | "pull_request_review_comment"
                  | "push"
                  | "registry_package"
                  | "release"
                  | "repository"
                  | "repository_dispatch"
                  | "secret_scanning_alert"
                  | "star"
                  | "status"
                  | "team"
                  | "team_add"
                  | "watch"
                  | "workflow_dispatch"
                  | "workflow_run"
                  | "pull_request_review_thread"
                  | "reminder"
                >
              | undefined;
            external_url: string | null;
            html_url: string;
            id: number | null;
            name: string;
            node_id: string;
            owner: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            permissions?:
              | Partial<{
                  actions: "read" | "write";
                  administration: "read" | "write";
                  checks: "read" | "write";
                  content_references: "read" | "write";
                  contents: "read" | "write";
                  deployments: "read" | "write";
                  discussions: "read" | "write";
                  emails: "read" | "write";
                  environments: "read" | "write";
                  issues: "read" | "write";
                  keys: "read" | "write";
                  members: "read" | "write";
                  metadata: "read" | "write";
                  organization_administration: "read" | "write";
                  organization_hooks: "read" | "write";
                  organization_packages: "read" | "write";
                  organization_plan: "read" | "write";
                  organization_projects: "read" | "write" | "admin";
                  organization_secrets: "read" | "write";
                  organization_self_hosted_runners: "read" | "write";
                  organization_user_blocking: "read" | "write";
                  packages: "read" | "write";
                  pages: "read" | "write";
                  pull_requests: "read" | "write";
                  repository_hooks: "read" | "write";
                  repository_projects: "read" | "write" | "admin";
                  secret_scanning_alerts: "read" | "write";
                  secrets: "read" | "write";
                  security_events: "read" | "write";
                  security_scanning_alert: "read" | "write";
                  single_file: "read" | "write";
                  statuses: "read" | "write";
                  team_discussions: "read" | "write";
                  vulnerability_alerts: "read" | "write";
                  workflows: "read" | "write";
                }>
              | undefined;
            slug?: string | undefined;
            updated_at: string | null;
          } | null)
        | undefined;
      pull_request?:
        | Partial<{ diff_url: string; html_url: string; merged_at: string | null; patch_url: string; url: string }>
        | undefined;
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      repository_url: string;
      sub_issues_summary?: sub_issues_summary | undefined;
      issue_dependencies_summary?: issue_dependencies_summary | undefined;
      issue_field_values?: Array<issue_field_value> | undefined;
      state: "open" | "closed";
      state_reason?: (string | null) | undefined;
      timeline_url?: string | undefined;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      type?: issue_type | undefined;
    };
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issues_transferred = {
    action: "transferred";
    changes: {
      new_issue: {
        active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
        assignee?:
          | ({
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null)
          | undefined;
        assignees: Array<{
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null>;
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        body: string | null;
        closed_at: string | null;
        comments: number;
        comments_url: string;
        created_at: string;
        draft?: boolean | undefined;
        events_url: string;
        html_url: string;
        id: number;
        labels?:
          | Array<{
              color: string;
              default: boolean;
              description: string | null;
              id: number;
              name: string;
              node_id: string;
              url: string;
            }>
          | undefined;
        labels_url: string;
        locked?: boolean | undefined;
        milestone: {
          closed_at: string | null;
          closed_issues: number;
          created_at: string;
          creator: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          description: string | null;
          due_on: string | null;
          html_url: string;
          id: number;
          labels_url: string;
          node_id: string;
          number: number;
          open_issues: number;
          state: "open" | "closed";
          title: string;
          updated_at: string;
          url: string;
        } | null;
        node_id: string;
        number: number;
        performed_via_github_app?:
          | ({
              created_at: string | null;
              description: string | null;
              events?:
                | Array<
                    | "branch_protection_rule"
                    | "check_run"
                    | "check_suite"
                    | "code_scanning_alert"
                    | "commit_comment"
                    | "content_reference"
                    | "create"
                    | "delete"
                    | "deployment"
                    | "deployment_review"
                    | "deployment_status"
                    | "deploy_key"
                    | "discussion"
                    | "discussion_comment"
                    | "fork"
                    | "gollum"
                    | "issues"
                    | "issue_comment"
                    | "label"
                    | "member"
                    | "membership"
                    | "milestone"
                    | "organization"
                    | "org_block"
                    | "page_build"
                    | "project"
                    | "project_card"
                    | "project_column"
                    | "public"
                    | "pull_request"
                    | "pull_request_review"
                    | "pull_request_review_comment"
                    | "push"
                    | "registry_package"
                    | "release"
                    | "repository"
                    | "repository_dispatch"
                    | "secret_scanning_alert"
                    | "star"
                    | "status"
                    | "team"
                    | "team_add"
                    | "watch"
                    | "workflow_dispatch"
                    | "workflow_run"
                  >
                | undefined;
              external_url: string | null;
              html_url: string;
              id: number | null;
              name: string;
              node_id: string;
              owner: {
                avatar_url?: string | undefined;
                deleted?: boolean | undefined;
                email?: (string | null) | undefined;
                events_url?: string | undefined;
                followers_url?: string | undefined;
                following_url?: string | undefined;
                gists_url?: string | undefined;
                gravatar_id?: string | undefined;
                html_url?: string | undefined;
                id: number;
                login: string;
                name?: string | undefined;
                node_id?: string | undefined;
                organizations_url?: string | undefined;
                received_events_url?: string | undefined;
                repos_url?: string | undefined;
                site_admin?: boolean | undefined;
                starred_url?: string | undefined;
                subscriptions_url?: string | undefined;
                type?: ("Bot" | "User" | "Organization") | undefined;
                url?: string | undefined;
                user_view_type?: string | undefined;
              } | null;
              permissions?:
                | Partial<{
                    actions: "read" | "write";
                    administration: "read" | "write";
                    checks: "read" | "write";
                    content_references: "read" | "write";
                    contents: "read" | "write";
                    deployments: "read" | "write";
                    discussions: "read" | "write";
                    emails: "read" | "write";
                    environments: "read" | "write";
                    issues: "read" | "write";
                    keys: "read" | "write";
                    members: "read" | "write";
                    metadata: "read" | "write";
                    organization_administration: "read" | "write";
                    organization_hooks: "read" | "write";
                    organization_packages: "read" | "write";
                    organization_plan: "read" | "write";
                    organization_projects: "read" | "write";
                    organization_secrets: "read" | "write";
                    organization_self_hosted_runners: "read" | "write";
                    organization_user_blocking: "read" | "write";
                    packages: "read" | "write";
                    pages: "read" | "write";
                    pull_requests: "read" | "write";
                    repository_hooks: "read" | "write";
                    repository_projects: "read" | "write";
                    secret_scanning_alerts: "read" | "write";
                    secrets: "read" | "write";
                    security_events: "read" | "write";
                    security_scanning_alert: "read" | "write";
                    single_file: "read" | "write";
                    statuses: "read" | "write";
                    team_discussions: "read" | "write";
                    vulnerability_alerts: "read" | "write";
                    workflows: "read" | "write";
                  }>
                | undefined;
              slug?: string | undefined;
              updated_at: string | null;
            } | null)
          | undefined;
        pull_request?:
          | Partial<{ diff_url: string; html_url: string; merged_at: string | null; patch_url: string; url: string }>
          | undefined;
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          url: string;
        };
        repository_url: string;
        sub_issues_summary?: sub_issues_summary | undefined;
        issue_dependencies_summary?: issue_dependencies_summary | undefined;
        issue_field_values?: Array<issue_field_value> | undefined;
        state?: ("open" | "closed") | undefined;
        state_reason?: (string | null) | undefined;
        timeline_url?: string | undefined;
        title: string;
        type?: issue_type | undefined;
        updated_at: string;
        url: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      new_repository: {
        allow_auto_merge?: boolean | undefined;
        allow_forking?: boolean | undefined;
        allow_merge_commit?: boolean | undefined;
        allow_rebase_merge?: boolean | undefined;
        allow_squash_merge?: boolean | undefined;
        allow_update_branch?: boolean | undefined;
        archive_url: string;
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        custom_properties?: Record<string, unknown> | undefined;
        default_branch: string;
        delete_branch_on_merge?: boolean | undefined;
        deployments_url: string;
        description: string | null;
        disabled?: boolean | undefined;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        has_downloads: boolean;
        has_issues: boolean;
        has_pages: boolean;
        has_projects: boolean;
        has_wiki: boolean;
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        id: number;
        is_template?: boolean | undefined;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
        master_branch?: string | undefined;
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string | undefined;
        owner: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        permissions?:
          | {
              admin: boolean;
              maintain?: boolean | undefined;
              pull: boolean;
              push: boolean;
              triage?: boolean | undefined;
            }
          | undefined;
        private: boolean;
        public?: boolean | undefined;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: (string | null) | undefined;
        size: number;
        ssh_url: string;
        stargazers?: number | undefined;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        visibility: "public" | "private" | "internal";
        watchers: number;
        watchers_count: number;
        web_commit_signoff_required?: boolean | undefined;
      };
    };
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: webhooks_issue_2;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issues_typed = {
    action: "typed";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: webhooks_issue;
    type: issue_type;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issues_unassigned = {
    action: "unassigned";
    assignee?: webhooks_user_mannequin | undefined;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: webhooks_issue;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issues_unlabeled = {
    action: "unlabeled";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: webhooks_issue;
    label?: webhooks_label | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issues_unlocked = {
    action: "unlocked";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: {
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      body: string | null;
      closed_at: string | null;
      comments: number;
      comments_url: string;
      created_at: string;
      draft?: boolean | undefined;
      events_url: string;
      html_url: string;
      id: number;
      labels?:
        | Array<{
            color: string;
            default: boolean;
            description: string | null;
            id: number;
            name: string;
            node_id: string;
            url: string;
          } | null>
        | undefined;
      labels_url: string;
      locked: false;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      performed_via_github_app?:
        | ({
            created_at: string | null;
            description: string | null;
            events?:
              | Array<
                  | "branch_protection_rule"
                  | "check_run"
                  | "check_suite"
                  | "code_scanning_alert"
                  | "commit_comment"
                  | "content_reference"
                  | "create"
                  | "delete"
                  | "deployment"
                  | "deployment_review"
                  | "deployment_status"
                  | "deploy_key"
                  | "discussion"
                  | "discussion_comment"
                  | "fork"
                  | "gollum"
                  | "issues"
                  | "issue_comment"
                  | "label"
                  | "member"
                  | "membership"
                  | "milestone"
                  | "organization"
                  | "org_block"
                  | "page_build"
                  | "project"
                  | "project_card"
                  | "project_column"
                  | "public"
                  | "pull_request"
                  | "pull_request_review"
                  | "pull_request_review_comment"
                  | "push"
                  | "registry_package"
                  | "release"
                  | "repository"
                  | "repository_dispatch"
                  | "secret_scanning_alert"
                  | "star"
                  | "status"
                  | "team"
                  | "team_add"
                  | "watch"
                  | "workflow_dispatch"
                  | "workflow_run"
                >
              | undefined;
            external_url: string | null;
            html_url: string;
            id: number | null;
            name: string;
            node_id: string;
            owner: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            permissions?:
              | Partial<{
                  actions: "read" | "write";
                  administration: "read" | "write";
                  checks: "read" | "write";
                  content_references: "read" | "write";
                  contents: "read" | "write";
                  deployments: "read" | "write";
                  discussions: "read" | "write";
                  emails: "read" | "write";
                  environments: "read" | "write";
                  issues: "read" | "write";
                  keys: "read" | "write";
                  members: "read" | "write";
                  metadata: "read" | "write";
                  organization_administration: "read" | "write";
                  organization_hooks: "read" | "write";
                  organization_packages: "read" | "write";
                  organization_plan: "read" | "write";
                  organization_projects: "read" | "write";
                  organization_secrets: "read" | "write";
                  organization_self_hosted_runners: "read" | "write";
                  organization_user_blocking: "read" | "write";
                  packages: "read" | "write";
                  pages: "read" | "write";
                  pull_requests: "read" | "write";
                  repository_hooks: "read" | "write";
                  repository_projects: "read" | "write";
                  secret_scanning_alerts: "read" | "write";
                  secrets: "read" | "write";
                  security_events: "read" | "write";
                  security_scanning_alert: "read" | "write";
                  single_file: "read" | "write";
                  statuses: "read" | "write";
                  team_discussions: "read" | "write";
                  vulnerability_alerts: "read" | "write";
                  workflows: "read" | "write";
                }>
              | undefined;
            slug?: string | undefined;
            updated_at: string | null;
          } | null)
        | undefined;
      pull_request?:
        | Partial<{ diff_url: string; html_url: string; merged_at: string | null; patch_url: string; url: string }>
        | undefined;
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      repository_url: string;
      sub_issues_summary?: sub_issues_summary | undefined;
      issue_dependencies_summary?: issue_dependencies_summary | undefined;
      issue_field_values?: Array<issue_field_value> | undefined;
      state?: ("open" | "closed") | undefined;
      state_reason?: (string | null) | undefined;
      timeline_url?: string | undefined;
      title: string;
      type?: issue_type | undefined;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issues_unpinned = {
    action: "unpinned";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: webhooks_issue_2;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_issues_untyped = {
    action: "untyped";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    issue: webhooks_issue;
    type: issue_type;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_label_created = {
    action: "created";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    label: webhooks_label;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender?: simple_user | undefined;
  };
  export type webhook_label_deleted = {
    action: "deleted";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    label: webhooks_label;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_label_edited = {
    action: "edited";
    changes?: Partial<{ color: { from: string }; description: { from: string }; name: { from: string } }> | undefined;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    label: webhooks_label;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_marketplace_purchase_cancelled = {
    action: "cancelled";
    effective_date: string;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    marketplace_purchase: webhooks_marketplace_purchase;
    organization?: organization_simple_webhooks | undefined;
    previous_marketplace_purchase?: webhooks_previous_marketplace_purchase | undefined;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_marketplace_purchase_changed = {
    action: "changed";
    effective_date: string;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    marketplace_purchase: webhooks_marketplace_purchase;
    organization?: organization_simple_webhooks | undefined;
    previous_marketplace_purchase?:
      | {
          account: {
            id: number;
            login: string;
            node_id: string;
            organization_billing_email: string | null;
            type: string;
          };
          billing_cycle: string;
          free_trial_ends_on: string | null;
          next_billing_date?: (string | null) | undefined;
          on_free_trial: boolean | null;
          plan: {
            bullets: Array<string>;
            description: string;
            has_free_trial: boolean;
            id: number;
            monthly_price_in_cents: number;
            name: string;
            price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
            unit_name: string | null;
            yearly_price_in_cents: number;
          };
          unit_count: number;
        }
      | undefined;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_marketplace_purchase_pending_change = {
    action: "pending_change";
    effective_date: string;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    marketplace_purchase: webhooks_marketplace_purchase;
    organization?: organization_simple_webhooks | undefined;
    previous_marketplace_purchase?:
      | {
          account: {
            id: number;
            login: string;
            node_id: string;
            organization_billing_email: string | null;
            type: string;
          };
          billing_cycle: string;
          free_trial_ends_on: string | null;
          next_billing_date?: (string | null) | undefined;
          on_free_trial: boolean;
          plan: {
            bullets: Array<string>;
            description: string;
            has_free_trial: boolean;
            id: number;
            monthly_price_in_cents: number;
            name: string;
            price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
            unit_name: string | null;
            yearly_price_in_cents: number;
          };
          unit_count: number;
        }
      | undefined;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_marketplace_purchase_pending_change_cancelled = {
    action: "pending_change_cancelled";
    effective_date: string;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    marketplace_purchase: {
      account: { id: number; login: string; node_id: string; organization_billing_email: string | null; type: string };
      billing_cycle: string;
      free_trial_ends_on: unknown | null;
      next_billing_date: string | null;
      on_free_trial: boolean;
      plan: {
        bullets: Array<string>;
        description: string;
        has_free_trial: boolean;
        id: number;
        monthly_price_in_cents: number;
        name: string;
        price_model: "FREE" | "FLAT_RATE" | "PER_UNIT";
        unit_name: string | null;
        yearly_price_in_cents: number;
      };
      unit_count: number;
    };
    organization?: organization_simple_webhooks | undefined;
    previous_marketplace_purchase?: webhooks_previous_marketplace_purchase | undefined;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_marketplace_purchase_purchased = {
    action: "purchased";
    effective_date: string;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    marketplace_purchase: webhooks_marketplace_purchase;
    organization?: organization_simple_webhooks | undefined;
    previous_marketplace_purchase?: webhooks_previous_marketplace_purchase | undefined;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_member_added = {
    action: "added";
    changes?: Partial<{ permission: { to: "write" | "admin" | "read" }; role_name: { to: string } }> | undefined;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    member: webhooks_user;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_member_edited = {
    action: "edited";
    changes: Partial<{
      old_permission: { from: string };
      permission: Partial<{ from: string | null; to: string | null }>;
    }>;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    member: webhooks_user;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_member_removed = {
    action: "removed";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    member: webhooks_user;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_membership_added = {
    action: "added";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    member: webhooks_user;
    organization: organization_simple_webhooks;
    repository?: repository_webhooks | undefined;
    scope: "team";
    sender: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
    team: webhooks_team;
  };
  export type webhook_membership_removed = {
    action: "removed";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    member: webhooks_user;
    organization: organization_simple_webhooks;
    repository?: repository_webhooks | undefined;
    scope: "team" | "organization";
    sender: {
      avatar_url?: string | undefined;
      deleted?: boolean | undefined;
      email?: (string | null) | undefined;
      events_url?: string | undefined;
      followers_url?: string | undefined;
      following_url?: string | undefined;
      gists_url?: string | undefined;
      gravatar_id?: string | undefined;
      html_url?: string | undefined;
      id: number;
      login: string;
      name?: string | undefined;
      node_id?: string | undefined;
      organizations_url?: string | undefined;
      received_events_url?: string | undefined;
      repos_url?: string | undefined;
      site_admin?: boolean | undefined;
      starred_url?: string | undefined;
      subscriptions_url?: string | undefined;
      type?: ("Bot" | "User" | "Organization") | undefined;
      url?: string | undefined;
      user_view_type?: string | undefined;
    } | null;
    team: webhooks_team;
  };
  export type webhook_merge_group_checks_requested = {
    action: "checks_requested";
    installation?: simple_installation | undefined;
    merge_group: merge_group;
    organization?: organization_simple_webhooks | undefined;
    repository?: repository_webhooks | undefined;
    sender?: simple_user | undefined;
  };
  export type webhook_merge_group_destroyed = {
    action: "destroyed";
    reason?: ("merged" | "invalidated" | "dequeued") | undefined;
    installation?: simple_installation | undefined;
    merge_group: merge_group;
    organization?: organization_simple_webhooks | undefined;
    repository?: repository_webhooks | undefined;
    sender?: simple_user | undefined;
  };
  export type webhook_meta_deleted = {
    action: "deleted";
    enterprise?: enterprise_webhooks | undefined;
    hook: {
      active: boolean;
      config: { content_type: "json" | "form"; insecure_ssl: string; secret?: string | undefined; url: string };
      created_at: string;
      events: Array<
        | "*"
        | "branch_protection_rule"
        | "check_run"
        | "check_suite"
        | "code_scanning_alert"
        | "commit_comment"
        | "create"
        | "delete"
        | "deployment"
        | "deployment_status"
        | "deploy_key"
        | "discussion"
        | "discussion_comment"
        | "fork"
        | "gollum"
        | "issues"
        | "issue_comment"
        | "label"
        | "member"
        | "membership"
        | "meta"
        | "milestone"
        | "organization"
        | "org_block"
        | "package"
        | "page_build"
        | "project"
        | "project_card"
        | "project_column"
        | "public"
        | "pull_request"
        | "pull_request_review"
        | "pull_request_review_comment"
        | "pull_request_review_thread"
        | "push"
        | "registry_package"
        | "release"
        | "repository"
        | "repository_import"
        | "repository_vulnerability_alert"
        | "secret_scanning_alert"
        | "secret_scanning_alert_location"
        | "security_and_analysis"
        | "star"
        | "status"
        | "team"
        | "team_add"
        | "watch"
        | "workflow_job"
        | "workflow_run"
        | "repository_dispatch"
        | "projects_v2_item"
      >;
      id: number;
      name: string;
      type: string;
      updated_at: string;
    };
    hook_id: number;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository?: nullable_repository_webhooks | undefined;
    sender?: simple_user | undefined;
  };
  export type webhook_milestone_closed = {
    action: "closed";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    milestone: webhooks_milestone;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_milestone_created = {
    action: "created";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    milestone: webhooks_milestone_3;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_milestone_deleted = {
    action: "deleted";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    milestone: webhooks_milestone;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_milestone_edited = {
    action: "edited";
    changes: Partial<{ description: { from: string }; due_on: { from: string }; title: { from: string } }>;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    milestone: webhooks_milestone;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_milestone_opened = {
    action: "opened";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    milestone: webhooks_milestone_3;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_org_block_blocked = {
    action: "blocked";
    blocked_user: webhooks_user;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_org_block_unblocked = {
    action: "unblocked";
    blocked_user: webhooks_user;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_organization_deleted = {
    action: "deleted";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    membership?: webhooks_membership | undefined;
    organization: organization_simple_webhooks;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_organization_member_added = {
    action: "member_added";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    membership: webhooks_membership;
    organization: organization_simple_webhooks;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_organization_member_invited = {
    action: "member_invited";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    invitation: {
      created_at: string;
      email: string | null;
      failed_at: string | null;
      failed_reason: string | null;
      id: number;
      invitation_teams_url: string;
      inviter: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      login: string | null;
      node_id: string;
      role: string;
      team_count: number;
      invitation_source?: string | undefined;
    };
    organization: organization_simple_webhooks;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
    user?: webhooks_user | undefined;
  };
  export type webhook_organization_member_removed = {
    action: "member_removed";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    membership: webhooks_membership;
    organization: organization_simple_webhooks;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_organization_renamed = {
    action: "renamed";
    changes?: Partial<{ login: Partial<{ from: string }> }> | undefined;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    membership?: webhooks_membership | undefined;
    organization: organization_simple_webhooks;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_rubygems_metadata = Partial<{
    name: string;
    description: string;
    readme: string;
    homepage: string;
    version_info: Partial<{ version: string }>;
    platform: string;
    metadata: Record<string, string>;
    repo: string;
    dependencies: Array<Record<string, string>>;
    commit_oid: string;
  }>;
  export type webhook_package_published = {
    action: "published";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    package: {
      created_at: string | null;
      description: string | null;
      ecosystem: string;
      html_url: string;
      id: number;
      name: string;
      namespace: string;
      owner: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      package_type: string;
      package_version: {
        author?:
          | ({
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null)
          | undefined;
        body?: (string | Record<string, unknown>) | undefined;
        body_html?: string | undefined;
        container_metadata?:
          | (Partial<{
              labels: Record<string, unknown> | null;
              manifest: Record<string, unknown> | null;
              tag: Partial<{ digest: string; name: string }>;
            }> | null)
          | undefined;
        created_at?: string | undefined;
        description: string;
        docker_metadata?: Array<Partial<{ tags: Array<string> }>> | undefined;
        draft?: boolean | undefined;
        html_url: string;
        id: number;
        installation_command: string;
        manifest?: string | undefined;
        metadata: Array<Record<string, unknown>>;
        name: string;
        npm_metadata?:
          | (Partial<{
              name: string;
              version: string;
              npm_user: string;
              author: Record<string, unknown> | null;
              bugs: Record<string, unknown> | null;
              dependencies: Record<string, unknown>;
              dev_dependencies: Record<string, unknown>;
              peer_dependencies: Record<string, unknown>;
              optional_dependencies: Record<string, unknown>;
              description: string;
              dist: Record<string, unknown> | null;
              git_head: string;
              homepage: string;
              license: string;
              main: string;
              repository: Record<string, unknown> | null;
              scripts: Record<string, unknown>;
              id: string;
              node_version: string;
              npm_version: string;
              has_shrinkwrap: boolean;
              maintainers: Array<Record<string, unknown>>;
              contributors: Array<Record<string, unknown>>;
              engines: Record<string, unknown>;
              keywords: Array<string>;
              files: Array<string>;
              bin: Record<string, unknown>;
              man: Record<string, unknown>;
              directories: Record<string, unknown> | null;
              os: Array<string>;
              cpu: Array<string>;
              readme: string;
              installation_command: string;
              release_id: number;
              commit_oid: string;
              published_via_actions: boolean;
              deleted_by_id: number;
            }> | null)
          | undefined;
        nuget_metadata?:
          | (Array<
              Partial<{
                id: number | string;
                name: string;
                value:
                  | boolean
                  | string
                  | number
                  | Partial<{ url: string; branch: string; commit: string; type: string }>;
              }>
            > | null)
          | undefined;
        package_files: Array<{
          content_type: string;
          created_at: string;
          download_url: string;
          id: number;
          md5: string | null;
          name: string;
          sha1: string | null;
          sha256: string | null;
          size: number;
          state: string | null;
          updated_at: string;
        }>;
        package_url?: string | undefined;
        prerelease?: boolean | undefined;
        release?:
          | {
              author: {
                avatar_url?: string | undefined;
                deleted?: boolean | undefined;
                email?: (string | null) | undefined;
                events_url?: string | undefined;
                followers_url?: string | undefined;
                following_url?: string | undefined;
                gists_url?: string | undefined;
                gravatar_id?: string | undefined;
                html_url?: string | undefined;
                id: number;
                login: string;
                name?: string | undefined;
                node_id?: string | undefined;
                organizations_url?: string | undefined;
                received_events_url?: string | undefined;
                repos_url?: string | undefined;
                site_admin?: boolean | undefined;
                starred_url?: string | undefined;
                subscriptions_url?: string | undefined;
                type?: ("Bot" | "User" | "Organization") | undefined;
                url?: string | undefined;
                user_view_type?: string | undefined;
              } | null;
              created_at: string;
              draft: boolean;
              html_url: string;
              id: number;
              name: string | null;
              prerelease: boolean;
              published_at: string;
              tag_name: string;
              target_commitish: string;
              url: string;
            }
          | undefined;
        rubygems_metadata?: Array<webhook_rubygems_metadata> | undefined;
        source_url?: string | undefined;
        summary: string;
        tag_name?: string | undefined;
        target_commitish?: string | undefined;
        target_oid?: string | undefined;
        updated_at?: string | undefined;
        version: string;
      } | null;
      registry: { about_url: string; name: string; type: string; url: string; vendor: string } | null;
      updated_at: string | null;
    };
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_package_updated = {
    action: "updated";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    package: {
      created_at: string;
      description: string | null;
      ecosystem: string;
      html_url: string;
      id: number;
      name: string;
      namespace: string;
      owner: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      package_type: string;
      package_version: {
        author: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        body: string;
        body_html: string;
        created_at: string;
        description: string;
        docker_metadata?: Array<Partial<{ tags: Array<string> }>> | undefined;
        draft?: boolean | undefined;
        html_url: string;
        id: number;
        installation_command: string;
        manifest?: string | undefined;
        metadata: Array<Record<string, unknown>>;
        name: string;
        package_files: Array<{
          content_type: string;
          created_at: string;
          download_url: string;
          id: number;
          md5: string | null;
          name: string;
          sha1: string | null;
          sha256: string;
          size: number;
          state: string;
          updated_at: string;
        }>;
        package_url?: string | undefined;
        prerelease?: boolean | undefined;
        release?:
          | {
              author: {
                avatar_url?: string | undefined;
                deleted?: boolean | undefined;
                email?: (string | null) | undefined;
                events_url?: string | undefined;
                followers_url?: string | undefined;
                following_url?: string | undefined;
                gists_url?: string | undefined;
                gravatar_id?: string | undefined;
                html_url?: string | undefined;
                id: number;
                login: string;
                name?: string | undefined;
                node_id?: string | undefined;
                organizations_url?: string | undefined;
                received_events_url?: string | undefined;
                repos_url?: string | undefined;
                site_admin?: boolean | undefined;
                starred_url?: string | undefined;
                subscriptions_url?: string | undefined;
                type?: ("Bot" | "User" | "Organization") | undefined;
                url?: string | undefined;
                user_view_type?: string | undefined;
              } | null;
              created_at: string;
              draft: boolean;
              html_url: string;
              id: number;
              name: string;
              prerelease: boolean;
              published_at: string;
              tag_name: string;
              target_commitish: string;
              url: string;
            }
          | undefined;
        rubygems_metadata?: Array<webhook_rubygems_metadata> | undefined;
        source_url?: string | undefined;
        summary: string;
        tag_name?: string | undefined;
        target_commitish: string;
        target_oid: string;
        updated_at: string;
        version: string;
      };
      registry: { about_url: string; name: string; type: string; url: string; vendor: string } | null;
      updated_at: string;
    };
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_page_build = {
    build: {
      commit: string | null;
      created_at: string;
      duration: number;
      error: { message: string | null };
      pusher: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      status: string;
      updated_at: string;
      url: string;
    };
    enterprise?: enterprise_webhooks | undefined;
    id: number;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_personal_access_token_request_approved = {
    action: "approved";
    personal_access_token_request: personal_access_token_request;
    enterprise?: enterprise_webhooks | undefined;
    organization: organization_simple_webhooks;
    sender: simple_user;
    installation: simple_installation;
  };
  export type webhook_personal_access_token_request_cancelled = {
    action: "cancelled";
    personal_access_token_request: personal_access_token_request;
    enterprise?: enterprise_webhooks | undefined;
    organization: organization_simple_webhooks;
    sender: simple_user;
    installation: simple_installation;
  };
  export type webhook_personal_access_token_request_created = {
    action: "created";
    personal_access_token_request: personal_access_token_request;
    enterprise?: enterprise_webhooks | undefined;
    organization: organization_simple_webhooks;
    sender: simple_user;
    installation?: simple_installation | undefined;
  };
  export type webhook_personal_access_token_request_denied = {
    action: "denied";
    personal_access_token_request: personal_access_token_request;
    organization: organization_simple_webhooks;
    enterprise?: enterprise_webhooks | undefined;
    sender: simple_user;
    installation: simple_installation;
  };
  export type webhook_ping = Partial<{
    hook: {
      active: boolean;
      app_id?: number | undefined;
      config: Partial<{
        content_type: webhook_config_content_type;
        insecure_ssl: webhook_config_insecure_ssl;
        secret: webhook_config_secret;
        url: webhook_config_url;
      }>;
      created_at: string;
      deliveries_url?: string | undefined;
      events: Array<string>;
      id: number;
      last_response?: hook_response | undefined;
      name: "web";
      ping_url?: string | undefined;
      test_url?: string | undefined;
      type: string;
      updated_at: string;
      url?: string | undefined;
    };
    hook_id: number;
    organization: organization_simple_webhooks;
    repository: repository_webhooks;
    sender: simple_user;
    zen: string;
  }>;
  export type webhook_ping_form_encoded = { payload: string };
  export type webhook_project_card_converted = {
    action: "converted";
    changes: { note: { from: string } };
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    project_card: webhooks_project_card;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_project_card_created = {
    action: "created";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    project_card: webhooks_project_card;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_project_card_deleted = {
    action: "deleted";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    project_card: {
      after_id?: (number | null) | undefined;
      archived: boolean;
      column_id: number | null;
      column_url: string;
      content_url?: string | undefined;
      created_at: string;
      creator: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      id: number;
      node_id: string;
      note: string | null;
      project_url: string;
      updated_at: string;
      url: string;
    };
    repository?: nullable_repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_project_card_edited = {
    action: "edited";
    changes: { note: { from: string | null } };
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    project_card: webhooks_project_card;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_project_card_moved = {
    action: "moved";
    changes?: { column_id: { from: number } } | undefined;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    project_card: {
      after_id?: (number | null) | undefined;
      archived: boolean;
      column_id: number;
      column_url: string;
      content_url?: string | undefined;
      created_at: string;
      creator: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      id: number;
      node_id: string;
      note: string | null;
      project_url: string;
      updated_at: string;
      url: string;
    } & {
      after_id: number | null;
      archived?: boolean | undefined;
      column_id?: number | undefined;
      column_url?: string | undefined;
      created_at?: string | undefined;
      creator?:
        | (Partial<{
            avatar_url: string;
            events_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            gravatar_id: string;
            html_url: string;
            id: number;
            login: string;
            node_id: string;
            organizations_url: string;
            received_events_url: string;
            repos_url: string;
            site_admin: boolean;
            starred_url: string;
            subscriptions_url: string;
            type: string;
            url: string;
          }> | null)
        | undefined;
      id?: number | undefined;
      node_id?: string | undefined;
      note?: (string | null) | undefined;
      project_url?: string | undefined;
      updated_at?: string | undefined;
      url?: string | undefined;
    };
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_project_closed = {
    action: "closed";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    project: webhooks_project;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_project_column_created = {
    action: "created";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    project_column: webhooks_project_column;
    repository?: repository_webhooks | undefined;
    sender?: simple_user | undefined;
  };
  export type webhook_project_column_deleted = {
    action: "deleted";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    project_column: webhooks_project_column;
    repository?: nullable_repository_webhooks | undefined;
    sender?: simple_user | undefined;
  };
  export type webhook_project_column_edited = {
    action: "edited";
    changes: Partial<{ name: { from: string } }>;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    project_column: webhooks_project_column;
    repository?: repository_webhooks | undefined;
    sender?: simple_user | undefined;
  };
  export type webhook_project_column_moved = {
    action: "moved";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    project_column: webhooks_project_column;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_project_created = {
    action: "created";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    project: webhooks_project;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_project_deleted = {
    action: "deleted";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    project: webhooks_project;
    repository?: nullable_repository_webhooks | undefined;
    sender?: simple_user | undefined;
  };
  export type webhook_project_edited = {
    action: "edited";
    changes?: Partial<{ body: { from: string }; name: { from: string } }> | undefined;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    project: webhooks_project;
    repository?: repository_webhooks | undefined;
    sender?: simple_user | undefined;
  };
  export type webhook_project_reopened = {
    action: "reopened";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    project: webhooks_project;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_projects_v2_project_closed = {
    action: "closed";
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    projects_v2: projects_v2;
    sender: simple_user;
  };
  export type webhook_projects_v2_project_created = {
    action: "created";
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    projects_v2: projects_v2;
    sender: simple_user;
  };
  export type webhook_projects_v2_project_deleted = {
    action: "deleted";
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    projects_v2: projects_v2;
    sender: simple_user;
  };
  export type webhook_projects_v2_project_edited = {
    action: "edited";
    changes: Partial<{
      description: Partial<{ from: string | null; to: string | null }>;
      public: Partial<{ from: boolean; to: boolean }>;
      short_description: Partial<{ from: string | null; to: string | null }>;
      title: Partial<{ from: string; to: string }>;
    }>;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    projects_v2: projects_v2;
    sender: simple_user;
  };
  export type webhook_projects_v2_item_archived = {
    action: "archived";
    changes: webhooks_project_changes;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    projects_v2_item: projects_v2_item;
    sender: simple_user;
  };
  export type webhook_projects_v2_item_converted = {
    action: "converted";
    changes: Partial<{ content_type: Partial<{ from: string | null; to: string }> }>;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    projects_v2_item: projects_v2_item;
    sender: simple_user;
  };
  export type webhook_projects_v2_item_created = {
    action: "created";
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    projects_v2_item: projects_v2_item;
    sender: simple_user;
  };
  export type webhook_projects_v2_item_deleted = {
    action: "deleted";
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    projects_v2_item: projects_v2_item;
    sender: simple_user;
  };
  export type webhook_projects_v2_item_edited = {
    action: "edited";
    changes?:
      | (
          | {
              field_value: Partial<{
                field_node_id: string;
                field_type: string;
                field_name: string;
                project_number: number;
                from: (string | number | projects_v2_single_select_option | projects_v2_iteration_setting) | null;
                to: (string | number | projects_v2_single_select_option | projects_v2_iteration_setting) | null;
              }>;
            }
          | { body: Partial<{ from: string | null; to: string | null }> }
        )
      | undefined;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    projects_v2_item: projects_v2_item;
    sender: simple_user;
  };
  export type webhook_projects_v2_item_reordered = {
    action: "reordered";
    changes: Partial<{ previous_projects_v2_item_node_id: Partial<{ from: string | null; to: string | null }> }>;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    projects_v2_item: projects_v2_item;
    sender: simple_user;
  };
  export type webhook_projects_v2_item_restored = {
    action: "restored";
    changes: webhooks_project_changes;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    projects_v2_item: projects_v2_item;
    sender: simple_user;
  };
  export type webhook_projects_v2_project_reopened = {
    action: "reopened";
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    projects_v2: projects_v2;
    sender: simple_user;
  };
  export type webhook_projects_v2_status_update_created = {
    action: "created";
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    projects_v2_status_update: projects_v2_status_update;
    sender: simple_user;
  };
  export type webhook_projects_v2_status_update_deleted = {
    action: "deleted";
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    projects_v2_status_update: projects_v2_status_update;
    sender: simple_user;
  };
  export type webhook_projects_v2_status_update_edited = {
    action: "edited";
    changes?:
      | Partial<{
          body: Partial<{ from: string | null; to: string | null }>;
          status: Partial<{
            from: ("INACTIVE" | "ON_TRACK" | "AT_RISK" | "OFF_TRACK" | "COMPLETE") | null;
            to: ("INACTIVE" | "ON_TRACK" | "AT_RISK" | "OFF_TRACK" | "COMPLETE") | null;
          }>;
          start_date: Partial<{ from: string | null; to: string | null }>;
          target_date: Partial<{ from: string | null; to: string | null }>;
        }>
      | undefined;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    projects_v2_status_update: projects_v2_status_update;
    sender: simple_user;
  };
  export type webhook_public = {
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_pull_request_assigned = {
    action: "assigned";
    assignee: webhooks_user;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    number: webhooks_number;
    organization?: organization_simple_webhooks | undefined;
    pull_request: {
      _links: {
        comments: { href: string };
        commits: { href: string };
        html: { href: string };
        issue: { href: string };
        review_comment: { href: string };
        review_comments: { href: string };
        self: { href: string };
        statuses: { href: string };
      };
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      additions?: number | undefined;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      auto_merge: {
        commit_message: string | null;
        commit_title: string | null;
        enabled_by: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        merge_method: "merge" | "squash" | "rebase";
      } | null;
      base: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      body: string | null;
      changed_files?: number | undefined;
      closed_at: string | null;
      comments?: number | undefined;
      comments_url: string;
      commits?: number | undefined;
      commits_url: string;
      created_at: string;
      deletions?: number | undefined;
      diff_url: string;
      draft: boolean;
      head: {
        label: string | null;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        } | null;
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      html_url: string;
      id: number;
      issue_url: string;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      locked: boolean;
      maintainer_can_modify?: boolean | undefined;
      merge_commit_sha: string | null;
      mergeable?: (boolean | null) | undefined;
      mergeable_state?: string | undefined;
      merged?: (boolean | null) | undefined;
      merged_at: string | null;
      merged_by?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      patch_url: string;
      rebaseable?: (boolean | null) | undefined;
      requested_reviewers: Array<
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | {
            deleted?: boolean | undefined;
            description: string | null;
            html_url: string;
            id: number;
            members_url: string;
            name: string;
            node_id: string;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission: string;
            privacy: "open" | "closed" | "secret";
            repositories_url: string;
            slug: string;
            url: string;
          }
      >;
      requested_teams: Array<{
        deleted?: boolean | undefined;
        description?: (string | null) | undefined;
        html_url?: string | undefined;
        id: number;
        members_url?: string | undefined;
        name: string;
        node_id?: string | undefined;
        parent?:
          | ({
              description: string | null;
              html_url: string;
              id: number;
              members_url: string;
              name: string;
              node_id: string;
              permission: string;
              privacy: "open" | "closed" | "secret";
              repositories_url: string;
              slug: string;
              url: string;
            } | null)
          | undefined;
        permission?: string | undefined;
        privacy?: ("open" | "closed" | "secret") | undefined;
        repositories_url?: string | undefined;
        slug?: string | undefined;
        url?: string | undefined;
      }>;
      review_comment_url: string;
      review_comments?: number | undefined;
      review_comments_url: string;
      state: "open" | "closed";
      statuses_url: string;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_pull_request_auto_merge_disabled = {
    action: "auto_merge_disabled";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    number: number;
    organization?: organization_simple_webhooks | undefined;
    pull_request: {
      _links: {
        comments: { href: string };
        commits: { href: string };
        html: { href: string };
        issue: { href: string };
        review_comment: { href: string };
        review_comments: { href: string };
        self: { href: string };
        statuses: { href: string };
      };
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      additions?: number | undefined;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      auto_merge: {
        commit_message: string | null;
        commit_title: string | null;
        enabled_by: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        merge_method: "merge" | "squash" | "rebase";
      } | null;
      base: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_discussions: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      body: string | null;
      changed_files?: number | undefined;
      closed_at: string | null;
      comments?: number | undefined;
      comments_url: string;
      commits?: number | undefined;
      commits_url: string;
      created_at: string;
      deletions?: number | undefined;
      diff_url: string;
      draft: boolean;
      head: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      html_url: string;
      id: number;
      issue_url: string;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      locked: boolean;
      maintainer_can_modify?: boolean | undefined;
      merge_commit_sha: string | null;
      mergeable?: (boolean | null) | undefined;
      mergeable_state?: string | undefined;
      merged?: (boolean | null) | undefined;
      merged_at: string | null;
      merged_by?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      patch_url: string;
      rebaseable?: (boolean | null) | undefined;
      requested_reviewers: Array<
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | {
            deleted?: boolean | undefined;
            description: string | null;
            html_url: string;
            id: number;
            members_url: string;
            name: string;
            node_id: string;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission: string;
            privacy: "open" | "closed" | "secret";
            repositories_url: string;
            slug: string;
            url: string;
          }
      >;
      requested_teams: Array<{
        deleted?: boolean | undefined;
        description?: (string | null) | undefined;
        html_url?: string | undefined;
        id: number;
        members_url?: string | undefined;
        name: string;
        node_id?: string | undefined;
        parent?:
          | ({
              description: string | null;
              html_url: string;
              id: number;
              members_url: string;
              name: string;
              node_id: string;
              permission: string;
              privacy: "open" | "closed" | "secret";
              repositories_url: string;
              slug: string;
              url: string;
            } | null)
          | undefined;
        permission?: string | undefined;
        privacy?: ("open" | "closed" | "secret") | undefined;
        repositories_url?: string | undefined;
        slug?: string | undefined;
        url?: string | undefined;
      }>;
      review_comment_url: string;
      review_comments?: number | undefined;
      review_comments_url: string;
      state: "open" | "closed";
      statuses_url: string;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    reason: string;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_pull_request_auto_merge_enabled = {
    action: "auto_merge_enabled";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    number: number;
    organization?: organization_simple_webhooks | undefined;
    pull_request: {
      _links: {
        comments: { href: string };
        commits: { href: string };
        html: { href: string };
        issue: { href: string };
        review_comment: { href: string };
        review_comments: { href: string };
        self: { href: string };
        statuses: { href: string };
      };
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      additions?: number | undefined;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      auto_merge: {
        commit_message: string | null;
        commit_title: string | null;
        enabled_by: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        merge_method: "merge" | "squash" | "rebase";
      } | null;
      base: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      body: string | null;
      changed_files?: number | undefined;
      closed_at: string | null;
      comments?: number | undefined;
      comments_url: string;
      commits?: number | undefined;
      commits_url: string;
      created_at: string;
      deletions?: number | undefined;
      diff_url: string;
      draft: boolean;
      head: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      html_url: string;
      id: number;
      issue_url: string;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      locked: boolean;
      maintainer_can_modify?: boolean | undefined;
      merge_commit_sha: string | null;
      mergeable?: (boolean | null) | undefined;
      mergeable_state?: string | undefined;
      merged?: (boolean | null) | undefined;
      merged_at: string | null;
      merged_by?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      patch_url: string;
      rebaseable?: (boolean | null) | undefined;
      requested_reviewers: Array<
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | {
            deleted?: boolean | undefined;
            description: string | null;
            html_url: string;
            id: number;
            members_url: string;
            name: string;
            node_id: string;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission: string;
            privacy: "open" | "closed" | "secret";
            repositories_url: string;
            slug: string;
            url: string;
          }
      >;
      requested_teams: Array<{
        deleted?: boolean | undefined;
        description?: (string | null) | undefined;
        html_url?: string | undefined;
        id: number;
        members_url?: string | undefined;
        name: string;
        node_id?: string | undefined;
        parent?:
          | ({
              description: string | null;
              html_url: string;
              id: number;
              members_url: string;
              name: string;
              node_id: string;
              permission: string;
              privacy: "open" | "closed" | "secret";
              repositories_url: string;
              slug: string;
              url: string;
            } | null)
          | undefined;
        permission?: string | undefined;
        privacy?: ("open" | "closed" | "secret") | undefined;
        repositories_url?: string | undefined;
        slug?: string | undefined;
        url?: string | undefined;
      }>;
      review_comment_url: string;
      review_comments?: number | undefined;
      review_comments_url: string;
      state: "open" | "closed";
      statuses_url: string;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    reason?: string | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_pull_request_closed = {
    action: "closed";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    number: webhooks_number;
    organization?: organization_simple_webhooks | undefined;
    pull_request: pull_request_webhook;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_pull_request_converted_to_draft = {
    action: "converted_to_draft";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    number: webhooks_number;
    organization?: organization_simple_webhooks | undefined;
    pull_request: pull_request_webhook;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_pull_request_demilestoned = {
    action: "demilestoned";
    enterprise?: enterprise_webhooks | undefined;
    milestone?: milestone | undefined;
    number: webhooks_number;
    organization?: organization_simple_webhooks | undefined;
    pull_request: webhooks_pull_request_5;
    repository: repository_webhooks;
    sender?: simple_user | undefined;
  };
  export type webhook_pull_request_dequeued = {
    action: "dequeued";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    number: number;
    organization?: organization_simple_webhooks | undefined;
    pull_request: {
      _links: {
        comments: { href: string };
        commits: { href: string };
        html: { href: string };
        issue: { href: string };
        review_comment: { href: string };
        review_comments: { href: string };
        self: { href: string };
        statuses: { href: string };
      };
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      additions?: number | undefined;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      auto_merge: {
        commit_message: string | null;
        commit_title: string | null;
        enabled_by: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        merge_method: "merge" | "squash" | "rebase";
      } | null;
      base: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      body: string | null;
      changed_files?: number | undefined;
      closed_at: string | null;
      comments?: number | undefined;
      comments_url: string;
      commits?: number | undefined;
      commits_url: string;
      created_at: string;
      deletions?: number | undefined;
      diff_url: string;
      draft: boolean;
      head: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      html_url: string;
      id: number;
      issue_url: string;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      locked: boolean;
      maintainer_can_modify?: boolean | undefined;
      merge_commit_sha: string | null;
      mergeable?: (boolean | null) | undefined;
      mergeable_state?: string | undefined;
      merged?: (boolean | null) | undefined;
      merged_at: string | null;
      merged_by?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      patch_url: string;
      rebaseable?: (boolean | null) | undefined;
      requested_reviewers: Array<
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | {
            deleted?: boolean | undefined;
            description?: (string | null) | undefined;
            html_url?: string | undefined;
            id: number;
            members_url?: string | undefined;
            name: string;
            node_id?: string | undefined;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission?: string | undefined;
            privacy?: ("open" | "closed" | "secret") | undefined;
            repositories_url?: string | undefined;
            slug?: string | undefined;
            url?: string | undefined;
          }
      >;
      requested_teams: Array<{
        deleted?: boolean | undefined;
        description?: (string | null) | undefined;
        html_url?: string | undefined;
        id: number;
        members_url?: string | undefined;
        name: string;
        node_id?: string | undefined;
        parent?:
          | ({
              description: string | null;
              html_url: string;
              id: number;
              members_url: string;
              name: string;
              node_id: string;
              permission: string;
              privacy: "open" | "closed" | "secret";
              repositories_url: string;
              slug: string;
              url: string;
            } | null)
          | undefined;
        permission?: string | undefined;
        privacy?: ("open" | "closed" | "secret") | undefined;
        repositories_url?: string | undefined;
        slug?: string | undefined;
        url?: string | undefined;
      }>;
      review_comment_url: string;
      review_comments?: number | undefined;
      review_comments_url: string;
      state: "open" | "closed";
      statuses_url: string;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    reason:
      | "UNKNOWN_REMOVAL_REASON"
      | "MANUAL"
      | "MERGE"
      | "MERGE_CONFLICT"
      | "CI_FAILURE"
      | "CI_TIMEOUT"
      | "ALREADY_MERGED"
      | "QUEUE_CLEARED"
      | "ROLL_BACK"
      | "BRANCH_PROTECTIONS"
      | "GIT_TREE_INVALID"
      | "INVALID_MERGE_COMMIT";
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_pull_request_edited = {
    action: "edited";
    changes: Partial<{
      base: { ref: { from: string }; sha: { from: string } };
      body: { from: string };
      title: { from: string };
    }>;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    number: webhooks_number;
    organization?: organization_simple_webhooks | undefined;
    pull_request: pull_request_webhook;
    repository: repository_webhooks;
    sender?: simple_user | undefined;
  };
  export type webhook_pull_request_enqueued = {
    action: "enqueued";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    number: number;
    organization?: organization_simple_webhooks | undefined;
    pull_request: {
      _links: {
        comments: { href: string };
        commits: { href: string };
        html: { href: string };
        issue: { href: string };
        review_comment: { href: string };
        review_comments: { href: string };
        self: { href: string };
        statuses: { href: string };
      };
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      additions?: number | undefined;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      auto_merge: {
        commit_message: string | null;
        commit_title: string | null;
        enabled_by: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        merge_method: "merge" | "squash" | "rebase";
      } | null;
      base: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      body: string | null;
      changed_files?: number | undefined;
      closed_at: string | null;
      comments?: number | undefined;
      comments_url: string;
      commits?: number | undefined;
      commits_url: string;
      created_at: string;
      deletions?: number | undefined;
      diff_url: string;
      draft: boolean;
      head: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      html_url: string;
      id: number;
      issue_url: string;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      locked: boolean;
      maintainer_can_modify?: boolean | undefined;
      merge_commit_sha: string | null;
      mergeable?: (boolean | null) | undefined;
      mergeable_state?: string | undefined;
      merged?: (boolean | null) | undefined;
      merged_at: string | null;
      merged_by?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      patch_url: string;
      rebaseable?: (boolean | null) | undefined;
      requested_reviewers: Array<
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | {
            deleted?: boolean | undefined;
            description?: (string | null) | undefined;
            html_url?: string | undefined;
            id: number;
            members_url?: string | undefined;
            name: string;
            node_id?: string | undefined;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission?: string | undefined;
            privacy?: ("open" | "closed" | "secret") | undefined;
            repositories_url?: string | undefined;
            slug?: string | undefined;
            url?: string | undefined;
          }
      >;
      requested_teams: Array<{
        deleted?: boolean | undefined;
        description?: (string | null) | undefined;
        html_url?: string | undefined;
        id: number;
        members_url?: string | undefined;
        name: string;
        node_id?: string | undefined;
        parent?:
          | ({
              description: string | null;
              html_url: string;
              id: number;
              members_url: string;
              name: string;
              node_id: string;
              permission: string;
              privacy: "open" | "closed" | "secret";
              repositories_url: string;
              slug: string;
              url: string;
            } | null)
          | undefined;
        permission?: string | undefined;
        privacy?: ("open" | "closed" | "secret") | undefined;
        repositories_url?: string | undefined;
        slug?: string | undefined;
        url?: string | undefined;
      }>;
      review_comment_url: string;
      review_comments?: number | undefined;
      review_comments_url: string;
      state: "open" | "closed";
      statuses_url: string;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_pull_request_labeled = {
    action: "labeled";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    label?: webhooks_label | undefined;
    number: webhooks_number;
    organization?: organization_simple_webhooks | undefined;
    pull_request: {
      _links: {
        comments: { href: string };
        commits: { href: string };
        html: { href: string };
        issue: { href: string };
        review_comment: { href: string };
        review_comments: { href: string };
        self: { href: string };
        statuses: { href: string };
      };
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      additions?: number | undefined;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      auto_merge: {
        commit_message: string | null;
        commit_title: string | null;
        enabled_by: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        merge_method: "merge" | "squash" | "rebase";
      } | null;
      base: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      body: string | null;
      changed_files?: number | undefined;
      closed_at: string | null;
      comments?: number | undefined;
      comments_url: string;
      commits?: number | undefined;
      commits_url: string;
      created_at: string;
      deletions?: number | undefined;
      diff_url: string;
      draft: boolean;
      head: {
        label: string | null;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        } | null;
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      html_url: string;
      id: number;
      issue_url: string;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      locked: boolean;
      maintainer_can_modify?: boolean | undefined;
      merge_commit_sha: string | null;
      mergeable?: (boolean | null) | undefined;
      mergeable_state?: string | undefined;
      merged?: (boolean | null) | undefined;
      merged_at: string | null;
      merged_by?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      patch_url: string;
      rebaseable?: (boolean | null) | undefined;
      requested_reviewers: Array<
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | {
            deleted?: boolean | undefined;
            description: string | null;
            html_url: string;
            id: number;
            members_url: string;
            name: string;
            node_id: string;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission: string;
            privacy: "open" | "closed" | "secret";
            repositories_url: string;
            slug: string;
            url: string;
          }
      >;
      requested_teams: Array<{
        deleted?: boolean | undefined;
        description?: (string | null) | undefined;
        html_url?: string | undefined;
        id: number;
        members_url?: string | undefined;
        name: string;
        node_id?: string | undefined;
        parent?:
          | ({
              description: string | null;
              html_url: string;
              id: number;
              members_url: string;
              name: string;
              node_id: string;
              permission: string;
              privacy: "open" | "closed" | "secret";
              repositories_url: string;
              slug: string;
              url: string;
            } | null)
          | undefined;
        permission?: string | undefined;
        privacy?: ("open" | "closed" | "secret") | undefined;
        repositories_url?: string | undefined;
        slug?: string | undefined;
        url?: string | undefined;
      }>;
      review_comment_url: string;
      review_comments?: number | undefined;
      review_comments_url: string;
      state: "open" | "closed";
      statuses_url: string;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_pull_request_locked = {
    action: "locked";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    number: webhooks_number;
    organization?: organization_simple_webhooks | undefined;
    pull_request: {
      _links: {
        comments: { href: string };
        commits: { href: string };
        html: { href: string };
        issue: { href: string };
        review_comment: { href: string };
        review_comments: { href: string };
        self: { href: string };
        statuses: { href: string };
      };
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      additions?: number | undefined;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      auto_merge: {
        commit_message: string | null;
        commit_title: string | null;
        enabled_by: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        merge_method: "merge" | "squash" | "rebase";
      } | null;
      base: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      body: string | null;
      changed_files?: number | undefined;
      closed_at: string | null;
      comments?: number | undefined;
      comments_url: string;
      commits?: number | undefined;
      commits_url: string;
      created_at: string;
      deletions?: number | undefined;
      diff_url: string;
      draft: boolean;
      head: {
        label: string | null;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        } | null;
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      html_url: string;
      id: number;
      issue_url: string;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      locked: boolean;
      maintainer_can_modify?: boolean | undefined;
      merge_commit_sha: string | null;
      mergeable?: (boolean | null) | undefined;
      mergeable_state?: string | undefined;
      merged?: (boolean | null) | undefined;
      merged_at: string | null;
      merged_by?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      patch_url: string;
      rebaseable?: (boolean | null) | undefined;
      requested_reviewers: Array<
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | {
            deleted?: boolean | undefined;
            description: string | null;
            html_url: string;
            id: number;
            members_url: string;
            name: string;
            node_id: string;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission: string;
            privacy: "open" | "closed" | "secret";
            repositories_url: string;
            slug: string;
            url: string;
          }
      >;
      requested_teams: Array<{
        deleted?: boolean | undefined;
        description?: (string | null) | undefined;
        html_url?: string | undefined;
        id: number;
        members_url?: string | undefined;
        name: string;
        node_id?: string | undefined;
        parent?:
          | ({
              description: string | null;
              html_url: string;
              id: number;
              members_url: string;
              name: string;
              node_id: string;
              permission: string;
              privacy: "open" | "closed" | "secret";
              repositories_url: string;
              slug: string;
              url: string;
            } | null)
          | undefined;
        permission?: string | undefined;
        privacy?: ("open" | "closed" | "secret") | undefined;
        repositories_url?: string | undefined;
        slug?: string | undefined;
        url?: string | undefined;
      }>;
      review_comment_url: string;
      review_comments?: number | undefined;
      review_comments_url: string;
      state: "open" | "closed";
      statuses_url: string;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_pull_request_milestoned = {
    action: "milestoned";
    enterprise?: enterprise_webhooks | undefined;
    milestone?: milestone | undefined;
    number: webhooks_number;
    organization?: organization_simple_webhooks | undefined;
    pull_request: webhooks_pull_request_5;
    repository: repository_webhooks;
    sender?: simple_user | undefined;
  };
  export type webhook_pull_request_opened = {
    action: "opened";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    number: webhooks_number;
    organization?: organization_simple_webhooks | undefined;
    pull_request: pull_request_webhook;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_pull_request_ready_for_review = {
    action: "ready_for_review";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    number: webhooks_number;
    organization?: organization_simple_webhooks | undefined;
    pull_request: pull_request_webhook;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_pull_request_reopened = {
    action: "reopened";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    number: webhooks_number;
    organization?: organization_simple_webhooks | undefined;
    pull_request: pull_request_webhook;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_pull_request_review_comment_created = {
    action: "created";
    comment: {
      _links: { html: { href: string }; pull_request: { href: string }; self: { href: string } };
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      body: string;
      commit_id: string;
      created_at: string;
      diff_hunk: string;
      html_url: string;
      id: number;
      in_reply_to_id?: number | undefined;
      line: number | null;
      node_id: string;
      original_commit_id: string;
      original_line: number | null;
      original_position: number;
      original_start_line: number | null;
      path: string;
      position: number | null;
      pull_request_review_id: number | null;
      pull_request_url: string;
      reactions: {
        "+1": number;
        "-1": number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      side: "LEFT" | "RIGHT";
      start_line: number | null;
      start_side: ("LEFT" | "RIGHT" | "null") | null;
      subject_type?: ("line" | "file") | undefined;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    pull_request: {
      _links: {
        comments: { href: string };
        commits: { href: string };
        html: { href: string };
        issue: { href: string };
        review_comment: { href: string };
        review_comments: { href: string };
        self: { href: string };
        statuses: { href: string };
      };
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      auto_merge?:
        | ({
            commit_message: string | null;
            commit_title: string | null;
            enabled_by: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            merge_method: "merge" | "squash" | "rebase";
          } | null)
        | undefined;
      base: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      body: string | null;
      closed_at: string | null;
      comments_url: string;
      commits_url: string;
      created_at: string;
      diff_url: string;
      draft?: boolean | undefined;
      head: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions?: boolean | undefined;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        } | null;
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      html_url: string;
      id: number;
      issue_url: string;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      locked: boolean;
      merge_commit_sha: string | null;
      merged_at: string | null;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      patch_url: string;
      requested_reviewers: Array<
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | {
            deleted?: boolean | undefined;
            description: string | null;
            html_url: string;
            id: number;
            members_url: string;
            name: string;
            node_id: string;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission: string;
            privacy: "open" | "closed" | "secret";
            repositories_url: string;
            slug: string;
            url: string;
          }
      >;
      requested_teams: Array<{
        deleted?: boolean | undefined;
        description?: (string | null) | undefined;
        html_url?: string | undefined;
        id: number;
        members_url?: string | undefined;
        name: string;
        node_id?: string | undefined;
        parent?:
          | ({
              description: string | null;
              html_url: string;
              id: number;
              members_url: string;
              name: string;
              node_id: string;
              permission: string;
              privacy: "open" | "closed" | "secret";
              repositories_url: string;
              slug: string;
              url: string;
            } | null)
          | undefined;
        permission?: string | undefined;
        privacy?: ("open" | "closed" | "secret") | undefined;
        repositories_url?: string | undefined;
        slug?: string | undefined;
        url?: string | undefined;
      }>;
      review_comment_url: string;
      review_comments_url: string;
      state: "open" | "closed";
      statuses_url: string;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_pull_request_review_comment_deleted = {
    action: "deleted";
    comment: webhooks_review_comment;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    pull_request: {
      _links: {
        comments: { href: string };
        commits: { href: string };
        html: { href: string };
        issue: { href: string };
        review_comment: { href: string };
        review_comments: { href: string };
        self: { href: string };
        statuses: { href: string };
      };
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      auto_merge?:
        | ({
            commit_message: string | null;
            commit_title: string | null;
            enabled_by: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            merge_method: "merge" | "squash" | "rebase";
          } | null)
        | undefined;
      base: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      body: string | null;
      closed_at: string | null;
      comments_url: string;
      commits_url: string;
      created_at: string;
      diff_url: string;
      draft?: boolean | undefined;
      head: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        } | null;
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      html_url: string;
      id: number;
      issue_url: string;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      locked: boolean;
      merge_commit_sha: string | null;
      merged_at: string | null;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      patch_url: string;
      requested_reviewers: Array<
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | {
            deleted?: boolean | undefined;
            description?: (string | null) | undefined;
            html_url?: string | undefined;
            id: number;
            members_url?: string | undefined;
            name: string;
            node_id?: string | undefined;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission?: string | undefined;
            privacy?: ("open" | "closed" | "secret") | undefined;
            repositories_url?: string | undefined;
            slug?: string | undefined;
            url?: string | undefined;
          }
      >;
      requested_teams: Array<{
        deleted?: boolean | undefined;
        description?: (string | null) | undefined;
        html_url?: string | undefined;
        id: number;
        members_url?: string | undefined;
        name: string;
        node_id?: string | undefined;
        parent?:
          | ({
              description: string | null;
              html_url: string;
              id: number;
              members_url: string;
              name: string;
              node_id: string;
              permission: string;
              privacy: "open" | "closed" | "secret";
              repositories_url: string;
              slug: string;
              url: string;
            } | null)
          | undefined;
        permission?: string | undefined;
        privacy?: ("open" | "closed" | "secret") | undefined;
        repositories_url?: string | undefined;
        slug?: string | undefined;
        url?: string | undefined;
      }>;
      review_comment_url: string;
      review_comments_url: string;
      state: "open" | "closed";
      statuses_url: string;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_pull_request_review_comment_edited = {
    action: "edited";
    changes: webhooks_changes;
    comment: webhooks_review_comment;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    pull_request: {
      _links: {
        comments: { href: string };
        commits: { href: string };
        html: { href: string };
        issue: { href: string };
        review_comment: { href: string };
        review_comments: { href: string };
        self: { href: string };
        statuses: { href: string };
      };
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      auto_merge?:
        | ({
            commit_message: string | null;
            commit_title: string | null;
            enabled_by: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            merge_method: "merge" | "squash" | "rebase";
          } | null)
        | undefined;
      base: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      body: string | null;
      closed_at: string | null;
      comments_url: string;
      commits_url: string;
      created_at: string;
      diff_url: string;
      draft?: boolean | undefined;
      head: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        } | null;
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      html_url: string;
      id: number;
      issue_url: string;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      locked: boolean;
      merge_commit_sha: string | null;
      merged_at: string | null;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      patch_url: string;
      requested_reviewers: Array<
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | {
            deleted?: boolean | undefined;
            description?: (string | null) | undefined;
            html_url?: string | undefined;
            id: number;
            members_url?: string | undefined;
            name: string;
            node_id?: string | undefined;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission?: string | undefined;
            privacy?: ("open" | "closed" | "secret") | undefined;
            repositories_url?: string | undefined;
            slug?: string | undefined;
            url?: string | undefined;
          }
      >;
      requested_teams: Array<{
        deleted?: boolean | undefined;
        description?: (string | null) | undefined;
        html_url?: string | undefined;
        id: number;
        members_url?: string | undefined;
        name: string;
        node_id?: string | undefined;
        parent?:
          | ({
              description: string | null;
              html_url: string;
              id: number;
              members_url: string;
              name: string;
              node_id: string;
              permission: string;
              privacy: "open" | "closed" | "secret";
              repositories_url: string;
              slug: string;
              url: string;
            } | null)
          | undefined;
        permission?: string | undefined;
        privacy?: ("open" | "closed" | "secret") | undefined;
        repositories_url?: string | undefined;
        slug?: string | undefined;
        url?: string | undefined;
      }>;
      review_comment_url: string;
      review_comments_url: string;
      state: "open" | "closed";
      statuses_url: string;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        user_view_type?: string | undefined;
        url?: string | undefined;
      } | null;
    };
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_pull_request_review_dismissed = {
    action: "dismissed";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    pull_request: {
      _links: {
        comments: { href: string };
        commits: { href: string };
        html: { href: string };
        issue: { href: string };
        review_comment: { href: string };
        review_comments: { href: string };
        self: { href: string };
        statuses: { href: string };
      };
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      auto_merge: {
        commit_message: string | null;
        commit_title: string | null;
        enabled_by: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        merge_method: "merge" | "squash" | "rebase";
      } | null;
      base: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      body: string | null;
      closed_at: string | null;
      comments_url: string;
      commits_url: string;
      created_at: string;
      diff_url: string;
      draft: boolean;
      head: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        } | null;
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      html_url: string;
      id: number;
      issue_url: string;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      locked: boolean;
      merge_commit_sha: string | null;
      merged_at: string | null;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      patch_url: string;
      requested_reviewers: Array<
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | {
            deleted?: boolean | undefined;
            description: string | null;
            html_url: string;
            id: number;
            members_url: string;
            name: string;
            node_id: string;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission: string;
            privacy: "open" | "closed" | "secret";
            repositories_url: string;
            slug: string;
            url: string;
          }
      >;
      requested_teams: Array<{
        deleted?: boolean | undefined;
        description?: (string | null) | undefined;
        html_url?: string | undefined;
        id: number;
        members_url?: string | undefined;
        name: string;
        node_id?: string | undefined;
        parent?:
          | ({
              description: string | null;
              html_url: string;
              id: number;
              members_url: string;
              name: string;
              node_id: string;
              permission: string;
              privacy: "open" | "closed" | "secret";
              repositories_url: string;
              slug: string;
              url: string;
            } | null)
          | undefined;
        permission?: string | undefined;
        privacy?: ("open" | "closed" | "secret") | undefined;
        repositories_url?: string | undefined;
        slug?: string | undefined;
        url?: string | undefined;
      }>;
      review_comment_url: string;
      review_comments_url: string;
      state: "open" | "closed";
      statuses_url: string;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    repository: repository_webhooks;
    review: {
      _links: { html: { href: string }; pull_request: { href: string } };
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      body: string | null;
      commit_id: string;
      html_url: string;
      id: number;
      node_id: string;
      pull_request_url: string;
      state: "dismissed" | "approved" | "changes_requested";
      submitted_at: string;
      updated_at?: (string | null) | undefined;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    sender: simple_user;
  };
  export type webhook_pull_request_review_edited = {
    action: "edited";
    changes: Partial<{ body: { from: string } }>;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    pull_request: {
      _links: {
        comments: { href: string };
        commits: { href: string };
        html: { href: string };
        issue: { href: string };
        review_comment: { href: string };
        review_comments: { href: string };
        self: { href: string };
        statuses: { href: string };
      };
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      auto_merge: {
        commit_message: string | null;
        commit_title: string | null;
        enabled_by: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        merge_method: "merge" | "squash" | "rebase";
      } | null;
      base: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      body: string | null;
      closed_at: string | null;
      comments_url: string;
      commits_url: string;
      created_at: string;
      diff_url: string;
      draft: boolean;
      head: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
        } | null;
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      html_url: string;
      id: number;
      issue_url: string;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      locked: boolean;
      merge_commit_sha: string | null;
      merged_at: string | null;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      patch_url: string;
      requested_reviewers: Array<
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | {
            deleted?: boolean | undefined;
            description: string | null;
            html_url: string;
            id: number;
            members_url: string;
            name: string;
            node_id: string;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission: string;
            privacy: "open" | "closed" | "secret";
            repositories_url: string;
            slug: string;
            url: string;
          }
      >;
      requested_teams: Array<{
        deleted?: boolean | undefined;
        description?: (string | null) | undefined;
        html_url?: string | undefined;
        id: number;
        members_url?: string | undefined;
        name: string;
        node_id?: string | undefined;
        parent?:
          | ({
              description: string | null;
              html_url: string;
              id: number;
              members_url: string;
              name: string;
              node_id: string;
              permission: string;
              privacy: "open" | "closed" | "secret";
              repositories_url: string;
              slug: string;
              url: string;
            } | null)
          | undefined;
        permission?: string | undefined;
        privacy?: ("open" | "closed" | "secret") | undefined;
        repositories_url?: string | undefined;
        slug?: string | undefined;
        url?: string | undefined;
      }>;
      review_comment_url: string;
      review_comments_url: string;
      state: "open" | "closed";
      statuses_url: string;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    repository: repository_webhooks;
    review: webhooks_review;
    sender: simple_user;
  };
  export type webhook_pull_request_review_request_removed =
    | {
        action: "review_request_removed";
        enterprise?: enterprise_webhooks | undefined;
        installation?: simple_installation | undefined;
        number: number;
        organization?: organization_simple_webhooks | undefined;
        pull_request: {
          _links: {
            comments: { href: string };
            commits: { href: string };
            html: { href: string };
            issue: { href: string };
            review_comment: { href: string };
            review_comments: { href: string };
            self: { href: string };
            statuses: { href: string };
          };
          active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
          additions?: number | undefined;
          assignee: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          assignees: Array<{
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null>;
          author_association:
            | "COLLABORATOR"
            | "CONTRIBUTOR"
            | "FIRST_TIMER"
            | "FIRST_TIME_CONTRIBUTOR"
            | "MANNEQUIN"
            | "MEMBER"
            | "NONE"
            | "OWNER";
          auto_merge: {
            commit_message: string | null;
            commit_title: string | null;
            enabled_by: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            merge_method: "merge" | "squash" | "rebase";
          } | null;
          base: {
            label: string;
            ref: string;
            repo: {
              allow_auto_merge?: boolean | undefined;
              allow_forking?: boolean | undefined;
              allow_merge_commit?: boolean | undefined;
              allow_rebase_merge?: boolean | undefined;
              allow_squash_merge?: boolean | undefined;
              allow_update_branch?: boolean | undefined;
              archive_url: string;
              archived: boolean;
              assignees_url: string;
              blobs_url: string;
              branches_url: string;
              clone_url: string;
              collaborators_url: string;
              comments_url: string;
              commits_url: string;
              compare_url: string;
              contents_url: string;
              contributors_url: string;
              created_at: number | string;
              default_branch: string;
              delete_branch_on_merge?: boolean | undefined;
              deployments_url: string;
              description: string | null;
              disabled?: boolean | undefined;
              downloads_url: string;
              events_url: string;
              fork: boolean;
              forks: number;
              forks_count: number;
              forks_url: string;
              full_name: string;
              git_commits_url: string;
              git_refs_url: string;
              git_tags_url: string;
              git_url: string;
              has_downloads: boolean;
              has_issues: boolean;
              has_pages: boolean;
              has_projects: boolean;
              has_wiki: boolean;
              has_discussions: boolean;
              homepage: string | null;
              hooks_url: string;
              html_url: string;
              id: number;
              is_template?: boolean | undefined;
              issue_comment_url: string;
              issue_events_url: string;
              issues_url: string;
              keys_url: string;
              labels_url: string;
              language: string | null;
              languages_url: string;
              license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
              master_branch?: string | undefined;
              merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
              merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
              merges_url: string;
              milestones_url: string;
              mirror_url: string | null;
              name: string;
              node_id: string;
              notifications_url: string;
              open_issues: number;
              open_issues_count: number;
              organization?: string | undefined;
              owner: {
                avatar_url?: string | undefined;
                deleted?: boolean | undefined;
                email?: (string | null) | undefined;
                events_url?: string | undefined;
                followers_url?: string | undefined;
                following_url?: string | undefined;
                gists_url?: string | undefined;
                gravatar_id?: string | undefined;
                html_url?: string | undefined;
                id: number;
                login: string;
                name?: string | undefined;
                node_id?: string | undefined;
                organizations_url?: string | undefined;
                received_events_url?: string | undefined;
                repos_url?: string | undefined;
                site_admin?: boolean | undefined;
                starred_url?: string | undefined;
                subscriptions_url?: string | undefined;
                type?: ("Bot" | "User" | "Organization") | undefined;
                url?: string | undefined;
                user_view_type?: string | undefined;
              } | null;
              permissions?:
                | {
                    admin: boolean;
                    maintain?: boolean | undefined;
                    pull: boolean;
                    push: boolean;
                    triage?: boolean | undefined;
                  }
                | undefined;
              private: boolean;
              public?: boolean | undefined;
              pulls_url: string;
              pushed_at: (number | string) | null;
              releases_url: string;
              role_name?: (string | null) | undefined;
              size: number;
              squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
              squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
              ssh_url: string;
              stargazers?: number | undefined;
              stargazers_count: number;
              stargazers_url: string;
              statuses_url: string;
              subscribers_url: string;
              subscription_url: string;
              svn_url: string;
              tags_url: string;
              teams_url: string;
              topics: Array<string>;
              trees_url: string;
              updated_at: string;
              url: string;
              use_squash_pr_title_as_default?: boolean | undefined;
              visibility: "public" | "private" | "internal";
              watchers: number;
              watchers_count: number;
              web_commit_signoff_required?: boolean | undefined;
            };
            sha: string;
            user: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
          };
          body: string | null;
          changed_files?: number | undefined;
          closed_at: string | null;
          comments?: number | undefined;
          comments_url: string;
          commits?: number | undefined;
          commits_url: string;
          created_at: string;
          deletions?: number | undefined;
          diff_url: string;
          draft: boolean;
          head: {
            label: string;
            ref: string;
            repo: {
              allow_auto_merge?: boolean | undefined;
              allow_forking?: boolean | undefined;
              allow_merge_commit?: boolean | undefined;
              allow_rebase_merge?: boolean | undefined;
              allow_squash_merge?: boolean | undefined;
              allow_update_branch?: boolean | undefined;
              archive_url: string;
              archived: boolean;
              assignees_url: string;
              blobs_url: string;
              branches_url: string;
              clone_url: string;
              collaborators_url: string;
              comments_url: string;
              commits_url: string;
              compare_url: string;
              contents_url: string;
              contributors_url: string;
              created_at: number | string;
              default_branch: string;
              delete_branch_on_merge?: boolean | undefined;
              deployments_url: string;
              description: string | null;
              disabled?: boolean | undefined;
              downloads_url: string;
              events_url: string;
              fork: boolean;
              forks: number;
              forks_count: number;
              forks_url: string;
              full_name: string;
              git_commits_url: string;
              git_refs_url: string;
              git_tags_url: string;
              git_url: string;
              has_downloads: boolean;
              has_issues: boolean;
              has_pages: boolean;
              has_projects: boolean;
              has_wiki: boolean;
              has_discussions: boolean;
              homepage: string | null;
              hooks_url: string;
              html_url: string;
              id: number;
              is_template?: boolean | undefined;
              issue_comment_url: string;
              issue_events_url: string;
              issues_url: string;
              keys_url: string;
              labels_url: string;
              language: string | null;
              languages_url: string;
              license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
              master_branch?: string | undefined;
              merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
              merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
              merges_url: string;
              milestones_url: string;
              mirror_url: string | null;
              name: string;
              node_id: string;
              notifications_url: string;
              open_issues: number;
              open_issues_count: number;
              organization?: string | undefined;
              owner: {
                avatar_url?: string | undefined;
                deleted?: boolean | undefined;
                email?: (string | null) | undefined;
                events_url?: string | undefined;
                followers_url?: string | undefined;
                following_url?: string | undefined;
                gists_url?: string | undefined;
                gravatar_id?: string | undefined;
                html_url?: string | undefined;
                id: number;
                login: string;
                name?: string | undefined;
                node_id?: string | undefined;
                organizations_url?: string | undefined;
                received_events_url?: string | undefined;
                repos_url?: string | undefined;
                site_admin?: boolean | undefined;
                starred_url?: string | undefined;
                subscriptions_url?: string | undefined;
                type?: ("Bot" | "User" | "Organization") | undefined;
                url?: string | undefined;
                user_view_type?: string | undefined;
              } | null;
              permissions?:
                | {
                    admin: boolean;
                    maintain?: boolean | undefined;
                    pull: boolean;
                    push: boolean;
                    triage?: boolean | undefined;
                  }
                | undefined;
              private: boolean;
              public?: boolean | undefined;
              pulls_url: string;
              pushed_at: (number | string) | null;
              releases_url: string;
              role_name?: (string | null) | undefined;
              size: number;
              squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
              squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
              ssh_url: string;
              stargazers?: number | undefined;
              stargazers_count: number;
              stargazers_url: string;
              statuses_url: string;
              subscribers_url: string;
              subscription_url: string;
              svn_url: string;
              tags_url: string;
              teams_url: string;
              topics: Array<string>;
              trees_url: string;
              updated_at: string;
              url: string;
              use_squash_pr_title_as_default?: boolean | undefined;
              visibility: "public" | "private" | "internal";
              watchers: number;
              watchers_count: number;
              web_commit_signoff_required?: boolean | undefined;
            };
            sha: string;
            user: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
          };
          html_url: string;
          id: number;
          issue_url: string;
          labels: Array<{
            color: string;
            default: boolean;
            description: string | null;
            id: number;
            name: string;
            node_id: string;
            url: string;
          }>;
          locked: boolean;
          maintainer_can_modify?: boolean | undefined;
          merge_commit_sha: string | null;
          mergeable?: (boolean | null) | undefined;
          mergeable_state?: string | undefined;
          merged?: (boolean | null) | undefined;
          merged_at: string | null;
          merged_by?:
            | ({
                avatar_url?: string | undefined;
                deleted?: boolean | undefined;
                email?: (string | null) | undefined;
                events_url?: string | undefined;
                followers_url?: string | undefined;
                following_url?: string | undefined;
                gists_url?: string | undefined;
                gravatar_id?: string | undefined;
                html_url?: string | undefined;
                id: number;
                login: string;
                name?: string | undefined;
                node_id?: string | undefined;
                organizations_url?: string | undefined;
                received_events_url?: string | undefined;
                repos_url?: string | undefined;
                site_admin?: boolean | undefined;
                starred_url?: string | undefined;
                subscriptions_url?: string | undefined;
                type?: ("Bot" | "User" | "Organization") | undefined;
                url?: string | undefined;
                user_view_type?: string | undefined;
              } | null)
            | undefined;
          milestone: {
            closed_at: string | null;
            closed_issues: number;
            created_at: string;
            creator: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            description: string | null;
            due_on: string | null;
            html_url: string;
            id: number;
            labels_url: string;
            node_id: string;
            number: number;
            open_issues: number;
            state: "open" | "closed";
            title: string;
            updated_at: string;
            url: string;
          } | null;
          node_id: string;
          number: number;
          patch_url: string;
          rebaseable?: (boolean | null) | undefined;
          requested_reviewers: Array<
            | ({
                avatar_url?: string | undefined;
                deleted?: boolean | undefined;
                email?: (string | null) | undefined;
                events_url?: string | undefined;
                followers_url?: string | undefined;
                following_url?: string | undefined;
                gists_url?: string | undefined;
                gravatar_id?: string | undefined;
                html_url?: string | undefined;
                id: number;
                login: string;
                name?: string | undefined;
                node_id?: string | undefined;
                organizations_url?: string | undefined;
                received_events_url?: string | undefined;
                repos_url?: string | undefined;
                site_admin?: boolean | undefined;
                starred_url?: string | undefined;
                subscriptions_url?: string | undefined;
                type?: ("Bot" | "User" | "Organization") | undefined;
                url?: string | undefined;
                user_view_type?: string | undefined;
              } | null)
            | {
                deleted?: boolean | undefined;
                description: string | null;
                html_url: string;
                id: number;
                members_url: string;
                name: string;
                node_id: string;
                parent?:
                  | ({
                      description: string | null;
                      html_url: string;
                      id: number;
                      members_url: string;
                      name: string;
                      node_id: string;
                      permission: string;
                      privacy: "open" | "closed" | "secret";
                      repositories_url: string;
                      slug: string;
                      url: string;
                    } | null)
                  | undefined;
                permission: string;
                privacy: "open" | "closed" | "secret";
                repositories_url: string;
                slug: string;
                url: string;
              }
          >;
          requested_teams: Array<{
            deleted?: boolean | undefined;
            description: string | null;
            html_url: string;
            id: number;
            members_url: string;
            name: string;
            node_id: string;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission: string;
            privacy: "open" | "closed" | "secret";
            repositories_url: string;
            slug: string;
            url: string;
          }>;
          review_comment_url: string;
          review_comments?: number | undefined;
          review_comments_url: string;
          state: "open" | "closed";
          statuses_url: string;
          title: string;
          updated_at: string;
          url: string;
          user: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
        };
        repository: repository_webhooks;
        requested_reviewer: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        sender: simple_user;
      }
    | {
        action: "review_request_removed";
        enterprise?: enterprise_webhooks | undefined;
        installation?: simple_installation | undefined;
        number: number;
        organization?: organization_simple_webhooks | undefined;
        pull_request: {
          _links: {
            comments: { href: string };
            commits: { href: string };
            html: { href: string };
            issue: { href: string };
            review_comment: { href: string };
            review_comments: { href: string };
            self: { href: string };
            statuses: { href: string };
          };
          active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
          additions?: number | undefined;
          assignee: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          assignees: Array<{
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null>;
          author_association:
            | "COLLABORATOR"
            | "CONTRIBUTOR"
            | "FIRST_TIMER"
            | "FIRST_TIME_CONTRIBUTOR"
            | "MANNEQUIN"
            | "MEMBER"
            | "NONE"
            | "OWNER";
          auto_merge: {
            commit_message: string | null;
            commit_title: string | null;
            enabled_by: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            merge_method: "merge" | "squash" | "rebase";
          } | null;
          base: {
            label: string;
            ref: string;
            repo: {
              allow_auto_merge?: boolean | undefined;
              allow_forking?: boolean | undefined;
              allow_merge_commit?: boolean | undefined;
              allow_rebase_merge?: boolean | undefined;
              allow_squash_merge?: boolean | undefined;
              allow_update_branch?: boolean | undefined;
              archive_url: string;
              archived: boolean;
              assignees_url: string;
              blobs_url: string;
              branches_url: string;
              clone_url: string;
              collaborators_url: string;
              comments_url: string;
              commits_url: string;
              compare_url: string;
              contents_url: string;
              contributors_url: string;
              created_at: number | string;
              default_branch: string;
              delete_branch_on_merge?: boolean | undefined;
              deployments_url: string;
              description: string | null;
              disabled?: boolean | undefined;
              downloads_url: string;
              events_url: string;
              fork: boolean;
              forks: number;
              forks_count: number;
              forks_url: string;
              full_name: string;
              git_commits_url: string;
              git_refs_url: string;
              git_tags_url: string;
              git_url: string;
              has_downloads: boolean;
              has_issues: boolean;
              has_pages: boolean;
              has_projects: boolean;
              has_wiki: boolean;
              has_discussions: boolean;
              homepage: string | null;
              hooks_url: string;
              html_url: string;
              id: number;
              is_template?: boolean | undefined;
              issue_comment_url: string;
              issue_events_url: string;
              issues_url: string;
              keys_url: string;
              labels_url: string;
              language: string | null;
              languages_url: string;
              license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
              master_branch?: string | undefined;
              merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
              merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
              merges_url: string;
              milestones_url: string;
              mirror_url: string | null;
              name: string;
              node_id: string;
              notifications_url: string;
              open_issues: number;
              open_issues_count: number;
              organization?: string | undefined;
              owner: {
                avatar_url?: string | undefined;
                deleted?: boolean | undefined;
                email?: (string | null) | undefined;
                events_url?: string | undefined;
                followers_url?: string | undefined;
                following_url?: string | undefined;
                gists_url?: string | undefined;
                gravatar_id?: string | undefined;
                html_url?: string | undefined;
                id: number;
                login: string;
                name?: string | undefined;
                node_id?: string | undefined;
                organizations_url?: string | undefined;
                received_events_url?: string | undefined;
                repos_url?: string | undefined;
                site_admin?: boolean | undefined;
                starred_url?: string | undefined;
                subscriptions_url?: string | undefined;
                type?: ("Bot" | "User" | "Organization") | undefined;
                url?: string | undefined;
                user_view_type?: string | undefined;
              } | null;
              permissions?:
                | {
                    admin: boolean;
                    maintain?: boolean | undefined;
                    pull: boolean;
                    push: boolean;
                    triage?: boolean | undefined;
                  }
                | undefined;
              private: boolean;
              public?: boolean | undefined;
              pulls_url: string;
              pushed_at: (number | string) | null;
              releases_url: string;
              role_name?: (string | null) | undefined;
              size: number;
              squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
              squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
              ssh_url: string;
              stargazers?: number | undefined;
              stargazers_count: number;
              stargazers_url: string;
              statuses_url: string;
              subscribers_url: string;
              subscription_url: string;
              svn_url: string;
              tags_url: string;
              teams_url: string;
              topics: Array<string>;
              trees_url: string;
              updated_at: string;
              url: string;
              use_squash_pr_title_as_default?: boolean | undefined;
              visibility: "public" | "private" | "internal";
              watchers: number;
              watchers_count: number;
              web_commit_signoff_required?: boolean | undefined;
            };
            sha: string;
            user: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
          };
          body: string | null;
          changed_files?: number | undefined;
          closed_at: string | null;
          comments?: number | undefined;
          comments_url: string;
          commits?: number | undefined;
          commits_url: string;
          created_at: string;
          deletions?: number | undefined;
          diff_url: string;
          draft: boolean;
          head: {
            label: string;
            ref: string;
            repo: {
              allow_auto_merge?: boolean | undefined;
              allow_forking?: boolean | undefined;
              allow_merge_commit?: boolean | undefined;
              allow_rebase_merge?: boolean | undefined;
              allow_squash_merge?: boolean | undefined;
              allow_update_branch?: boolean | undefined;
              archive_url: string;
              archived: boolean;
              assignees_url: string;
              blobs_url: string;
              branches_url: string;
              clone_url: string;
              collaborators_url: string;
              comments_url: string;
              commits_url: string;
              compare_url: string;
              contents_url: string;
              contributors_url: string;
              created_at: number | string;
              default_branch: string;
              delete_branch_on_merge?: boolean | undefined;
              deployments_url: string;
              description: string | null;
              disabled?: boolean | undefined;
              downloads_url: string;
              events_url: string;
              fork: boolean;
              forks: number;
              forks_count: number;
              forks_url: string;
              full_name: string;
              git_commits_url: string;
              git_refs_url: string;
              git_tags_url: string;
              git_url: string;
              has_downloads: boolean;
              has_issues: boolean;
              has_pages: boolean;
              has_projects: boolean;
              has_wiki: boolean;
              has_discussions: boolean;
              homepage: string | null;
              hooks_url: string;
              html_url: string;
              id: number;
              is_template?: boolean | undefined;
              issue_comment_url: string;
              issue_events_url: string;
              issues_url: string;
              keys_url: string;
              labels_url: string;
              language: string | null;
              languages_url: string;
              license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
              master_branch?: string | undefined;
              merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
              merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
              merges_url: string;
              milestones_url: string;
              mirror_url: string | null;
              name: string;
              node_id: string;
              notifications_url: string;
              open_issues: number;
              open_issues_count: number;
              organization?: string | undefined;
              owner: {
                avatar_url?: string | undefined;
                deleted?: boolean | undefined;
                email?: (string | null) | undefined;
                events_url?: string | undefined;
                followers_url?: string | undefined;
                following_url?: string | undefined;
                gists_url?: string | undefined;
                gravatar_id?: string | undefined;
                html_url?: string | undefined;
                id: number;
                login: string;
                name?: string | undefined;
                node_id?: string | undefined;
                organizations_url?: string | undefined;
                received_events_url?: string | undefined;
                repos_url?: string | undefined;
                site_admin?: boolean | undefined;
                starred_url?: string | undefined;
                subscriptions_url?: string | undefined;
                type?: ("Bot" | "User" | "Organization") | undefined;
                url?: string | undefined;
                user_view_type?: string | undefined;
              } | null;
              permissions?:
                | {
                    admin: boolean;
                    maintain?: boolean | undefined;
                    pull: boolean;
                    push: boolean;
                    triage?: boolean | undefined;
                  }
                | undefined;
              private: boolean;
              public?: boolean | undefined;
              pulls_url: string;
              pushed_at: (number | string) | null;
              releases_url: string;
              role_name?: (string | null) | undefined;
              size: number;
              squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
              squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
              ssh_url: string;
              stargazers?: number | undefined;
              stargazers_count: number;
              stargazers_url: string;
              statuses_url: string;
              subscribers_url: string;
              subscription_url: string;
              svn_url: string;
              tags_url: string;
              teams_url: string;
              topics: Array<string>;
              trees_url: string;
              updated_at: string;
              url: string;
              use_squash_pr_title_as_default?: boolean | undefined;
              visibility: "public" | "private" | "internal";
              watchers: number;
              watchers_count: number;
              web_commit_signoff_required?: boolean | undefined;
            };
            sha: string;
            user: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
          };
          html_url: string;
          id: number;
          issue_url: string;
          labels: Array<{
            color: string;
            default: boolean;
            description: string | null;
            id: number;
            name: string;
            node_id: string;
            url: string;
          }>;
          locked: boolean;
          maintainer_can_modify?: boolean | undefined;
          merge_commit_sha: string | null;
          mergeable?: (boolean | null) | undefined;
          mergeable_state?: string | undefined;
          merged?: (boolean | null) | undefined;
          merged_at: string | null;
          merged_by?:
            | ({
                avatar_url?: string | undefined;
                deleted?: boolean | undefined;
                email?: (string | null) | undefined;
                events_url?: string | undefined;
                followers_url?: string | undefined;
                following_url?: string | undefined;
                gists_url?: string | undefined;
                gravatar_id?: string | undefined;
                html_url?: string | undefined;
                id: number;
                login: string;
                name?: string | undefined;
                node_id?: string | undefined;
                organizations_url?: string | undefined;
                received_events_url?: string | undefined;
                repos_url?: string | undefined;
                site_admin?: boolean | undefined;
                starred_url?: string | undefined;
                subscriptions_url?: string | undefined;
                type?: ("Bot" | "User" | "Organization") | undefined;
                url?: string | undefined;
                user_view_type?: string | undefined;
              } | null)
            | undefined;
          milestone: {
            closed_at: string | null;
            closed_issues: number;
            created_at: string;
            creator: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            description: string | null;
            due_on: string | null;
            html_url: string;
            id: number;
            labels_url: string;
            node_id: string;
            number: number;
            open_issues: number;
            state: "open" | "closed";
            title: string;
            updated_at: string;
            url: string;
          } | null;
          node_id: string;
          number: number;
          patch_url: string;
          rebaseable?: (boolean | null) | undefined;
          requested_reviewers: Array<
            | ({
                avatar_url?: string | undefined;
                deleted?: boolean | undefined;
                email?: (string | null) | undefined;
                events_url?: string | undefined;
                followers_url?: string | undefined;
                following_url?: string | undefined;
                gists_url?: string | undefined;
                gravatar_id?: string | undefined;
                html_url?: string | undefined;
                id: number;
                login: string;
                name?: string | undefined;
                node_id?: string | undefined;
                organizations_url?: string | undefined;
                received_events_url?: string | undefined;
                repos_url?: string | undefined;
                site_admin?: boolean | undefined;
                starred_url?: string | undefined;
                subscriptions_url?: string | undefined;
                type?: ("Bot" | "User" | "Organization") | undefined;
                url?: string | undefined;
                user_view_type?: string | undefined;
              } | null)
            | {
                deleted?: boolean | undefined;
                description: string | null;
                html_url: string;
                id: number;
                members_url: string;
                name: string;
                node_id: string;
                parent?:
                  | ({
                      description: string | null;
                      html_url: string;
                      id: number;
                      members_url: string;
                      name: string;
                      node_id: string;
                      permission: string;
                      privacy: "open" | "closed" | "secret";
                      repositories_url: string;
                      slug: string;
                      url: string;
                    } | null)
                  | undefined;
                permission: string;
                privacy: "open" | "closed" | "secret";
                repositories_url: string;
                slug: string;
                url: string;
              }
          >;
          requested_teams: Array<{
            deleted?: boolean | undefined;
            description: string | null;
            html_url: string;
            id: number;
            members_url: string;
            name: string;
            node_id: string;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission: string;
            privacy: "open" | "closed" | "secret";
            repositories_url: string;
            slug: string;
            url: string;
          }>;
          review_comment_url: string;
          review_comments?: number | undefined;
          review_comments_url: string;
          state: "open" | "closed";
          statuses_url: string;
          title: string;
          updated_at: string;
          url: string;
          user: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
        };
        repository: repository_webhooks;
        requested_team: {
          deleted?: boolean | undefined;
          description: string | null;
          html_url: string;
          id: number;
          members_url: string;
          name: string;
          node_id: string;
          parent?:
            | ({
                description: string | null;
                html_url: string;
                id: number;
                members_url: string;
                name: string;
                node_id: string;
                permission: string;
                privacy: "open" | "closed" | "secret";
                repositories_url: string;
                slug: string;
                url: string;
              } | null)
            | undefined;
          permission: string;
          privacy: "open" | "closed" | "secret";
          repositories_url: string;
          slug: string;
          url: string;
        };
        sender: simple_user;
      };
  export type webhook_pull_request_review_requested =
    | {
        action: "review_requested";
        enterprise?: enterprise_webhooks | undefined;
        installation?: simple_installation | undefined;
        number: number;
        organization?: organization_simple_webhooks | undefined;
        pull_request: {
          _links: {
            comments: { href: string };
            commits: { href: string };
            html: { href: string };
            issue: { href: string };
            review_comment: { href: string };
            review_comments: { href: string };
            self: { href: string };
            statuses: { href: string };
          };
          active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
          additions?: number | undefined;
          assignee: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          assignees: Array<{
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null>;
          author_association:
            | "COLLABORATOR"
            | "CONTRIBUTOR"
            | "FIRST_TIMER"
            | "FIRST_TIME_CONTRIBUTOR"
            | "MANNEQUIN"
            | "MEMBER"
            | "NONE"
            | "OWNER";
          auto_merge: {
            commit_message: string | null;
            commit_title: string | null;
            enabled_by: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            merge_method: "merge" | "squash" | "rebase";
          } | null;
          base: {
            label: string;
            ref: string;
            repo: {
              allow_auto_merge?: boolean | undefined;
              allow_forking?: boolean | undefined;
              allow_merge_commit?: boolean | undefined;
              allow_rebase_merge?: boolean | undefined;
              allow_squash_merge?: boolean | undefined;
              allow_update_branch?: boolean | undefined;
              archive_url: string;
              archived: boolean;
              assignees_url: string;
              blobs_url: string;
              branches_url: string;
              clone_url: string;
              collaborators_url: string;
              comments_url: string;
              commits_url: string;
              compare_url: string;
              contents_url: string;
              contributors_url: string;
              created_at: number | string;
              default_branch: string;
              delete_branch_on_merge?: boolean | undefined;
              deployments_url: string;
              description: string | null;
              disabled?: boolean | undefined;
              downloads_url: string;
              events_url: string;
              fork: boolean;
              forks: number;
              forks_count: number;
              forks_url: string;
              full_name: string;
              git_commits_url: string;
              git_refs_url: string;
              git_tags_url: string;
              git_url: string;
              has_downloads: boolean;
              has_issues: boolean;
              has_pages: boolean;
              has_projects: boolean;
              has_wiki: boolean;
              has_discussions: boolean;
              homepage: string | null;
              hooks_url: string;
              html_url: string;
              id: number;
              is_template?: boolean | undefined;
              issue_comment_url: string;
              issue_events_url: string;
              issues_url: string;
              keys_url: string;
              labels_url: string;
              language: string | null;
              languages_url: string;
              license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
              master_branch?: string | undefined;
              merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
              merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
              merges_url: string;
              milestones_url: string;
              mirror_url: string | null;
              name: string;
              node_id: string;
              notifications_url: string;
              open_issues: number;
              open_issues_count: number;
              organization?: string | undefined;
              owner: {
                avatar_url?: string | undefined;
                deleted?: boolean | undefined;
                email?: (string | null) | undefined;
                events_url?: string | undefined;
                followers_url?: string | undefined;
                following_url?: string | undefined;
                gists_url?: string | undefined;
                gravatar_id?: string | undefined;
                html_url?: string | undefined;
                id: number;
                login: string;
                name?: string | undefined;
                node_id?: string | undefined;
                organizations_url?: string | undefined;
                received_events_url?: string | undefined;
                repos_url?: string | undefined;
                site_admin?: boolean | undefined;
                starred_url?: string | undefined;
                subscriptions_url?: string | undefined;
                type?: ("Bot" | "User" | "Organization") | undefined;
                url?: string | undefined;
                user_view_type?: string | undefined;
              } | null;
              permissions?:
                | {
                    admin: boolean;
                    maintain?: boolean | undefined;
                    pull: boolean;
                    push: boolean;
                    triage?: boolean | undefined;
                  }
                | undefined;
              private: boolean;
              public?: boolean | undefined;
              pulls_url: string;
              pushed_at: (number | string) | null;
              releases_url: string;
              role_name?: (string | null) | undefined;
              size: number;
              squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
              squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
              ssh_url: string;
              stargazers?: number | undefined;
              stargazers_count: number;
              stargazers_url: string;
              statuses_url: string;
              subscribers_url: string;
              subscription_url: string;
              svn_url: string;
              tags_url: string;
              teams_url: string;
              topics: Array<string>;
              trees_url: string;
              updated_at: string;
              url: string;
              use_squash_pr_title_as_default?: boolean | undefined;
              visibility: "public" | "private" | "internal";
              watchers: number;
              watchers_count: number;
              web_commit_signoff_required?: boolean | undefined;
            };
            sha: string;
            user: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
          };
          body: string | null;
          changed_files?: number | undefined;
          closed_at: string | null;
          comments?: number | undefined;
          comments_url: string;
          commits?: number | undefined;
          commits_url: string;
          created_at: string;
          deletions?: number | undefined;
          diff_url: string;
          draft: boolean;
          head: {
            label: string;
            ref: string;
            repo: {
              allow_auto_merge?: boolean | undefined;
              allow_forking?: boolean | undefined;
              allow_merge_commit?: boolean | undefined;
              allow_rebase_merge?: boolean | undefined;
              allow_squash_merge?: boolean | undefined;
              allow_update_branch?: boolean | undefined;
              archive_url: string;
              archived: boolean;
              assignees_url: string;
              blobs_url: string;
              branches_url: string;
              clone_url: string;
              collaborators_url: string;
              comments_url: string;
              commits_url: string;
              compare_url: string;
              contents_url: string;
              contributors_url: string;
              created_at: number | string;
              default_branch: string;
              delete_branch_on_merge?: boolean | undefined;
              deployments_url: string;
              description: string | null;
              disabled?: boolean | undefined;
              downloads_url: string;
              events_url: string;
              fork: boolean;
              forks: number;
              forks_count: number;
              forks_url: string;
              full_name: string;
              git_commits_url: string;
              git_refs_url: string;
              git_tags_url: string;
              git_url: string;
              has_downloads: boolean;
              has_issues: boolean;
              has_pages: boolean;
              has_projects: boolean;
              has_wiki: boolean;
              has_discussions: boolean;
              homepage: string | null;
              hooks_url: string;
              html_url: string;
              id: number;
              is_template?: boolean | undefined;
              issue_comment_url: string;
              issue_events_url: string;
              issues_url: string;
              keys_url: string;
              labels_url: string;
              language: string | null;
              languages_url: string;
              license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
              master_branch?: string | undefined;
              merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
              merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
              merges_url: string;
              milestones_url: string;
              mirror_url: string | null;
              name: string;
              node_id: string;
              notifications_url: string;
              open_issues: number;
              open_issues_count: number;
              organization?: string | undefined;
              owner: {
                avatar_url?: string | undefined;
                deleted?: boolean | undefined;
                email?: (string | null) | undefined;
                events_url?: string | undefined;
                followers_url?: string | undefined;
                following_url?: string | undefined;
                gists_url?: string | undefined;
                gravatar_id?: string | undefined;
                html_url?: string | undefined;
                id: number;
                login: string;
                name?: string | undefined;
                node_id?: string | undefined;
                organizations_url?: string | undefined;
                received_events_url?: string | undefined;
                repos_url?: string | undefined;
                site_admin?: boolean | undefined;
                starred_url?: string | undefined;
                subscriptions_url?: string | undefined;
                type?: ("Bot" | "User" | "Organization") | undefined;
                url?: string | undefined;
                user_view_type?: string | undefined;
              } | null;
              permissions?:
                | {
                    admin: boolean;
                    maintain?: boolean | undefined;
                    pull: boolean;
                    push: boolean;
                    triage?: boolean | undefined;
                  }
                | undefined;
              private: boolean;
              public?: boolean | undefined;
              pulls_url: string;
              pushed_at: (number | string) | null;
              releases_url: string;
              role_name?: (string | null) | undefined;
              size: number;
              squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
              squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
              ssh_url: string;
              stargazers?: number | undefined;
              stargazers_count: number;
              stargazers_url: string;
              statuses_url: string;
              subscribers_url: string;
              subscription_url: string;
              svn_url: string;
              tags_url: string;
              teams_url: string;
              topics: Array<string>;
              trees_url: string;
              updated_at: string;
              url: string;
              use_squash_pr_title_as_default?: boolean | undefined;
              visibility: "public" | "private" | "internal";
              watchers: number;
              watchers_count: number;
              web_commit_signoff_required?: boolean | undefined;
            };
            sha: string;
            user: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
          };
          html_url: string;
          id: number;
          issue_url: string;
          labels: Array<{
            color: string;
            default: boolean;
            description: string | null;
            id: number;
            name: string;
            node_id: string;
            url: string;
          }>;
          locked: boolean;
          maintainer_can_modify?: boolean | undefined;
          merge_commit_sha: string | null;
          mergeable?: (boolean | null) | undefined;
          mergeable_state?: string | undefined;
          merged?: (boolean | null) | undefined;
          merged_at: string | null;
          merged_by?:
            | ({
                avatar_url?: string | undefined;
                deleted?: boolean | undefined;
                email?: (string | null) | undefined;
                events_url?: string | undefined;
                followers_url?: string | undefined;
                following_url?: string | undefined;
                gists_url?: string | undefined;
                gravatar_id?: string | undefined;
                html_url?: string | undefined;
                id: number;
                login: string;
                name?: string | undefined;
                node_id?: string | undefined;
                organizations_url?: string | undefined;
                received_events_url?: string | undefined;
                repos_url?: string | undefined;
                site_admin?: boolean | undefined;
                starred_url?: string | undefined;
                subscriptions_url?: string | undefined;
                type?: ("Bot" | "User" | "Organization") | undefined;
                url?: string | undefined;
                user_view_type?: string | undefined;
              } | null)
            | undefined;
          milestone: {
            closed_at: string | null;
            closed_issues: number;
            created_at: string;
            creator: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            description: string | null;
            due_on: string | null;
            html_url: string;
            id: number;
            labels_url: string;
            node_id: string;
            number: number;
            open_issues: number;
            state: "open" | "closed";
            title: string;
            updated_at: string;
            url: string;
          } | null;
          node_id: string;
          number: number;
          patch_url: string;
          rebaseable?: (boolean | null) | undefined;
          requested_reviewers: Array<
            | ({
                avatar_url?: string | undefined;
                deleted?: boolean | undefined;
                email?: (string | null) | undefined;
                events_url?: string | undefined;
                followers_url?: string | undefined;
                following_url?: string | undefined;
                gists_url?: string | undefined;
                gravatar_id?: string | undefined;
                html_url?: string | undefined;
                id: number;
                login: string;
                name?: string | undefined;
                node_id?: string | undefined;
                organizations_url?: string | undefined;
                received_events_url?: string | undefined;
                repos_url?: string | undefined;
                site_admin?: boolean | undefined;
                starred_url?: string | undefined;
                subscriptions_url?: string | undefined;
                type?: ("Bot" | "User" | "Organization") | undefined;
                url?: string | undefined;
                user_view_type?: string | undefined;
              } | null)
            | {
                deleted?: boolean | undefined;
                description: string | null;
                html_url: string;
                id: number;
                members_url: string;
                name: string;
                node_id: string;
                parent?:
                  | ({
                      description: string | null;
                      html_url: string;
                      id: number;
                      members_url: string;
                      name: string;
                      node_id: string;
                      permission: string;
                      privacy: "open" | "closed" | "secret";
                      repositories_url: string;
                      slug: string;
                      url: string;
                    } | null)
                  | undefined;
                permission: string;
                privacy: "open" | "closed" | "secret";
                repositories_url: string;
                slug: string;
                url: string;
              }
          >;
          requested_teams: Array<{
            deleted?: boolean | undefined;
            description?: (string | null) | undefined;
            html_url?: string | undefined;
            id: number;
            members_url?: string | undefined;
            name: string;
            node_id?: string | undefined;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission?: string | undefined;
            privacy?: ("open" | "closed" | "secret") | undefined;
            repositories_url?: string | undefined;
            slug?: string | undefined;
            url?: string | undefined;
          }>;
          review_comment_url: string;
          review_comments?: number | undefined;
          review_comments_url: string;
          state: "open" | "closed";
          statuses_url: string;
          title: string;
          updated_at: string;
          url: string;
          user: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
        };
        repository: repository_webhooks;
        requested_reviewer: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        sender: simple_user;
      }
    | {
        action: "review_requested";
        enterprise?: enterprise_webhooks | undefined;
        installation?: simple_installation | undefined;
        number: number;
        organization?: organization_simple_webhooks | undefined;
        pull_request: {
          _links: {
            comments: { href: string };
            commits: { href: string };
            html: { href: string };
            issue: { href: string };
            review_comment: { href: string };
            review_comments: { href: string };
            self: { href: string };
            statuses: { href: string };
          };
          active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
          additions?: number | undefined;
          assignee: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          assignees: Array<{
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null>;
          author_association:
            | "COLLABORATOR"
            | "CONTRIBUTOR"
            | "FIRST_TIMER"
            | "FIRST_TIME_CONTRIBUTOR"
            | "MANNEQUIN"
            | "MEMBER"
            | "NONE"
            | "OWNER";
          auto_merge: {
            commit_message: string | null;
            commit_title: string | null;
            enabled_by: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            merge_method: "merge" | "squash" | "rebase";
          } | null;
          base: {
            label: string;
            ref: string;
            repo: {
              allow_auto_merge?: boolean | undefined;
              allow_forking?: boolean | undefined;
              allow_merge_commit?: boolean | undefined;
              allow_rebase_merge?: boolean | undefined;
              allow_squash_merge?: boolean | undefined;
              allow_update_branch?: boolean | undefined;
              archive_url: string;
              archived: boolean;
              assignees_url: string;
              blobs_url: string;
              branches_url: string;
              clone_url: string;
              collaborators_url: string;
              comments_url: string;
              commits_url: string;
              compare_url: string;
              contents_url: string;
              contributors_url: string;
              created_at: number | string;
              default_branch: string;
              delete_branch_on_merge?: boolean | undefined;
              deployments_url: string;
              description: string | null;
              disabled?: boolean | undefined;
              downloads_url: string;
              events_url: string;
              fork: boolean;
              forks: number;
              forks_count: number;
              forks_url: string;
              full_name: string;
              git_commits_url: string;
              git_refs_url: string;
              git_tags_url: string;
              git_url: string;
              has_downloads: boolean;
              has_issues: boolean;
              has_pages: boolean;
              has_projects: boolean;
              has_wiki: boolean;
              has_discussions: boolean;
              homepage: string | null;
              hooks_url: string;
              html_url: string;
              id: number;
              is_template?: boolean | undefined;
              issue_comment_url: string;
              issue_events_url: string;
              issues_url: string;
              keys_url: string;
              labels_url: string;
              language: string | null;
              languages_url: string;
              license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
              master_branch?: string | undefined;
              merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
              merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
              merges_url: string;
              milestones_url: string;
              mirror_url: string | null;
              name: string;
              node_id: string;
              notifications_url: string;
              open_issues: number;
              open_issues_count: number;
              organization?: string | undefined;
              owner: {
                avatar_url?: string | undefined;
                deleted?: boolean | undefined;
                email?: (string | null) | undefined;
                events_url?: string | undefined;
                followers_url?: string | undefined;
                following_url?: string | undefined;
                gists_url?: string | undefined;
                gravatar_id?: string | undefined;
                html_url?: string | undefined;
                id: number;
                login: string;
                name?: string | undefined;
                node_id?: string | undefined;
                organizations_url?: string | undefined;
                received_events_url?: string | undefined;
                repos_url?: string | undefined;
                site_admin?: boolean | undefined;
                starred_url?: string | undefined;
                subscriptions_url?: string | undefined;
                type?: ("Bot" | "User" | "Organization") | undefined;
                url?: string | undefined;
                user_view_type?: string | undefined;
              } | null;
              permissions?:
                | {
                    admin: boolean;
                    maintain?: boolean | undefined;
                    pull: boolean;
                    push: boolean;
                    triage?: boolean | undefined;
                  }
                | undefined;
              private: boolean;
              public?: boolean | undefined;
              pulls_url: string;
              pushed_at: (number | string) | null;
              releases_url: string;
              role_name?: (string | null) | undefined;
              size: number;
              squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
              squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
              ssh_url: string;
              stargazers?: number | undefined;
              stargazers_count: number;
              stargazers_url: string;
              statuses_url: string;
              subscribers_url: string;
              subscription_url: string;
              svn_url: string;
              tags_url: string;
              teams_url: string;
              topics: Array<string>;
              trees_url: string;
              updated_at: string;
              url: string;
              use_squash_pr_title_as_default?: boolean | undefined;
              visibility: "public" | "private" | "internal";
              watchers: number;
              watchers_count: number;
              web_commit_signoff_required?: boolean | undefined;
            };
            sha: string;
            user: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
          };
          body: string | null;
          changed_files?: number | undefined;
          closed_at: string | null;
          comments?: number | undefined;
          comments_url: string;
          commits?: number | undefined;
          commits_url: string;
          created_at: string;
          deletions?: number | undefined;
          diff_url: string;
          draft: boolean;
          head: {
            label: string;
            ref: string;
            repo: {
              allow_auto_merge?: boolean | undefined;
              allow_forking?: boolean | undefined;
              allow_merge_commit?: boolean | undefined;
              allow_rebase_merge?: boolean | undefined;
              allow_squash_merge?: boolean | undefined;
              allow_update_branch?: boolean | undefined;
              archive_url: string;
              archived: boolean;
              assignees_url: string;
              blobs_url: string;
              branches_url: string;
              clone_url: string;
              collaborators_url: string;
              comments_url: string;
              commits_url: string;
              compare_url: string;
              contents_url: string;
              contributors_url: string;
              created_at: number | string;
              default_branch: string;
              delete_branch_on_merge?: boolean | undefined;
              deployments_url: string;
              description: string | null;
              disabled?: boolean | undefined;
              downloads_url: string;
              events_url: string;
              fork: boolean;
              forks: number;
              forks_count: number;
              forks_url: string;
              full_name: string;
              git_commits_url: string;
              git_refs_url: string;
              git_tags_url: string;
              git_url: string;
              has_downloads: boolean;
              has_issues: boolean;
              has_pages: boolean;
              has_projects: boolean;
              has_wiki: boolean;
              has_discussions: boolean;
              homepage: string | null;
              hooks_url: string;
              html_url: string;
              id: number;
              is_template?: boolean | undefined;
              issue_comment_url: string;
              issue_events_url: string;
              issues_url: string;
              keys_url: string;
              labels_url: string;
              language: string | null;
              languages_url: string;
              license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
              master_branch?: string | undefined;
              merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
              merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
              merges_url: string;
              milestones_url: string;
              mirror_url: string | null;
              name: string;
              node_id: string;
              notifications_url: string;
              open_issues: number;
              open_issues_count: number;
              organization?: string | undefined;
              owner: {
                avatar_url?: string | undefined;
                deleted?: boolean | undefined;
                email?: (string | null) | undefined;
                events_url?: string | undefined;
                followers_url?: string | undefined;
                following_url?: string | undefined;
                gists_url?: string | undefined;
                gravatar_id?: string | undefined;
                html_url?: string | undefined;
                id: number;
                login: string;
                name?: string | undefined;
                node_id?: string | undefined;
                organizations_url?: string | undefined;
                received_events_url?: string | undefined;
                repos_url?: string | undefined;
                site_admin?: boolean | undefined;
                starred_url?: string | undefined;
                subscriptions_url?: string | undefined;
                type?: ("Bot" | "User" | "Organization") | undefined;
                url?: string | undefined;
                user_view_type?: string | undefined;
              } | null;
              permissions?:
                | {
                    admin: boolean;
                    maintain?: boolean | undefined;
                    pull: boolean;
                    push: boolean;
                    triage?: boolean | undefined;
                  }
                | undefined;
              private: boolean;
              public?: boolean | undefined;
              pulls_url: string;
              pushed_at: (number | string) | null;
              releases_url: string;
              role_name?: (string | null) | undefined;
              size: number;
              squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
              squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
              ssh_url: string;
              stargazers?: number | undefined;
              stargazers_count: number;
              stargazers_url: string;
              statuses_url: string;
              subscribers_url: string;
              subscription_url: string;
              svn_url: string;
              tags_url: string;
              teams_url: string;
              topics: Array<string>;
              trees_url: string;
              updated_at: string;
              url: string;
              use_squash_pr_title_as_default?: boolean | undefined;
              visibility: "public" | "private" | "internal";
              watchers: number;
              watchers_count: number;
              web_commit_signoff_required?: boolean | undefined;
            };
            sha: string;
            user: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
          };
          html_url: string;
          id: number;
          issue_url: string;
          labels: Array<{
            color: string;
            default: boolean;
            description: string | null;
            id: number;
            name: string;
            node_id: string;
            url: string;
          }>;
          locked: boolean;
          maintainer_can_modify?: boolean | undefined;
          merge_commit_sha: string | null;
          mergeable?: (boolean | null) | undefined;
          mergeable_state?: string | undefined;
          merged?: (boolean | null) | undefined;
          merged_at: string | null;
          merged_by?:
            | ({
                avatar_url?: string | undefined;
                deleted?: boolean | undefined;
                email?: (string | null) | undefined;
                events_url?: string | undefined;
                followers_url?: string | undefined;
                following_url?: string | undefined;
                gists_url?: string | undefined;
                gravatar_id?: string | undefined;
                html_url?: string | undefined;
                id: number;
                login: string;
                name?: string | undefined;
                node_id?: string | undefined;
                organizations_url?: string | undefined;
                received_events_url?: string | undefined;
                repos_url?: string | undefined;
                site_admin?: boolean | undefined;
                starred_url?: string | undefined;
                subscriptions_url?: string | undefined;
                type?: ("Bot" | "User" | "Organization") | undefined;
                url?: string | undefined;
                user_view_type?: string | undefined;
              } | null)
            | undefined;
          milestone: {
            closed_at: string | null;
            closed_issues: number;
            created_at: string;
            creator: {
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
              url?: string | undefined;
              user_view_type?: string | undefined;
            } | null;
            description: string | null;
            due_on: string | null;
            html_url: string;
            id: number;
            labels_url: string;
            node_id: string;
            number: number;
            open_issues: number;
            state: "open" | "closed";
            title: string;
            updated_at: string;
            url: string;
          } | null;
          node_id: string;
          number: number;
          patch_url: string;
          rebaseable?: (boolean | null) | undefined;
          requested_reviewers: Array<
            | ({
                avatar_url?: string | undefined;
                deleted?: boolean | undefined;
                email?: (string | null) | undefined;
                events_url?: string | undefined;
                followers_url?: string | undefined;
                following_url?: string | undefined;
                gists_url?: string | undefined;
                gravatar_id?: string | undefined;
                html_url?: string | undefined;
                id: number;
                login: string;
                name?: string | undefined;
                node_id?: string | undefined;
                organizations_url?: string | undefined;
                received_events_url?: string | undefined;
                repos_url?: string | undefined;
                site_admin?: boolean | undefined;
                starred_url?: string | undefined;
                subscriptions_url?: string | undefined;
                type?: ("Bot" | "User" | "Organization") | undefined;
                url?: string | undefined;
                user_view_type?: string | undefined;
              } | null)
            | {
                deleted?: boolean | undefined;
                description?: (string | null) | undefined;
                html_url?: string | undefined;
                id: number;
                members_url?: string | undefined;
                name: string;
                node_id?: string | undefined;
                parent?:
                  | ({
                      description: string | null;
                      html_url: string;
                      id: number;
                      members_url: string;
                      name: string;
                      node_id: string;
                      permission: string;
                      privacy: "open" | "closed" | "secret";
                      repositories_url: string;
                      slug: string;
                      url: string;
                    } | null)
                  | undefined;
                permission?: string | undefined;
                privacy?: ("open" | "closed" | "secret") | undefined;
                repositories_url?: string | undefined;
                slug?: string | undefined;
                url?: string | undefined;
              }
          >;
          requested_teams: Array<{
            deleted?: boolean | undefined;
            description?: (string | null) | undefined;
            html_url?: string | undefined;
            id: number;
            members_url?: string | undefined;
            name: string;
            node_id?: string | undefined;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission?: string | undefined;
            privacy?: ("open" | "closed" | "secret") | undefined;
            repositories_url?: string | undefined;
            slug?: string | undefined;
            url?: string | undefined;
          }>;
          review_comment_url: string;
          review_comments?: number | undefined;
          review_comments_url: string;
          state: "open" | "closed";
          statuses_url: string;
          title: string;
          updated_at: string;
          url: string;
          user: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
        };
        repository: repository_webhooks;
        requested_team: {
          deleted?: boolean | undefined;
          description?: (string | null) | undefined;
          html_url?: string | undefined;
          id: number;
          members_url?: string | undefined;
          name: string;
          node_id?: string | undefined;
          parent?:
            | ({
                description: string | null;
                html_url: string;
                id: number;
                members_url: string;
                name: string;
                node_id: string;
                permission: string;
                privacy: "open" | "closed" | "secret";
                repositories_url: string;
                slug: string;
                url: string;
              } | null)
            | undefined;
          permission?: string | undefined;
          privacy?: ("open" | "closed" | "secret") | undefined;
          repositories_url?: string | undefined;
          slug?: string | undefined;
          url?: string | undefined;
        };
        sender: simple_user;
      };
  export type webhook_pull_request_review_submitted = {
    action: "submitted";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    pull_request: {
      _links: {
        comments: { href: string };
        commits: { href: string };
        html: { href: string };
        issue: { href: string };
        review_comment: { href: string };
        review_comments: { href: string };
        self: { href: string };
        statuses: { href: string };
      };
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      auto_merge: {
        commit_message: string | null;
        commit_title: string | null;
        enabled_by: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        merge_method: "merge" | "squash" | "rebase";
      } | null;
      base: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      body: string | null;
      closed_at: string | null;
      comments_url: string;
      commits_url: string;
      created_at: string;
      diff_url: string;
      draft: boolean;
      head: {
        label: string | null;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        } | null;
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      html_url: string;
      id: number;
      issue_url: string;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      locked: boolean;
      merge_commit_sha: string | null;
      merged_at: string | null;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      patch_url: string;
      requested_reviewers: Array<
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | {
            deleted?: boolean | undefined;
            description: string | null;
            html_url: string;
            id: number;
            members_url: string;
            name: string;
            node_id: string;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission: string;
            privacy: "open" | "closed" | "secret";
            repositories_url: string;
            slug: string;
            url: string;
          }
      >;
      requested_teams: Array<{
        deleted?: boolean | undefined;
        description?: (string | null) | undefined;
        html_url?: string | undefined;
        id: number;
        members_url?: string | undefined;
        name: string;
        node_id?: string | undefined;
        parent?:
          | ({
              description: string | null;
              html_url: string;
              id: number;
              members_url: string;
              name: string;
              node_id: string;
              permission: string;
              privacy: "open" | "closed" | "secret";
              repositories_url: string;
              slug: string;
              url: string;
            } | null)
          | undefined;
        permission?: string | undefined;
        privacy?: ("open" | "closed" | "secret") | undefined;
        repositories_url?: string | undefined;
        slug?: string | undefined;
        url?: string | undefined;
      }>;
      review_comment_url: string;
      review_comments_url: string;
      state: "open" | "closed";
      statuses_url: string;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    repository: repository_webhooks;
    review: webhooks_review;
    sender: simple_user;
  };
  export type webhook_pull_request_review_thread_resolved = {
    action: "resolved";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    pull_request: {
      _links: {
        comments: { href: string };
        commits: { href: string };
        html: { href: string };
        issue: { href: string };
        review_comment: { href: string };
        review_comments: { href: string };
        self: { href: string };
        statuses: { href: string };
      };
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      auto_merge: {
        commit_message: string | null;
        commit_title: string | null;
        enabled_by: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        merge_method: "merge" | "squash" | "rebase";
      } | null;
      base: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      body: string | null;
      closed_at: string | null;
      comments_url: string;
      commits_url: string;
      created_at: string;
      diff_url: string;
      draft: boolean;
      head: {
        label: string | null;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        } | null;
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      html_url: string;
      id: number;
      issue_url: string;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      locked: boolean;
      merge_commit_sha: string | null;
      merged_at: string | null;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      patch_url: string;
      requested_reviewers: Array<
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | {
            deleted?: boolean | undefined;
            description: string | null;
            html_url: string;
            id: number;
            members_url: string;
            name: string;
            node_id: string;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission: string;
            privacy: "open" | "closed" | "secret";
            repositories_url: string;
            slug: string;
            url: string;
          }
      >;
      requested_teams: Array<{
        deleted?: boolean | undefined;
        description?: (string | null) | undefined;
        html_url?: string | undefined;
        id: number;
        members_url?: string | undefined;
        name: string;
        node_id?: string | undefined;
        parent?:
          | ({
              description: string | null;
              html_url: string;
              id: number;
              members_url: string;
              name: string;
              node_id: string;
              permission: string;
              privacy: "open" | "closed" | "secret";
              repositories_url: string;
              slug: string;
              url: string;
            } | null)
          | undefined;
        permission?: string | undefined;
        privacy?: ("open" | "closed" | "secret") | undefined;
        repositories_url?: string | undefined;
        slug?: string | undefined;
        url?: string | undefined;
      }>;
      review_comment_url: string;
      review_comments_url: string;
      state: "open" | "closed";
      statuses_url: string;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    repository: repository_webhooks;
    sender?: simple_user | undefined;
    thread: {
      comments: Array<{
        _links: { html: { href: string }; pull_request: { href: string }; self: { href: string } };
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        body: string;
        commit_id: string;
        created_at: string;
        diff_hunk: string;
        html_url: string;
        id: number;
        in_reply_to_id?: number | undefined;
        line: number | null;
        node_id: string;
        original_commit_id: string;
        original_line: number | null;
        original_position: number;
        original_start_line: number | null;
        path: string;
        position: number | null;
        pull_request_review_id: number | null;
        pull_request_url: string;
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          url: string;
        };
        side: "LEFT" | "RIGHT";
        start_line: number | null;
        start_side: ("LEFT" | "RIGHT" | "null") | null;
        subject_type?: ("line" | "file") | undefined;
        updated_at: string;
        url: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      }>;
      node_id: string;
    };
    updated_at?: (string | null) | undefined;
  };
  export type webhook_pull_request_review_thread_unresolved = {
    action: "unresolved";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    pull_request: {
      _links: {
        comments: { href: string };
        commits: { href: string };
        html: { href: string };
        issue: { href: string };
        review_comment: { href: string };
        review_comments: { href: string };
        self: { href: string };
        statuses: { href: string };
      };
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      auto_merge: {
        commit_message: string | null;
        commit_title: string;
        enabled_by: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        merge_method: "merge" | "squash" | "rebase";
      } | null;
      base: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      body: string | null;
      closed_at: string | null;
      comments_url: string;
      commits_url: string;
      created_at: string;
      diff_url: string;
      draft: boolean;
      head: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      html_url: string;
      id: number;
      issue_url: string;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      locked: boolean;
      merge_commit_sha: string | null;
      merged_at: string | null;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      patch_url: string;
      requested_reviewers: Array<
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | {
            deleted?: boolean | undefined;
            description?: (string | null) | undefined;
            html_url?: string | undefined;
            id: number;
            members_url?: string | undefined;
            name: string;
            node_id?: string | undefined;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission?: string | undefined;
            privacy?: ("open" | "closed" | "secret") | undefined;
            repositories_url?: string | undefined;
            slug?: string | undefined;
            url?: string | undefined;
          }
      >;
      requested_teams: Array<{
        deleted?: boolean | undefined;
        description?: (string | null) | undefined;
        html_url?: string | undefined;
        id: number;
        members_url?: string | undefined;
        name: string;
        node_id?: string | undefined;
        parent?:
          | ({
              description: string | null;
              html_url: string;
              id: number;
              members_url: string;
              name: string;
              node_id: string;
              permission: string;
              privacy: "open" | "closed" | "secret";
              repositories_url: string;
              slug: string;
              url: string;
            } | null)
          | undefined;
        permission?: string | undefined;
        privacy?: ("open" | "closed" | "secret") | undefined;
        repositories_url?: string | undefined;
        slug?: string | undefined;
        url?: string | undefined;
      }>;
      review_comment_url: string;
      review_comments_url: string;
      state: "open" | "closed";
      statuses_url: string;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    repository: repository_webhooks;
    sender?: simple_user | undefined;
    thread: {
      comments: Array<{
        _links: { html: { href: string }; pull_request: { href: string }; self: { href: string } };
        author_association:
          | "COLLABORATOR"
          | "CONTRIBUTOR"
          | "FIRST_TIMER"
          | "FIRST_TIME_CONTRIBUTOR"
          | "MANNEQUIN"
          | "MEMBER"
          | "NONE"
          | "OWNER";
        body: string;
        commit_id: string;
        created_at: string;
        diff_hunk: string;
        html_url: string;
        id: number;
        in_reply_to_id?: number | undefined;
        line: number | null;
        node_id: string;
        original_commit_id: string;
        original_line: number;
        original_position: number;
        original_start_line: number | null;
        path: string;
        position: number | null;
        pull_request_review_id: number | null;
        pull_request_url: string;
        reactions: {
          "+1": number;
          "-1": number;
          confused: number;
          eyes: number;
          heart: number;
          hooray: number;
          laugh: number;
          rocket: number;
          total_count: number;
          url: string;
        };
        side: "LEFT" | "RIGHT";
        start_line: number | null;
        start_side: ("LEFT" | "RIGHT" | "null") | null;
        subject_type?: ("line" | "file") | undefined;
        updated_at: string;
        url: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      }>;
      node_id: string;
    };
    updated_at?: (string | null) | undefined;
  };
  export type webhook_pull_request_synchronize = {
    action: "synchronize";
    after: string;
    before: string;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    number: webhooks_number;
    organization?: organization_simple_webhooks | undefined;
    pull_request: {
      _links: {
        comments: { href: string };
        commits: { href: string };
        html: { href: string };
        issue: { href: string };
        review_comment: { href: string };
        review_comments: { href: string };
        self: { href: string };
        statuses: { href: string };
      };
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      additions?: number | undefined;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      auto_merge: {
        commit_message: string | null;
        commit_title: string | null;
        enabled_by: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        merge_method: "merge" | "squash" | "rebase";
      } | null;
      base: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      body: string | null;
      changed_files?: number | undefined;
      closed_at: string | null;
      comments?: number | undefined;
      comments_url: string;
      commits?: number | undefined;
      commits_url: string;
      created_at: string;
      deletions?: number | undefined;
      diff_url: string;
      draft: boolean;
      head: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      html_url: string;
      id: number;
      issue_url: string;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      locked: boolean;
      maintainer_can_modify?: boolean | undefined;
      merge_commit_sha: string | null;
      mergeable?: (boolean | null) | undefined;
      mergeable_state?: string | undefined;
      merged?: (boolean | null) | undefined;
      merged_at: string | null;
      merged_by?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      patch_url: string;
      rebaseable?: (boolean | null) | undefined;
      requested_reviewers: Array<
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | {
            deleted?: boolean | undefined;
            description: string | null;
            html_url: string;
            id: number;
            members_url: string;
            name: string;
            node_id: string;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission: string;
            privacy: "open" | "closed" | "secret";
            repositories_url: string;
            slug: string;
            url: string;
          }
      >;
      requested_teams: Array<{
        deleted?: boolean | undefined;
        description?: (string | null) | undefined;
        html_url?: string | undefined;
        id: number;
        members_url?: string | undefined;
        name: string;
        node_id?: string | undefined;
        parent?:
          | ({
              description: string | null;
              html_url: string;
              id: number;
              members_url: string;
              name: string;
              node_id: string;
              permission: string;
              privacy: "open" | "closed" | "secret";
              repositories_url: string;
              slug: string;
              url: string;
            } | null)
          | undefined;
        permission?: string | undefined;
        privacy?: ("open" | "closed" | "secret") | undefined;
        repositories_url?: string | undefined;
        slug?: string | undefined;
        url?: string | undefined;
      }>;
      review_comment_url: string;
      review_comments?: number | undefined;
      review_comments_url: string;
      state: "open" | "closed";
      statuses_url: string;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_pull_request_unassigned = {
    action: "unassigned";
    assignee?: webhooks_user_mannequin | undefined;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    number: webhooks_number;
    organization?: organization_simple_webhooks | undefined;
    pull_request: {
      _links: {
        comments: { href: string };
        commits: { href: string };
        html: { href: string };
        issue: { href: string };
        review_comment: { href: string };
        review_comments: { href: string };
        self: { href: string };
        statuses: { href: string };
      };
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      additions?: number | undefined;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      auto_merge: {
        commit_message: string | null;
        commit_title: string | null;
        enabled_by: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        merge_method: "merge" | "squash" | "rebase";
      } | null;
      base: {
        label: string | null;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      body: string | null;
      changed_files?: number | undefined;
      closed_at: string | null;
      comments?: number | undefined;
      comments_url: string;
      commits?: number | undefined;
      commits_url: string;
      created_at: string;
      deletions?: number | undefined;
      diff_url: string;
      draft: boolean;
      head: {
        label: string | null;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        } | null;
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      html_url: string;
      id: number;
      issue_url: string;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      locked: boolean;
      maintainer_can_modify?: boolean | undefined;
      merge_commit_sha: string | null;
      mergeable?: (boolean | null) | undefined;
      mergeable_state?: string | undefined;
      merged?: (boolean | null) | undefined;
      merged_at: string | null;
      merged_by?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      patch_url: string;
      rebaseable?: (boolean | null) | undefined;
      requested_reviewers: Array<
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | {
            deleted?: boolean | undefined;
            description: string | null;
            html_url: string;
            id: number;
            members_url: string;
            name: string;
            node_id: string;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission: string;
            privacy: "open" | "closed" | "secret";
            repositories_url: string;
            slug: string;
            url: string;
          }
      >;
      requested_teams: Array<{
        deleted?: boolean | undefined;
        description?: (string | null) | undefined;
        html_url?: string | undefined;
        id: number;
        members_url?: string | undefined;
        name: string;
        node_id?: string | undefined;
        parent?:
          | ({
              description: string | null;
              html_url: string;
              id: number;
              members_url: string;
              name: string;
              node_id: string;
              permission: string;
              privacy: "open" | "closed" | "secret";
              repositories_url: string;
              slug: string;
              url: string;
            } | null)
          | undefined;
        permission?: string | undefined;
        privacy?: ("open" | "closed" | "secret") | undefined;
        repositories_url?: string | undefined;
        slug?: string | undefined;
        url?: string | undefined;
      }>;
      review_comment_url: string;
      review_comments?: number | undefined;
      review_comments_url: string;
      state: "open" | "closed";
      statuses_url: string;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    repository: repository_webhooks;
    sender?: simple_user | undefined;
  };
  export type webhook_pull_request_unlabeled = {
    action: "unlabeled";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    label?: webhooks_label | undefined;
    number: webhooks_number;
    organization?: organization_simple_webhooks | undefined;
    pull_request: {
      _links: {
        comments: { href: string };
        commits: { href: string };
        html: { href: string };
        issue: { href: string };
        review_comment: { href: string };
        review_comments: { href: string };
        self: { href: string };
        statuses: { href: string };
      };
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      additions?: number | undefined;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      auto_merge: {
        commit_message: string | null;
        commit_title: string | null;
        enabled_by: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        merge_method: "merge" | "squash" | "rebase";
      } | null;
      base: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      body: string | null;
      changed_files?: number | undefined;
      closed_at: string | null;
      comments?: number | undefined;
      comments_url: string;
      commits?: number | undefined;
      commits_url: string;
      created_at: string;
      deletions?: number | undefined;
      diff_url: string;
      draft: boolean;
      head: {
        label: string | null;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        } | null;
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      html_url: string;
      id: number;
      issue_url: string;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      locked: boolean;
      maintainer_can_modify?: boolean | undefined;
      merge_commit_sha: string | null;
      mergeable?: (boolean | null) | undefined;
      mergeable_state?: string | undefined;
      merged?: (boolean | null) | undefined;
      merged_at: string | null;
      merged_by?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      patch_url: string;
      rebaseable?: (boolean | null) | undefined;
      requested_reviewers: Array<
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | {
            deleted?: boolean | undefined;
            description: string | null;
            html_url: string;
            id: number;
            members_url: string;
            name: string;
            node_id: string;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission: string;
            privacy: "open" | "closed" | "secret";
            repositories_url: string;
            slug: string;
            url: string;
          }
      >;
      requested_teams: Array<{
        deleted?: boolean | undefined;
        description?: (string | null) | undefined;
        html_url?: string | undefined;
        id: number;
        members_url?: string | undefined;
        name: string;
        node_id?: string | undefined;
        parent?:
          | ({
              description: string | null;
              html_url: string;
              id: number;
              members_url: string;
              name: string;
              node_id: string;
              permission: string;
              privacy: "open" | "closed" | "secret";
              repositories_url: string;
              slug: string;
              url: string;
            } | null)
          | undefined;
        permission?: string | undefined;
        privacy?: ("open" | "closed" | "secret") | undefined;
        repositories_url?: string | undefined;
        slug?: string | undefined;
        url?: string | undefined;
      }>;
      review_comment_url: string;
      review_comments?: number | undefined;
      review_comments_url: string;
      state: "open" | "closed";
      statuses_url: string;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization" | "Mannequin") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_pull_request_unlocked = {
    action: "unlocked";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    number: webhooks_number;
    organization?: organization_simple_webhooks | undefined;
    pull_request: {
      _links: {
        comments: { href: string };
        commits: { href: string };
        html: { href: string };
        issue: { href: string };
        review_comment: { href: string };
        review_comments: { href: string };
        self: { href: string };
        statuses: { href: string };
      };
      active_lock_reason: ("resolved" | "off-topic" | "too heated" | "spam" | "null") | null;
      additions?: number | undefined;
      assignee: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      assignees: Array<{
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
      } | null>;
      author_association:
        | "COLLABORATOR"
        | "CONTRIBUTOR"
        | "FIRST_TIMER"
        | "FIRST_TIME_CONTRIBUTOR"
        | "MANNEQUIN"
        | "MEMBER"
        | "NONE"
        | "OWNER";
      auto_merge: {
        commit_message: string | null;
        commit_title: string;
        enabled_by: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        merge_method: "merge" | "squash" | "rebase";
      } | null;
      base: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        };
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      body: string | null;
      changed_files?: number | undefined;
      closed_at: string | null;
      comments?: number | undefined;
      comments_url: string;
      commits?: number | undefined;
      commits_url: string;
      created_at: string;
      deletions?: number | undefined;
      diff_url: string;
      draft: boolean;
      head: {
        label: string;
        ref: string;
        repo: {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_discussions: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
          merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
          squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          use_squash_pr_title_as_default?: boolean | undefined;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
          web_commit_signoff_required?: boolean | undefined;
        } | null;
        sha: string;
        user: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
      };
      html_url: string;
      id: number;
      issue_url: string;
      labels: Array<{
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        name: string;
        node_id: string;
        url: string;
      }>;
      locked: boolean;
      maintainer_can_modify?: boolean | undefined;
      merge_commit_sha: string | null;
      mergeable?: (boolean | null) | undefined;
      mergeable_state?: string | undefined;
      merged?: (boolean | null) | undefined;
      merged_at: string | null;
      merged_by?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | undefined;
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        number: number;
        open_issues: number;
        state: "open" | "closed";
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      patch_url: string;
      rebaseable?: (boolean | null) | undefined;
      requested_reviewers: Array<
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null)
        | {
            deleted?: boolean | undefined;
            description?: (string | null) | undefined;
            html_url?: string | undefined;
            id: number;
            members_url?: string | undefined;
            name: string;
            node_id?: string | undefined;
            parent?:
              | ({
                  description: string | null;
                  html_url: string;
                  id: number;
                  members_url: string;
                  name: string;
                  node_id: string;
                  permission: string;
                  privacy: "open" | "closed" | "secret";
                  repositories_url: string;
                  slug: string;
                  url: string;
                } | null)
              | undefined;
            permission?: string | undefined;
            privacy?: ("open" | "closed" | "secret") | undefined;
            repositories_url?: string | undefined;
            slug?: string | undefined;
            url?: string | undefined;
          }
      >;
      requested_teams: Array<{
        deleted?: boolean | undefined;
        description?: (string | null) | undefined;
        html_url?: string | undefined;
        id: number;
        members_url?: string | undefined;
        name: string;
        node_id?: string | undefined;
        parent?:
          | ({
              description: string | null;
              html_url: string;
              id: number;
              members_url: string;
              name: string;
              node_id: string;
              permission: string;
              privacy: "open" | "closed" | "secret";
              repositories_url: string;
              slug: string;
              url: string;
            } | null)
          | undefined;
        permission?: string | undefined;
        privacy?: ("open" | "closed" | "secret") | undefined;
        repositories_url?: string | undefined;
        slug?: string | undefined;
        url?: string | undefined;
      }>;
      review_comment_url: string;
      review_comments?: number | undefined;
      review_comments_url: string;
      state: "open" | "closed";
      statuses_url: string;
      title: string;
      updated_at: string;
      url: string;
      user: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
    };
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_push = {
    after: string;
    base_ref: webhooks_nullable_string;
    before: string;
    commits: Array<{
      added?: Array<string> | undefined;
      author: { date?: string | undefined; email: string | null; name: string; username?: string | undefined };
      committer: { date?: string | undefined; email: string | null; name: string; username?: string | undefined };
      distinct: boolean;
      id: string;
      message: string;
      modified?: Array<string> | undefined;
      removed?: Array<string> | undefined;
      timestamp: string;
      tree_id: string;
      url: string;
    }>;
    compare: string;
    created: boolean;
    deleted: boolean;
    enterprise?: enterprise_webhooks | undefined;
    forced: boolean;
    head_commit: {
      added?: Array<string> | undefined;
      author: { date?: string | undefined; email: string | null; name: string; username?: string | undefined };
      committer: { date?: string | undefined; email: string | null; name: string; username?: string | undefined };
      distinct: boolean;
      id: string;
      message: string;
      modified?: Array<string> | undefined;
      removed?: Array<string> | undefined;
      timestamp: string;
      tree_id: string;
      url: string;
    } | null;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    pusher: {
      date?: string | undefined;
      email?: (string | null) | undefined;
      name: string;
      username?: string | undefined;
    };
    ref: string;
    repository: {
      allow_auto_merge?: boolean | undefined;
      allow_forking?: boolean | undefined;
      allow_merge_commit?: boolean | undefined;
      allow_rebase_merge?: boolean | undefined;
      allow_squash_merge?: boolean | undefined;
      allow_update_branch?: boolean | undefined;
      archive_url: string;
      archived: boolean;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      clone_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      created_at: number | string;
      custom_properties?: Record<string, unknown> | undefined;
      default_branch: string;
      delete_branch_on_merge?: boolean | undefined;
      deployments_url: string;
      description: string | null;
      disabled?: boolean | undefined;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      has_downloads: boolean;
      has_issues: boolean;
      has_pages: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      has_discussions: boolean;
      homepage: string | null;
      hooks_url: string;
      html_url: string;
      id: number;
      is_template?: boolean | undefined;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      language: string | null;
      languages_url: string;
      license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
      master_branch?: string | undefined;
      merges_url: string;
      milestones_url: string;
      mirror_url: string | null;
      name: string;
      node_id: string;
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      organization?: string | undefined;
      owner: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      permissions?:
        | { admin: boolean; maintain?: boolean | undefined; pull: boolean; push: boolean; triage?: boolean | undefined }
        | undefined;
      private: boolean;
      public?: boolean | undefined;
      pulls_url: string;
      pushed_at: (number | string) | null;
      releases_url: string;
      role_name?: (string | null) | undefined;
      size: number;
      ssh_url: string;
      stargazers?: number | undefined;
      stargazers_count: number;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      svn_url: string;
      tags_url: string;
      teams_url: string;
      topics: Array<string>;
      trees_url: string;
      updated_at: string;
      url: string;
      visibility: "public" | "private" | "internal";
      watchers: number;
      watchers_count: number;
      web_commit_signoff_required?: boolean | undefined;
    };
    sender?: simple_user | undefined;
  };
  export type webhook_registry_package_published = {
    action: "published";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    registry_package: {
      created_at: string | null;
      description: string | null;
      ecosystem: string;
      html_url: string;
      id: number;
      name: string;
      namespace: string;
      owner: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
        user_view_type?: string | undefined;
      };
      package_type: string;
      package_version: {
        author?:
          | {
              avatar_url: string;
              events_url: string;
              followers_url: string;
              following_url: string;
              gists_url: string;
              gravatar_id: string;
              html_url: string;
              id: number;
              login: string;
              node_id: string;
              organizations_url: string;
              received_events_url: string;
              repos_url: string;
              site_admin: boolean;
              starred_url: string;
              subscriptions_url: string;
              type: string;
              url: string;
              user_view_type?: string | undefined;
            }
          | undefined;
        body?: (string | Record<string, unknown>) | undefined;
        body_html?: string | undefined;
        container_metadata?:
          | Partial<{
              labels: Record<string, unknown> | null;
              manifest: Record<string, unknown> | null;
              tag: Partial<{ digest: string; name: string }>;
            }>
          | undefined;
        created_at?: string | undefined;
        description: string;
        docker_metadata?: Array<Partial<{ tags: Array<string> }>> | undefined;
        draft?: boolean | undefined;
        html_url: string;
        id: number;
        installation_command: string;
        manifest?: string | undefined;
        metadata: Array<Record<string, unknown>>;
        name: string;
        npm_metadata?:
          | (Partial<{
              name: string;
              version: string;
              npm_user: string;
              author: (string | Record<string, unknown>) | null;
              bugs: (string | Record<string, unknown>) | null;
              dependencies: Record<string, unknown>;
              dev_dependencies: Record<string, unknown>;
              peer_dependencies: Record<string, unknown>;
              optional_dependencies: Record<string, unknown>;
              description: string;
              dist: (string | Record<string, unknown>) | null;
              git_head: string;
              homepage: string;
              license: string;
              main: string;
              repository: (string | Record<string, unknown>) | null;
              scripts: Record<string, unknown>;
              id: string;
              node_version: string;
              npm_version: string;
              has_shrinkwrap: boolean;
              maintainers: Array<string>;
              contributors: Array<string>;
              engines: Record<string, unknown>;
              keywords: Array<string>;
              files: Array<string>;
              bin: Record<string, unknown>;
              man: Record<string, unknown>;
              directories: (string | Record<string, unknown>) | null;
              os: Array<string>;
              cpu: Array<string>;
              readme: string;
              installation_command: string;
              release_id: number;
              commit_oid: string;
              published_via_actions: boolean;
              deleted_by_id: number;
            }> | null)
          | undefined;
        nuget_metadata?:
          | (Array<
              Partial<{
                id: (string | Record<string, unknown> | number) | null;
                name: string;
                value:
                  | boolean
                  | string
                  | number
                  | Partial<{ url: string; branch: string; commit: string; type: string }>;
              }>
            > | null)
          | undefined;
        package_files: Array<{
          content_type: string;
          created_at: string;
          download_url: string;
          id: number;
          md5: string | null;
          name: string;
          sha1: string | null;
          sha256: string | null;
          size: number;
          state: string | null;
          updated_at: string;
        }>;
        package_url: string;
        prerelease?: boolean | undefined;
        release?:
          | Partial<{
              author: Partial<{
                avatar_url: string;
                events_url: string;
                followers_url: string;
                following_url: string;
                gists_url: string;
                gravatar_id: string;
                html_url: string;
                id: number;
                login: string;
                node_id: string;
                organizations_url: string;
                received_events_url: string;
                repos_url: string;
                site_admin: boolean;
                starred_url: string;
                subscriptions_url: string;
                type: string;
                url: string;
                user_view_type: string;
              }>;
              created_at: string;
              draft: boolean;
              html_url: string;
              id: number;
              name: string | null;
              prerelease: boolean;
              published_at: string;
              tag_name: string;
              target_commitish: string;
              url: string;
            }>
          | undefined;
        rubygems_metadata?: Array<webhook_rubygems_metadata> | undefined;
        summary: string;
        tag_name?: string | undefined;
        target_commitish?: string | undefined;
        target_oid?: string | undefined;
        updated_at?: string | undefined;
        version: string;
      } | null;
      registry: Partial<{ about_url: string; name: string; type: string; url: string; vendor: string }> | null;
      updated_at: string | null;
    };
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_registry_package_updated = {
    action: "updated";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    registry_package: {
      created_at: string;
      description: unknown | null;
      ecosystem: string;
      html_url: string;
      id: number;
      name: string;
      namespace: string;
      owner: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
        user_view_type?: string | undefined;
      };
      package_type: string;
      package_version: {
        author: {
          avatar_url: string;
          events_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: string;
          html_url: string;
          id: number;
          login: string;
          node_id: string;
          organizations_url: string;
          received_events_url: string;
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          subscriptions_url: string;
          type: string;
          url: string;
          user_view_type?: string | undefined;
        };
        body: string;
        body_html: string;
        created_at: string;
        description: string;
        docker_metadata?: Array<Partial<{ tags: Array<string> }> | null> | undefined;
        draft?: boolean | undefined;
        html_url: string;
        id: number;
        installation_command: string;
        manifest?: string | undefined;
        metadata: Array<Record<string, unknown>>;
        name: string;
        package_files: Array<
          Partial<{
            content_type: string;
            created_at: string;
            download_url: string;
            id: number;
            md5: string | null;
            name: string;
            sha1: string | null;
            sha256: string;
            size: number;
            state: string;
            updated_at: string;
          }>
        >;
        package_url: string;
        prerelease?: boolean | undefined;
        release?:
          | {
              author: {
                avatar_url: string;
                events_url: string;
                followers_url: string;
                following_url: string;
                gists_url: string;
                gravatar_id: string;
                html_url: string;
                id: number;
                login: string;
                node_id: string;
                organizations_url: string;
                received_events_url: string;
                repos_url: string;
                site_admin: boolean;
                starred_url: string;
                subscriptions_url: string;
                type: string;
                url: string;
                user_view_type?: string | undefined;
              };
              created_at: string;
              draft: boolean;
              html_url: string;
              id: number;
              name: string;
              prerelease: boolean;
              published_at: string;
              tag_name: string;
              target_commitish: string;
              url: string;
            }
          | undefined;
        rubygems_metadata?: Array<webhook_rubygems_metadata> | undefined;
        summary: string;
        tag_name?: string | undefined;
        target_commitish: string;
        target_oid: string;
        updated_at: string;
        version: string;
      };
      registry: Record<string, unknown> | null;
      updated_at: string;
    };
    repository?: repository_webhooks | undefined;
    sender: simple_user;
  };
  export type webhook_release_created = {
    action: "created";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    release: webhooks_release;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_release_deleted = {
    action: "deleted";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    release: webhooks_release;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_release_edited = {
    action: "edited";
    changes: Partial<{
      body: { from: string };
      name: { from: string };
      tag_name: { from: string };
      make_latest: { to: boolean };
    }>;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    release: webhooks_release;
    repository: repository_webhooks;
    sender?: simple_user | undefined;
  };
  export type webhook_release_prereleased = {
    action: "prereleased";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    release: {
      assets: Array<{
        browser_download_url: string;
        content_type: string;
        created_at: string;
        download_count: number;
        id: number;
        label: string | null;
        name: string;
        node_id: string;
        size: number;
        digest: string | null;
        state: "uploaded";
        updated_at: string;
        uploader?:
          | ({
              avatar_url?: string | undefined;
              deleted?: boolean | undefined;
              email?: (string | null) | undefined;
              events_url?: string | undefined;
              followers_url?: string | undefined;
              following_url?: string | undefined;
              gists_url?: string | undefined;
              gravatar_id?: string | undefined;
              html_url?: string | undefined;
              id: number;
              login: string;
              name?: string | undefined;
              node_id?: string | undefined;
              organizations_url?: string | undefined;
              received_events_url?: string | undefined;
              repos_url?: string | undefined;
              site_admin?: boolean | undefined;
              starred_url?: string | undefined;
              subscriptions_url?: string | undefined;
              type?: ("Bot" | "User" | "Organization") | undefined;
              url?: string | undefined;
            } | null)
          | undefined;
        url: string;
      } | null>;
      assets_url: string;
      author: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      body: string | null;
      created_at: string | null;
      discussion_url?: string | undefined;
      draft: boolean;
      html_url: string;
      id: number;
      immutable: boolean;
      name: string | null;
      node_id: string;
      prerelease: true;
      published_at: string | null;
      reactions?:
        | {
            "+1": number;
            "-1": number;
            confused: number;
            eyes: number;
            heart: number;
            hooray: number;
            laugh: number;
            rocket: number;
            total_count: number;
            url: string;
          }
        | undefined;
      tag_name: string;
      tarball_url: string | null;
      target_commitish: string;
      upload_url: string;
      updated_at: string | null;
      url: string;
      zipball_url: string | null;
    };
    repository: repository_webhooks;
    sender?: simple_user | undefined;
  };
  export type webhook_release_published = {
    action: "published";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    release: webhooks_release_1;
    repository: repository_webhooks;
    sender?: simple_user | undefined;
  };
  export type webhook_release_released = {
    action: "released";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    release: webhooks_release;
    repository: repository_webhooks;
    sender?: simple_user | undefined;
  };
  export type webhook_release_unpublished = {
    action: "unpublished";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    release: webhooks_release_1;
    repository: repository_webhooks;
    sender?: simple_user | undefined;
  };
  export type webhook_repository_advisory_published = {
    action: "published";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    repository_advisory: repository_advisory;
    sender?: simple_user | undefined;
  };
  export type webhook_repository_advisory_reported = {
    action: "reported";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    repository_advisory: repository_advisory;
    sender?: simple_user | undefined;
  };
  export type webhook_repository_archived = {
    action: "archived";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_repository_created = {
    action: "created";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_repository_deleted = {
    action: "deleted";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_repository_dispatch_sample = {
    action: string;
    branch: string;
    client_payload: Record<string, unknown> | null;
    enterprise?: enterprise_webhooks | undefined;
    installation: simple_installation;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_repository_edited = {
    action: "edited";
    changes: Partial<{
      default_branch: { from: string };
      description: { from: string | null };
      homepage: { from: string | null };
      topics: Partial<{ from: Array<string> | null }>;
    }>;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_repository_import = {
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
    status: "success" | "cancelled" | "failure";
  };
  export type webhook_repository_privatized = {
    action: "privatized";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_repository_publicized = {
    action: "publicized";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_repository_renamed = {
    action: "renamed";
    changes: { repository: { name: { from: string } } };
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_repository_ruleset_created = {
    action: "created";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository?: repository_webhooks | undefined;
    repository_ruleset: repository_ruleset;
    sender: simple_user;
  };
  export type webhook_repository_ruleset_deleted = {
    action: "deleted";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository?: repository_webhooks | undefined;
    repository_ruleset: repository_ruleset;
    sender: simple_user;
  };
  export type webhook_repository_ruleset_edited = {
    action: "edited";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository?: repository_webhooks | undefined;
    repository_ruleset: repository_ruleset;
    changes?:
      | Partial<{
          name: Partial<{ from: string }>;
          enforcement: Partial<{ from: string }>;
          conditions: Partial<{
            added: Array<repository_ruleset_conditions>;
            deleted: Array<repository_ruleset_conditions>;
            updated: Array<
              Partial<{
                condition: repository_ruleset_conditions;
                changes: Partial<{
                  condition_type: Partial<{ from: string }>;
                  target: Partial<{ from: string }>;
                  include: Partial<{ from: Array<string> }>;
                  exclude: Partial<{ from: Array<string> }>;
                }>;
              }>
            >;
          }>;
          rules: Partial<{
            added: Array<repository_rule>;
            deleted: Array<repository_rule>;
            updated: Array<
              Partial<{
                rule: repository_rule;
                changes: Partial<{
                  configuration: Partial<{ from: string }>;
                  rule_type: Partial<{ from: string }>;
                  pattern: Partial<{ from: string }>;
                }>;
              }>
            >;
          }>;
        }>
      | undefined;
    sender: simple_user;
  };
  export type webhook_repository_transferred = {
    action: "transferred";
    changes: {
      owner: {
        from: Partial<{
          organization: {
            avatar_url: string;
            description: string | null;
            events_url: string;
            hooks_url: string;
            html_url?: string | undefined;
            id: number;
            issues_url: string;
            login: string;
            members_url: string;
            node_id: string;
            public_members_url: string;
            repos_url: string;
            url: string;
          };
          user: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
        }>;
      };
    };
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_repository_unarchived = {
    action: "unarchived";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_repository_vulnerability_alert_create = {
    action: "create";
    alert: webhooks_alert;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_repository_vulnerability_alert_dismiss = {
    action: "dismiss";
    alert: {
      affected_package_name: string;
      affected_range: string;
      created_at: string;
      dismiss_comment?: (string | null) | undefined;
      dismiss_reason: string;
      dismissed_at: string;
      dismisser: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      external_identifier: string;
      external_reference: string | null;
      fix_reason?: string | undefined;
      fixed_at?: string | undefined;
      fixed_in?: string | undefined;
      ghsa_id: string;
      id: number;
      node_id: string;
      number: number;
      severity: string;
      state: "dismissed";
    };
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_repository_vulnerability_alert_reopen = {
    action: "reopen";
    alert: webhooks_alert;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_repository_vulnerability_alert_resolve = {
    action: "resolve";
    alert: {
      affected_package_name: string;
      affected_range: string;
      created_at: string;
      dismiss_reason?: string | undefined;
      dismissed_at?: string | undefined;
      dismisser?:
        | ({
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
          } | null)
        | undefined;
      external_identifier: string;
      external_reference: string | null;
      fix_reason?: string | undefined;
      fixed_at?: string | undefined;
      fixed_in?: string | undefined;
      ghsa_id: string;
      id: number;
      node_id: string;
      number: number;
      severity: string;
      state: "fixed" | "open";
    };
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_secret_scanning_alert_created = {
    action: "created";
    alert: secret_scanning_alert_webhook;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender?: simple_user | undefined;
  };
  export type webhook_secret_scanning_alert_location_created = {
    action?: "created" | undefined;
    alert: secret_scanning_alert_webhook;
    installation?: simple_installation | undefined;
    location: secret_scanning_location;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_secret_scanning_alert_location_created_form_encoded = { payload: string };
  export type webhook_secret_scanning_alert_publicly_leaked = {
    action: "publicly_leaked";
    alert: secret_scanning_alert_webhook;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender?: simple_user | undefined;
  };
  export type webhook_secret_scanning_alert_reopened = {
    action: "reopened";
    alert: secret_scanning_alert_webhook;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender?: simple_user | undefined;
  };
  export type webhook_secret_scanning_alert_resolved = {
    action: "resolved";
    alert: secret_scanning_alert_webhook;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender?: simple_user | undefined;
  };
  export type webhook_secret_scanning_alert_validated = {
    action: "validated";
    alert: secret_scanning_alert_webhook;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender?: simple_user | undefined;
  };
  export type webhook_secret_scanning_scan_completed = {
    action: "completed";
    type: "backfill" | "custom-pattern-backfill" | "pattern-version-backfill";
    source: "git" | "issues" | "pull-requests" | "discussions" | "wiki";
    started_at: string;
    completed_at: string;
    secret_types?: (Array<string> | null) | undefined;
    custom_pattern_name?: (string | null) | undefined;
    custom_pattern_scope?: (("repository" | "organization" | "enterprise") | null) | undefined;
    repository?: repository_webhooks | undefined;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    sender?: simple_user | undefined;
  };
  export type webhook_security_advisory_published = {
    action: "published";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository?: repository_webhooks | undefined;
    security_advisory: webhooks_security_advisory;
    sender?: simple_user | undefined;
  };
  export type webhook_security_advisory_updated = {
    action: "updated";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository?: repository_webhooks | undefined;
    security_advisory: webhooks_security_advisory;
    sender?: simple_user | undefined;
  };
  export type webhook_security_advisory_withdrawn = {
    action: "withdrawn";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository?: repository_webhooks | undefined;
    security_advisory: {
      cvss: { score: number; vector_string: string | null };
      cvss_severities?: cvss_severities | undefined;
      cwes: Array<{ cwe_id: string; name: string }>;
      description: string;
      ghsa_id: string;
      identifiers: Array<{ type: string; value: string }>;
      published_at: string;
      references: Array<{ url: string }>;
      severity: string;
      summary: string;
      updated_at: string;
      vulnerabilities: Array<{
        first_patched_version: { identifier: string } | null;
        package: { ecosystem: string; name: string };
        severity: string;
        vulnerable_version_range: string;
      }>;
      withdrawn_at: string;
    };
    sender?: simple_user | undefined;
  };
  export type webhook_security_and_analysis = {
    changes: Partial<{ from: Partial<{ security_and_analysis: security_and_analysis }> }>;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: full_repository;
    sender?: simple_user | undefined;
  };
  export type webhook_sponsorship_cancelled = {
    action: "cancelled";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
    sponsorship: webhooks_sponsorship;
  };
  export type webhook_sponsorship_created = {
    action: "created";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
    sponsorship: webhooks_sponsorship;
  };
  export type webhook_sponsorship_edited = {
    action: "edited";
    changes: Partial<{ privacy_level: { from: string } }>;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
    sponsorship: webhooks_sponsorship;
  };
  export type webhook_sponsorship_pending_cancellation = {
    action: "pending_cancellation";
    effective_date?: webhooks_effective_date | undefined;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
    sponsorship: webhooks_sponsorship;
  };
  export type webhook_sponsorship_pending_tier_change = {
    action: "pending_tier_change";
    changes: webhooks_changes_8;
    effective_date?: webhooks_effective_date | undefined;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
    sponsorship: webhooks_sponsorship;
  };
  export type webhook_sponsorship_tier_changed = {
    action: "tier_changed";
    changes: webhooks_changes_8;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository?: repository_webhooks | undefined;
    sender: simple_user;
    sponsorship: webhooks_sponsorship;
  };
  export type webhook_star_created = {
    action: "created";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
    starred_at: string | null;
  };
  export type webhook_star_deleted = {
    action: "deleted";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
    starred_at: unknown | null;
  };
  export type webhook_status = {
    avatar_url?: (string | null) | undefined;
    branches: Array<{ commit: { sha: string | null; url: string | null }; name: string; protected: boolean }>;
    commit: {
      author: Partial<{
        avatar_url: string;
        deleted: boolean;
        email: string | null;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        login: string;
        name: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: "Bot" | "User" | "Organization";
        url: string;
      }> | null;
      comments_url: string;
      commit: {
        author: { date?: string | undefined; email: string | null; name: string; username?: string | undefined } & {
          date: string;
          email?: string | undefined;
          name?: string | undefined;
        };
        comment_count: number;
        committer: { date?: string | undefined; email: string | null; name: string; username?: string | undefined } & {
          date: string;
          email?: string | undefined;
          name?: string | undefined;
        };
        message: string;
        tree: { sha: string; url: string };
        url: string;
        verification: {
          payload: string | null;
          reason:
            | "expired_key"
            | "not_signing_key"
            | "gpgverify_error"
            | "gpgverify_unavailable"
            | "unsigned"
            | "unknown_signature_type"
            | "no_user"
            | "unverified_email"
            | "bad_email"
            | "unknown_key"
            | "malformed_signature"
            | "invalid"
            | "valid"
            | "bad_cert"
            | "ocsp_pending";
          signature: string | null;
          verified: boolean;
          verified_at: string | null;
        };
      };
      committer: Partial<{
        avatar_url: string;
        deleted: boolean;
        email: string | null;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        login: string;
        name: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: "Bot" | "User" | "Organization";
        url: string;
      }> | null;
      html_url: string;
      node_id: string;
      parents: Array<{ html_url: string; sha: string; url: string }>;
      sha: string;
      url: string;
    };
    context: string;
    created_at: string;
    description: string | null;
    enterprise?: enterprise_webhooks | undefined;
    id: number;
    installation?: simple_installation | undefined;
    name: string;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
    sha: string;
    state: "pending" | "success" | "failure" | "error";
    target_url: string | null;
    updated_at: string;
  };
  export type webhook_sub_issues_parent_issue_added = {
    action: "parent_issue_added";
    parent_issue_id: number;
    parent_issue: issue;
    parent_issue_repo: repository;
    sub_issue_id: number;
    sub_issue: issue;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository?: repository_webhooks | undefined;
    sender?: simple_user | undefined;
  };
  export type webhook_sub_issues_parent_issue_removed = {
    action: "parent_issue_removed";
    parent_issue_id: number;
    parent_issue: issue;
    parent_issue_repo: repository;
    sub_issue_id: number;
    sub_issue: issue;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository?: repository_webhooks | undefined;
    sender?: simple_user | undefined;
  };
  export type webhook_sub_issues_sub_issue_added = {
    action: "sub_issue_added";
    sub_issue_id: number;
    sub_issue: issue;
    sub_issue_repo: repository;
    parent_issue_id: number;
    parent_issue: issue;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository?: repository_webhooks | undefined;
    sender?: simple_user | undefined;
  };
  export type webhook_sub_issues_sub_issue_removed = {
    action: "sub_issue_removed";
    sub_issue_id: number;
    sub_issue: issue;
    sub_issue_repo: repository;
    parent_issue_id: number;
    parent_issue: issue;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository?: repository_webhooks | undefined;
    sender?: simple_user | undefined;
  };
  export type webhook_team_add = {
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
    team: webhooks_team_1;
  };
  export type webhook_team_added_to_repository = {
    action: "added_to_repository";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    repository?:
      | {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          custom_properties?: Record<string, unknown> | undefined;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
        }
      | undefined;
    sender?: simple_user | undefined;
    team: webhooks_team_1;
  };
  export type webhook_team_created = {
    action: "created";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    repository?:
      | {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          custom_properties?: Record<string, unknown> | undefined;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
        }
      | undefined;
    sender: simple_user;
    team: webhooks_team_1;
  };
  export type webhook_team_deleted = {
    action: "deleted";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    repository?:
      | {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          custom_properties?: Record<string, unknown> | undefined;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
        }
      | undefined;
    sender?: simple_user | undefined;
    team: webhooks_team_1;
  };
  export type webhook_team_edited = {
    action: "edited";
    changes: Partial<{
      description: { from: string };
      name: { from: string };
      privacy: { from: string };
      notification_setting: { from: string };
      repository: { permissions: { from: Partial<{ admin: boolean; pull: boolean; push: boolean }> } };
    }>;
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    repository?:
      | {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          custom_properties?: Record<string, unknown> | undefined;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
        }
      | undefined;
    sender: simple_user;
    team: webhooks_team_1;
  };
  export type webhook_team_removed_from_repository = {
    action: "removed_from_repository";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization: organization_simple_webhooks;
    repository?:
      | {
          allow_auto_merge?: boolean | undefined;
          allow_forking?: boolean | undefined;
          allow_merge_commit?: boolean | undefined;
          allow_rebase_merge?: boolean | undefined;
          allow_squash_merge?: boolean | undefined;
          allow_update_branch?: boolean | undefined;
          archive_url: string;
          archived: boolean;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          clone_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          created_at: number | string;
          custom_properties?: Record<string, unknown> | undefined;
          default_branch: string;
          delete_branch_on_merge?: boolean | undefined;
          deployments_url: string;
          description: string | null;
          disabled?: boolean | undefined;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks: number;
          forks_count: number;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_pages: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          homepage: string | null;
          hooks_url: string;
          html_url: string;
          id: number;
          is_template?: boolean | undefined;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          language: string | null;
          languages_url: string;
          license: { key: string; name: string; node_id: string; spdx_id: string; url: string | null } | null;
          master_branch?: string | undefined;
          merges_url: string;
          milestones_url: string;
          mirror_url: string | null;
          name: string;
          node_id: string;
          notifications_url: string;
          open_issues: number;
          open_issues_count: number;
          organization?: string | undefined;
          owner: {
            avatar_url?: string | undefined;
            deleted?: boolean | undefined;
            email?: (string | null) | undefined;
            events_url?: string | undefined;
            followers_url?: string | undefined;
            following_url?: string | undefined;
            gists_url?: string | undefined;
            gravatar_id?: string | undefined;
            html_url?: string | undefined;
            id: number;
            login: string;
            name?: string | undefined;
            node_id?: string | undefined;
            organizations_url?: string | undefined;
            received_events_url?: string | undefined;
            repos_url?: string | undefined;
            site_admin?: boolean | undefined;
            starred_url?: string | undefined;
            subscriptions_url?: string | undefined;
            type?: ("Bot" | "User" | "Organization") | undefined;
            url?: string | undefined;
            user_view_type?: string | undefined;
          } | null;
          permissions?:
            | {
                admin: boolean;
                maintain?: boolean | undefined;
                pull: boolean;
                push: boolean;
                triage?: boolean | undefined;
              }
            | undefined;
          private: boolean;
          public?: boolean | undefined;
          pulls_url: string;
          pushed_at: (number | string) | null;
          releases_url: string;
          role_name?: (string | null) | undefined;
          size: number;
          ssh_url: string;
          stargazers?: number | undefined;
          stargazers_count: number;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          svn_url: string;
          tags_url: string;
          teams_url: string;
          topics: Array<string>;
          trees_url: string;
          updated_at: string;
          url: string;
          visibility: "public" | "private" | "internal";
          watchers: number;
          watchers_count: number;
        }
      | undefined;
    sender: simple_user;
    team: webhooks_team_1;
  };
  export type webhook_watch_started = {
    action: "started";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
  };
  export type webhook_workflow_dispatch = {
    enterprise?: enterprise_webhooks | undefined;
    inputs: Record<string, unknown> | null;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    ref: string;
    repository: repository_webhooks;
    sender: simple_user;
    workflow: string;
  };
  export type webhook_workflow_job_completed = {
    action: "completed";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
    workflow_job: {
      check_run_url: string;
      completed_at: string | null;
      conclusion:
        | ("success" | "failure" | "null" | "skipped" | "cancelled" | "action_required" | "neutral" | "timed_out")
        | null;
      created_at: string;
      head_sha: string;
      html_url: string;
      id: number;
      labels: Array<string>;
      name: string;
      node_id: string;
      run_attempt: number;
      run_id: number;
      run_url: string;
      runner_group_id: number | null;
      runner_group_name: string | null;
      runner_id: number | null;
      runner_name: string | null;
      started_at: string;
      status: "queued" | "in_progress" | "completed" | "waiting";
      head_branch: string | null;
      workflow_name: string | null;
      steps: Array<{
        completed_at: string | null;
        conclusion: ("failure" | "skipped" | "success" | "cancelled" | "null") | null;
        name: string;
        number: number;
        started_at: string | null;
        status: "in_progress" | "completed" | "queued";
      }>;
      url: string;
    } & {
      check_run_url?: string | undefined;
      completed_at?: string | undefined;
      conclusion: "success" | "failure" | "skipped" | "cancelled" | "action_required" | "neutral" | "timed_out";
      created_at?: string | undefined;
      head_sha?: string | undefined;
      html_url?: string | undefined;
      id?: number | undefined;
      labels?: Array<string | null> | undefined;
      name?: string | undefined;
      node_id?: string | undefined;
      run_attempt?: number | undefined;
      run_id?: number | undefined;
      run_url?: string | undefined;
      runner_group_id?: (number | null) | undefined;
      runner_group_name?: (string | null) | undefined;
      runner_id?: (number | null) | undefined;
      runner_name?: (string | null) | undefined;
      started_at?: string | undefined;
      status?: string | undefined;
      head_branch?: (string | null) | undefined;
      workflow_name?: (string | null) | undefined;
      steps?: Array<Record<string, unknown> | null> | undefined;
      url?: string | undefined;
    };
    deployment?: deployment | undefined;
  };
  export type webhook_workflow_job_in_progress = {
    action: "in_progress";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
    workflow_job: {
      check_run_url: string;
      completed_at: string | null;
      conclusion: ("success" | "failure" | "null" | "cancelled" | "neutral") | null;
      created_at: string;
      head_sha: string;
      html_url: string;
      id: number;
      labels: Array<string>;
      name: string;
      node_id: string;
      run_attempt: number;
      run_id: number;
      run_url: string;
      runner_group_id: number | null;
      runner_group_name: string | null;
      runner_id: number | null;
      runner_name: string | null;
      started_at: string;
      status: "queued" | "in_progress" | "completed";
      head_branch: string | null;
      workflow_name: string | null;
      steps: Array<{
        completed_at: string | null;
        conclusion: ("failure" | "skipped" | "success" | "null" | "cancelled") | null;
        name: string;
        number: number;
        started_at: string | null;
        status: "in_progress" | "completed" | "queued" | "pending";
      }>;
      url: string;
    } & {
      check_run_url?: string | undefined;
      completed_at?: (string | null) | undefined;
      conclusion?: (string | null) | undefined;
      created_at?: string | undefined;
      head_sha?: string | undefined;
      html_url?: string | undefined;
      id?: number | undefined;
      labels?: Array<string> | undefined;
      name?: string | undefined;
      node_id?: string | undefined;
      run_attempt?: number | undefined;
      run_id?: number | undefined;
      run_url?: string | undefined;
      runner_group_id?: (number | null) | undefined;
      runner_group_name?: (string | null) | undefined;
      runner_id?: (number | null) | undefined;
      runner_name?: (string | null) | undefined;
      started_at?: string | undefined;
      status: "in_progress" | "completed" | "queued";
      head_branch?: (string | null) | undefined;
      workflow_name?: (string | null) | undefined;
      steps: Array<{
        completed_at: string | null;
        conclusion: string | null;
        name: string;
        number: number;
        started_at: string | null;
        status: "in_progress" | "completed" | "pending" | "queued";
      }>;
      url?: string | undefined;
    };
    deployment?: deployment | undefined;
  };
  export type webhook_workflow_job_queued = {
    action: "queued";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
    workflow_job: {
      check_run_url: string;
      completed_at: string | null;
      conclusion: string | null;
      created_at: string;
      head_sha: string;
      html_url: string;
      id: number;
      labels: Array<string>;
      name: string;
      node_id: string;
      run_attempt: number;
      run_id: number;
      run_url: string;
      runner_group_id: number | null;
      runner_group_name: string | null;
      runner_id: number | null;
      runner_name: string | null;
      started_at: string;
      status: "queued" | "in_progress" | "completed" | "waiting";
      head_branch: string | null;
      workflow_name: string | null;
      steps: Array<{
        completed_at: string | null;
        conclusion: ("failure" | "skipped" | "success" | "cancelled" | "null") | null;
        name: string;
        number: number;
        started_at: string | null;
        status: "completed" | "in_progress" | "queued" | "pending";
      }>;
      url: string;
    };
    deployment?: deployment | undefined;
  };
  export type webhook_workflow_job_waiting = {
    action: "waiting";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
    workflow_job: {
      check_run_url: string;
      completed_at: string | null;
      conclusion: string | null;
      created_at: string;
      head_sha: string;
      html_url: string;
      id: number;
      labels: Array<string>;
      name: string;
      node_id: string;
      run_attempt: number;
      run_id: number;
      run_url: string;
      runner_group_id: number | null;
      runner_group_name: string | null;
      runner_id: number | null;
      runner_name: string | null;
      started_at: string;
      head_branch: string | null;
      workflow_name: string | null;
      status: "queued" | "in_progress" | "completed" | "waiting";
      steps: Array<{
        completed_at: string | null;
        conclusion: ("failure" | "skipped" | "success" | "cancelled" | "null") | null;
        name: string;
        number: number;
        started_at: string | null;
        status: "completed" | "in_progress" | "queued" | "pending" | "waiting";
      }>;
      url: string;
    };
    deployment?: deployment | undefined;
  };
  export type webhook_workflow_run_completed = {
    action: "completed";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
    workflow: webhooks_workflow;
    workflow_run: {
      actor: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      artifacts_url: string;
      cancel_url: string;
      check_suite_id: number;
      check_suite_node_id: string;
      check_suite_url: string;
      conclusion:
        | (
            | "action_required"
            | "cancelled"
            | "failure"
            | "neutral"
            | "skipped"
            | "stale"
            | "success"
            | "timed_out"
            | "startup_failure"
          )
        | null;
      created_at: string;
      event: string;
      head_branch: string | null;
      head_commit: {
        author: { date?: string | undefined; email: string | null; name: string; username?: string | undefined };
        committer: { date?: string | undefined; email: string | null; name: string; username?: string | undefined };
        id: string;
        message: string;
        timestamp: string;
        tree_id: string;
      };
      head_repository: {
        archive_url: string;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        deployments_url: string;
        description: string | null;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        hooks_url: string;
        html_url: string;
        id: number;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        languages_url: string;
        merges_url: string;
        milestones_url: string;
        name: string;
        node_id: string;
        notifications_url: string;
        owner: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        private: boolean;
        pulls_url: string;
        releases_url: string;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        tags_url: string;
        teams_url: string;
        trees_url: string;
        url: string;
      };
      head_sha: string;
      html_url: string;
      id: number;
      jobs_url: string;
      logs_url: string;
      name: string | null;
      node_id: string;
      path: string;
      previous_attempt_url: string | null;
      pull_requests: Array<{
        base: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        head: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        id: number;
        number: number;
        url: string;
      } | null>;
      referenced_workflows?: (Array<{ path: string; ref?: string | undefined; sha: string }> | null) | undefined;
      repository: {
        archive_url: string;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        deployments_url: string;
        description: string | null;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        hooks_url: string;
        html_url: string;
        id: number;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        languages_url: string;
        merges_url: string;
        milestones_url: string;
        name: string;
        node_id: string;
        notifications_url: string;
        owner: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        private: boolean;
        pulls_url: string;
        releases_url: string;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        tags_url: string;
        teams_url: string;
        trees_url: string;
        url: string;
      };
      rerun_url: string;
      run_attempt: number;
      run_number: number;
      run_started_at: string;
      status: "requested" | "in_progress" | "completed" | "queued" | "pending" | "waiting";
      triggering_actor: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      updated_at: string;
      url: string;
      workflow_id: number;
      workflow_url: string;
      display_title?: string | undefined;
    };
  };
  export type webhook_workflow_run_in_progress = {
    action: "in_progress";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
    workflow: webhooks_workflow;
    workflow_run: {
      actor: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
      } | null;
      artifacts_url: string;
      cancel_url: string;
      check_suite_id: number;
      check_suite_node_id: string;
      check_suite_url: string;
      conclusion:
        | ("action_required" | "cancelled" | "failure" | "neutral" | "skipped" | "stale" | "success" | "timed_out")
        | null;
      created_at: string;
      event: string;
      head_branch: string | null;
      head_commit: {
        author: { date?: string | undefined; email: string | null; name: string; username?: string | undefined };
        committer: { date?: string | undefined; email: string | null; name: string; username?: string | undefined };
        id: string;
        message: string;
        timestamp: string;
        tree_id: string;
      };
      head_repository: {
        archive_url: string;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        deployments_url: string;
        description: string | null;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        hooks_url: string;
        html_url: string;
        id: number;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        languages_url: string;
        merges_url: string;
        milestones_url: string;
        name: string | null;
        node_id: string;
        notifications_url: string;
        owner: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
        } | null;
        private: boolean;
        pulls_url: string;
        releases_url: string;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        tags_url: string;
        teams_url: string;
        trees_url: string;
        url: string;
      };
      head_sha: string;
      html_url: string;
      id: number;
      jobs_url: string;
      logs_url: string;
      name: string | null;
      node_id: string;
      path: string;
      previous_attempt_url: string | null;
      pull_requests: Array<{
        base: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        head: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        id: number;
        number: number;
        url: string;
      } | null>;
      referenced_workflows?: (Array<{ path: string; ref?: string | undefined; sha: string }> | null) | undefined;
      repository: {
        archive_url: string;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        deployments_url: string;
        description: string | null;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        hooks_url: string;
        html_url: string;
        id: number;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        languages_url: string;
        merges_url: string;
        milestones_url: string;
        name: string;
        node_id: string;
        notifications_url: string;
        owner: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
        } | null;
        private: boolean;
        pulls_url: string;
        releases_url: string;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        tags_url: string;
        teams_url: string;
        trees_url: string;
        url: string;
      };
      rerun_url: string;
      run_attempt: number;
      run_number: number;
      run_started_at: string;
      status: "requested" | "in_progress" | "completed" | "queued" | "pending";
      triggering_actor: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
      } | null;
      updated_at: string;
      url: string;
      workflow_id: number;
      workflow_url: string;
    };
  };
  export type webhook_workflow_run_requested = {
    action: "requested";
    enterprise?: enterprise_webhooks | undefined;
    installation?: simple_installation | undefined;
    organization?: organization_simple_webhooks | undefined;
    repository: repository_webhooks;
    sender: simple_user;
    workflow: webhooks_workflow;
    workflow_run: {
      actor: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      artifacts_url: string;
      cancel_url: string;
      check_suite_id: number;
      check_suite_node_id: string;
      check_suite_url: string;
      conclusion:
        | (
            | "success"
            | "failure"
            | "neutral"
            | "cancelled"
            | "timed_out"
            | "action_required"
            | "stale"
            | "null"
            | "skipped"
            | "startup_failure"
          )
        | null;
      created_at: string;
      event: string;
      head_branch: string | null;
      head_commit: {
        author: { date?: string | undefined; email: string | null; name: string; username?: string | undefined };
        committer: { date?: string | undefined; email: string | null; name: string; username?: string | undefined };
        id: string;
        message: string;
        timestamp: string;
        tree_id: string;
      };
      head_repository: {
        archive_url: string;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        deployments_url: string;
        description: string | null;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        hooks_url: string;
        html_url: string;
        id: number;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        languages_url: string;
        merges_url: string;
        milestones_url: string;
        name: string;
        node_id: string;
        notifications_url: string;
        owner: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        private: boolean;
        pulls_url: string;
        releases_url: string;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        tags_url: string;
        teams_url: string;
        trees_url: string;
        url: string;
      };
      head_sha: string;
      html_url: string;
      id: number;
      jobs_url: string;
      logs_url: string;
      name: string | null;
      node_id: string;
      path: string;
      previous_attempt_url: string | null;
      pull_requests: Array<{
        base: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        head: { ref: string; repo: { id: number; name: string; url: string }; sha: string };
        id: number;
        number: number;
        url: string;
      }>;
      referenced_workflows?: (Array<{ path: string; ref?: string | undefined; sha: string }> | null) | undefined;
      repository: {
        archive_url: string;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        deployments_url: string;
        description: string | null;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        hooks_url: string;
        html_url: string;
        id: number;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        languages_url: string;
        merges_url: string;
        milestones_url: string;
        name: string;
        node_id: string;
        notifications_url: string;
        owner: {
          avatar_url?: string | undefined;
          deleted?: boolean | undefined;
          email?: (string | null) | undefined;
          events_url?: string | undefined;
          followers_url?: string | undefined;
          following_url?: string | undefined;
          gists_url?: string | undefined;
          gravatar_id?: string | undefined;
          html_url?: string | undefined;
          id: number;
          login: string;
          name?: string | undefined;
          node_id?: string | undefined;
          organizations_url?: string | undefined;
          received_events_url?: string | undefined;
          repos_url?: string | undefined;
          site_admin?: boolean | undefined;
          starred_url?: string | undefined;
          subscriptions_url?: string | undefined;
          type?: ("Bot" | "User" | "Organization") | undefined;
          url?: string | undefined;
          user_view_type?: string | undefined;
        } | null;
        private: boolean;
        pulls_url: string;
        releases_url: string;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        tags_url: string;
        teams_url: string;
        trees_url: string;
        url: string;
      };
      rerun_url: string;
      run_attempt: number;
      run_number: number;
      run_started_at: string;
      status: "requested" | "in_progress" | "completed" | "queued" | "pending" | "waiting";
      triggering_actor: {
        avatar_url?: string | undefined;
        deleted?: boolean | undefined;
        email?: (string | null) | undefined;
        events_url?: string | undefined;
        followers_url?: string | undefined;
        following_url?: string | undefined;
        gists_url?: string | undefined;
        gravatar_id?: string | undefined;
        html_url?: string | undefined;
        id: number;
        login: string;
        name?: string | undefined;
        node_id?: string | undefined;
        organizations_url?: string | undefined;
        received_events_url?: string | undefined;
        repos_url?: string | undefined;
        site_admin?: boolean | undefined;
        starred_url?: string | undefined;
        subscriptions_url?: string | undefined;
        type?: ("Bot" | "User" | "Organization") | undefined;
        url?: string | undefined;
        user_view_type?: string | undefined;
      } | null;
      updated_at: string;
      url: string;
      workflow_id: number;
      workflow_url: string;
      display_title: string;
    };
  };

  // </Schemas>
}

export namespace Endpoints {
  // <Endpoints>

  export type get_Meta_root = {
    method: "GET";
    path: "/";
    requestFormat: "json";
    parameters: never;
    responses: { 200: Schemas.root };
  };
  export type get_Security__advisories_list__global__advisories = {
    method: "GET";
    path: "/advisories";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        ghsa_id: string;
        type: "reviewed" | "malware" | "unreviewed";
        cve_id: string;
        ecosystem:
          | "rubygems"
          | "npm"
          | "pip"
          | "maven"
          | "nuget"
          | "composer"
          | "go"
          | "rust"
          | "erlang"
          | "actions"
          | "pub"
          | "other"
          | "swift";
        severity: "unknown" | "low" | "medium" | "high" | "critical";
        cwes: string | Array<string>;
        is_withdrawn: boolean;
        affects: string | Array<string>;
        published: string;
        updated: string;
        modified: string;
        epss_percentage: string;
        epss_percentile: string;
        before: string;
        after: string;
        direction: "asc" | "desc";
        per_page: number;
        sort: "updated" | "published" | "epss_percentage" | "epss_percentile";
      }>;
    };
    responses: { 200: Array<Schemas.global_advisory>; 422: Schemas.validation_error_simple; 429: Schemas.basic_error };
  };
  export type get_Security__advisories_get__global__advisory = {
    method: "GET";
    path: "/advisories/{ghsa_id}";
    requestFormat: "json";
    parameters: {
      path: { ghsa_id: string };
    };
    responses: { 200: Schemas.global_advisory; 404: Schemas.basic_error };
  };
  export type get_Apps_get__authenticated = {
    method: "GET";
    path: "/app";
    requestFormat: "json";
    parameters: never;
    responses: { 200: Schemas.integration };
  };
  export type post_Apps_create__from__manifest = {
    method: "POST";
    path: "/app-manifests/{code}/conversions";
    requestFormat: "json";
    parameters: {
      path: { code: string };
    };
    responses: {
      201: Schemas.integration &
        ({ client_id: string; client_secret: string; webhook_secret: string | null; pem: string } & Record<
          string,
          any
        >);
      404: Schemas.basic_error;
      422: Schemas.validation_error_simple;
    };
  };
  export type get_Apps_get__webhook__config__for__app = {
    method: "GET";
    path: "/app/hook/config";
    requestFormat: "json";
    parameters: never;
    responses: { 200: Schemas.webhook_config };
  };
  export type patch_Apps_update__webhook__config__for__app = {
    method: "PATCH";
    path: "/app/hook/config";
    requestFormat: "json";
    parameters: {
      body: Partial<{
        url: Schemas.webhook_config_url;
        content_type: Schemas.webhook_config_content_type;
        secret: Schemas.webhook_config_secret;
        insecure_ssl: Schemas.webhook_config_insecure_ssl;
      }>;
    };
    responses: { 200: Schemas.webhook_config };
  };
  export type get_Apps_list__webhook__deliveries = {
    method: "GET";
    path: "/app/hook/deliveries";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; cursor: string }>;
    };
    responses: { 200: Array<Schemas.hook_delivery_item>; 400: Schemas.scim_error; 422: Schemas.validation_error };
  };
  export type get_Apps_get__webhook__delivery = {
    method: "GET";
    path: "/app/hook/deliveries/{delivery_id}";
    requestFormat: "json";
    parameters: {
      path: { delivery_id: number };
    };
    responses: { 200: Schemas.hook_delivery; 400: Schemas.scim_error; 422: Schemas.validation_error };
  };
  export type post_Apps_redeliver__webhook__delivery = {
    method: "POST";
    path: "/app/hook/deliveries/{delivery_id}/attempts";
    requestFormat: "json";
    parameters: {
      path: { delivery_id: number };
    };
    responses: { 202: Record<string, unknown>; 400: Schemas.scim_error; 422: Schemas.validation_error };
  };
  export type get_Apps_list__installation__requests__for__authenticated__app = {
    method: "GET";
    path: "/app/installation-requests";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: { 200: Array<Schemas.integration_installation_request>; 304: unknown; 401: Schemas.basic_error };
  };
  export type get_Apps_list__installations = {
    method: "GET";
    path: "/app/installations";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number; since: string; outdated: string }>;
    };
    responses: { 200: Array<Schemas.installation> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Apps_get__installation = {
    method: "GET";
    path: "/app/installations/{installation_id}";
    requestFormat: "json";
    parameters: {
      path: { installation_id: number };
    };
    responses: { 200: Schemas.installation; 404: Schemas.basic_error };
  };
  export type delete_Apps_delete__installation = {
    method: "DELETE";
    path: "/app/installations/{installation_id}";
    requestFormat: "json";
    parameters: {
      path: { installation_id: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type post_Apps_create__installation__access__token = {
    method: "POST";
    path: "/app/installations/{installation_id}/access_tokens";
    requestFormat: "json";
    parameters: {
      path: { installation_id: number };

      body: Partial<{
        repositories: Array<string>;
        repository_ids: Array<number>;
        permissions: Schemas.app_permissions;
      }>;
    };
    responses: {
      201: Schemas.installation_token;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type put_Apps_suspend__installation = {
    method: "PUT";
    path: "/app/installations/{installation_id}/suspended";
    requestFormat: "json";
    parameters: {
      path: { installation_id: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type delete_Apps_unsuspend__installation = {
    method: "DELETE";
    path: "/app/installations/{installation_id}/suspended";
    requestFormat: "json";
    parameters: {
      path: { installation_id: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type delete_Apps_delete__authorization = {
    method: "DELETE";
    path: "/applications/{client_id}/grant";
    requestFormat: "json";
    parameters: {
      path: { client_id: string };

      body: { access_token: string };
    };
    responses: { 204: unknown; 422: Schemas.validation_error };
  };
  export type post_Apps_check__token = {
    method: "POST";
    path: "/applications/{client_id}/token";
    requestFormat: "json";
    parameters: {
      path: { client_id: string };

      body: { access_token: string };
    };
    responses: { 200: Schemas.authorization; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type patch_Apps_reset__token = {
    method: "PATCH";
    path: "/applications/{client_id}/token";
    requestFormat: "json";
    parameters: {
      path: { client_id: string };

      body: { access_token: string };
    };
    responses: { 200: Schemas.authorization; 422: Schemas.validation_error };
  };
  export type delete_Apps_delete__token = {
    method: "DELETE";
    path: "/applications/{client_id}/token";
    requestFormat: "json";
    parameters: {
      path: { client_id: string };

      body: { access_token: string };
    };
    responses: { 204: unknown; 422: Schemas.validation_error };
  };
  export type post_Apps_scope__token = {
    method: "POST";
    path: "/applications/{client_id}/token/scoped";
    requestFormat: "json";
    parameters: {
      path: { client_id: string };

      body: {
        access_token: string;
        target?: string | undefined;
        target_id?: number | undefined;
        repositories?: Array<string> | undefined;
        repository_ids?: Array<number> | undefined;
        permissions?: Schemas.app_permissions | undefined;
      };
    };
    responses: {
      200: Schemas.authorization;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Apps_get__by__slug = {
    method: "GET";
    path: "/apps/{app_slug}";
    requestFormat: "json";
    parameters: {
      path: { app_slug: string };
    };
    responses: { 200: Schemas.integration; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Classroom_get__an__assignment = {
    method: "GET";
    path: "/assignments/{assignment_id}";
    requestFormat: "json";
    parameters: {
      path: { assignment_id: number };
    };
    responses: { 200: Schemas.classroom_assignment; 404: Schemas.basic_error };
  };
  export type get_Classroom_list__accepted__assignments__for__an__assignment = {
    method: "GET";
    path: "/assignments/{assignment_id}/accepted_assignments";
    requestFormat: "json";
    parameters: {
      query: Partial<{ page: number; per_page: number }>;
      path: { assignment_id: number };
    };
    responses: { 200: Array<Schemas.classroom_accepted_assignment> };
  };
  export type get_Classroom_get__assignment__grades = {
    method: "GET";
    path: "/assignments/{assignment_id}/grades";
    requestFormat: "json";
    parameters: {
      path: { assignment_id: number };
    };
    responses: { 200: Array<Schemas.classroom_assignment_grade>; 404: Schemas.basic_error };
  };
  export type get_Classroom_list__classrooms = {
    method: "GET";
    path: "/classrooms";
    requestFormat: "json";
    parameters: {
      query: Partial<{ page: number; per_page: number }>;
    };
    responses: { 200: Array<Schemas.simple_classroom> };
  };
  export type get_Classroom_get__a__classroom = {
    method: "GET";
    path: "/classrooms/{classroom_id}";
    requestFormat: "json";
    parameters: {
      path: { classroom_id: number };
    };
    responses: { 200: Schemas.classroom; 404: Schemas.basic_error };
  };
  export type get_Classroom_list__assignments__for__a__classroom = {
    method: "GET";
    path: "/classrooms/{classroom_id}/assignments";
    requestFormat: "json";
    parameters: {
      query: Partial<{ page: number; per_page: number }>;
      path: { classroom_id: number };
    };
    responses: { 200: Array<Schemas.simple_classroom_assignment> };
  };
  export type get_Codes__of__conduct_get__all__codes__of__conduct = {
    method: "GET";
    path: "/codes_of_conduct";
    requestFormat: "json";
    parameters: never;
    responses: { 200: Array<Schemas.code_of_conduct>; 304: unknown };
  };
  export type get_Codes__of__conduct_get__conduct__code = {
    method: "GET";
    path: "/codes_of_conduct/{key}";
    requestFormat: "json";
    parameters: {
      path: { key: string };
    };
    responses: { 200: Schemas.code_of_conduct; 304: unknown; 404: Schemas.basic_error };
  };
  export type post_Credentials_revoke = {
    method: "POST";
    path: "/credentials/revoke";
    requestFormat: "json";
    parameters: {
      body: { credentials: Array<string> };
    };
    responses: { 202: Record<string, unknown>; 422: Schemas.validation_error_simple; 500: Schemas.basic_error };
  };
  export type get_Emojis_get = {
    method: "GET";
    path: "/emojis";
    requestFormat: "json";
    parameters: never;
    responses: { 200: Record<string, string>; 304: unknown };
  };
  export type get_Code__security_get__configurations__for__enterprise = {
    method: "GET";
    path: "/enterprises/{enterprise}/code-security/configurations";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; before: string; after: string }>;
      path: { enterprise: string };
    };
    responses: { 200: Array<Schemas.code_security_configuration>; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type post_Code__security_create__configuration__for__enterprise = {
    method: "POST";
    path: "/enterprises/{enterprise}/code-security/configurations";
    requestFormat: "json";
    parameters: {
      path: { enterprise: string };

      body: {
        name: string;
        description: string;
        advanced_security?: ("enabled" | "disabled" | "code_security" | "secret_protection") | undefined;
        code_security?: ("enabled" | "disabled" | "not_set") | undefined;
        dependency_graph?: ("enabled" | "disabled" | "not_set") | undefined;
        dependency_graph_autosubmit_action?: ("enabled" | "disabled" | "not_set") | undefined;
        dependency_graph_autosubmit_action_options?: Partial<{ labeled_runners: boolean }> | undefined;
        dependabot_alerts?: ("enabled" | "disabled" | "not_set") | undefined;
        dependabot_security_updates?: ("enabled" | "disabled" | "not_set") | undefined;
        code_scanning_options?: Schemas.code_scanning_options | undefined;
        code_scanning_default_setup?: ("enabled" | "disabled" | "not_set") | undefined;
        code_scanning_default_setup_options?: Schemas.code_scanning_default_setup_options | undefined;
        code_scanning_delegated_alert_dismissal?: ("enabled" | "disabled" | "not_set") | undefined;
        secret_protection?: ("enabled" | "disabled" | "not_set") | undefined;
        secret_scanning?: ("enabled" | "disabled" | "not_set") | undefined;
        secret_scanning_push_protection?: ("enabled" | "disabled" | "not_set") | undefined;
        secret_scanning_validity_checks?: ("enabled" | "disabled" | "not_set") | undefined;
        secret_scanning_non_provider_patterns?: ("enabled" | "disabled" | "not_set") | undefined;
        secret_scanning_generic_secrets?: ("enabled" | "disabled" | "not_set") | undefined;
        secret_scanning_delegated_alert_dismissal?: ("enabled" | "disabled" | "not_set") | undefined;
        private_vulnerability_reporting?: ("enabled" | "disabled" | "not_set") | undefined;
        enforcement?: ("enforced" | "unenforced") | undefined;
      };
    };
    responses: {
      201: Schemas.code_security_configuration;
      400: Schemas.scim_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type get_Code__security_get__default__configurations__for__enterprise = {
    method: "GET";
    path: "/enterprises/{enterprise}/code-security/configurations/defaults";
    requestFormat: "json";
    parameters: {
      path: { enterprise: string };
    };
    responses: { 200: Schemas.code_security_default_configurations };
  };
  export type get_Code__security_get__single__configuration__for__enterprise = {
    method: "GET";
    path: "/enterprises/{enterprise}/code-security/configurations/{configuration_id}";
    requestFormat: "json";
    parameters: {
      path: { enterprise: string; configuration_id: number };
    };
    responses: {
      200: Schemas.code_security_configuration;
      304: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type patch_Code__security_update__enterprise__configuration = {
    method: "PATCH";
    path: "/enterprises/{enterprise}/code-security/configurations/{configuration_id}";
    requestFormat: "json";
    parameters: {
      path: { enterprise: string; configuration_id: number };

      body: Partial<{
        name: string;
        description: string;
        advanced_security: "enabled" | "disabled" | "code_security" | "secret_protection";
        code_security: "enabled" | "disabled" | "not_set";
        dependency_graph: "enabled" | "disabled" | "not_set";
        dependency_graph_autosubmit_action: "enabled" | "disabled" | "not_set";
        dependency_graph_autosubmit_action_options: Partial<{ labeled_runners: boolean }>;
        dependabot_alerts: "enabled" | "disabled" | "not_set";
        dependabot_security_updates: "enabled" | "disabled" | "not_set";
        code_scanning_default_setup: "enabled" | "disabled" | "not_set";
        code_scanning_default_setup_options: Schemas.code_scanning_default_setup_options;
        code_scanning_delegated_alert_dismissal: "enabled" | "disabled" | "not_set";
        secret_protection: "enabled" | "disabled" | "not_set";
        secret_scanning: "enabled" | "disabled" | "not_set";
        secret_scanning_push_protection: "enabled" | "disabled" | "not_set";
        secret_scanning_validity_checks: "enabled" | "disabled" | "not_set";
        secret_scanning_non_provider_patterns: "enabled" | "disabled" | "not_set";
        secret_scanning_generic_secrets: "enabled" | "disabled" | "not_set";
        secret_scanning_delegated_alert_dismissal: "enabled" | "disabled" | "not_set";
        private_vulnerability_reporting: "enabled" | "disabled" | "not_set";
        enforcement: "enforced" | "unenforced";
      }>;
    };
    responses: {
      200: Schemas.code_security_configuration;
      304: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
    };
  };
  export type delete_Code__security_delete__configuration__for__enterprise = {
    method: "DELETE";
    path: "/enterprises/{enterprise}/code-security/configurations/{configuration_id}";
    requestFormat: "json";
    parameters: {
      path: { enterprise: string; configuration_id: number };
    };
    responses: {
      204: unknown;
      400: Schemas.scim_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
    };
  };
  export type post_Code__security_attach__enterprise__configuration = {
    method: "POST";
    path: "/enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach";
    requestFormat: "json";
    parameters: {
      path: { enterprise: string; configuration_id: number };

      body: { scope: "all" | "all_without_configurations" };
    };
    responses: {
      202: Record<string, unknown>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
    };
  };
  export type put_Code__security_set__configuration__as__default__for__enterprise = {
    method: "PUT";
    path: "/enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults";
    requestFormat: "json";
    parameters: {
      path: { enterprise: string; configuration_id: number };

      body: Partial<{ default_for_new_repos: "all" | "none" | "private_and_internal" | "public" }>;
    };
    responses: {
      200: Partial<{
        default_for_new_repos: "all" | "none" | "private_and_internal" | "public";
        configuration: Schemas.code_security_configuration;
      }>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type get_Code__security_get__repositories__for__enterprise__configuration = {
    method: "GET";
    path: "/enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; before: string; after: string; status: string }>;
      path: { enterprise: string; configuration_id: number };
    };
    responses: {
      200: Array<Schemas.code_security_configuration_repositories>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type get_Dependabot_list__alerts__for__enterprise = {
    method: "GET";
    path: "/enterprises/{enterprise}/dependabot/alerts";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        state: string;
        severity: string;
        ecosystem: string;
        package: string;
        epss_percentage: string;
        has: string | Array<"patch">;
        scope: "development" | "runtime";
        sort: "created" | "updated" | "epss_percentage";
        direction: "asc" | "desc";
        before: string;
        after: string;
        first: number;
        last: number;
        per_page: number;
      }>;
      path: { enterprise: string };
    };
    responses: {
      200: Array<Schemas.dependabot_alert_with_repository>;
      304: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error_simple;
    };
  };
  export type get_Secret__scanning_list__alerts__for__enterprise = {
    method: "GET";
    path: "/enterprises/{enterprise}/secret-scanning/alerts";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        state: "open" | "resolved";
        secret_type: string;
        resolution: string;
        sort: "created" | "updated";
        direction: "asc" | "desc";
        per_page: number;
        before: string;
        after: string;
        validity: string;
        is_publicly_leaked: boolean;
        is_multi_repo: boolean;
        hide_secret: boolean;
      }>;
      path: { enterprise: string };
    };
    responses: {
      200: Array<Schemas.organization_secret_scanning_alert>;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Activity_list__public__events = {
    method: "GET";
    path: "/events";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: {
      200: Array<Schemas.event>;
      304: unknown;
      403: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Activity_get__feeds = {
    method: "GET";
    path: "/feeds";
    requestFormat: "json";
    parameters: never;
    responses: { 200: Schemas.feed };
  };
  export type get_Gists_list = {
    method: "GET";
    path: "/gists";
    requestFormat: "json";
    parameters: {
      query: Partial<{ since: string; per_page: number; page: number }>;
    };
    responses: { 200: Array<Schemas.base_gist>; 304: unknown; 403: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Gists_create = {
    method: "POST";
    path: "/gists";
    requestFormat: "json";
    parameters: {
      body: {
        description?: string | undefined;
        files: Record<string, { content: string }>;
        public?: (boolean | ("true" | "false")) | undefined;
      };
    };
    responses: {
      201: Schemas.gist_simple;
      304: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Gists_list__public = {
    method: "GET";
    path: "/gists/public";
    requestFormat: "json";
    parameters: {
      query: Partial<{ since: string; per_page: number; page: number }>;
    };
    responses: { 200: Array<Schemas.base_gist>; 304: unknown; 403: Schemas.basic_error; 422: Schemas.validation_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Gists_list__starred = {
    method: "GET";
    path: "/gists/starred";
    requestFormat: "json";
    parameters: {
      query: Partial<{ since: string; per_page: number; page: number }>;
    };
    responses: { 200: Array<Schemas.base_gist>; 304: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Gists_get = {
    method: "GET";
    path: "/gists/{gist_id}";
    requestFormat: "json";
    parameters: {
      path: { gist_id: string };
    };
    responses: {
      200: Schemas.gist_simple;
      304: unknown;
      403: Partial<{
        block: Partial<{ reason: string; created_at: string; html_url: string | null }>;
        message: string;
        documentation_url: string;
      }>;
      404: Schemas.basic_error;
    };
  };
  export type patch_Gists_update = {
    method: "PATCH";
    path: "/gists/{gist_id}";
    requestFormat: "json";
    parameters: {
      path: { gist_id: string };

      body: Partial<{
        description: string;
        files: Record<string, Partial<{ content: string; filename: string | null }> | null>;
      }> | null;
    };
    responses: { 200: Schemas.gist_simple; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type delete_Gists_delete = {
    method: "DELETE";
    path: "/gists/{gist_id}";
    requestFormat: "json";
    parameters: {
      path: { gist_id: string };
    };
    responses: { 204: unknown; 304: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Gists_list__comments = {
    method: "GET";
    path: "/gists/{gist_id}/comments";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { gist_id: string };
    };
    responses: { 200: Array<Schemas.gist_comment>; 304: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Gists_create__comment = {
    method: "POST";
    path: "/gists/{gist_id}/comments";
    requestFormat: "json";
    parameters: {
      path: { gist_id: string };

      body: { body: string };
    };
    responses: { 201: Schemas.gist_comment; 304: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Gists_get__comment = {
    method: "GET";
    path: "/gists/{gist_id}/comments/{comment_id}";
    requestFormat: "json";
    parameters: {
      path: { gist_id: string; comment_id: number };
    };
    responses: {
      200: Schemas.gist_comment;
      304: unknown;
      403: Partial<{
        block: Partial<{ reason: string; created_at: string; html_url: string | null }>;
        message: string;
        documentation_url: string;
      }>;
      404: Schemas.basic_error;
    };
  };
  export type patch_Gists_update__comment = {
    method: "PATCH";
    path: "/gists/{gist_id}/comments/{comment_id}";
    requestFormat: "json";
    parameters: {
      path: { gist_id: string; comment_id: number };

      body: { body: string };
    };
    responses: { 200: Schemas.gist_comment; 404: Schemas.basic_error };
  };
  export type delete_Gists_delete__comment = {
    method: "DELETE";
    path: "/gists/{gist_id}/comments/{comment_id}";
    requestFormat: "json";
    parameters: {
      path: { gist_id: string; comment_id: number };
    };
    responses: { 204: unknown; 304: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Gists_list__commits = {
    method: "GET";
    path: "/gists/{gist_id}/commits";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { gist_id: string };
    };
    responses: { 200: Array<Schemas.gist_commit>; 304: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Gists_list__forks = {
    method: "GET";
    path: "/gists/{gist_id}/forks";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { gist_id: string };
    };
    responses: { 200: Array<Schemas.gist_simple>; 304: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Gists_fork = {
    method: "POST";
    path: "/gists/{gist_id}/forks";
    requestFormat: "json";
    parameters: {
      path: { gist_id: string };
    };
    responses: {
      201: Schemas.base_gist;
      304: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Gists_check__is__starred = {
    method: "GET";
    path: "/gists/{gist_id}/star";
    requestFormat: "json";
    parameters: {
      path: { gist_id: string };
    };
    responses: { 204: unknown; 304: unknown; 403: Schemas.basic_error; 404: Partial<{}> };
  };
  export type put_Gists_star = {
    method: "PUT";
    path: "/gists/{gist_id}/star";
    requestFormat: "json";
    parameters: {
      path: { gist_id: string };
    };
    responses: { 204: unknown; 304: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type delete_Gists_unstar = {
    method: "DELETE";
    path: "/gists/{gist_id}/star";
    requestFormat: "json";
    parameters: {
      path: { gist_id: string };
    };
    responses: { 204: unknown; 304: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Gists_get__revision = {
    method: "GET";
    path: "/gists/{gist_id}/{sha}";
    requestFormat: "json";
    parameters: {
      path: { gist_id: string; sha: string };
    };
    responses: {
      200: Schemas.gist_simple;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Gitignore_get__all__templates = {
    method: "GET";
    path: "/gitignore/templates";
    requestFormat: "json";
    parameters: never;
    responses: { 200: Array<string>; 304: unknown };
  };
  export type get_Gitignore_get__template = {
    method: "GET";
    path: "/gitignore/templates/{name}";
    requestFormat: "json";
    parameters: {
      path: { name: string };
    };
    responses: { 200: Schemas.gitignore_template; 304: unknown };
  };
  export type get_Apps_list__repos__accessible__to__installation = {
    method: "GET";
    path: "/installation/repositories";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: {
      200: { total_count: number; repositories: Array<Schemas.repository>; repository_selection?: string | undefined };
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type delete_Apps_revoke__installation__access__token = {
    method: "DELETE";
    path: "/installation/token";
    requestFormat: "json";
    parameters: never;
    responses: { 204: unknown };
  };
  export type get_Issues_list = {
    method: "GET";
    path: "/issues";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        filter: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all";
        state: "open" | "closed" | "all";
        labels: string;
        sort: "created" | "updated" | "comments";
        direction: "asc" | "desc";
        since: string;
        collab: boolean;
        orgs: boolean;
        owned: boolean;
        pulls: boolean;
        per_page: number;
        page: number;
      }>;
    };
    responses: { 200: Array<Schemas.issue>; 304: unknown; 404: Schemas.basic_error; 422: Schemas.validation_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Licenses_get__all__commonly__used = {
    method: "GET";
    path: "/licenses";
    requestFormat: "json";
    parameters: {
      query: Partial<{ featured: boolean; per_page: number; page: number }>;
    };
    responses: { 200: Array<Schemas.license_simple>; 304: unknown };
  };
  export type get_Licenses_get = {
    method: "GET";
    path: "/licenses/{license}";
    requestFormat: "json";
    parameters: {
      path: { license: string };
    };
    responses: { 200: Schemas.license; 304: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type post_Markdown_render = {
    method: "POST";
    path: "/markdown";
    requestFormat: "json";
    parameters: {
      body: { text: string; mode?: ("markdown" | "gfm") | undefined; context?: string | undefined };
    };
    responses: { 200: unknown; 304: unknown };
    responseHeaders: { 200: { "Content-Type": string; "Content-Length": string; "X-CommonMarker-Version": string } };
  };
  export type post_Markdown_render__raw = {
    method: "POST";
    path: "/markdown/raw";
    requestFormat: "text";
    parameters: {
      body: string;
    };
    responses: { 200: unknown; 304: unknown };
    responseHeaders: { 200: { "X-CommonMarker-Version": string } };
  };
  export type get_Apps_get__subscription__plan__for__account = {
    method: "GET";
    path: "/marketplace_listing/accounts/{account_id}";
    requestFormat: "json";
    parameters: {
      path: { account_id: number };
    };
    responses: { 200: Schemas.marketplace_purchase; 401: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Apps_list__plans = {
    method: "GET";
    path: "/marketplace_listing/plans";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: { 200: Array<Schemas.marketplace_listing_plan>; 401: Schemas.basic_error; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Apps_list__accounts__for__plan = {
    method: "GET";
    path: "/marketplace_listing/plans/{plan_id}/accounts";
    requestFormat: "json";
    parameters: {
      query: Partial<{ sort: "created" | "updated"; direction: "asc" | "desc"; per_page: number; page: number }>;
      path: { plan_id: number };
    };
    responses: {
      200: Array<Schemas.marketplace_purchase>;
      401: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Apps_get__subscription__plan__for__account__stubbed = {
    method: "GET";
    path: "/marketplace_listing/stubbed/accounts/{account_id}";
    requestFormat: "json";
    parameters: {
      path: { account_id: number };
    };
    responses: { 200: Schemas.marketplace_purchase; 401: Schemas.basic_error; 404: unknown };
  };
  export type get_Apps_list__plans__stubbed = {
    method: "GET";
    path: "/marketplace_listing/stubbed/plans";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: { 200: Array<Schemas.marketplace_listing_plan>; 401: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Apps_list__accounts__for__plan__stubbed = {
    method: "GET";
    path: "/marketplace_listing/stubbed/plans/{plan_id}/accounts";
    requestFormat: "json";
    parameters: {
      query: Partial<{ sort: "created" | "updated"; direction: "asc" | "desc"; per_page: number; page: number }>;
      path: { plan_id: number };
    };
    responses: { 200: Array<Schemas.marketplace_purchase>; 401: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Meta_get = {
    method: "GET";
    path: "/meta";
    requestFormat: "json";
    parameters: never;
    responses: { 200: Schemas.api_overview; 304: unknown };
  };
  export type get_Activity_list__public__events__for__repo__network = {
    method: "GET";
    path: "/networks/{owner}/{repo}/events";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: {
      200: Array<Schemas.event>;
      301: Schemas.basic_error;
      304: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type get_Activity_list__notifications__for__authenticated__user = {
    method: "GET";
    path: "/notifications";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        all: boolean;
        participating: boolean;
        since: string;
        before: string;
        page: number;
        per_page: number;
      }>;
    };
    responses: {
      200: Array<Schemas.thread>;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      422: Schemas.validation_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type put_Activity_mark__notifications__as__read = {
    method: "PUT";
    path: "/notifications";
    requestFormat: "json";
    parameters: {
      body: Partial<{ last_read_at: string; read: boolean }>;
    };
    responses: {
      202: Partial<{ message: string }>;
      205: unknown;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
    };
  };
  export type get_Activity_get__thread = {
    method: "GET";
    path: "/notifications/threads/{thread_id}";
    requestFormat: "json";
    parameters: {
      path: { thread_id: number };
    };
    responses: { 200: Schemas.thread; 304: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error };
  };
  export type patch_Activity_mark__thread__as__read = {
    method: "PATCH";
    path: "/notifications/threads/{thread_id}";
    requestFormat: "json";
    parameters: {
      path: { thread_id: number };
    };
    responses: { 205: unknown; 304: unknown; 403: Schemas.basic_error };
  };
  export type delete_Activity_mark__thread__as__done = {
    method: "DELETE";
    path: "/notifications/threads/{thread_id}";
    requestFormat: "json";
    parameters: {
      path: { thread_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Activity_get__thread__subscription__for__authenticated__user = {
    method: "GET";
    path: "/notifications/threads/{thread_id}/subscription";
    requestFormat: "json";
    parameters: {
      path: { thread_id: number };
    };
    responses: { 200: Schemas.thread_subscription; 304: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error };
  };
  export type put_Activity_set__thread__subscription = {
    method: "PUT";
    path: "/notifications/threads/{thread_id}/subscription";
    requestFormat: "json";
    parameters: {
      path: { thread_id: number };

      body: Partial<{ ignored: boolean }>;
    };
    responses: { 200: Schemas.thread_subscription; 304: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error };
  };
  export type delete_Activity_delete__thread__subscription = {
    method: "DELETE";
    path: "/notifications/threads/{thread_id}/subscription";
    requestFormat: "json";
    parameters: {
      path: { thread_id: number };
    };
    responses: { 204: unknown; 304: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error };
  };
  export type get_Meta_get__octocat = {
    method: "GET";
    path: "/octocat";
    requestFormat: "json";
    parameters: {
      query: Partial<{ s: string }>;
    };
    responses: { 200: unknown };
  };
  export type get_Orgs_list = {
    method: "GET";
    path: "/organizations";
    requestFormat: "json";
    parameters: {
      query: Partial<{ since: number; per_page: number }>;
    };
    responses: { 200: Array<Schemas.organization_simple>; 304: unknown };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Dependabot_repository__access__for__org = {
    method: "GET";
    path: "/organizations/{org}/dependabot/repository-access";
    requestFormat: "json";
    parameters: {
      query: Partial<{ page: number; per_page: number }>;
      path: { org: string };
    };
    responses: {
      200: Schemas.dependabot_repository_access_details;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type patch_Dependabot_update__repository__access__for__org = {
    method: "PATCH";
    path: "/organizations/{org}/dependabot/repository-access";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: Partial<{ repository_ids_to_add: Array<number>; repository_ids_to_remove: Array<number> }>;
    };
    responses: { 204: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type put_Dependabot_set__repository__access__default__level = {
    method: "PUT";
    path: "/organizations/{org}/dependabot/repository-access/default-level";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: { default_level: "public" | "internal" };
    };
    responses: { 204: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Billing_get__github__billing__usage__report__org = {
    method: "GET";
    path: "/organizations/{org}/settings/billing/usage";
    requestFormat: "json";
    parameters: {
      query: Partial<{ year: number; month: number; day: number; hour: number }>;
      path: { org: string };
    };
    responses: {
      200: Schemas.billing_usage_report;
      400: Schemas.scim_error;
      403: Schemas.basic_error;
      500: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Orgs_get = {
    method: "GET";
    path: "/orgs/{org}";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Schemas.organization_full; 404: Schemas.basic_error };
  };
  export type patch_Orgs_update = {
    method: "PATCH";
    path: "/orgs/{org}";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: Partial<{
        billing_email: string;
        company: string;
        email: string;
        twitter_username: string;
        location: string;
        name: string;
        description: string;
        has_organization_projects: boolean;
        has_repository_projects: boolean;
        default_repository_permission: "read" | "write" | "admin" | "none";
        members_can_create_repositories: boolean;
        members_can_create_internal_repositories: boolean;
        members_can_create_private_repositories: boolean;
        members_can_create_public_repositories: boolean;
        members_allowed_repository_creation_type: "all" | "private" | "none";
        members_can_create_pages: boolean;
        members_can_create_public_pages: boolean;
        members_can_create_private_pages: boolean;
        members_can_fork_private_repositories: boolean;
        web_commit_signoff_required: boolean;
        blog: string;
        advanced_security_enabled_for_new_repositories: boolean;
        dependabot_alerts_enabled_for_new_repositories: boolean;
        dependabot_security_updates_enabled_for_new_repositories: boolean;
        dependency_graph_enabled_for_new_repositories: boolean;
        secret_scanning_enabled_for_new_repositories: boolean;
        secret_scanning_push_protection_enabled_for_new_repositories: boolean;
        secret_scanning_push_protection_custom_link_enabled: boolean;
        secret_scanning_push_protection_custom_link: string;
        deploy_keys_enabled_for_repositories: boolean;
      }>;
    };
    responses: {
      200: Schemas.organization_full;
      409: Schemas.basic_error;
      422: Schemas.validation_error | Schemas.validation_error_simple;
    };
  };
  export type delete_Orgs_delete = {
    method: "DELETE";
    path: "/orgs/{org}";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 202: Record<string, unknown>; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Actions_get__actions__cache__usage__for__org = {
    method: "GET";
    path: "/orgs/{org}/actions/cache/usage";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Schemas.actions_cache_usage_org_enterprise };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Actions_get__actions__cache__usage__by__repo__for__org = {
    method: "GET";
    path: "/orgs/{org}/actions/cache/usage-by-repository";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string };
    };
    responses: {
      200: { total_count: number; repository_cache_usages: Array<Schemas.actions_cache_usage_by_repository> };
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Actions_list__hosted__runners__for__org = {
    method: "GET";
    path: "/orgs/{org}/actions/hosted-runners";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string };
    };
    responses: { 200: { total_count: number; runners: Array<Schemas.actions_hosted_runner> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Actions_create__hosted__runner__for__org = {
    method: "POST";
    path: "/orgs/{org}/actions/hosted-runners";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: {
        name: string;
        image: Partial<{ id: string; source: "github" | "partner" | "custom" }>;
        size: string;
        runner_group_id: number;
        maximum_runners?: number | undefined;
        enable_static_ip?: boolean | undefined;
      };
    };
    responses: { 201: Schemas.actions_hosted_runner };
  };
  export type get_Actions_get__hosted__runners__github__owned__images__for__org = {
    method: "GET";
    path: "/orgs/{org}/actions/hosted-runners/images/github-owned";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: { total_count: number; images: Array<Schemas.actions_hosted_runner_curated_image> } };
  };
  export type get_Actions_get__hosted__runners__partner__images__for__org = {
    method: "GET";
    path: "/orgs/{org}/actions/hosted-runners/images/partner";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: { total_count: number; images: Array<Schemas.actions_hosted_runner_curated_image> } };
  };
  export type get_Actions_get__hosted__runners__limits__for__org = {
    method: "GET";
    path: "/orgs/{org}/actions/hosted-runners/limits";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Schemas.actions_hosted_runner_limits };
  };
  export type get_Actions_get__hosted__runners__machine__specs__for__org = {
    method: "GET";
    path: "/orgs/{org}/actions/hosted-runners/machine-sizes";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: { total_count: number; machine_specs: Array<Schemas.actions_hosted_runner_machine_spec> } };
  };
  export type get_Actions_get__hosted__runners__platforms__for__org = {
    method: "GET";
    path: "/orgs/{org}/actions/hosted-runners/platforms";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: { total_count: number; platforms: Array<string> } };
  };
  export type get_Actions_get__hosted__runner__for__org = {
    method: "GET";
    path: "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; hosted_runner_id: number };
    };
    responses: { 200: Schemas.actions_hosted_runner };
    responseHeaders: { 200: { Link: string } };
  };
  export type patch_Actions_update__hosted__runner__for__org = {
    method: "PATCH";
    path: "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; hosted_runner_id: number };

      body: Partial<{ name: string; runner_group_id: number; maximum_runners: number; enable_static_ip: boolean }>;
    };
    responses: { 200: Schemas.actions_hosted_runner };
  };
  export type delete_Actions_delete__hosted__runner__for__org = {
    method: "DELETE";
    path: "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; hosted_runner_id: number };
    };
    responses: { 202: Schemas.actions_hosted_runner };
  };
  export type get_Oidc_get__oidc__custom__sub__template__for__org = {
    method: "GET";
    path: "/orgs/{org}/actions/oidc/customization/sub";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Schemas.oidc_custom_sub };
  };
  export type put_Oidc_update__oidc__custom__sub__template__for__org = {
    method: "PUT";
    path: "/orgs/{org}/actions/oidc/customization/sub";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: Schemas.oidc_custom_sub;
    };
    responses: { 201: Schemas.empty_object; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Actions_get__github__actions__permissions__organization = {
    method: "GET";
    path: "/orgs/{org}/actions/permissions";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Schemas.actions_organization_permissions };
  };
  export type put_Actions_set__github__actions__permissions__organization = {
    method: "PUT";
    path: "/orgs/{org}/actions/permissions";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: {
        enabled_repositories: Schemas.enabled_repositories;
        allowed_actions?: Schemas.allowed_actions | undefined;
        sha_pinning_required?: Schemas.sha_pinning_required | undefined;
      };
    };
    responses: { 204: unknown };
  };
  export type get_Actions_get__artifact__and__log__retention__settings__organization = {
    method: "GET";
    path: "/orgs/{org}/actions/permissions/artifact-and-log-retention";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: {
      200: Schemas.actions_artifact_and_log_retention_response;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type put_Actions_set__artifact__and__log__retention__settings__organization = {
    method: "PUT";
    path: "/orgs/{org}/actions/permissions/artifact-and-log-retention";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: Schemas.actions_artifact_and_log_retention;
    };
    responses: {
      204: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Actions_get__fork__pr__contributor__approval__permissions__organization = {
    method: "GET";
    path: "/orgs/{org}/actions/permissions/fork-pr-contributor-approval";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Schemas.actions_fork_pr_contributor_approval; 404: Schemas.basic_error };
  };
  export type put_Actions_set__fork__pr__contributor__approval__permissions__organization = {
    method: "PUT";
    path: "/orgs/{org}/actions/permissions/fork-pr-contributor-approval";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: Schemas.actions_fork_pr_contributor_approval;
    };
    responses: { 204: unknown; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Actions_get__private__repo__fork__pr__workflows__settings__organization = {
    method: "GET";
    path: "/orgs/{org}/actions/permissions/fork-pr-workflows-private-repos";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: {
      200: Schemas.actions_fork_pr_workflows_private_repos;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type put_Actions_set__private__repo__fork__pr__workflows__settings__organization = {
    method: "PUT";
    path: "/orgs/{org}/actions/permissions/fork-pr-workflows-private-repos";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: Schemas.actions_fork_pr_workflows_private_repos_request;
    };
    responses: { 204: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Actions_list__selected__repositories__enabled__github__actions__organization = {
    method: "GET";
    path: "/orgs/{org}/actions/permissions/repositories";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string };
    };
    responses: { 200: { total_count: number; repositories: Array<Schemas.repository> } };
  };
  export type put_Actions_set__selected__repositories__enabled__github__actions__organization = {
    method: "PUT";
    path: "/orgs/{org}/actions/permissions/repositories";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: { selected_repository_ids: Array<number> };
    };
    responses: { 204: unknown };
  };
  export type put_Actions_enable__selected__repository__github__actions__organization = {
    method: "PUT";
    path: "/orgs/{org}/actions/permissions/repositories/{repository_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; repository_id: number };
    };
    responses: { 204: unknown };
  };
  export type delete_Actions_disable__selected__repository__github__actions__organization = {
    method: "DELETE";
    path: "/orgs/{org}/actions/permissions/repositories/{repository_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; repository_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Actions_get__allowed__actions__organization = {
    method: "GET";
    path: "/orgs/{org}/actions/permissions/selected-actions";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Schemas.selected_actions };
  };
  export type put_Actions_set__allowed__actions__organization = {
    method: "PUT";
    path: "/orgs/{org}/actions/permissions/selected-actions";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: Schemas.selected_actions;
    };
    responses: { 204: unknown };
  };
  export type get_Actions_get__self__hosted__runners__permissions__organization = {
    method: "GET";
    path: "/orgs/{org}/actions/permissions/self-hosted-runners";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Schemas.self_hosted_runners_settings; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type put_Actions_set__self__hosted__runners__permissions__organization = {
    method: "PUT";
    path: "/orgs/{org}/actions/permissions/self-hosted-runners";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: { enabled_repositories: "all" | "selected" | "none" };
    };
    responses: {
      204: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Actions_list__selected__repositories__self__hosted__runners__organization = {
    method: "GET";
    path: "/orgs/{org}/actions/permissions/self-hosted-runners/repositories";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string };
    };
    responses: {
      200: Partial<{ total_count: number; repositories: Array<Schemas.repository> }>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type put_Actions_set__selected__repositories__self__hosted__runners__organization = {
    method: "PUT";
    path: "/orgs/{org}/actions/permissions/self-hosted-runners/repositories";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: { selected_repository_ids: Array<number> };
    };
    responses: { 204: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type put_Actions_enable__selected__repository__self__hosted__runners__organization = {
    method: "PUT";
    path: "/orgs/{org}/actions/permissions/self-hosted-runners/repositories/{repository_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; repository_id: number };
    };
    responses: {
      204: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type delete_Actions_disable__selected__repository__self__hosted__runners__organization = {
    method: "DELETE";
    path: "/orgs/{org}/actions/permissions/self-hosted-runners/repositories/{repository_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; repository_id: number };
    };
    responses: {
      204: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Actions_get__github__actions__default__workflow__permissions__organization = {
    method: "GET";
    path: "/orgs/{org}/actions/permissions/workflow";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Schemas.actions_get_default_workflow_permissions };
  };
  export type put_Actions_set__github__actions__default__workflow__permissions__organization = {
    method: "PUT";
    path: "/orgs/{org}/actions/permissions/workflow";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: Schemas.actions_set_default_workflow_permissions;
    };
    responses: { 204: unknown };
  };
  export type get_Actions_list__self__hosted__runner__groups__for__org = {
    method: "GET";
    path: "/orgs/{org}/actions/runner-groups";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number; visible_to_repository: string }>;
      path: { org: string };
    };
    responses: { 200: { total_count: number; runner_groups: Array<Schemas.runner_groups_org> } };
  };
  export type post_Actions_create__self__hosted__runner__group__for__org = {
    method: "POST";
    path: "/orgs/{org}/actions/runner-groups";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: {
        name: string;
        visibility?: ("selected" | "all" | "private") | undefined;
        selected_repository_ids?: Array<number> | undefined;
        runners?: Array<number> | undefined;
        allows_public_repositories?: boolean | undefined;
        restricted_to_workflows?: boolean | undefined;
        selected_workflows?: Array<string> | undefined;
        network_configuration_id?: string | undefined;
      };
    };
    responses: { 201: Schemas.runner_groups_org };
  };
  export type get_Actions_get__self__hosted__runner__group__for__org = {
    method: "GET";
    path: "/orgs/{org}/actions/runner-groups/{runner_group_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; runner_group_id: number };
    };
    responses: { 200: Schemas.runner_groups_org };
  };
  export type patch_Actions_update__self__hosted__runner__group__for__org = {
    method: "PATCH";
    path: "/orgs/{org}/actions/runner-groups/{runner_group_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; runner_group_id: number };

      body: {
        name: string;
        visibility?: ("selected" | "all" | "private") | undefined;
        allows_public_repositories?: boolean | undefined;
        restricted_to_workflows?: boolean | undefined;
        selected_workflows?: Array<string> | undefined;
        network_configuration_id?: (string | null) | undefined;
      };
    };
    responses: { 200: Schemas.runner_groups_org };
  };
  export type delete_Actions_delete__self__hosted__runner__group__from__org = {
    method: "DELETE";
    path: "/orgs/{org}/actions/runner-groups/{runner_group_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; runner_group_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Actions_list__github__hosted__runners__in__group__for__org = {
    method: "GET";
    path: "/orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runners";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string; runner_group_id: number };
    };
    responses: { 200: { total_count: number; runners: Array<Schemas.actions_hosted_runner> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Actions_list__repo__access__to__self__hosted__runner__group__in__org = {
    method: "GET";
    path: "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories";
    requestFormat: "json";
    parameters: {
      query: Partial<{ page: number; per_page: number }>;
      path: { org: string; runner_group_id: number };
    };
    responses: { 200: { total_count: number; repositories: Array<Schemas.minimal_repository> } };
  };
  export type put_Actions_set__repo__access__to__self__hosted__runner__group__in__org = {
    method: "PUT";
    path: "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories";
    requestFormat: "json";
    parameters: {
      path: { org: string; runner_group_id: number };

      body: { selected_repository_ids: Array<number> };
    };
    responses: { 204: unknown };
  };
  export type put_Actions_add__repo__access__to__self__hosted__runner__group__in__org = {
    method: "PUT";
    path: "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; runner_group_id: number; repository_id: number };
    };
    responses: { 204: unknown };
  };
  export type delete_Actions_remove__repo__access__to__self__hosted__runner__group__in__org = {
    method: "DELETE";
    path: "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; runner_group_id: number; repository_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Actions_list__self__hosted__runners__in__group__for__org = {
    method: "GET";
    path: "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string; runner_group_id: number };
    };
    responses: { 200: { total_count: number; runners: Array<Schemas.runner> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type put_Actions_set__self__hosted__runners__in__group__for__org = {
    method: "PUT";
    path: "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners";
    requestFormat: "json";
    parameters: {
      path: { org: string; runner_group_id: number };

      body: { runners: Array<number> };
    };
    responses: { 204: unknown };
  };
  export type put_Actions_add__self__hosted__runner__to__group__for__org = {
    method: "PUT";
    path: "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; runner_group_id: number; runner_id: number };
    };
    responses: { 204: unknown };
  };
  export type delete_Actions_remove__self__hosted__runner__from__group__for__org = {
    method: "DELETE";
    path: "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; runner_group_id: number; runner_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Actions_list__self__hosted__runners__for__org = {
    method: "GET";
    path: "/orgs/{org}/actions/runners";
    requestFormat: "json";
    parameters: {
      query: Partial<{ name: string; per_page: number; page: number }>;
      path: { org: string };
    };
    responses: { 200: { total_count: number; runners: Array<Schemas.runner> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Actions_list__runner__applications__for__org = {
    method: "GET";
    path: "/orgs/{org}/actions/runners/downloads";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Array<Schemas.runner_application> };
  };
  export type post_Actions_generate__runner__jitconfig__for__org = {
    method: "POST";
    path: "/orgs/{org}/actions/runners/generate-jitconfig";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: { name: string; runner_group_id: number; labels: Array<string>; work_folder?: string | undefined };
    };
    responses: {
      201: { runner: Schemas.runner; encoded_jit_config: string };
      404: Schemas.basic_error;
      409: Schemas.basic_error;
      422: Schemas.validation_error_simple;
    };
  };
  export type post_Actions_create__registration__token__for__org = {
    method: "POST";
    path: "/orgs/{org}/actions/runners/registration-token";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 201: Schemas.authentication_token };
  };
  export type post_Actions_create__remove__token__for__org = {
    method: "POST";
    path: "/orgs/{org}/actions/runners/remove-token";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 201: Schemas.authentication_token };
  };
  export type get_Actions_get__self__hosted__runner__for__org = {
    method: "GET";
    path: "/orgs/{org}/actions/runners/{runner_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; runner_id: number };
    };
    responses: { 200: Schemas.runner };
  };
  export type delete_Actions_delete__self__hosted__runner__from__org = {
    method: "DELETE";
    path: "/orgs/{org}/actions/runners/{runner_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; runner_id: number };
    };
    responses: { 204: unknown; 422: Schemas.validation_error_simple };
  };
  export type get_Actions_list__labels__for__self__hosted__runner__for__org = {
    method: "GET";
    path: "/orgs/{org}/actions/runners/{runner_id}/labels";
    requestFormat: "json";
    parameters: {
      path: { org: string; runner_id: number };
    };
    responses: { 200: { total_count: number; labels: Array<Schemas.runner_label> }; 404: Schemas.basic_error };
  };
  export type post_Actions_add__custom__labels__to__self__hosted__runner__for__org = {
    method: "POST";
    path: "/orgs/{org}/actions/runners/{runner_id}/labels";
    requestFormat: "json";
    parameters: {
      path: { org: string; runner_id: number };

      body: { labels: Array<string> };
    };
    responses: {
      200: { total_count: number; labels: Array<Schemas.runner_label> };
      404: Schemas.basic_error;
      422: Schemas.validation_error_simple;
    };
  };
  export type put_Actions_set__custom__labels__for__self__hosted__runner__for__org = {
    method: "PUT";
    path: "/orgs/{org}/actions/runners/{runner_id}/labels";
    requestFormat: "json";
    parameters: {
      path: { org: string; runner_id: number };

      body: { labels: Array<string> };
    };
    responses: {
      200: { total_count: number; labels: Array<Schemas.runner_label> };
      404: Schemas.basic_error;
      422: Schemas.validation_error_simple;
    };
  };
  export type delete_Actions_remove__all__custom__labels__from__self__hosted__runner__for__org = {
    method: "DELETE";
    path: "/orgs/{org}/actions/runners/{runner_id}/labels";
    requestFormat: "json";
    parameters: {
      path: { org: string; runner_id: number };
    };
    responses: { 200: { total_count: number; labels: Array<Schemas.runner_label> }; 404: Schemas.basic_error };
  };
  export type delete_Actions_remove__custom__label__from__self__hosted__runner__for__org = {
    method: "DELETE";
    path: "/orgs/{org}/actions/runners/{runner_id}/labels/{name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; runner_id: number; name: string };
    };
    responses: {
      200: { total_count: number; labels: Array<Schemas.runner_label> };
      404: Schemas.basic_error;
      422: Schemas.validation_error_simple;
    };
  };
  export type get_Actions_list__org__secrets = {
    method: "GET";
    path: "/orgs/{org}/actions/secrets";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string };
    };
    responses: { 200: { total_count: number; secrets: Array<Schemas.organization_actions_secret> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Actions_get__org__public__key = {
    method: "GET";
    path: "/orgs/{org}/actions/secrets/public-key";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Schemas.actions_public_key };
  };
  export type get_Actions_get__org__secret = {
    method: "GET";
    path: "/orgs/{org}/actions/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string };
    };
    responses: { 200: Schemas.organization_actions_secret };
  };
  export type put_Actions_create__or__update__org__secret = {
    method: "PUT";
    path: "/orgs/{org}/actions/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string };

      body: {
        encrypted_value: string;
        key_id: string;
        visibility: "all" | "private" | "selected";
        selected_repository_ids?: Array<number> | undefined;
      };
    };
    responses: { 201: Schemas.empty_object; 204: unknown };
  };
  export type delete_Actions_delete__org__secret = {
    method: "DELETE";
    path: "/orgs/{org}/actions/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string };
    };
    responses: { 204: unknown };
  };
  export type get_Actions_list__selected__repos__for__org__secret = {
    method: "GET";
    path: "/orgs/{org}/actions/secrets/{secret_name}/repositories";
    requestFormat: "json";
    parameters: {
      query: Partial<{ page: number; per_page: number }>;
      path: { org: string; secret_name: string };
    };
    responses: { 200: { total_count: number; repositories: Array<Schemas.minimal_repository> } };
  };
  export type put_Actions_set__selected__repos__for__org__secret = {
    method: "PUT";
    path: "/orgs/{org}/actions/secrets/{secret_name}/repositories";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string };

      body: { selected_repository_ids: Array<number> };
    };
    responses: { 204: unknown };
  };
  export type put_Actions_add__selected__repo__to__org__secret = {
    method: "PUT";
    path: "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string; repository_id: number };
    };
    responses: { 204: unknown; 409: unknown };
  };
  export type delete_Actions_remove__selected__repo__from__org__secret = {
    method: "DELETE";
    path: "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string; repository_id: number };
    };
    responses: { 204: unknown; 409: unknown };
  };
  export type get_Actions_list__org__variables = {
    method: "GET";
    path: "/orgs/{org}/actions/variables";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string };
    };
    responses: { 200: { total_count: number; variables: Array<Schemas.organization_actions_variable> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Actions_create__org__variable = {
    method: "POST";
    path: "/orgs/{org}/actions/variables";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: {
        name: string;
        value: string;
        visibility: "all" | "private" | "selected";
        selected_repository_ids?: Array<number> | undefined;
      };
    };
    responses: { 201: Schemas.empty_object };
  };
  export type get_Actions_get__org__variable = {
    method: "GET";
    path: "/orgs/{org}/actions/variables/{name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; name: string };
    };
    responses: { 200: Schemas.organization_actions_variable };
  };
  export type patch_Actions_update__org__variable = {
    method: "PATCH";
    path: "/orgs/{org}/actions/variables/{name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; name: string };

      body: Partial<{
        name: string;
        value: string;
        visibility: "all" | "private" | "selected";
        selected_repository_ids: Array<number>;
      }>;
    };
    responses: { 204: unknown };
  };
  export type delete_Actions_delete__org__variable = {
    method: "DELETE";
    path: "/orgs/{org}/actions/variables/{name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; name: string };
    };
    responses: { 204: unknown };
  };
  export type get_Actions_list__selected__repos__for__org__variable = {
    method: "GET";
    path: "/orgs/{org}/actions/variables/{name}/repositories";
    requestFormat: "json";
    parameters: {
      query: Partial<{ page: number; per_page: number }>;
      path: { org: string; name: string };
    };
    responses: { 200: { total_count: number; repositories: Array<Schemas.minimal_repository> }; 409: unknown };
  };
  export type put_Actions_set__selected__repos__for__org__variable = {
    method: "PUT";
    path: "/orgs/{org}/actions/variables/{name}/repositories";
    requestFormat: "json";
    parameters: {
      path: { org: string; name: string };

      body: { selected_repository_ids: Array<number> };
    };
    responses: { 204: unknown; 409: unknown };
  };
  export type put_Actions_add__selected__repo__to__org__variable = {
    method: "PUT";
    path: "/orgs/{org}/actions/variables/{name}/repositories/{repository_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; name: string; repository_id: number };
    };
    responses: { 204: unknown; 409: unknown };
  };
  export type delete_Actions_remove__selected__repo__from__org__variable = {
    method: "DELETE";
    path: "/orgs/{org}/actions/variables/{name}/repositories/{repository_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; name: string; repository_id: number };
    };
    responses: { 204: unknown; 409: unknown };
  };
  export type post_Orgs_list__attestations__bulk = {
    method: "POST";
    path: "/orgs/{org}/attestations/bulk-list";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; before: string; after: string }>;
      path: { org: string };

      body: { subject_digests: Array<string>; predicate_type?: string | undefined };
    };
    responses: {
      200: Partial<{
        attestations_subject_digests: Record<
          string,
          Array<
            Partial<{
              bundle: Partial<{
                mediaType: string;
                verificationMaterial: Partial<{} & Record<string, any>>;
                dsseEnvelope: Partial<{} & Record<string, any>>;
              }>;
              repository_id: number;
              bundle_url: string;
            }>
          > | null
        >;
        page_info: Partial<{ has_next: boolean; has_previous: boolean; next: string; previous: string }>;
      }>;
    };
  };
  export type post_Orgs_delete__attestations__bulk = {
    method: "POST";
    path: "/orgs/{org}/attestations/delete-request";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: { subject_digests: Array<string> } | { attestation_ids: Array<number> };
    };
    responses: { 200: unknown; 404: Schemas.basic_error };
  };
  export type delete_Orgs_delete__attestations__by__subject__digest = {
    method: "DELETE";
    path: "/orgs/{org}/attestations/digest/{subject_digest}";
    requestFormat: "json";
    parameters: {
      path: { org: string; subject_digest: string };
    };
    responses: { 200: unknown; 204: unknown; 404: Schemas.basic_error };
  };
  export type delete_Orgs_delete__attestations__by__id = {
    method: "DELETE";
    path: "/orgs/{org}/attestations/{attestation_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; attestation_id: number };
    };
    responses: { 200: unknown; 204: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Orgs_list__attestations = {
    method: "GET";
    path: "/orgs/{org}/attestations/{subject_digest}";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; before: string; after: string; predicate_type: string }>;
      path: { org: string; subject_digest: string };
    };
    responses: {
      200: Partial<{
        attestations: Array<
          Partial<{
            bundle: Partial<{
              mediaType: string;
              verificationMaterial: Partial<{} & Record<string, any>>;
              dsseEnvelope: Partial<{} & Record<string, any>>;
            }>;
            repository_id: number;
            bundle_url: string;
          }>
        >;
      }>;
    };
  };
  export type get_Orgs_list__blocked__users = {
    method: "GET";
    path: "/orgs/{org}/blocks";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string };
    };
    responses: { 200: Array<Schemas.simple_user> };
  };
  export type get_Orgs_check__blocked__user = {
    method: "GET";
    path: "/orgs/{org}/blocks/{username}";
    requestFormat: "json";
    parameters: {
      path: { org: string; username: string };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type put_Orgs_block__user = {
    method: "PUT";
    path: "/orgs/{org}/blocks/{username}";
    requestFormat: "json";
    parameters: {
      path: { org: string; username: string };
    };
    responses: { 204: unknown; 422: Schemas.validation_error };
  };
  export type delete_Orgs_unblock__user = {
    method: "DELETE";
    path: "/orgs/{org}/blocks/{username}";
    requestFormat: "json";
    parameters: {
      path: { org: string; username: string };
    };
    responses: { 204: unknown };
  };
  export type get_Campaigns_list__org__campaigns = {
    method: "GET";
    path: "/orgs/{org}/campaigns";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        page: number;
        per_page: number;
        direction: "asc" | "desc";
        state: "open" | "closed";
        sort: "created" | "updated" | "ends_at" | "published";
      }>;
      path: { org: string };
    };
    responses: {
      200: Array<Schemas.campaign_summary>;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Campaigns_create__campaign = {
    method: "POST";
    path: "/orgs/{org}/campaigns";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: {
        name: string;
        description: string;
        managers?: Array<string> | undefined;
        team_managers?: Array<string> | undefined;
        ends_at: string;
        contact_link?: (string | null) | undefined;
        code_scanning_alerts: Array<{ repository_id: number; alert_numbers: Array<number> }>;
        generate_issues?: boolean | undefined;
      };
    };
    responses: {
      200: Schemas.campaign_summary;
      400: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.basic_error;
      429: unknown;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Campaigns_get__campaign__summary = {
    method: "GET";
    path: "/orgs/{org}/campaigns/{campaign_number}";
    requestFormat: "json";
    parameters: {
      path: { org: string; campaign_number: number };
    };
    responses: {
      200: Schemas.campaign_summary;
      404: Schemas.basic_error;
      422: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type patch_Campaigns_update__campaign = {
    method: "PATCH";
    path: "/orgs/{org}/campaigns/{campaign_number}";
    requestFormat: "json";
    parameters: {
      path: { org: string; campaign_number: number };

      body: Partial<{
        name: string;
        description: string;
        managers: Array<string>;
        team_managers: Array<string>;
        ends_at: string;
        contact_link: string | null;
        state: Schemas.campaign_state;
      }>;
    };
    responses: {
      200: Schemas.campaign_summary;
      400: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type delete_Campaigns_delete__campaign = {
    method: "DELETE";
    path: "/orgs/{org}/campaigns/{campaign_number}";
    requestFormat: "json";
    parameters: {
      path: { org: string; campaign_number: number };
    };
    responses: {
      204: unknown;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Code__scanning_list__alerts__for__org = {
    method: "GET";
    path: "/orgs/{org}/code-scanning/alerts";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        tool_name: string;
        tool_guid: string | null;
        before: string;
        after: string;
        page: number;
        per_page: number;
        direction: "asc" | "desc";
        state: "open" | "closed" | "dismissed" | "fixed";
        sort: "created" | "updated";
        severity: "critical" | "high" | "medium" | "low" | "warning" | "note" | "error";
      }>;
      path: { org: string };
    };
    responses: {
      200: Array<Schemas.code_scanning_organization_alert_items>;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Code__security_get__configurations__for__org = {
    method: "GET";
    path: "/orgs/{org}/code-security/configurations";
    requestFormat: "json";
    parameters: {
      query: Partial<{ target_type: "global" | "all"; per_page: number; before: string; after: string }>;
      path: { org: string };
    };
    responses: { 200: Array<Schemas.code_security_configuration>; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type post_Code__security_create__configuration = {
    method: "POST";
    path: "/orgs/{org}/code-security/configurations";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: {
        name: string;
        description: string;
        advanced_security?: ("enabled" | "disabled" | "code_security" | "secret_protection") | undefined;
        code_security?: ("enabled" | "disabled" | "not_set") | undefined;
        dependency_graph?: ("enabled" | "disabled" | "not_set") | undefined;
        dependency_graph_autosubmit_action?: ("enabled" | "disabled" | "not_set") | undefined;
        dependency_graph_autosubmit_action_options?: Partial<{ labeled_runners: boolean }> | undefined;
        dependabot_alerts?: ("enabled" | "disabled" | "not_set") | undefined;
        dependabot_security_updates?: ("enabled" | "disabled" | "not_set") | undefined;
        code_scanning_options?: Schemas.code_scanning_options | undefined;
        code_scanning_default_setup?: ("enabled" | "disabled" | "not_set") | undefined;
        code_scanning_default_setup_options?: Schemas.code_scanning_default_setup_options | undefined;
        code_scanning_delegated_alert_dismissal?: ("enabled" | "disabled" | "not_set") | undefined;
        secret_protection?: ("enabled" | "disabled" | "not_set") | undefined;
        secret_scanning?: ("enabled" | "disabled" | "not_set") | undefined;
        secret_scanning_push_protection?: ("enabled" | "disabled" | "not_set") | undefined;
        secret_scanning_delegated_bypass?: ("enabled" | "disabled" | "not_set") | undefined;
        secret_scanning_delegated_bypass_options?:
          | Partial<{ reviewers: Array<{ reviewer_id: number; reviewer_type: "TEAM" | "ROLE" }> }>
          | undefined;
        secret_scanning_validity_checks?: ("enabled" | "disabled" | "not_set") | undefined;
        secret_scanning_non_provider_patterns?: ("enabled" | "disabled" | "not_set") | undefined;
        secret_scanning_generic_secrets?: ("enabled" | "disabled" | "not_set") | undefined;
        secret_scanning_delegated_alert_dismissal?: ("enabled" | "disabled" | "not_set") | undefined;
        private_vulnerability_reporting?: ("enabled" | "disabled" | "not_set") | undefined;
        enforcement?: ("enforced" | "unenforced") | undefined;
      };
    };
    responses: { 201: Schemas.code_security_configuration };
  };
  export type get_Code__security_get__default__configurations = {
    method: "GET";
    path: "/orgs/{org}/code-security/configurations/defaults";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: {
      200: Schemas.code_security_default_configurations;
      304: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type delete_Code__security_detach__configuration = {
    method: "DELETE";
    path: "/orgs/{org}/code-security/configurations/detach";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: Partial<{ selected_repository_ids: Array<number> }>;
    };
    responses: {
      204: unknown;
      400: Schemas.scim_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
    };
  };
  export type get_Code__security_get__configuration = {
    method: "GET";
    path: "/orgs/{org}/code-security/configurations/{configuration_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; configuration_id: number };
    };
    responses: {
      200: Schemas.code_security_configuration;
      304: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type patch_Code__security_update__configuration = {
    method: "PATCH";
    path: "/orgs/{org}/code-security/configurations/{configuration_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; configuration_id: number };

      body: Partial<{
        name: string;
        description: string;
        advanced_security: "enabled" | "disabled" | "code_security" | "secret_protection";
        code_security: "enabled" | "disabled" | "not_set";
        dependency_graph: "enabled" | "disabled" | "not_set";
        dependency_graph_autosubmit_action: "enabled" | "disabled" | "not_set";
        dependency_graph_autosubmit_action_options: Partial<{ labeled_runners: boolean }>;
        dependabot_alerts: "enabled" | "disabled" | "not_set";
        dependabot_security_updates: "enabled" | "disabled" | "not_set";
        code_scanning_default_setup: "enabled" | "disabled" | "not_set";
        code_scanning_default_setup_options: Schemas.code_scanning_default_setup_options;
        code_scanning_delegated_alert_dismissal: "enabled" | "disabled" | "not_set";
        secret_protection: "enabled" | "disabled" | "not_set";
        secret_scanning: "enabled" | "disabled" | "not_set";
        secret_scanning_push_protection: "enabled" | "disabled" | "not_set";
        secret_scanning_delegated_bypass: "enabled" | "disabled" | "not_set";
        secret_scanning_delegated_bypass_options: Partial<{
          reviewers: Array<{ reviewer_id: number; reviewer_type: "TEAM" | "ROLE" }>;
        }>;
        secret_scanning_validity_checks: "enabled" | "disabled" | "not_set";
        secret_scanning_non_provider_patterns: "enabled" | "disabled" | "not_set";
        secret_scanning_generic_secrets: "enabled" | "disabled" | "not_set";
        secret_scanning_delegated_alert_dismissal: "enabled" | "disabled" | "not_set";
        private_vulnerability_reporting: "enabled" | "disabled" | "not_set";
        enforcement: "enforced" | "unenforced";
      }>;
    };
    responses: { 200: Schemas.code_security_configuration; 204: unknown };
  };
  export type delete_Code__security_delete__configuration = {
    method: "DELETE";
    path: "/orgs/{org}/code-security/configurations/{configuration_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; configuration_id: number };
    };
    responses: {
      204: unknown;
      400: Schemas.scim_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
    };
  };
  export type post_Code__security_attach__configuration = {
    method: "POST";
    path: "/orgs/{org}/code-security/configurations/{configuration_id}/attach";
    requestFormat: "json";
    parameters: {
      path: { org: string; configuration_id: number };

      body: {
        scope: "all" | "all_without_configurations" | "public" | "private_or_internal" | "selected";
        selected_repository_ids?: Array<number> | undefined;
      };
    };
    responses: { 202: Record<string, unknown> };
  };
  export type put_Code__security_set__configuration__as__default = {
    method: "PUT";
    path: "/orgs/{org}/code-security/configurations/{configuration_id}/defaults";
    requestFormat: "json";
    parameters: {
      path: { org: string; configuration_id: number };

      body: Partial<{ default_for_new_repos: "all" | "none" | "private_and_internal" | "public" }>;
    };
    responses: {
      200: Partial<{
        default_for_new_repos: "all" | "none" | "private_and_internal" | "public";
        configuration: Schemas.code_security_configuration;
      }>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type get_Code__security_get__repositories__for__configuration = {
    method: "GET";
    path: "/orgs/{org}/code-security/configurations/{configuration_id}/repositories";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; before: string; after: string; status: string }>;
      path: { org: string; configuration_id: number };
    };
    responses: {
      200: Array<Schemas.code_security_configuration_repositories>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type get_Codespaces_list__in__organization = {
    method: "GET";
    path: "/orgs/{org}/codespaces";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string };
    };
    responses: {
      200: { total_count: number; codespaces: Array<Schemas.codespace> };
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
    };
  };
  export type get_Codespaces_list__org__secrets = {
    method: "GET";
    path: "/orgs/{org}/codespaces/secrets";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string };
    };
    responses: { 200: { total_count: number; secrets: Array<Schemas.codespaces_org_secret> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Codespaces_get__org__public__key = {
    method: "GET";
    path: "/orgs/{org}/codespaces/secrets/public-key";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Schemas.codespaces_public_key };
  };
  export type get_Codespaces_get__org__secret = {
    method: "GET";
    path: "/orgs/{org}/codespaces/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string };
    };
    responses: { 200: Schemas.codespaces_org_secret };
    responseHeaders: { 200: { Link: string } };
  };
  export type put_Codespaces_create__or__update__org__secret = {
    method: "PUT";
    path: "/orgs/{org}/codespaces/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string };

      body: {
        encrypted_value?: string | undefined;
        key_id?: string | undefined;
        visibility: "all" | "private" | "selected";
        selected_repository_ids?: Array<number> | undefined;
      };
    };
    responses: { 201: Schemas.empty_object; 204: unknown; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type delete_Codespaces_delete__org__secret = {
    method: "DELETE";
    path: "/orgs/{org}/codespaces/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type get_Codespaces_list__selected__repos__for__org__secret = {
    method: "GET";
    path: "/orgs/{org}/codespaces/secrets/{secret_name}/repositories";
    requestFormat: "json";
    parameters: {
      query: Partial<{ page: number; per_page: number }>;
      path: { org: string; secret_name: string };
    };
    responses: {
      200: { total_count: number; repositories: Array<Schemas.minimal_repository> };
      404: Schemas.basic_error;
    };
  };
  export type put_Codespaces_set__selected__repos__for__org__secret = {
    method: "PUT";
    path: "/orgs/{org}/codespaces/secrets/{secret_name}/repositories";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string };

      body: { selected_repository_ids: Array<number> };
    };
    responses: { 204: unknown; 404: Schemas.basic_error; 409: unknown };
  };
  export type put_Codespaces_add__selected__repo__to__org__secret = {
    method: "PUT";
    path: "/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string; repository_id: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error; 409: unknown; 422: Schemas.validation_error };
  };
  export type delete_Codespaces_remove__selected__repo__from__org__secret = {
    method: "DELETE";
    path: "/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string; repository_id: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error; 409: unknown; 422: Schemas.validation_error };
  };
  export type get_Copilot_get__copilot__organization__details = {
    method: "GET";
    path: "/orgs/{org}/copilot/billing";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: {
      200: Schemas.copilot_organization_details;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: unknown;
      500: Schemas.basic_error;
    };
  };
  export type get_Copilot_list__copilot__seats = {
    method: "GET";
    path: "/orgs/{org}/copilot/billing/seats";
    requestFormat: "json";
    parameters: {
      query: Partial<{ page: number; per_page: number }>;
      path: { org: string };
    };
    responses: {
      200: Partial<{ total_seats: number; seats: Array<Schemas.copilot_seat_details> }>;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Copilot_add__copilot__seats__for__teams = {
    method: "POST";
    path: "/orgs/{org}/copilot/billing/selected_teams";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: { selected_teams: Array<string> };
    };
    responses: {
      201: { seats_created: number };
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: unknown;
      500: Schemas.basic_error;
    };
  };
  export type delete_Copilot_cancel__copilot__seat__assignment__for__teams = {
    method: "DELETE";
    path: "/orgs/{org}/copilot/billing/selected_teams";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: { selected_teams: Array<string> };
    };
    responses: {
      200: { seats_cancelled: number };
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: unknown;
      500: Schemas.basic_error;
    };
  };
  export type post_Copilot_add__copilot__seats__for__users = {
    method: "POST";
    path: "/orgs/{org}/copilot/billing/selected_users";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: { selected_usernames: Array<string> };
    };
    responses: {
      201: { seats_created: number };
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: unknown;
      500: Schemas.basic_error;
    };
  };
  export type delete_Copilot_cancel__copilot__seat__assignment__for__users = {
    method: "DELETE";
    path: "/orgs/{org}/copilot/billing/selected_users";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: { selected_usernames: Array<string> };
    };
    responses: {
      200: { seats_cancelled: number };
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: unknown;
      500: Schemas.basic_error;
    };
  };
  export type get_Copilot_copilot__metrics__for__organization = {
    method: "GET";
    path: "/orgs/{org}/copilot/metrics";
    requestFormat: "json";
    parameters: {
      query: Partial<{ since: string; until: string; page: number; per_page: number }>;
      path: { org: string };
    };
    responses: {
      200: Array<Schemas.copilot_usage_metrics_day>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.basic_error;
      500: Schemas.basic_error;
    };
  };
  export type get_Dependabot_list__alerts__for__org = {
    method: "GET";
    path: "/orgs/{org}/dependabot/alerts";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        state: string;
        severity: string;
        ecosystem: string;
        package: string;
        epss_percentage: string;
        artifact_registry_url: string;
        artifact_registry: string;
        has: string | Array<"patch">;
        scope: "development" | "runtime";
        sort: "created" | "updated" | "epss_percentage";
        direction: "asc" | "desc";
        before: string;
        after: string;
        first: number;
        last: number;
        per_page: number;
      }>;
      path: { org: string };
    };
    responses: {
      200: Array<Schemas.dependabot_alert_with_repository>;
      304: unknown;
      400: Schemas.scim_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error_simple;
    };
  };
  export type get_Dependabot_list__org__secrets = {
    method: "GET";
    path: "/orgs/{org}/dependabot/secrets";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string };
    };
    responses: { 200: { total_count: number; secrets: Array<Schemas.organization_dependabot_secret> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Dependabot_get__org__public__key = {
    method: "GET";
    path: "/orgs/{org}/dependabot/secrets/public-key";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Schemas.dependabot_public_key };
  };
  export type get_Dependabot_get__org__secret = {
    method: "GET";
    path: "/orgs/{org}/dependabot/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string };
    };
    responses: { 200: Schemas.organization_dependabot_secret };
  };
  export type put_Dependabot_create__or__update__org__secret = {
    method: "PUT";
    path: "/orgs/{org}/dependabot/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string };

      body: {
        encrypted_value?: string | undefined;
        key_id?: string | undefined;
        visibility: "all" | "private" | "selected";
        selected_repository_ids?: Array<string> | undefined;
      };
    };
    responses: { 201: Schemas.empty_object; 204: unknown };
  };
  export type delete_Dependabot_delete__org__secret = {
    method: "DELETE";
    path: "/orgs/{org}/dependabot/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string };
    };
    responses: { 204: unknown };
  };
  export type get_Dependabot_list__selected__repos__for__org__secret = {
    method: "GET";
    path: "/orgs/{org}/dependabot/secrets/{secret_name}/repositories";
    requestFormat: "json";
    parameters: {
      query: Partial<{ page: number; per_page: number }>;
      path: { org: string; secret_name: string };
    };
    responses: { 200: { total_count: number; repositories: Array<Schemas.minimal_repository> } };
  };
  export type put_Dependabot_set__selected__repos__for__org__secret = {
    method: "PUT";
    path: "/orgs/{org}/dependabot/secrets/{secret_name}/repositories";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string };

      body: { selected_repository_ids: Array<number> };
    };
    responses: { 204: unknown };
  };
  export type put_Dependabot_add__selected__repo__to__org__secret = {
    method: "PUT";
    path: "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string; repository_id: number };
    };
    responses: { 204: unknown; 409: unknown };
  };
  export type delete_Dependabot_remove__selected__repo__from__org__secret = {
    method: "DELETE";
    path: "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string; repository_id: number };
    };
    responses: { 204: unknown; 409: unknown };
  };
  export type get_Packages_list__docker__migration__conflicting__packages__for__organization = {
    method: "GET";
    path: "/orgs/{org}/docker/conflicts";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Array<Schemas.Schema_package>; 401: Schemas.basic_error; 403: Schemas.basic_error };
  };
  export type get_Activity_list__public__org__events = {
    method: "GET";
    path: "/orgs/{org}/events";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string };
    };
    responses: { 200: Array<Schemas.event> };
  };
  export type get_Orgs_list__failed__invitations = {
    method: "GET";
    path: "/orgs/{org}/failed_invitations";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string };
    };
    responses: { 200: Array<Schemas.organization_invitation>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Orgs_list__webhooks = {
    method: "GET";
    path: "/orgs/{org}/hooks";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string };
    };
    responses: { 200: Array<Schemas.org_hook>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Orgs_create__webhook = {
    method: "POST";
    path: "/orgs/{org}/hooks";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: {
        name: string;
        config: {
          url: Schemas.webhook_config_url;
          content_type?: Schemas.webhook_config_content_type | undefined;
          secret?: Schemas.webhook_config_secret | undefined;
          insecure_ssl?: Schemas.webhook_config_insecure_ssl | undefined;
          username?: string | undefined;
          password?: string | undefined;
        };
        events?: Array<string> | undefined;
        active?: boolean | undefined;
      };
    };
    responses: { 201: Schemas.org_hook; 404: Schemas.basic_error; 422: Schemas.validation_error };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Orgs_get__webhook = {
    method: "GET";
    path: "/orgs/{org}/hooks/{hook_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; hook_id: number };
    };
    responses: { 200: Schemas.org_hook; 404: Schemas.basic_error };
  };
  export type patch_Orgs_update__webhook = {
    method: "PATCH";
    path: "/orgs/{org}/hooks/{hook_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; hook_id: number };

      body: Partial<{
        config: {
          url: Schemas.webhook_config_url;
          content_type?: Schemas.webhook_config_content_type | undefined;
          secret?: Schemas.webhook_config_secret | undefined;
          insecure_ssl?: Schemas.webhook_config_insecure_ssl | undefined;
        };
        events: Array<string>;
        active: boolean;
        name: string;
      }>;
    };
    responses: { 200: Schemas.org_hook; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type delete_Orgs_delete__webhook = {
    method: "DELETE";
    path: "/orgs/{org}/hooks/{hook_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; hook_id: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type get_Orgs_get__webhook__config__for__org = {
    method: "GET";
    path: "/orgs/{org}/hooks/{hook_id}/config";
    requestFormat: "json";
    parameters: {
      path: { org: string; hook_id: number };
    };
    responses: { 200: Schemas.webhook_config };
  };
  export type patch_Orgs_update__webhook__config__for__org = {
    method: "PATCH";
    path: "/orgs/{org}/hooks/{hook_id}/config";
    requestFormat: "json";
    parameters: {
      path: { org: string; hook_id: number };

      body: Partial<{
        url: Schemas.webhook_config_url;
        content_type: Schemas.webhook_config_content_type;
        secret: Schemas.webhook_config_secret;
        insecure_ssl: Schemas.webhook_config_insecure_ssl;
      }>;
    };
    responses: { 200: Schemas.webhook_config };
  };
  export type get_Orgs_list__webhook__deliveries = {
    method: "GET";
    path: "/orgs/{org}/hooks/{hook_id}/deliveries";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; cursor: string }>;
      path: { org: string; hook_id: number };
    };
    responses: { 200: Array<Schemas.hook_delivery_item>; 400: Schemas.scim_error; 422: Schemas.validation_error };
  };
  export type get_Orgs_get__webhook__delivery = {
    method: "GET";
    path: "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; hook_id: number; delivery_id: number };
    };
    responses: { 200: Schemas.hook_delivery; 400: Schemas.scim_error; 422: Schemas.validation_error };
  };
  export type post_Orgs_redeliver__webhook__delivery = {
    method: "POST";
    path: "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts";
    requestFormat: "json";
    parameters: {
      path: { org: string; hook_id: number; delivery_id: number };
    };
    responses: { 202: Record<string, unknown>; 400: Schemas.scim_error; 422: Schemas.validation_error };
  };
  export type post_Orgs_ping__webhook = {
    method: "POST";
    path: "/orgs/{org}/hooks/{hook_id}/pings";
    requestFormat: "json";
    parameters: {
      path: { org: string; hook_id: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type get_Api__insights_get__route__stats__by__actor = {
    method: "GET";
    path: "/orgs/{org}/insights/api/route-stats/{actor_type}/{actor_id}";
    requestFormat: "json";
    parameters: {
      query: {
        min_timestamp: string;
        max_timestamp?: string | undefined;
        page?: number | undefined;
        per_page?: number | undefined;
        direction?: ("asc" | "desc") | undefined;
        sort?:
          | Array<
              | "last_rate_limited_timestamp"
              | "last_request_timestamp"
              | "rate_limited_request_count"
              | "http_method"
              | "api_route"
              | "total_request_count"
            >
          | undefined;
        api_route_substring?: string | undefined;
      };
      path: {
        org: string;
        actor_type: "installation" | "classic_pat" | "fine_grained_pat" | "oauth_app" | "github_app_user_to_server";
        actor_id: number;
      };
    };
    responses: { 200: Schemas.api_insights_route_stats };
  };
  export type get_Api__insights_get__subject__stats = {
    method: "GET";
    path: "/orgs/{org}/insights/api/subject-stats";
    requestFormat: "json";
    parameters: {
      query: {
        min_timestamp: string;
        max_timestamp?: string | undefined;
        page?: number | undefined;
        per_page?: number | undefined;
        direction?: ("asc" | "desc") | undefined;
        sort?:
          | Array<
              | "last_rate_limited_timestamp"
              | "last_request_timestamp"
              | "rate_limited_request_count"
              | "subject_name"
              | "total_request_count"
            >
          | undefined;
        subject_name_substring?: string | undefined;
      };
      path: { org: string };
    };
    responses: { 200: Schemas.api_insights_subject_stats };
  };
  export type get_Api__insights_get__summary__stats = {
    method: "GET";
    path: "/orgs/{org}/insights/api/summary-stats";
    requestFormat: "json";
    parameters: {
      query: { min_timestamp: string; max_timestamp?: string | undefined };
      path: { org: string };
    };
    responses: { 200: Schemas.api_insights_summary_stats };
  };
  export type get_Api__insights_get__summary__stats__by__user = {
    method: "GET";
    path: "/orgs/{org}/insights/api/summary-stats/users/{user_id}";
    requestFormat: "json";
    parameters: {
      query: { min_timestamp: string; max_timestamp?: string | undefined };
      path: { org: string; user_id: string };
    };
    responses: { 200: Schemas.api_insights_summary_stats };
  };
  export type get_Api__insights_get__summary__stats__by__actor = {
    method: "GET";
    path: "/orgs/{org}/insights/api/summary-stats/{actor_type}/{actor_id}";
    requestFormat: "json";
    parameters: {
      query: { min_timestamp: string; max_timestamp?: string | undefined };
      path: {
        org: string;
        actor_type: "installation" | "classic_pat" | "fine_grained_pat" | "oauth_app" | "github_app_user_to_server";
        actor_id: number;
      };
    };
    responses: { 200: Schemas.api_insights_summary_stats };
  };
  export type get_Api__insights_get__time__stats = {
    method: "GET";
    path: "/orgs/{org}/insights/api/time-stats";
    requestFormat: "json";
    parameters: {
      query: { min_timestamp: string; max_timestamp?: string | undefined; timestamp_increment: string };
      path: { org: string };
    };
    responses: { 200: Schemas.api_insights_time_stats };
  };
  export type get_Api__insights_get__time__stats__by__user = {
    method: "GET";
    path: "/orgs/{org}/insights/api/time-stats/users/{user_id}";
    requestFormat: "json";
    parameters: {
      query: { min_timestamp: string; max_timestamp?: string | undefined; timestamp_increment: string };
      path: { org: string; user_id: string };
    };
    responses: { 200: Schemas.api_insights_time_stats };
  };
  export type get_Api__insights_get__time__stats__by__actor = {
    method: "GET";
    path: "/orgs/{org}/insights/api/time-stats/{actor_type}/{actor_id}";
    requestFormat: "json";
    parameters: {
      query: { min_timestamp: string; max_timestamp?: string | undefined; timestamp_increment: string };
      path: {
        org: string;
        actor_type: "installation" | "classic_pat" | "fine_grained_pat" | "oauth_app" | "github_app_user_to_server";
        actor_id: number;
      };
    };
    responses: { 200: Schemas.api_insights_time_stats };
  };
  export type get_Api__insights_get__user__stats = {
    method: "GET";
    path: "/orgs/{org}/insights/api/user-stats/{user_id}";
    requestFormat: "json";
    parameters: {
      query: {
        min_timestamp: string;
        max_timestamp?: string | undefined;
        page?: number | undefined;
        per_page?: number | undefined;
        direction?: ("asc" | "desc") | undefined;
        sort?:
          | Array<
              | "last_rate_limited_timestamp"
              | "last_request_timestamp"
              | "rate_limited_request_count"
              | "subject_name"
              | "total_request_count"
            >
          | undefined;
        actor_name_substring?: string | undefined;
      };
      path: { org: string; user_id: string };
    };
    responses: { 200: Schemas.api_insights_user_stats };
  };
  export type get_Apps_get__org__installation = {
    method: "GET";
    path: "/orgs/{org}/installation";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Schemas.installation };
  };
  export type get_Orgs_list__app__installations = {
    method: "GET";
    path: "/orgs/{org}/installations";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string };
    };
    responses: { 200: { total_count: number; installations: Array<Schemas.installation> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Interactions_get__restrictions__for__org = {
    method: "GET";
    path: "/orgs/{org}/interaction-limits";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Schemas.interaction_limit_response | Partial<{}> };
  };
  export type put_Interactions_set__restrictions__for__org = {
    method: "PUT";
    path: "/orgs/{org}/interaction-limits";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: Schemas.interaction_limit;
    };
    responses: { 200: Schemas.interaction_limit_response; 422: Schemas.validation_error };
  };
  export type delete_Interactions_remove__restrictions__for__org = {
    method: "DELETE";
    path: "/orgs/{org}/interaction-limits";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 204: unknown };
  };
  export type get_Orgs_list__pending__invitations = {
    method: "GET";
    path: "/orgs/{org}/invitations";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        per_page: number;
        page: number;
        role: "all" | "admin" | "direct_member" | "billing_manager" | "hiring_manager";
        invitation_source: "all" | "member" | "scim";
      }>;
      path: { org: string };
    };
    responses: { 200: Array<Schemas.organization_invitation>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Orgs_create__invitation = {
    method: "POST";
    path: "/orgs/{org}/invitations";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: Partial<{
        invitee_id: number;
        email: string;
        role: "admin" | "direct_member" | "billing_manager" | "reinstate";
        team_ids: Array<number>;
      }>;
    };
    responses: { 201: Schemas.organization_invitation; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type delete_Orgs_cancel__invitation = {
    method: "DELETE";
    path: "/orgs/{org}/invitations/{invitation_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; invitation_id: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Orgs_list__invitation__teams = {
    method: "GET";
    path: "/orgs/{org}/invitations/{invitation_id}/teams";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string; invitation_id: number };
    };
    responses: { 200: Array<Schemas.team>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Orgs_list__issue__types = {
    method: "GET";
    path: "/orgs/{org}/issue-types";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Array<Schemas.issue_type>; 404: Schemas.basic_error };
  };
  export type post_Orgs_create__issue__type = {
    method: "POST";
    path: "/orgs/{org}/issue-types";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: Schemas.organization_create_issue_type;
    };
    responses: { 200: Schemas.issue_type; 404: Schemas.basic_error; 422: Schemas.validation_error_simple };
  };
  export type put_Orgs_update__issue__type = {
    method: "PUT";
    path: "/orgs/{org}/issue-types/{issue_type_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; issue_type_id: number };

      body: Schemas.organization_update_issue_type;
    };
    responses: { 200: Schemas.issue_type; 404: Schemas.basic_error; 422: Schemas.validation_error_simple };
  };
  export type delete_Orgs_delete__issue__type = {
    method: "DELETE";
    path: "/orgs/{org}/issue-types/{issue_type_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; issue_type_id: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error; 422: Schemas.validation_error_simple };
  };
  export type get_Issues_list__for__org = {
    method: "GET";
    path: "/orgs/{org}/issues";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        filter: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all";
        state: "open" | "closed" | "all";
        labels: string;
        type: string;
        sort: "created" | "updated" | "comments";
        direction: "asc" | "desc";
        since: string;
        per_page: number;
        page: number;
      }>;
      path: { org: string };
    };
    responses: { 200: Array<Schemas.issue>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Orgs_list__members = {
    method: "GET";
    path: "/orgs/{org}/members";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        filter: "2fa_disabled" | "2fa_insecure" | "all";
        role: "all" | "admin" | "member";
        per_page: number;
        page: number;
      }>;
      path: { org: string };
    };
    responses: { 200: Array<Schemas.simple_user>; 422: Schemas.validation_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Orgs_check__membership__for__user = {
    method: "GET";
    path: "/orgs/{org}/members/{username}";
    requestFormat: "json";
    parameters: {
      path: { org: string; username: string };
    };
    responses: { 204: unknown; 302: unknown; 404: unknown };
    responseHeaders: { 302: { Location: string } };
  };
  export type delete_Orgs_remove__member = {
    method: "DELETE";
    path: "/orgs/{org}/members/{username}";
    requestFormat: "json";
    parameters: {
      path: { org: string; username: string };
    };
    responses: { 204: unknown; 403: Schemas.basic_error };
  };
  export type get_Codespaces_get__codespaces__for__user__in__org = {
    method: "GET";
    path: "/orgs/{org}/members/{username}/codespaces";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string; username: string };
    };
    responses: {
      200: { total_count: number; codespaces: Array<Schemas.codespace> };
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
    };
  };
  export type delete_Codespaces_delete__from__organization = {
    method: "DELETE";
    path: "/orgs/{org}/members/{username}/codespaces/{codespace_name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; username: string; codespace_name: string };
    };
    responses: {
      202: Record<string, unknown>;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
    };
  };
  export type post_Codespaces_stop__in__organization = {
    method: "POST";
    path: "/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop";
    requestFormat: "json";
    parameters: {
      path: { org: string; username: string; codespace_name: string };
    };
    responses: {
      200: Schemas.codespace;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
    };
  };
  export type get_Copilot_get__copilot__seat__details__for__user = {
    method: "GET";
    path: "/orgs/{org}/members/{username}/copilot";
    requestFormat: "json";
    parameters: {
      path: { org: string; username: string };
    };
    responses: {
      200: Schemas.copilot_seat_details;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: unknown;
      500: Schemas.basic_error;
    };
  };
  export type get_Orgs_get__membership__for__user = {
    method: "GET";
    path: "/orgs/{org}/memberships/{username}";
    requestFormat: "json";
    parameters: {
      path: { org: string; username: string };
    };
    responses: { 200: Schemas.org_membership; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type put_Orgs_set__membership__for__user = {
    method: "PUT";
    path: "/orgs/{org}/memberships/{username}";
    requestFormat: "json";
    parameters: {
      path: { org: string; username: string };

      body: Partial<{ role: "admin" | "member" }>;
    };
    responses: { 200: Schemas.org_membership; 403: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type delete_Orgs_remove__membership__for__user = {
    method: "DELETE";
    path: "/orgs/{org}/memberships/{username}";
    requestFormat: "json";
    parameters: {
      path: { org: string; username: string };
    };
    responses: { 204: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Migrations_list__for__org = {
    method: "GET";
    path: "/orgs/{org}/migrations";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number; exclude: Array<"repositories"> }>;
      path: { org: string };
    };
    responses: { 200: Array<Schemas.migration> };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Migrations_start__for__org = {
    method: "POST";
    path: "/orgs/{org}/migrations";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: {
        repositories: Array<string>;
        lock_repositories?: boolean | undefined;
        exclude_metadata?: boolean | undefined;
        exclude_git_data?: boolean | undefined;
        exclude_attachments?: boolean | undefined;
        exclude_releases?: boolean | undefined;
        exclude_owner_projects?: boolean | undefined;
        org_metadata_only?: boolean | undefined;
        exclude?: Array<"repositories"> | undefined;
      };
    };
    responses: { 201: Schemas.migration; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Migrations_get__status__for__org = {
    method: "GET";
    path: "/orgs/{org}/migrations/{migration_id}";
    requestFormat: "json";
    parameters: {
      query: Partial<{ exclude: Array<"repositories"> }>;
      path: { org: string; migration_id: number };
    };
    responses: { 200: Schemas.migration; 404: Schemas.basic_error };
  };
  export type get_Migrations_download__archive__for__org = {
    method: "GET";
    path: "/orgs/{org}/migrations/{migration_id}/archive";
    requestFormat: "json";
    parameters: {
      path: { org: string; migration_id: number };
    };
    responses: { 302: unknown; 404: Schemas.basic_error };
  };
  export type delete_Migrations_delete__archive__for__org = {
    method: "DELETE";
    path: "/orgs/{org}/migrations/{migration_id}/archive";
    requestFormat: "json";
    parameters: {
      path: { org: string; migration_id: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type delete_Migrations_unlock__repo__for__org = {
    method: "DELETE";
    path: "/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock";
    requestFormat: "json";
    parameters: {
      path: { org: string; migration_id: number; repo_name: string };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type get_Migrations_list__repos__for__org = {
    method: "GET";
    path: "/orgs/{org}/migrations/{migration_id}/repositories";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string; migration_id: number };
    };
    responses: { 200: Array<Schemas.minimal_repository>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Orgs_list__org__roles = {
    method: "GET";
    path: "/orgs/{org}/organization-roles";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: {
      200: Partial<{ total_count: number; roles: Array<Schemas.organization_role> }>;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type delete_Orgs_revoke__all__org__roles__team = {
    method: "DELETE";
    path: "/orgs/{org}/organization-roles/teams/{team_slug}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string };
    };
    responses: { 204: unknown };
  };
  export type put_Orgs_assign__team__to__org__role = {
    method: "PUT";
    path: "/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string; role_id: number };
    };
    responses: { 204: unknown; 404: unknown; 422: unknown };
  };
  export type delete_Orgs_revoke__org__role__team = {
    method: "DELETE";
    path: "/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string; role_id: number };
    };
    responses: { 204: unknown };
  };
  export type delete_Orgs_revoke__all__org__roles__user = {
    method: "DELETE";
    path: "/orgs/{org}/organization-roles/users/{username}";
    requestFormat: "json";
    parameters: {
      path: { org: string; username: string };
    };
    responses: { 204: unknown };
  };
  export type put_Orgs_assign__user__to__org__role = {
    method: "PUT";
    path: "/orgs/{org}/organization-roles/users/{username}/{role_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; username: string; role_id: number };
    };
    responses: { 204: unknown; 404: unknown; 422: unknown };
  };
  export type delete_Orgs_revoke__org__role__user = {
    method: "DELETE";
    path: "/orgs/{org}/organization-roles/users/{username}/{role_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; username: string; role_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Orgs_get__org__role = {
    method: "GET";
    path: "/orgs/{org}/organization-roles/{role_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; role_id: number };
    };
    responses: { 200: Schemas.organization_role; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Orgs_list__org__role__teams = {
    method: "GET";
    path: "/orgs/{org}/organization-roles/{role_id}/teams";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string; role_id: number };
    };
    responses: { 200: Array<Schemas.team_role_assignment>; 404: unknown; 422: unknown };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Orgs_list__org__role__users = {
    method: "GET";
    path: "/orgs/{org}/organization-roles/{role_id}/users";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string; role_id: number };
    };
    responses: { 200: Array<Schemas.user_role_assignment>; 404: unknown; 422: unknown };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Orgs_list__outside__collaborators = {
    method: "GET";
    path: "/orgs/{org}/outside_collaborators";
    requestFormat: "json";
    parameters: {
      query: Partial<{ filter: "2fa_disabled" | "2fa_insecure" | "all"; per_page: number; page: number }>;
      path: { org: string };
    };
    responses: { 200: Array<Schemas.simple_user> };
    responseHeaders: { 200: { Link: string } };
  };
  export type put_Orgs_convert__member__to__outside__collaborator = {
    method: "PUT";
    path: "/orgs/{org}/outside_collaborators/{username}";
    requestFormat: "json";
    parameters: {
      path: { org: string; username: string };

      body: Partial<{ async: boolean }>;
    };
    responses: { 202: Partial<{}>; 204: unknown; 403: unknown; 404: Schemas.basic_error };
  };
  export type delete_Orgs_remove__outside__collaborator = {
    method: "DELETE";
    path: "/orgs/{org}/outside_collaborators/{username}";
    requestFormat: "json";
    parameters: {
      path: { org: string; username: string };
    };
    responses: { 204: unknown; 422: Partial<{ message: string; documentation_url: string }> };
  };
  export type get_Packages_list__packages__for__organization = {
    method: "GET";
    path: "/orgs/{org}/packages";
    requestFormat: "json";
    parameters: {
      query: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        visibility?: ("public" | "private" | "internal") | undefined;
        page?: number | undefined;
        per_page?: number | undefined;
      };
      path: { org: string };
    };
    responses: { 200: Array<Schemas.Schema_package>; 400: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error };
  };
  export type get_Packages_get__package__for__organization = {
    method: "GET";
    path: "/orgs/{org}/packages/{package_type}/{package_name}";
    requestFormat: "json";
    parameters: {
      path: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        package_name: string;
        org: string;
      };
    };
    responses: { 200: Schemas.Schema_package };
  };
  export type delete_Packages_delete__package__for__org = {
    method: "DELETE";
    path: "/orgs/{org}/packages/{package_type}/{package_name}";
    requestFormat: "json";
    parameters: {
      path: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        package_name: string;
        org: string;
      };
    };
    responses: { 204: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type post_Packages_restore__package__for__org = {
    method: "POST";
    path: "/orgs/{org}/packages/{package_type}/{package_name}/restore";
    requestFormat: "json";
    parameters: {
      query: Partial<{ token: string }>;
      path: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        package_name: string;
        org: string;
      };
    };
    responses: { 204: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Packages_get__all__package__versions__for__package__owned__by__org = {
    method: "GET";
    path: "/orgs/{org}/packages/{package_type}/{package_name}/versions";
    requestFormat: "json";
    parameters: {
      query: Partial<{ page: number; per_page: number; state: "active" | "deleted" }>;
      path: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        package_name: string;
        org: string;
      };
    };
    responses: {
      200: Array<Schemas.package_version>;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type get_Packages_get__package__version__for__organization = {
    method: "GET";
    path: "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}";
    requestFormat: "json";
    parameters: {
      path: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        package_name: string;
        org: string;
        package_version_id: number;
      };
    };
    responses: { 200: Schemas.package_version };
  };
  export type delete_Packages_delete__package__version__for__org = {
    method: "DELETE";
    path: "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}";
    requestFormat: "json";
    parameters: {
      path: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        package_name: string;
        org: string;
        package_version_id: number;
      };
    };
    responses: { 204: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type post_Packages_restore__package__version__for__org = {
    method: "POST";
    path: "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore";
    requestFormat: "json";
    parameters: {
      path: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        package_name: string;
        org: string;
        package_version_id: number;
      };
    };
    responses: { 204: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Orgs_list__pat__grant__requests = {
    method: "GET";
    path: "/orgs/{org}/personal-access-token-requests";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        per_page: number;
        page: number;
        sort: "created_at";
        direction: "asc" | "desc";
        owner: Array<string>;
        repository: string;
        permission: string;
        last_used_before: string;
        last_used_after: string;
        token_id: Array<string>;
      }>;
      path: { org: string };
    };
    responses: {
      200: Array<Schemas.organization_programmatic_access_grant_request>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
      500: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Orgs_review__pat__grant__requests__in__bulk = {
    method: "POST";
    path: "/orgs/{org}/personal-access-token-requests";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: {
        pat_request_ids?: Array<number> | undefined;
        action: "approve" | "deny";
        reason?: (string | null) | undefined;
      };
    };
    responses: {
      202: Record<string, unknown>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
      500: Schemas.basic_error;
    };
  };
  export type post_Orgs_review__pat__grant__request = {
    method: "POST";
    path: "/orgs/{org}/personal-access-token-requests/{pat_request_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; pat_request_id: number };

      body: { action: "approve" | "deny"; reason?: (string | null) | undefined };
    };
    responses: {
      204: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
      500: Schemas.basic_error;
    };
  };
  export type get_Orgs_list__pat__grant__request__repositories = {
    method: "GET";
    path: "/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string; pat_request_id: number };
    };
    responses: {
      200: Array<Schemas.minimal_repository>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Orgs_list__pat__grants = {
    method: "GET";
    path: "/orgs/{org}/personal-access-tokens";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        per_page: number;
        page: number;
        sort: "created_at";
        direction: "asc" | "desc";
        owner: Array<string>;
        repository: string;
        permission: string;
        last_used_before: string;
        last_used_after: string;
        token_id: Array<string>;
      }>;
      path: { org: string };
    };
    responses: {
      200: Array<Schemas.organization_programmatic_access_grant>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
      500: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Orgs_update__pat__accesses = {
    method: "POST";
    path: "/orgs/{org}/personal-access-tokens";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: { action: "revoke"; pat_ids: Array<number> };
    };
    responses: {
      202: Record<string, unknown>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
      500: Schemas.basic_error;
    };
  };
  export type post_Orgs_update__pat__access = {
    method: "POST";
    path: "/orgs/{org}/personal-access-tokens/{pat_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; pat_id: number };

      body: { action: "revoke" };
    };
    responses: {
      204: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
      500: Schemas.basic_error;
    };
  };
  export type get_Orgs_list__pat__grant__repositories = {
    method: "GET";
    path: "/orgs/{org}/personal-access-tokens/{pat_id}/repositories";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string; pat_id: number };
    };
    responses: {
      200: Array<Schemas.minimal_repository>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Private__registries_list__org__private__registries = {
    method: "GET";
    path: "/orgs/{org}/private-registries";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string };
    };
    responses: {
      200: { total_count: number; configurations: Array<Schemas.org_private_registry_configuration> };
      400: Schemas.scim_error;
      404: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Private__registries_create__org__private__registry = {
    method: "POST";
    path: "/orgs/{org}/private-registries";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: {
        registry_type:
          | "maven_repository"
          | "nuget_feed"
          | "goproxy_server"
          | "npm_registry"
          | "rubygems_server"
          | "cargo_registry"
          | "composer_repository"
          | "docker_registry"
          | "git_source"
          | "helm_registry"
          | "hex_organization"
          | "hex_repository"
          | "pub_repository"
          | "python_index"
          | "terraform_registry";
        url: string;
        username?: (string | null) | undefined;
        encrypted_value: string;
        key_id: string;
        visibility: "all" | "private" | "selected";
        selected_repository_ids?: Array<number> | undefined;
      };
    };
    responses: {
      201: Schemas.org_private_registry_configuration_with_selected_repositories;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Private__registries_get__org__public__key = {
    method: "GET";
    path: "/orgs/{org}/private-registries/public-key";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: { key_id: string; key: string }; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Private__registries_get__org__private__registry = {
    method: "GET";
    path: "/orgs/{org}/private-registries/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string };
    };
    responses: { 200: Schemas.org_private_registry_configuration; 404: Schemas.basic_error };
  };
  export type patch_Private__registries_update__org__private__registry = {
    method: "PATCH";
    path: "/orgs/{org}/private-registries/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string };

      body: Partial<{
        registry_type:
          | "maven_repository"
          | "nuget_feed"
          | "goproxy_server"
          | "npm_registry"
          | "rubygems_server"
          | "cargo_registry"
          | "composer_repository"
          | "docker_registry"
          | "git_source"
          | "helm_registry"
          | "hex_organization"
          | "hex_repository"
          | "pub_repository"
          | "python_index"
          | "terraform_registry";
        url: string;
        username: string | null;
        encrypted_value: string;
        key_id: string;
        visibility: "all" | "private" | "selected";
        selected_repository_ids: Array<number>;
      }>;
    };
    responses: { 204: unknown; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type delete_Private__registries_delete__org__private__registry = {
    method: "DELETE";
    path: "/orgs/{org}/private-registries/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; secret_name: string };
    };
    responses: { 204: unknown; 400: Schemas.scim_error; 404: Schemas.basic_error };
  };
  export type get_Orgs_get__all__custom__properties = {
    method: "GET";
    path: "/orgs/{org}/properties/schema";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Array<Schemas.custom_property>; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type patch_Orgs_create__or__update__custom__properties = {
    method: "PATCH";
    path: "/orgs/{org}/properties/schema";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: { properties: Array<Schemas.custom_property> };
    };
    responses: { 200: Array<Schemas.custom_property>; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Orgs_get__custom__property = {
    method: "GET";
    path: "/orgs/{org}/properties/schema/{custom_property_name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; custom_property_name: string };
    };
    responses: { 200: Schemas.custom_property; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type put_Orgs_create__or__update__custom__property = {
    method: "PUT";
    path: "/orgs/{org}/properties/schema/{custom_property_name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; custom_property_name: string };

      body: Schemas.custom_property_set_payload;
    };
    responses: { 200: Schemas.custom_property; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type delete_Orgs_remove__custom__property = {
    method: "DELETE";
    path: "/orgs/{org}/properties/schema/{custom_property_name}";
    requestFormat: "json";
    parameters: {
      path: { org: string; custom_property_name: string };
    };
    responses: { 204: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Orgs_list__custom__properties__values__for__repos = {
    method: "GET";
    path: "/orgs/{org}/properties/values";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number; repository_query: string }>;
      path: { org: string };
    };
    responses: {
      200: Array<Schemas.org_repo_custom_property_values>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type patch_Orgs_create__or__update__custom__properties__values__for__repos = {
    method: "PATCH";
    path: "/orgs/{org}/properties/values";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: { repository_names: Array<string>; properties: Array<Schemas.custom_property_value> };
    };
    responses: { 204: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Orgs_list__public__members = {
    method: "GET";
    path: "/orgs/{org}/public_members";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string };
    };
    responses: { 200: Array<Schemas.simple_user> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Orgs_check__public__membership__for__user = {
    method: "GET";
    path: "/orgs/{org}/public_members/{username}";
    requestFormat: "json";
    parameters: {
      path: { org: string; username: string };
    };
    responses: { 204: unknown; 404: unknown };
  };
  export type put_Orgs_set__public__membership__for__authenticated__user = {
    method: "PUT";
    path: "/orgs/{org}/public_members/{username}";
    requestFormat: "json";
    parameters: {
      path: { org: string; username: string };
    };
    responses: { 204: unknown; 403: Schemas.basic_error };
  };
  export type delete_Orgs_remove__public__membership__for__authenticated__user = {
    method: "DELETE";
    path: "/orgs/{org}/public_members/{username}";
    requestFormat: "json";
    parameters: {
      path: { org: string; username: string };
    };
    responses: { 204: unknown };
  };
  export type get_Repos_list__for__org = {
    method: "GET";
    path: "/orgs/{org}/repos";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        type: "all" | "public" | "private" | "forks" | "sources" | "member";
        sort: "created" | "updated" | "pushed" | "full_name";
        direction: "asc" | "desc";
        per_page: number;
        page: number;
      }>;
      path: { org: string };
    };
    responses: { 200: Array<Schemas.minimal_repository> };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Repos_create__in__org = {
    method: "POST";
    path: "/orgs/{org}/repos";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: {
        name: string;
        description?: string | undefined;
        homepage?: string | undefined;
        private?: boolean | undefined;
        visibility?: ("public" | "private") | undefined;
        has_issues?: boolean | undefined;
        has_projects?: boolean | undefined;
        has_wiki?: boolean | undefined;
        has_downloads?: boolean | undefined;
        is_template?: boolean | undefined;
        team_id?: number | undefined;
        auto_init?: boolean | undefined;
        gitignore_template?: string | undefined;
        license_template?: string | undefined;
        allow_squash_merge?: boolean | undefined;
        allow_merge_commit?: boolean | undefined;
        allow_rebase_merge?: boolean | undefined;
        allow_auto_merge?: boolean | undefined;
        delete_branch_on_merge?: boolean | undefined;
        use_squash_pr_title_as_default?: boolean | undefined;
        squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
        squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
        merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
        merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
        custom_properties?: Record<string, unknown> | undefined;
      };
    };
    responses: { 201: Schemas.full_repository; 403: Schemas.basic_error; 422: Schemas.validation_error };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Repos_get__org__rulesets = {
    method: "GET";
    path: "/orgs/{org}/rulesets";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number; targets: string }>;
      path: { org: string };
    };
    responses: { 200: Array<Schemas.repository_ruleset>; 404: Schemas.basic_error; 500: Schemas.basic_error };
  };
  export type post_Repos_create__org__ruleset = {
    method: "POST";
    path: "/orgs/{org}/rulesets";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: {
        name: string;
        target?: ("branch" | "tag" | "push" | "repository") | undefined;
        enforcement: Schemas.repository_rule_enforcement;
        bypass_actors?: Array<Schemas.repository_ruleset_bypass_actor> | undefined;
        conditions?: Schemas.org_ruleset_conditions | undefined;
        rules?: Array<Schemas.org_rules> | undefined;
      };
    };
    responses: { 201: Schemas.repository_ruleset; 404: Schemas.basic_error; 500: Schemas.basic_error };
  };
  export type get_Repos_get__org__rule__suites = {
    method: "GET";
    path: "/orgs/{org}/rulesets/rule-suites";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        ref: string;
        repository_name: string;
        time_period: "hour" | "day" | "week" | "month";
        actor_name: string;
        rule_suite_result: "pass" | "fail" | "bypass" | "all";
        per_page: number;
        page: number;
      }>;
      path: { org: string };
    };
    responses: { 200: Schemas.rule_suites; 404: Schemas.basic_error; 500: Schemas.basic_error };
  };
  export type get_Repos_get__org__rule__suite = {
    method: "GET";
    path: "/orgs/{org}/rulesets/rule-suites/{rule_suite_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; rule_suite_id: number };
    };
    responses: { 200: Schemas.rule_suite; 404: Schemas.basic_error; 500: Schemas.basic_error };
  };
  export type get_Repos_get__org__ruleset = {
    method: "GET";
    path: "/orgs/{org}/rulesets/{ruleset_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; ruleset_id: number };
    };
    responses: { 200: Schemas.repository_ruleset; 404: Schemas.basic_error; 500: Schemas.basic_error };
  };
  export type put_Repos_update__org__ruleset = {
    method: "PUT";
    path: "/orgs/{org}/rulesets/{ruleset_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; ruleset_id: number };

      body: Partial<{
        name: string;
        target: "branch" | "tag" | "push" | "repository";
        enforcement: Schemas.repository_rule_enforcement;
        bypass_actors: Array<Schemas.repository_ruleset_bypass_actor>;
        conditions: Schemas.org_ruleset_conditions;
        rules: Array<Schemas.org_rules>;
      }>;
    };
    responses: { 200: Schemas.repository_ruleset; 404: Schemas.basic_error; 500: Schemas.basic_error };
  };
  export type delete_Repos_delete__org__ruleset = {
    method: "DELETE";
    path: "/orgs/{org}/rulesets/{ruleset_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; ruleset_id: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error; 500: Schemas.basic_error };
  };
  export type get_Orgs_get__org__ruleset__history = {
    method: "GET";
    path: "/orgs/{org}/rulesets/{ruleset_id}/history";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string; ruleset_id: number };
    };
    responses: { 200: Array<Schemas.ruleset_version>; 404: Schemas.basic_error; 500: Schemas.basic_error };
  };
  export type get_Orgs_get__org__ruleset__version = {
    method: "GET";
    path: "/orgs/{org}/rulesets/{ruleset_id}/history/{version_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; ruleset_id: number; version_id: number };
    };
    responses: { 200: Schemas.ruleset_version_with_state; 404: Schemas.basic_error; 500: Schemas.basic_error };
  };
  export type get_Secret__scanning_list__alerts__for__org = {
    method: "GET";
    path: "/orgs/{org}/secret-scanning/alerts";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        state: "open" | "resolved";
        secret_type: string;
        resolution: string;
        sort: "created" | "updated";
        direction: "asc" | "desc";
        page: number;
        per_page: number;
        before: string;
        after: string;
        validity: string;
        is_publicly_leaked: boolean;
        is_multi_repo: boolean;
        hide_secret: boolean;
      }>;
      path: { org: string };
    };
    responses: {
      200: Array<Schemas.organization_secret_scanning_alert>;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Secret__scanning_list__org__pattern__configs = {
    method: "GET";
    path: "/orgs/{org}/secret-scanning/pattern-configurations";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: {
      200: Schemas.secret_scanning_pattern_configuration;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type patch_Secret__scanning_update__org__pattern__configs = {
    method: "PATCH";
    path: "/orgs/{org}/secret-scanning/pattern-configurations";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: Partial<{
        pattern_config_version: Schemas.secret_scanning_row_version;
        provider_pattern_settings: Array<
          Partial<{ token_type: string; push_protection_setting: "not-set" | "disabled" | "enabled" }>
        >;
        custom_pattern_settings: Array<
          Partial<{
            token_type: string;
            custom_pattern_version: Schemas.secret_scanning_row_version;
            push_protection_setting: "disabled" | "enabled";
          }>
        >;
      }>;
    };
    responses: {
      200: Partial<{ pattern_config_version: string }>;
      400: Schemas.scim_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Security__advisories_list__org__repository__advisories = {
    method: "GET";
    path: "/orgs/{org}/security-advisories";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        direction: "asc" | "desc";
        sort: "created" | "updated" | "published";
        before: string;
        after: string;
        per_page: number;
        state: "triage" | "draft" | "published" | "closed";
      }>;
      path: { org: string };
    };
    responses: { 200: Array<Schemas.repository_advisory>; 400: Schemas.scim_error; 404: Schemas.basic_error };
  };
  export type get_Billing_get__github__actions__billing__org = {
    method: "GET";
    path: "/orgs/{org}/settings/billing/actions";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Schemas.actions_billing_usage };
  };
  export type get_Billing_get__github__packages__billing__org = {
    method: "GET";
    path: "/orgs/{org}/settings/billing/packages";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Schemas.packages_billing_usage };
  };
  export type get_Billing_get__shared__storage__billing__org = {
    method: "GET";
    path: "/orgs/{org}/settings/billing/shared-storage";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Schemas.combined_billing_usage };
  };
  export type get_Hosted__compute_list__network__configurations__for__org = {
    method: "GET";
    path: "/orgs/{org}/settings/network-configurations";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string };
    };
    responses: { 200: { total_count: number; network_configurations: Array<Schemas.network_configuration> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Hosted__compute_create__network__configuration__for__org = {
    method: "POST";
    path: "/orgs/{org}/settings/network-configurations";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: { name: string; compute_service?: ("none" | "actions") | undefined; network_settings_ids: Array<string> };
    };
    responses: { 201: Schemas.network_configuration };
  };
  export type get_Hosted__compute_get__network__configuration__for__org = {
    method: "GET";
    path: "/orgs/{org}/settings/network-configurations/{network_configuration_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; network_configuration_id: string };
    };
    responses: { 200: Schemas.network_configuration };
    responseHeaders: { 200: { Link: string } };
  };
  export type patch_Hosted__compute_update__network__configuration__for__org = {
    method: "PATCH";
    path: "/orgs/{org}/settings/network-configurations/{network_configuration_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; network_configuration_id: string };

      body: Partial<{ name: string; compute_service: "none" | "actions"; network_settings_ids: Array<string> }>;
    };
    responses: { 200: Schemas.network_configuration };
  };
  export type delete_Hosted__compute_delete__network__configuration__from__org = {
    method: "DELETE";
    path: "/orgs/{org}/settings/network-configurations/{network_configuration_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; network_configuration_id: string };
    };
    responses: { 204: unknown };
  };
  export type get_Hosted__compute_get__network__settings__for__org = {
    method: "GET";
    path: "/orgs/{org}/settings/network-settings/{network_settings_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; network_settings_id: string };
    };
    responses: { 200: Schemas.network_settings };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Copilot_copilot__metrics__for__team = {
    method: "GET";
    path: "/orgs/{org}/team/{team_slug}/copilot/metrics";
    requestFormat: "json";
    parameters: {
      query: Partial<{ since: string; until: string; page: number; per_page: number }>;
      path: { org: string; team_slug: string };
    };
    responses: {
      200: Array<Schemas.copilot_usage_metrics_day>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.basic_error;
      500: Schemas.basic_error;
    };
  };
  export type get_Teams_list = {
    method: "GET";
    path: "/orgs/{org}/teams";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string };
    };
    responses: { 200: Array<Schemas.team>; 403: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Teams_create = {
    method: "POST";
    path: "/orgs/{org}/teams";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: {
        name: string;
        description?: string | undefined;
        maintainers?: Array<string> | undefined;
        repo_names?: Array<string> | undefined;
        privacy?: ("secret" | "closed") | undefined;
        notification_setting?: ("notifications_enabled" | "notifications_disabled") | undefined;
        permission?: ("pull" | "push") | undefined;
        parent_team_id?: number | undefined;
      };
    };
    responses: { 201: Schemas.team_full; 403: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Teams_get__by__name = {
    method: "GET";
    path: "/orgs/{org}/teams/{team_slug}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string };
    };
    responses: { 200: Schemas.team_full; 404: Schemas.basic_error };
  };
  export type patch_Teams_update__in__org = {
    method: "PATCH";
    path: "/orgs/{org}/teams/{team_slug}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string };

      body: Partial<{
        name: string;
        description: string;
        privacy: "secret" | "closed";
        notification_setting: "notifications_enabled" | "notifications_disabled";
        permission: "pull" | "push" | "admin";
        parent_team_id: number | null;
      }>;
    };
    responses: {
      200: Schemas.team_full;
      201: Schemas.team_full;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type delete_Teams_delete__in__org = {
    method: "DELETE";
    path: "/orgs/{org}/teams/{team_slug}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string };
    };
    responses: { 204: unknown };
  };
  export type get_Teams_list__discussions__in__org = {
    method: "GET";
    path: "/orgs/{org}/teams/{team_slug}/discussions";
    requestFormat: "json";
    parameters: {
      query: Partial<{ direction: "asc" | "desc"; per_page: number; page: number; pinned: string }>;
      path: { org: string; team_slug: string };
    };
    responses: { 200: Array<Schemas.team_discussion> };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Teams_create__discussion__in__org = {
    method: "POST";
    path: "/orgs/{org}/teams/{team_slug}/discussions";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string };

      body: { title: string; body: string; private?: boolean | undefined };
    };
    responses: { 201: Schemas.team_discussion };
  };
  export type get_Teams_get__discussion__in__org = {
    method: "GET";
    path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string; discussion_number: number };
    };
    responses: { 200: Schemas.team_discussion };
  };
  export type patch_Teams_update__discussion__in__org = {
    method: "PATCH";
    path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string; discussion_number: number };

      body: Partial<{ title: string; body: string }>;
    };
    responses: { 200: Schemas.team_discussion };
  };
  export type delete_Teams_delete__discussion__in__org = {
    method: "DELETE";
    path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string; discussion_number: number };
    };
    responses: { 204: unknown };
  };
  export type get_Teams_list__discussion__comments__in__org = {
    method: "GET";
    path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments";
    requestFormat: "json";
    parameters: {
      query: Partial<{ direction: "asc" | "desc"; per_page: number; page: number }>;
      path: { org: string; team_slug: string; discussion_number: number };
    };
    responses: { 200: Array<Schemas.team_discussion_comment> };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Teams_create__discussion__comment__in__org = {
    method: "POST";
    path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string; discussion_number: number };

      body: { body: string };
    };
    responses: { 201: Schemas.team_discussion_comment };
  };
  export type get_Teams_get__discussion__comment__in__org = {
    method: "GET";
    path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string; discussion_number: number; comment_number: number };
    };
    responses: { 200: Schemas.team_discussion_comment };
  };
  export type patch_Teams_update__discussion__comment__in__org = {
    method: "PATCH";
    path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string; discussion_number: number; comment_number: number };

      body: { body: string };
    };
    responses: { 200: Schemas.team_discussion_comment };
  };
  export type delete_Teams_delete__discussion__comment__in__org = {
    method: "DELETE";
    path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string; discussion_number: number; comment_number: number };
    };
    responses: { 204: unknown };
  };
  export type get_Reactions_list__for__team__discussion__comment__in__org = {
    method: "GET";
    path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        per_page: number;
        page: number;
      }>;
      path: { org: string; team_slug: string; discussion_number: number; comment_number: number };
    };
    responses: { 200: Array<Schemas.reaction> };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Reactions_create__for__team__discussion__comment__in__org = {
    method: "POST";
    path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string; discussion_number: number; comment_number: number };

      body: { content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes" };
    };
    responses: { 200: Schemas.reaction; 201: Schemas.reaction };
  };
  export type delete_Reactions_delete__for__team__discussion__comment = {
    method: "DELETE";
    path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string; discussion_number: number; comment_number: number; reaction_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Reactions_list__for__team__discussion__in__org = {
    method: "GET";
    path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        per_page: number;
        page: number;
      }>;
      path: { org: string; team_slug: string; discussion_number: number };
    };
    responses: { 200: Array<Schemas.reaction> };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Reactions_create__for__team__discussion__in__org = {
    method: "POST";
    path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string; discussion_number: number };

      body: { content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes" };
    };
    responses: { 200: Schemas.reaction; 201: Schemas.reaction };
  };
  export type delete_Reactions_delete__for__team__discussion = {
    method: "DELETE";
    path: "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string; discussion_number: number; reaction_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Teams_list__pending__invitations__in__org = {
    method: "GET";
    path: "/orgs/{org}/teams/{team_slug}/invitations";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string; team_slug: string };
    };
    responses: { 200: Array<Schemas.organization_invitation> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Teams_list__members__in__org = {
    method: "GET";
    path: "/orgs/{org}/teams/{team_slug}/members";
    requestFormat: "json";
    parameters: {
      query: Partial<{ role: "member" | "maintainer" | "all"; per_page: number; page: number }>;
      path: { org: string; team_slug: string };
    };
    responses: { 200: Array<Schemas.simple_user> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Teams_get__membership__for__user__in__org = {
    method: "GET";
    path: "/orgs/{org}/teams/{team_slug}/memberships/{username}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string; username: string };
    };
    responses: { 200: Schemas.team_membership; 404: unknown };
  };
  export type put_Teams_add__or__update__membership__for__user__in__org = {
    method: "PUT";
    path: "/orgs/{org}/teams/{team_slug}/memberships/{username}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string; username: string };

      body: Partial<{ role: "member" | "maintainer" }>;
    };
    responses: { 200: Schemas.team_membership; 403: unknown; 422: unknown };
  };
  export type delete_Teams_remove__membership__for__user__in__org = {
    method: "DELETE";
    path: "/orgs/{org}/teams/{team_slug}/memberships/{username}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string; username: string };
    };
    responses: { 204: unknown; 403: unknown };
  };
  export type get_Teams_list__repos__in__org = {
    method: "GET";
    path: "/orgs/{org}/teams/{team_slug}/repos";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string; team_slug: string };
    };
    responses: { 200: Array<Schemas.minimal_repository> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Teams_check__permissions__for__repo__in__org = {
    method: "GET";
    path: "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string; owner: string; repo: string };
    };
    responses: { 200: Schemas.team_repository; 204: unknown; 404: unknown };
  };
  export type put_Teams_add__or__update__repo__permissions__in__org = {
    method: "PUT";
    path: "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string; owner: string; repo: string };

      body: Partial<{ permission: string }>;
    };
    responses: { 204: unknown };
  };
  export type delete_Teams_remove__repo__in__org = {
    method: "DELETE";
    path: "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}";
    requestFormat: "json";
    parameters: {
      path: { org: string; team_slug: string; owner: string; repo: string };
    };
    responses: { 204: unknown };
  };
  export type get_Teams_list__child__in__org = {
    method: "GET";
    path: "/orgs/{org}/teams/{team_slug}/teams";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { org: string; team_slug: string };
    };
    responses: { 200: Array<Schemas.team> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Rate__limit_get = {
    method: "GET";
    path: "/rate_limit";
    requestFormat: "json";
    parameters: never;
    responses: { 200: Schemas.rate_limit_overview; 304: unknown; 404: Schemas.basic_error };
    responseHeaders: {
      200: { "X-RateLimit-Limit": number; "X-RateLimit-Remaining": number; "X-RateLimit-Reset": number };
    };
  };
  export type get_Repos_get = {
    method: "GET";
    path: "/repos/{owner}/{repo}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: {
      200: Schemas.full_repository;
      301: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type patch_Repos_update = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: Partial<{
        name: string;
        description: string;
        homepage: string;
        private: boolean;
        visibility: "public" | "private";
        security_and_analysis: Partial<{
          advanced_security: Partial<{ status: string }>;
          code_security: Partial<{ status: string }>;
          secret_scanning: Partial<{ status: string }>;
          secret_scanning_push_protection: Partial<{ status: string }>;
          secret_scanning_ai_detection: Partial<{ status: string }>;
          secret_scanning_non_provider_patterns: Partial<{ status: string }>;
        }> | null;
        has_issues: boolean;
        has_projects: boolean;
        has_wiki: boolean;
        is_template: boolean;
        default_branch: string;
        allow_squash_merge: boolean;
        allow_merge_commit: boolean;
        allow_rebase_merge: boolean;
        allow_auto_merge: boolean;
        delete_branch_on_merge: boolean;
        allow_update_branch: boolean;
        use_squash_pr_title_as_default: boolean;
        squash_merge_commit_title: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
        squash_merge_commit_message: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
        merge_commit_title: "PR_TITLE" | "MERGE_MESSAGE";
        merge_commit_message: "PR_BODY" | "PR_TITLE" | "BLANK";
        archived: boolean;
        allow_forking: boolean;
        web_commit_signoff_required: boolean;
      }>;
    };
    responses: {
      200: Schemas.full_repository;
      307: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type delete_Repos_delete = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: {
      204: unknown;
      307: Schemas.basic_error;
      403: Partial<{ message: string; documentation_url: string }>;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
    };
  };
  export type get_Actions_list__artifacts__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/artifacts";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number; name: string }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: { total_count: number; artifacts: Array<Schemas.artifact> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Actions_get__artifact = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; artifact_id: number };
    };
    responses: { 200: Schemas.artifact };
  };
  export type delete_Actions_delete__artifact = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; artifact_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Actions_download__artifact = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; artifact_id: number; archive_format: string };
    };
    responses: { 302: unknown; 410: Schemas.basic_error };
    responseHeaders: { 302: { Location: string } };
  };
  export type get_Actions_get__actions__cache__usage = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/cache/usage";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.actions_cache_usage_by_repository };
  };
  export type get_Actions_get__actions__cache__list = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/caches";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        per_page: number;
        page: number;
        ref: string;
        key: string;
        sort: "created_at" | "last_accessed_at" | "size_in_bytes";
        direction: "asc" | "desc";
      }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.actions_cache_list };
    responseHeaders: { 200: { Link: string } };
  };
  export type delete_Actions_delete__actions__cache__by__key = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/actions/caches";
    requestFormat: "json";
    parameters: {
      query: { key: string; ref?: string | undefined };
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.actions_cache_list };
  };
  export type delete_Actions_delete__actions__cache__by__id = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/actions/caches/{cache_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; cache_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Actions_get__job__for__workflow__run = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/jobs/{job_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; job_id: number };
    };
    responses: { 200: Schemas.job };
  };
  export type get_Actions_download__job__logs__for__workflow__run = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; job_id: number };
    };
    responses: { 302: unknown };
    responseHeaders: { 302: { Location: string } };
  };
  export type post_Actions_re__run__job__for__workflow__run = {
    method: "POST";
    path: "/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; job_id: number };

      body: Partial<{ enable_debug_logging: boolean }> | null;
    };
    responses: { 201: Schemas.empty_object; 403: Schemas.basic_error };
  };
  export type get_Actions_get__custom__oidc__sub__claim__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/oidc/customization/sub";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.oidc_custom_sub_repo; 400: Schemas.scim_error; 404: Schemas.basic_error };
  };
  export type put_Actions_set__custom__oidc__sub__claim__for__repo = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/actions/oidc/customization/sub";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: { use_default: boolean; include_claim_keys?: Array<string> | undefined };
    };
    responses: {
      201: Schemas.empty_object;
      400: Schemas.scim_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error_simple;
    };
  };
  export type get_Actions_list__repo__organization__secrets = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/organization-secrets";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: { total_count: number; secrets: Array<Schemas.actions_secret> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Actions_list__repo__organization__variables = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/organization-variables";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: { total_count: number; variables: Array<Schemas.actions_variable> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Actions_get__github__actions__permissions__repository = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/permissions";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.actions_repository_permissions };
  };
  export type put_Actions_set__github__actions__permissions__repository = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/actions/permissions";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: {
        enabled: Schemas.actions_enabled;
        allowed_actions?: Schemas.allowed_actions | undefined;
        sha_pinning_required?: Schemas.sha_pinning_required | undefined;
      };
    };
    responses: { 204: unknown };
  };
  export type get_Actions_get__workflow__access__to__repository = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/permissions/access";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.actions_workflow_access_to_repository };
  };
  export type put_Actions_set__workflow__access__to__repository = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/actions/permissions/access";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: Schemas.actions_workflow_access_to_repository;
    };
    responses: { 204: unknown };
  };
  export type get_Actions_get__artifact__and__log__retention__settings__repository = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/permissions/artifact-and-log-retention";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.actions_artifact_and_log_retention_response; 404: Schemas.basic_error };
  };
  export type put_Actions_set__artifact__and__log__retention__settings__repository = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/actions/permissions/artifact-and-log-retention";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: Schemas.actions_artifact_and_log_retention;
    };
    responses: { 204: unknown; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Actions_get__fork__pr__contributor__approval__permissions__repository = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/permissions/fork-pr-contributor-approval";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.actions_fork_pr_contributor_approval; 404: Schemas.basic_error };
  };
  export type put_Actions_set__fork__pr__contributor__approval__permissions__repository = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/actions/permissions/fork-pr-contributor-approval";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: Schemas.actions_fork_pr_contributor_approval;
    };
    responses: { 204: unknown; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Actions_get__private__repo__fork__pr__workflows__settings__repository = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/permissions/fork-pr-workflows-private-repos";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: {
      200: Schemas.actions_fork_pr_workflows_private_repos;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type put_Actions_set__private__repo__fork__pr__workflows__settings__repository = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/actions/permissions/fork-pr-workflows-private-repos";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: Schemas.actions_fork_pr_workflows_private_repos_request;
    };
    responses: { 204: unknown; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Actions_get__allowed__actions__repository = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/permissions/selected-actions";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.selected_actions };
  };
  export type put_Actions_set__allowed__actions__repository = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/actions/permissions/selected-actions";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: Schemas.selected_actions;
    };
    responses: { 204: unknown };
  };
  export type get_Actions_get__github__actions__default__workflow__permissions__repository = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/permissions/workflow";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.actions_get_default_workflow_permissions };
  };
  export type put_Actions_set__github__actions__default__workflow__permissions__repository = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/actions/permissions/workflow";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: Schemas.actions_set_default_workflow_permissions;
    };
    responses: { 204: unknown; 409: unknown };
  };
  export type get_Actions_list__self__hosted__runners__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/runners";
    requestFormat: "json";
    parameters: {
      query: Partial<{ name: string; per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: { total_count: number; runners: Array<Schemas.runner> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Actions_list__runner__applications__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/runners/downloads";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.runner_application> };
  };
  export type post_Actions_generate__runner__jitconfig__for__repo = {
    method: "POST";
    path: "/repos/{owner}/{repo}/actions/runners/generate-jitconfig";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: { name: string; runner_group_id: number; labels: Array<string>; work_folder?: string | undefined };
    };
    responses: {
      201: { runner: Schemas.runner; encoded_jit_config: string };
      404: Schemas.basic_error;
      409: Schemas.basic_error;
      422: Schemas.validation_error_simple;
    };
  };
  export type post_Actions_create__registration__token__for__repo = {
    method: "POST";
    path: "/repos/{owner}/{repo}/actions/runners/registration-token";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 201: Schemas.authentication_token };
  };
  export type post_Actions_create__remove__token__for__repo = {
    method: "POST";
    path: "/repos/{owner}/{repo}/actions/runners/remove-token";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 201: Schemas.authentication_token };
  };
  export type get_Actions_get__self__hosted__runner__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/runners/{runner_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; runner_id: number };
    };
    responses: { 200: Schemas.runner };
  };
  export type delete_Actions_delete__self__hosted__runner__from__repo = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/actions/runners/{runner_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; runner_id: number };
    };
    responses: { 204: unknown; 422: Schemas.validation_error_simple };
  };
  export type get_Actions_list__labels__for__self__hosted__runner__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; runner_id: number };
    };
    responses: { 200: { total_count: number; labels: Array<Schemas.runner_label> }; 404: Schemas.basic_error };
  };
  export type post_Actions_add__custom__labels__to__self__hosted__runner__for__repo = {
    method: "POST";
    path: "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; runner_id: number };

      body: { labels: Array<string> };
    };
    responses: {
      200: { total_count: number; labels: Array<Schemas.runner_label> };
      404: Schemas.basic_error;
      422: Schemas.validation_error_simple;
    };
  };
  export type put_Actions_set__custom__labels__for__self__hosted__runner__for__repo = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; runner_id: number };

      body: { labels: Array<string> };
    };
    responses: {
      200: { total_count: number; labels: Array<Schemas.runner_label> };
      404: Schemas.basic_error;
      422: Schemas.validation_error_simple;
    };
  };
  export type delete_Actions_remove__all__custom__labels__from__self__hosted__runner__for__repo = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; runner_id: number };
    };
    responses: { 200: { total_count: number; labels: Array<Schemas.runner_label> }; 404: Schemas.basic_error };
  };
  export type delete_Actions_remove__custom__label__from__self__hosted__runner__for__repo = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; runner_id: number; name: string };
    };
    responses: {
      200: { total_count: number; labels: Array<Schemas.runner_label> };
      404: Schemas.basic_error;
      422: Schemas.validation_error_simple;
    };
  };
  export type get_Actions_list__workflow__runs__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/runs";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        actor: string;
        branch: string;
        event: string;
        status:
          | "completed"
          | "action_required"
          | "cancelled"
          | "failure"
          | "neutral"
          | "skipped"
          | "stale"
          | "success"
          | "timed_out"
          | "in_progress"
          | "queued"
          | "requested"
          | "waiting"
          | "pending";
        per_page: number;
        page: number;
        created: string;
        exclude_pull_requests: boolean;
        check_suite_id: number;
        head_sha: string;
      }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: { total_count: number; workflow_runs: Array<Schemas.workflow_run> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Actions_get__workflow__run = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/runs/{run_id}";
    requestFormat: "json";
    parameters: {
      query: Partial<{ exclude_pull_requests: boolean }>;
      path: { owner: string; repo: string; run_id: number };
    };
    responses: { 200: Schemas.workflow_run };
  };
  export type delete_Actions_delete__workflow__run = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/actions/runs/{run_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; run_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Actions_get__reviews__for__run = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; run_id: number };
    };
    responses: { 200: Array<Schemas.environment_approvals> };
  };
  export type post_Actions_approve__workflow__run = {
    method: "POST";
    path: "/repos/{owner}/{repo}/actions/runs/{run_id}/approve";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; run_id: number };
    };
    responses: { 201: Schemas.empty_object; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Actions_list__workflow__run__artifacts = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number; name: string }>;
      path: { owner: string; repo: string; run_id: number };
    };
    responses: { 200: { total_count: number; artifacts: Array<Schemas.artifact> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Actions_get__workflow__run__attempt = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}";
    requestFormat: "json";
    parameters: {
      query: Partial<{ exclude_pull_requests: boolean }>;
      path: { owner: string; repo: string; run_id: number; attempt_number: number };
    };
    responses: { 200: Schemas.workflow_run };
  };
  export type get_Actions_list__jobs__for__workflow__run__attempt = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; run_id: number; attempt_number: number };
    };
    responses: { 200: { total_count: number; jobs: Array<Schemas.job> }; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Actions_download__workflow__run__attempt__logs = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; run_id: number; attempt_number: number };
    };
    responses: { 302: unknown };
    responseHeaders: { 302: { Location: string } };
  };
  export type post_Actions_cancel__workflow__run = {
    method: "POST";
    path: "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; run_id: number };
    };
    responses: { 202: Schemas.empty_object; 409: Schemas.basic_error };
  };
  export type post_Actions_review__custom__gates__for__run = {
    method: "POST";
    path: "/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; run_id: number };

      body: Schemas.review_custom_gates_comment_required | Schemas.review_custom_gates_state_required;
    };
    responses: { 204: unknown };
  };
  export type post_Actions_force__cancel__workflow__run = {
    method: "POST";
    path: "/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; run_id: number };
    };
    responses: { 202: Schemas.empty_object; 409: Schemas.basic_error };
  };
  export type get_Actions_list__jobs__for__workflow__run = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs";
    requestFormat: "json";
    parameters: {
      query: Partial<{ filter: "latest" | "all"; per_page: number; page: number }>;
      path: { owner: string; repo: string; run_id: number };
    };
    responses: { 200: { total_count: number; jobs: Array<Schemas.job> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Actions_download__workflow__run__logs = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/runs/{run_id}/logs";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; run_id: number };
    };
    responses: { 302: unknown };
    responseHeaders: { 302: { Location: string } };
  };
  export type delete_Actions_delete__workflow__run__logs = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/actions/runs/{run_id}/logs";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; run_id: number };
    };
    responses: { 204: unknown; 403: Schemas.basic_error; 500: Schemas.basic_error };
  };
  export type get_Actions_get__pending__deployments__for__run = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; run_id: number };
    };
    responses: { 200: Array<Schemas.pending_deployment> };
  };
  export type post_Actions_review__pending__deployments__for__run = {
    method: "POST";
    path: "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; run_id: number };

      body: { environment_ids: Array<number>; state: "approved" | "rejected"; comment: string };
    };
    responses: { 200: Array<Schemas.deployment> };
  };
  export type post_Actions_re__run__workflow = {
    method: "POST";
    path: "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; run_id: number };

      body: Partial<{ enable_debug_logging: boolean }> | null;
    };
    responses: { 201: Schemas.empty_object };
  };
  export type post_Actions_re__run__workflow__failed__jobs = {
    method: "POST";
    path: "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; run_id: number };

      body: Partial<{ enable_debug_logging: boolean }> | null;
    };
    responses: { 201: Schemas.empty_object };
  };
  export type get_Actions_get__workflow__run__usage = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/runs/{run_id}/timing";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; run_id: number };
    };
    responses: { 200: Schemas.workflow_run_usage };
  };
  export type get_Actions_list__repo__secrets = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/secrets";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: { total_count: number; secrets: Array<Schemas.actions_secret> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Actions_get__repo__public__key = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/secrets/public-key";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.actions_public_key };
  };
  export type get_Actions_get__repo__secret = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; secret_name: string };
    };
    responses: { 200: Schemas.actions_secret };
  };
  export type put_Actions_create__or__update__repo__secret = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/actions/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; secret_name: string };

      body: { encrypted_value: string; key_id: string };
    };
    responses: { 201: Schemas.empty_object; 204: unknown };
  };
  export type delete_Actions_delete__repo__secret = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/actions/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; secret_name: string };
    };
    responses: { 204: unknown };
  };
  export type get_Actions_list__repo__variables = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/variables";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: { total_count: number; variables: Array<Schemas.actions_variable> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Actions_create__repo__variable = {
    method: "POST";
    path: "/repos/{owner}/{repo}/actions/variables";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: { name: string; value: string };
    };
    responses: { 201: Schemas.empty_object };
  };
  export type get_Actions_get__repo__variable = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/variables/{name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; name: string };
    };
    responses: { 200: Schemas.actions_variable };
  };
  export type patch_Actions_update__repo__variable = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/actions/variables/{name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; name: string };

      body: Partial<{ name: string; value: string }>;
    };
    responses: { 204: unknown };
  };
  export type delete_Actions_delete__repo__variable = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/actions/variables/{name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; name: string };
    };
    responses: { 204: unknown };
  };
  export type get_Actions_list__repo__workflows = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/workflows";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: { total_count: number; workflows: Array<Schemas.workflow> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Actions_get__workflow = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; workflow_id: number | string };
    };
    responses: { 200: Schemas.workflow };
  };
  export type put_Actions_disable__workflow = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; workflow_id: number | string };
    };
    responses: { 204: unknown };
  };
  export type post_Actions_create__workflow__dispatch = {
    method: "POST";
    path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; workflow_id: number | string };

      body: { ref: string; inputs?: Record<string, unknown> | undefined };
    };
    responses: { 204: unknown };
  };
  export type put_Actions_enable__workflow = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; workflow_id: number | string };
    };
    responses: { 204: unknown };
  };
  export type get_Actions_list__workflow__runs = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        actor: string;
        branch: string;
        event: string;
        status:
          | "completed"
          | "action_required"
          | "cancelled"
          | "failure"
          | "neutral"
          | "skipped"
          | "stale"
          | "success"
          | "timed_out"
          | "in_progress"
          | "queued"
          | "requested"
          | "waiting"
          | "pending";
        per_page: number;
        page: number;
        created: string;
        exclude_pull_requests: boolean;
        check_suite_id: number;
        head_sha: string;
      }>;
      path: { owner: string; repo: string; workflow_id: number | string };
    };
    responses: { 200: { total_count: number; workflow_runs: Array<Schemas.workflow_run> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Actions_get__workflow__usage = {
    method: "GET";
    path: "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; workflow_id: number | string };
    };
    responses: { 200: Schemas.workflow_usage };
  };
  export type get_Repos_list__activities = {
    method: "GET";
    path: "/repos/{owner}/{repo}/activity";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        direction: "asc" | "desc";
        per_page: number;
        before: string;
        after: string;
        ref: string;
        actor: string;
        time_period: "day" | "week" | "month" | "quarter" | "year";
        activity_type: "push" | "force_push" | "branch_creation" | "branch_deletion" | "pr_merge" | "merge_queue_merge";
      }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.activity>; 422: Schemas.validation_error_simple };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Issues_list__assignees = {
    method: "GET";
    path: "/repos/{owner}/{repo}/assignees";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.simple_user>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Issues_check__user__can__be__assigned = {
    method: "GET";
    path: "/repos/{owner}/{repo}/assignees/{assignee}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; assignee: string };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type post_Repos_create__attestation = {
    method: "POST";
    path: "/repos/{owner}/{repo}/attestations";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: {
        bundle: Partial<{
          mediaType: string;
          verificationMaterial: Partial<{} & Record<string, any>>;
          dsseEnvelope: Partial<{} & Record<string, any>>;
        }>;
      };
    };
    responses: { 201: Partial<{ id: number }>; 403: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Repos_list__attestations = {
    method: "GET";
    path: "/repos/{owner}/{repo}/attestations/{subject_digest}";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; before: string; after: string; predicate_type: string }>;
      path: { owner: string; repo: string; subject_digest: string };
    };
    responses: {
      200: Partial<{
        attestations: Array<
          Partial<{
            bundle: Partial<{
              mediaType: string;
              verificationMaterial: Partial<{} & Record<string, any>>;
              dsseEnvelope: Partial<{} & Record<string, any>>;
            }>;
            repository_id: number;
            bundle_url: string;
          }>
        >;
      }>;
    };
  };
  export type get_Repos_list__autolinks = {
    method: "GET";
    path: "/repos/{owner}/{repo}/autolinks";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.autolink> };
  };
  export type post_Repos_create__autolink = {
    method: "POST";
    path: "/repos/{owner}/{repo}/autolinks";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: { key_prefix: string; url_template: string; is_alphanumeric?: boolean | undefined };
    };
    responses: { 201: Schemas.autolink; 422: Schemas.validation_error };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Repos_get__autolink = {
    method: "GET";
    path: "/repos/{owner}/{repo}/autolinks/{autolink_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; autolink_id: number };
    };
    responses: { 200: Schemas.autolink; 404: Schemas.basic_error };
  };
  export type delete_Repos_delete__autolink = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/autolinks/{autolink_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; autolink_id: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type get_Repos_check__automated__security__fixes = {
    method: "GET";
    path: "/repos/{owner}/{repo}/automated-security-fixes";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.check_automated_security_fixes; 404: unknown };
  };
  export type put_Repos_enable__automated__security__fixes = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/automated-security-fixes";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 204: unknown };
  };
  export type delete_Repos_disable__automated__security__fixes = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/automated-security-fixes";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 204: unknown };
  };
  export type get_Repos_list__branches = {
    method: "GET";
    path: "/repos/{owner}/{repo}/branches";
    requestFormat: "json";
    parameters: {
      query: Partial<{ protected: boolean; per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.short_branch>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Repos_get__branch = {
    method: "GET";
    path: "/repos/{owner}/{repo}/branches/{branch}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 200: Schemas.branch_with_protection; 301: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Repos_get__branch__protection = {
    method: "GET";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 200: Schemas.branch_protection; 404: Schemas.basic_error };
  };
  export type put_Repos_update__branch__protection = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };

      body: {
        required_status_checks: {
          strict: boolean;
          contexts: Array<string>;
          checks?: Array<{ context: string; app_id?: number | undefined }> | undefined;
        } | null;
        enforce_admins: boolean | null;
        required_pull_request_reviews: Partial<{
          dismissal_restrictions: Partial<{ users: Array<string>; teams: Array<string>; apps: Array<string> }>;
          dismiss_stale_reviews: boolean;
          require_code_owner_reviews: boolean;
          required_approving_review_count: number;
          require_last_push_approval: boolean;
          bypass_pull_request_allowances: Partial<{ users: Array<string>; teams: Array<string>; apps: Array<string> }>;
        }> | null;
        restrictions: { users: Array<string>; teams: Array<string>; apps?: Array<string> | undefined } | null;
        required_linear_history?: boolean | undefined;
        allow_force_pushes?: (boolean | null) | undefined;
        allow_deletions?: boolean | undefined;
        block_creations?: boolean | undefined;
        required_conversation_resolution?: boolean | undefined;
        lock_branch?: boolean | undefined;
        allow_fork_syncing?: boolean | undefined;
      };
    };
    responses: {
      200: Schemas.protected_branch;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error_simple;
    };
  };
  export type delete_Repos_delete__branch__protection = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 204: unknown; 403: Schemas.basic_error };
  };
  export type get_Repos_get__admin__branch__protection = {
    method: "GET";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 200: Schemas.protected_branch_admin_enforced };
  };
  export type post_Repos_set__admin__branch__protection = {
    method: "POST";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 200: Schemas.protected_branch_admin_enforced };
  };
  export type delete_Repos_delete__admin__branch__protection = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type get_Repos_get__pull__request__review__protection = {
    method: "GET";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 200: Schemas.protected_branch_pull_request_review };
  };
  export type patch_Repos_update__pull__request__review__protection = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };

      body: Partial<{
        dismissal_restrictions: Partial<{ users: Array<string>; teams: Array<string>; apps: Array<string> }>;
        dismiss_stale_reviews: boolean;
        require_code_owner_reviews: boolean;
        required_approving_review_count: number;
        require_last_push_approval: boolean;
        bypass_pull_request_allowances: Partial<{ users: Array<string>; teams: Array<string>; apps: Array<string> }>;
      }>;
    };
    responses: { 200: Schemas.protected_branch_pull_request_review; 422: Schemas.validation_error };
  };
  export type delete_Repos_delete__pull__request__review__protection = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type get_Repos_get__commit__signature__protection = {
    method: "GET";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 200: Schemas.protected_branch_admin_enforced; 404: Schemas.basic_error };
  };
  export type post_Repos_create__commit__signature__protection = {
    method: "POST";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 200: Schemas.protected_branch_admin_enforced; 404: Schemas.basic_error };
  };
  export type delete_Repos_delete__commit__signature__protection = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type get_Repos_get__status__checks__protection = {
    method: "GET";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 200: Schemas.status_check_policy; 404: Schemas.basic_error };
  };
  export type patch_Repos_update__status__check__protection = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };

      body: Partial<{
        strict: boolean;
        contexts: Array<string>;
        checks: Array<{ context: string; app_id?: number | undefined }>;
      }>;
    };
    responses: { 200: Schemas.status_check_policy; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type delete_Repos_remove__status__check__protection = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 204: unknown };
  };
  export type get_Repos_get__all__status__check__contexts = {
    method: "GET";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 200: Array<string>; 404: Schemas.basic_error };
  };
  export type post_Repos_add__status__check__contexts = {
    method: "POST";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };

      body: { contexts: Array<string> } | Array<string>;
    };
    responses: {
      200: Array<string>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type put_Repos_set__status__check__contexts = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };

      body: { contexts: Array<string> } | Array<string>;
    };
    responses: { 200: Array<string>; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type delete_Repos_remove__status__check__contexts = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };

      body: { contexts: Array<string> } | Array<string>;
    };
    responses: { 200: Array<string>; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Repos_get__access__restrictions = {
    method: "GET";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 200: Schemas.branch_restriction_policy; 404: Schemas.basic_error };
  };
  export type delete_Repos_delete__access__restrictions = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 204: unknown };
  };
  export type get_Repos_get__apps__with__access__to__protected__branch = {
    method: "GET";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 200: Array<Schemas.integration>; 404: Schemas.basic_error };
  };
  export type post_Repos_add__app__access__restrictions = {
    method: "POST";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };

      body: { apps: Array<string> };
    };
    responses: { 200: Array<Schemas.integration>; 422: Schemas.validation_error };
  };
  export type put_Repos_set__app__access__restrictions = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };

      body: { apps: Array<string> };
    };
    responses: { 200: Array<Schemas.integration>; 422: Schemas.validation_error };
  };
  export type delete_Repos_remove__app__access__restrictions = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };

      body: { apps: Array<string> };
    };
    responses: { 200: Array<Schemas.integration>; 422: Schemas.validation_error };
  };
  export type get_Repos_get__teams__with__access__to__protected__branch = {
    method: "GET";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 200: Array<Schemas.team>; 404: Schemas.basic_error };
  };
  export type post_Repos_add__team__access__restrictions = {
    method: "POST";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };

      body: { teams: Array<string> } | Array<string>;
    };
    responses: { 200: Array<Schemas.team>; 422: Schemas.validation_error };
  };
  export type put_Repos_set__team__access__restrictions = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };

      body: { teams: Array<string> } | Array<string>;
    };
    responses: { 200: Array<Schemas.team>; 422: Schemas.validation_error };
  };
  export type delete_Repos_remove__team__access__restrictions = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };

      body: { teams: Array<string> } | Array<string>;
    };
    responses: { 200: Array<Schemas.team>; 422: Schemas.validation_error };
  };
  export type get_Repos_get__users__with__access__to__protected__branch = {
    method: "GET";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 200: Array<Schemas.simple_user>; 404: Schemas.basic_error };
  };
  export type post_Repos_add__user__access__restrictions = {
    method: "POST";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };

      body: { users: Array<string> };
    };
    responses: { 200: Array<Schemas.simple_user>; 422: Schemas.validation_error };
  };
  export type put_Repos_set__user__access__restrictions = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };

      body: { users: Array<string> };
    };
    responses: { 200: Array<Schemas.simple_user>; 422: Schemas.validation_error };
  };
  export type delete_Repos_remove__user__access__restrictions = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };

      body: { users: Array<string> };
    };
    responses: { 200: Array<Schemas.simple_user>; 422: Schemas.validation_error };
  };
  export type post_Repos_rename__branch = {
    method: "POST";
    path: "/repos/{owner}/{repo}/branches/{branch}/rename";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; branch: string };

      body: { new_name: string };
    };
    responses: {
      201: Schemas.branch_with_protection;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type post_Checks_create = {
    method: "POST";
    path: "/repos/{owner}/{repo}/check-runs";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body:
        | ({ status: "completed" } & Record<string, any>)
        | Partial<{ status: "queued" | "in_progress" } & Record<string, any>>;
    };
    responses: { 201: Schemas.check_run };
  };
  export type get_Checks_get = {
    method: "GET";
    path: "/repos/{owner}/{repo}/check-runs/{check_run_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; check_run_id: number };
    };
    responses: { 200: Schemas.check_run };
  };
  export type patch_Checks_update = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/check-runs/{check_run_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; check_run_id: number };

      body:
        | ({ status?: "completed" | undefined } & Record<string, any>)
        | Partial<{ status: "queued" | "in_progress" } & Record<string, any>>;
    };
    responses: { 200: Schemas.check_run };
  };
  export type get_Checks_list__annotations = {
    method: "GET";
    path: "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; check_run_id: number };
    };
    responses: { 200: Array<Schemas.check_annotation> };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Checks_rerequest__run = {
    method: "POST";
    path: "/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; check_run_id: number };
    };
    responses: {
      201: Schemas.empty_object;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.basic_error;
    };
  };
  export type post_Checks_create__suite = {
    method: "POST";
    path: "/repos/{owner}/{repo}/check-suites";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: { head_sha: string };
    };
    responses: { 200: Schemas.check_suite; 201: Schemas.check_suite };
  };
  export type patch_Checks_set__suites__preferences = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/check-suites/preferences";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: Partial<{ auto_trigger_checks: Array<{ app_id: number; setting: boolean }> }>;
    };
    responses: { 200: Schemas.check_suite_preference };
  };
  export type get_Checks_get__suite = {
    method: "GET";
    path: "/repos/{owner}/{repo}/check-suites/{check_suite_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; check_suite_id: number };
    };
    responses: { 200: Schemas.check_suite };
  };
  export type get_Checks_list__for__suite = {
    method: "GET";
    path: "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        check_name: string;
        status: "queued" | "in_progress" | "completed";
        filter: "latest" | "all";
        per_page: number;
        page: number;
      }>;
      path: { owner: string; repo: string; check_suite_id: number };
    };
    responses: { 200: { total_count: number; check_runs: Array<Schemas.check_run> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Checks_rerequest__suite = {
    method: "POST";
    path: "/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; check_suite_id: number };
    };
    responses: { 201: Schemas.empty_object };
  };
  export type get_Code__scanning_list__alerts__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/code-scanning/alerts";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        tool_name: string;
        tool_guid: string | null;
        page: number;
        per_page: number;
        ref: string;
        pr: number;
        direction: "asc" | "desc";
        before: string;
        after: string;
        sort: "created" | "updated";
        state: "open" | "closed" | "dismissed" | "fixed";
        severity: "critical" | "high" | "medium" | "low" | "warning" | "note" | "error";
      }>;
      path: { owner: string; repo: string };
    };
    responses: {
      200: Array<Schemas.code_scanning_alert_items>;
      304: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Code__scanning_get__alert = {
    method: "GET";
    path: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; alert_number: number };
    };
    responses: {
      200: Schemas.code_scanning_alert;
      304: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type patch_Code__scanning_update__alert = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; alert_number: number };

      body: {
        state: Schemas.code_scanning_alert_set_state;
        dismissed_reason?: Schemas.code_scanning_alert_dismissed_reason | undefined;
        dismissed_comment?: Schemas.code_scanning_alert_dismissed_comment | undefined;
        create_request?: Schemas.code_scanning_alert_create_request | undefined;
      };
    };
    responses: {
      200: Schemas.code_scanning_alert;
      400: Schemas.scim_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Code__scanning_get__autofix = {
    method: "GET";
    path: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; alert_number: number };
    };
    responses: {
      200: Schemas.code_scanning_autofix;
      400: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type post_Code__scanning_create__autofix = {
    method: "POST";
    path: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; alert_number: number };
    };
    responses: {
      200: Schemas.code_scanning_autofix;
      202: Schemas.code_scanning_autofix;
      400: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: unknown;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type post_Code__scanning_commit__autofix = {
    method: "POST";
    path: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; alert_number: number };

      body: Schemas.code_scanning_autofix_commits;
    };
    responses: {
      201: Schemas.code_scanning_autofix_commits_response;
      400: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: unknown;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Code__scanning_list__alert__instances = {
    method: "GET";
    path: "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances";
    requestFormat: "json";
    parameters: {
      query: Partial<{ page: number; per_page: number; ref: string; pr: number }>;
      path: { owner: string; repo: string; alert_number: number };
    };
    responses: {
      200: Array<Schemas.code_scanning_alert_instance>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Code__scanning_list__recent__analyses = {
    method: "GET";
    path: "/repos/{owner}/{repo}/code-scanning/analyses";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        tool_name: string;
        tool_guid: string | null;
        page: number;
        per_page: number;
        pr: number;
        ref: string;
        sarif_id: string;
        direction: "asc" | "desc";
        sort: "created";
      }>;
      path: { owner: string; repo: string };
    };
    responses: {
      200: Array<Schemas.code_scanning_analysis>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Code__scanning_get__analysis = {
    method: "GET";
    path: "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; analysis_id: number };
    };
    responses: {
      200: Record<string, unknown>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type delete_Code__scanning_delete__analysis = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}";
    requestFormat: "json";
    parameters: {
      query: Partial<{ confirm_delete: string | null }>;
      path: { owner: string; repo: string; analysis_id: number };
    };
    responses: {
      200: Schemas.code_scanning_analysis_deletion;
      400: Schemas.scim_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Code__scanning_list__codeql__databases = {
    method: "GET";
    path: "/repos/{owner}/{repo}/code-scanning/codeql/databases";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: {
      200: Array<Schemas.code_scanning_codeql_database>;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Code__scanning_get__codeql__database = {
    method: "GET";
    path: "/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; language: string };
    };
    responses: {
      200: Schemas.code_scanning_codeql_database;
      302: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type delete_Code__scanning_delete__codeql__database = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; language: string };
    };
    responses: {
      204: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type post_Code__scanning_create__variant__analysis = {
    method: "POST";
    path: "/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: unknown | unknown | unknown;
    };
    responses: {
      201: Schemas.code_scanning_variant_analysis;
      404: Schemas.basic_error;
      422: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Code__scanning_get__variant__analysis = {
    method: "GET";
    path: "/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; codeql_variant_analysis_id: number };
    };
    responses: {
      200: Schemas.code_scanning_variant_analysis;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Code__scanning_get__variant__analysis__repo__task = {
    method: "GET";
    path: "/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; codeql_variant_analysis_id: number; repo_owner: string; repo_name: string };
    };
    responses: {
      200: Schemas.code_scanning_variant_analysis_repo_task;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Code__scanning_get__default__setup = {
    method: "GET";
    path: "/repos/{owner}/{repo}/code-scanning/default-setup";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: {
      200: Schemas.code_scanning_default_setup;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type patch_Code__scanning_update__default__setup = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/code-scanning/default-setup";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: Schemas.code_scanning_default_setup_update;
    };
    responses: {
      200: Schemas.empty_object;
      202: Schemas.code_scanning_default_setup_update_response;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
      422: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type post_Code__scanning_upload__sarif = {
    method: "POST";
    path: "/repos/{owner}/{repo}/code-scanning/sarifs";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: {
        commit_sha: Schemas.code_scanning_analysis_commit_sha;
        ref: Schemas.code_scanning_ref_full;
        sarif: Schemas.code_scanning_analysis_sarif_file;
        checkout_uri?: string | undefined;
        started_at?: string | undefined;
        tool_name?: string | undefined;
        validate?: boolean | undefined;
      };
    };
    responses: {
      202: Schemas.code_scanning_sarifs_receipt;
      400: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      413: unknown;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Code__scanning_get__sarif = {
    method: "GET";
    path: "/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; sarif_id: string };
    };
    responses: {
      200: Schemas.code_scanning_sarifs_status;
      403: Schemas.basic_error;
      404: unknown;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Code__security_get__configuration__for__repository = {
    method: "GET";
    path: "/repos/{owner}/{repo}/code-security-configuration";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: {
      200: Schemas.code_security_configuration_for_repository;
      204: unknown;
      304: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type get_Repos_codeowners__errors = {
    method: "GET";
    path: "/repos/{owner}/{repo}/codeowners/errors";
    requestFormat: "json";
    parameters: {
      query: Partial<{ ref: string }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.codeowners_errors; 404: unknown };
  };
  export type get_Codespaces_list__in__repository__for__authenticated__user = {
    method: "GET";
    path: "/repos/{owner}/{repo}/codespaces";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: {
      200: { total_count: number; codespaces: Array<Schemas.codespace> };
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
    };
  };
  export type post_Codespaces_create__with__repo__for__authenticated__user = {
    method: "POST";
    path: "/repos/{owner}/{repo}/codespaces";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: Partial<{
        ref: string;
        location: string;
        geo: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest";
        client_ip: string;
        machine: string;
        devcontainer_path: string;
        multi_repo_permissions_opt_out: boolean;
        working_directory: string;
        idle_timeout_minutes: number;
        display_name: string;
        retention_period_minutes: number;
      }> | null;
    };
    responses: {
      201: Schemas.codespace;
      202: Schemas.codespace;
      400: Schemas.scim_error;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Codespaces_list__devcontainers__in__repository__for__authenticated__user = {
    method: "GET";
    path: "/repos/{owner}/{repo}/codespaces/devcontainers";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: {
      200: {
        total_count: number;
        devcontainers: Array<{ path: string; name?: string | undefined; display_name?: string | undefined }>;
      };
      400: Schemas.scim_error;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
    };
  };
  export type get_Codespaces_repo__machines__for__authenticated__user = {
    method: "GET";
    path: "/repos/{owner}/{repo}/codespaces/machines";
    requestFormat: "json";
    parameters: {
      query: Partial<{ location: string; client_ip: string; ref: string }>;
      path: { owner: string; repo: string };
    };
    responses: {
      200: { total_count: number; machines: Array<Schemas.codespace_machine> };
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
    };
  };
  export type get_Codespaces_pre__flight__with__repo__for__authenticated__user = {
    method: "GET";
    path: "/repos/{owner}/{repo}/codespaces/new";
    requestFormat: "json";
    parameters: {
      query: Partial<{ ref: string; client_ip: string }>;
      path: { owner: string; repo: string };
    };
    responses: {
      200: Partial<{
        billable_owner: Schemas.simple_user;
        defaults: { location: string; devcontainer_path: string | null };
      }>;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type get_Codespaces_check__permissions__for__devcontainer = {
    method: "GET";
    path: "/repos/{owner}/{repo}/codespaces/permissions_check";
    requestFormat: "json";
    parameters: {
      query: { ref: string; devcontainer_path: string };
      path: { owner: string; repo: string };
    };
    responses: {
      200: Schemas.codespaces_permissions_check_for_devcontainer;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Codespaces_list__repo__secrets = {
    method: "GET";
    path: "/repos/{owner}/{repo}/codespaces/secrets";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: { total_count: number; secrets: Array<Schemas.repo_codespaces_secret> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Codespaces_get__repo__public__key = {
    method: "GET";
    path: "/repos/{owner}/{repo}/codespaces/secrets/public-key";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.codespaces_public_key };
  };
  export type get_Codespaces_get__repo__secret = {
    method: "GET";
    path: "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; secret_name: string };
    };
    responses: { 200: Schemas.repo_codespaces_secret };
  };
  export type put_Codespaces_create__or__update__repo__secret = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; secret_name: string };

      body: Partial<{ encrypted_value: string; key_id: string }>;
    };
    responses: { 201: Schemas.empty_object; 204: unknown };
  };
  export type delete_Codespaces_delete__repo__secret = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; secret_name: string };
    };
    responses: { 204: unknown };
  };
  export type get_Repos_list__collaborators = {
    method: "GET";
    path: "/repos/{owner}/{repo}/collaborators";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        affiliation: "outside" | "direct" | "all";
        permission: "pull" | "triage" | "push" | "maintain" | "admin";
        per_page: number;
        page: number;
      }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.collaborator>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Repos_check__collaborator = {
    method: "GET";
    path: "/repos/{owner}/{repo}/collaborators/{username}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; username: string };
    };
    responses: { 204: unknown; 404: unknown };
  };
  export type put_Repos_add__collaborator = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/collaborators/{username}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; username: string };

      body: Partial<{ permission: string }>;
    };
    responses: {
      201: Schemas.repository_invitation;
      204: unknown;
      403: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type delete_Repos_remove__collaborator = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/collaborators/{username}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; username: string };
    };
    responses: { 204: unknown; 403: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Repos_get__collaborator__permission__level = {
    method: "GET";
    path: "/repos/{owner}/{repo}/collaborators/{username}/permission";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; username: string };
    };
    responses: { 200: Schemas.repository_collaborator_permission; 404: Schemas.basic_error };
  };
  export type get_Repos_list__commit__comments__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/comments";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.commit_comment> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Repos_get__commit__comment = {
    method: "GET";
    path: "/repos/{owner}/{repo}/comments/{comment_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; comment_id: number };
    };
    responses: { 200: Schemas.commit_comment; 404: Schemas.basic_error };
  };
  export type patch_Repos_update__commit__comment = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/comments/{comment_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; comment_id: number };

      body: { body: string };
    };
    responses: { 200: Schemas.commit_comment; 404: Schemas.basic_error };
  };
  export type delete_Repos_delete__commit__comment = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/comments/{comment_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; comment_id: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type get_Reactions_list__for__commit__comment = {
    method: "GET";
    path: "/repos/{owner}/{repo}/comments/{comment_id}/reactions";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        per_page: number;
        page: number;
      }>;
      path: { owner: string; repo: string; comment_id: number };
    };
    responses: { 200: Array<Schemas.reaction>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Reactions_create__for__commit__comment = {
    method: "POST";
    path: "/repos/{owner}/{repo}/comments/{comment_id}/reactions";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; comment_id: number };

      body: { content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes" };
    };
    responses: { 200: Schemas.reaction; 201: Schemas.reaction; 422: Schemas.validation_error };
  };
  export type delete_Reactions_delete__for__commit__comment = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; comment_id: number; reaction_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Repos_list__commits = {
    method: "GET";
    path: "/repos/{owner}/{repo}/commits";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        sha: string;
        path: string;
        author: string;
        committer: string;
        since: string;
        until: string;
        per_page: number;
        page: number;
      }>;
      path: { owner: string; repo: string };
    };
    responses: {
      200: Array<Schemas.commit>;
      400: Schemas.scim_error;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
      500: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Repos_list__branches__for__head__commit = {
    method: "GET";
    path: "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; commit_sha: string };
    };
    responses: { 200: Array<Schemas.branch_short>; 409: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Repos_list__comments__for__commit = {
    method: "GET";
    path: "/repos/{owner}/{repo}/commits/{commit_sha}/comments";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; commit_sha: string };
    };
    responses: { 200: Array<Schemas.commit_comment> };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Repos_create__commit__comment = {
    method: "POST";
    path: "/repos/{owner}/{repo}/commits/{commit_sha}/comments";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; commit_sha: string };

      body: { body: string; path?: string | undefined; position?: number | undefined; line?: number | undefined };
    };
    responses: { 201: Schemas.commit_comment; 403: Schemas.basic_error; 422: Schemas.validation_error };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Repos_list__pull__requests__associated__with__commit = {
    method: "GET";
    path: "/repos/{owner}/{repo}/commits/{commit_sha}/pulls";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; commit_sha: string };
    };
    responses: { 200: Array<Schemas.pull_request_simple>; 409: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Repos_get__commit = {
    method: "GET";
    path: "/repos/{owner}/{repo}/commits/{ref}";
    requestFormat: "json";
    parameters: {
      query: Partial<{ page: number; per_page: number }>;
      path: { owner: string; repo: string; ref: string };
    };
    responses: {
      200: Schemas.commit;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
      422: Schemas.validation_error;
      500: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Checks_list__for__ref = {
    method: "GET";
    path: "/repos/{owner}/{repo}/commits/{ref}/check-runs";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        check_name: string;
        status: "queued" | "in_progress" | "completed";
        filter: "latest" | "all";
        per_page: number;
        page: number;
        app_id: number;
      }>;
      path: { owner: string; repo: string; ref: string };
    };
    responses: { 200: { total_count: number; check_runs: Array<Schemas.check_run> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Checks_list__suites__for__ref = {
    method: "GET";
    path: "/repos/{owner}/{repo}/commits/{ref}/check-suites";
    requestFormat: "json";
    parameters: {
      query: Partial<{ app_id: number; check_name: string; per_page: number; page: number }>;
      path: { owner: string; repo: string; ref: string };
    };
    responses: { 200: { total_count: number; check_suites: Array<Schemas.check_suite> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Repos_get__combined__status__for__ref = {
    method: "GET";
    path: "/repos/{owner}/{repo}/commits/{ref}/status";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; ref: string };
    };
    responses: { 200: Schemas.combined_commit_status; 404: Schemas.basic_error };
  };
  export type get_Repos_list__commit__statuses__for__ref = {
    method: "GET";
    path: "/repos/{owner}/{repo}/commits/{ref}/statuses";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; ref: string };
    };
    responses: { 200: Array<Schemas.status>; 301: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Repos_get__community__profile__metrics = {
    method: "GET";
    path: "/repos/{owner}/{repo}/community/profile";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.community_profile };
  };
  export type get_Repos_compare__commits = {
    method: "GET";
    path: "/repos/{owner}/{repo}/compare/{basehead}";
    requestFormat: "json";
    parameters: {
      query: Partial<{ page: number; per_page: number }>;
      path: { owner: string; repo: string; basehead: string };
    };
    responses: {
      200: Schemas.commit_comparison;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Repos_get__content = {
    method: "GET";
    path: "/repos/{owner}/{repo}/contents/{path}";
    requestFormat: "json";
    parameters: {
      query: Partial<{ ref: string }>;
      path: { owner: string; repo: string; path: string };
    };
    responses: {
      200: Schemas.content_directory | Schemas.content_file | Schemas.content_symlink | Schemas.content_submodule;
      302: unknown;
      304: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type put_Repos_create__or__update__file__contents = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/contents/{path}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; path: string };

      body: {
        message: string;
        content: string;
        sha?: string | undefined;
        branch?: string | undefined;
        committer?: { name: string; email: string; date?: string | undefined } | undefined;
        author?: { name: string; email: string; date?: string | undefined } | undefined;
      };
    };
    responses: {
      200: Schemas.file_commit;
      201: Schemas.file_commit;
      404: Schemas.basic_error;
      409: Schemas.basic_error | Schemas.repository_rule_violation_error;
      422: Schemas.validation_error;
    };
  };
  export type delete_Repos_delete__file = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/contents/{path}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; path: string };

      body: {
        message: string;
        sha: string;
        branch?: string | undefined;
        committer?: Partial<{ name: string; email: string }> | undefined;
        author?: Partial<{ name: string; email: string }> | undefined;
      };
    };
    responses: {
      200: Schemas.file_commit;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
      422: Schemas.validation_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Repos_list__contributors = {
    method: "GET";
    path: "/repos/{owner}/{repo}/contributors";
    requestFormat: "json";
    parameters: {
      query: Partial<{ anon: string; per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.contributor>; 204: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Dependabot_list__alerts__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/dependabot/alerts";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        state: string;
        severity: string;
        ecosystem: string;
        package: string;
        manifest: string;
        epss_percentage: string;
        has: string | Array<"patch">;
        scope: "development" | "runtime";
        sort: "created" | "updated" | "epss_percentage";
        direction: "asc" | "desc";
        page: number;
        per_page: number;
        before: string;
        after: string;
        first: number;
        last: number;
      }>;
      path: { owner: string; repo: string };
    };
    responses: {
      200: Array<Schemas.dependabot_alert>;
      304: unknown;
      400: Schemas.scim_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error_simple;
    };
  };
  export type get_Dependabot_get__alert = {
    method: "GET";
    path: "/repos/{owner}/{repo}/dependabot/alerts/{alert_number}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; alert_number: number };
    };
    responses: { 200: Schemas.dependabot_alert; 304: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type patch_Dependabot_update__alert = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/dependabot/alerts/{alert_number}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; alert_number: number };

      body: {
        state: "dismissed" | "open";
        dismissed_reason?: ("fix_started" | "inaccurate" | "no_bandwidth" | "not_used" | "tolerable_risk") | undefined;
        dismissed_comment?: string | undefined;
      };
    };
    responses: {
      200: Schemas.dependabot_alert;
      400: Schemas.scim_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
      422: Schemas.validation_error_simple;
    };
  };
  export type get_Dependabot_list__repo__secrets = {
    method: "GET";
    path: "/repos/{owner}/{repo}/dependabot/secrets";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: { total_count: number; secrets: Array<Schemas.dependabot_secret> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Dependabot_get__repo__public__key = {
    method: "GET";
    path: "/repos/{owner}/{repo}/dependabot/secrets/public-key";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.dependabot_public_key };
  };
  export type get_Dependabot_get__repo__secret = {
    method: "GET";
    path: "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; secret_name: string };
    };
    responses: { 200: Schemas.dependabot_secret };
  };
  export type put_Dependabot_create__or__update__repo__secret = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; secret_name: string };

      body: Partial<{ encrypted_value: string; key_id: string }>;
    };
    responses: { 201: Schemas.empty_object; 204: unknown };
  };
  export type delete_Dependabot_delete__repo__secret = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; secret_name: string };
    };
    responses: { 204: unknown };
  };
  export type get_Dependency__graph_diff__range = {
    method: "GET";
    path: "/repos/{owner}/{repo}/dependency-graph/compare/{basehead}";
    requestFormat: "json";
    parameters: {
      query: Partial<{ name: string }>;
      path: { owner: string; repo: string; basehead: string };
    };
    responses: { 200: Schemas.dependency_graph_diff; 403: Schemas.basic_error; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Dependency__graph_export__sbom = {
    method: "GET";
    path: "/repos/{owner}/{repo}/dependency-graph/sbom";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.dependency_graph_spdx_sbom; 403: Schemas.basic_error; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Dependency__graph_create__repository__snapshot = {
    method: "POST";
    path: "/repos/{owner}/{repo}/dependency-graph/snapshots";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: Schemas.snapshot;
    };
    responses: { 201: { id: number; created_at: string; result: string; message: string } };
  };
  export type get_Repos_list__deployments = {
    method: "GET";
    path: "/repos/{owner}/{repo}/deployments";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        sha: string;
        ref: string;
        task: string;
        environment: string | null;
        per_page: number;
        page: number;
      }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.deployment> };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Repos_create__deployment = {
    method: "POST";
    path: "/repos/{owner}/{repo}/deployments";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: {
        ref: string;
        task?: string | undefined;
        auto_merge?: boolean | undefined;
        required_contexts?: Array<string> | undefined;
        payload?: (Record<string, unknown> | string) | undefined;
        environment?: string | undefined;
        description?: (string | null) | undefined;
        transient_environment?: boolean | undefined;
        production_environment?: boolean | undefined;
      };
    };
    responses: {
      201: Schemas.deployment;
      202: Partial<{ message: string }>;
      409: unknown;
      422: Schemas.validation_error;
    };
  };
  export type get_Repos_get__deployment = {
    method: "GET";
    path: "/repos/{owner}/{repo}/deployments/{deployment_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; deployment_id: number };
    };
    responses: { 200: Schemas.deployment; 404: Schemas.basic_error };
  };
  export type delete_Repos_delete__deployment = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/deployments/{deployment_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; deployment_id: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error; 422: Schemas.validation_error_simple };
  };
  export type get_Repos_list__deployment__statuses = {
    method: "GET";
    path: "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; deployment_id: number };
    };
    responses: { 200: Array<Schemas.deployment_status>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Repos_create__deployment__status = {
    method: "POST";
    path: "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; deployment_id: number };

      body: {
        state: "error" | "failure" | "inactive" | "in_progress" | "queued" | "pending" | "success";
        target_url?: string | undefined;
        log_url?: string | undefined;
        description?: string | undefined;
        environment?: string | undefined;
        environment_url?: string | undefined;
        auto_inactive?: boolean | undefined;
      };
    };
    responses: { 201: Schemas.deployment_status; 422: Schemas.validation_error };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Repos_get__deployment__status = {
    method: "GET";
    path: "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; deployment_id: number; status_id: number };
    };
    responses: { 200: Schemas.deployment_status; 404: Schemas.basic_error };
  };
  export type post_Repos_create__dispatch__event = {
    method: "POST";
    path: "/repos/{owner}/{repo}/dispatches";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: { event_type: string; client_payload?: Record<string, unknown> | undefined };
    };
    responses: { 204: unknown; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Repos_get__all__environments = {
    method: "GET";
    path: "/repos/{owner}/{repo}/environments";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Partial<{ total_count: number; environments: Array<Schemas.environment> }> };
  };
  export type get_Repos_get__environment = {
    method: "GET";
    path: "/repos/{owner}/{repo}/environments/{environment_name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; environment_name: string };
    };
    responses: { 200: Schemas.environment };
  };
  export type put_Repos_create__or__update__environment = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/environments/{environment_name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; environment_name: string };

      body: Partial<{
        wait_timer: Schemas.wait_timer;
        prevent_self_review: Schemas.prevent_self_review;
        reviewers: Array<Partial<{ type: Schemas.deployment_reviewer_type; id: number }>> | null;
        deployment_branch_policy: Schemas.deployment_branch_policy_settings;
      }> | null;
    };
    responses: { 200: Schemas.environment; 422: Schemas.basic_error };
  };
  export type delete_Repos_delete__an__environment = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/environments/{environment_name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; environment_name: string };
    };
    responses: { 204: unknown };
  };
  export type get_Repos_list__deployment__branch__policies = {
    method: "GET";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; environment_name: string };
    };
    responses: { 200: { total_count: number; branch_policies: Array<Schemas.deployment_branch_policy> } };
  };
  export type post_Repos_create__deployment__branch__policy = {
    method: "POST";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; environment_name: string };

      body: Schemas.deployment_branch_policy_name_pattern_with_type;
    };
    responses: { 200: Schemas.deployment_branch_policy; 303: unknown; 404: unknown };
  };
  export type get_Repos_get__deployment__branch__policy = {
    method: "GET";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; environment_name: string; branch_policy_id: number };
    };
    responses: { 200: Schemas.deployment_branch_policy };
  };
  export type put_Repos_update__deployment__branch__policy = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; environment_name: string; branch_policy_id: number };

      body: Schemas.deployment_branch_policy_name_pattern;
    };
    responses: { 200: Schemas.deployment_branch_policy };
  };
  export type delete_Repos_delete__deployment__branch__policy = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; environment_name: string; branch_policy_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Repos_get__all__deployment__protection__rules = {
    method: "GET";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules";
    requestFormat: "json";
    parameters: {
      path: { environment_name: string; repo: string; owner: string };
    };
    responses: {
      200: Partial<{
        total_count: number;
        custom_deployment_protection_rules: Array<Schemas.deployment_protection_rule>;
      }>;
    };
  };
  export type post_Repos_create__deployment__protection__rule = {
    method: "POST";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules";
    requestFormat: "json";
    parameters: {
      path: { environment_name: string; repo: string; owner: string };

      body: Partial<{ integration_id: number }>;
    };
    responses: { 201: Schemas.deployment_protection_rule };
  };
  export type get_Repos_list__custom__deployment__rule__integrations = {
    method: "GET";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps";
    requestFormat: "json";
    parameters: {
      query: Partial<{ page: number; per_page: number }>;
      path: { environment_name: string; repo: string; owner: string };
    };
    responses: {
      200: Partial<{
        total_count: number;
        available_custom_deployment_protection_rule_integrations: Array<Schemas.custom_deployment_rule_app>;
      }>;
    };
  };
  export type get_Repos_get__custom__deployment__protection__rule = {
    method: "GET";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; environment_name: string; protection_rule_id: number };
    };
    responses: { 200: Schemas.deployment_protection_rule };
  };
  export type delete_Repos_disable__deployment__protection__rule = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}";
    requestFormat: "json";
    parameters: {
      path: { environment_name: string; repo: string; owner: string; protection_rule_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Actions_list__environment__secrets = {
    method: "GET";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/secrets";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; environment_name: string };
    };
    responses: { 200: { total_count: number; secrets: Array<Schemas.actions_secret> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Actions_get__environment__public__key = {
    method: "GET";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; environment_name: string };
    };
    responses: { 200: Schemas.actions_public_key };
  };
  export type get_Actions_get__environment__secret = {
    method: "GET";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; environment_name: string; secret_name: string };
    };
    responses: { 200: Schemas.actions_secret };
  };
  export type put_Actions_create__or__update__environment__secret = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; environment_name: string; secret_name: string };

      body: { encrypted_value: string; key_id: string };
    };
    responses: { 201: Schemas.empty_object; 204: unknown };
  };
  export type delete_Actions_delete__environment__secret = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; environment_name: string; secret_name: string };
    };
    responses: { 204: unknown };
  };
  export type get_Actions_list__environment__variables = {
    method: "GET";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/variables";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; environment_name: string };
    };
    responses: { 200: { total_count: number; variables: Array<Schemas.actions_variable> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Actions_create__environment__variable = {
    method: "POST";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/variables";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; environment_name: string };

      body: { name: string; value: string };
    };
    responses: { 201: Schemas.empty_object };
  };
  export type get_Actions_get__environment__variable = {
    method: "GET";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; environment_name: string; name: string };
    };
    responses: { 200: Schemas.actions_variable };
  };
  export type patch_Actions_update__environment__variable = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; name: string; environment_name: string };

      body: Partial<{ name: string; value: string }>;
    };
    responses: { 204: unknown };
  };
  export type delete_Actions_delete__environment__variable = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; name: string; environment_name: string };
    };
    responses: { 204: unknown };
  };
  export type get_Activity_list__repo__events = {
    method: "GET";
    path: "/repos/{owner}/{repo}/events";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.event> };
  };
  export type get_Repos_list__forks = {
    method: "GET";
    path: "/repos/{owner}/{repo}/forks";
    requestFormat: "json";
    parameters: {
      query: Partial<{ sort: "newest" | "oldest" | "stargazers" | "watchers"; per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.minimal_repository>; 400: Schemas.scim_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Repos_create__fork = {
    method: "POST";
    path: "/repos/{owner}/{repo}/forks";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: Partial<{ organization: string; name: string; default_branch_only: boolean }> | null;
    };
    responses: {
      202: Schemas.full_repository;
      400: Schemas.scim_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type post_Git_create__blob = {
    method: "POST";
    path: "/repos/{owner}/{repo}/git/blobs";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: { content: string; encoding?: string | undefined };
    };
    responses: {
      201: Schemas.short_blob;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
      422: Schemas.validation_error | Schemas.repository_rule_violation_error;
    };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Git_get__blob = {
    method: "GET";
    path: "/repos/{owner}/{repo}/git/blobs/{file_sha}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; file_sha: string };
    };
    responses: {
      200: Schemas.blob;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type post_Git_create__commit = {
    method: "POST";
    path: "/repos/{owner}/{repo}/git/commits";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: {
        message: string;
        tree: string;
        parents?: Array<string> | undefined;
        author?: { name: string; email: string; date?: string | undefined } | undefined;
        committer?: Partial<{ name: string; email: string; date: string }> | undefined;
        signature?: string | undefined;
      };
    };
    responses: {
      201: Schemas.git_commit;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
      422: Schemas.validation_error;
    };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Git_get__commit = {
    method: "GET";
    path: "/repos/{owner}/{repo}/git/commits/{commit_sha}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; commit_sha: string };
    };
    responses: { 200: Schemas.git_commit; 404: Schemas.basic_error; 409: Schemas.basic_error };
  };
  export type get_Git_list__matching__refs = {
    method: "GET";
    path: "/repos/{owner}/{repo}/git/matching-refs/{ref}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; ref: string };
    };
    responses: { 200: Array<Schemas.git_ref>; 409: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Git_get__ref = {
    method: "GET";
    path: "/repos/{owner}/{repo}/git/ref/{ref}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; ref: string };
    };
    responses: { 200: Schemas.git_ref; 404: Schemas.basic_error; 409: Schemas.basic_error };
  };
  export type post_Git_create__ref = {
    method: "POST";
    path: "/repos/{owner}/{repo}/git/refs";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: { ref: string; sha: string };
    };
    responses: { 201: Schemas.git_ref; 409: Schemas.basic_error; 422: Schemas.validation_error };
    responseHeaders: { 201: { Location: string } };
  };
  export type patch_Git_update__ref = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/git/refs/{ref}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; ref: string };

      body: { sha: string; force?: boolean | undefined };
    };
    responses: { 200: Schemas.git_ref; 409: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type delete_Git_delete__ref = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/git/refs/{ref}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; ref: string };
    };
    responses: { 204: unknown; 409: Schemas.basic_error; 422: unknown };
  };
  export type post_Git_create__tag = {
    method: "POST";
    path: "/repos/{owner}/{repo}/git/tags";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: {
        tag: string;
        message: string;
        object: string;
        type: "commit" | "tree" | "blob";
        tagger?: { name: string; email: string; date?: string | undefined } | undefined;
      };
    };
    responses: { 201: Schemas.git_tag; 409: Schemas.basic_error; 422: Schemas.validation_error };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Git_get__tag = {
    method: "GET";
    path: "/repos/{owner}/{repo}/git/tags/{tag_sha}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; tag_sha: string };
    };
    responses: { 200: Schemas.git_tag; 404: Schemas.basic_error; 409: Schemas.basic_error };
  };
  export type post_Git_create__tree = {
    method: "POST";
    path: "/repos/{owner}/{repo}/git/trees";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: {
        tree: Array<
          Partial<{
            path: string;
            mode: "100644" | "100755" | "040000" | "160000" | "120000";
            type: "blob" | "tree" | "commit";
            sha: string | null;
            content: string;
          }>
        >;
        base_tree?: string | undefined;
      };
    };
    responses: {
      201: Schemas.git_tree;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
      422: Schemas.validation_error;
    };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Git_get__tree = {
    method: "GET";
    path: "/repos/{owner}/{repo}/git/trees/{tree_sha}";
    requestFormat: "json";
    parameters: {
      query: Partial<{ recursive: string }>;
      path: { owner: string; repo: string; tree_sha: string };
    };
    responses: {
      200: Schemas.git_tree;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Repos_list__webhooks = {
    method: "GET";
    path: "/repos/{owner}/{repo}/hooks";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.hook>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Repos_create__webhook = {
    method: "POST";
    path: "/repos/{owner}/{repo}/hooks";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: Partial<{
        name: string;
        config: Partial<{
          url: Schemas.webhook_config_url;
          content_type: Schemas.webhook_config_content_type;
          secret: Schemas.webhook_config_secret;
          insecure_ssl: Schemas.webhook_config_insecure_ssl;
        }>;
        events: Array<string>;
        active: boolean;
      }> | null;
    };
    responses: { 201: Schemas.hook; 403: Schemas.basic_error; 404: Schemas.basic_error; 422: Schemas.validation_error };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Repos_get__webhook = {
    method: "GET";
    path: "/repos/{owner}/{repo}/hooks/{hook_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; hook_id: number };
    };
    responses: { 200: Schemas.hook; 404: Schemas.basic_error };
  };
  export type patch_Repos_update__webhook = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/hooks/{hook_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; hook_id: number };

      body: Partial<{
        config: Schemas.webhook_config;
        events: Array<string>;
        add_events: Array<string>;
        remove_events: Array<string>;
        active: boolean;
      }>;
    };
    responses: { 200: Schemas.hook; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type delete_Repos_delete__webhook = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/hooks/{hook_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; hook_id: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type get_Repos_get__webhook__config__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/hooks/{hook_id}/config";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; hook_id: number };
    };
    responses: { 200: Schemas.webhook_config };
  };
  export type patch_Repos_update__webhook__config__for__repo = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/hooks/{hook_id}/config";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; hook_id: number };

      body: Partial<{
        url: Schemas.webhook_config_url;
        content_type: Schemas.webhook_config_content_type;
        secret: Schemas.webhook_config_secret;
        insecure_ssl: Schemas.webhook_config_insecure_ssl;
      }>;
    };
    responses: { 200: Schemas.webhook_config };
  };
  export type get_Repos_list__webhook__deliveries = {
    method: "GET";
    path: "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; cursor: string }>;
      path: { owner: string; repo: string; hook_id: number };
    };
    responses: { 200: Array<Schemas.hook_delivery_item>; 400: Schemas.scim_error; 422: Schemas.validation_error };
  };
  export type get_Repos_get__webhook__delivery = {
    method: "GET";
    path: "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; hook_id: number; delivery_id: number };
    };
    responses: { 200: Schemas.hook_delivery; 400: Schemas.scim_error; 422: Schemas.validation_error };
  };
  export type post_Repos_redeliver__webhook__delivery = {
    method: "POST";
    path: "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; hook_id: number; delivery_id: number };
    };
    responses: { 202: Record<string, unknown>; 400: Schemas.scim_error; 422: Schemas.validation_error };
  };
  export type post_Repos_ping__webhook = {
    method: "POST";
    path: "/repos/{owner}/{repo}/hooks/{hook_id}/pings";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; hook_id: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type post_Repos_test__push__webhook = {
    method: "POST";
    path: "/repos/{owner}/{repo}/hooks/{hook_id}/tests";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; hook_id: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type get_Apps_get__repo__installation = {
    method: "GET";
    path: "/repos/{owner}/{repo}/installation";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.installation; 301: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Interactions_get__restrictions__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/interaction-limits";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.interaction_limit_response | Partial<{}> };
  };
  export type put_Interactions_set__restrictions__for__repo = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/interaction-limits";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: Schemas.interaction_limit;
    };
    responses: { 200: Schemas.interaction_limit_response; 409: unknown };
  };
  export type delete_Interactions_remove__restrictions__for__repo = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/interaction-limits";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 204: unknown; 409: unknown };
  };
  export type get_Repos_list__invitations = {
    method: "GET";
    path: "/repos/{owner}/{repo}/invitations";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.repository_invitation> };
    responseHeaders: { 200: { Link: string } };
  };
  export type patch_Repos_update__invitation = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/invitations/{invitation_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; invitation_id: number };

      body: Partial<{ permissions: "read" | "write" | "maintain" | "triage" | "admin" }>;
    };
    responses: { 200: Schemas.repository_invitation };
  };
  export type delete_Repos_delete__invitation = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/invitations/{invitation_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; invitation_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Issues_list__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/issues";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        milestone: string;
        state: "open" | "closed" | "all";
        assignee: string;
        type: string;
        creator: string;
        mentioned: string;
        labels: string;
        sort: "created" | "updated" | "comments";
        direction: "asc" | "desc";
        since: string;
        per_page: number;
        page: number;
      }>;
      path: { owner: string; repo: string };
    };
    responses: {
      200: Array<Schemas.issue>;
      301: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Issues_create = {
    method: "POST";
    path: "/repos/{owner}/{repo}/issues";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: {
        title: string | number;
        body?: string | undefined;
        assignee?: (string | null) | undefined;
        milestone?: ((string | number) | null) | undefined;
        labels?:
          | Array<string | Partial<{ id: number; name: string; description: string | null; color: string | null }>>
          | undefined;
        assignees?: Array<string> | undefined;
        type?: (string | null) | undefined;
      };
    };
    responses: {
      201: Schemas.issue;
      400: Schemas.scim_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      410: Schemas.basic_error;
      422: Schemas.validation_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Issues_list__comments__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/issues/comments";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        sort: "created" | "updated";
        direction: "asc" | "desc";
        since: string;
        per_page: number;
        page: number;
      }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.issue_comment>; 404: Schemas.basic_error; 422: Schemas.validation_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Issues_get__comment = {
    method: "GET";
    path: "/repos/{owner}/{repo}/issues/comments/{comment_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; comment_id: number };
    };
    responses: { 200: Schemas.issue_comment; 404: Schemas.basic_error };
  };
  export type patch_Issues_update__comment = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/issues/comments/{comment_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; comment_id: number };

      body: { body: string };
    };
    responses: { 200: Schemas.issue_comment; 422: Schemas.validation_error };
  };
  export type delete_Issues_delete__comment = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/issues/comments/{comment_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; comment_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Reactions_list__for__issue__comment = {
    method: "GET";
    path: "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        per_page: number;
        page: number;
      }>;
      path: { owner: string; repo: string; comment_id: number };
    };
    responses: { 200: Array<Schemas.reaction>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Reactions_create__for__issue__comment = {
    method: "POST";
    path: "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; comment_id: number };

      body: { content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes" };
    };
    responses: { 200: Schemas.reaction; 201: Schemas.reaction; 422: Schemas.validation_error };
  };
  export type delete_Reactions_delete__for__issue__comment = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; comment_id: number; reaction_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Issues_list__events__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/issues/events";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.issue_event>; 422: Schemas.validation_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Issues_get__event = {
    method: "GET";
    path: "/repos/{owner}/{repo}/issues/events/{event_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; event_id: number };
    };
    responses: {
      200: Schemas.issue_event;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      410: Schemas.basic_error;
    };
  };
  export type get_Issues_get = {
    method: "GET";
    path: "/repos/{owner}/{repo}/issues/{issue_number}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; issue_number: number };
    };
    responses: {
      200: Schemas.issue;
      301: Schemas.basic_error;
      304: unknown;
      404: Schemas.basic_error;
      410: Schemas.basic_error;
    };
  };
  export type patch_Issues_update = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/issues/{issue_number}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; issue_number: number };

      body: Partial<{
        title: (string | number) | null;
        body: string | null;
        assignee: string | null;
        state: "open" | "closed";
        state_reason: ("completed" | "not_planned" | "duplicate" | "reopened") | null;
        milestone: (string | number) | null;
        labels: Array<string | Partial<{ id: number; name: string; description: string | null; color: string | null }>>;
        assignees: Array<string>;
        type: string | null;
      }>;
    };
    responses: {
      200: Schemas.issue;
      301: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      410: Schemas.basic_error;
      422: Schemas.validation_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type post_Issues_add__assignees = {
    method: "POST";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/assignees";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; issue_number: number };

      body: Partial<{ assignees: Array<string> }>;
    };
    responses: { 201: Schemas.issue };
  };
  export type delete_Issues_remove__assignees = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/assignees";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; issue_number: number };

      body: Partial<{ assignees: Array<string> }>;
    };
    responses: { 200: Schemas.issue };
  };
  export type get_Issues_check__user__can__be__assigned__to__issue = {
    method: "GET";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; issue_number: number; assignee: string };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type get_Issues_list__comments = {
    method: "GET";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/comments";
    requestFormat: "json";
    parameters: {
      query: Partial<{ since: string; per_page: number; page: number }>;
      path: { owner: string; repo: string; issue_number: number };
    };
    responses: { 200: Array<Schemas.issue_comment>; 404: Schemas.basic_error; 410: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Issues_create__comment = {
    method: "POST";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/comments";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; issue_number: number };

      body: { body: string };
    };
    responses: {
      201: Schemas.issue_comment;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      410: Schemas.basic_error;
      422: Schemas.validation_error;
    };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Issues_list__dependencies__blocked__by = {
    method: "GET";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocked_by";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; issue_number: number };
    };
    responses: {
      200: Array<Schemas.issue>;
      301: Schemas.basic_error;
      404: Schemas.basic_error;
      410: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Issues_add__blocked__by__dependency = {
    method: "POST";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocked_by";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; issue_number: number };

      body: { issue_id: number };
    };
    responses: {
      201: Schemas.issue;
      301: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      410: Schemas.basic_error;
      422: Schemas.validation_error;
    };
    responseHeaders: { 201: { Location: string } };
  };
  export type delete_Issues_remove__dependency__blocked__by = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocked_by/{issue_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; issue_number: number; issue_id: number };
    };
    responses: {
      200: Schemas.issue;
      301: Schemas.basic_error;
      400: Schemas.scim_error;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      410: Schemas.basic_error;
    };
  };
  export type get_Issues_list__dependencies__blocking = {
    method: "GET";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocking";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; issue_number: number };
    };
    responses: {
      200: Array<Schemas.issue>;
      301: Schemas.basic_error;
      404: Schemas.basic_error;
      410: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Issues_list__events = {
    method: "GET";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/events";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; issue_number: number };
    };
    responses: { 200: Array<Schemas.issue_event_for_issue>; 410: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Issues_list__labels__on__issue = {
    method: "GET";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/labels";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; issue_number: number };
    };
    responses: {
      200: Array<Schemas.label>;
      301: Schemas.basic_error;
      404: Schemas.basic_error;
      410: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Issues_add__labels = {
    method: "POST";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/labels";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; issue_number: number };

      body:
        | Partial<{ labels: Array<string> }>
        | Array<string>
        | Partial<{ labels: Array<{ name: string }> }>
        | Array<{ name: string }>
        | string;
    };
    responses: {
      200: Array<Schemas.label>;
      301: Schemas.basic_error;
      404: Schemas.basic_error;
      410: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type put_Issues_set__labels = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/labels";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; issue_number: number };

      body:
        | Partial<{ labels: Array<string> }>
        | Array<string>
        | Partial<{ labels: Array<{ name: string }> }>
        | Array<{ name: string }>
        | string;
    };
    responses: {
      200: Array<Schemas.label>;
      301: Schemas.basic_error;
      404: Schemas.basic_error;
      410: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type delete_Issues_remove__all__labels = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/labels";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; issue_number: number };
    };
    responses: { 204: unknown; 301: Schemas.basic_error; 404: Schemas.basic_error; 410: Schemas.basic_error };
  };
  export type delete_Issues_remove__label = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; issue_number: number; name: string };
    };
    responses: {
      200: Array<Schemas.label>;
      301: Schemas.basic_error;
      404: Schemas.basic_error;
      410: Schemas.basic_error;
    };
  };
  export type put_Issues_lock = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/lock";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; issue_number: number };

      body: Partial<{ lock_reason: "off-topic" | "too heated" | "resolved" | "spam" }> | null;
    };
    responses: {
      204: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      410: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type delete_Issues_unlock = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/lock";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; issue_number: number };
    };
    responses: { 204: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Reactions_list__for__issue = {
    method: "GET";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/reactions";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        per_page: number;
        page: number;
      }>;
      path: { owner: string; repo: string; issue_number: number };
    };
    responses: { 200: Array<Schemas.reaction>; 404: Schemas.basic_error; 410: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Reactions_create__for__issue = {
    method: "POST";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/reactions";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; issue_number: number };

      body: { content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes" };
    };
    responses: { 200: Schemas.reaction; 201: Schemas.reaction; 422: Schemas.validation_error };
  };
  export type delete_Reactions_delete__for__issue = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; issue_number: number; reaction_id: number };
    };
    responses: { 204: unknown };
  };
  export type delete_Issues_remove__sub__issue = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/sub_issue";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; issue_number: number };

      body: { sub_issue_id: number };
    };
    responses: { 200: Schemas.issue; 400: Schemas.scim_error; 404: Schemas.basic_error };
    responseHeaders: { 200: { Location: string } };
  };
  export type get_Issues_list__sub__issues = {
    method: "GET";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/sub_issues";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; issue_number: number };
    };
    responses: { 200: Array<Schemas.issue>; 404: Schemas.basic_error; 410: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Issues_add__sub__issue = {
    method: "POST";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/sub_issues";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; issue_number: number };

      body: { sub_issue_id: number; replace_parent?: boolean | undefined };
    };
    responses: {
      201: Schemas.issue;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      410: Schemas.basic_error;
      422: Schemas.validation_error;
    };
    responseHeaders: { 201: { Location: string } };
  };
  export type patch_Issues_reprioritize__sub__issue = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; issue_number: number };

      body: { sub_issue_id: number; after_id?: number | undefined; before_id?: number | undefined };
    };
    responses: {
      200: Schemas.issue;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error_simple;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Issues_list__events__for__timeline = {
    method: "GET";
    path: "/repos/{owner}/{repo}/issues/{issue_number}/timeline";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; issue_number: number };
    };
    responses: { 200: Array<Schemas.timeline_issue_events>; 404: Schemas.basic_error; 410: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Repos_list__deploy__keys = {
    method: "GET";
    path: "/repos/{owner}/{repo}/keys";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.deploy_key> };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Repos_create__deploy__key = {
    method: "POST";
    path: "/repos/{owner}/{repo}/keys";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: { title?: string | undefined; key: string; read_only?: boolean | undefined };
    };
    responses: { 201: Schemas.deploy_key; 422: Schemas.validation_error };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Repos_get__deploy__key = {
    method: "GET";
    path: "/repos/{owner}/{repo}/keys/{key_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; key_id: number };
    };
    responses: { 200: Schemas.deploy_key; 404: Schemas.basic_error };
  };
  export type delete_Repos_delete__deploy__key = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/keys/{key_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; key_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Issues_list__labels__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/labels";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.label>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Issues_create__label = {
    method: "POST";
    path: "/repos/{owner}/{repo}/labels";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: { name: string; color?: string | undefined; description?: string | undefined };
    };
    responses: { 201: Schemas.label; 404: Schemas.basic_error; 422: Schemas.validation_error };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Issues_get__label = {
    method: "GET";
    path: "/repos/{owner}/{repo}/labels/{name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; name: string };
    };
    responses: { 200: Schemas.label; 404: Schemas.basic_error };
  };
  export type patch_Issues_update__label = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/labels/{name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; name: string };

      body: Partial<{ new_name: string; color: string; description: string }>;
    };
    responses: { 200: Schemas.label };
  };
  export type delete_Issues_delete__label = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/labels/{name}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; name: string };
    };
    responses: { 204: unknown };
  };
  export type get_Repos_list__languages = {
    method: "GET";
    path: "/repos/{owner}/{repo}/languages";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.language };
  };
  export type get_Licenses_get__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/license";
    requestFormat: "json";
    parameters: {
      query: Partial<{ ref: string }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.license_content; 404: Schemas.basic_error };
  };
  export type post_Repos_merge__upstream = {
    method: "POST";
    path: "/repos/{owner}/{repo}/merge-upstream";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: { branch: string };
    };
    responses: { 200: Schemas.merged_upstream; 409: unknown; 422: unknown };
  };
  export type post_Repos_merge = {
    method: "POST";
    path: "/repos/{owner}/{repo}/merges";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: { base: string; head: string; commit_message?: string | undefined };
    };
    responses: {
      201: Schemas.commit;
      204: unknown;
      403: Schemas.basic_error;
      404: unknown;
      409: unknown;
      422: Schemas.validation_error;
    };
  };
  export type get_Issues_list__milestones = {
    method: "GET";
    path: "/repos/{owner}/{repo}/milestones";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        state: "open" | "closed" | "all";
        sort: "due_on" | "completeness";
        direction: "asc" | "desc";
        per_page: number;
        page: number;
      }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.milestone>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Issues_create__milestone = {
    method: "POST";
    path: "/repos/{owner}/{repo}/milestones";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: {
        title: string;
        state?: ("open" | "closed") | undefined;
        description?: string | undefined;
        due_on?: string | undefined;
      };
    };
    responses: { 201: Schemas.milestone; 404: Schemas.basic_error; 422: Schemas.validation_error };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Issues_get__milestone = {
    method: "GET";
    path: "/repos/{owner}/{repo}/milestones/{milestone_number}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; milestone_number: number };
    };
    responses: { 200: Schemas.milestone; 404: Schemas.basic_error };
  };
  export type patch_Issues_update__milestone = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/milestones/{milestone_number}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; milestone_number: number };

      body: Partial<{ title: string; state: "open" | "closed"; description: string; due_on: string }>;
    };
    responses: { 200: Schemas.milestone };
  };
  export type delete_Issues_delete__milestone = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/milestones/{milestone_number}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; milestone_number: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type get_Issues_list__labels__for__milestone = {
    method: "GET";
    path: "/repos/{owner}/{repo}/milestones/{milestone_number}/labels";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; milestone_number: number };
    };
    responses: { 200: Array<Schemas.label> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Activity_list__repo__notifications__for__authenticated__user = {
    method: "GET";
    path: "/repos/{owner}/{repo}/notifications";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        all: boolean;
        participating: boolean;
        since: string;
        before: string;
        per_page: number;
        page: number;
      }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.thread> };
    responseHeaders: { 200: { Link: string } };
  };
  export type put_Activity_mark__repo__notifications__as__read = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/notifications";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: Partial<{ last_read_at: string }>;
    };
    responses: { 202: Partial<{ message: string; url: string }>; 205: unknown };
  };
  export type get_Repos_get__pages = {
    method: "GET";
    path: "/repos/{owner}/{repo}/pages";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.page; 404: Schemas.basic_error };
  };
  export type post_Repos_create__pages__site = {
    method: "POST";
    path: "/repos/{owner}/{repo}/pages";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: (unknown | unknown) | null;
    };
    responses: { 201: Schemas.page; 409: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type put_Repos_update__information__about__pages__site = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/pages";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: unknown | unknown | unknown | unknown | unknown;
    };
    responses: { 204: unknown; 400: Schemas.scim_error; 409: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type delete_Repos_delete__pages__site = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/pages";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 204: unknown; 404: Schemas.basic_error; 409: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Repos_list__pages__builds = {
    method: "GET";
    path: "/repos/{owner}/{repo}/pages/builds";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.page_build> };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Repos_request__pages__build = {
    method: "POST";
    path: "/repos/{owner}/{repo}/pages/builds";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 201: Schemas.page_build_status };
  };
  export type get_Repos_get__latest__pages__build = {
    method: "GET";
    path: "/repos/{owner}/{repo}/pages/builds/latest";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.page_build };
  };
  export type get_Repos_get__pages__build = {
    method: "GET";
    path: "/repos/{owner}/{repo}/pages/builds/{build_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; build_id: number };
    };
    responses: { 200: Schemas.page_build };
  };
  export type post_Repos_create__pages__deployment = {
    method: "POST";
    path: "/repos/{owner}/{repo}/pages/deployments";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: {
        artifact_id?: number | undefined;
        artifact_url?: string | undefined;
        environment?: string | undefined;
        pages_build_version: string;
        oidc_token: string;
      };
    };
    responses: {
      200: Schemas.page_deployment;
      400: Schemas.scim_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Repos_get__pages__deployment = {
    method: "GET";
    path: "/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; pages_deployment_id: number | string };
    };
    responses: { 200: Schemas.pages_deployment_status; 404: Schemas.basic_error };
  };
  export type post_Repos_cancel__pages__deployment = {
    method: "POST";
    path: "/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; pages_deployment_id: number | string };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type get_Repos_get__pages__health__check = {
    method: "GET";
    path: "/repos/{owner}/{repo}/pages/health";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: {
      200: Schemas.pages_health_check;
      202: Schemas.empty_object;
      400: unknown;
      404: Schemas.basic_error;
      422: unknown;
    };
  };
  export type get_Repos_check__private__vulnerability__reporting = {
    method: "GET";
    path: "/repos/{owner}/{repo}/private-vulnerability-reporting";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: { enabled: boolean }; 422: Schemas.scim_error };
  };
  export type put_Repos_enable__private__vulnerability__reporting = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/private-vulnerability-reporting";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 204: unknown; 422: Schemas.scim_error };
  };
  export type delete_Repos_disable__private__vulnerability__reporting = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/private-vulnerability-reporting";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 204: unknown; 422: Schemas.scim_error };
  };
  export type get_Repos_get__custom__properties__values = {
    method: "GET";
    path: "/repos/{owner}/{repo}/properties/values";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.custom_property_value>; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type patch_Repos_create__or__update__custom__properties__values = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/properties/values";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: { properties: Array<Schemas.custom_property_value> };
    };
    responses: { 204: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Pulls_list = {
    method: "GET";
    path: "/repos/{owner}/{repo}/pulls";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        state: "open" | "closed" | "all";
        head: string;
        base: string;
        sort: "created" | "updated" | "popularity" | "long-running";
        direction: "asc" | "desc";
        per_page: number;
        page: number;
      }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.pull_request_simple>; 304: unknown; 422: Schemas.validation_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Pulls_create = {
    method: "POST";
    path: "/repos/{owner}/{repo}/pulls";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: {
        title?: string | undefined;
        head: string;
        head_repo?: string | undefined;
        base: string;
        body?: string | undefined;
        maintainer_can_modify?: boolean | undefined;
        draft?: boolean | undefined;
        issue?: number | undefined;
      };
    };
    responses: { 201: Schemas.pull_request; 403: Schemas.basic_error; 422: Schemas.validation_error };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Pulls_list__review__comments__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/pulls/comments";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        sort: "created" | "updated" | "created_at";
        direction: "asc" | "desc";
        since: string;
        per_page: number;
        page: number;
      }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.pull_request_review_comment> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Pulls_get__review__comment = {
    method: "GET";
    path: "/repos/{owner}/{repo}/pulls/comments/{comment_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; comment_id: number };
    };
    responses: { 200: Schemas.pull_request_review_comment; 404: Schemas.basic_error };
  };
  export type patch_Pulls_update__review__comment = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/pulls/comments/{comment_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; comment_id: number };

      body: { body: string };
    };
    responses: { 200: Schemas.pull_request_review_comment };
  };
  export type delete_Pulls_delete__review__comment = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/pulls/comments/{comment_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; comment_id: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error };
  };
  export type get_Reactions_list__for__pull__request__review__comment = {
    method: "GET";
    path: "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        per_page: number;
        page: number;
      }>;
      path: { owner: string; repo: string; comment_id: number };
    };
    responses: { 200: Array<Schemas.reaction>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Reactions_create__for__pull__request__review__comment = {
    method: "POST";
    path: "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; comment_id: number };

      body: { content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes" };
    };
    responses: { 200: Schemas.reaction; 201: Schemas.reaction; 422: Schemas.validation_error };
  };
  export type delete_Reactions_delete__for__pull__request__comment = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; comment_id: number; reaction_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Pulls_get = {
    method: "GET";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; pull_number: number };
    };
    responses: {
      200: Schemas.pull_request;
      304: unknown;
      404: Schemas.basic_error;
      406: Schemas.basic_error;
      500: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type patch_Pulls_update = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; pull_number: number };

      body: Partial<{
        title: string;
        body: string;
        state: "open" | "closed";
        base: string;
        maintainer_can_modify: boolean;
      }>;
    };
    responses: { 200: Schemas.pull_request; 403: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type post_Codespaces_create__with__pr__for__authenticated__user = {
    method: "POST";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/codespaces";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; pull_number: number };

      body: Partial<{
        location: string;
        geo: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest";
        client_ip: string;
        machine: string;
        devcontainer_path: string;
        multi_repo_permissions_opt_out: boolean;
        working_directory: string;
        idle_timeout_minutes: number;
        display_name: string;
        retention_period_minutes: number;
      }> | null;
    };
    responses: {
      201: Schemas.codespace;
      202: Schemas.codespace;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Pulls_list__review__comments = {
    method: "GET";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/comments";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        sort: "created" | "updated";
        direction: "asc" | "desc";
        since: string;
        per_page: number;
        page: number;
      }>;
      path: { owner: string; repo: string; pull_number: number };
    };
    responses: { 200: Array<Schemas.pull_request_review_comment> };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Pulls_create__review__comment = {
    method: "POST";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/comments";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; pull_number: number };

      body: {
        body: string;
        commit_id: string;
        path: string;
        position?: number | undefined;
        side?: ("LEFT" | "RIGHT") | undefined;
        line?: number | undefined;
        start_line?: number | undefined;
        start_side?: ("LEFT" | "RIGHT" | "side") | undefined;
        in_reply_to?: number | undefined;
        subject_type?: ("line" | "file") | undefined;
      };
    };
    responses: { 201: Schemas.pull_request_review_comment; 403: Schemas.basic_error; 422: Schemas.validation_error };
    responseHeaders: { 201: { Location: string } };
  };
  export type post_Pulls_create__reply__for__review__comment = {
    method: "POST";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; pull_number: number; comment_id: number };

      body: { body: string };
    };
    responses: { 201: Schemas.pull_request_review_comment; 404: Schemas.basic_error };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Pulls_list__commits = {
    method: "GET";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/commits";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; pull_number: number };
    };
    responses: { 200: Array<Schemas.commit> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Pulls_list__files = {
    method: "GET";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/files";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; pull_number: number };
    };
    responses: {
      200: Array<Schemas.diff_entry>;
      422: Schemas.validation_error;
      500: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Pulls_check__if__merged = {
    method: "GET";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/merge";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; pull_number: number };
    };
    responses: { 204: unknown; 404: unknown };
  };
  export type put_Pulls_merge = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/merge";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; pull_number: number };

      body: Partial<{
        commit_title: string;
        commit_message: string;
        sha: string;
        merge_method: "merge" | "squash" | "rebase";
      }> | null;
    };
    responses: {
      200: Schemas.pull_request_merge_result;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      405: Partial<{ message: string; documentation_url: string }>;
      409: Partial<{ message: string; documentation_url: string }>;
      422: Schemas.validation_error;
    };
  };
  export type get_Pulls_list__requested__reviewers = {
    method: "GET";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; pull_number: number };
    };
    responses: { 200: Schemas.pull_request_review_request };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Pulls_request__reviewers = {
    method: "POST";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; pull_number: number };

      body: unknown | unknown;
    };
    responses: { 201: Schemas.pull_request_simple; 403: Schemas.basic_error; 422: unknown };
  };
  export type delete_Pulls_remove__requested__reviewers = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; pull_number: number };

      body: { reviewers: Array<string>; team_reviewers?: Array<string> | undefined };
    };
    responses: { 200: Schemas.pull_request_simple; 422: Schemas.validation_error };
  };
  export type get_Pulls_list__reviews = {
    method: "GET";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; pull_number: number };
    };
    responses: { 200: Array<Schemas.pull_request_review> };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Pulls_create__review = {
    method: "POST";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; pull_number: number };

      body: Partial<{
        commit_id: string;
        body: string;
        event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
        comments: Array<{
          path: string;
          position?: number | undefined;
          body: string;
          line?: number | undefined;
          side?: string | undefined;
          start_line?: number | undefined;
          start_side?: string | undefined;
        }>;
      }>;
    };
    responses: { 200: Schemas.pull_request_review; 403: Schemas.basic_error; 422: Schemas.validation_error_simple };
  };
  export type get_Pulls_get__review = {
    method: "GET";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; pull_number: number; review_id: number };
    };
    responses: { 200: Schemas.pull_request_review; 404: Schemas.basic_error };
  };
  export type put_Pulls_update__review = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; pull_number: number; review_id: number };

      body: { body: string };
    };
    responses: { 200: Schemas.pull_request_review; 422: Schemas.validation_error_simple };
  };
  export type delete_Pulls_delete__pending__review = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; pull_number: number; review_id: number };
    };
    responses: { 200: Schemas.pull_request_review; 404: Schemas.basic_error; 422: Schemas.validation_error_simple };
  };
  export type get_Pulls_list__comments__for__review = {
    method: "GET";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; pull_number: number; review_id: number };
    };
    responses: { 200: Array<Schemas.review_comment>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type put_Pulls_dismiss__review = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; pull_number: number; review_id: number };

      body: { message: string; event?: "DISMISS" | undefined };
    };
    responses: { 200: Schemas.pull_request_review; 404: Schemas.basic_error; 422: Schemas.validation_error_simple };
  };
  export type post_Pulls_submit__review = {
    method: "POST";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; pull_number: number; review_id: number };

      body: { body?: string | undefined; event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT" };
    };
    responses: {
      200: Schemas.pull_request_review;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error_simple;
    };
  };
  export type put_Pulls_update__branch = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; pull_number: number };

      body: Partial<{ expected_head_sha: string }> | null;
    };
    responses: {
      202: Partial<{ message: string; url: string }>;
      403: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Repos_get__readme = {
    method: "GET";
    path: "/repos/{owner}/{repo}/readme";
    requestFormat: "json";
    parameters: {
      query: Partial<{ ref: string }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.content_file; 304: unknown; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Repos_get__readme__in__directory = {
    method: "GET";
    path: "/repos/{owner}/{repo}/readme/{dir}";
    requestFormat: "json";
    parameters: {
      query: Partial<{ ref: string }>;
      path: { owner: string; repo: string; dir: string };
    };
    responses: { 200: Schemas.content_file; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Repos_list__releases = {
    method: "GET";
    path: "/repos/{owner}/{repo}/releases";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.release>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Repos_create__release = {
    method: "POST";
    path: "/repos/{owner}/{repo}/releases";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: {
        tag_name: string;
        target_commitish?: string | undefined;
        name?: string | undefined;
        body?: string | undefined;
        draft?: boolean | undefined;
        prerelease?: boolean | undefined;
        discussion_category_name?: string | undefined;
        generate_release_notes?: boolean | undefined;
        make_latest?: ("true" | "false" | "legacy") | undefined;
      };
    };
    responses: { 201: Schemas.release; 404: Schemas.basic_error; 422: Schemas.validation_error };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Repos_get__release__asset = {
    method: "GET";
    path: "/repos/{owner}/{repo}/releases/assets/{asset_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; asset_id: number };
    };
    responses: { 200: Schemas.release_asset; 302: unknown; 404: Schemas.basic_error };
  };
  export type patch_Repos_update__release__asset = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/releases/assets/{asset_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; asset_id: number };

      body: Partial<{ name: string; label: string; state: string }>;
    };
    responses: { 200: Schemas.release_asset };
  };
  export type delete_Repos_delete__release__asset = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/releases/assets/{asset_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; asset_id: number };
    };
    responses: { 204: unknown };
  };
  export type post_Repos_generate__release__notes = {
    method: "POST";
    path: "/repos/{owner}/{repo}/releases/generate-notes";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: {
        tag_name: string;
        target_commitish?: string | undefined;
        previous_tag_name?: string | undefined;
        configuration_file_path?: string | undefined;
      };
    };
    responses: { 200: Schemas.release_notes_content; 404: Schemas.basic_error };
  };
  export type get_Repos_get__latest__release = {
    method: "GET";
    path: "/repos/{owner}/{repo}/releases/latest";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.release };
  };
  export type get_Repos_get__release__by__tag = {
    method: "GET";
    path: "/repos/{owner}/{repo}/releases/tags/{tag}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; tag: string };
    };
    responses: { 200: Schemas.release; 404: Schemas.basic_error };
  };
  export type get_Repos_get__release = {
    method: "GET";
    path: "/repos/{owner}/{repo}/releases/{release_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; release_id: number };
    };
    responses: { 200: Schemas.release; 401: unknown };
  };
  export type patch_Repos_update__release = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/releases/{release_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; release_id: number };

      body: Partial<{
        tag_name: string;
        target_commitish: string;
        name: string;
        body: string;
        draft: boolean;
        prerelease: boolean;
        make_latest: "true" | "false" | "legacy";
        discussion_category_name: string;
      }>;
    };
    responses: { 200: Schemas.release; 404: Schemas.basic_error };
  };
  export type delete_Repos_delete__release = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/releases/{release_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; release_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Repos_list__release__assets = {
    method: "GET";
    path: "/repos/{owner}/{repo}/releases/{release_id}/assets";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; release_id: number };
    };
    responses: { 200: Array<Schemas.release_asset> };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Repos_upload__release__asset = {
    method: "POST";
    path: "/repos/{owner}/{repo}/releases/{release_id}/assets";
    requestFormat: "binary";
    parameters: {
      query: { name: string; label?: string | undefined };
      path: { owner: string; repo: string; release_id: number };

      body: string;
    };
    responses: { 201: Schemas.release_asset; 422: unknown };
  };
  export type get_Reactions_list__for__release = {
    method: "GET";
    path: "/repos/{owner}/{repo}/releases/{release_id}/reactions";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        content: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes";
        per_page: number;
        page: number;
      }>;
      path: { owner: string; repo: string; release_id: number };
    };
    responses: { 200: Array<Schemas.reaction>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Reactions_create__for__release = {
    method: "POST";
    path: "/repos/{owner}/{repo}/releases/{release_id}/reactions";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; release_id: number };

      body: { content: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes" };
    };
    responses: { 200: Schemas.reaction; 201: Schemas.reaction; 422: Schemas.validation_error };
  };
  export type delete_Reactions_delete__for__release = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; release_id: number; reaction_id: number };
    };
    responses: { 204: unknown };
  };
  export type get_Repos_get__branch__rules = {
    method: "GET";
    path: "/repos/{owner}/{repo}/rules/branches/{branch}";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; branch: string };
    };
    responses: { 200: Array<Schemas.repository_rule_detailed> };
  };
  export type get_Repos_get__repo__rulesets = {
    method: "GET";
    path: "/repos/{owner}/{repo}/rulesets";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number; includes_parents: boolean; targets: string }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.repository_ruleset>; 404: Schemas.basic_error; 500: Schemas.basic_error };
  };
  export type post_Repos_create__repo__ruleset = {
    method: "POST";
    path: "/repos/{owner}/{repo}/rulesets";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: {
        name: string;
        target?: ("branch" | "tag" | "push") | undefined;
        enforcement: Schemas.repository_rule_enforcement;
        bypass_actors?: Array<Schemas.repository_ruleset_bypass_actor> | undefined;
        conditions?: Schemas.repository_ruleset_conditions | undefined;
        rules?: Array<Schemas.repository_rule> | undefined;
      };
    };
    responses: { 201: Schemas.repository_ruleset; 404: Schemas.basic_error; 500: Schemas.basic_error };
  };
  export type get_Repos_get__repo__rule__suites = {
    method: "GET";
    path: "/repos/{owner}/{repo}/rulesets/rule-suites";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        ref: string;
        time_period: "hour" | "day" | "week" | "month";
        actor_name: string;
        rule_suite_result: "pass" | "fail" | "bypass" | "all";
        per_page: number;
        page: number;
      }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.rule_suites; 404: Schemas.basic_error; 500: Schemas.basic_error };
  };
  export type get_Repos_get__repo__rule__suite = {
    method: "GET";
    path: "/repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; rule_suite_id: number };
    };
    responses: { 200: Schemas.rule_suite; 404: Schemas.basic_error; 500: Schemas.basic_error };
  };
  export type get_Repos_get__repo__ruleset = {
    method: "GET";
    path: "/repos/{owner}/{repo}/rulesets/{ruleset_id}";
    requestFormat: "json";
    parameters: {
      query: Partial<{ includes_parents: boolean }>;
      path: { owner: string; repo: string; ruleset_id: number };
    };
    responses: { 200: Schemas.repository_ruleset; 404: Schemas.basic_error; 500: Schemas.basic_error };
  };
  export type put_Repos_update__repo__ruleset = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/rulesets/{ruleset_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; ruleset_id: number };

      body: Partial<{
        name: string;
        target: "branch" | "tag" | "push";
        enforcement: Schemas.repository_rule_enforcement;
        bypass_actors: Array<Schemas.repository_ruleset_bypass_actor>;
        conditions: Schemas.repository_ruleset_conditions;
        rules: Array<Schemas.repository_rule>;
      }>;
    };
    responses: { 200: Schemas.repository_ruleset; 404: Schemas.basic_error; 500: Schemas.basic_error };
  };
  export type delete_Repos_delete__repo__ruleset = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/rulesets/{ruleset_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; ruleset_id: number };
    };
    responses: { 204: unknown; 404: Schemas.basic_error; 500: Schemas.basic_error };
  };
  export type get_Repos_get__repo__ruleset__history = {
    method: "GET";
    path: "/repos/{owner}/{repo}/rulesets/{ruleset_id}/history";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string; ruleset_id: number };
    };
    responses: { 200: Array<Schemas.ruleset_version>; 404: Schemas.basic_error; 500: Schemas.basic_error };
  };
  export type get_Repos_get__repo__ruleset__version = {
    method: "GET";
    path: "/repos/{owner}/{repo}/rulesets/{ruleset_id}/history/{version_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; ruleset_id: number; version_id: number };
    };
    responses: { 200: Schemas.ruleset_version_with_state; 404: Schemas.basic_error; 500: Schemas.basic_error };
  };
  export type get_Secret__scanning_list__alerts__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/secret-scanning/alerts";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        state: "open" | "resolved";
        secret_type: string;
        resolution: string;
        sort: "created" | "updated";
        direction: "asc" | "desc";
        page: number;
        per_page: number;
        before: string;
        after: string;
        validity: string;
        is_publicly_leaked: boolean;
        is_multi_repo: boolean;
        hide_secret: boolean;
      }>;
      path: { owner: string; repo: string };
    };
    responses: {
      200: Array<Schemas.secret_scanning_alert>;
      404: unknown;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Secret__scanning_get__alert = {
    method: "GET";
    path: "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}";
    requestFormat: "json";
    parameters: {
      query: Partial<{ hide_secret: boolean }>;
      path: { owner: string; repo: string; alert_number: number };
    };
    responses: {
      200: Schemas.secret_scanning_alert;
      304: unknown;
      404: unknown;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type patch_Secret__scanning_update__alert = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; alert_number: number };

      body: {
        state: Schemas.secret_scanning_alert_state;
        resolution?: Schemas.secret_scanning_alert_resolution | undefined;
        resolution_comment?: Schemas.secret_scanning_alert_resolution_comment | undefined;
      };
    };
    responses: {
      200: Schemas.secret_scanning_alert;
      400: unknown;
      404: unknown;
      422: unknown;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Secret__scanning_list__locations__for__alert = {
    method: "GET";
    path: "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations";
    requestFormat: "json";
    parameters: {
      query: Partial<{ page: number; per_page: number }>;
      path: { owner: string; repo: string; alert_number: number };
    };
    responses: {
      200: Array<Schemas.secret_scanning_location>;
      404: unknown;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Secret__scanning_create__push__protection__bypass = {
    method: "POST";
    path: "/repos/{owner}/{repo}/secret-scanning/push-protection-bypasses";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: {
        reason: Schemas.secret_scanning_push_protection_bypass_reason;
        placeholder_id: Schemas.secret_scanning_push_protection_bypass_placeholder_id;
      };
    };
    responses: {
      200: Schemas.secret_scanning_push_protection_bypass;
      403: unknown;
      404: unknown;
      422: unknown;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Secret__scanning_get__scan__history = {
    method: "GET";
    path: "/repos/{owner}/{repo}/secret-scanning/scan-history";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: {
      200: Schemas.secret_scanning_scan_history;
      404: unknown;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Security__advisories_list__repository__advisories = {
    method: "GET";
    path: "/repos/{owner}/{repo}/security-advisories";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        direction: "asc" | "desc";
        sort: "created" | "updated" | "published";
        before: string;
        after: string;
        per_page: number;
        state: "triage" | "draft" | "published" | "closed";
      }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.repository_advisory>; 400: Schemas.scim_error; 404: Schemas.basic_error };
  };
  export type post_Security__advisories_create__repository__advisory = {
    method: "POST";
    path: "/repos/{owner}/{repo}/security-advisories";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: Schemas.repository_advisory_create;
    };
    responses: {
      201: Schemas.repository_advisory;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type post_Security__advisories_create__private__vulnerability__report = {
    method: "POST";
    path: "/repos/{owner}/{repo}/security-advisories/reports";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: Schemas.private_vulnerability_report_create;
    };
    responses: {
      201: Schemas.repository_advisory;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Security__advisories_get__repository__advisory = {
    method: "GET";
    path: "/repos/{owner}/{repo}/security-advisories/{ghsa_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; ghsa_id: string };
    };
    responses: { 200: Schemas.repository_advisory; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type patch_Security__advisories_update__repository__advisory = {
    method: "PATCH";
    path: "/repos/{owner}/{repo}/security-advisories/{ghsa_id}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; ghsa_id: string };

      body: Schemas.repository_advisory_update;
    };
    responses: {
      200: Schemas.repository_advisory;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type post_Security__advisories_create__repository__advisory__cve__request = {
    method: "POST";
    path: "/repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; ghsa_id: string };
    };
    responses: {
      202: Record<string, unknown>;
      400: Schemas.scim_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type post_Security__advisories_create__fork = {
    method: "POST";
    path: "/repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; ghsa_id: string };
    };
    responses: {
      202: Schemas.full_repository;
      400: Schemas.scim_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Activity_list__stargazers__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/stargazers";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.simple_user> | Array<Schemas.stargazer>; 422: Schemas.validation_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Repos_get__code__frequency__stats = {
    method: "GET";
    path: "/repos/{owner}/{repo}/stats/code_frequency";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.code_frequency_stat>; 202: Record<string, unknown>; 204: unknown; 422: unknown };
  };
  export type get_Repos_get__commit__activity__stats = {
    method: "GET";
    path: "/repos/{owner}/{repo}/stats/commit_activity";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.commit_activity>; 202: Record<string, unknown>; 204: unknown };
  };
  export type get_Repos_get__contributors__stats = {
    method: "GET";
    path: "/repos/{owner}/{repo}/stats/contributors";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.contributor_activity>; 202: Record<string, unknown>; 204: unknown };
  };
  export type get_Repos_get__participation__stats = {
    method: "GET";
    path: "/repos/{owner}/{repo}/stats/participation";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.participation_stats; 404: Schemas.basic_error };
  };
  export type get_Repos_get__punch__card__stats = {
    method: "GET";
    path: "/repos/{owner}/{repo}/stats/punch_card";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.code_frequency_stat>; 204: unknown };
  };
  export type post_Repos_create__commit__status = {
    method: "POST";
    path: "/repos/{owner}/{repo}/statuses/{sha}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; sha: string };

      body: {
        state: "error" | "failure" | "pending" | "success";
        target_url?: (string | null) | undefined;
        description?: (string | null) | undefined;
        context?: string | undefined;
      };
    };
    responses: { 201: Schemas.status };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Activity_list__watchers__for__repo = {
    method: "GET";
    path: "/repos/{owner}/{repo}/subscribers";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.simple_user> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Activity_get__repo__subscription = {
    method: "GET";
    path: "/repos/{owner}/{repo}/subscription";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.repository_subscription; 403: Schemas.basic_error; 404: unknown };
  };
  export type put_Activity_set__repo__subscription = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/subscription";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: Partial<{ subscribed: boolean; ignored: boolean }>;
    };
    responses: { 200: Schemas.repository_subscription };
  };
  export type delete_Activity_delete__repo__subscription = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/subscription";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 204: unknown };
  };
  export type get_Repos_list__tags = {
    method: "GET";
    path: "/repos/{owner}/{repo}/tags";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.tag> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Repos_download__tarball__archive = {
    method: "GET";
    path: "/repos/{owner}/{repo}/tarball/{ref}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; ref: string };
    };
    responses: { 302: unknown };
    responseHeaders: { 302: { Location: string } };
  };
  export type get_Repos_list__teams = {
    method: "GET";
    path: "/repos/{owner}/{repo}/teams";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.team>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Repos_get__all__topics = {
    method: "GET";
    path: "/repos/{owner}/{repo}/topics";
    requestFormat: "json";
    parameters: {
      query: Partial<{ page: number; per_page: number }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.topic; 404: Schemas.basic_error };
  };
  export type put_Repos_replace__all__topics = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/topics";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: { names: Array<string> };
    };
    responses: { 200: Schemas.topic; 404: Schemas.basic_error; 422: Schemas.validation_error_simple };
  };
  export type get_Repos_get__clones = {
    method: "GET";
    path: "/repos/{owner}/{repo}/traffic/clones";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per: "day" | "week" }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.clone_traffic; 403: Schemas.basic_error };
  };
  export type get_Repos_get__top__paths = {
    method: "GET";
    path: "/repos/{owner}/{repo}/traffic/popular/paths";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.content_traffic>; 403: Schemas.basic_error };
  };
  export type get_Repos_get__top__referrers = {
    method: "GET";
    path: "/repos/{owner}/{repo}/traffic/popular/referrers";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 200: Array<Schemas.referrer_traffic>; 403: Schemas.basic_error };
  };
  export type get_Repos_get__views = {
    method: "GET";
    path: "/repos/{owner}/{repo}/traffic/views";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per: "day" | "week" }>;
      path: { owner: string; repo: string };
    };
    responses: { 200: Schemas.view_traffic; 403: Schemas.basic_error };
  };
  export type post_Repos_transfer = {
    method: "POST";
    path: "/repos/{owner}/{repo}/transfer";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };

      body: { new_owner: string; new_name?: string | undefined; team_ids?: Array<number> | undefined };
    };
    responses: { 202: Schemas.minimal_repository };
  };
  export type get_Repos_check__vulnerability__alerts = {
    method: "GET";
    path: "/repos/{owner}/{repo}/vulnerability-alerts";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 204: unknown; 404: unknown };
  };
  export type put_Repos_enable__vulnerability__alerts = {
    method: "PUT";
    path: "/repos/{owner}/{repo}/vulnerability-alerts";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 204: unknown };
  };
  export type delete_Repos_disable__vulnerability__alerts = {
    method: "DELETE";
    path: "/repos/{owner}/{repo}/vulnerability-alerts";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: { 204: unknown };
  };
  export type get_Repos_download__zipball__archive = {
    method: "GET";
    path: "/repos/{owner}/{repo}/zipball/{ref}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string; ref: string };
    };
    responses: { 302: unknown };
    responseHeaders: { 302: { Location: string } };
  };
  export type post_Repos_create__using__template = {
    method: "POST";
    path: "/repos/{template_owner}/{template_repo}/generate";
    requestFormat: "json";
    parameters: {
      path: { template_owner: string; template_repo: string };

      body: {
        owner?: string | undefined;
        name: string;
        description?: string | undefined;
        include_all_branches?: boolean | undefined;
        private?: boolean | undefined;
      };
    };
    responses: { 201: Schemas.full_repository };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Repos_list__public = {
    method: "GET";
    path: "/repositories";
    requestFormat: "json";
    parameters: {
      query: Partial<{ since: number }>;
    };
    responses: { 200: Array<Schemas.minimal_repository>; 304: unknown; 422: Schemas.validation_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Search_code = {
    method: "GET";
    path: "/search/code";
    requestFormat: "json";
    parameters: {
      query: {
        q: string;
        sort?: "indexed" | undefined;
        order?: ("desc" | "asc") | undefined;
        per_page?: number | undefined;
        page?: number | undefined;
      };
    };
    responses: {
      200: { total_count: number; incomplete_results: boolean; items: Array<Schemas.code_search_result_item> };
      304: unknown;
      403: Schemas.basic_error;
      422: Schemas.validation_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Search_commits = {
    method: "GET";
    path: "/search/commits";
    requestFormat: "json";
    parameters: {
      query: {
        q: string;
        sort?: ("author-date" | "committer-date") | undefined;
        order?: ("desc" | "asc") | undefined;
        per_page?: number | undefined;
        page?: number | undefined;
      };
    };
    responses: {
      200: { total_count: number; incomplete_results: boolean; items: Array<Schemas.commit_search_result_item> };
      304: unknown;
    };
  };
  export type get_Search_labels = {
    method: "GET";
    path: "/search/labels";
    requestFormat: "json";
    parameters: {
      query: {
        repository_id: number;
        q: string;
        sort?: ("created" | "updated") | undefined;
        order?: ("desc" | "asc") | undefined;
        per_page?: number | undefined;
        page?: number | undefined;
      };
    };
    responses: {
      200: { total_count: number; incomplete_results: boolean; items: Array<Schemas.label_search_result_item> };
      304: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Search_repos = {
    method: "GET";
    path: "/search/repositories";
    requestFormat: "json";
    parameters: {
      query: {
        q: string;
        sort?: ("stars" | "forks" | "help-wanted-issues" | "updated") | undefined;
        order?: ("desc" | "asc") | undefined;
        per_page?: number | undefined;
        page?: number | undefined;
      };
    };
    responses: {
      200: { total_count: number; incomplete_results: boolean; items: Array<Schemas.repo_search_result_item> };
      304: unknown;
      422: Schemas.validation_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Search_topics = {
    method: "GET";
    path: "/search/topics";
    requestFormat: "json";
    parameters: {
      query: { q: string; per_page?: number | undefined; page?: number | undefined };
    };
    responses: {
      200: { total_count: number; incomplete_results: boolean; items: Array<Schemas.topic_search_result_item> };
      304: unknown;
    };
  };
  export type get_Search_users = {
    method: "GET";
    path: "/search/users";
    requestFormat: "json";
    parameters: {
      query: {
        q: string;
        sort?: ("followers" | "repositories" | "joined") | undefined;
        order?: ("desc" | "asc") | undefined;
        per_page?: number | undefined;
        page?: number | undefined;
      };
    };
    responses: {
      200: { total_count: number; incomplete_results: boolean; items: Array<Schemas.user_search_result_item> };
      304: unknown;
      422: Schemas.validation_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Users_get__authenticated = {
    method: "GET";
    path: "/user";
    requestFormat: "json";
    parameters: never;
    responses: {
      200: Schemas.private_user | Schemas.public_user;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
    };
  };
  export type patch_Users_update__authenticated = {
    method: "PATCH";
    path: "/user";
    requestFormat: "json";
    parameters: {
      body: Partial<{
        name: string;
        email: string;
        blog: string;
        twitter_username: string | null;
        company: string;
        location: string;
        hireable: boolean;
        bio: string;
      }>;
    };
    responses: {
      200: Schemas.private_user;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Users_list__blocked__by__authenticated__user = {
    method: "GET";
    path: "/user/blocks";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: {
      200: Array<Schemas.simple_user>;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type get_Users_check__blocked = {
    method: "GET";
    path: "/user/blocks/{username}";
    requestFormat: "json";
    parameters: {
      path: { username: string };
    };
    responses: {
      204: unknown;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type put_Users_block = {
    method: "PUT";
    path: "/user/blocks/{username}";
    requestFormat: "json";
    parameters: {
      path: { username: string };
    };
    responses: {
      204: unknown;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type delete_Users_unblock = {
    method: "DELETE";
    path: "/user/blocks/{username}";
    requestFormat: "json";
    parameters: {
      path: { username: string };
    };
    responses: {
      204: unknown;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type get_Codespaces_list__for__authenticated__user = {
    method: "GET";
    path: "/user/codespaces";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number; repository_id: number }>;
    };
    responses: {
      200: { total_count: number; codespaces: Array<Schemas.codespace> };
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
    };
  };
  export type post_Codespaces_create__for__authenticated__user = {
    method: "POST";
    path: "/user/codespaces";
    requestFormat: "json";
    parameters: {
      body:
        | {
            repository_id: number;
            ref?: string | undefined;
            location?: string | undefined;
            geo?: ("EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest") | undefined;
            client_ip?: string | undefined;
            machine?: string | undefined;
            devcontainer_path?: string | undefined;
            multi_repo_permissions_opt_out?: boolean | undefined;
            working_directory?: string | undefined;
            idle_timeout_minutes?: number | undefined;
            display_name?: string | undefined;
            retention_period_minutes?: number | undefined;
          }
        | {
            pull_request: { pull_request_number: number; repository_id: number };
            location?: string | undefined;
            geo?: ("EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest") | undefined;
            machine?: string | undefined;
            devcontainer_path?: string | undefined;
            working_directory?: string | undefined;
            idle_timeout_minutes?: number | undefined;
          };
    };
    responses: {
      201: Schemas.codespace;
      202: Schemas.codespace;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Codespaces_list__secrets__for__authenticated__user = {
    method: "GET";
    path: "/user/codespaces/secrets";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: { 200: { total_count: number; secrets: Array<Schemas.codespaces_secret> } };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Codespaces_get__public__key__for__authenticated__user = {
    method: "GET";
    path: "/user/codespaces/secrets/public-key";
    requestFormat: "json";
    parameters: never;
    responses: { 200: Schemas.codespaces_user_public_key };
  };
  export type get_Codespaces_get__secret__for__authenticated__user = {
    method: "GET";
    path: "/user/codespaces/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { secret_name: string };
    };
    responses: { 200: Schemas.codespaces_secret };
  };
  export type put_Codespaces_create__or__update__secret__for__authenticated__user = {
    method: "PUT";
    path: "/user/codespaces/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { secret_name: string };

      body: {
        encrypted_value?: string | undefined;
        key_id: string;
        selected_repository_ids?: Array<number | string> | undefined;
      };
    };
    responses: { 201: Schemas.empty_object; 204: unknown; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type delete_Codespaces_delete__secret__for__authenticated__user = {
    method: "DELETE";
    path: "/user/codespaces/secrets/{secret_name}";
    requestFormat: "json";
    parameters: {
      path: { secret_name: string };
    };
    responses: { 204: unknown };
  };
  export type get_Codespaces_list__repositories__for__secret__for__authenticated__user = {
    method: "GET";
    path: "/user/codespaces/secrets/{secret_name}/repositories";
    requestFormat: "json";
    parameters: {
      path: { secret_name: string };
    };
    responses: {
      200: { total_count: number; repositories: Array<Schemas.minimal_repository> };
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
    };
  };
  export type put_Codespaces_set__repositories__for__secret__for__authenticated__user = {
    method: "PUT";
    path: "/user/codespaces/secrets/{secret_name}/repositories";
    requestFormat: "json";
    parameters: {
      path: { secret_name: string };

      body: { selected_repository_ids: Array<number> };
    };
    responses: {
      204: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
    };
  };
  export type put_Codespaces_add__repository__for__secret__for__authenticated__user = {
    method: "PUT";
    path: "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}";
    requestFormat: "json";
    parameters: {
      path: { secret_name: string; repository_id: number };
    };
    responses: {
      204: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
    };
  };
  export type delete_Codespaces_remove__repository__for__secret__for__authenticated__user = {
    method: "DELETE";
    path: "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}";
    requestFormat: "json";
    parameters: {
      path: { secret_name: string; repository_id: number };
    };
    responses: {
      204: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
    };
  };
  export type get_Codespaces_get__for__authenticated__user = {
    method: "GET";
    path: "/user/codespaces/{codespace_name}";
    requestFormat: "json";
    parameters: {
      path: { codespace_name: string };
    };
    responses: {
      200: Schemas.codespace;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
    };
  };
  export type patch_Codespaces_update__for__authenticated__user = {
    method: "PATCH";
    path: "/user/codespaces/{codespace_name}";
    requestFormat: "json";
    parameters: {
      path: { codespace_name: string };

      body: Partial<{ machine: string; display_name: string; recent_folders: Array<string> }>;
    };
    responses: { 200: Schemas.codespace; 401: Schemas.basic_error; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type delete_Codespaces_delete__for__authenticated__user = {
    method: "DELETE";
    path: "/user/codespaces/{codespace_name}";
    requestFormat: "json";
    parameters: {
      path: { codespace_name: string };
    };
    responses: {
      202: Record<string, unknown>;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
    };
  };
  export type post_Codespaces_export__for__authenticated__user = {
    method: "POST";
    path: "/user/codespaces/{codespace_name}/exports";
    requestFormat: "json";
    parameters: {
      path: { codespace_name: string };
    };
    responses: {
      202: Schemas.codespace_export_details;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
      500: Schemas.basic_error;
    };
  };
  export type get_Codespaces_get__export__details__for__authenticated__user = {
    method: "GET";
    path: "/user/codespaces/{codespace_name}/exports/{export_id}";
    requestFormat: "json";
    parameters: {
      path: { codespace_name: string; export_id: string };
    };
    responses: { 200: Schemas.codespace_export_details; 404: Schemas.basic_error };
  };
  export type get_Codespaces_codespace__machines__for__authenticated__user = {
    method: "GET";
    path: "/user/codespaces/{codespace_name}/machines";
    requestFormat: "json";
    parameters: {
      path: { codespace_name: string };
    };
    responses: {
      200: { total_count: number; machines: Array<Schemas.codespace_machine> };
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
    };
  };
  export type post_Codespaces_publish__for__authenticated__user = {
    method: "POST";
    path: "/user/codespaces/{codespace_name}/publish";
    requestFormat: "json";
    parameters: {
      path: { codespace_name: string };

      body: Partial<{ name: string; private: boolean }>;
    };
    responses: {
      201: Schemas.codespace_with_full_repository;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type post_Codespaces_start__for__authenticated__user = {
    method: "POST";
    path: "/user/codespaces/{codespace_name}/start";
    requestFormat: "json";
    parameters: {
      path: { codespace_name: string };
    };
    responses: {
      200: Schemas.codespace;
      304: unknown;
      400: Schemas.scim_error;
      401: Schemas.basic_error;
      402: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
      500: Schemas.basic_error;
    };
  };
  export type post_Codespaces_stop__for__authenticated__user = {
    method: "POST";
    path: "/user/codespaces/{codespace_name}/stop";
    requestFormat: "json";
    parameters: {
      path: { codespace_name: string };
    };
    responses: {
      200: Schemas.codespace;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      500: Schemas.basic_error;
    };
  };
  export type get_Packages_list__docker__migration__conflicting__packages__for__authenticated__user = {
    method: "GET";
    path: "/user/docker/conflicts";
    requestFormat: "json";
    parameters: never;
    responses: { 200: Array<Schemas.Schema_package> };
  };
  export type patch_Users_set__primary__email__visibility__for__authenticated__user = {
    method: "PATCH";
    path: "/user/email/visibility";
    requestFormat: "json";
    parameters: {
      body: { visibility: "public" | "private" };
    };
    responses: {
      200: Array<Schemas.email>;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Users_list__emails__for__authenticated__user = {
    method: "GET";
    path: "/user/emails";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: {
      200: Array<Schemas.email>;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Users_add__email__for__authenticated__user = {
    method: "POST";
    path: "/user/emails";
    requestFormat: "json";
    parameters: {
      body: { emails: Array<string> } | Array<string> | string;
    };
    responses: {
      201: Array<Schemas.email>;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type delete_Users_delete__email__for__authenticated__user = {
    method: "DELETE";
    path: "/user/emails";
    requestFormat: "json";
    parameters: {
      body: { emails: Array<string> } | Array<string> | string;
    };
    responses: {
      204: unknown;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Users_list__followers__for__authenticated__user = {
    method: "GET";
    path: "/user/followers";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: { 200: Array<Schemas.simple_user>; 304: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Users_list__followed__by__authenticated__user = {
    method: "GET";
    path: "/user/following";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: { 200: Array<Schemas.simple_user>; 304: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Users_check__person__is__followed__by__authenticated = {
    method: "GET";
    path: "/user/following/{username}";
    requestFormat: "json";
    parameters: {
      path: { username: string };
    };
    responses: {
      204: unknown;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type put_Users_follow = {
    method: "PUT";
    path: "/user/following/{username}";
    requestFormat: "json";
    parameters: {
      path: { username: string };
    };
    responses: {
      204: unknown;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type delete_Users_unfollow = {
    method: "DELETE";
    path: "/user/following/{username}";
    requestFormat: "json";
    parameters: {
      path: { username: string };
    };
    responses: {
      204: unknown;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type get_Users_list__gpg__keys__for__authenticated__user = {
    method: "GET";
    path: "/user/gpg_keys";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: {
      200: Array<Schemas.gpg_key>;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Users_create__gpg__key__for__authenticated__user = {
    method: "POST";
    path: "/user/gpg_keys";
    requestFormat: "json";
    parameters: {
      body: { name?: string | undefined; armored_public_key: string };
    };
    responses: {
      201: Schemas.gpg_key;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Users_get__gpg__key__for__authenticated__user = {
    method: "GET";
    path: "/user/gpg_keys/{gpg_key_id}";
    requestFormat: "json";
    parameters: {
      path: { gpg_key_id: number };
    };
    responses: {
      200: Schemas.gpg_key;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type delete_Users_delete__gpg__key__for__authenticated__user = {
    method: "DELETE";
    path: "/user/gpg_keys/{gpg_key_id}";
    requestFormat: "json";
    parameters: {
      path: { gpg_key_id: number };
    };
    responses: {
      204: unknown;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Apps_list__installations__for__authenticated__user = {
    method: "GET";
    path: "/user/installations";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: {
      200: { total_count: number; installations: Array<Schemas.installation> };
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Apps_list__installation__repos__for__authenticated__user = {
    method: "GET";
    path: "/user/installations/{installation_id}/repositories";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { installation_id: number };
    };
    responses: {
      200: { total_count: number; repository_selection?: string | undefined; repositories: Array<Schemas.repository> };
      304: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type put_Apps_add__repo__to__installation__for__authenticated__user = {
    method: "PUT";
    path: "/user/installations/{installation_id}/repositories/{repository_id}";
    requestFormat: "json";
    parameters: {
      path: { installation_id: number; repository_id: number };
    };
    responses: { 204: unknown; 304: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type delete_Apps_remove__repo__from__installation__for__authenticated__user = {
    method: "DELETE";
    path: "/user/installations/{installation_id}/repositories/{repository_id}";
    requestFormat: "json";
    parameters: {
      path: { installation_id: number; repository_id: number };
    };
    responses: { 204: unknown; 304: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error; 422: unknown };
  };
  export type get_Interactions_get__restrictions__for__authenticated__user = {
    method: "GET";
    path: "/user/interaction-limits";
    requestFormat: "json";
    parameters: never;
    responses: { 200: Schemas.interaction_limit_response | Partial<{}>; 204: unknown };
  };
  export type put_Interactions_set__restrictions__for__authenticated__user = {
    method: "PUT";
    path: "/user/interaction-limits";
    requestFormat: "json";
    parameters: {
      body: Schemas.interaction_limit;
    };
    responses: { 200: Schemas.interaction_limit_response; 422: Schemas.validation_error };
  };
  export type delete_Interactions_remove__restrictions__for__authenticated__user = {
    method: "DELETE";
    path: "/user/interaction-limits";
    requestFormat: "json";
    parameters: never;
    responses: { 204: unknown };
  };
  export type get_Issues_list__for__authenticated__user = {
    method: "GET";
    path: "/user/issues";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        filter: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all";
        state: "open" | "closed" | "all";
        labels: string;
        sort: "created" | "updated" | "comments";
        direction: "asc" | "desc";
        since: string;
        per_page: number;
        page: number;
      }>;
    };
    responses: { 200: Array<Schemas.issue>; 304: unknown; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Users_list__public__ssh__keys__for__authenticated__user = {
    method: "GET";
    path: "/user/keys";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: {
      200: Array<Schemas.key>;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Users_create__public__ssh__key__for__authenticated__user = {
    method: "POST";
    path: "/user/keys";
    requestFormat: "json";
    parameters: {
      body: { title?: string | undefined; key: string };
    };
    responses: {
      201: Schemas.key;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Users_get__public__ssh__key__for__authenticated__user = {
    method: "GET";
    path: "/user/keys/{key_id}";
    requestFormat: "json";
    parameters: {
      path: { key_id: number };
    };
    responses: {
      200: Schemas.key;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type delete_Users_delete__public__ssh__key__for__authenticated__user = {
    method: "DELETE";
    path: "/user/keys/{key_id}";
    requestFormat: "json";
    parameters: {
      path: { key_id: number };
    };
    responses: {
      204: unknown;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type get_Apps_list__subscriptions__for__authenticated__user = {
    method: "GET";
    path: "/user/marketplace_purchases";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: {
      200: Array<Schemas.user_marketplace_purchase>;
      304: unknown;
      401: Schemas.basic_error;
      404: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Apps_list__subscriptions__for__authenticated__user__stubbed = {
    method: "GET";
    path: "/user/marketplace_purchases/stubbed";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: { 200: Array<Schemas.user_marketplace_purchase>; 304: unknown; 401: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Orgs_list__memberships__for__authenticated__user = {
    method: "GET";
    path: "/user/memberships/orgs";
    requestFormat: "json";
    parameters: {
      query: Partial<{ state: "active" | "pending"; per_page: number; page: number }>;
    };
    responses: {
      200: Array<Schemas.org_membership>;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      422: Schemas.validation_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Orgs_get__membership__for__authenticated__user = {
    method: "GET";
    path: "/user/memberships/orgs/{org}";
    requestFormat: "json";
    parameters: {
      path: { org: string };
    };
    responses: { 200: Schemas.org_membership; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type patch_Orgs_update__membership__for__authenticated__user = {
    method: "PATCH";
    path: "/user/memberships/orgs/{org}";
    requestFormat: "json";
    parameters: {
      path: { org: string };

      body: { state: "active" };
    };
    responses: {
      200: Schemas.org_membership;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Migrations_list__for__authenticated__user = {
    method: "GET";
    path: "/user/migrations";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: { 200: Array<Schemas.migration>; 304: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Migrations_start__for__authenticated__user = {
    method: "POST";
    path: "/user/migrations";
    requestFormat: "json";
    parameters: {
      body: {
        lock_repositories?: boolean | undefined;
        exclude_metadata?: boolean | undefined;
        exclude_git_data?: boolean | undefined;
        exclude_attachments?: boolean | undefined;
        exclude_releases?: boolean | undefined;
        exclude_owner_projects?: boolean | undefined;
        org_metadata_only?: boolean | undefined;
        exclude?: Array<"repositories"> | undefined;
        repositories: Array<string>;
      };
    };
    responses: {
      201: Schemas.migration;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Migrations_get__status__for__authenticated__user = {
    method: "GET";
    path: "/user/migrations/{migration_id}";
    requestFormat: "json";
    parameters: {
      query: Partial<{ exclude: Array<string> }>;
      path: { migration_id: number };
    };
    responses: {
      200: Schemas.migration;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type get_Migrations_get__archive__for__authenticated__user = {
    method: "GET";
    path: "/user/migrations/{migration_id}/archive";
    requestFormat: "json";
    parameters: {
      path: { migration_id: number };
    };
    responses: { 302: unknown; 304: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error };
  };
  export type delete_Migrations_delete__archive__for__authenticated__user = {
    method: "DELETE";
    path: "/user/migrations/{migration_id}/archive";
    requestFormat: "json";
    parameters: {
      path: { migration_id: number };
    };
    responses: {
      204: unknown;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type delete_Migrations_unlock__repo__for__authenticated__user = {
    method: "DELETE";
    path: "/user/migrations/{migration_id}/repos/{repo_name}/lock";
    requestFormat: "json";
    parameters: {
      path: { migration_id: number; repo_name: string };
    };
    responses: {
      204: unknown;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type get_Migrations_list__repos__for__authenticated__user = {
    method: "GET";
    path: "/user/migrations/{migration_id}/repositories";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { migration_id: number };
    };
    responses: { 200: Array<Schemas.minimal_repository>; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Orgs_list__for__authenticated__user = {
    method: "GET";
    path: "/user/orgs";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: {
      200: Array<Schemas.organization_simple>;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Packages_list__packages__for__authenticated__user = {
    method: "GET";
    path: "/user/packages";
    requestFormat: "json";
    parameters: {
      query: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        visibility?: ("public" | "private" | "internal") | undefined;
        page?: number | undefined;
        per_page?: number | undefined;
      };
    };
    responses: { 200: Array<Schemas.Schema_package>; 400: unknown };
  };
  export type get_Packages_get__package__for__authenticated__user = {
    method: "GET";
    path: "/user/packages/{package_type}/{package_name}";
    requestFormat: "json";
    parameters: {
      path: { package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"; package_name: string };
    };
    responses: { 200: Schemas.Schema_package };
  };
  export type delete_Packages_delete__package__for__authenticated__user = {
    method: "DELETE";
    path: "/user/packages/{package_type}/{package_name}";
    requestFormat: "json";
    parameters: {
      path: { package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"; package_name: string };
    };
    responses: { 204: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type post_Packages_restore__package__for__authenticated__user = {
    method: "POST";
    path: "/user/packages/{package_type}/{package_name}/restore";
    requestFormat: "json";
    parameters: {
      query: Partial<{ token: string }>;
      path: { package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"; package_name: string };
    };
    responses: { 204: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Packages_get__all__package__versions__for__package__owned__by__authenticated__user = {
    method: "GET";
    path: "/user/packages/{package_type}/{package_name}/versions";
    requestFormat: "json";
    parameters: {
      query: Partial<{ page: number; per_page: number; state: "active" | "deleted" }>;
      path: { package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"; package_name: string };
    };
    responses: {
      200: Array<Schemas.package_version>;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type get_Packages_get__package__version__for__authenticated__user = {
    method: "GET";
    path: "/user/packages/{package_type}/{package_name}/versions/{package_version_id}";
    requestFormat: "json";
    parameters: {
      path: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        package_name: string;
        package_version_id: number;
      };
    };
    responses: { 200: Schemas.package_version };
  };
  export type delete_Packages_delete__package__version__for__authenticated__user = {
    method: "DELETE";
    path: "/user/packages/{package_type}/{package_name}/versions/{package_version_id}";
    requestFormat: "json";
    parameters: {
      path: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        package_name: string;
        package_version_id: number;
      };
    };
    responses: { 204: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type post_Packages_restore__package__version__for__authenticated__user = {
    method: "POST";
    path: "/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore";
    requestFormat: "json";
    parameters: {
      path: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        package_name: string;
        package_version_id: number;
      };
    };
    responses: { 204: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Users_list__public__emails__for__authenticated__user = {
    method: "GET";
    path: "/user/public_emails";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: {
      200: Array<Schemas.email>;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Repos_list__for__authenticated__user = {
    method: "GET";
    path: "/user/repos";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        visibility: "all" | "public" | "private";
        affiliation: string;
        type: "all" | "owner" | "public" | "private" | "member";
        sort: "created" | "updated" | "pushed" | "full_name";
        direction: "asc" | "desc";
        per_page: number;
        page: number;
        since: string;
        before: string;
      }>;
    };
    responses: {
      200: Array<Schemas.repository>;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      422: Schemas.validation_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Repos_create__for__authenticated__user = {
    method: "POST";
    path: "/user/repos";
    requestFormat: "json";
    parameters: {
      body: {
        name: string;
        description?: string | undefined;
        homepage?: string | undefined;
        private?: boolean | undefined;
        has_issues?: boolean | undefined;
        has_projects?: boolean | undefined;
        has_wiki?: boolean | undefined;
        has_discussions?: boolean | undefined;
        team_id?: number | undefined;
        auto_init?: boolean | undefined;
        gitignore_template?: string | undefined;
        license_template?: string | undefined;
        allow_squash_merge?: boolean | undefined;
        allow_merge_commit?: boolean | undefined;
        allow_rebase_merge?: boolean | undefined;
        allow_auto_merge?: boolean | undefined;
        delete_branch_on_merge?: boolean | undefined;
        squash_merge_commit_title?: ("PR_TITLE" | "COMMIT_OR_PR_TITLE") | undefined;
        squash_merge_commit_message?: ("PR_BODY" | "COMMIT_MESSAGES" | "BLANK") | undefined;
        merge_commit_title?: ("PR_TITLE" | "MERGE_MESSAGE") | undefined;
        merge_commit_message?: ("PR_BODY" | "PR_TITLE" | "BLANK") | undefined;
        has_downloads?: boolean | undefined;
        is_template?: boolean | undefined;
      };
    };
    responses: {
      201: Schemas.full_repository;
      304: unknown;
      400: Schemas.scim_error;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
    responseHeaders: { 201: { Location: string } };
  };
  export type get_Repos_list__invitations__for__authenticated__user = {
    method: "GET";
    path: "/user/repository_invitations";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: {
      200: Array<Schemas.repository_invitation>;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type patch_Repos_accept__invitation__for__authenticated__user = {
    method: "PATCH";
    path: "/user/repository_invitations/{invitation_id}";
    requestFormat: "json";
    parameters: {
      path: { invitation_id: number };
    };
    responses: {
      204: unknown;
      304: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
    };
  };
  export type delete_Repos_decline__invitation__for__authenticated__user = {
    method: "DELETE";
    path: "/user/repository_invitations/{invitation_id}";
    requestFormat: "json";
    parameters: {
      path: { invitation_id: number };
    };
    responses: {
      204: unknown;
      304: unknown;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      409: Schemas.basic_error;
    };
  };
  export type get_Users_list__social__accounts__for__authenticated__user = {
    method: "GET";
    path: "/user/social_accounts";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: {
      200: Array<Schemas.social_account>;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Users_add__social__account__for__authenticated__user = {
    method: "POST";
    path: "/user/social_accounts";
    requestFormat: "json";
    parameters: {
      body: { account_urls: Array<string> };
    };
    responses: {
      201: Array<Schemas.social_account>;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type delete_Users_delete__social__account__for__authenticated__user = {
    method: "DELETE";
    path: "/user/social_accounts";
    requestFormat: "json";
    parameters: {
      body: { account_urls: Array<string> };
    };
    responses: {
      204: unknown;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Users_list__ssh__signing__keys__for__authenticated__user = {
    method: "GET";
    path: "/user/ssh_signing_keys";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: {
      200: Array<Schemas.ssh_signing_key>;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type post_Users_create__ssh__signing__key__for__authenticated__user = {
    method: "POST";
    path: "/user/ssh_signing_keys";
    requestFormat: "json";
    parameters: {
      body: { title?: string | undefined; key: string };
    };
    responses: {
      201: Schemas.ssh_signing_key;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
      422: Schemas.validation_error;
    };
  };
  export type get_Users_get__ssh__signing__key__for__authenticated__user = {
    method: "GET";
    path: "/user/ssh_signing_keys/{ssh_signing_key_id}";
    requestFormat: "json";
    parameters: {
      path: { ssh_signing_key_id: number };
    };
    responses: {
      200: Schemas.ssh_signing_key;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type delete_Users_delete__ssh__signing__key__for__authenticated__user = {
    method: "DELETE";
    path: "/user/ssh_signing_keys/{ssh_signing_key_id}";
    requestFormat: "json";
    parameters: {
      path: { ssh_signing_key_id: number };
    };
    responses: {
      204: unknown;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type get_Activity_list__repos__starred__by__authenticated__user = {
    method: "GET";
    path: "/user/starred";
    requestFormat: "json";
    parameters: {
      query: Partial<{ sort: "created" | "updated"; direction: "asc" | "desc"; per_page: number; page: number }>;
    };
    responses: {
      200: Array<Schemas.starred_repository>;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Activity_check__repo__is__starred__by__authenticated__user = {
    method: "GET";
    path: "/user/starred/{owner}/{repo}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: {
      204: unknown;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type put_Activity_star__repo__for__authenticated__user = {
    method: "PUT";
    path: "/user/starred/{owner}/{repo}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: {
      204: unknown;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type delete_Activity_unstar__repo__for__authenticated__user = {
    method: "DELETE";
    path: "/user/starred/{owner}/{repo}";
    requestFormat: "json";
    parameters: {
      path: { owner: string; repo: string };
    };
    responses: {
      204: unknown;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type get_Activity_list__watched__repos__for__authenticated__user = {
    method: "GET";
    path: "/user/subscriptions";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: {
      200: Array<Schemas.minimal_repository>;
      304: unknown;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
    };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Teams_list__for__authenticated__user = {
    method: "GET";
    path: "/user/teams";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
    };
    responses: { 200: Array<Schemas.team_full>; 304: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Users_get__by__id = {
    method: "GET";
    path: "/user/{account_id}";
    requestFormat: "json";
    parameters: {
      path: { account_id: number };
    };
    responses: { 200: Schemas.private_user | Schemas.public_user; 404: Schemas.basic_error };
  };
  export type get_Users_list = {
    method: "GET";
    path: "/users";
    requestFormat: "json";
    parameters: {
      query: Partial<{ since: number; per_page: number }>;
    };
    responses: { 200: Array<Schemas.simple_user>; 304: unknown };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Users_get__by__username = {
    method: "GET";
    path: "/users/{username}";
    requestFormat: "json";
    parameters: {
      path: { username: string };
    };
    responses: { 200: Schemas.private_user | Schemas.public_user; 404: Schemas.basic_error };
  };
  export type post_Users_list__attestations__bulk = {
    method: "POST";
    path: "/users/{username}/attestations/bulk-list";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; before: string; after: string }>;
      path: { username: string };

      body: { subject_digests: Array<string>; predicate_type?: string | undefined };
    };
    responses: {
      200: Partial<{
        attestations_subject_digests: Record<
          string,
          Array<
            Partial<{
              bundle: Partial<{
                mediaType: string;
                verificationMaterial: Partial<{} & Record<string, any>>;
                dsseEnvelope: Partial<{} & Record<string, any>>;
              }>;
              repository_id: number;
              bundle_url: string;
            }>
          > | null
        >;
        page_info: Partial<{ has_next: boolean; has_previous: boolean; next: string; previous: string }>;
      }>;
    };
  };
  export type post_Users_delete__attestations__bulk = {
    method: "POST";
    path: "/users/{username}/attestations/delete-request";
    requestFormat: "json";
    parameters: {
      path: { username: string };

      body: { subject_digests: Array<string> } | { attestation_ids: Array<number> };
    };
    responses: { 200: unknown; 404: Schemas.basic_error };
  };
  export type delete_Users_delete__attestations__by__subject__digest = {
    method: "DELETE";
    path: "/users/{username}/attestations/digest/{subject_digest}";
    requestFormat: "json";
    parameters: {
      path: { username: string; subject_digest: string };
    };
    responses: { 200: unknown; 204: unknown; 404: Schemas.basic_error };
  };
  export type delete_Users_delete__attestations__by__id = {
    method: "DELETE";
    path: "/users/{username}/attestations/{attestation_id}";
    requestFormat: "json";
    parameters: {
      path: { username: string; attestation_id: number };
    };
    responses: { 200: unknown; 204: unknown; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Users_list__attestations = {
    method: "GET";
    path: "/users/{username}/attestations/{subject_digest}";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; before: string; after: string; predicate_type: string }>;
      path: { username: string; subject_digest: string };
    };
    responses: {
      200: Partial<{
        attestations: Array<
          Partial<{
            bundle: Partial<{
              mediaType: string;
              verificationMaterial: Partial<{} & Record<string, any>>;
              dsseEnvelope: Partial<{} & Record<string, any>>;
            }>;
            repository_id: number;
            bundle_url: string;
          }>
        >;
      }>;
      201: Schemas.empty_object;
      204: unknown;
      404: Schemas.basic_error;
    };
  };
  export type get_Packages_list__docker__migration__conflicting__packages__for__user = {
    method: "GET";
    path: "/users/{username}/docker/conflicts";
    requestFormat: "json";
    parameters: {
      path: { username: string };
    };
    responses: { 200: Array<Schemas.Schema_package>; 401: Schemas.basic_error; 403: Schemas.basic_error };
  };
  export type get_Activity_list__events__for__authenticated__user = {
    method: "GET";
    path: "/users/{username}/events";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { username: string };
    };
    responses: { 200: Array<Schemas.event> };
  };
  export type get_Activity_list__org__events__for__authenticated__user = {
    method: "GET";
    path: "/users/{username}/events/orgs/{org}";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { username: string; org: string };
    };
    responses: { 200: Array<Schemas.event> };
  };
  export type get_Activity_list__public__events__for__user = {
    method: "GET";
    path: "/users/{username}/events/public";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { username: string };
    };
    responses: { 200: Array<Schemas.event> };
  };
  export type get_Users_list__followers__for__user = {
    method: "GET";
    path: "/users/{username}/followers";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { username: string };
    };
    responses: { 200: Array<Schemas.simple_user> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Users_list__following__for__user = {
    method: "GET";
    path: "/users/{username}/following";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { username: string };
    };
    responses: { 200: Array<Schemas.simple_user> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Users_check__following__for__user = {
    method: "GET";
    path: "/users/{username}/following/{target_user}";
    requestFormat: "json";
    parameters: {
      path: { username: string; target_user: string };
    };
    responses: { 204: unknown; 404: unknown };
  };
  export type get_Gists_list__for__user = {
    method: "GET";
    path: "/users/{username}/gists";
    requestFormat: "json";
    parameters: {
      query: Partial<{ since: string; per_page: number; page: number }>;
      path: { username: string };
    };
    responses: { 200: Array<Schemas.base_gist>; 422: Schemas.validation_error };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Users_list__gpg__keys__for__user = {
    method: "GET";
    path: "/users/{username}/gpg_keys";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { username: string };
    };
    responses: { 200: Array<Schemas.gpg_key> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Users_get__context__for__user = {
    method: "GET";
    path: "/users/{username}/hovercard";
    requestFormat: "json";
    parameters: {
      query: Partial<{ subject_type: "organization" | "repository" | "issue" | "pull_request"; subject_id: string }>;
      path: { username: string };
    };
    responses: { 200: Schemas.hovercard; 404: Schemas.basic_error; 422: Schemas.validation_error };
  };
  export type get_Apps_get__user__installation = {
    method: "GET";
    path: "/users/{username}/installation";
    requestFormat: "json";
    parameters: {
      path: { username: string };
    };
    responses: { 200: Schemas.installation };
  };
  export type get_Users_list__public__keys__for__user = {
    method: "GET";
    path: "/users/{username}/keys";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { username: string };
    };
    responses: { 200: Array<Schemas.key_simple> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Orgs_list__for__user = {
    method: "GET";
    path: "/users/{username}/orgs";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { username: string };
    };
    responses: { 200: Array<Schemas.organization_simple> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Packages_list__packages__for__user = {
    method: "GET";
    path: "/users/{username}/packages";
    requestFormat: "json";
    parameters: {
      query: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        visibility?: ("public" | "private" | "internal") | undefined;
        page?: number | undefined;
        per_page?: number | undefined;
      };
      path: { username: string };
    };
    responses: { 200: Array<Schemas.Schema_package>; 400: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error };
  };
  export type get_Packages_get__package__for__user = {
    method: "GET";
    path: "/users/{username}/packages/{package_type}/{package_name}";
    requestFormat: "json";
    parameters: {
      path: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        package_name: string;
        username: string;
      };
    };
    responses: { 200: Schemas.Schema_package };
  };
  export type delete_Packages_delete__package__for__user = {
    method: "DELETE";
    path: "/users/{username}/packages/{package_type}/{package_name}";
    requestFormat: "json";
    parameters: {
      path: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        package_name: string;
        username: string;
      };
    };
    responses: { 204: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type post_Packages_restore__package__for__user = {
    method: "POST";
    path: "/users/{username}/packages/{package_type}/{package_name}/restore";
    requestFormat: "json";
    parameters: {
      query: Partial<{ token: string }>;
      path: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        package_name: string;
        username: string;
      };
    };
    responses: { 204: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Packages_get__all__package__versions__for__package__owned__by__user = {
    method: "GET";
    path: "/users/{username}/packages/{package_type}/{package_name}/versions";
    requestFormat: "json";
    parameters: {
      path: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        package_name: string;
        username: string;
      };
    };
    responses: {
      200: Array<Schemas.package_version>;
      401: Schemas.basic_error;
      403: Schemas.basic_error;
      404: Schemas.basic_error;
    };
  };
  export type get_Packages_get__package__version__for__user = {
    method: "GET";
    path: "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}";
    requestFormat: "json";
    parameters: {
      path: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        package_name: string;
        package_version_id: number;
        username: string;
      };
    };
    responses: { 200: Schemas.package_version };
  };
  export type delete_Packages_delete__package__version__for__user = {
    method: "DELETE";
    path: "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}";
    requestFormat: "json";
    parameters: {
      path: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        package_name: string;
        username: string;
        package_version_id: number;
      };
    };
    responses: { 204: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type post_Packages_restore__package__version__for__user = {
    method: "POST";
    path: "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore";
    requestFormat: "json";
    parameters: {
      path: {
        package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container";
        package_name: string;
        username: string;
        package_version_id: number;
      };
    };
    responses: { 204: unknown; 401: Schemas.basic_error; 403: Schemas.basic_error; 404: Schemas.basic_error };
  };
  export type get_Activity_list__received__events__for__user = {
    method: "GET";
    path: "/users/{username}/received_events";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { username: string };
    };
    responses: { 200: Array<Schemas.event> };
  };
  export type get_Activity_list__received__public__events__for__user = {
    method: "GET";
    path: "/users/{username}/received_events/public";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { username: string };
    };
    responses: { 200: Array<Schemas.event> };
  };
  export type get_Repos_list__for__user = {
    method: "GET";
    path: "/users/{username}/repos";
    requestFormat: "json";
    parameters: {
      query: Partial<{
        type: "all" | "owner" | "member";
        sort: "created" | "updated" | "pushed" | "full_name";
        direction: "asc" | "desc";
        per_page: number;
        page: number;
      }>;
      path: { username: string };
    };
    responses: { 200: Array<Schemas.minimal_repository> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Billing_get__github__actions__billing__user = {
    method: "GET";
    path: "/users/{username}/settings/billing/actions";
    requestFormat: "json";
    parameters: {
      path: { username: string };
    };
    responses: { 200: Schemas.actions_billing_usage };
  };
  export type get_Billing_get__github__packages__billing__user = {
    method: "GET";
    path: "/users/{username}/settings/billing/packages";
    requestFormat: "json";
    parameters: {
      path: { username: string };
    };
    responses: { 200: Schemas.packages_billing_usage };
  };
  export type get_Billing_get__shared__storage__billing__user = {
    method: "GET";
    path: "/users/{username}/settings/billing/shared-storage";
    requestFormat: "json";
    parameters: {
      path: { username: string };
    };
    responses: { 200: Schemas.combined_billing_usage };
  };
  export type get_Billing_get__github__billing__usage__report__user = {
    method: "GET";
    path: "/users/{username}/settings/billing/usage";
    requestFormat: "json";
    parameters: {
      query: Partial<{ year: number; month: number; day: number; hour: number }>;
      path: { username: string };
    };
    responses: {
      200: Schemas.billing_usage_report_user;
      400: Schemas.scim_error;
      403: Schemas.basic_error;
      500: Schemas.basic_error;
      503: Partial<{ code: string; message: string; documentation_url: string }>;
    };
  };
  export type get_Users_list__social__accounts__for__user = {
    method: "GET";
    path: "/users/{username}/social_accounts";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { username: string };
    };
    responses: { 200: Array<Schemas.social_account> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Users_list__ssh__signing__keys__for__user = {
    method: "GET";
    path: "/users/{username}/ssh_signing_keys";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { username: string };
    };
    responses: { 200: Array<Schemas.ssh_signing_key> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Activity_list__repos__starred__by__user = {
    method: "GET";
    path: "/users/{username}/starred";
    requestFormat: "json";
    parameters: {
      query: Partial<{ sort: "created" | "updated"; direction: "asc" | "desc"; per_page: number; page: number }>;
      path: { username: string };
    };
    responses: { 200: Array<Schemas.starred_repository> | Array<Schemas.repository> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Activity_list__repos__watched__by__user = {
    method: "GET";
    path: "/users/{username}/subscriptions";
    requestFormat: "json";
    parameters: {
      query: Partial<{ per_page: number; page: number }>;
      path: { username: string };
    };
    responses: { 200: Array<Schemas.minimal_repository> };
    responseHeaders: { 200: { Link: string } };
  };
  export type get_Meta_get__all__versions = {
    method: "GET";
    path: "/versions";
    requestFormat: "json";
    parameters: never;
    responses: { 200: Array<string>; 404: Schemas.basic_error };
  };
  export type get_Meta_get__zen = {
    method: "GET";
    path: "/zen";
    requestFormat: "json";
    parameters: never;
    responses: { 200: unknown };
  };

  // </Endpoints>
}

// <EndpointByMethod>
export type EndpointByMethod = {
  get: {
    "/": Endpoints.get_Meta_root;
    "/advisories": Endpoints.get_Security__advisories_list__global__advisories;
    "/advisories/{ghsa_id}": Endpoints.get_Security__advisories_get__global__advisory;
    "/app": Endpoints.get_Apps_get__authenticated;
    "/app/hook/config": Endpoints.get_Apps_get__webhook__config__for__app;
    "/app/hook/deliveries": Endpoints.get_Apps_list__webhook__deliveries;
    "/app/hook/deliveries/{delivery_id}": Endpoints.get_Apps_get__webhook__delivery;
    "/app/installation-requests": Endpoints.get_Apps_list__installation__requests__for__authenticated__app;
    "/app/installations": Endpoints.get_Apps_list__installations;
    "/app/installations/{installation_id}": Endpoints.get_Apps_get__installation;
    "/apps/{app_slug}": Endpoints.get_Apps_get__by__slug;
    "/assignments/{assignment_id}": Endpoints.get_Classroom_get__an__assignment;
    "/assignments/{assignment_id}/accepted_assignments": Endpoints.get_Classroom_list__accepted__assignments__for__an__assignment;
    "/assignments/{assignment_id}/grades": Endpoints.get_Classroom_get__assignment__grades;
    "/classrooms": Endpoints.get_Classroom_list__classrooms;
    "/classrooms/{classroom_id}": Endpoints.get_Classroom_get__a__classroom;
    "/classrooms/{classroom_id}/assignments": Endpoints.get_Classroom_list__assignments__for__a__classroom;
    "/codes_of_conduct": Endpoints.get_Codes__of__conduct_get__all__codes__of__conduct;
    "/codes_of_conduct/{key}": Endpoints.get_Codes__of__conduct_get__conduct__code;
    "/emojis": Endpoints.get_Emojis_get;
    "/enterprises/{enterprise}/code-security/configurations": Endpoints.get_Code__security_get__configurations__for__enterprise;
    "/enterprises/{enterprise}/code-security/configurations/defaults": Endpoints.get_Code__security_get__default__configurations__for__enterprise;
    "/enterprises/{enterprise}/code-security/configurations/{configuration_id}": Endpoints.get_Code__security_get__single__configuration__for__enterprise;
    "/enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories": Endpoints.get_Code__security_get__repositories__for__enterprise__configuration;
    "/enterprises/{enterprise}/dependabot/alerts": Endpoints.get_Dependabot_list__alerts__for__enterprise;
    "/enterprises/{enterprise}/secret-scanning/alerts": Endpoints.get_Secret__scanning_list__alerts__for__enterprise;
    "/events": Endpoints.get_Activity_list__public__events;
    "/feeds": Endpoints.get_Activity_get__feeds;
    "/gists": Endpoints.get_Gists_list;
    "/gists/public": Endpoints.get_Gists_list__public;
    "/gists/starred": Endpoints.get_Gists_list__starred;
    "/gists/{gist_id}": Endpoints.get_Gists_get;
    "/gists/{gist_id}/comments": Endpoints.get_Gists_list__comments;
    "/gists/{gist_id}/comments/{comment_id}": Endpoints.get_Gists_get__comment;
    "/gists/{gist_id}/commits": Endpoints.get_Gists_list__commits;
    "/gists/{gist_id}/forks": Endpoints.get_Gists_list__forks;
    "/gists/{gist_id}/star": Endpoints.get_Gists_check__is__starred;
    "/gists/{gist_id}/{sha}": Endpoints.get_Gists_get__revision;
    "/gitignore/templates": Endpoints.get_Gitignore_get__all__templates;
    "/gitignore/templates/{name}": Endpoints.get_Gitignore_get__template;
    "/installation/repositories": Endpoints.get_Apps_list__repos__accessible__to__installation;
    "/issues": Endpoints.get_Issues_list;
    "/licenses": Endpoints.get_Licenses_get__all__commonly__used;
    "/licenses/{license}": Endpoints.get_Licenses_get;
    "/marketplace_listing/accounts/{account_id}": Endpoints.get_Apps_get__subscription__plan__for__account;
    "/marketplace_listing/plans": Endpoints.get_Apps_list__plans;
    "/marketplace_listing/plans/{plan_id}/accounts": Endpoints.get_Apps_list__accounts__for__plan;
    "/marketplace_listing/stubbed/accounts/{account_id}": Endpoints.get_Apps_get__subscription__plan__for__account__stubbed;
    "/marketplace_listing/stubbed/plans": Endpoints.get_Apps_list__plans__stubbed;
    "/marketplace_listing/stubbed/plans/{plan_id}/accounts": Endpoints.get_Apps_list__accounts__for__plan__stubbed;
    "/meta": Endpoints.get_Meta_get;
    "/networks/{owner}/{repo}/events": Endpoints.get_Activity_list__public__events__for__repo__network;
    "/notifications": Endpoints.get_Activity_list__notifications__for__authenticated__user;
    "/notifications/threads/{thread_id}": Endpoints.get_Activity_get__thread;
    "/notifications/threads/{thread_id}/subscription": Endpoints.get_Activity_get__thread__subscription__for__authenticated__user;
    "/octocat": Endpoints.get_Meta_get__octocat;
    "/organizations": Endpoints.get_Orgs_list;
    "/organizations/{org}/dependabot/repository-access": Endpoints.get_Dependabot_repository__access__for__org;
    "/organizations/{org}/settings/billing/usage": Endpoints.get_Billing_get__github__billing__usage__report__org;
    "/orgs/{org}": Endpoints.get_Orgs_get;
    "/orgs/{org}/actions/cache/usage": Endpoints.get_Actions_get__actions__cache__usage__for__org;
    "/orgs/{org}/actions/cache/usage-by-repository": Endpoints.get_Actions_get__actions__cache__usage__by__repo__for__org;
    "/orgs/{org}/actions/hosted-runners": Endpoints.get_Actions_list__hosted__runners__for__org;
    "/orgs/{org}/actions/hosted-runners/images/github-owned": Endpoints.get_Actions_get__hosted__runners__github__owned__images__for__org;
    "/orgs/{org}/actions/hosted-runners/images/partner": Endpoints.get_Actions_get__hosted__runners__partner__images__for__org;
    "/orgs/{org}/actions/hosted-runners/limits": Endpoints.get_Actions_get__hosted__runners__limits__for__org;
    "/orgs/{org}/actions/hosted-runners/machine-sizes": Endpoints.get_Actions_get__hosted__runners__machine__specs__for__org;
    "/orgs/{org}/actions/hosted-runners/platforms": Endpoints.get_Actions_get__hosted__runners__platforms__for__org;
    "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}": Endpoints.get_Actions_get__hosted__runner__for__org;
    "/orgs/{org}/actions/oidc/customization/sub": Endpoints.get_Oidc_get__oidc__custom__sub__template__for__org;
    "/orgs/{org}/actions/permissions": Endpoints.get_Actions_get__github__actions__permissions__organization;
    "/orgs/{org}/actions/permissions/artifact-and-log-retention": Endpoints.get_Actions_get__artifact__and__log__retention__settings__organization;
    "/orgs/{org}/actions/permissions/fork-pr-contributor-approval": Endpoints.get_Actions_get__fork__pr__contributor__approval__permissions__organization;
    "/orgs/{org}/actions/permissions/fork-pr-workflows-private-repos": Endpoints.get_Actions_get__private__repo__fork__pr__workflows__settings__organization;
    "/orgs/{org}/actions/permissions/repositories": Endpoints.get_Actions_list__selected__repositories__enabled__github__actions__organization;
    "/orgs/{org}/actions/permissions/selected-actions": Endpoints.get_Actions_get__allowed__actions__organization;
    "/orgs/{org}/actions/permissions/self-hosted-runners": Endpoints.get_Actions_get__self__hosted__runners__permissions__organization;
    "/orgs/{org}/actions/permissions/self-hosted-runners/repositories": Endpoints.get_Actions_list__selected__repositories__self__hosted__runners__organization;
    "/orgs/{org}/actions/permissions/workflow": Endpoints.get_Actions_get__github__actions__default__workflow__permissions__organization;
    "/orgs/{org}/actions/runner-groups": Endpoints.get_Actions_list__self__hosted__runner__groups__for__org;
    "/orgs/{org}/actions/runner-groups/{runner_group_id}": Endpoints.get_Actions_get__self__hosted__runner__group__for__org;
    "/orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runners": Endpoints.get_Actions_list__github__hosted__runners__in__group__for__org;
    "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories": Endpoints.get_Actions_list__repo__access__to__self__hosted__runner__group__in__org;
    "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners": Endpoints.get_Actions_list__self__hosted__runners__in__group__for__org;
    "/orgs/{org}/actions/runners": Endpoints.get_Actions_list__self__hosted__runners__for__org;
    "/orgs/{org}/actions/runners/downloads": Endpoints.get_Actions_list__runner__applications__for__org;
    "/orgs/{org}/actions/runners/{runner_id}": Endpoints.get_Actions_get__self__hosted__runner__for__org;
    "/orgs/{org}/actions/runners/{runner_id}/labels": Endpoints.get_Actions_list__labels__for__self__hosted__runner__for__org;
    "/orgs/{org}/actions/secrets": Endpoints.get_Actions_list__org__secrets;
    "/orgs/{org}/actions/secrets/public-key": Endpoints.get_Actions_get__org__public__key;
    "/orgs/{org}/actions/secrets/{secret_name}": Endpoints.get_Actions_get__org__secret;
    "/orgs/{org}/actions/secrets/{secret_name}/repositories": Endpoints.get_Actions_list__selected__repos__for__org__secret;
    "/orgs/{org}/actions/variables": Endpoints.get_Actions_list__org__variables;
    "/orgs/{org}/actions/variables/{name}": Endpoints.get_Actions_get__org__variable;
    "/orgs/{org}/actions/variables/{name}/repositories": Endpoints.get_Actions_list__selected__repos__for__org__variable;
    "/orgs/{org}/attestations/{subject_digest}": Endpoints.get_Orgs_list__attestations;
    "/orgs/{org}/blocks": Endpoints.get_Orgs_list__blocked__users;
    "/orgs/{org}/blocks/{username}": Endpoints.get_Orgs_check__blocked__user;
    "/orgs/{org}/campaigns": Endpoints.get_Campaigns_list__org__campaigns;
    "/orgs/{org}/campaigns/{campaign_number}": Endpoints.get_Campaigns_get__campaign__summary;
    "/orgs/{org}/code-scanning/alerts": Endpoints.get_Code__scanning_list__alerts__for__org;
    "/orgs/{org}/code-security/configurations": Endpoints.get_Code__security_get__configurations__for__org;
    "/orgs/{org}/code-security/configurations/defaults": Endpoints.get_Code__security_get__default__configurations;
    "/orgs/{org}/code-security/configurations/{configuration_id}": Endpoints.get_Code__security_get__configuration;
    "/orgs/{org}/code-security/configurations/{configuration_id}/repositories": Endpoints.get_Code__security_get__repositories__for__configuration;
    "/orgs/{org}/codespaces": Endpoints.get_Codespaces_list__in__organization;
    "/orgs/{org}/codespaces/secrets": Endpoints.get_Codespaces_list__org__secrets;
    "/orgs/{org}/codespaces/secrets/public-key": Endpoints.get_Codespaces_get__org__public__key;
    "/orgs/{org}/codespaces/secrets/{secret_name}": Endpoints.get_Codespaces_get__org__secret;
    "/orgs/{org}/codespaces/secrets/{secret_name}/repositories": Endpoints.get_Codespaces_list__selected__repos__for__org__secret;
    "/orgs/{org}/copilot/billing": Endpoints.get_Copilot_get__copilot__organization__details;
    "/orgs/{org}/copilot/billing/seats": Endpoints.get_Copilot_list__copilot__seats;
    "/orgs/{org}/copilot/metrics": Endpoints.get_Copilot_copilot__metrics__for__organization;
    "/orgs/{org}/dependabot/alerts": Endpoints.get_Dependabot_list__alerts__for__org;
    "/orgs/{org}/dependabot/secrets": Endpoints.get_Dependabot_list__org__secrets;
    "/orgs/{org}/dependabot/secrets/public-key": Endpoints.get_Dependabot_get__org__public__key;
    "/orgs/{org}/dependabot/secrets/{secret_name}": Endpoints.get_Dependabot_get__org__secret;
    "/orgs/{org}/dependabot/secrets/{secret_name}/repositories": Endpoints.get_Dependabot_list__selected__repos__for__org__secret;
    "/orgs/{org}/docker/conflicts": Endpoints.get_Packages_list__docker__migration__conflicting__packages__for__organization;
    "/orgs/{org}/events": Endpoints.get_Activity_list__public__org__events;
    "/orgs/{org}/failed_invitations": Endpoints.get_Orgs_list__failed__invitations;
    "/orgs/{org}/hooks": Endpoints.get_Orgs_list__webhooks;
    "/orgs/{org}/hooks/{hook_id}": Endpoints.get_Orgs_get__webhook;
    "/orgs/{org}/hooks/{hook_id}/config": Endpoints.get_Orgs_get__webhook__config__for__org;
    "/orgs/{org}/hooks/{hook_id}/deliveries": Endpoints.get_Orgs_list__webhook__deliveries;
    "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}": Endpoints.get_Orgs_get__webhook__delivery;
    "/orgs/{org}/insights/api/route-stats/{actor_type}/{actor_id}": Endpoints.get_Api__insights_get__route__stats__by__actor;
    "/orgs/{org}/insights/api/subject-stats": Endpoints.get_Api__insights_get__subject__stats;
    "/orgs/{org}/insights/api/summary-stats": Endpoints.get_Api__insights_get__summary__stats;
    "/orgs/{org}/insights/api/summary-stats/users/{user_id}": Endpoints.get_Api__insights_get__summary__stats__by__user;
    "/orgs/{org}/insights/api/summary-stats/{actor_type}/{actor_id}": Endpoints.get_Api__insights_get__summary__stats__by__actor;
    "/orgs/{org}/insights/api/time-stats": Endpoints.get_Api__insights_get__time__stats;
    "/orgs/{org}/insights/api/time-stats/users/{user_id}": Endpoints.get_Api__insights_get__time__stats__by__user;
    "/orgs/{org}/insights/api/time-stats/{actor_type}/{actor_id}": Endpoints.get_Api__insights_get__time__stats__by__actor;
    "/orgs/{org}/insights/api/user-stats/{user_id}": Endpoints.get_Api__insights_get__user__stats;
    "/orgs/{org}/installation": Endpoints.get_Apps_get__org__installation;
    "/orgs/{org}/installations": Endpoints.get_Orgs_list__app__installations;
    "/orgs/{org}/interaction-limits": Endpoints.get_Interactions_get__restrictions__for__org;
    "/orgs/{org}/invitations": Endpoints.get_Orgs_list__pending__invitations;
    "/orgs/{org}/invitations/{invitation_id}/teams": Endpoints.get_Orgs_list__invitation__teams;
    "/orgs/{org}/issue-types": Endpoints.get_Orgs_list__issue__types;
    "/orgs/{org}/issues": Endpoints.get_Issues_list__for__org;
    "/orgs/{org}/members": Endpoints.get_Orgs_list__members;
    "/orgs/{org}/members/{username}": Endpoints.get_Orgs_check__membership__for__user;
    "/orgs/{org}/members/{username}/codespaces": Endpoints.get_Codespaces_get__codespaces__for__user__in__org;
    "/orgs/{org}/members/{username}/copilot": Endpoints.get_Copilot_get__copilot__seat__details__for__user;
    "/orgs/{org}/memberships/{username}": Endpoints.get_Orgs_get__membership__for__user;
    "/orgs/{org}/migrations": Endpoints.get_Migrations_list__for__org;
    "/orgs/{org}/migrations/{migration_id}": Endpoints.get_Migrations_get__status__for__org;
    "/orgs/{org}/migrations/{migration_id}/archive": Endpoints.get_Migrations_download__archive__for__org;
    "/orgs/{org}/migrations/{migration_id}/repositories": Endpoints.get_Migrations_list__repos__for__org;
    "/orgs/{org}/organization-roles": Endpoints.get_Orgs_list__org__roles;
    "/orgs/{org}/organization-roles/{role_id}": Endpoints.get_Orgs_get__org__role;
    "/orgs/{org}/organization-roles/{role_id}/teams": Endpoints.get_Orgs_list__org__role__teams;
    "/orgs/{org}/organization-roles/{role_id}/users": Endpoints.get_Orgs_list__org__role__users;
    "/orgs/{org}/outside_collaborators": Endpoints.get_Orgs_list__outside__collaborators;
    "/orgs/{org}/packages": Endpoints.get_Packages_list__packages__for__organization;
    "/orgs/{org}/packages/{package_type}/{package_name}": Endpoints.get_Packages_get__package__for__organization;
    "/orgs/{org}/packages/{package_type}/{package_name}/versions": Endpoints.get_Packages_get__all__package__versions__for__package__owned__by__org;
    "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}": Endpoints.get_Packages_get__package__version__for__organization;
    "/orgs/{org}/personal-access-token-requests": Endpoints.get_Orgs_list__pat__grant__requests;
    "/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories": Endpoints.get_Orgs_list__pat__grant__request__repositories;
    "/orgs/{org}/personal-access-tokens": Endpoints.get_Orgs_list__pat__grants;
    "/orgs/{org}/personal-access-tokens/{pat_id}/repositories": Endpoints.get_Orgs_list__pat__grant__repositories;
    "/orgs/{org}/private-registries": Endpoints.get_Private__registries_list__org__private__registries;
    "/orgs/{org}/private-registries/public-key": Endpoints.get_Private__registries_get__org__public__key;
    "/orgs/{org}/private-registries/{secret_name}": Endpoints.get_Private__registries_get__org__private__registry;
    "/orgs/{org}/properties/schema": Endpoints.get_Orgs_get__all__custom__properties;
    "/orgs/{org}/properties/schema/{custom_property_name}": Endpoints.get_Orgs_get__custom__property;
    "/orgs/{org}/properties/values": Endpoints.get_Orgs_list__custom__properties__values__for__repos;
    "/orgs/{org}/public_members": Endpoints.get_Orgs_list__public__members;
    "/orgs/{org}/public_members/{username}": Endpoints.get_Orgs_check__public__membership__for__user;
    "/orgs/{org}/repos": Endpoints.get_Repos_list__for__org;
    "/orgs/{org}/rulesets": Endpoints.get_Repos_get__org__rulesets;
    "/orgs/{org}/rulesets/rule-suites": Endpoints.get_Repos_get__org__rule__suites;
    "/orgs/{org}/rulesets/rule-suites/{rule_suite_id}": Endpoints.get_Repos_get__org__rule__suite;
    "/orgs/{org}/rulesets/{ruleset_id}": Endpoints.get_Repos_get__org__ruleset;
    "/orgs/{org}/rulesets/{ruleset_id}/history": Endpoints.get_Orgs_get__org__ruleset__history;
    "/orgs/{org}/rulesets/{ruleset_id}/history/{version_id}": Endpoints.get_Orgs_get__org__ruleset__version;
    "/orgs/{org}/secret-scanning/alerts": Endpoints.get_Secret__scanning_list__alerts__for__org;
    "/orgs/{org}/secret-scanning/pattern-configurations": Endpoints.get_Secret__scanning_list__org__pattern__configs;
    "/orgs/{org}/security-advisories": Endpoints.get_Security__advisories_list__org__repository__advisories;
    "/orgs/{org}/settings/billing/actions": Endpoints.get_Billing_get__github__actions__billing__org;
    "/orgs/{org}/settings/billing/packages": Endpoints.get_Billing_get__github__packages__billing__org;
    "/orgs/{org}/settings/billing/shared-storage": Endpoints.get_Billing_get__shared__storage__billing__org;
    "/orgs/{org}/settings/network-configurations": Endpoints.get_Hosted__compute_list__network__configurations__for__org;
    "/orgs/{org}/settings/network-configurations/{network_configuration_id}": Endpoints.get_Hosted__compute_get__network__configuration__for__org;
    "/orgs/{org}/settings/network-settings/{network_settings_id}": Endpoints.get_Hosted__compute_get__network__settings__for__org;
    "/orgs/{org}/team/{team_slug}/copilot/metrics": Endpoints.get_Copilot_copilot__metrics__for__team;
    "/orgs/{org}/teams": Endpoints.get_Teams_list;
    "/orgs/{org}/teams/{team_slug}": Endpoints.get_Teams_get__by__name;
    "/orgs/{org}/teams/{team_slug}/discussions": Endpoints.get_Teams_list__discussions__in__org;
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}": Endpoints.get_Teams_get__discussion__in__org;
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments": Endpoints.get_Teams_list__discussion__comments__in__org;
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}": Endpoints.get_Teams_get__discussion__comment__in__org;
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions": Endpoints.get_Reactions_list__for__team__discussion__comment__in__org;
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions": Endpoints.get_Reactions_list__for__team__discussion__in__org;
    "/orgs/{org}/teams/{team_slug}/invitations": Endpoints.get_Teams_list__pending__invitations__in__org;
    "/orgs/{org}/teams/{team_slug}/members": Endpoints.get_Teams_list__members__in__org;
    "/orgs/{org}/teams/{team_slug}/memberships/{username}": Endpoints.get_Teams_get__membership__for__user__in__org;
    "/orgs/{org}/teams/{team_slug}/repos": Endpoints.get_Teams_list__repos__in__org;
    "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": Endpoints.get_Teams_check__permissions__for__repo__in__org;
    "/orgs/{org}/teams/{team_slug}/teams": Endpoints.get_Teams_list__child__in__org;
    "/rate_limit": Endpoints.get_Rate__limit_get;
    "/repos/{owner}/{repo}": Endpoints.get_Repos_get;
    "/repos/{owner}/{repo}/actions/artifacts": Endpoints.get_Actions_list__artifacts__for__repo;
    "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}": Endpoints.get_Actions_get__artifact;
    "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}": Endpoints.get_Actions_download__artifact;
    "/repos/{owner}/{repo}/actions/cache/usage": Endpoints.get_Actions_get__actions__cache__usage;
    "/repos/{owner}/{repo}/actions/caches": Endpoints.get_Actions_get__actions__cache__list;
    "/repos/{owner}/{repo}/actions/jobs/{job_id}": Endpoints.get_Actions_get__job__for__workflow__run;
    "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs": Endpoints.get_Actions_download__job__logs__for__workflow__run;
    "/repos/{owner}/{repo}/actions/oidc/customization/sub": Endpoints.get_Actions_get__custom__oidc__sub__claim__for__repo;
    "/repos/{owner}/{repo}/actions/organization-secrets": Endpoints.get_Actions_list__repo__organization__secrets;
    "/repos/{owner}/{repo}/actions/organization-variables": Endpoints.get_Actions_list__repo__organization__variables;
    "/repos/{owner}/{repo}/actions/permissions": Endpoints.get_Actions_get__github__actions__permissions__repository;
    "/repos/{owner}/{repo}/actions/permissions/access": Endpoints.get_Actions_get__workflow__access__to__repository;
    "/repos/{owner}/{repo}/actions/permissions/artifact-and-log-retention": Endpoints.get_Actions_get__artifact__and__log__retention__settings__repository;
    "/repos/{owner}/{repo}/actions/permissions/fork-pr-contributor-approval": Endpoints.get_Actions_get__fork__pr__contributor__approval__permissions__repository;
    "/repos/{owner}/{repo}/actions/permissions/fork-pr-workflows-private-repos": Endpoints.get_Actions_get__private__repo__fork__pr__workflows__settings__repository;
    "/repos/{owner}/{repo}/actions/permissions/selected-actions": Endpoints.get_Actions_get__allowed__actions__repository;
    "/repos/{owner}/{repo}/actions/permissions/workflow": Endpoints.get_Actions_get__github__actions__default__workflow__permissions__repository;
    "/repos/{owner}/{repo}/actions/runners": Endpoints.get_Actions_list__self__hosted__runners__for__repo;
    "/repos/{owner}/{repo}/actions/runners/downloads": Endpoints.get_Actions_list__runner__applications__for__repo;
    "/repos/{owner}/{repo}/actions/runners/{runner_id}": Endpoints.get_Actions_get__self__hosted__runner__for__repo;
    "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels": Endpoints.get_Actions_list__labels__for__self__hosted__runner__for__repo;
    "/repos/{owner}/{repo}/actions/runs": Endpoints.get_Actions_list__workflow__runs__for__repo;
    "/repos/{owner}/{repo}/actions/runs/{run_id}": Endpoints.get_Actions_get__workflow__run;
    "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals": Endpoints.get_Actions_get__reviews__for__run;
    "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts": Endpoints.get_Actions_list__workflow__run__artifacts;
    "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}": Endpoints.get_Actions_get__workflow__run__attempt;
    "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs": Endpoints.get_Actions_list__jobs__for__workflow__run__attempt;
    "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs": Endpoints.get_Actions_download__workflow__run__attempt__logs;
    "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs": Endpoints.get_Actions_list__jobs__for__workflow__run;
    "/repos/{owner}/{repo}/actions/runs/{run_id}/logs": Endpoints.get_Actions_download__workflow__run__logs;
    "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments": Endpoints.get_Actions_get__pending__deployments__for__run;
    "/repos/{owner}/{repo}/actions/runs/{run_id}/timing": Endpoints.get_Actions_get__workflow__run__usage;
    "/repos/{owner}/{repo}/actions/secrets": Endpoints.get_Actions_list__repo__secrets;
    "/repos/{owner}/{repo}/actions/secrets/public-key": Endpoints.get_Actions_get__repo__public__key;
    "/repos/{owner}/{repo}/actions/secrets/{secret_name}": Endpoints.get_Actions_get__repo__secret;
    "/repos/{owner}/{repo}/actions/variables": Endpoints.get_Actions_list__repo__variables;
    "/repos/{owner}/{repo}/actions/variables/{name}": Endpoints.get_Actions_get__repo__variable;
    "/repos/{owner}/{repo}/actions/workflows": Endpoints.get_Actions_list__repo__workflows;
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}": Endpoints.get_Actions_get__workflow;
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs": Endpoints.get_Actions_list__workflow__runs;
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing": Endpoints.get_Actions_get__workflow__usage;
    "/repos/{owner}/{repo}/activity": Endpoints.get_Repos_list__activities;
    "/repos/{owner}/{repo}/assignees": Endpoints.get_Issues_list__assignees;
    "/repos/{owner}/{repo}/assignees/{assignee}": Endpoints.get_Issues_check__user__can__be__assigned;
    "/repos/{owner}/{repo}/attestations/{subject_digest}": Endpoints.get_Repos_list__attestations;
    "/repos/{owner}/{repo}/autolinks": Endpoints.get_Repos_list__autolinks;
    "/repos/{owner}/{repo}/autolinks/{autolink_id}": Endpoints.get_Repos_get__autolink;
    "/repos/{owner}/{repo}/automated-security-fixes": Endpoints.get_Repos_check__automated__security__fixes;
    "/repos/{owner}/{repo}/branches": Endpoints.get_Repos_list__branches;
    "/repos/{owner}/{repo}/branches/{branch}": Endpoints.get_Repos_get__branch;
    "/repos/{owner}/{repo}/branches/{branch}/protection": Endpoints.get_Repos_get__branch__protection;
    "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins": Endpoints.get_Repos_get__admin__branch__protection;
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews": Endpoints.get_Repos_get__pull__request__review__protection;
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures": Endpoints.get_Repos_get__commit__signature__protection;
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks": Endpoints.get_Repos_get__status__checks__protection;
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": Endpoints.get_Repos_get__all__status__check__contexts;
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions": Endpoints.get_Repos_get__access__restrictions;
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": Endpoints.get_Repos_get__apps__with__access__to__protected__branch;
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": Endpoints.get_Repos_get__teams__with__access__to__protected__branch;
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": Endpoints.get_Repos_get__users__with__access__to__protected__branch;
    "/repos/{owner}/{repo}/check-runs/{check_run_id}": Endpoints.get_Checks_get;
    "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations": Endpoints.get_Checks_list__annotations;
    "/repos/{owner}/{repo}/check-suites/{check_suite_id}": Endpoints.get_Checks_get__suite;
    "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs": Endpoints.get_Checks_list__for__suite;
    "/repos/{owner}/{repo}/code-scanning/alerts": Endpoints.get_Code__scanning_list__alerts__for__repo;
    "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}": Endpoints.get_Code__scanning_get__alert;
    "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix": Endpoints.get_Code__scanning_get__autofix;
    "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances": Endpoints.get_Code__scanning_list__alert__instances;
    "/repos/{owner}/{repo}/code-scanning/analyses": Endpoints.get_Code__scanning_list__recent__analyses;
    "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}": Endpoints.get_Code__scanning_get__analysis;
    "/repos/{owner}/{repo}/code-scanning/codeql/databases": Endpoints.get_Code__scanning_list__codeql__databases;
    "/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}": Endpoints.get_Code__scanning_get__codeql__database;
    "/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}": Endpoints.get_Code__scanning_get__variant__analysis;
    "/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}": Endpoints.get_Code__scanning_get__variant__analysis__repo__task;
    "/repos/{owner}/{repo}/code-scanning/default-setup": Endpoints.get_Code__scanning_get__default__setup;
    "/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}": Endpoints.get_Code__scanning_get__sarif;
    "/repos/{owner}/{repo}/code-security-configuration": Endpoints.get_Code__security_get__configuration__for__repository;
    "/repos/{owner}/{repo}/codeowners/errors": Endpoints.get_Repos_codeowners__errors;
    "/repos/{owner}/{repo}/codespaces": Endpoints.get_Codespaces_list__in__repository__for__authenticated__user;
    "/repos/{owner}/{repo}/codespaces/devcontainers": Endpoints.get_Codespaces_list__devcontainers__in__repository__for__authenticated__user;
    "/repos/{owner}/{repo}/codespaces/machines": Endpoints.get_Codespaces_repo__machines__for__authenticated__user;
    "/repos/{owner}/{repo}/codespaces/new": Endpoints.get_Codespaces_pre__flight__with__repo__for__authenticated__user;
    "/repos/{owner}/{repo}/codespaces/permissions_check": Endpoints.get_Codespaces_check__permissions__for__devcontainer;
    "/repos/{owner}/{repo}/codespaces/secrets": Endpoints.get_Codespaces_list__repo__secrets;
    "/repos/{owner}/{repo}/codespaces/secrets/public-key": Endpoints.get_Codespaces_get__repo__public__key;
    "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}": Endpoints.get_Codespaces_get__repo__secret;
    "/repos/{owner}/{repo}/collaborators": Endpoints.get_Repos_list__collaborators;
    "/repos/{owner}/{repo}/collaborators/{username}": Endpoints.get_Repos_check__collaborator;
    "/repos/{owner}/{repo}/collaborators/{username}/permission": Endpoints.get_Repos_get__collaborator__permission__level;
    "/repos/{owner}/{repo}/comments": Endpoints.get_Repos_list__commit__comments__for__repo;
    "/repos/{owner}/{repo}/comments/{comment_id}": Endpoints.get_Repos_get__commit__comment;
    "/repos/{owner}/{repo}/comments/{comment_id}/reactions": Endpoints.get_Reactions_list__for__commit__comment;
    "/repos/{owner}/{repo}/commits": Endpoints.get_Repos_list__commits;
    "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head": Endpoints.get_Repos_list__branches__for__head__commit;
    "/repos/{owner}/{repo}/commits/{commit_sha}/comments": Endpoints.get_Repos_list__comments__for__commit;
    "/repos/{owner}/{repo}/commits/{commit_sha}/pulls": Endpoints.get_Repos_list__pull__requests__associated__with__commit;
    "/repos/{owner}/{repo}/commits/{ref}": Endpoints.get_Repos_get__commit;
    "/repos/{owner}/{repo}/commits/{ref}/check-runs": Endpoints.get_Checks_list__for__ref;
    "/repos/{owner}/{repo}/commits/{ref}/check-suites": Endpoints.get_Checks_list__suites__for__ref;
    "/repos/{owner}/{repo}/commits/{ref}/status": Endpoints.get_Repos_get__combined__status__for__ref;
    "/repos/{owner}/{repo}/commits/{ref}/statuses": Endpoints.get_Repos_list__commit__statuses__for__ref;
    "/repos/{owner}/{repo}/community/profile": Endpoints.get_Repos_get__community__profile__metrics;
    "/repos/{owner}/{repo}/compare/{basehead}": Endpoints.get_Repos_compare__commits;
    "/repos/{owner}/{repo}/contents/{path}": Endpoints.get_Repos_get__content;
    "/repos/{owner}/{repo}/contributors": Endpoints.get_Repos_list__contributors;
    "/repos/{owner}/{repo}/dependabot/alerts": Endpoints.get_Dependabot_list__alerts__for__repo;
    "/repos/{owner}/{repo}/dependabot/alerts/{alert_number}": Endpoints.get_Dependabot_get__alert;
    "/repos/{owner}/{repo}/dependabot/secrets": Endpoints.get_Dependabot_list__repo__secrets;
    "/repos/{owner}/{repo}/dependabot/secrets/public-key": Endpoints.get_Dependabot_get__repo__public__key;
    "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}": Endpoints.get_Dependabot_get__repo__secret;
    "/repos/{owner}/{repo}/dependency-graph/compare/{basehead}": Endpoints.get_Dependency__graph_diff__range;
    "/repos/{owner}/{repo}/dependency-graph/sbom": Endpoints.get_Dependency__graph_export__sbom;
    "/repos/{owner}/{repo}/deployments": Endpoints.get_Repos_list__deployments;
    "/repos/{owner}/{repo}/deployments/{deployment_id}": Endpoints.get_Repos_get__deployment;
    "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses": Endpoints.get_Repos_list__deployment__statuses;
    "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}": Endpoints.get_Repos_get__deployment__status;
    "/repos/{owner}/{repo}/environments": Endpoints.get_Repos_get__all__environments;
    "/repos/{owner}/{repo}/environments/{environment_name}": Endpoints.get_Repos_get__environment;
    "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies": Endpoints.get_Repos_list__deployment__branch__policies;
    "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}": Endpoints.get_Repos_get__deployment__branch__policy;
    "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules": Endpoints.get_Repos_get__all__deployment__protection__rules;
    "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps": Endpoints.get_Repos_list__custom__deployment__rule__integrations;
    "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}": Endpoints.get_Repos_get__custom__deployment__protection__rule;
    "/repos/{owner}/{repo}/environments/{environment_name}/secrets": Endpoints.get_Actions_list__environment__secrets;
    "/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key": Endpoints.get_Actions_get__environment__public__key;
    "/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}": Endpoints.get_Actions_get__environment__secret;
    "/repos/{owner}/{repo}/environments/{environment_name}/variables": Endpoints.get_Actions_list__environment__variables;
    "/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}": Endpoints.get_Actions_get__environment__variable;
    "/repos/{owner}/{repo}/events": Endpoints.get_Activity_list__repo__events;
    "/repos/{owner}/{repo}/forks": Endpoints.get_Repos_list__forks;
    "/repos/{owner}/{repo}/git/blobs/{file_sha}": Endpoints.get_Git_get__blob;
    "/repos/{owner}/{repo}/git/commits/{commit_sha}": Endpoints.get_Git_get__commit;
    "/repos/{owner}/{repo}/git/matching-refs/{ref}": Endpoints.get_Git_list__matching__refs;
    "/repos/{owner}/{repo}/git/ref/{ref}": Endpoints.get_Git_get__ref;
    "/repos/{owner}/{repo}/git/tags/{tag_sha}": Endpoints.get_Git_get__tag;
    "/repos/{owner}/{repo}/git/trees/{tree_sha}": Endpoints.get_Git_get__tree;
    "/repos/{owner}/{repo}/hooks": Endpoints.get_Repos_list__webhooks;
    "/repos/{owner}/{repo}/hooks/{hook_id}": Endpoints.get_Repos_get__webhook;
    "/repos/{owner}/{repo}/hooks/{hook_id}/config": Endpoints.get_Repos_get__webhook__config__for__repo;
    "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries": Endpoints.get_Repos_list__webhook__deliveries;
    "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}": Endpoints.get_Repos_get__webhook__delivery;
    "/repos/{owner}/{repo}/installation": Endpoints.get_Apps_get__repo__installation;
    "/repos/{owner}/{repo}/interaction-limits": Endpoints.get_Interactions_get__restrictions__for__repo;
    "/repos/{owner}/{repo}/invitations": Endpoints.get_Repos_list__invitations;
    "/repos/{owner}/{repo}/issues": Endpoints.get_Issues_list__for__repo;
    "/repos/{owner}/{repo}/issues/comments": Endpoints.get_Issues_list__comments__for__repo;
    "/repos/{owner}/{repo}/issues/comments/{comment_id}": Endpoints.get_Issues_get__comment;
    "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions": Endpoints.get_Reactions_list__for__issue__comment;
    "/repos/{owner}/{repo}/issues/events": Endpoints.get_Issues_list__events__for__repo;
    "/repos/{owner}/{repo}/issues/events/{event_id}": Endpoints.get_Issues_get__event;
    "/repos/{owner}/{repo}/issues/{issue_number}": Endpoints.get_Issues_get;
    "/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}": Endpoints.get_Issues_check__user__can__be__assigned__to__issue;
    "/repos/{owner}/{repo}/issues/{issue_number}/comments": Endpoints.get_Issues_list__comments;
    "/repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocked_by": Endpoints.get_Issues_list__dependencies__blocked__by;
    "/repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocking": Endpoints.get_Issues_list__dependencies__blocking;
    "/repos/{owner}/{repo}/issues/{issue_number}/events": Endpoints.get_Issues_list__events;
    "/repos/{owner}/{repo}/issues/{issue_number}/labels": Endpoints.get_Issues_list__labels__on__issue;
    "/repos/{owner}/{repo}/issues/{issue_number}/reactions": Endpoints.get_Reactions_list__for__issue;
    "/repos/{owner}/{repo}/issues/{issue_number}/sub_issues": Endpoints.get_Issues_list__sub__issues;
    "/repos/{owner}/{repo}/issues/{issue_number}/timeline": Endpoints.get_Issues_list__events__for__timeline;
    "/repos/{owner}/{repo}/keys": Endpoints.get_Repos_list__deploy__keys;
    "/repos/{owner}/{repo}/keys/{key_id}": Endpoints.get_Repos_get__deploy__key;
    "/repos/{owner}/{repo}/labels": Endpoints.get_Issues_list__labels__for__repo;
    "/repos/{owner}/{repo}/labels/{name}": Endpoints.get_Issues_get__label;
    "/repos/{owner}/{repo}/languages": Endpoints.get_Repos_list__languages;
    "/repos/{owner}/{repo}/license": Endpoints.get_Licenses_get__for__repo;
    "/repos/{owner}/{repo}/milestones": Endpoints.get_Issues_list__milestones;
    "/repos/{owner}/{repo}/milestones/{milestone_number}": Endpoints.get_Issues_get__milestone;
    "/repos/{owner}/{repo}/milestones/{milestone_number}/labels": Endpoints.get_Issues_list__labels__for__milestone;
    "/repos/{owner}/{repo}/notifications": Endpoints.get_Activity_list__repo__notifications__for__authenticated__user;
    "/repos/{owner}/{repo}/pages": Endpoints.get_Repos_get__pages;
    "/repos/{owner}/{repo}/pages/builds": Endpoints.get_Repos_list__pages__builds;
    "/repos/{owner}/{repo}/pages/builds/latest": Endpoints.get_Repos_get__latest__pages__build;
    "/repos/{owner}/{repo}/pages/builds/{build_id}": Endpoints.get_Repos_get__pages__build;
    "/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}": Endpoints.get_Repos_get__pages__deployment;
    "/repos/{owner}/{repo}/pages/health": Endpoints.get_Repos_get__pages__health__check;
    "/repos/{owner}/{repo}/private-vulnerability-reporting": Endpoints.get_Repos_check__private__vulnerability__reporting;
    "/repos/{owner}/{repo}/properties/values": Endpoints.get_Repos_get__custom__properties__values;
    "/repos/{owner}/{repo}/pulls": Endpoints.get_Pulls_list;
    "/repos/{owner}/{repo}/pulls/comments": Endpoints.get_Pulls_list__review__comments__for__repo;
    "/repos/{owner}/{repo}/pulls/comments/{comment_id}": Endpoints.get_Pulls_get__review__comment;
    "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions": Endpoints.get_Reactions_list__for__pull__request__review__comment;
    "/repos/{owner}/{repo}/pulls/{pull_number}": Endpoints.get_Pulls_get;
    "/repos/{owner}/{repo}/pulls/{pull_number}/comments": Endpoints.get_Pulls_list__review__comments;
    "/repos/{owner}/{repo}/pulls/{pull_number}/commits": Endpoints.get_Pulls_list__commits;
    "/repos/{owner}/{repo}/pulls/{pull_number}/files": Endpoints.get_Pulls_list__files;
    "/repos/{owner}/{repo}/pulls/{pull_number}/merge": Endpoints.get_Pulls_check__if__merged;
    "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers": Endpoints.get_Pulls_list__requested__reviewers;
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews": Endpoints.get_Pulls_list__reviews;
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}": Endpoints.get_Pulls_get__review;
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments": Endpoints.get_Pulls_list__comments__for__review;
    "/repos/{owner}/{repo}/readme": Endpoints.get_Repos_get__readme;
    "/repos/{owner}/{repo}/readme/{dir}": Endpoints.get_Repos_get__readme__in__directory;
    "/repos/{owner}/{repo}/releases": Endpoints.get_Repos_list__releases;
    "/repos/{owner}/{repo}/releases/assets/{asset_id}": Endpoints.get_Repos_get__release__asset;
    "/repos/{owner}/{repo}/releases/latest": Endpoints.get_Repos_get__latest__release;
    "/repos/{owner}/{repo}/releases/tags/{tag}": Endpoints.get_Repos_get__release__by__tag;
    "/repos/{owner}/{repo}/releases/{release_id}": Endpoints.get_Repos_get__release;
    "/repos/{owner}/{repo}/releases/{release_id}/assets": Endpoints.get_Repos_list__release__assets;
    "/repos/{owner}/{repo}/releases/{release_id}/reactions": Endpoints.get_Reactions_list__for__release;
    "/repos/{owner}/{repo}/rules/branches/{branch}": Endpoints.get_Repos_get__branch__rules;
    "/repos/{owner}/{repo}/rulesets": Endpoints.get_Repos_get__repo__rulesets;
    "/repos/{owner}/{repo}/rulesets/rule-suites": Endpoints.get_Repos_get__repo__rule__suites;
    "/repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}": Endpoints.get_Repos_get__repo__rule__suite;
    "/repos/{owner}/{repo}/rulesets/{ruleset_id}": Endpoints.get_Repos_get__repo__ruleset;
    "/repos/{owner}/{repo}/rulesets/{ruleset_id}/history": Endpoints.get_Repos_get__repo__ruleset__history;
    "/repos/{owner}/{repo}/rulesets/{ruleset_id}/history/{version_id}": Endpoints.get_Repos_get__repo__ruleset__version;
    "/repos/{owner}/{repo}/secret-scanning/alerts": Endpoints.get_Secret__scanning_list__alerts__for__repo;
    "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}": Endpoints.get_Secret__scanning_get__alert;
    "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations": Endpoints.get_Secret__scanning_list__locations__for__alert;
    "/repos/{owner}/{repo}/secret-scanning/scan-history": Endpoints.get_Secret__scanning_get__scan__history;
    "/repos/{owner}/{repo}/security-advisories": Endpoints.get_Security__advisories_list__repository__advisories;
    "/repos/{owner}/{repo}/security-advisories/{ghsa_id}": Endpoints.get_Security__advisories_get__repository__advisory;
    "/repos/{owner}/{repo}/stargazers": Endpoints.get_Activity_list__stargazers__for__repo;
    "/repos/{owner}/{repo}/stats/code_frequency": Endpoints.get_Repos_get__code__frequency__stats;
    "/repos/{owner}/{repo}/stats/commit_activity": Endpoints.get_Repos_get__commit__activity__stats;
    "/repos/{owner}/{repo}/stats/contributors": Endpoints.get_Repos_get__contributors__stats;
    "/repos/{owner}/{repo}/stats/participation": Endpoints.get_Repos_get__participation__stats;
    "/repos/{owner}/{repo}/stats/punch_card": Endpoints.get_Repos_get__punch__card__stats;
    "/repos/{owner}/{repo}/subscribers": Endpoints.get_Activity_list__watchers__for__repo;
    "/repos/{owner}/{repo}/subscription": Endpoints.get_Activity_get__repo__subscription;
    "/repos/{owner}/{repo}/tags": Endpoints.get_Repos_list__tags;
    "/repos/{owner}/{repo}/tarball/{ref}": Endpoints.get_Repos_download__tarball__archive;
    "/repos/{owner}/{repo}/teams": Endpoints.get_Repos_list__teams;
    "/repos/{owner}/{repo}/topics": Endpoints.get_Repos_get__all__topics;
    "/repos/{owner}/{repo}/traffic/clones": Endpoints.get_Repos_get__clones;
    "/repos/{owner}/{repo}/traffic/popular/paths": Endpoints.get_Repos_get__top__paths;
    "/repos/{owner}/{repo}/traffic/popular/referrers": Endpoints.get_Repos_get__top__referrers;
    "/repos/{owner}/{repo}/traffic/views": Endpoints.get_Repos_get__views;
    "/repos/{owner}/{repo}/vulnerability-alerts": Endpoints.get_Repos_check__vulnerability__alerts;
    "/repos/{owner}/{repo}/zipball/{ref}": Endpoints.get_Repos_download__zipball__archive;
    "/repositories": Endpoints.get_Repos_list__public;
    "/search/code": Endpoints.get_Search_code;
    "/search/commits": Endpoints.get_Search_commits;
    "/search/labels": Endpoints.get_Search_labels;
    "/search/repositories": Endpoints.get_Search_repos;
    "/search/topics": Endpoints.get_Search_topics;
    "/search/users": Endpoints.get_Search_users;
    "/user": Endpoints.get_Users_get__authenticated;
    "/user/blocks": Endpoints.get_Users_list__blocked__by__authenticated__user;
    "/user/blocks/{username}": Endpoints.get_Users_check__blocked;
    "/user/codespaces": Endpoints.get_Codespaces_list__for__authenticated__user;
    "/user/codespaces/secrets": Endpoints.get_Codespaces_list__secrets__for__authenticated__user;
    "/user/codespaces/secrets/public-key": Endpoints.get_Codespaces_get__public__key__for__authenticated__user;
    "/user/codespaces/secrets/{secret_name}": Endpoints.get_Codespaces_get__secret__for__authenticated__user;
    "/user/codespaces/secrets/{secret_name}/repositories": Endpoints.get_Codespaces_list__repositories__for__secret__for__authenticated__user;
    "/user/codespaces/{codespace_name}": Endpoints.get_Codespaces_get__for__authenticated__user;
    "/user/codespaces/{codespace_name}/exports/{export_id}": Endpoints.get_Codespaces_get__export__details__for__authenticated__user;
    "/user/codespaces/{codespace_name}/machines": Endpoints.get_Codespaces_codespace__machines__for__authenticated__user;
    "/user/docker/conflicts": Endpoints.get_Packages_list__docker__migration__conflicting__packages__for__authenticated__user;
    "/user/emails": Endpoints.get_Users_list__emails__for__authenticated__user;
    "/user/followers": Endpoints.get_Users_list__followers__for__authenticated__user;
    "/user/following": Endpoints.get_Users_list__followed__by__authenticated__user;
    "/user/following/{username}": Endpoints.get_Users_check__person__is__followed__by__authenticated;
    "/user/gpg_keys": Endpoints.get_Users_list__gpg__keys__for__authenticated__user;
    "/user/gpg_keys/{gpg_key_id}": Endpoints.get_Users_get__gpg__key__for__authenticated__user;
    "/user/installations": Endpoints.get_Apps_list__installations__for__authenticated__user;
    "/user/installations/{installation_id}/repositories": Endpoints.get_Apps_list__installation__repos__for__authenticated__user;
    "/user/interaction-limits": Endpoints.get_Interactions_get__restrictions__for__authenticated__user;
    "/user/issues": Endpoints.get_Issues_list__for__authenticated__user;
    "/user/keys": Endpoints.get_Users_list__public__ssh__keys__for__authenticated__user;
    "/user/keys/{key_id}": Endpoints.get_Users_get__public__ssh__key__for__authenticated__user;
    "/user/marketplace_purchases": Endpoints.get_Apps_list__subscriptions__for__authenticated__user;
    "/user/marketplace_purchases/stubbed": Endpoints.get_Apps_list__subscriptions__for__authenticated__user__stubbed;
    "/user/memberships/orgs": Endpoints.get_Orgs_list__memberships__for__authenticated__user;
    "/user/memberships/orgs/{org}": Endpoints.get_Orgs_get__membership__for__authenticated__user;
    "/user/migrations": Endpoints.get_Migrations_list__for__authenticated__user;
    "/user/migrations/{migration_id}": Endpoints.get_Migrations_get__status__for__authenticated__user;
    "/user/migrations/{migration_id}/archive": Endpoints.get_Migrations_get__archive__for__authenticated__user;
    "/user/migrations/{migration_id}/repositories": Endpoints.get_Migrations_list__repos__for__authenticated__user;
    "/user/orgs": Endpoints.get_Orgs_list__for__authenticated__user;
    "/user/packages": Endpoints.get_Packages_list__packages__for__authenticated__user;
    "/user/packages/{package_type}/{package_name}": Endpoints.get_Packages_get__package__for__authenticated__user;
    "/user/packages/{package_type}/{package_name}/versions": Endpoints.get_Packages_get__all__package__versions__for__package__owned__by__authenticated__user;
    "/user/packages/{package_type}/{package_name}/versions/{package_version_id}": Endpoints.get_Packages_get__package__version__for__authenticated__user;
    "/user/public_emails": Endpoints.get_Users_list__public__emails__for__authenticated__user;
    "/user/repos": Endpoints.get_Repos_list__for__authenticated__user;
    "/user/repository_invitations": Endpoints.get_Repos_list__invitations__for__authenticated__user;
    "/user/social_accounts": Endpoints.get_Users_list__social__accounts__for__authenticated__user;
    "/user/ssh_signing_keys": Endpoints.get_Users_list__ssh__signing__keys__for__authenticated__user;
    "/user/ssh_signing_keys/{ssh_signing_key_id}": Endpoints.get_Users_get__ssh__signing__key__for__authenticated__user;
    "/user/starred": Endpoints.get_Activity_list__repos__starred__by__authenticated__user;
    "/user/starred/{owner}/{repo}": Endpoints.get_Activity_check__repo__is__starred__by__authenticated__user;
    "/user/subscriptions": Endpoints.get_Activity_list__watched__repos__for__authenticated__user;
    "/user/teams": Endpoints.get_Teams_list__for__authenticated__user;
    "/user/{account_id}": Endpoints.get_Users_get__by__id;
    "/users": Endpoints.get_Users_list;
    "/users/{username}": Endpoints.get_Users_get__by__username;
    "/users/{username}/attestations/{subject_digest}": Endpoints.get_Users_list__attestations;
    "/users/{username}/docker/conflicts": Endpoints.get_Packages_list__docker__migration__conflicting__packages__for__user;
    "/users/{username}/events": Endpoints.get_Activity_list__events__for__authenticated__user;
    "/users/{username}/events/orgs/{org}": Endpoints.get_Activity_list__org__events__for__authenticated__user;
    "/users/{username}/events/public": Endpoints.get_Activity_list__public__events__for__user;
    "/users/{username}/followers": Endpoints.get_Users_list__followers__for__user;
    "/users/{username}/following": Endpoints.get_Users_list__following__for__user;
    "/users/{username}/following/{target_user}": Endpoints.get_Users_check__following__for__user;
    "/users/{username}/gists": Endpoints.get_Gists_list__for__user;
    "/users/{username}/gpg_keys": Endpoints.get_Users_list__gpg__keys__for__user;
    "/users/{username}/hovercard": Endpoints.get_Users_get__context__for__user;
    "/users/{username}/installation": Endpoints.get_Apps_get__user__installation;
    "/users/{username}/keys": Endpoints.get_Users_list__public__keys__for__user;
    "/users/{username}/orgs": Endpoints.get_Orgs_list__for__user;
    "/users/{username}/packages": Endpoints.get_Packages_list__packages__for__user;
    "/users/{username}/packages/{package_type}/{package_name}": Endpoints.get_Packages_get__package__for__user;
    "/users/{username}/packages/{package_type}/{package_name}/versions": Endpoints.get_Packages_get__all__package__versions__for__package__owned__by__user;
    "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}": Endpoints.get_Packages_get__package__version__for__user;
    "/users/{username}/received_events": Endpoints.get_Activity_list__received__events__for__user;
    "/users/{username}/received_events/public": Endpoints.get_Activity_list__received__public__events__for__user;
    "/users/{username}/repos": Endpoints.get_Repos_list__for__user;
    "/users/{username}/settings/billing/actions": Endpoints.get_Billing_get__github__actions__billing__user;
    "/users/{username}/settings/billing/packages": Endpoints.get_Billing_get__github__packages__billing__user;
    "/users/{username}/settings/billing/shared-storage": Endpoints.get_Billing_get__shared__storage__billing__user;
    "/users/{username}/settings/billing/usage": Endpoints.get_Billing_get__github__billing__usage__report__user;
    "/users/{username}/social_accounts": Endpoints.get_Users_list__social__accounts__for__user;
    "/users/{username}/ssh_signing_keys": Endpoints.get_Users_list__ssh__signing__keys__for__user;
    "/users/{username}/starred": Endpoints.get_Activity_list__repos__starred__by__user;
    "/users/{username}/subscriptions": Endpoints.get_Activity_list__repos__watched__by__user;
    "/versions": Endpoints.get_Meta_get__all__versions;
    "/zen": Endpoints.get_Meta_get__zen;
  };
  post: {
    "/app-manifests/{code}/conversions": Endpoints.post_Apps_create__from__manifest;
    "/app/hook/deliveries/{delivery_id}/attempts": Endpoints.post_Apps_redeliver__webhook__delivery;
    "/app/installations/{installation_id}/access_tokens": Endpoints.post_Apps_create__installation__access__token;
    "/applications/{client_id}/token": Endpoints.post_Apps_check__token;
    "/applications/{client_id}/token/scoped": Endpoints.post_Apps_scope__token;
    "/credentials/revoke": Endpoints.post_Credentials_revoke;
    "/enterprises/{enterprise}/code-security/configurations": Endpoints.post_Code__security_create__configuration__for__enterprise;
    "/enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach": Endpoints.post_Code__security_attach__enterprise__configuration;
    "/gists": Endpoints.post_Gists_create;
    "/gists/{gist_id}/comments": Endpoints.post_Gists_create__comment;
    "/gists/{gist_id}/forks": Endpoints.post_Gists_fork;
    "/markdown": Endpoints.post_Markdown_render;
    "/markdown/raw": Endpoints.post_Markdown_render__raw;
    "/orgs/{org}/actions/hosted-runners": Endpoints.post_Actions_create__hosted__runner__for__org;
    "/orgs/{org}/actions/runner-groups": Endpoints.post_Actions_create__self__hosted__runner__group__for__org;
    "/orgs/{org}/actions/runners/generate-jitconfig": Endpoints.post_Actions_generate__runner__jitconfig__for__org;
    "/orgs/{org}/actions/runners/registration-token": Endpoints.post_Actions_create__registration__token__for__org;
    "/orgs/{org}/actions/runners/remove-token": Endpoints.post_Actions_create__remove__token__for__org;
    "/orgs/{org}/actions/runners/{runner_id}/labels": Endpoints.post_Actions_add__custom__labels__to__self__hosted__runner__for__org;
    "/orgs/{org}/actions/variables": Endpoints.post_Actions_create__org__variable;
    "/orgs/{org}/attestations/bulk-list": Endpoints.post_Orgs_list__attestations__bulk;
    "/orgs/{org}/attestations/delete-request": Endpoints.post_Orgs_delete__attestations__bulk;
    "/orgs/{org}/campaigns": Endpoints.post_Campaigns_create__campaign;
    "/orgs/{org}/code-security/configurations": Endpoints.post_Code__security_create__configuration;
    "/orgs/{org}/code-security/configurations/{configuration_id}/attach": Endpoints.post_Code__security_attach__configuration;
    "/orgs/{org}/copilot/billing/selected_teams": Endpoints.post_Copilot_add__copilot__seats__for__teams;
    "/orgs/{org}/copilot/billing/selected_users": Endpoints.post_Copilot_add__copilot__seats__for__users;
    "/orgs/{org}/hooks": Endpoints.post_Orgs_create__webhook;
    "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts": Endpoints.post_Orgs_redeliver__webhook__delivery;
    "/orgs/{org}/hooks/{hook_id}/pings": Endpoints.post_Orgs_ping__webhook;
    "/orgs/{org}/invitations": Endpoints.post_Orgs_create__invitation;
    "/orgs/{org}/issue-types": Endpoints.post_Orgs_create__issue__type;
    "/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop": Endpoints.post_Codespaces_stop__in__organization;
    "/orgs/{org}/migrations": Endpoints.post_Migrations_start__for__org;
    "/orgs/{org}/packages/{package_type}/{package_name}/restore": Endpoints.post_Packages_restore__package__for__org;
    "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": Endpoints.post_Packages_restore__package__version__for__org;
    "/orgs/{org}/personal-access-token-requests": Endpoints.post_Orgs_review__pat__grant__requests__in__bulk;
    "/orgs/{org}/personal-access-token-requests/{pat_request_id}": Endpoints.post_Orgs_review__pat__grant__request;
    "/orgs/{org}/personal-access-tokens": Endpoints.post_Orgs_update__pat__accesses;
    "/orgs/{org}/personal-access-tokens/{pat_id}": Endpoints.post_Orgs_update__pat__access;
    "/orgs/{org}/private-registries": Endpoints.post_Private__registries_create__org__private__registry;
    "/orgs/{org}/repos": Endpoints.post_Repos_create__in__org;
    "/orgs/{org}/rulesets": Endpoints.post_Repos_create__org__ruleset;
    "/orgs/{org}/settings/network-configurations": Endpoints.post_Hosted__compute_create__network__configuration__for__org;
    "/orgs/{org}/teams": Endpoints.post_Teams_create;
    "/orgs/{org}/teams/{team_slug}/discussions": Endpoints.post_Teams_create__discussion__in__org;
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments": Endpoints.post_Teams_create__discussion__comment__in__org;
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions": Endpoints.post_Reactions_create__for__team__discussion__comment__in__org;
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions": Endpoints.post_Reactions_create__for__team__discussion__in__org;
    "/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun": Endpoints.post_Actions_re__run__job__for__workflow__run;
    "/repos/{owner}/{repo}/actions/runners/generate-jitconfig": Endpoints.post_Actions_generate__runner__jitconfig__for__repo;
    "/repos/{owner}/{repo}/actions/runners/registration-token": Endpoints.post_Actions_create__registration__token__for__repo;
    "/repos/{owner}/{repo}/actions/runners/remove-token": Endpoints.post_Actions_create__remove__token__for__repo;
    "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels": Endpoints.post_Actions_add__custom__labels__to__self__hosted__runner__for__repo;
    "/repos/{owner}/{repo}/actions/runs/{run_id}/approve": Endpoints.post_Actions_approve__workflow__run;
    "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel": Endpoints.post_Actions_cancel__workflow__run;
    "/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule": Endpoints.post_Actions_review__custom__gates__for__run;
    "/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel": Endpoints.post_Actions_force__cancel__workflow__run;
    "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments": Endpoints.post_Actions_review__pending__deployments__for__run;
    "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun": Endpoints.post_Actions_re__run__workflow;
    "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs": Endpoints.post_Actions_re__run__workflow__failed__jobs;
    "/repos/{owner}/{repo}/actions/variables": Endpoints.post_Actions_create__repo__variable;
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches": Endpoints.post_Actions_create__workflow__dispatch;
    "/repos/{owner}/{repo}/attestations": Endpoints.post_Repos_create__attestation;
    "/repos/{owner}/{repo}/autolinks": Endpoints.post_Repos_create__autolink;
    "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins": Endpoints.post_Repos_set__admin__branch__protection;
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures": Endpoints.post_Repos_create__commit__signature__protection;
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": Endpoints.post_Repos_add__status__check__contexts;
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": Endpoints.post_Repos_add__app__access__restrictions;
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": Endpoints.post_Repos_add__team__access__restrictions;
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": Endpoints.post_Repos_add__user__access__restrictions;
    "/repos/{owner}/{repo}/branches/{branch}/rename": Endpoints.post_Repos_rename__branch;
    "/repos/{owner}/{repo}/check-runs": Endpoints.post_Checks_create;
    "/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest": Endpoints.post_Checks_rerequest__run;
    "/repos/{owner}/{repo}/check-suites": Endpoints.post_Checks_create__suite;
    "/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest": Endpoints.post_Checks_rerequest__suite;
    "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix": Endpoints.post_Code__scanning_create__autofix;
    "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits": Endpoints.post_Code__scanning_commit__autofix;
    "/repos/{owner}/{repo}/code-scanning/codeql/variant-analyses": Endpoints.post_Code__scanning_create__variant__analysis;
    "/repos/{owner}/{repo}/code-scanning/sarifs": Endpoints.post_Code__scanning_upload__sarif;
    "/repos/{owner}/{repo}/codespaces": Endpoints.post_Codespaces_create__with__repo__for__authenticated__user;
    "/repos/{owner}/{repo}/comments/{comment_id}/reactions": Endpoints.post_Reactions_create__for__commit__comment;
    "/repos/{owner}/{repo}/commits/{commit_sha}/comments": Endpoints.post_Repos_create__commit__comment;
    "/repos/{owner}/{repo}/dependency-graph/snapshots": Endpoints.post_Dependency__graph_create__repository__snapshot;
    "/repos/{owner}/{repo}/deployments": Endpoints.post_Repos_create__deployment;
    "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses": Endpoints.post_Repos_create__deployment__status;
    "/repos/{owner}/{repo}/dispatches": Endpoints.post_Repos_create__dispatch__event;
    "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies": Endpoints.post_Repos_create__deployment__branch__policy;
    "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules": Endpoints.post_Repos_create__deployment__protection__rule;
    "/repos/{owner}/{repo}/environments/{environment_name}/variables": Endpoints.post_Actions_create__environment__variable;
    "/repos/{owner}/{repo}/forks": Endpoints.post_Repos_create__fork;
    "/repos/{owner}/{repo}/git/blobs": Endpoints.post_Git_create__blob;
    "/repos/{owner}/{repo}/git/commits": Endpoints.post_Git_create__commit;
    "/repos/{owner}/{repo}/git/refs": Endpoints.post_Git_create__ref;
    "/repos/{owner}/{repo}/git/tags": Endpoints.post_Git_create__tag;
    "/repos/{owner}/{repo}/git/trees": Endpoints.post_Git_create__tree;
    "/repos/{owner}/{repo}/hooks": Endpoints.post_Repos_create__webhook;
    "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts": Endpoints.post_Repos_redeliver__webhook__delivery;
    "/repos/{owner}/{repo}/hooks/{hook_id}/pings": Endpoints.post_Repos_ping__webhook;
    "/repos/{owner}/{repo}/hooks/{hook_id}/tests": Endpoints.post_Repos_test__push__webhook;
    "/repos/{owner}/{repo}/issues": Endpoints.post_Issues_create;
    "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions": Endpoints.post_Reactions_create__for__issue__comment;
    "/repos/{owner}/{repo}/issues/{issue_number}/assignees": Endpoints.post_Issues_add__assignees;
    "/repos/{owner}/{repo}/issues/{issue_number}/comments": Endpoints.post_Issues_create__comment;
    "/repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocked_by": Endpoints.post_Issues_add__blocked__by__dependency;
    "/repos/{owner}/{repo}/issues/{issue_number}/labels": Endpoints.post_Issues_add__labels;
    "/repos/{owner}/{repo}/issues/{issue_number}/reactions": Endpoints.post_Reactions_create__for__issue;
    "/repos/{owner}/{repo}/issues/{issue_number}/sub_issues": Endpoints.post_Issues_add__sub__issue;
    "/repos/{owner}/{repo}/keys": Endpoints.post_Repos_create__deploy__key;
    "/repos/{owner}/{repo}/labels": Endpoints.post_Issues_create__label;
    "/repos/{owner}/{repo}/merge-upstream": Endpoints.post_Repos_merge__upstream;
    "/repos/{owner}/{repo}/merges": Endpoints.post_Repos_merge;
    "/repos/{owner}/{repo}/milestones": Endpoints.post_Issues_create__milestone;
    "/repos/{owner}/{repo}/pages": Endpoints.post_Repos_create__pages__site;
    "/repos/{owner}/{repo}/pages/builds": Endpoints.post_Repos_request__pages__build;
    "/repos/{owner}/{repo}/pages/deployments": Endpoints.post_Repos_create__pages__deployment;
    "/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel": Endpoints.post_Repos_cancel__pages__deployment;
    "/repos/{owner}/{repo}/pulls": Endpoints.post_Pulls_create;
    "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions": Endpoints.post_Reactions_create__for__pull__request__review__comment;
    "/repos/{owner}/{repo}/pulls/{pull_number}/codespaces": Endpoints.post_Codespaces_create__with__pr__for__authenticated__user;
    "/repos/{owner}/{repo}/pulls/{pull_number}/comments": Endpoints.post_Pulls_create__review__comment;
    "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies": Endpoints.post_Pulls_create__reply__for__review__comment;
    "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers": Endpoints.post_Pulls_request__reviewers;
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews": Endpoints.post_Pulls_create__review;
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events": Endpoints.post_Pulls_submit__review;
    "/repos/{owner}/{repo}/releases": Endpoints.post_Repos_create__release;
    "/repos/{owner}/{repo}/releases/generate-notes": Endpoints.post_Repos_generate__release__notes;
    "/repos/{owner}/{repo}/releases/{release_id}/assets": Endpoints.post_Repos_upload__release__asset;
    "/repos/{owner}/{repo}/releases/{release_id}/reactions": Endpoints.post_Reactions_create__for__release;
    "/repos/{owner}/{repo}/rulesets": Endpoints.post_Repos_create__repo__ruleset;
    "/repos/{owner}/{repo}/secret-scanning/push-protection-bypasses": Endpoints.post_Secret__scanning_create__push__protection__bypass;
    "/repos/{owner}/{repo}/security-advisories": Endpoints.post_Security__advisories_create__repository__advisory;
    "/repos/{owner}/{repo}/security-advisories/reports": Endpoints.post_Security__advisories_create__private__vulnerability__report;
    "/repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve": Endpoints.post_Security__advisories_create__repository__advisory__cve__request;
    "/repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks": Endpoints.post_Security__advisories_create__fork;
    "/repos/{owner}/{repo}/statuses/{sha}": Endpoints.post_Repos_create__commit__status;
    "/repos/{owner}/{repo}/transfer": Endpoints.post_Repos_transfer;
    "/repos/{template_owner}/{template_repo}/generate": Endpoints.post_Repos_create__using__template;
    "/user/codespaces": Endpoints.post_Codespaces_create__for__authenticated__user;
    "/user/codespaces/{codespace_name}/exports": Endpoints.post_Codespaces_export__for__authenticated__user;
    "/user/codespaces/{codespace_name}/publish": Endpoints.post_Codespaces_publish__for__authenticated__user;
    "/user/codespaces/{codespace_name}/start": Endpoints.post_Codespaces_start__for__authenticated__user;
    "/user/codespaces/{codespace_name}/stop": Endpoints.post_Codespaces_stop__for__authenticated__user;
    "/user/emails": Endpoints.post_Users_add__email__for__authenticated__user;
    "/user/gpg_keys": Endpoints.post_Users_create__gpg__key__for__authenticated__user;
    "/user/keys": Endpoints.post_Users_create__public__ssh__key__for__authenticated__user;
    "/user/migrations": Endpoints.post_Migrations_start__for__authenticated__user;
    "/user/packages/{package_type}/{package_name}/restore": Endpoints.post_Packages_restore__package__for__authenticated__user;
    "/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": Endpoints.post_Packages_restore__package__version__for__authenticated__user;
    "/user/repos": Endpoints.post_Repos_create__for__authenticated__user;
    "/user/social_accounts": Endpoints.post_Users_add__social__account__for__authenticated__user;
    "/user/ssh_signing_keys": Endpoints.post_Users_create__ssh__signing__key__for__authenticated__user;
    "/users/{username}/attestations/bulk-list": Endpoints.post_Users_list__attestations__bulk;
    "/users/{username}/attestations/delete-request": Endpoints.post_Users_delete__attestations__bulk;
    "/users/{username}/packages/{package_type}/{package_name}/restore": Endpoints.post_Packages_restore__package__for__user;
    "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": Endpoints.post_Packages_restore__package__version__for__user;
  };
  patch: {
    "/app/hook/config": Endpoints.patch_Apps_update__webhook__config__for__app;
    "/applications/{client_id}/token": Endpoints.patch_Apps_reset__token;
    "/enterprises/{enterprise}/code-security/configurations/{configuration_id}": Endpoints.patch_Code__security_update__enterprise__configuration;
    "/gists/{gist_id}": Endpoints.patch_Gists_update;
    "/gists/{gist_id}/comments/{comment_id}": Endpoints.patch_Gists_update__comment;
    "/notifications/threads/{thread_id}": Endpoints.patch_Activity_mark__thread__as__read;
    "/organizations/{org}/dependabot/repository-access": Endpoints.patch_Dependabot_update__repository__access__for__org;
    "/orgs/{org}": Endpoints.patch_Orgs_update;
    "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}": Endpoints.patch_Actions_update__hosted__runner__for__org;
    "/orgs/{org}/actions/runner-groups/{runner_group_id}": Endpoints.patch_Actions_update__self__hosted__runner__group__for__org;
    "/orgs/{org}/actions/variables/{name}": Endpoints.patch_Actions_update__org__variable;
    "/orgs/{org}/campaigns/{campaign_number}": Endpoints.patch_Campaigns_update__campaign;
    "/orgs/{org}/code-security/configurations/{configuration_id}": Endpoints.patch_Code__security_update__configuration;
    "/orgs/{org}/hooks/{hook_id}": Endpoints.patch_Orgs_update__webhook;
    "/orgs/{org}/hooks/{hook_id}/config": Endpoints.patch_Orgs_update__webhook__config__for__org;
    "/orgs/{org}/private-registries/{secret_name}": Endpoints.patch_Private__registries_update__org__private__registry;
    "/orgs/{org}/properties/schema": Endpoints.patch_Orgs_create__or__update__custom__properties;
    "/orgs/{org}/properties/values": Endpoints.patch_Orgs_create__or__update__custom__properties__values__for__repos;
    "/orgs/{org}/secret-scanning/pattern-configurations": Endpoints.patch_Secret__scanning_update__org__pattern__configs;
    "/orgs/{org}/settings/network-configurations/{network_configuration_id}": Endpoints.patch_Hosted__compute_update__network__configuration__for__org;
    "/orgs/{org}/teams/{team_slug}": Endpoints.patch_Teams_update__in__org;
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}": Endpoints.patch_Teams_update__discussion__in__org;
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}": Endpoints.patch_Teams_update__discussion__comment__in__org;
    "/repos/{owner}/{repo}": Endpoints.patch_Repos_update;
    "/repos/{owner}/{repo}/actions/variables/{name}": Endpoints.patch_Actions_update__repo__variable;
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews": Endpoints.patch_Repos_update__pull__request__review__protection;
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks": Endpoints.patch_Repos_update__status__check__protection;
    "/repos/{owner}/{repo}/check-runs/{check_run_id}": Endpoints.patch_Checks_update;
    "/repos/{owner}/{repo}/check-suites/preferences": Endpoints.patch_Checks_set__suites__preferences;
    "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}": Endpoints.patch_Code__scanning_update__alert;
    "/repos/{owner}/{repo}/code-scanning/default-setup": Endpoints.patch_Code__scanning_update__default__setup;
    "/repos/{owner}/{repo}/comments/{comment_id}": Endpoints.patch_Repos_update__commit__comment;
    "/repos/{owner}/{repo}/dependabot/alerts/{alert_number}": Endpoints.patch_Dependabot_update__alert;
    "/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}": Endpoints.patch_Actions_update__environment__variable;
    "/repos/{owner}/{repo}/git/refs/{ref}": Endpoints.patch_Git_update__ref;
    "/repos/{owner}/{repo}/hooks/{hook_id}": Endpoints.patch_Repos_update__webhook;
    "/repos/{owner}/{repo}/hooks/{hook_id}/config": Endpoints.patch_Repos_update__webhook__config__for__repo;
    "/repos/{owner}/{repo}/invitations/{invitation_id}": Endpoints.patch_Repos_update__invitation;
    "/repos/{owner}/{repo}/issues/comments/{comment_id}": Endpoints.patch_Issues_update__comment;
    "/repos/{owner}/{repo}/issues/{issue_number}": Endpoints.patch_Issues_update;
    "/repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority": Endpoints.patch_Issues_reprioritize__sub__issue;
    "/repos/{owner}/{repo}/labels/{name}": Endpoints.patch_Issues_update__label;
    "/repos/{owner}/{repo}/milestones/{milestone_number}": Endpoints.patch_Issues_update__milestone;
    "/repos/{owner}/{repo}/properties/values": Endpoints.patch_Repos_create__or__update__custom__properties__values;
    "/repos/{owner}/{repo}/pulls/comments/{comment_id}": Endpoints.patch_Pulls_update__review__comment;
    "/repos/{owner}/{repo}/pulls/{pull_number}": Endpoints.patch_Pulls_update;
    "/repos/{owner}/{repo}/releases/assets/{asset_id}": Endpoints.patch_Repos_update__release__asset;
    "/repos/{owner}/{repo}/releases/{release_id}": Endpoints.patch_Repos_update__release;
    "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}": Endpoints.patch_Secret__scanning_update__alert;
    "/repos/{owner}/{repo}/security-advisories/{ghsa_id}": Endpoints.patch_Security__advisories_update__repository__advisory;
    "/user": Endpoints.patch_Users_update__authenticated;
    "/user/codespaces/{codespace_name}": Endpoints.patch_Codespaces_update__for__authenticated__user;
    "/user/email/visibility": Endpoints.patch_Users_set__primary__email__visibility__for__authenticated__user;
    "/user/memberships/orgs/{org}": Endpoints.patch_Orgs_update__membership__for__authenticated__user;
    "/user/repository_invitations/{invitation_id}": Endpoints.patch_Repos_accept__invitation__for__authenticated__user;
  };
  delete: {
    "/app/installations/{installation_id}": Endpoints.delete_Apps_delete__installation;
    "/app/installations/{installation_id}/suspended": Endpoints.delete_Apps_unsuspend__installation;
    "/applications/{client_id}/grant": Endpoints.delete_Apps_delete__authorization;
    "/applications/{client_id}/token": Endpoints.delete_Apps_delete__token;
    "/enterprises/{enterprise}/code-security/configurations/{configuration_id}": Endpoints.delete_Code__security_delete__configuration__for__enterprise;
    "/gists/{gist_id}": Endpoints.delete_Gists_delete;
    "/gists/{gist_id}/comments/{comment_id}": Endpoints.delete_Gists_delete__comment;
    "/gists/{gist_id}/star": Endpoints.delete_Gists_unstar;
    "/installation/token": Endpoints.delete_Apps_revoke__installation__access__token;
    "/notifications/threads/{thread_id}": Endpoints.delete_Activity_mark__thread__as__done;
    "/notifications/threads/{thread_id}/subscription": Endpoints.delete_Activity_delete__thread__subscription;
    "/orgs/{org}": Endpoints.delete_Orgs_delete;
    "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}": Endpoints.delete_Actions_delete__hosted__runner__for__org;
    "/orgs/{org}/actions/permissions/repositories/{repository_id}": Endpoints.delete_Actions_disable__selected__repository__github__actions__organization;
    "/orgs/{org}/actions/permissions/self-hosted-runners/repositories/{repository_id}": Endpoints.delete_Actions_disable__selected__repository__self__hosted__runners__organization;
    "/orgs/{org}/actions/runner-groups/{runner_group_id}": Endpoints.delete_Actions_delete__self__hosted__runner__group__from__org;
    "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}": Endpoints.delete_Actions_remove__repo__access__to__self__hosted__runner__group__in__org;
    "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}": Endpoints.delete_Actions_remove__self__hosted__runner__from__group__for__org;
    "/orgs/{org}/actions/runners/{runner_id}": Endpoints.delete_Actions_delete__self__hosted__runner__from__org;
    "/orgs/{org}/actions/runners/{runner_id}/labels": Endpoints.delete_Actions_remove__all__custom__labels__from__self__hosted__runner__for__org;
    "/orgs/{org}/actions/runners/{runner_id}/labels/{name}": Endpoints.delete_Actions_remove__custom__label__from__self__hosted__runner__for__org;
    "/orgs/{org}/actions/secrets/{secret_name}": Endpoints.delete_Actions_delete__org__secret;
    "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}": Endpoints.delete_Actions_remove__selected__repo__from__org__secret;
    "/orgs/{org}/actions/variables/{name}": Endpoints.delete_Actions_delete__org__variable;
    "/orgs/{org}/actions/variables/{name}/repositories/{repository_id}": Endpoints.delete_Actions_remove__selected__repo__from__org__variable;
    "/orgs/{org}/attestations/digest/{subject_digest}": Endpoints.delete_Orgs_delete__attestations__by__subject__digest;
    "/orgs/{org}/attestations/{attestation_id}": Endpoints.delete_Orgs_delete__attestations__by__id;
    "/orgs/{org}/blocks/{username}": Endpoints.delete_Orgs_unblock__user;
    "/orgs/{org}/campaigns/{campaign_number}": Endpoints.delete_Campaigns_delete__campaign;
    "/orgs/{org}/code-security/configurations/detach": Endpoints.delete_Code__security_detach__configuration;
    "/orgs/{org}/code-security/configurations/{configuration_id}": Endpoints.delete_Code__security_delete__configuration;
    "/orgs/{org}/codespaces/secrets/{secret_name}": Endpoints.delete_Codespaces_delete__org__secret;
    "/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}": Endpoints.delete_Codespaces_remove__selected__repo__from__org__secret;
    "/orgs/{org}/copilot/billing/selected_teams": Endpoints.delete_Copilot_cancel__copilot__seat__assignment__for__teams;
    "/orgs/{org}/copilot/billing/selected_users": Endpoints.delete_Copilot_cancel__copilot__seat__assignment__for__users;
    "/orgs/{org}/dependabot/secrets/{secret_name}": Endpoints.delete_Dependabot_delete__org__secret;
    "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}": Endpoints.delete_Dependabot_remove__selected__repo__from__org__secret;
    "/orgs/{org}/hooks/{hook_id}": Endpoints.delete_Orgs_delete__webhook;
    "/orgs/{org}/interaction-limits": Endpoints.delete_Interactions_remove__restrictions__for__org;
    "/orgs/{org}/invitations/{invitation_id}": Endpoints.delete_Orgs_cancel__invitation;
    "/orgs/{org}/issue-types/{issue_type_id}": Endpoints.delete_Orgs_delete__issue__type;
    "/orgs/{org}/members/{username}": Endpoints.delete_Orgs_remove__member;
    "/orgs/{org}/members/{username}/codespaces/{codespace_name}": Endpoints.delete_Codespaces_delete__from__organization;
    "/orgs/{org}/memberships/{username}": Endpoints.delete_Orgs_remove__membership__for__user;
    "/orgs/{org}/migrations/{migration_id}/archive": Endpoints.delete_Migrations_delete__archive__for__org;
    "/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock": Endpoints.delete_Migrations_unlock__repo__for__org;
    "/orgs/{org}/organization-roles/teams/{team_slug}": Endpoints.delete_Orgs_revoke__all__org__roles__team;
    "/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}": Endpoints.delete_Orgs_revoke__org__role__team;
    "/orgs/{org}/organization-roles/users/{username}": Endpoints.delete_Orgs_revoke__all__org__roles__user;
    "/orgs/{org}/organization-roles/users/{username}/{role_id}": Endpoints.delete_Orgs_revoke__org__role__user;
    "/orgs/{org}/outside_collaborators/{username}": Endpoints.delete_Orgs_remove__outside__collaborator;
    "/orgs/{org}/packages/{package_type}/{package_name}": Endpoints.delete_Packages_delete__package__for__org;
    "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}": Endpoints.delete_Packages_delete__package__version__for__org;
    "/orgs/{org}/private-registries/{secret_name}": Endpoints.delete_Private__registries_delete__org__private__registry;
    "/orgs/{org}/properties/schema/{custom_property_name}": Endpoints.delete_Orgs_remove__custom__property;
    "/orgs/{org}/public_members/{username}": Endpoints.delete_Orgs_remove__public__membership__for__authenticated__user;
    "/orgs/{org}/rulesets/{ruleset_id}": Endpoints.delete_Repos_delete__org__ruleset;
    "/orgs/{org}/settings/network-configurations/{network_configuration_id}": Endpoints.delete_Hosted__compute_delete__network__configuration__from__org;
    "/orgs/{org}/teams/{team_slug}": Endpoints.delete_Teams_delete__in__org;
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}": Endpoints.delete_Teams_delete__discussion__in__org;
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}": Endpoints.delete_Teams_delete__discussion__comment__in__org;
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}": Endpoints.delete_Reactions_delete__for__team__discussion__comment;
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}": Endpoints.delete_Reactions_delete__for__team__discussion;
    "/orgs/{org}/teams/{team_slug}/memberships/{username}": Endpoints.delete_Teams_remove__membership__for__user__in__org;
    "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": Endpoints.delete_Teams_remove__repo__in__org;
    "/repos/{owner}/{repo}": Endpoints.delete_Repos_delete;
    "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}": Endpoints.delete_Actions_delete__artifact;
    "/repos/{owner}/{repo}/actions/caches": Endpoints.delete_Actions_delete__actions__cache__by__key;
    "/repos/{owner}/{repo}/actions/caches/{cache_id}": Endpoints.delete_Actions_delete__actions__cache__by__id;
    "/repos/{owner}/{repo}/actions/runners/{runner_id}": Endpoints.delete_Actions_delete__self__hosted__runner__from__repo;
    "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels": Endpoints.delete_Actions_remove__all__custom__labels__from__self__hosted__runner__for__repo;
    "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}": Endpoints.delete_Actions_remove__custom__label__from__self__hosted__runner__for__repo;
    "/repos/{owner}/{repo}/actions/runs/{run_id}": Endpoints.delete_Actions_delete__workflow__run;
    "/repos/{owner}/{repo}/actions/runs/{run_id}/logs": Endpoints.delete_Actions_delete__workflow__run__logs;
    "/repos/{owner}/{repo}/actions/secrets/{secret_name}": Endpoints.delete_Actions_delete__repo__secret;
    "/repos/{owner}/{repo}/actions/variables/{name}": Endpoints.delete_Actions_delete__repo__variable;
    "/repos/{owner}/{repo}/autolinks/{autolink_id}": Endpoints.delete_Repos_delete__autolink;
    "/repos/{owner}/{repo}/automated-security-fixes": Endpoints.delete_Repos_disable__automated__security__fixes;
    "/repos/{owner}/{repo}/branches/{branch}/protection": Endpoints.delete_Repos_delete__branch__protection;
    "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins": Endpoints.delete_Repos_delete__admin__branch__protection;
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews": Endpoints.delete_Repos_delete__pull__request__review__protection;
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures": Endpoints.delete_Repos_delete__commit__signature__protection;
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks": Endpoints.delete_Repos_remove__status__check__protection;
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": Endpoints.delete_Repos_remove__status__check__contexts;
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions": Endpoints.delete_Repos_delete__access__restrictions;
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": Endpoints.delete_Repos_remove__app__access__restrictions;
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": Endpoints.delete_Repos_remove__team__access__restrictions;
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": Endpoints.delete_Repos_remove__user__access__restrictions;
    "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}": Endpoints.delete_Code__scanning_delete__analysis;
    "/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}": Endpoints.delete_Code__scanning_delete__codeql__database;
    "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}": Endpoints.delete_Codespaces_delete__repo__secret;
    "/repos/{owner}/{repo}/collaborators/{username}": Endpoints.delete_Repos_remove__collaborator;
    "/repos/{owner}/{repo}/comments/{comment_id}": Endpoints.delete_Repos_delete__commit__comment;
    "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}": Endpoints.delete_Reactions_delete__for__commit__comment;
    "/repos/{owner}/{repo}/contents/{path}": Endpoints.delete_Repos_delete__file;
    "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}": Endpoints.delete_Dependabot_delete__repo__secret;
    "/repos/{owner}/{repo}/deployments/{deployment_id}": Endpoints.delete_Repos_delete__deployment;
    "/repos/{owner}/{repo}/environments/{environment_name}": Endpoints.delete_Repos_delete__an__environment;
    "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}": Endpoints.delete_Repos_delete__deployment__branch__policy;
    "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}": Endpoints.delete_Repos_disable__deployment__protection__rule;
    "/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}": Endpoints.delete_Actions_delete__environment__secret;
    "/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}": Endpoints.delete_Actions_delete__environment__variable;
    "/repos/{owner}/{repo}/git/refs/{ref}": Endpoints.delete_Git_delete__ref;
    "/repos/{owner}/{repo}/hooks/{hook_id}": Endpoints.delete_Repos_delete__webhook;
    "/repos/{owner}/{repo}/interaction-limits": Endpoints.delete_Interactions_remove__restrictions__for__repo;
    "/repos/{owner}/{repo}/invitations/{invitation_id}": Endpoints.delete_Repos_delete__invitation;
    "/repos/{owner}/{repo}/issues/comments/{comment_id}": Endpoints.delete_Issues_delete__comment;
    "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}": Endpoints.delete_Reactions_delete__for__issue__comment;
    "/repos/{owner}/{repo}/issues/{issue_number}/assignees": Endpoints.delete_Issues_remove__assignees;
    "/repos/{owner}/{repo}/issues/{issue_number}/dependencies/blocked_by/{issue_id}": Endpoints.delete_Issues_remove__dependency__blocked__by;
    "/repos/{owner}/{repo}/issues/{issue_number}/labels": Endpoints.delete_Issues_remove__all__labels;
    "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}": Endpoints.delete_Issues_remove__label;
    "/repos/{owner}/{repo}/issues/{issue_number}/lock": Endpoints.delete_Issues_unlock;
    "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}": Endpoints.delete_Reactions_delete__for__issue;
    "/repos/{owner}/{repo}/issues/{issue_number}/sub_issue": Endpoints.delete_Issues_remove__sub__issue;
    "/repos/{owner}/{repo}/keys/{key_id}": Endpoints.delete_Repos_delete__deploy__key;
    "/repos/{owner}/{repo}/labels/{name}": Endpoints.delete_Issues_delete__label;
    "/repos/{owner}/{repo}/milestones/{milestone_number}": Endpoints.delete_Issues_delete__milestone;
    "/repos/{owner}/{repo}/pages": Endpoints.delete_Repos_delete__pages__site;
    "/repos/{owner}/{repo}/private-vulnerability-reporting": Endpoints.delete_Repos_disable__private__vulnerability__reporting;
    "/repos/{owner}/{repo}/pulls/comments/{comment_id}": Endpoints.delete_Pulls_delete__review__comment;
    "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}": Endpoints.delete_Reactions_delete__for__pull__request__comment;
    "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers": Endpoints.delete_Pulls_remove__requested__reviewers;
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}": Endpoints.delete_Pulls_delete__pending__review;
    "/repos/{owner}/{repo}/releases/assets/{asset_id}": Endpoints.delete_Repos_delete__release__asset;
    "/repos/{owner}/{repo}/releases/{release_id}": Endpoints.delete_Repos_delete__release;
    "/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}": Endpoints.delete_Reactions_delete__for__release;
    "/repos/{owner}/{repo}/rulesets/{ruleset_id}": Endpoints.delete_Repos_delete__repo__ruleset;
    "/repos/{owner}/{repo}/subscription": Endpoints.delete_Activity_delete__repo__subscription;
    "/repos/{owner}/{repo}/vulnerability-alerts": Endpoints.delete_Repos_disable__vulnerability__alerts;
    "/user/blocks/{username}": Endpoints.delete_Users_unblock;
    "/user/codespaces/secrets/{secret_name}": Endpoints.delete_Codespaces_delete__secret__for__authenticated__user;
    "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}": Endpoints.delete_Codespaces_remove__repository__for__secret__for__authenticated__user;
    "/user/codespaces/{codespace_name}": Endpoints.delete_Codespaces_delete__for__authenticated__user;
    "/user/emails": Endpoints.delete_Users_delete__email__for__authenticated__user;
    "/user/following/{username}": Endpoints.delete_Users_unfollow;
    "/user/gpg_keys/{gpg_key_id}": Endpoints.delete_Users_delete__gpg__key__for__authenticated__user;
    "/user/installations/{installation_id}/repositories/{repository_id}": Endpoints.delete_Apps_remove__repo__from__installation__for__authenticated__user;
    "/user/interaction-limits": Endpoints.delete_Interactions_remove__restrictions__for__authenticated__user;
    "/user/keys/{key_id}": Endpoints.delete_Users_delete__public__ssh__key__for__authenticated__user;
    "/user/migrations/{migration_id}/archive": Endpoints.delete_Migrations_delete__archive__for__authenticated__user;
    "/user/migrations/{migration_id}/repos/{repo_name}/lock": Endpoints.delete_Migrations_unlock__repo__for__authenticated__user;
    "/user/packages/{package_type}/{package_name}": Endpoints.delete_Packages_delete__package__for__authenticated__user;
    "/user/packages/{package_type}/{package_name}/versions/{package_version_id}": Endpoints.delete_Packages_delete__package__version__for__authenticated__user;
    "/user/repository_invitations/{invitation_id}": Endpoints.delete_Repos_decline__invitation__for__authenticated__user;
    "/user/social_accounts": Endpoints.delete_Users_delete__social__account__for__authenticated__user;
    "/user/ssh_signing_keys/{ssh_signing_key_id}": Endpoints.delete_Users_delete__ssh__signing__key__for__authenticated__user;
    "/user/starred/{owner}/{repo}": Endpoints.delete_Activity_unstar__repo__for__authenticated__user;
    "/users/{username}/attestations/digest/{subject_digest}": Endpoints.delete_Users_delete__attestations__by__subject__digest;
    "/users/{username}/attestations/{attestation_id}": Endpoints.delete_Users_delete__attestations__by__id;
    "/users/{username}/packages/{package_type}/{package_name}": Endpoints.delete_Packages_delete__package__for__user;
    "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}": Endpoints.delete_Packages_delete__package__version__for__user;
  };
  put: {
    "/app/installations/{installation_id}/suspended": Endpoints.put_Apps_suspend__installation;
    "/enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults": Endpoints.put_Code__security_set__configuration__as__default__for__enterprise;
    "/gists/{gist_id}/star": Endpoints.put_Gists_star;
    "/notifications": Endpoints.put_Activity_mark__notifications__as__read;
    "/notifications/threads/{thread_id}/subscription": Endpoints.put_Activity_set__thread__subscription;
    "/organizations/{org}/dependabot/repository-access/default-level": Endpoints.put_Dependabot_set__repository__access__default__level;
    "/orgs/{org}/actions/oidc/customization/sub": Endpoints.put_Oidc_update__oidc__custom__sub__template__for__org;
    "/orgs/{org}/actions/permissions": Endpoints.put_Actions_set__github__actions__permissions__organization;
    "/orgs/{org}/actions/permissions/artifact-and-log-retention": Endpoints.put_Actions_set__artifact__and__log__retention__settings__organization;
    "/orgs/{org}/actions/permissions/fork-pr-contributor-approval": Endpoints.put_Actions_set__fork__pr__contributor__approval__permissions__organization;
    "/orgs/{org}/actions/permissions/fork-pr-workflows-private-repos": Endpoints.put_Actions_set__private__repo__fork__pr__workflows__settings__organization;
    "/orgs/{org}/actions/permissions/repositories": Endpoints.put_Actions_set__selected__repositories__enabled__github__actions__organization;
    "/orgs/{org}/actions/permissions/repositories/{repository_id}": Endpoints.put_Actions_enable__selected__repository__github__actions__organization;
    "/orgs/{org}/actions/permissions/selected-actions": Endpoints.put_Actions_set__allowed__actions__organization;
    "/orgs/{org}/actions/permissions/self-hosted-runners": Endpoints.put_Actions_set__self__hosted__runners__permissions__organization;
    "/orgs/{org}/actions/permissions/self-hosted-runners/repositories": Endpoints.put_Actions_set__selected__repositories__self__hosted__runners__organization;
    "/orgs/{org}/actions/permissions/self-hosted-runners/repositories/{repository_id}": Endpoints.put_Actions_enable__selected__repository__self__hosted__runners__organization;
    "/orgs/{org}/actions/permissions/workflow": Endpoints.put_Actions_set__github__actions__default__workflow__permissions__organization;
    "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories": Endpoints.put_Actions_set__repo__access__to__self__hosted__runner__group__in__org;
    "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}": Endpoints.put_Actions_add__repo__access__to__self__hosted__runner__group__in__org;
    "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners": Endpoints.put_Actions_set__self__hosted__runners__in__group__for__org;
    "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}": Endpoints.put_Actions_add__self__hosted__runner__to__group__for__org;
    "/orgs/{org}/actions/runners/{runner_id}/labels": Endpoints.put_Actions_set__custom__labels__for__self__hosted__runner__for__org;
    "/orgs/{org}/actions/secrets/{secret_name}": Endpoints.put_Actions_create__or__update__org__secret;
    "/orgs/{org}/actions/secrets/{secret_name}/repositories": Endpoints.put_Actions_set__selected__repos__for__org__secret;
    "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}": Endpoints.put_Actions_add__selected__repo__to__org__secret;
    "/orgs/{org}/actions/variables/{name}/repositories": Endpoints.put_Actions_set__selected__repos__for__org__variable;
    "/orgs/{org}/actions/variables/{name}/repositories/{repository_id}": Endpoints.put_Actions_add__selected__repo__to__org__variable;
    "/orgs/{org}/blocks/{username}": Endpoints.put_Orgs_block__user;
    "/orgs/{org}/code-security/configurations/{configuration_id}/defaults": Endpoints.put_Code__security_set__configuration__as__default;
    "/orgs/{org}/codespaces/secrets/{secret_name}": Endpoints.put_Codespaces_create__or__update__org__secret;
    "/orgs/{org}/codespaces/secrets/{secret_name}/repositories": Endpoints.put_Codespaces_set__selected__repos__for__org__secret;
    "/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}": Endpoints.put_Codespaces_add__selected__repo__to__org__secret;
    "/orgs/{org}/dependabot/secrets/{secret_name}": Endpoints.put_Dependabot_create__or__update__org__secret;
    "/orgs/{org}/dependabot/secrets/{secret_name}/repositories": Endpoints.put_Dependabot_set__selected__repos__for__org__secret;
    "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}": Endpoints.put_Dependabot_add__selected__repo__to__org__secret;
    "/orgs/{org}/interaction-limits": Endpoints.put_Interactions_set__restrictions__for__org;
    "/orgs/{org}/issue-types/{issue_type_id}": Endpoints.put_Orgs_update__issue__type;
    "/orgs/{org}/memberships/{username}": Endpoints.put_Orgs_set__membership__for__user;
    "/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}": Endpoints.put_Orgs_assign__team__to__org__role;
    "/orgs/{org}/organization-roles/users/{username}/{role_id}": Endpoints.put_Orgs_assign__user__to__org__role;
    "/orgs/{org}/outside_collaborators/{username}": Endpoints.put_Orgs_convert__member__to__outside__collaborator;
    "/orgs/{org}/properties/schema/{custom_property_name}": Endpoints.put_Orgs_create__or__update__custom__property;
    "/orgs/{org}/public_members/{username}": Endpoints.put_Orgs_set__public__membership__for__authenticated__user;
    "/orgs/{org}/rulesets/{ruleset_id}": Endpoints.put_Repos_update__org__ruleset;
    "/orgs/{org}/teams/{team_slug}/memberships/{username}": Endpoints.put_Teams_add__or__update__membership__for__user__in__org;
    "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": Endpoints.put_Teams_add__or__update__repo__permissions__in__org;
    "/repos/{owner}/{repo}/actions/oidc/customization/sub": Endpoints.put_Actions_set__custom__oidc__sub__claim__for__repo;
    "/repos/{owner}/{repo}/actions/permissions": Endpoints.put_Actions_set__github__actions__permissions__repository;
    "/repos/{owner}/{repo}/actions/permissions/access": Endpoints.put_Actions_set__workflow__access__to__repository;
    "/repos/{owner}/{repo}/actions/permissions/artifact-and-log-retention": Endpoints.put_Actions_set__artifact__and__log__retention__settings__repository;
    "/repos/{owner}/{repo}/actions/permissions/fork-pr-contributor-approval": Endpoints.put_Actions_set__fork__pr__contributor__approval__permissions__repository;
    "/repos/{owner}/{repo}/actions/permissions/fork-pr-workflows-private-repos": Endpoints.put_Actions_set__private__repo__fork__pr__workflows__settings__repository;
    "/repos/{owner}/{repo}/actions/permissions/selected-actions": Endpoints.put_Actions_set__allowed__actions__repository;
    "/repos/{owner}/{repo}/actions/permissions/workflow": Endpoints.put_Actions_set__github__actions__default__workflow__permissions__repository;
    "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels": Endpoints.put_Actions_set__custom__labels__for__self__hosted__runner__for__repo;
    "/repos/{owner}/{repo}/actions/secrets/{secret_name}": Endpoints.put_Actions_create__or__update__repo__secret;
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable": Endpoints.put_Actions_disable__workflow;
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable": Endpoints.put_Actions_enable__workflow;
    "/repos/{owner}/{repo}/automated-security-fixes": Endpoints.put_Repos_enable__automated__security__fixes;
    "/repos/{owner}/{repo}/branches/{branch}/protection": Endpoints.put_Repos_update__branch__protection;
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": Endpoints.put_Repos_set__status__check__contexts;
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": Endpoints.put_Repos_set__app__access__restrictions;
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": Endpoints.put_Repos_set__team__access__restrictions;
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": Endpoints.put_Repos_set__user__access__restrictions;
    "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}": Endpoints.put_Codespaces_create__or__update__repo__secret;
    "/repos/{owner}/{repo}/collaborators/{username}": Endpoints.put_Repos_add__collaborator;
    "/repos/{owner}/{repo}/contents/{path}": Endpoints.put_Repos_create__or__update__file__contents;
    "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}": Endpoints.put_Dependabot_create__or__update__repo__secret;
    "/repos/{owner}/{repo}/environments/{environment_name}": Endpoints.put_Repos_create__or__update__environment;
    "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}": Endpoints.put_Repos_update__deployment__branch__policy;
    "/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}": Endpoints.put_Actions_create__or__update__environment__secret;
    "/repos/{owner}/{repo}/interaction-limits": Endpoints.put_Interactions_set__restrictions__for__repo;
    "/repos/{owner}/{repo}/issues/{issue_number}/labels": Endpoints.put_Issues_set__labels;
    "/repos/{owner}/{repo}/issues/{issue_number}/lock": Endpoints.put_Issues_lock;
    "/repos/{owner}/{repo}/notifications": Endpoints.put_Activity_mark__repo__notifications__as__read;
    "/repos/{owner}/{repo}/pages": Endpoints.put_Repos_update__information__about__pages__site;
    "/repos/{owner}/{repo}/private-vulnerability-reporting": Endpoints.put_Repos_enable__private__vulnerability__reporting;
    "/repos/{owner}/{repo}/pulls/{pull_number}/merge": Endpoints.put_Pulls_merge;
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}": Endpoints.put_Pulls_update__review;
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals": Endpoints.put_Pulls_dismiss__review;
    "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch": Endpoints.put_Pulls_update__branch;
    "/repos/{owner}/{repo}/rulesets/{ruleset_id}": Endpoints.put_Repos_update__repo__ruleset;
    "/repos/{owner}/{repo}/subscription": Endpoints.put_Activity_set__repo__subscription;
    "/repos/{owner}/{repo}/topics": Endpoints.put_Repos_replace__all__topics;
    "/repos/{owner}/{repo}/vulnerability-alerts": Endpoints.put_Repos_enable__vulnerability__alerts;
    "/user/blocks/{username}": Endpoints.put_Users_block;
    "/user/codespaces/secrets/{secret_name}": Endpoints.put_Codespaces_create__or__update__secret__for__authenticated__user;
    "/user/codespaces/secrets/{secret_name}/repositories": Endpoints.put_Codespaces_set__repositories__for__secret__for__authenticated__user;
    "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}": Endpoints.put_Codespaces_add__repository__for__secret__for__authenticated__user;
    "/user/following/{username}": Endpoints.put_Users_follow;
    "/user/installations/{installation_id}/repositories/{repository_id}": Endpoints.put_Apps_add__repo__to__installation__for__authenticated__user;
    "/user/interaction-limits": Endpoints.put_Interactions_set__restrictions__for__authenticated__user;
    "/user/starred/{owner}/{repo}": Endpoints.put_Activity_star__repo__for__authenticated__user;
  };
};

// </EndpointByMethod>

// <EndpointByMethod.Shorthands>
export type GetEndpoints = EndpointByMethod["get"];
export type PostEndpoints = EndpointByMethod["post"];
export type PatchEndpoints = EndpointByMethod["patch"];
export type DeleteEndpoints = EndpointByMethod["delete"];
export type PutEndpoints = EndpointByMethod["put"];
// </EndpointByMethod.Shorthands>

// <ApiClientTypes>
export type EndpointParameters = {
  body?: unknown;
  query?: Record<string, unknown>;
  header?: Record<string, unknown>;
  path?: Record<string, unknown>;
};

export type MutationMethod = "post" | "put" | "patch" | "delete";
export type Method = "get" | "head" | "options" | MutationMethod;

type RequestFormat = "json" | "form-data" | "form-url" | "binary" | "text";

export type DefaultEndpoint = {
  parameters?: EndpointParameters | undefined;
  responses?: Record<string, unknown>;
  responseHeaders?: Record<string, unknown>;
};

export type Endpoint<TConfig extends DefaultEndpoint = DefaultEndpoint> = {
  operationId: string;
  method: Method;
  path: string;
  requestFormat: RequestFormat;
  parameters?: TConfig["parameters"];
  meta: {
    alias: string;
    hasParameters: boolean;
    areParametersRequired: boolean;
  };
  responses?: TConfig["responses"];
  responseHeaders?: TConfig["responseHeaders"];
};

export type Fetcher = (method: Method, url: string, parameters?: EndpointParameters | undefined) => Promise<Response>;

export const successStatusCodes = [
  200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308,
] as const;
export type SuccessStatusCode = (typeof successStatusCodes)[number];

export const errorStatusCodes = [
  400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424,
  425, 426, 428, 429, 431, 451, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511,
] as const;
export type ErrorStatusCode = (typeof errorStatusCodes)[number];

// Taken from https://github.com/unjs/fetchdts/blob/ec4eaeab5d287116171fc1efd61f4a1ad34e4609/src/fetch.ts#L3
export interface TypedHeaders<TypedHeaderValues extends Record<string, string> | unknown>
  extends Omit<Headers, "append" | "delete" | "get" | "getSetCookie" | "has" | "set" | "forEach"> {
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/append) */
  append: <Name extends Extract<keyof TypedHeaderValues, string> | (string & {})>(
    name: Name,
    value: Lowercase<Name> extends keyof TypedHeaderValues ? TypedHeaderValues[Lowercase<Name>] : string,
  ) => void;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/delete) */
  delete: <Name extends Extract<keyof TypedHeaderValues, string> | (string & {})>(name: Name) => void;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/get) */
  get: <Name extends Extract<keyof TypedHeaderValues, string> | (string & {})>(
    name: Name,
  ) => (Lowercase<Name> extends keyof TypedHeaderValues ? TypedHeaderValues[Lowercase<Name>] : string) | null;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/getSetCookie) */
  getSetCookie: () => string[];
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/has) */
  has: <Name extends Extract<keyof TypedHeaderValues, string> | (string & {})>(name: Name) => boolean;
  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/set) */
  set: <Name extends Extract<keyof TypedHeaderValues, string> | (string & {})>(
    name: Name,
    value: Lowercase<Name> extends keyof TypedHeaderValues ? TypedHeaderValues[Lowercase<Name>] : string,
  ) => void;
  forEach: (
    callbackfn: (
      value: TypedHeaderValues[keyof TypedHeaderValues] | (string & {}),
      key: Extract<keyof TypedHeaderValues, string> | (string & {}),
      parent: TypedHeaders<TypedHeaderValues>,
    ) => void,
    thisArg?: any,
  ) => void;
}

/** @see https://developer.mozilla.org/en-US/docs/Web/API/Response */
export interface TypedSuccessResponse<TSuccess, TStatusCode, THeaders>
  extends Omit<Response, "ok" | "status" | "json" | "headers"> {
  ok: true;
  status: TStatusCode;
  headers: never extends THeaders ? Headers : TypedHeaders<THeaders>;
  data: TSuccess;
  /** [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/Response/json) */
  json: () => Promise<TSuccess>;
}

/** @see https://developer.mozilla.org/en-US/docs/Web/API/Response */
export interface TypedErrorResponse<TData, TStatusCode, THeaders>
  extends Omit<Response, "ok" | "status" | "json" | "headers"> {
  ok: false;
  status: TStatusCode;
  headers: never extends THeaders ? Headers : TypedHeaders<THeaders>;
  data: TData;
  /** [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/Response/json) */
  json: () => Promise<TData>;
}

export type TypedApiResponse<TAllResponses extends Record<string | number, unknown> = {}, THeaders = {}> = {
  [K in keyof TAllResponses]: K extends string
    ? K extends `${infer TStatusCode extends number}`
      ? TStatusCode extends SuccessStatusCode
        ? TypedSuccessResponse<TAllResponses[K], TStatusCode, K extends keyof THeaders ? THeaders[K] : never>
        : TypedErrorResponse<TAllResponses[K], TStatusCode, K extends keyof THeaders ? THeaders[K] : never>
      : never
    : K extends number
      ? K extends SuccessStatusCode
        ? TypedSuccessResponse<TAllResponses[K], K, K extends keyof THeaders ? THeaders[K] : never>
        : TypedErrorResponse<TAllResponses[K], K, K extends keyof THeaders ? THeaders[K] : never>
      : never;
}[keyof TAllResponses];

export type SafeApiResponse<TEndpoint> = TEndpoint extends { responses: infer TResponses }
  ? TResponses extends Record<string, unknown>
    ? TypedApiResponse<TResponses, TEndpoint extends { responseHeaders: infer THeaders } ? THeaders : never>
    : never
  : never;

export type InferResponseByStatus<TEndpoint, TStatusCode> = Extract<
  SafeApiResponse<TEndpoint>,
  { status: TStatusCode }
>;

type RequiredKeys<T> = {
  [P in keyof T]-?: undefined extends T[P] ? never : P;
}[keyof T];

type MaybeOptionalArg<T> = RequiredKeys<T> extends never ? [config?: T] : [config: T];

// </ApiClientTypes>

// <TypedResponseError>
export class TypedResponseError extends Error {
  response: TypedErrorResponse<unknown, ErrorStatusCode, unknown>;
  status: number;
  constructor(response: TypedErrorResponse<unknown, ErrorStatusCode, unknown>) {
    super(`HTTP ${response.status}: ${response.statusText}`);
    this.name = "TypedResponseError";
    this.response = response;
    this.status = response.status;
  }
}
// </TypedResponseError>
// <ApiClient>
export class ApiClient {
  baseUrl: string = "";
  successStatusCodes = successStatusCodes;
  errorStatusCodes = errorStatusCodes;

  constructor(public fetcher: Fetcher) {}

  setBaseUrl(baseUrl: string) {
    this.baseUrl = baseUrl;
    return this;
  }

  parseResponse = async <T,>(response: Response): Promise<T> => {
    const contentType = response.headers.get("content-type");
    if (contentType?.includes("application/json")) {
      return response.json();
    }
    return response.text() as unknown as T;
  };

  // <ApiClient.get>
  get<Path extends keyof GetEndpoints, TEndpoint extends GetEndpoints[Path]>(
    path: Path,
    ...params: MaybeOptionalArg<TEndpoint["parameters"] & { withResponse?: false; throwOnStatusError?: boolean }>
  ): Promise<InferResponseByStatus<TEndpoint, SuccessStatusCode>["data"]>;

  get<Path extends keyof GetEndpoints, TEndpoint extends GetEndpoints[Path]>(
    path: Path,
    ...params: MaybeOptionalArg<TEndpoint["parameters"] & { withResponse: true; throwOnStatusError?: boolean }>
  ): Promise<SafeApiResponse<TEndpoint>>;

  get<Path extends keyof GetEndpoints, TEndpoint extends GetEndpoints[Path]>(
    path: Path,
    ...params: MaybeOptionalArg<any>
  ): Promise<any> {
    const requestParams = params[0];
    const withResponse = requestParams?.withResponse;
    const { withResponse: _, throwOnStatusError = withResponse ? false : true, ...fetchParams } = requestParams || {};

    const promise = this.fetcher(
      "get",
      this.baseUrl + path,
      Object.keys(fetchParams).length ? requestParams : undefined,
    ).then(async (response) => {
      const data = await this.parseResponse(response);
      const typedResponse = Object.assign(response, {
        data: data,
        json: () => Promise.resolve(data),
      }) as SafeApiResponse<TEndpoint>;

      if (throwOnStatusError && errorStatusCodes.includes(response.status as never)) {
        throw new TypedResponseError(typedResponse as never);
      }

      return withResponse ? typedResponse : data;
    });

    return promise as Promise<InferResponseByStatus<TEndpoint, SuccessStatusCode>["data"]>;
  }
  // </ApiClient.get>

  // <ApiClient.post>
  post<Path extends keyof PostEndpoints, TEndpoint extends PostEndpoints[Path]>(
    path: Path,
    ...params: MaybeOptionalArg<TEndpoint["parameters"] & { withResponse?: false; throwOnStatusError?: boolean }>
  ): Promise<InferResponseByStatus<TEndpoint, SuccessStatusCode>["data"]>;

  post<Path extends keyof PostEndpoints, TEndpoint extends PostEndpoints[Path]>(
    path: Path,
    ...params: MaybeOptionalArg<TEndpoint["parameters"] & { withResponse: true; throwOnStatusError?: boolean }>
  ): Promise<SafeApiResponse<TEndpoint>>;

  post<Path extends keyof PostEndpoints, TEndpoint extends PostEndpoints[Path]>(
    path: Path,
    ...params: MaybeOptionalArg<any>
  ): Promise<any> {
    const requestParams = params[0];
    const withResponse = requestParams?.withResponse;
    const { withResponse: _, throwOnStatusError = withResponse ? false : true, ...fetchParams } = requestParams || {};

    const promise = this.fetcher(
      "post",
      this.baseUrl + path,
      Object.keys(fetchParams).length ? requestParams : undefined,
    ).then(async (response) => {
      const data = await this.parseResponse(response);
      const typedResponse = Object.assign(response, {
        data: data,
        json: () => Promise.resolve(data),
      }) as SafeApiResponse<TEndpoint>;

      if (throwOnStatusError && errorStatusCodes.includes(response.status as never)) {
        throw new TypedResponseError(typedResponse as never);
      }

      return withResponse ? typedResponse : data;
    });

    return promise as Promise<InferResponseByStatus<TEndpoint, SuccessStatusCode>["data"]>;
  }
  // </ApiClient.post>

  // <ApiClient.patch>
  patch<Path extends keyof PatchEndpoints, TEndpoint extends PatchEndpoints[Path]>(
    path: Path,
    ...params: MaybeOptionalArg<TEndpoint["parameters"] & { withResponse?: false; throwOnStatusError?: boolean }>
  ): Promise<InferResponseByStatus<TEndpoint, SuccessStatusCode>["data"]>;

  patch<Path extends keyof PatchEndpoints, TEndpoint extends PatchEndpoints[Path]>(
    path: Path,
    ...params: MaybeOptionalArg<TEndpoint["parameters"] & { withResponse: true; throwOnStatusError?: boolean }>
  ): Promise<SafeApiResponse<TEndpoint>>;

  patch<Path extends keyof PatchEndpoints, TEndpoint extends PatchEndpoints[Path]>(
    path: Path,
    ...params: MaybeOptionalArg<any>
  ): Promise<any> {
    const requestParams = params[0];
    const withResponse = requestParams?.withResponse;
    const { withResponse: _, throwOnStatusError = withResponse ? false : true, ...fetchParams } = requestParams || {};

    const promise = this.fetcher(
      "patch",
      this.baseUrl + path,
      Object.keys(fetchParams).length ? requestParams : undefined,
    ).then(async (response) => {
      const data = await this.parseResponse(response);
      const typedResponse = Object.assign(response, {
        data: data,
        json: () => Promise.resolve(data),
      }) as SafeApiResponse<TEndpoint>;

      if (throwOnStatusError && errorStatusCodes.includes(response.status as never)) {
        throw new TypedResponseError(typedResponse as never);
      }

      return withResponse ? typedResponse : data;
    });

    return promise as Promise<InferResponseByStatus<TEndpoint, SuccessStatusCode>["data"]>;
  }
  // </ApiClient.patch>

  // <ApiClient.delete>
  delete<Path extends keyof DeleteEndpoints, TEndpoint extends DeleteEndpoints[Path]>(
    path: Path,
    ...params: MaybeOptionalArg<TEndpoint["parameters"] & { withResponse?: false; throwOnStatusError?: boolean }>
  ): Promise<InferResponseByStatus<TEndpoint, SuccessStatusCode>["data"]>;

  delete<Path extends keyof DeleteEndpoints, TEndpoint extends DeleteEndpoints[Path]>(
    path: Path,
    ...params: MaybeOptionalArg<TEndpoint["parameters"] & { withResponse: true; throwOnStatusError?: boolean }>
  ): Promise<SafeApiResponse<TEndpoint>>;

  delete<Path extends keyof DeleteEndpoints, TEndpoint extends DeleteEndpoints[Path]>(
    path: Path,
    ...params: MaybeOptionalArg<any>
  ): Promise<any> {
    const requestParams = params[0];
    const withResponse = requestParams?.withResponse;
    const { withResponse: _, throwOnStatusError = withResponse ? false : true, ...fetchParams } = requestParams || {};

    const promise = this.fetcher(
      "delete",
      this.baseUrl + path,
      Object.keys(fetchParams).length ? requestParams : undefined,
    ).then(async (response) => {
      const data = await this.parseResponse(response);
      const typedResponse = Object.assign(response, {
        data: data,
        json: () => Promise.resolve(data),
      }) as SafeApiResponse<TEndpoint>;

      if (throwOnStatusError && errorStatusCodes.includes(response.status as never)) {
        throw new TypedResponseError(typedResponse as never);
      }

      return withResponse ? typedResponse : data;
    });

    return promise as Promise<InferResponseByStatus<TEndpoint, SuccessStatusCode>["data"]>;
  }
  // </ApiClient.delete>

  // <ApiClient.put>
  put<Path extends keyof PutEndpoints, TEndpoint extends PutEndpoints[Path]>(
    path: Path,
    ...params: MaybeOptionalArg<TEndpoint["parameters"] & { withResponse?: false; throwOnStatusError?: boolean }>
  ): Promise<InferResponseByStatus<TEndpoint, SuccessStatusCode>["data"]>;

  put<Path extends keyof PutEndpoints, TEndpoint extends PutEndpoints[Path]>(
    path: Path,
    ...params: MaybeOptionalArg<TEndpoint["parameters"] & { withResponse: true; throwOnStatusError?: boolean }>
  ): Promise<SafeApiResponse<TEndpoint>>;

  put<Path extends keyof PutEndpoints, TEndpoint extends PutEndpoints[Path]>(
    path: Path,
    ...params: MaybeOptionalArg<any>
  ): Promise<any> {
    const requestParams = params[0];
    const withResponse = requestParams?.withResponse;
    const { withResponse: _, throwOnStatusError = withResponse ? false : true, ...fetchParams } = requestParams || {};

    const promise = this.fetcher(
      "put",
      this.baseUrl + path,
      Object.keys(fetchParams).length ? requestParams : undefined,
    ).then(async (response) => {
      const data = await this.parseResponse(response);
      const typedResponse = Object.assign(response, {
        data: data,
        json: () => Promise.resolve(data),
      }) as SafeApiResponse<TEndpoint>;

      if (throwOnStatusError && errorStatusCodes.includes(response.status as never)) {
        throw new TypedResponseError(typedResponse as never);
      }

      return withResponse ? typedResponse : data;
    });

    return promise as Promise<InferResponseByStatus<TEndpoint, SuccessStatusCode>["data"]>;
  }
  // </ApiClient.put>

  // <ApiClient.request>
  /**
   * Generic request method with full type-safety for any endpoint
   */
  request<
    TMethod extends keyof EndpointByMethod,
    TPath extends keyof EndpointByMethod[TMethod],
    TEndpoint extends EndpointByMethod[TMethod][TPath],
  >(
    method: TMethod,
    path: TPath,
    ...params: MaybeOptionalArg<TEndpoint extends { parameters: infer Params } ? Params : never>
  ): Promise<SafeApiResponse<TEndpoint>> {
    return this.fetcher(method, this.baseUrl + (path as string), params[0] as EndpointParameters) as Promise<
      SafeApiResponse<TEndpoint>
    >;
  }
  // </ApiClient.request>
}

export function createApiClient(fetcher: Fetcher, baseUrl?: string) {
  return new ApiClient(fetcher).setBaseUrl(baseUrl ?? "");
}

/**
 Example usage:
 const api = createApiClient((method, url, params) =>
   fetch(url, { method, body: JSON.stringify(params) }).then((res) => res.json()),
 );
 api.get("/users").then((users) => console.log(users));
 api.post("/users", { body: { name: "John" } }).then((user) => console.log(user));
 api.put("/users/:id", { path: { id: 1 }, body: { name: "John" } }).then((user) => console.log(user));

 // With error handling
 const result = await api.get("/users/{id}", { path: { id: "123" }, withResponse: true });
 if (result.ok) {
   // Access data directly
   const user = result.data;
   console.log(user);

   // Or use the json() method for compatibility
   const userFromJson = await result.json();
   console.log(userFromJson);
 } else {
   const error = result.data;
   console.error(`Error ${result.status}:`, error);
 }
*/

// </ApiClient>
