import type * as HttpClient from "@effect/platform/HttpClient"
import * as HttpClientError from "@effect/platform/HttpClientError"
import * as HttpClientRequest from "@effect/platform/HttpClientRequest"
import * as HttpClientResponse from "@effect/platform/HttpClientResponse"
import * as Data from "effect/Data"
import * as Effect from "effect/Effect"
import type { ParseError } from "effect/ParseResult"
import * as S from "effect/Schema"

export class Root extends S.Class<Root>("Root")({
  "current_user_url": S.String,
  "current_user_authorizations_html_url": S.String,
  "authorizations_url": S.String,
  "code_search_url": S.String,
  "commit_search_url": S.String,
  "emails_url": S.String,
  "emojis_url": S.String,
  "events_url": S.String,
  "feeds_url": S.String,
  "followers_url": S.String,
  "following_url": S.String,
  "gists_url": S.String,
  "hub_url": S.optionalWith(S.String, { nullable: true }),
  "issue_search_url": S.String,
  "issues_url": S.String,
  "keys_url": S.String,
  "label_search_url": S.String,
  "notifications_url": S.String,
  "organization_url": S.String,
  "organization_repositories_url": S.String,
  "organization_teams_url": S.String,
  "public_gists_url": S.String,
  "rate_limit_url": S.String,
  "repository_url": S.String,
  "repository_search_url": S.String,
  "current_user_repositories_url": S.String,
  "starred_url": S.String,
  "starred_gists_url": S.String,
  "topic_search_url": S.optionalWith(S.String, { nullable: true }),
  "user_url": S.String,
  "user_organizations_url": S.String,
  "user_repositories_url": S.String,
  "user_search_url": S.String
}) {}

export class SecurityAdvisoriesListGlobalAdvisoriesParamsType extends S.Literal("reviewed", "malware", "unreviewed") {}

/**
* The package's language or package management ecosystem.
*/
export class SecurityAdvisoryEcosystems extends S.Literal("rubygems", "npm", "pip", "maven", "nuget", "composer", "go", "rust", "erlang", "actions", "pub", "other", "swift") {}

export class SecurityAdvisoriesListGlobalAdvisoriesParamsSeverity extends S.Literal("unknown", "low", "medium", "high", "critical") {}

export class SecurityAdvisoriesListGlobalAdvisoriesParamsDirection extends S.Literal("asc", "desc") {}

export class SecurityAdvisoriesListGlobalAdvisoriesParamsSort extends S.Literal("updated", "published", "epss_percentage", "epss_percentile") {}

export class SecurityAdvisoriesListGlobalAdvisoriesParams extends S.Struct({
  "ghsa_id": S.optionalWith(S.String, { nullable: true }),
  "type": S.optionalWith(SecurityAdvisoriesListGlobalAdvisoriesParamsType, { nullable: true, default: () => "reviewed" as const }),
  "cve_id": S.optionalWith(S.String, { nullable: true }),
  "ecosystem": S.optionalWith(SecurityAdvisoryEcosystems, { nullable: true }),
  "severity": S.optionalWith(SecurityAdvisoriesListGlobalAdvisoriesParamsSeverity, { nullable: true }),
  "cwes": S.optionalWith(S.Union(S.String,
S.Array(S.String)), { nullable: true }),
  "is_withdrawn": S.optionalWith(S.Boolean, { nullable: true }),
  "affects": S.optionalWith(S.Union(S.String,
S.Array(S.String).pipe(S.maxItems(1000))), { nullable: true }),
  "published": S.optionalWith(S.String, { nullable: true }),
  "updated": S.optionalWith(S.String, { nullable: true }),
  "modified": S.optionalWith(S.String, { nullable: true }),
  "epss_percentage": S.optionalWith(S.String, { nullable: true }),
  "epss_percentile": S.optionalWith(S.String, { nullable: true }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true }),
  "direction": S.optionalWith(SecurityAdvisoriesListGlobalAdvisoriesParamsDirection, { nullable: true, default: () => "desc" as const }),
  "per_page": S.optionalWith(S.Int.pipe(S.greaterThanOrEqualTo(1), S.lessThanOrEqualTo(100)), { nullable: true, default: () => 30 as const }),
  "sort": S.optionalWith(SecurityAdvisoriesListGlobalAdvisoriesParamsSort, { nullable: true, default: () => "published" as const })
}) {}

/**
* The type of advisory.
*/
export class GlobalAdvisoryType extends S.Literal("reviewed", "unreviewed", "malware") {}

/**
* The severity of the advisory.
*/
export class GlobalAdvisorySeverity extends S.Literal("critical", "high", "medium", "low", "unknown") {}

/**
* A vulnerability describing the product and its affected versions within a GitHub Security Advisory.
*/
export class Vulnerability extends S.Class<Vulnerability>("Vulnerability")({
  /**
* The name of the package affected by the vulnerability.
*/
"package": S.NullOr(S.Struct({
  "ecosystem": SecurityAdvisoryEcosystems,
  /**
* The unique package name within its ecosystem.
*/
"name": S.NullOr(S.String)
})),
  /**
* The range of the package versions affected by the vulnerability.
*/
"vulnerable_version_range": S.NullOr(S.String),
  /**
* The package version that resolves the vulnerability.
*/
"first_patched_version": S.NullOr(S.String),
  /**
* The functions in the package that are affected by the vulnerability.
*/
"vulnerable_functions": S.NullOr(S.Array(S.String))
}) {}

export class CvssSeverities extends S.Class<CvssSeverities>("CvssSeverities")({
  "cvss_v3": S.optionalWith(S.Struct({
  /**
* The CVSS 3 vector string.
*/
"vector_string": S.NullOr(S.String),
  /**
* The CVSS 3 score.
*/
"score": S.NullOr(S.Number.pipe(S.greaterThanOrEqualTo(0), S.lessThanOrEqualTo(10)))
}), { nullable: true }),
  "cvss_v4": S.optionalWith(S.Struct({
  /**
* The CVSS 4 vector string.
*/
"vector_string": S.NullOr(S.String),
  /**
* The CVSS 4 score.
*/
"score": S.NullOr(S.Number.pipe(S.greaterThanOrEqualTo(0), S.lessThanOrEqualTo(10)))
}), { nullable: true })
}) {}

/**
* The EPSS scores as calculated by the [Exploit Prediction Scoring System](https://www.first.org/epss).
*/
export class SecurityAdvisoryEpss extends S.Class<SecurityAdvisoryEpss>("SecurityAdvisoryEpss")({
  "percentage": S.optionalWith(S.Number.pipe(S.greaterThanOrEqualTo(0), S.lessThanOrEqualTo(100)), { nullable: true }),
  "percentile": S.optionalWith(S.Number.pipe(S.greaterThanOrEqualTo(0), S.lessThanOrEqualTo(100)), { nullable: true })
}) {}

/**
* A GitHub user.
*/
export class SimpleUser extends S.Class<SimpleUser>("SimpleUser")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "email": S.optionalWith(S.String, { nullable: true }),
  "login": S.String,
  "id": S.Int,
  "node_id": S.String,
  "avatar_url": S.String,
  "gravatar_id": S.NullOr(S.String),
  "url": S.String,
  "html_url": S.String,
  "followers_url": S.String,
  "following_url": S.String,
  "gists_url": S.String,
  "starred_url": S.String,
  "subscriptions_url": S.String,
  "organizations_url": S.String,
  "repos_url": S.String,
  "events_url": S.String,
  "received_events_url": S.String,
  "type": S.String,
  "site_admin": S.Boolean,
  "starred_at": S.optionalWith(S.String, { nullable: true }),
  "user_view_type": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of credit the user is receiving.
*/
export class SecurityAdvisoryCreditTypes extends S.Literal("analyst", "finder", "reporter", "coordinator", "remediation_developer", "remediation_reviewer", "remediation_verifier", "tool", "sponsor", "other") {}

/**
* A GitHub Security Advisory.
*/
export class GlobalAdvisory extends S.Class<GlobalAdvisory>("GlobalAdvisory")({
  /**
* The GitHub Security Advisory ID.
*/
"ghsa_id": S.String,
  /**
* The Common Vulnerabilities and Exposures (CVE) ID.
*/
"cve_id": S.NullOr(S.String),
  /**
* The API URL for the advisory.
*/
"url": S.String,
  /**
* The URL for the advisory.
*/
"html_url": S.String,
  /**
* The API URL for the repository advisory.
*/
"repository_advisory_url": S.NullOr(S.String),
  /**
* A short summary of the advisory.
*/
"summary": S.String.pipe(S.maxLength(1024)),
  /**
* A detailed description of what the advisory entails.
*/
"description": S.NullOr(S.String.pipe(S.maxLength(65535))),
  /**
* The type of advisory.
*/
"type": GlobalAdvisoryType,
  /**
* The severity of the advisory.
*/
"severity": GlobalAdvisorySeverity,
  /**
* The URL of the advisory's source code.
*/
"source_code_location": S.NullOr(S.String),
  "identifiers": S.NullOr(S.Array(S.Struct({
  /**
* The type of identifier.
*/
"type": S.Literal("CVE", "GHSA"),
  /**
* The identifier value.
*/
"value": S.String
}))),
  "references": S.NullOr(S.Array(S.String)),
  /**
* The date and time of when the advisory was published, in ISO 8601 format.
*/
"published_at": S.String,
  /**
* The date and time of when the advisory was last updated, in ISO 8601 format.
*/
"updated_at": S.String,
  /**
* The date and time of when the advisory was reviewed by GitHub, in ISO 8601 format.
*/
"github_reviewed_at": S.NullOr(S.String),
  /**
* The date and time when the advisory was published in the National Vulnerability Database, in ISO 8601 format.
* This field is only populated when the advisory is imported from the National Vulnerability Database.
*/
"nvd_published_at": S.NullOr(S.String),
  /**
* The date and time of when the advisory was withdrawn, in ISO 8601 format.
*/
"withdrawn_at": S.NullOr(S.String),
  /**
* The products and respective version ranges affected by the advisory.
*/
"vulnerabilities": S.NullOr(S.Array(Vulnerability)),
  "cvss": S.NullOr(S.Struct({
  /**
* The CVSS vector.
*/
"vector_string": S.NullOr(S.String),
  /**
* The CVSS score.
*/
"score": S.NullOr(S.Number.pipe(S.greaterThanOrEqualTo(0), S.lessThanOrEqualTo(10)))
})),
  "cvss_severities": S.optionalWith(CvssSeverities, { nullable: true }),
  "epss": S.optionalWith(SecurityAdvisoryEpss, { nullable: true }),
  "cwes": S.NullOr(S.Array(S.Struct({
  /**
* The Common Weakness Enumeration (CWE) identifier.
*/
"cwe_id": S.String,
  /**
* The name of the CWE.
*/
"name": S.String
}))),
  /**
* The users who contributed to the advisory.
*/
"credits": S.NullOr(S.Array(S.Struct({
  "user": SimpleUser,
  "type": SecurityAdvisoryCreditTypes
})))
}) {}

export class SecurityAdvisoriesListGlobalAdvisories200 extends S.Array(GlobalAdvisory) {}

/**
* Validation Error Simple
*/
export class ValidationErrorSimple extends S.Class<ValidationErrorSimple>("ValidationErrorSimple")({
  "message": S.String,
  "documentation_url": S.String,
  "errors": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

/**
* Basic Error
*/
export class BasicError extends S.Class<BasicError>("BasicError")({
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true }),
  "status": S.optionalWith(S.String, { nullable: true })
}) {}

export class SecurityAdvisoriesGetGlobalAdvisoryParams extends S.Struct({
  
}) {}

/**
* An enterprise on GitHub.
*/
export class Enterprise extends S.Class<Enterprise>("Enterprise")({
  /**
* A short description of the enterprise.
*/
"description": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.String,
  /**
* The enterprise's website URL.
*/
"website_url": S.optionalWith(S.String, { nullable: true }),
  /**
* Unique identifier of the enterprise
*/
"id": S.Int,
  "node_id": S.String,
  /**
* The name of the enterprise.
*/
"name": S.String,
  /**
* The slug url identifier for the enterprise.
*/
"slug": S.String,
  "created_at": S.NullOr(S.String),
  "updated_at": S.NullOr(S.String),
  "avatar_url": S.String
}) {}

/**
* GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
*/
export class Integration extends S.Class<Integration>("Integration")({
  /**
* Unique identifier of the GitHub app
*/
"id": S.Int,
  /**
* The slug name of the GitHub app
*/
"slug": S.optionalWith(S.String, { nullable: true }),
  "node_id": S.String,
  "client_id": S.optionalWith(S.String, { nullable: true }),
  "owner": S.Union(SimpleUser,
Enterprise),
  /**
* The name of the GitHub app
*/
"name": S.String,
  "description": S.NullOr(S.String),
  "external_url": S.String,
  "html_url": S.String,
  "created_at": S.String,
  "updated_at": S.String,
  /**
* The set of permissions for the GitHub app
*/
"permissions": S.Struct({
  "issues": S.optionalWith(S.String, { nullable: true }),
  "checks": S.optionalWith(S.String, { nullable: true }),
  "metadata": S.optionalWith(S.String, { nullable: true }),
  "contents": S.optionalWith(S.String, { nullable: true }),
  "deployments": S.optionalWith(S.String, { nullable: true })
}),
  /**
* The list of events for the GitHub app. Note that the `installation_target`, `security_advisory`, and `meta` events are not included because they are global events and not specific to an installation.
*/
"events": S.Array(S.String),
  /**
* The number of installations associated with the GitHub app. Only returned when the integration is requesting details about itself.
*/
"installations_count": S.optionalWith(S.Int, { nullable: true })
}) {}

export class AppsCreateFromManifest201 extends AppsCreateFromManifest201 {}

/**
* The URL to which the payloads will be delivered.
*/
export class WebhookConfigUrl extends S.String {}

/**
* The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
*/
export class WebhookConfigContentType extends S.String {}

/**
* If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
*/
export class WebhookConfigSecret extends S.String {}

export class WebhookConfigInsecureSsl extends S.Union(/**
* Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**
*/
S.String,
S.Number) {}

/**
* Configuration object of the webhook
*/
export class WebhookConfig extends S.Class<WebhookConfig>("WebhookConfig")({
  "url": S.optionalWith(WebhookConfigUrl, { nullable: true }),
  "content_type": S.optionalWith(WebhookConfigContentType, { nullable: true }),
  "secret": S.optionalWith(WebhookConfigSecret, { nullable: true }),
  "insecure_ssl": S.optionalWith(WebhookConfigInsecureSsl, { nullable: true })
}) {}

export class AppsUpdateWebhookConfigForAppRequest extends S.Class<AppsUpdateWebhookConfigForAppRequest>("AppsUpdateWebhookConfigForAppRequest")({
  "url": S.optionalWith(WebhookConfigUrl, { nullable: true }),
  "content_type": S.optionalWith(WebhookConfigContentType, { nullable: true }),
  "secret": S.optionalWith(WebhookConfigSecret, { nullable: true }),
  "insecure_ssl": S.optionalWith(WebhookConfigInsecureSsl, { nullable: true })
}) {}

export class AppsListWebhookDeliveriesParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "cursor": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Delivery made by a webhook, without request and response information.
*/
export class HookDeliveryItem extends S.Class<HookDeliveryItem>("HookDeliveryItem")({
  /**
* Unique identifier of the webhook delivery.
*/
"id": S.Int,
  /**
* Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
*/
"guid": S.String,
  /**
* Time when the webhook delivery occurred.
*/
"delivered_at": S.String,
  /**
* Whether the webhook delivery is a redelivery.
*/
"redelivery": S.Boolean,
  /**
* Time spent delivering.
*/
"duration": S.Number,
  /**
* Describes the response returned after attempting the delivery.
*/
"status": S.String,
  /**
* Status code received when delivery was made.
*/
"status_code": S.Int,
  /**
* The event that triggered the delivery.
*/
"event": S.String,
  /**
* The type of activity for the event that triggered the delivery.
*/
"action": S.NullOr(S.String),
  /**
* The id of the GitHub App installation associated with this event.
*/
"installation_id": S.NullOr(S.Int),
  /**
* The id of the repository associated with this event.
*/
"repository_id": S.NullOr(S.Int),
  /**
* Time when the webhook delivery was throttled.
*/
"throttled_at": S.optionalWith(S.String, { nullable: true })
}) {}

export class AppsListWebhookDeliveries200 extends S.Array(HookDeliveryItem) {}

/**
* Validation Error
*/
export class ValidationError extends S.Class<ValidationError>("ValidationError")({
  "message": S.String,
  "documentation_url": S.String,
  "errors": S.optionalWith(S.Array(S.Struct({
  "resource": S.optionalWith(S.String, { nullable: true }),
  "field": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "code": S.String,
  "index": S.optionalWith(S.Int, { nullable: true }),
  "value": S.optionalWith(S.Union(S.String,
S.Int,
S.Array(S.String)), { nullable: true })
})), { nullable: true })
}) {}

export class AppsGetWebhookDeliveryParams extends S.Struct({
  
}) {}

/**
* Delivery made by a webhook.
*/
export class HookDelivery extends S.Class<HookDelivery>("HookDelivery")({
  /**
* Unique identifier of the delivery.
*/
"id": S.Int,
  /**
* Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
*/
"guid": S.String,
  /**
* Time when the delivery was delivered.
*/
"delivered_at": S.String,
  /**
* Whether the delivery is a redelivery.
*/
"redelivery": S.Boolean,
  /**
* Time spent delivering.
*/
"duration": S.Number,
  /**
* Description of the status of the attempted delivery
*/
"status": S.String,
  /**
* Status code received when delivery was made.
*/
"status_code": S.Int,
  /**
* The event that triggered the delivery.
*/
"event": S.String,
  /**
* The type of activity for the event that triggered the delivery.
*/
"action": S.NullOr(S.String),
  /**
* The id of the GitHub App installation associated with this event.
*/
"installation_id": S.NullOr(S.Int),
  /**
* The id of the repository associated with this event.
*/
"repository_id": S.NullOr(S.Int),
  /**
* Time when the webhook delivery was throttled.
*/
"throttled_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The URL target of the delivery.
*/
"url": S.optionalWith(S.String, { nullable: true }),
  "request": S.Struct({
  /**
* The request headers sent with the webhook delivery.
*/
"headers": S.NullOr(S.Record({ key: S.String, value: S.Unknown })),
  /**
* The webhook payload.
*/
"payload": S.NullOr(S.Record({ key: S.String, value: S.Unknown }))
}),
  "response": S.Struct({
  /**
* The response headers received when the delivery was made.
*/
"headers": S.NullOr(S.Record({ key: S.String, value: S.Unknown })),
  /**
* The response payload received.
*/
"payload": S.NullOr(S.String)
})
}) {}

export class AppsRedeliverWebhookDeliveryParams extends S.Struct({
  
}) {}

export class AppsRedeliverWebhookDelivery202 extends S.Record({ key: S.String, value: S.Unknown }) {}

export class AppsListInstallationRequestsForAuthenticatedAppParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Request to install an integration on a target
*/
export class IntegrationInstallationRequest extends S.Class<IntegrationInstallationRequest>("IntegrationInstallationRequest")({
  /**
* Unique identifier of the request installation.
*/
"id": S.Int,
  "node_id": S.optionalWith(S.String, { nullable: true }),
  "account": S.Union(SimpleUser,
Enterprise),
  "requester": SimpleUser,
  "created_at": S.String
}) {}

export class AppsListInstallationRequestsForAuthenticatedApp200 extends S.Array(IntegrationInstallationRequest) {}

export class AppsListInstallationsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "since": S.optionalWith(S.String, { nullable: true }),
  "outdated": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Describe whether all repositories have been selected or there's a selection involved
*/
export class InstallationRepositorySelection extends S.Literal("all", "selected") {}

/**
* The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
*/
export class AppPermissionsActions extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
*/
export class AppPermissionsAdministration extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token for checks on code.
*/
export class AppPermissionsChecks extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to create, edit, delete, and list Codespaces.
*/
export class AppPermissionsCodespaces extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
*/
export class AppPermissionsContents extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to manage Dependabot secrets.
*/
export class AppPermissionsDependabotSecrets extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token for deployments and deployment statuses.
*/
export class AppPermissionsDeployments extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token for managing repository environments.
*/
export class AppPermissionsEnvironments extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
*/
export class AppPermissionsIssues extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
*/
export class AppPermissionsMetadata extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token for packages published to GitHub Packages.
*/
export class AppPermissionsPackages extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
*/
export class AppPermissionsPages extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
*/
export class AppPermissionsPullRequests extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.
*/
export class AppPermissionsRepositoryCustomProperties extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to manage the post-receive hooks for a repository.
*/
export class AppPermissionsRepositoryHooks extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to manage repository projects, columns, and cards.
*/
export class AppPermissionsRepositoryProjects extends S.Literal("read", "write", "admin") {}

/**
* The level of permission to grant the access token to view and manage secret scanning alerts.
*/
export class AppPermissionsSecretScanningAlerts extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to manage repository secrets.
*/
export class AppPermissionsSecrets extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to view and manage security events like code scanning alerts.
*/
export class AppPermissionsSecurityEvents extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to manage just a single file.
*/
export class AppPermissionsSingleFile extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token for commit statuses.
*/
export class AppPermissionsStatuses extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to manage Dependabot alerts.
*/
export class AppPermissionsVulnerabilityAlerts extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to update GitHub Actions workflow files.
*/
export class AppPermissionsWorkflows extends S.Literal("write") {}

/**
* The level of permission to grant the access token for organization teams and members.
*/
export class AppPermissionsMembers extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to manage access to an organization.
*/
export class AppPermissionsOrganizationAdministration extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token for custom repository roles management.
*/
export class AppPermissionsOrganizationCustomRoles extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token for custom organization roles management.
*/
export class AppPermissionsOrganizationCustomOrgRoles extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token for custom property management.
*/
export class AppPermissionsOrganizationCustomProperties extends S.Literal("read", "write", "admin") {}

/**
* The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.
*/
export class AppPermissionsOrganizationCopilotSeatManagement extends S.Literal("write") {}

/**
* The level of permission to grant the access token to view and manage announcement banners for an organization.
*/
export class AppPermissionsOrganizationAnnouncementBanners extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to view events triggered by an activity in an organization.
*/
export class AppPermissionsOrganizationEvents extends S.Literal("read") {}

/**
* The level of permission to grant the access token to manage the post-receive hooks for an organization.
*/
export class AppPermissionsOrganizationHooks extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
*/
export class AppPermissionsOrganizationPersonalAccessTokens extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
*/
export class AppPermissionsOrganizationPersonalAccessTokenRequests extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token for viewing an organization's plan.
*/
export class AppPermissionsOrganizationPlan extends S.Literal("read") {}

/**
* The level of permission to grant the access token to manage organization projects and projects public preview (where available).
*/
export class AppPermissionsOrganizationProjects extends S.Literal("read", "write", "admin") {}

/**
* The level of permission to grant the access token for organization packages published to GitHub Packages.
*/
export class AppPermissionsOrganizationPackages extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to manage organization secrets.
*/
export class AppPermissionsOrganizationSecrets extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
*/
export class AppPermissionsOrganizationSelfHostedRunners extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to view and manage users blocked by the organization.
*/
export class AppPermissionsOrganizationUserBlocking extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to manage team discussions and related comments.
*/
export class AppPermissionsTeamDiscussions extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to manage the email addresses belonging to a user.
*/
export class AppPermissionsEmailAddresses extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to manage the followers belonging to a user.
*/
export class AppPermissionsFollowers extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to manage git SSH keys.
*/
export class AppPermissionsGitSshKeys extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to view and manage GPG keys belonging to a user.
*/
export class AppPermissionsGpgKeys extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to view and manage interaction limits on a repository.
*/
export class AppPermissionsInteractionLimits extends S.Literal("read", "write") {}

/**
* The level of permission to grant the access token to manage the profile settings belonging to a user.
*/
export class AppPermissionsProfile extends S.Literal("write") {}

/**
* The level of permission to grant the access token to list and manage repositories a user is starring.
*/
export class AppPermissionsStarring extends S.Literal("read", "write") {}

/**
* The permissions granted to the user access token.
*/
export class AppPermissions extends S.Class<AppPermissions>("AppPermissions")({
  /**
* The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
*/
"actions": S.optionalWith(AppPermissionsActions, { nullable: true }),
  /**
* The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
*/
"administration": S.optionalWith(AppPermissionsAdministration, { nullable: true }),
  /**
* The level of permission to grant the access token for checks on code.
*/
"checks": S.optionalWith(AppPermissionsChecks, { nullable: true }),
  /**
* The level of permission to grant the access token to create, edit, delete, and list Codespaces.
*/
"codespaces": S.optionalWith(AppPermissionsCodespaces, { nullable: true }),
  /**
* The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
*/
"contents": S.optionalWith(AppPermissionsContents, { nullable: true }),
  /**
* The level of permission to grant the access token to manage Dependabot secrets.
*/
"dependabot_secrets": S.optionalWith(AppPermissionsDependabotSecrets, { nullable: true }),
  /**
* The level of permission to grant the access token for deployments and deployment statuses.
*/
"deployments": S.optionalWith(AppPermissionsDeployments, { nullable: true }),
  /**
* The level of permission to grant the access token for managing repository environments.
*/
"environments": S.optionalWith(AppPermissionsEnvironments, { nullable: true }),
  /**
* The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
*/
"issues": S.optionalWith(AppPermissionsIssues, { nullable: true }),
  /**
* The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
*/
"metadata": S.optionalWith(AppPermissionsMetadata, { nullable: true }),
  /**
* The level of permission to grant the access token for packages published to GitHub Packages.
*/
"packages": S.optionalWith(AppPermissionsPackages, { nullable: true }),
  /**
* The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
*/
"pages": S.optionalWith(AppPermissionsPages, { nullable: true }),
  /**
* The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
*/
"pull_requests": S.optionalWith(AppPermissionsPullRequests, { nullable: true }),
  /**
* The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.
*/
"repository_custom_properties": S.optionalWith(AppPermissionsRepositoryCustomProperties, { nullable: true }),
  /**
* The level of permission to grant the access token to manage the post-receive hooks for a repository.
*/
"repository_hooks": S.optionalWith(AppPermissionsRepositoryHooks, { nullable: true }),
  /**
* The level of permission to grant the access token to manage repository projects, columns, and cards.
*/
"repository_projects": S.optionalWith(AppPermissionsRepositoryProjects, { nullable: true }),
  /**
* The level of permission to grant the access token to view and manage secret scanning alerts.
*/
"secret_scanning_alerts": S.optionalWith(AppPermissionsSecretScanningAlerts, { nullable: true }),
  /**
* The level of permission to grant the access token to manage repository secrets.
*/
"secrets": S.optionalWith(AppPermissionsSecrets, { nullable: true }),
  /**
* The level of permission to grant the access token to view and manage security events like code scanning alerts.
*/
"security_events": S.optionalWith(AppPermissionsSecurityEvents, { nullable: true }),
  /**
* The level of permission to grant the access token to manage just a single file.
*/
"single_file": S.optionalWith(AppPermissionsSingleFile, { nullable: true }),
  /**
* The level of permission to grant the access token for commit statuses.
*/
"statuses": S.optionalWith(AppPermissionsStatuses, { nullable: true }),
  /**
* The level of permission to grant the access token to manage Dependabot alerts.
*/
"vulnerability_alerts": S.optionalWith(AppPermissionsVulnerabilityAlerts, { nullable: true }),
  /**
* The level of permission to grant the access token to update GitHub Actions workflow files.
*/
"workflows": S.optionalWith(AppPermissionsWorkflows, { nullable: true }),
  /**
* The level of permission to grant the access token for organization teams and members.
*/
"members": S.optionalWith(AppPermissionsMembers, { nullable: true }),
  /**
* The level of permission to grant the access token to manage access to an organization.
*/
"organization_administration": S.optionalWith(AppPermissionsOrganizationAdministration, { nullable: true }),
  /**
* The level of permission to grant the access token for custom repository roles management.
*/
"organization_custom_roles": S.optionalWith(AppPermissionsOrganizationCustomRoles, { nullable: true }),
  /**
* The level of permission to grant the access token for custom organization roles management.
*/
"organization_custom_org_roles": S.optionalWith(AppPermissionsOrganizationCustomOrgRoles, { nullable: true }),
  /**
* The level of permission to grant the access token for custom property management.
*/
"organization_custom_properties": S.optionalWith(AppPermissionsOrganizationCustomProperties, { nullable: true }),
  /**
* The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.
*/
"organization_copilot_seat_management": S.optionalWith(AppPermissionsOrganizationCopilotSeatManagement, { nullable: true }),
  /**
* The level of permission to grant the access token to view and manage announcement banners for an organization.
*/
"organization_announcement_banners": S.optionalWith(AppPermissionsOrganizationAnnouncementBanners, { nullable: true }),
  /**
* The level of permission to grant the access token to view events triggered by an activity in an organization.
*/
"organization_events": S.optionalWith(AppPermissionsOrganizationEvents, { nullable: true }),
  /**
* The level of permission to grant the access token to manage the post-receive hooks for an organization.
*/
"organization_hooks": S.optionalWith(AppPermissionsOrganizationHooks, { nullable: true }),
  /**
* The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
*/
"organization_personal_access_tokens": S.optionalWith(AppPermissionsOrganizationPersonalAccessTokens, { nullable: true }),
  /**
* The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
*/
"organization_personal_access_token_requests": S.optionalWith(AppPermissionsOrganizationPersonalAccessTokenRequests, { nullable: true }),
  /**
* The level of permission to grant the access token for viewing an organization's plan.
*/
"organization_plan": S.optionalWith(AppPermissionsOrganizationPlan, { nullable: true }),
  /**
* The level of permission to grant the access token to manage organization projects and projects public preview (where available).
*/
"organization_projects": S.optionalWith(AppPermissionsOrganizationProjects, { nullable: true }),
  /**
* The level of permission to grant the access token for organization packages published to GitHub Packages.
*/
"organization_packages": S.optionalWith(AppPermissionsOrganizationPackages, { nullable: true }),
  /**
* The level of permission to grant the access token to manage organization secrets.
*/
"organization_secrets": S.optionalWith(AppPermissionsOrganizationSecrets, { nullable: true }),
  /**
* The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
*/
"organization_self_hosted_runners": S.optionalWith(AppPermissionsOrganizationSelfHostedRunners, { nullable: true }),
  /**
* The level of permission to grant the access token to view and manage users blocked by the organization.
*/
"organization_user_blocking": S.optionalWith(AppPermissionsOrganizationUserBlocking, { nullable: true }),
  /**
* The level of permission to grant the access token to manage team discussions and related comments.
*/
"team_discussions": S.optionalWith(AppPermissionsTeamDiscussions, { nullable: true }),
  /**
* The level of permission to grant the access token to manage the email addresses belonging to a user.
*/
"email_addresses": S.optionalWith(AppPermissionsEmailAddresses, { nullable: true }),
  /**
* The level of permission to grant the access token to manage the followers belonging to a user.
*/
"followers": S.optionalWith(AppPermissionsFollowers, { nullable: true }),
  /**
* The level of permission to grant the access token to manage git SSH keys.
*/
"git_ssh_keys": S.optionalWith(AppPermissionsGitSshKeys, { nullable: true }),
  /**
* The level of permission to grant the access token to view and manage GPG keys belonging to a user.
*/
"gpg_keys": S.optionalWith(AppPermissionsGpgKeys, { nullable: true }),
  /**
* The level of permission to grant the access token to view and manage interaction limits on a repository.
*/
"interaction_limits": S.optionalWith(AppPermissionsInteractionLimits, { nullable: true }),
  /**
* The level of permission to grant the access token to manage the profile settings belonging to a user.
*/
"profile": S.optionalWith(AppPermissionsProfile, { nullable: true }),
  /**
* The level of permission to grant the access token to list and manage repositories a user is starring.
*/
"starring": S.optionalWith(AppPermissionsStarring, { nullable: true })
}) {}

/**
* A GitHub user.
*/
export class NullableSimpleUser extends S.Class<NullableSimpleUser>("NullableSimpleUser")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "email": S.optionalWith(S.String, { nullable: true }),
  "login": S.String,
  "id": S.Int,
  "node_id": S.String,
  "avatar_url": S.String,
  "gravatar_id": S.NullOr(S.String),
  "url": S.String,
  "html_url": S.String,
  "followers_url": S.String,
  "following_url": S.String,
  "gists_url": S.String,
  "starred_url": S.String,
  "subscriptions_url": S.String,
  "organizations_url": S.String,
  "repos_url": S.String,
  "events_url": S.String,
  "received_events_url": S.String,
  "type": S.String,
  "site_admin": S.Boolean,
  "starred_at": S.optionalWith(S.String, { nullable: true }),
  "user_view_type": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Installation
*/
export class Installation extends S.Class<Installation>("Installation")({
  /**
* The ID of the installation.
*/
"id": S.Int,
  "account": S.NullOr(S.Union(SimpleUser,
Enterprise)),
  /**
* Describe whether all repositories have been selected or there's a selection involved
*/
"repository_selection": InstallationRepositorySelection,
  "access_tokens_url": S.String,
  "repositories_url": S.String,
  "html_url": S.String,
  "app_id": S.Int,
  "client_id": S.optionalWith(S.String, { nullable: true }),
  /**
* The ID of the user or organization this token is being scoped to.
*/
"target_id": S.Int,
  "target_type": S.String,
  "permissions": AppPermissions,
  "events": S.Array(S.String),
  "created_at": S.String,
  "updated_at": S.String,
  "single_file_name": S.NullOr(S.String),
  "has_multiple_single_files": S.optionalWith(S.Boolean, { nullable: true }),
  "single_file_paths": S.optionalWith(S.Array(S.String), { nullable: true }),
  "app_slug": S.String,
  "suspended_by": S.NullOr(NullableSimpleUser),
  "suspended_at": S.NullOr(S.String),
  "contact_email": S.optionalWith(S.String, { nullable: true })
}) {}

export class AppsListInstallations200 extends S.Array(Installation) {}

export class AppsGetInstallationParams extends S.Struct({
  
}) {}

export class AppsDeleteInstallationParams extends S.Struct({
  
}) {}

export class AppsCreateInstallationAccessTokenParams extends S.Struct({
  
}) {}

export class AppsCreateInstallationAccessTokenRequest extends S.Class<AppsCreateInstallationAccessTokenRequest>("AppsCreateInstallationAccessTokenRequest")({
  /**
* List of repository names that the token should have access to
*/
"repositories": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* List of repository IDs that the token should have access to
*/
"repository_ids": S.optionalWith(S.Array(S.Int), { nullable: true }),
  "permissions": S.optionalWith(AppPermissions, { nullable: true })
}) {}

export class InstallationTokenRepositorySelection extends S.Literal("all", "selected") {}

/**
* License Simple
*/
export class NullableLicenseSimple extends S.Class<NullableLicenseSimple>("NullableLicenseSimple")({
  "key": S.String,
  "name": S.String,
  "url": S.NullOr(S.String),
  "spdx_id": S.NullOr(S.String),
  "node_id": S.String,
  "html_url": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
export class RepositorySquashMergeCommitTitle extends S.Literal("PR_TITLE", "COMMIT_OR_PR_TITLE") {}

/**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
export class RepositorySquashMergeCommitMessage extends S.Literal("PR_BODY", "COMMIT_MESSAGES", "BLANK") {}

/**
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
export class RepositoryMergeCommitTitle extends S.Literal("PR_TITLE", "MERGE_MESSAGE") {}

/**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
export class RepositoryMergeCommitMessage extends S.Literal("PR_BODY", "PR_TITLE", "BLANK") {}

/**
* A repository on GitHub.
*/
export class Repository extends S.Class<Repository>("Repository")({
  /**
* Unique identifier of the repository
*/
"id": S.Int,
  "node_id": S.String,
  /**
* The name of the repository.
*/
"name": S.String,
  "full_name": S.String,
  "license": S.NullOr(NullableLicenseSimple),
  "forks": S.Int,
  "permissions": S.optionalWith(S.Struct({
  "admin": S.Boolean,
  "pull": S.Boolean,
  "triage": S.optionalWith(S.Boolean, { nullable: true }),
  "push": S.Boolean,
  "maintain": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  "owner": SimpleUser,
  /**
* Whether the repository is private or public.
*/
"private": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => false as const)),
  "html_url": S.String,
  "description": S.NullOr(S.String),
  "fork": S.Boolean,
  "url": S.String,
  "archive_url": S.String,
  "assignees_url": S.String,
  "blobs_url": S.String,
  "branches_url": S.String,
  "collaborators_url": S.String,
  "comments_url": S.String,
  "commits_url": S.String,
  "compare_url": S.String,
  "contents_url": S.String,
  "contributors_url": S.String,
  "deployments_url": S.String,
  "downloads_url": S.String,
  "events_url": S.String,
  "forks_url": S.String,
  "git_commits_url": S.String,
  "git_refs_url": S.String,
  "git_tags_url": S.String,
  "git_url": S.String,
  "issue_comment_url": S.String,
  "issue_events_url": S.String,
  "issues_url": S.String,
  "keys_url": S.String,
  "labels_url": S.String,
  "languages_url": S.String,
  "merges_url": S.String,
  "milestones_url": S.String,
  "notifications_url": S.String,
  "pulls_url": S.String,
  "releases_url": S.String,
  "ssh_url": S.String,
  "stargazers_url": S.String,
  "statuses_url": S.String,
  "subscribers_url": S.String,
  "subscription_url": S.String,
  "tags_url": S.String,
  "teams_url": S.String,
  "trees_url": S.String,
  "clone_url": S.String,
  "mirror_url": S.NullOr(S.String),
  "hooks_url": S.String,
  "svn_url": S.String,
  "homepage": S.NullOr(S.String),
  "language": S.NullOr(S.String),
  "forks_count": S.Int,
  "stargazers_count": S.Int,
  "watchers_count": S.Int,
  /**
* The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
*/
"size": S.Int,
  /**
* The default branch of the repository.
*/
"default_branch": S.String,
  "open_issues_count": S.Int,
  /**
* Whether this repository acts as a template that can be used to generate new repositories.
*/
"is_template": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "topics": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* Whether issues are enabled.
*/
"has_issues": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => true as const)),
  /**
* Whether projects are enabled.
*/
"has_projects": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => true as const)),
  /**
* Whether the wiki is enabled.
*/
"has_wiki": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => true as const)),
  "has_pages": S.Boolean,
  /**
* Whether downloads are enabled.
*/
"has_downloads": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => true as const)),
  /**
* Whether discussions are enabled.
*/
"has_discussions": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Whether the repository is archived.
*/
"archived": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => false as const)),
  /**
* Returns whether or not this repository disabled.
*/
"disabled": S.Boolean,
  /**
* The repository visibility: public, private, or internal.
*/
"visibility": S.optionalWith(S.String, { nullable: true, default: () => "public" as const }),
  "pushed_at": S.NullOr(S.String),
  "created_at": S.NullOr(S.String),
  "updated_at": S.NullOr(S.String),
  /**
* Whether to allow rebase merges for pull requests.
*/
"allow_rebase_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "temp_clone_token": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether to allow squash merges for pull requests.
*/
"allow_squash_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Whether to allow Auto-merge to be used on pull requests.
*/
"allow_auto_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Whether to delete head branches when pull requests are merged
*/
"delete_branch_on_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
*/
"allow_update_branch": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
*/
"use_squash_pr_title_as_default": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
"squash_merge_commit_title": S.optionalWith(RepositorySquashMergeCommitTitle, { nullable: true }),
  /**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
"squash_merge_commit_message": S.optionalWith(RepositorySquashMergeCommitMessage, { nullable: true }),
  /**
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
"merge_commit_title": S.optionalWith(RepositoryMergeCommitTitle, { nullable: true }),
  /**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
"merge_commit_message": S.optionalWith(RepositoryMergeCommitMessage, { nullable: true }),
  /**
* Whether to allow merge commits for pull requests.
*/
"allow_merge_commit": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Whether to allow forking this repo
*/
"allow_forking": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Whether to require contributors to sign off on web-based commits
*/
"web_commit_signoff_required": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "open_issues": S.Int,
  "watchers": S.Int,
  "master_branch": S.optionalWith(S.String, { nullable: true }),
  "starred_at": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether anonymous git access is enabled for this repository
*/
"anonymous_access_enabled": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The status of the code search index for this repository
*/
"code_search_index_status": S.optionalWith(S.Struct({
  "lexical_search_ok": S.optionalWith(S.Boolean, { nullable: true }),
  "lexical_commit_sha": S.optionalWith(S.String, { nullable: true })
}), { nullable: true })
}) {}

/**
* Authentication token for a GitHub App installed on a user or org.
*/
export class InstallationToken extends S.Class<InstallationToken>("InstallationToken")({
  "token": S.String,
  "expires_at": S.String,
  "permissions": S.optionalWith(AppPermissions, { nullable: true }),
  "repository_selection": S.optionalWith(InstallationTokenRepositorySelection, { nullable: true }),
  "repositories": S.optionalWith(S.Array(Repository), { nullable: true }),
  "single_file": S.optionalWith(S.String, { nullable: true }),
  "has_multiple_single_files": S.optionalWith(S.Boolean, { nullable: true }),
  "single_file_paths": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class AppsSuspendInstallationParams extends S.Struct({
  
}) {}

export class AppsUnsuspendInstallationParams extends S.Struct({
  
}) {}

export class AppsDeleteAuthorizationParams extends S.Struct({
  
}) {}

export class AppsDeleteAuthorizationRequest extends S.Class<AppsDeleteAuthorizationRequest>("AppsDeleteAuthorizationRequest")({
  /**
* The OAuth access token used to authenticate to the GitHub API.
*/
"access_token": S.String
}) {}

export class AppsCheckTokenParams extends S.Struct({
  
}) {}

export class AppsCheckTokenRequest extends S.Class<AppsCheckTokenRequest>("AppsCheckTokenRequest")({
  /**
* The access_token of the OAuth or GitHub application.
*/
"access_token": S.String
}) {}

/**
* Describe whether all repositories have been selected or there's a selection involved
*/
export class NullableScopedInstallationRepositorySelection extends S.Literal("all", "selected") {}

export class NullableScopedInstallation extends S.Class<NullableScopedInstallation>("NullableScopedInstallation")({
  "permissions": AppPermissions,
  /**
* Describe whether all repositories have been selected or there's a selection involved
*/
"repository_selection": NullableScopedInstallationRepositorySelection,
  "single_file_name": S.NullOr(S.String),
  "has_multiple_single_files": S.optionalWith(S.Boolean, { nullable: true }),
  "single_file_paths": S.optionalWith(S.Array(S.String), { nullable: true }),
  "repositories_url": S.String,
  "account": SimpleUser
}) {}

/**
* The authorization for an OAuth app, GitHub App, or a Personal Access Token.
*/
export class Authorization extends S.Class<Authorization>("Authorization")({
  "id": S.Int,
  "url": S.String,
  /**
* A list of scopes that this authorization is in.
*/
"scopes": S.NullOr(S.Array(S.String)),
  "token": S.String,
  "token_last_eight": S.NullOr(S.String),
  "hashed_token": S.NullOr(S.String),
  "app": S.Struct({
  "client_id": S.String,
  "name": S.String,
  "url": S.String
}),
  "note": S.NullOr(S.String),
  "note_url": S.NullOr(S.String),
  "updated_at": S.String,
  "created_at": S.String,
  "fingerprint": S.NullOr(S.String),
  "user": S.optionalWith(NullableSimpleUser, { nullable: true }),
  "installation": S.optionalWith(NullableScopedInstallation, { nullable: true }),
  "expires_at": S.NullOr(S.String)
}) {}

export class AppsDeleteTokenParams extends S.Struct({
  
}) {}

export class AppsDeleteTokenRequest extends S.Class<AppsDeleteTokenRequest>("AppsDeleteTokenRequest")({
  /**
* The OAuth access token used to authenticate to the GitHub API.
*/
"access_token": S.String
}) {}

export class AppsResetTokenParams extends S.Struct({
  
}) {}

export class AppsResetTokenRequest extends S.Class<AppsResetTokenRequest>("AppsResetTokenRequest")({
  /**
* The access_token of the OAuth or GitHub application.
*/
"access_token": S.String
}) {}

export class AppsScopeTokenParams extends S.Struct({
  
}) {}

export class AppsScopeTokenRequest extends S.Class<AppsScopeTokenRequest>("AppsScopeTokenRequest")({
  /**
* The access token used to authenticate to the GitHub API.
*/
"access_token": S.String,
  /**
* The name of the user or organization to scope the user access token to. **Required** unless `target_id` is specified.
*/
"target": S.optionalWith(S.String, { nullable: true }),
  /**
* The ID of the user or organization to scope the user access token to. **Required** unless `target` is specified.
*/
"target_id": S.optionalWith(S.Int, { nullable: true }),
  /**
* The list of repository names to scope the user access token to. `repositories` may not be specified if `repository_ids` is specified.
*/
"repositories": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* The list of repository IDs to scope the user access token to. `repository_ids` may not be specified if `repositories` is specified.
*/
"repository_ids": S.optionalWith(S.Array(S.Int), { nullable: true }),
  "permissions": S.optionalWith(AppPermissions, { nullable: true })
}) {}

export class AppsGetBySlugParams extends S.Struct({
  
}) {}

export class ClassroomGetAnAssignmentParams extends S.Struct({
  
}) {}

/**
* Whether it's a group assignment or individual assignment.
*/
export class ClassroomAssignmentType extends S.Literal("individual", "group") {}

/**
* A GitHub repository view for Classroom
*/
export class SimpleClassroomRepository extends S.Class<SimpleClassroomRepository>("SimpleClassroomRepository")({
  /**
* A unique identifier of the repository.
*/
"id": S.Int,
  /**
* The full, globally unique name of the repository.
*/
"full_name": S.String,
  /**
* The URL to view the repository on GitHub.com.
*/
"html_url": S.String,
  /**
* The GraphQL identifier of the repository.
*/
"node_id": S.String,
  /**
* Whether the repository is private.
*/
"private": S.Boolean,
  /**
* The default branch for the repository.
*/
"default_branch": S.String
}) {}

/**
* A GitHub organization.
*/
export class SimpleClassroomOrganization extends S.Class<SimpleClassroomOrganization>("SimpleClassroomOrganization")({
  "id": S.Int,
  "login": S.String,
  "node_id": S.String,
  "html_url": S.String,
  "name": S.NullOr(S.String),
  "avatar_url": S.String
}) {}

/**
* A GitHub Classroom classroom
*/
export class Classroom extends S.Class<Classroom>("Classroom")({
  /**
* Unique identifier of the classroom.
*/
"id": S.Int,
  /**
* The name of the classroom.
*/
"name": S.String,
  /**
* Whether classroom is archived.
*/
"archived": S.Boolean,
  "organization": SimpleClassroomOrganization,
  /**
* The URL of the classroom on GitHub Classroom.
*/
"url": S.String
}) {}

/**
* A GitHub Classroom assignment
*/
export class ClassroomAssignment extends S.Class<ClassroomAssignment>("ClassroomAssignment")({
  /**
* Unique identifier of the repository.
*/
"id": S.Int,
  /**
* Whether an accepted assignment creates a public repository.
*/
"public_repo": S.Boolean,
  /**
* Assignment title.
*/
"title": S.String,
  /**
* Whether it's a group assignment or individual assignment.
*/
"type": ClassroomAssignmentType,
  /**
* The link that a student can use to accept the assignment.
*/
"invite_link": S.String,
  /**
* Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment.
*/
"invitations_enabled": S.Boolean,
  /**
* Sluggified name of the assignment.
*/
"slug": S.String,
  /**
* Whether students are admins on created repository when a student accepts the assignment.
*/
"students_are_repo_admins": S.Boolean,
  /**
* Whether feedback pull request will be created when a student accepts the assignment.
*/
"feedback_pull_requests_enabled": S.Boolean,
  /**
* The maximum allowable teams for the assignment.
*/
"max_teams": S.NullOr(S.Int),
  /**
* The maximum allowable members per team.
*/
"max_members": S.NullOr(S.Int),
  /**
* The selected editor for the assignment.
*/
"editor": S.String,
  /**
* The number of students that have accepted the assignment.
*/
"accepted": S.Int,
  /**
* The number of students that have submitted the assignment.
*/
"submitted": S.Int,
  /**
* The number of students that have passed the assignment.
*/
"passing": S.Int,
  /**
* The programming language used in the assignment.
*/
"language": S.String,
  /**
* The time at which the assignment is due.
*/
"deadline": S.NullOr(S.String),
  "starter_code_repository": SimpleClassroomRepository,
  "classroom": Classroom
}) {}

export class ClassroomListAcceptedAssignmentsForAnAssignmentParams extends S.Struct({
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

/**
* A GitHub user simplified for Classroom.
*/
export class SimpleClassroomUser extends S.Class<SimpleClassroomUser>("SimpleClassroomUser")({
  "id": S.Int,
  "login": S.String,
  "avatar_url": S.String,
  "html_url": S.String
}) {}

/**
* Whether it's a Group Assignment or Individual Assignment.
*/
export class SimpleClassroomAssignmentType extends S.Literal("individual", "group") {}

/**
* A GitHub Classroom classroom
*/
export class SimpleClassroom extends S.Class<SimpleClassroom>("SimpleClassroom")({
  /**
* Unique identifier of the classroom.
*/
"id": S.Int,
  /**
* The name of the classroom.
*/
"name": S.String,
  /**
* Returns whether classroom is archived or not.
*/
"archived": S.Boolean,
  /**
* The url of the classroom on GitHub Classroom.
*/
"url": S.String
}) {}

/**
* A GitHub Classroom assignment
*/
export class SimpleClassroomAssignment extends S.Class<SimpleClassroomAssignment>("SimpleClassroomAssignment")({
  /**
* Unique identifier of the repository.
*/
"id": S.Int,
  /**
* Whether an accepted assignment creates a public repository.
*/
"public_repo": S.Boolean,
  /**
* Assignment title.
*/
"title": S.String,
  /**
* Whether it's a Group Assignment or Individual Assignment.
*/
"type": SimpleClassroomAssignmentType,
  /**
* The link that a student can use to accept the assignment.
*/
"invite_link": S.String,
  /**
* Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment.
*/
"invitations_enabled": S.Boolean,
  /**
* Sluggified name of the assignment.
*/
"slug": S.String,
  /**
* Whether students are admins on created repository on accepted assignment.
*/
"students_are_repo_admins": S.Boolean,
  /**
* Whether feedback pull request will be created on assignment acceptance.
*/
"feedback_pull_requests_enabled": S.Boolean,
  /**
* The maximum allowable teams for the assignment.
*/
"max_teams": S.optionalWith(S.Int, { nullable: true }),
  /**
* The maximum allowable members per team.
*/
"max_members": S.optionalWith(S.Int, { nullable: true }),
  /**
* The selected editor for the assignment.
*/
"editor": S.String,
  /**
* The number of students that have accepted the assignment.
*/
"accepted": S.Int,
  /**
* The number of students that have submitted the assignment.
*/
"submitted": S.Int,
  /**
* The number of students that have passed the assignment.
*/
"passing": S.Int,
  /**
* The programming language used in the assignment.
*/
"language": S.String,
  /**
* The time at which the assignment is due.
*/
"deadline": S.NullOr(S.String),
  "classroom": SimpleClassroom
}) {}

/**
* A GitHub Classroom accepted assignment
*/
export class ClassroomAcceptedAssignment extends S.Class<ClassroomAcceptedAssignment>("ClassroomAcceptedAssignment")({
  /**
* Unique identifier of the repository.
*/
"id": S.Int,
  /**
* Whether an accepted assignment has been submitted.
*/
"submitted": S.Boolean,
  /**
* Whether a submission passed.
*/
"passing": S.Boolean,
  /**
* Count of student commits.
*/
"commit_count": S.Int,
  /**
* Most recent grade.
*/
"grade": S.String,
  "students": S.Array(SimpleClassroomUser),
  "repository": SimpleClassroomRepository,
  "assignment": SimpleClassroomAssignment
}) {}

export class ClassroomListAcceptedAssignmentsForAnAssignment200 extends S.Array(ClassroomAcceptedAssignment) {}

export class ClassroomGetAssignmentGradesParams extends S.Struct({
  
}) {}

/**
* Grade for a student or groups GitHub Classroom assignment
*/
export class ClassroomAssignmentGrade extends S.Class<ClassroomAssignmentGrade>("ClassroomAssignmentGrade")({
  /**
* Name of the assignment
*/
"assignment_name": S.String,
  /**
* URL of the assignment
*/
"assignment_url": S.String,
  /**
* URL of the starter code for the assignment
*/
"starter_code_url": S.String,
  /**
* GitHub username of the student
*/
"github_username": S.String,
  /**
* Roster identifier of the student
*/
"roster_identifier": S.String,
  /**
* Name of the student's assignment repository
*/
"student_repository_name": S.String,
  /**
* URL of the student's assignment repository
*/
"student_repository_url": S.String,
  /**
* Timestamp of the student's assignment submission
*/
"submission_timestamp": S.String,
  /**
* Number of points awarded to the student
*/
"points_awarded": S.Int,
  /**
* Number of points available for the assignment
*/
"points_available": S.Int,
  /**
* If a group assignment, name of the group the student is in
*/
"group_name": S.optionalWith(S.String, { nullable: true })
}) {}

export class ClassroomGetAssignmentGrades200 extends S.Array(ClassroomAssignmentGrade) {}

export class ClassroomListClassroomsParams extends S.Struct({
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

export class ClassroomListClassrooms200 extends S.Array(SimpleClassroom) {}

export class ClassroomGetAClassroomParams extends S.Struct({
  
}) {}

export class ClassroomListAssignmentsForAClassroomParams extends S.Struct({
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

export class ClassroomListAssignmentsForAClassroom200 extends S.Array(SimpleClassroomAssignment) {}

/**
* Code Of Conduct
*/
export class CodeOfConduct extends S.Class<CodeOfConduct>("CodeOfConduct")({
  "key": S.String,
  "name": S.String,
  "url": S.String,
  "body": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.NullOr(S.String)
}) {}

export class CodesOfConductGetAllCodesOfConduct200 extends S.Array(CodeOfConduct) {}

export class CredentialsRevokeRequest extends S.Class<CredentialsRevokeRequest>("CredentialsRevokeRequest")({
  /**
* A list of credentials to be revoked, up to 1000 per request.
*/
"credentials": S.NonEmptyArray(S.String).pipe(S.minItems(1), S.maxItems(1000))
}) {}

export class CredentialsRevoke202 extends S.Record({ key: S.String, value: S.Unknown }) {}

export class EmojisGet200 extends S.Record({ key: S.String, value: S.Unknown }) {}

export class CodeSecurityGetConfigurationsForEnterpriseParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The type of the code security configuration.
*/
export class CodeSecurityConfigurationTargetType extends S.Literal("global", "organization", "enterprise") {}

/**
* The enablement status of GitHub Advanced Security
*/
export class CodeSecurityConfigurationAdvancedSecurity extends S.Literal("enabled", "disabled", "code_security", "secret_protection") {}

/**
* The enablement status of Dependency Graph
*/
export class CodeSecurityConfigurationDependencyGraph extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Automatic dependency submission
*/
export class CodeSecurityConfigurationDependencyGraphAutosubmitAction extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Dependabot alerts
*/
export class CodeSecurityConfigurationDependabotAlerts extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Dependabot security updates
*/
export class CodeSecurityConfigurationDependabotSecurityUpdates extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of code scanning default setup
*/
export class CodeSecurityConfigurationCodeScanningDefaultSetup extends S.Literal("enabled", "disabled", "not_set") {}

/**
* Whether to use labeled runners or standard GitHub runners.
*/
export class CodeSecurityConfigurationCodeScanningDefaultSetupOptionsRunnerType extends S.Literal("standard", "labeled", "not_set") {}

/**
* The enablement status of code scanning delegated alert dismissal
*/
export class CodeSecurityConfigurationCodeScanningDelegatedAlertDismissal extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning
*/
export class CodeSecurityConfigurationSecretScanning extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning push protection
*/
export class CodeSecurityConfigurationSecretScanningPushProtection extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning delegated bypass
*/
export class CodeSecurityConfigurationSecretScanningDelegatedBypass extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning validity checks
*/
export class CodeSecurityConfigurationSecretScanningValidityChecks extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning non-provider patterns
*/
export class CodeSecurityConfigurationSecretScanningNonProviderPatterns extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Copilot secret scanning
*/
export class CodeSecurityConfigurationSecretScanningGenericSecrets extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning delegated alert dismissal
*/
export class CodeSecurityConfigurationSecretScanningDelegatedAlertDismissal extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of private vulnerability reporting
*/
export class CodeSecurityConfigurationPrivateVulnerabilityReporting extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enforcement status for a security configuration
*/
export class CodeSecurityConfigurationEnforcement extends S.Literal("enforced", "unenforced") {}

/**
* A code security configuration
*/
export class CodeSecurityConfiguration extends S.Class<CodeSecurityConfiguration>("CodeSecurityConfiguration")({
  /**
* The ID of the code security configuration
*/
"id": S.optionalWith(S.Int, { nullable: true }),
  /**
* The name of the code security configuration. Must be unique within the organization.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of the code security configuration.
*/
"target_type": S.optionalWith(CodeSecurityConfigurationTargetType, { nullable: true }),
  /**
* A description of the code security configuration
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* The enablement status of GitHub Advanced Security
*/
"advanced_security": S.optionalWith(CodeSecurityConfigurationAdvancedSecurity, { nullable: true }),
  /**
* The enablement status of Dependency Graph
*/
"dependency_graph": S.optionalWith(CodeSecurityConfigurationDependencyGraph, { nullable: true }),
  /**
* The enablement status of Automatic dependency submission
*/
"dependency_graph_autosubmit_action": S.optionalWith(CodeSecurityConfigurationDependencyGraphAutosubmitAction, { nullable: true }),
  /**
* Feature options for Automatic dependency submission
*/
"dependency_graph_autosubmit_action_options": S.optionalWith(S.Struct({
  /**
* Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.
*/
"labeled_runners": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  /**
* The enablement status of Dependabot alerts
*/
"dependabot_alerts": S.optionalWith(CodeSecurityConfigurationDependabotAlerts, { nullable: true }),
  /**
* The enablement status of Dependabot security updates
*/
"dependabot_security_updates": S.optionalWith(CodeSecurityConfigurationDependabotSecurityUpdates, { nullable: true }),
  /**
* Feature options for code scanning
*/
"code_scanning_options": S.optionalWith(S.Struct({
  /**
* Whether to allow repos which use advanced setup
*/
"allow_advanced": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  /**
* The enablement status of code scanning default setup
*/
"code_scanning_default_setup": S.optionalWith(CodeSecurityConfigurationCodeScanningDefaultSetup, { nullable: true }),
  /**
* Feature options for code scanning default setup
*/
"code_scanning_default_setup_options": S.optionalWith(S.Struct({
  /**
* Whether to use labeled runners or standard GitHub runners.
*/
"runner_type": S.optionalWith(CodeSecurityConfigurationCodeScanningDefaultSetupOptionsRunnerType, { nullable: true }),
  /**
* The label of the runner to use for code scanning when runner_type is 'labeled'.
*/
"runner_label": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  /**
* The enablement status of code scanning delegated alert dismissal
*/
"code_scanning_delegated_alert_dismissal": S.optionalWith(CodeSecurityConfigurationCodeScanningDelegatedAlertDismissal, { nullable: true }),
  /**
* The enablement status of secret scanning
*/
"secret_scanning": S.optionalWith(CodeSecurityConfigurationSecretScanning, { nullable: true }),
  /**
* The enablement status of secret scanning push protection
*/
"secret_scanning_push_protection": S.optionalWith(CodeSecurityConfigurationSecretScanningPushProtection, { nullable: true }),
  /**
* The enablement status of secret scanning delegated bypass
*/
"secret_scanning_delegated_bypass": S.optionalWith(CodeSecurityConfigurationSecretScanningDelegatedBypass, { nullable: true }),
  /**
* Feature options for secret scanning delegated bypass
*/
"secret_scanning_delegated_bypass_options": S.optionalWith(S.Struct({
  /**
* The bypass reviewers for secret scanning delegated bypass
*/
"reviewers": S.optionalWith(S.Array(S.Struct({
  /**
* The ID of the team or role selected as a bypass reviewer
*/
"reviewer_id": S.Int,
  /**
* The type of the bypass reviewer
*/
"reviewer_type": S.Literal("TEAM", "ROLE")
})), { nullable: true })
}), { nullable: true }),
  /**
* The enablement status of secret scanning validity checks
*/
"secret_scanning_validity_checks": S.optionalWith(CodeSecurityConfigurationSecretScanningValidityChecks, { nullable: true }),
  /**
* The enablement status of secret scanning non-provider patterns
*/
"secret_scanning_non_provider_patterns": S.optionalWith(CodeSecurityConfigurationSecretScanningNonProviderPatterns, { nullable: true }),
  /**
* The enablement status of Copilot secret scanning
*/
"secret_scanning_generic_secrets": S.optionalWith(CodeSecurityConfigurationSecretScanningGenericSecrets, { nullable: true }),
  /**
* The enablement status of secret scanning delegated alert dismissal
*/
"secret_scanning_delegated_alert_dismissal": S.optionalWith(CodeSecurityConfigurationSecretScanningDelegatedAlertDismissal, { nullable: true }),
  /**
* The enablement status of private vulnerability reporting
*/
"private_vulnerability_reporting": S.optionalWith(CodeSecurityConfigurationPrivateVulnerabilityReporting, { nullable: true }),
  /**
* The enforcement status for a security configuration
*/
"enforcement": S.optionalWith(CodeSecurityConfigurationEnforcement, { nullable: true }),
  /**
* The URL of the configuration
*/
"url": S.optionalWith(S.String, { nullable: true }),
  /**
* The URL of the configuration
*/
"html_url": S.optionalWith(S.String, { nullable: true }),
  "created_at": S.optionalWith(S.String, { nullable: true }),
  "updated_at": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeSecurityGetConfigurationsForEnterprise200 extends S.Array(CodeSecurityConfiguration) {}

export class CodeSecurityCreateConfigurationForEnterpriseParams extends S.Struct({
  
}) {}

/**
* The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
* 
* > [!WARNING]
* > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
*/
export class CodeSecurityCreateConfigurationForEnterpriseRequestAdvancedSecurity extends S.Literal("enabled", "disabled", "code_security", "secret_protection") {}

/**
* The enablement status of GitHub Code Security features.
*/
export class CodeSecurityCreateConfigurationForEnterpriseRequestCodeSecurity extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Dependency Graph
*/
export class CodeSecurityCreateConfigurationForEnterpriseRequestDependencyGraph extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Automatic dependency submission
*/
export class CodeSecurityCreateConfigurationForEnterpriseRequestDependencyGraphAutosubmitAction extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Dependabot alerts
*/
export class CodeSecurityCreateConfigurationForEnterpriseRequestDependabotAlerts extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Dependabot security updates
*/
export class CodeSecurityCreateConfigurationForEnterpriseRequestDependabotSecurityUpdates extends S.Literal("enabled", "disabled", "not_set") {}

/**
* Security Configuration feature options for code scanning
*/
export class CodeScanningOptions extends S.Class<CodeScanningOptions>("CodeScanningOptions")({
  /**
* Whether to allow repos which use advanced setup
*/
"allow_advanced": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* The enablement status of code scanning default setup
*/
export class CodeSecurityCreateConfigurationForEnterpriseRequestCodeScanningDefaultSetup extends S.Literal("enabled", "disabled", "not_set") {}

/**
* Whether to use labeled runners or standard GitHub runners.
*/
export class CodeScanningDefaultSetupOptionsRunnerType extends S.Literal("standard", "labeled", "not_set") {}

/**
* Feature options for code scanning default setup
*/
export class CodeScanningDefaultSetupOptions extends S.Class<CodeScanningDefaultSetupOptions>("CodeScanningDefaultSetupOptions")({
  /**
* Whether to use labeled runners or standard GitHub runners.
*/
"runner_type": S.optionalWith(CodeScanningDefaultSetupOptionsRunnerType, { nullable: true }),
  /**
* The label of the runner to use for code scanning default setup when runner_type is 'labeled'.
*/
"runner_label": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The enablement status of code scanning delegated alert dismissal
*/
export class CodeSecurityCreateConfigurationForEnterpriseRequestCodeScanningDelegatedAlertDismissal extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of GitHub Secret Protection features.
*/
export class CodeSecurityCreateConfigurationForEnterpriseRequestSecretProtection extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning
*/
export class CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanning extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning push protection
*/
export class CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningPushProtection extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning validity checks
*/
export class CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningValidityChecks extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning non provider patterns
*/
export class CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningNonProviderPatterns extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Copilot secret scanning
*/
export class CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningGenericSecrets extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning delegated alert dismissal
*/
export class CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningDelegatedAlertDismissal extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of private vulnerability reporting
*/
export class CodeSecurityCreateConfigurationForEnterpriseRequestPrivateVulnerabilityReporting extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enforcement status for a security configuration
*/
export class CodeSecurityCreateConfigurationForEnterpriseRequestEnforcement extends S.Literal("enforced", "unenforced") {}

export class CodeSecurityCreateConfigurationForEnterpriseRequest extends S.Class<CodeSecurityCreateConfigurationForEnterpriseRequest>("CodeSecurityCreateConfigurationForEnterpriseRequest")({
  /**
* The name of the code security configuration. Must be unique within the enterprise.
*/
"name": S.String,
  /**
* A description of the code security configuration
*/
"description": S.String.pipe(S.maxLength(255)),
  /**
* The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
* 
* > [!WARNING]
* > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
*/
"advanced_security": S.optionalWith(CodeSecurityCreateConfigurationForEnterpriseRequestAdvancedSecurity, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of GitHub Code Security features.
*/
"code_security": S.optionalWith(CodeSecurityCreateConfigurationForEnterpriseRequestCodeSecurity, { nullable: true }),
  /**
* The enablement status of Dependency Graph
*/
"dependency_graph": S.optionalWith(CodeSecurityCreateConfigurationForEnterpriseRequestDependencyGraph, { nullable: true, default: () => "enabled" as const }),
  /**
* The enablement status of Automatic dependency submission
*/
"dependency_graph_autosubmit_action": S.optionalWith(CodeSecurityCreateConfigurationForEnterpriseRequestDependencyGraphAutosubmitAction, { nullable: true, default: () => "disabled" as const }),
  /**
* Feature options for Automatic dependency submission
*/
"dependency_graph_autosubmit_action_options": S.optionalWith(S.Struct({
  /**
* Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.
*/
"labeled_runners": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}), { nullable: true }),
  /**
* The enablement status of Dependabot alerts
*/
"dependabot_alerts": S.optionalWith(CodeSecurityCreateConfigurationForEnterpriseRequestDependabotAlerts, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of Dependabot security updates
*/
"dependabot_security_updates": S.optionalWith(CodeSecurityCreateConfigurationForEnterpriseRequestDependabotSecurityUpdates, { nullable: true, default: () => "disabled" as const }),
  "code_scanning_options": S.optionalWith(CodeScanningOptions, { nullable: true }),
  /**
* The enablement status of code scanning default setup
*/
"code_scanning_default_setup": S.optionalWith(CodeSecurityCreateConfigurationForEnterpriseRequestCodeScanningDefaultSetup, { nullable: true, default: () => "disabled" as const }),
  "code_scanning_default_setup_options": S.optionalWith(CodeScanningDefaultSetupOptions, { nullable: true }),
  /**
* The enablement status of code scanning delegated alert dismissal
*/
"code_scanning_delegated_alert_dismissal": S.optionalWith(CodeSecurityCreateConfigurationForEnterpriseRequestCodeScanningDelegatedAlertDismissal, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of GitHub Secret Protection features.
*/
"secret_protection": S.optionalWith(CodeSecurityCreateConfigurationForEnterpriseRequestSecretProtection, { nullable: true }),
  /**
* The enablement status of secret scanning
*/
"secret_scanning": S.optionalWith(CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanning, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of secret scanning push protection
*/
"secret_scanning_push_protection": S.optionalWith(CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningPushProtection, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of secret scanning validity checks
*/
"secret_scanning_validity_checks": S.optionalWith(CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningValidityChecks, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of secret scanning non provider patterns
*/
"secret_scanning_non_provider_patterns": S.optionalWith(CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningNonProviderPatterns, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of Copilot secret scanning
*/
"secret_scanning_generic_secrets": S.optionalWith(CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningGenericSecrets, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of secret scanning delegated alert dismissal
*/
"secret_scanning_delegated_alert_dismissal": S.optionalWith(CodeSecurityCreateConfigurationForEnterpriseRequestSecretScanningDelegatedAlertDismissal, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of private vulnerability reporting
*/
"private_vulnerability_reporting": S.optionalWith(CodeSecurityCreateConfigurationForEnterpriseRequestPrivateVulnerabilityReporting, { nullable: true, default: () => "disabled" as const }),
  /**
* The enforcement status for a security configuration
*/
"enforcement": S.optionalWith(CodeSecurityCreateConfigurationForEnterpriseRequestEnforcement, { nullable: true, default: () => "enforced" as const })
}) {}

export class CodeSecurityGetDefaultConfigurationsForEnterpriseParams extends S.Struct({
  
}) {}

/**
* A list of default code security configurations
*/
export class CodeSecurityDefaultConfigurations extends S.Array(S.Struct({
  /**
* The visibility of newly created repositories for which the code security configuration will be applied to by default
*/
"default_for_new_repos": S.optionalWith(S.Literal("public", "private_and_internal", "all"), { nullable: true }),
  "configuration": S.optionalWith(CodeSecurityConfiguration, { nullable: true })
})) {}

export class CodeSecurityGetSingleConfigurationForEnterpriseParams extends S.Struct({
  
}) {}

export class CodeSecurityDeleteConfigurationForEnterpriseParams extends S.Struct({
  
}) {}

export class CodeSecurityUpdateEnterpriseConfigurationParams extends S.Struct({
  
}) {}

/**
* The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
* 
* > [!WARNING]
* > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
*/
export class CodeSecurityUpdateEnterpriseConfigurationRequestAdvancedSecurity extends S.Literal("enabled", "disabled", "code_security", "secret_protection") {}

/**
* The enablement status of GitHub Code Security features.
*/
export class CodeSecurityUpdateEnterpriseConfigurationRequestCodeSecurity extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Dependency Graph
*/
export class CodeSecurityUpdateEnterpriseConfigurationRequestDependencyGraph extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Automatic dependency submission
*/
export class CodeSecurityUpdateEnterpriseConfigurationRequestDependencyGraphAutosubmitAction extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Dependabot alerts
*/
export class CodeSecurityUpdateEnterpriseConfigurationRequestDependabotAlerts extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Dependabot security updates
*/
export class CodeSecurityUpdateEnterpriseConfigurationRequestDependabotSecurityUpdates extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of code scanning default setup
*/
export class CodeSecurityUpdateEnterpriseConfigurationRequestCodeScanningDefaultSetup extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of code scanning delegated alert dismissal
*/
export class CodeSecurityUpdateEnterpriseConfigurationRequestCodeScanningDelegatedAlertDismissal extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of GitHub Secret Protection features.
*/
export class CodeSecurityUpdateEnterpriseConfigurationRequestSecretProtection extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning
*/
export class CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanning extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning push protection
*/
export class CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningPushProtection extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning validity checks
*/
export class CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningValidityChecks extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning non-provider patterns
*/
export class CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningNonProviderPatterns extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Copilot secret scanning
*/
export class CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningGenericSecrets extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning delegated alert dismissal
*/
export class CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningDelegatedAlertDismissal extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of private vulnerability reporting
*/
export class CodeSecurityUpdateEnterpriseConfigurationRequestPrivateVulnerabilityReporting extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enforcement status for a security configuration
*/
export class CodeSecurityUpdateEnterpriseConfigurationRequestEnforcement extends S.Literal("enforced", "unenforced") {}

export class CodeSecurityUpdateEnterpriseConfigurationRequest extends S.Class<CodeSecurityUpdateEnterpriseConfigurationRequest>("CodeSecurityUpdateEnterpriseConfigurationRequest")({
  /**
* The name of the code security configuration. Must be unique across the enterprise.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* A description of the code security configuration
*/
"description": S.optionalWith(S.String.pipe(S.maxLength(255)), { nullable: true }),
  /**
* The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
* 
* > [!WARNING]
* > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
*/
"advanced_security": S.optionalWith(CodeSecurityUpdateEnterpriseConfigurationRequestAdvancedSecurity, { nullable: true }),
  /**
* The enablement status of GitHub Code Security features.
*/
"code_security": S.optionalWith(CodeSecurityUpdateEnterpriseConfigurationRequestCodeSecurity, { nullable: true }),
  /**
* The enablement status of Dependency Graph
*/
"dependency_graph": S.optionalWith(CodeSecurityUpdateEnterpriseConfigurationRequestDependencyGraph, { nullable: true }),
  /**
* The enablement status of Automatic dependency submission
*/
"dependency_graph_autosubmit_action": S.optionalWith(CodeSecurityUpdateEnterpriseConfigurationRequestDependencyGraphAutosubmitAction, { nullable: true }),
  /**
* Feature options for Automatic dependency submission
*/
"dependency_graph_autosubmit_action_options": S.optionalWith(S.Struct({
  /**
* Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.
*/
"labeled_runners": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  /**
* The enablement status of Dependabot alerts
*/
"dependabot_alerts": S.optionalWith(CodeSecurityUpdateEnterpriseConfigurationRequestDependabotAlerts, { nullable: true }),
  /**
* The enablement status of Dependabot security updates
*/
"dependabot_security_updates": S.optionalWith(CodeSecurityUpdateEnterpriseConfigurationRequestDependabotSecurityUpdates, { nullable: true }),
  /**
* The enablement status of code scanning default setup
*/
"code_scanning_default_setup": S.optionalWith(CodeSecurityUpdateEnterpriseConfigurationRequestCodeScanningDefaultSetup, { nullable: true }),
  "code_scanning_default_setup_options": S.optionalWith(CodeScanningDefaultSetupOptions, { nullable: true }),
  /**
* The enablement status of code scanning delegated alert dismissal
*/
"code_scanning_delegated_alert_dismissal": S.optionalWith(CodeSecurityUpdateEnterpriseConfigurationRequestCodeScanningDelegatedAlertDismissal, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of GitHub Secret Protection features.
*/
"secret_protection": S.optionalWith(CodeSecurityUpdateEnterpriseConfigurationRequestSecretProtection, { nullable: true }),
  /**
* The enablement status of secret scanning
*/
"secret_scanning": S.optionalWith(CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanning, { nullable: true }),
  /**
* The enablement status of secret scanning push protection
*/
"secret_scanning_push_protection": S.optionalWith(CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningPushProtection, { nullable: true }),
  /**
* The enablement status of secret scanning validity checks
*/
"secret_scanning_validity_checks": S.optionalWith(CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningValidityChecks, { nullable: true }),
  /**
* The enablement status of secret scanning non-provider patterns
*/
"secret_scanning_non_provider_patterns": S.optionalWith(CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningNonProviderPatterns, { nullable: true }),
  /**
* The enablement status of Copilot secret scanning
*/
"secret_scanning_generic_secrets": S.optionalWith(CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningGenericSecrets, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of secret scanning delegated alert dismissal
*/
"secret_scanning_delegated_alert_dismissal": S.optionalWith(CodeSecurityUpdateEnterpriseConfigurationRequestSecretScanningDelegatedAlertDismissal, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of private vulnerability reporting
*/
"private_vulnerability_reporting": S.optionalWith(CodeSecurityUpdateEnterpriseConfigurationRequestPrivateVulnerabilityReporting, { nullable: true }),
  /**
* The enforcement status for a security configuration
*/
"enforcement": S.optionalWith(CodeSecurityUpdateEnterpriseConfigurationRequestEnforcement, { nullable: true })
}) {}

export class CodeSecurityAttachEnterpriseConfigurationParams extends S.Struct({
  
}) {}

/**
* The type of repositories to attach the configuration to.
*/
export class CodeSecurityAttachEnterpriseConfigurationRequestScope extends S.Literal("all", "all_without_configurations") {}

export class CodeSecurityAttachEnterpriseConfigurationRequest extends S.Class<CodeSecurityAttachEnterpriseConfigurationRequest>("CodeSecurityAttachEnterpriseConfigurationRequest")({
  /**
* The type of repositories to attach the configuration to.
*/
"scope": CodeSecurityAttachEnterpriseConfigurationRequestScope
}) {}

export class CodeSecurityAttachEnterpriseConfiguration202 extends S.Record({ key: S.String, value: S.Unknown }) {}

export class CodeSecuritySetConfigurationAsDefaultForEnterpriseParams extends S.Struct({
  
}) {}

/**
* Specify which types of repository this security configuration should be applied to by default.
*/
export class CodeSecuritySetConfigurationAsDefaultForEnterpriseRequestDefaultForNewRepos extends S.Literal("all", "none", "private_and_internal", "public") {}

export class CodeSecuritySetConfigurationAsDefaultForEnterpriseRequest extends S.Class<CodeSecuritySetConfigurationAsDefaultForEnterpriseRequest>("CodeSecuritySetConfigurationAsDefaultForEnterpriseRequest")({
  /**
* Specify which types of repository this security configuration should be applied to by default.
*/
"default_for_new_repos": S.optionalWith(CodeSecuritySetConfigurationAsDefaultForEnterpriseRequestDefaultForNewRepos, { nullable: true })
}) {}

/**
* Specifies which types of repository this security configuration is applied to by default.
*/
export class CodeSecuritySetConfigurationAsDefaultForEnterprise200DefaultForNewRepos extends S.Literal("all", "none", "private_and_internal", "public") {}

export class CodeSecuritySetConfigurationAsDefaultForEnterprise200 extends S.Struct({
  /**
* Specifies which types of repository this security configuration is applied to by default.
*/
"default_for_new_repos": S.optionalWith(CodeSecuritySetConfigurationAsDefaultForEnterprise200DefaultForNewRepos, { nullable: true }),
  "configuration": S.optionalWith(CodeSecurityConfiguration, { nullable: true })
}) {}

export class CodeSecurityGetRepositoriesForEnterpriseConfigurationParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true }),
  "status": S.optionalWith(S.String, { nullable: true, default: () => "all" as const })
}) {}

/**
* The attachment status of the code security configuration on the repository.
*/
export class CodeSecurityConfigurationRepositoriesStatus extends S.Literal("attached", "attaching", "detached", "removed", "enforced", "failed", "updating", "removed_by_enterprise") {}

/**
* A GitHub repository.
*/
export class SimpleRepository extends S.Class<SimpleRepository>("SimpleRepository")({
  /**
* A unique identifier of the repository.
*/
"id": S.Int,
  /**
* The GraphQL identifier of the repository.
*/
"node_id": S.String,
  /**
* The name of the repository.
*/
"name": S.String,
  /**
* The full, globally unique, name of the repository.
*/
"full_name": S.String,
  "owner": SimpleUser,
  /**
* Whether the repository is private.
*/
"private": S.Boolean,
  /**
* The URL to view the repository on GitHub.com.
*/
"html_url": S.String,
  /**
* The repository description.
*/
"description": S.NullOr(S.String),
  /**
* Whether the repository is a fork.
*/
"fork": S.Boolean,
  /**
* The URL to get more information about the repository from the GitHub API.
*/
"url": S.String,
  /**
* A template for the API URL to download the repository as an archive.
*/
"archive_url": S.String,
  /**
* A template for the API URL to list the available assignees for issues in the repository.
*/
"assignees_url": S.String,
  /**
* A template for the API URL to create or retrieve a raw Git blob in the repository.
*/
"blobs_url": S.String,
  /**
* A template for the API URL to get information about branches in the repository.
*/
"branches_url": S.String,
  /**
* A template for the API URL to get information about collaborators of the repository.
*/
"collaborators_url": S.String,
  /**
* A template for the API URL to get information about comments on the repository.
*/
"comments_url": S.String,
  /**
* A template for the API URL to get information about commits on the repository.
*/
"commits_url": S.String,
  /**
* A template for the API URL to compare two commits or refs.
*/
"compare_url": S.String,
  /**
* A template for the API URL to get the contents of the repository.
*/
"contents_url": S.String,
  /**
* A template for the API URL to list the contributors to the repository.
*/
"contributors_url": S.String,
  /**
* The API URL to list the deployments of the repository.
*/
"deployments_url": S.String,
  /**
* The API URL to list the downloads on the repository.
*/
"downloads_url": S.String,
  /**
* The API URL to list the events of the repository.
*/
"events_url": S.String,
  /**
* The API URL to list the forks of the repository.
*/
"forks_url": S.String,
  /**
* A template for the API URL to get information about Git commits of the repository.
*/
"git_commits_url": S.String,
  /**
* A template for the API URL to get information about Git refs of the repository.
*/
"git_refs_url": S.String,
  /**
* A template for the API URL to get information about Git tags of the repository.
*/
"git_tags_url": S.String,
  /**
* A template for the API URL to get information about issue comments on the repository.
*/
"issue_comment_url": S.String,
  /**
* A template for the API URL to get information about issue events on the repository.
*/
"issue_events_url": S.String,
  /**
* A template for the API URL to get information about issues on the repository.
*/
"issues_url": S.String,
  /**
* A template for the API URL to get information about deploy keys on the repository.
*/
"keys_url": S.String,
  /**
* A template for the API URL to get information about labels of the repository.
*/
"labels_url": S.String,
  /**
* The API URL to get information about the languages of the repository.
*/
"languages_url": S.String,
  /**
* The API URL to merge branches in the repository.
*/
"merges_url": S.String,
  /**
* A template for the API URL to get information about milestones of the repository.
*/
"milestones_url": S.String,
  /**
* A template for the API URL to get information about notifications on the repository.
*/
"notifications_url": S.String,
  /**
* A template for the API URL to get information about pull requests on the repository.
*/
"pulls_url": S.String,
  /**
* A template for the API URL to get information about releases on the repository.
*/
"releases_url": S.String,
  /**
* The API URL to list the stargazers on the repository.
*/
"stargazers_url": S.String,
  /**
* A template for the API URL to get information about statuses of a commit.
*/
"statuses_url": S.String,
  /**
* The API URL to list the subscribers on the repository.
*/
"subscribers_url": S.String,
  /**
* The API URL to subscribe to notifications for this repository.
*/
"subscription_url": S.String,
  /**
* The API URL to get information about tags on the repository.
*/
"tags_url": S.String,
  /**
* The API URL to list the teams on the repository.
*/
"teams_url": S.String,
  /**
* A template for the API URL to create or retrieve a raw Git tree of the repository.
*/
"trees_url": S.String,
  /**
* The API URL to list the hooks on the repository.
*/
"hooks_url": S.String
}) {}

/**
* Repositories associated with a code security configuration and attachment status
*/
export class CodeSecurityConfigurationRepositories extends S.Class<CodeSecurityConfigurationRepositories>("CodeSecurityConfigurationRepositories")({
  /**
* The attachment status of the code security configuration on the repository.
*/
"status": S.optionalWith(CodeSecurityConfigurationRepositoriesStatus, { nullable: true }),
  "repository": S.optionalWith(SimpleRepository, { nullable: true })
}) {}

export class CodeSecurityGetRepositoriesForEnterpriseConfiguration200 extends S.Array(CodeSecurityConfigurationRepositories) {}

export class DependabotListAlertsForEnterpriseParamsScope extends S.Literal("development", "runtime") {}

export class DependabotListAlertsForEnterpriseParamsSort extends S.Literal("created", "updated", "epss_percentage") {}

export class DependabotListAlertsForEnterpriseParamsDirection extends S.Literal("asc", "desc") {}

export class DependabotListAlertsForEnterpriseParams extends S.Struct({
  "state": S.optionalWith(S.String, { nullable: true }),
  "severity": S.optionalWith(S.String, { nullable: true }),
  "ecosystem": S.optionalWith(S.String, { nullable: true }),
  "package": S.optionalWith(S.String, { nullable: true }),
  "epss_percentage": S.optionalWith(S.String, { nullable: true }),
  "has": S.optionalWith(S.Union(S.String,
S.Array(S.Literal("patch"))), { nullable: true }),
  "scope": S.optionalWith(DependabotListAlertsForEnterpriseParamsScope, { nullable: true }),
  "sort": S.optionalWith(DependabotListAlertsForEnterpriseParamsSort, { nullable: true, default: () => "created" as const }),
  "direction": S.optionalWith(DependabotListAlertsForEnterpriseParamsDirection, { nullable: true, default: () => "desc" as const }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true }),
  "first": S.optionalWith(S.Int.pipe(S.greaterThanOrEqualTo(1), S.lessThanOrEqualTo(100)), { nullable: true, default: () => 30 as const }),
  "last": S.optionalWith(S.Int.pipe(S.greaterThanOrEqualTo(1), S.lessThanOrEqualTo(100)), { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

/**
* The security alert number.
*/
export class AlertNumber extends S.Int {}

/**
* The state of the Dependabot alert.
*/
export class DependabotAlertWithRepositoryState extends S.Literal("auto_dismissed", "dismissed", "fixed", "open") {}

/**
* Details for the vulnerable package.
*/
export class DependabotAlertPackage extends S.Class<DependabotAlertPackage>("DependabotAlertPackage")({
  /**
* The package's language or package management ecosystem.
*/
"ecosystem": S.String,
  /**
* The unique package name within its ecosystem.
*/
"name": S.String
}) {}

/**
* The execution scope of the vulnerable dependency.
*/
export class DependabotAlertWithRepositoryDependencyScope extends S.Literal("development", "runtime") {}

/**
* The vulnerable dependency's relationship to your project.
* 
* > [!NOTE]
* > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
*/
export class DependabotAlertWithRepositoryDependencyRelationship extends S.Literal("unknown", "direct", "transitive") {}

/**
* The severity of the vulnerability.
*/
export class DependabotAlertSecurityVulnerabilitySeverity extends S.Literal("low", "medium", "high", "critical") {}

/**
* Details pertaining to one vulnerable version range for the advisory.
*/
export class DependabotAlertSecurityVulnerability extends S.Class<DependabotAlertSecurityVulnerability>("DependabotAlertSecurityVulnerability")({
  "package": DependabotAlertPackage,
  /**
* The severity of the vulnerability.
*/
"severity": DependabotAlertSecurityVulnerabilitySeverity,
  /**
* Conditions that identify vulnerable versions of this vulnerability's package.
*/
"vulnerable_version_range": S.String,
  /**
* Details pertaining to the package version that patches this vulnerability.
*/
"first_patched_version": S.NullOr(S.Struct({
  /**
* The package version that patches this vulnerability.
*/
"identifier": S.String
}))
}) {}

/**
* The severity of the advisory.
*/
export class DependabotAlertSecurityAdvisorySeverity extends S.Literal("low", "medium", "high", "critical") {}

/**
* Details for the GitHub Security Advisory.
*/
export class DependabotAlertSecurityAdvisory extends S.Class<DependabotAlertSecurityAdvisory>("DependabotAlertSecurityAdvisory")({
  /**
* The unique GitHub Security Advisory ID assigned to the advisory.
*/
"ghsa_id": S.String,
  /**
* The unique CVE ID assigned to the advisory.
*/
"cve_id": S.NullOr(S.String),
  /**
* A short, plain text summary of the advisory.
*/
"summary": S.String.pipe(S.maxLength(1024)),
  /**
* A long-form Markdown-supported description of the advisory.
*/
"description": S.String,
  /**
* Vulnerable version range information for the advisory.
*/
"vulnerabilities": S.Array(DependabotAlertSecurityVulnerability),
  /**
* The severity of the advisory.
*/
"severity": DependabotAlertSecurityAdvisorySeverity,
  /**
* Details for the advisory pertaining to the Common Vulnerability Scoring System.
*/
"cvss": S.Struct({
  /**
* The overall CVSS score of the advisory.
*/
"score": S.Number.pipe(S.greaterThanOrEqualTo(0), S.lessThanOrEqualTo(10)),
  /**
* The full CVSS vector string for the advisory.
*/
"vector_string": S.NullOr(S.String)
}),
  "cvss_severities": S.optionalWith(CvssSeverities, { nullable: true }),
  "epss": S.optionalWith(SecurityAdvisoryEpss, { nullable: true }),
  /**
* Details for the advisory pertaining to Common Weakness Enumeration.
*/
"cwes": S.Array(S.Struct({
  /**
* The unique CWE ID.
*/
"cwe_id": S.String,
  /**
* The short, plain text name of the CWE.
*/
"name": S.String
})),
  /**
* Values that identify this advisory among security information sources.
*/
"identifiers": S.Array(S.Struct({
  /**
* The type of advisory identifier.
*/
"type": S.Literal("CVE", "GHSA"),
  /**
* The value of the advisory identifer.
*/
"value": S.String
})),
  /**
* Links to additional advisory information.
*/
"references": S.Array(S.Struct({
  /**
* The URL of the reference.
*/
"url": S.String
})),
  /**
* The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
"published_at": S.String,
  /**
* The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
"updated_at": S.String,
  /**
* The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
"withdrawn_at": S.NullOr(S.String)
}) {}

/**
* The REST API URL of the alert resource.
*/
export class AlertUrl extends S.String {}

/**
* The GitHub URL of the alert resource.
*/
export class AlertHtmlUrl extends S.String {}

/**
* The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
export class AlertCreatedAt extends S.String {}

/**
* The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
export class AlertUpdatedAt extends S.String {}

/**
* The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
export class AlertDismissedAt extends S.String {}

/**
* The reason that the alert was dismissed.
*/
export class DependabotAlertWithRepositoryDismissedReason extends S.Literal("fix_started", "inaccurate", "no_bandwidth", "not_used", "tolerable_risk") {}

/**
* The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
export class AlertFixedAt extends S.String {}

/**
* The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
export class AlertAutoDismissedAt extends S.String {}

/**
* A Dependabot alert.
*/
export class DependabotAlertWithRepository extends S.Class<DependabotAlertWithRepository>("DependabotAlertWithRepository")({
  "number": AlertNumber,
  /**
* The state of the Dependabot alert.
*/
"state": DependabotAlertWithRepositoryState,
  /**
* Details for the vulnerable dependency.
*/
"dependency": S.Struct({
  "package": S.optionalWith(DependabotAlertPackage, { nullable: true }),
  /**
* The full path to the dependency manifest file, relative to the root of the repository.
*/
"manifest_path": S.optionalWith(S.String, { nullable: true }),
  /**
* The execution scope of the vulnerable dependency.
*/
"scope": S.optionalWith(DependabotAlertWithRepositoryDependencyScope, { nullable: true }),
  /**
* The vulnerable dependency's relationship to your project.
* 
* > [!NOTE]
* > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
*/
"relationship": S.optionalWith(DependabotAlertWithRepositoryDependencyRelationship, { nullable: true })
}),
  "security_advisory": DependabotAlertSecurityAdvisory,
  "security_vulnerability": DependabotAlertSecurityVulnerability,
  "url": AlertUrl,
  "html_url": AlertHtmlUrl,
  "created_at": AlertCreatedAt,
  "updated_at": AlertUpdatedAt,
  "dismissed_at": S.NullOr(AlertDismissedAt),
  "dismissed_by": S.NullOr(NullableSimpleUser),
  /**
* The reason that the alert was dismissed.
*/
"dismissed_reason": S.NullOr(DependabotAlertWithRepositoryDismissedReason),
  /**
* An optional comment associated with the alert's dismissal.
*/
"dismissed_comment": S.NullOr(S.String.pipe(S.maxLength(280))),
  "fixed_at": S.NullOr(AlertFixedAt),
  "auto_dismissed_at": S.optionalWith(AlertAutoDismissedAt, { nullable: true }),
  "repository": SimpleRepository
}) {}

export class DependabotListAlertsForEnterprise200 extends S.Array(DependabotAlertWithRepository) {}

export class SecretScanningListAlertsForEnterpriseParamsState extends S.Literal("open", "resolved") {}

export class SecretScanningListAlertsForEnterpriseParamsSort extends S.Literal("created", "updated") {}

export class SecretScanningListAlertsForEnterpriseParamsDirection extends S.Literal("asc", "desc") {}

export class SecretScanningListAlertsForEnterpriseParams extends S.Struct({
  "state": S.optionalWith(SecretScanningListAlertsForEnterpriseParamsState, { nullable: true }),
  "secret_type": S.optionalWith(S.String, { nullable: true }),
  "resolution": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(SecretScanningListAlertsForEnterpriseParamsSort, { nullable: true, default: () => "created" as const }),
  "direction": S.optionalWith(SecretScanningListAlertsForEnterpriseParamsDirection, { nullable: true, default: () => "desc" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true }),
  "validity": S.optionalWith(S.String, { nullable: true }),
  "is_publicly_leaked": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "is_multi_repo": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "hide_secret": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

/**
* The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
export class NullableAlertUpdatedAt extends S.String {}

/**
* Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.
*/
export class SecretScanningAlertState extends S.Literal("open", "resolved") {}

/**
* **Required when the `state` is `resolved`.** The reason for resolving the alert.
*/
export class SecretScanningAlertResolution extends S.Literal("false_positive", "wont_fix", "revoked", "used_in_tests") {}

/**
* The token status as of the latest validity check.
*/
export class OrganizationSecretScanningAlertValidity extends S.Literal("active", "inactive", "unknown") {}

/**
* Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository.
*/
export class SecretScanningLocationCommit extends S.Class<SecretScanningLocationCommit>("SecretScanningLocationCommit")({
  /**
* The file path in the repository
*/
"path": S.String,
  /**
* Line number at which the secret starts in the file
*/
"start_line": S.Number,
  /**
* Line number at which the secret ends in the file
*/
"end_line": S.Number,
  /**
* The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
*/
"start_column": S.Number,
  /**
* The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
*/
"end_column": S.Number,
  /**
* SHA-1 hash ID of the associated blob
*/
"blob_sha": S.String,
  /**
* The API URL to get the associated blob resource
*/
"blob_url": S.String,
  /**
* SHA-1 hash ID of the associated commit
*/
"commit_sha": S.String,
  /**
* The API URL to get the associated commit resource
*/
"commit_url": S.String
}) {}

/**
* Represents a 'wiki_commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository wiki.
*/
export class SecretScanningLocationWikiCommit extends S.Class<SecretScanningLocationWikiCommit>("SecretScanningLocationWikiCommit")({
  /**
* The file path of the wiki page
*/
"path": S.String,
  /**
* Line number at which the secret starts in the file
*/
"start_line": S.Number,
  /**
* Line number at which the secret ends in the file
*/
"end_line": S.Number,
  /**
* The column at which the secret starts within the start line when the file is interpreted as 8-bit ASCII.
*/
"start_column": S.Number,
  /**
* The column at which the secret ends within the end line when the file is interpreted as 8-bit ASCII.
*/
"end_column": S.Number,
  /**
* SHA-1 hash ID of the associated blob
*/
"blob_sha": S.String,
  /**
* The GitHub URL to get the associated wiki page
*/
"page_url": S.String,
  /**
* SHA-1 hash ID of the associated commit
*/
"commit_sha": S.String,
  /**
* The GitHub URL to get the associated wiki commit
*/
"commit_url": S.String
}) {}

/**
* Represents an 'issue_title' secret scanning location type. This location type shows that a secret was detected in the title of an issue.
*/
export class SecretScanningLocationIssueTitle extends S.Class<SecretScanningLocationIssueTitle>("SecretScanningLocationIssueTitle")({
  /**
* The API URL to get the issue where the secret was detected.
*/
"issue_title_url": S.String
}) {}

/**
* Represents an 'issue_body' secret scanning location type. This location type shows that a secret was detected in the body of an issue.
*/
export class SecretScanningLocationIssueBody extends S.Class<SecretScanningLocationIssueBody>("SecretScanningLocationIssueBody")({
  /**
* The API URL to get the issue where the secret was detected.
*/
"issue_body_url": S.String
}) {}

/**
* Represents an 'issue_comment' secret scanning location type. This location type shows that a secret was detected in a comment on an issue.
*/
export class SecretScanningLocationIssueComment extends S.Class<SecretScanningLocationIssueComment>("SecretScanningLocationIssueComment")({
  /**
* The API URL to get the issue comment where the secret was detected.
*/
"issue_comment_url": S.String
}) {}

/**
* Represents a 'discussion_title' secret scanning location type. This location type shows that a secret was detected in the title of a discussion.
*/
export class SecretScanningLocationDiscussionTitle extends S.Class<SecretScanningLocationDiscussionTitle>("SecretScanningLocationDiscussionTitle")({
  /**
* The URL to the discussion where the secret was detected.
*/
"discussion_title_url": S.String
}) {}

/**
* Represents a 'discussion_body' secret scanning location type. This location type shows that a secret was detected in the body of a discussion.
*/
export class SecretScanningLocationDiscussionBody extends S.Class<SecretScanningLocationDiscussionBody>("SecretScanningLocationDiscussionBody")({
  /**
* The URL to the discussion where the secret was detected.
*/
"discussion_body_url": S.String
}) {}

/**
* Represents a 'discussion_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a discussion.
*/
export class SecretScanningLocationDiscussionComment extends S.Class<SecretScanningLocationDiscussionComment>("SecretScanningLocationDiscussionComment")({
  /**
* The API URL to get the discussion comment where the secret was detected.
*/
"discussion_comment_url": S.String
}) {}

/**
* Represents a 'pull_request_title' secret scanning location type. This location type shows that a secret was detected in the title of a pull request.
*/
export class SecretScanningLocationPullRequestTitle extends S.Class<SecretScanningLocationPullRequestTitle>("SecretScanningLocationPullRequestTitle")({
  /**
* The API URL to get the pull request where the secret was detected.
*/
"pull_request_title_url": S.String
}) {}

/**
* Represents a 'pull_request_body' secret scanning location type. This location type shows that a secret was detected in the body of a pull request.
*/
export class SecretScanningLocationPullRequestBody extends S.Class<SecretScanningLocationPullRequestBody>("SecretScanningLocationPullRequestBody")({
  /**
* The API URL to get the pull request where the secret was detected.
*/
"pull_request_body_url": S.String
}) {}

/**
* Represents a 'pull_request_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a pull request.
*/
export class SecretScanningLocationPullRequestComment extends S.Class<SecretScanningLocationPullRequestComment>("SecretScanningLocationPullRequestComment")({
  /**
* The API URL to get the pull request comment where the secret was detected.
*/
"pull_request_comment_url": S.String
}) {}

/**
* Represents a 'pull_request_review' secret scanning location type. This location type shows that a secret was detected in a review on a pull request.
*/
export class SecretScanningLocationPullRequestReview extends S.Class<SecretScanningLocationPullRequestReview>("SecretScanningLocationPullRequestReview")({
  /**
* The API URL to get the pull request review where the secret was detected.
*/
"pull_request_review_url": S.String
}) {}

/**
* Represents a 'pull_request_review_comment' secret scanning location type. This location type shows that a secret was detected in a review comment on a pull request.
*/
export class SecretScanningLocationPullRequestReviewComment extends S.Class<SecretScanningLocationPullRequestReviewComment>("SecretScanningLocationPullRequestReviewComment")({
  /**
* The API URL to get the pull request review comment where the secret was detected.
*/
"pull_request_review_comment_url": S.String
}) {}

/**
* Details on the location where the token was initially detected. This can be a commit, wiki commit, issue, discussion, pull request.
*/
export class NullableSecretScanningFirstDetectedLocation extends S.Union(SecretScanningLocationCommit,
SecretScanningLocationWikiCommit,
SecretScanningLocationIssueTitle,
SecretScanningLocationIssueBody,
SecretScanningLocationIssueComment,
SecretScanningLocationDiscussionTitle,
SecretScanningLocationDiscussionBody,
SecretScanningLocationDiscussionComment,
SecretScanningLocationPullRequestTitle,
SecretScanningLocationPullRequestBody,
SecretScanningLocationPullRequestComment,
SecretScanningLocationPullRequestReview,
SecretScanningLocationPullRequestReviewComment) {}

export class OrganizationSecretScanningAlert extends S.Class<OrganizationSecretScanningAlert>("OrganizationSecretScanningAlert")({
  "number": S.optionalWith(AlertNumber, { nullable: true }),
  "created_at": S.optionalWith(AlertCreatedAt, { nullable: true }),
  "updated_at": S.optionalWith(NullableAlertUpdatedAt, { nullable: true }),
  "url": S.optionalWith(AlertUrl, { nullable: true }),
  "html_url": S.optionalWith(AlertHtmlUrl, { nullable: true }),
  /**
* The REST API URL of the code locations for this alert.
*/
"locations_url": S.optionalWith(S.String, { nullable: true }),
  "state": S.optionalWith(SecretScanningAlertState, { nullable: true }),
  "resolution": S.optionalWith(SecretScanningAlertResolution, { nullable: true }),
  /**
* The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
"resolved_at": S.optionalWith(S.String, { nullable: true }),
  "resolved_by": S.optionalWith(NullableSimpleUser, { nullable: true }),
  /**
* The type of secret that secret scanning detected.
*/
"secret_type": S.optionalWith(S.String, { nullable: true }),
  /**
* User-friendly name for the detected secret, matching the `secret_type`.
* For a list of built-in patterns, see "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
*/
"secret_type_display_name": S.optionalWith(S.String, { nullable: true }),
  /**
* The secret that was detected.
*/
"secret": S.optionalWith(S.String, { nullable: true }),
  "repository": S.optionalWith(SimpleRepository, { nullable: true }),
  /**
* Whether push protection was bypassed for the detected secret.
*/
"push_protection_bypassed": S.optionalWith(S.Boolean, { nullable: true }),
  "push_protection_bypassed_by": S.optionalWith(NullableSimpleUser, { nullable: true }),
  /**
* The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
"push_protection_bypassed_at": S.optionalWith(S.String, { nullable: true }),
  "push_protection_bypass_request_reviewer": S.optionalWith(NullableSimpleUser, { nullable: true }),
  /**
* An optional comment when reviewing a push protection bypass.
*/
"push_protection_bypass_request_reviewer_comment": S.optionalWith(S.String, { nullable: true }),
  /**
* An optional comment when requesting a push protection bypass.
*/
"push_protection_bypass_request_comment": S.optionalWith(S.String, { nullable: true }),
  /**
* The URL to a push protection bypass request.
*/
"push_protection_bypass_request_html_url": S.optionalWith(S.String, { nullable: true }),
  /**
* The comment that was optionally added when this alert was closed
*/
"resolution_comment": S.optionalWith(S.String, { nullable: true }),
  /**
* The token status as of the latest validity check.
*/
"validity": S.optionalWith(OrganizationSecretScanningAlertValidity, { nullable: true }),
  /**
* Whether the secret was publicly leaked.
*/
"publicly_leaked": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Whether the detected secret was found in multiple repositories in the same organization or enterprise.
*/
"multi_repo": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* A boolean value representing whether or not alert is base64 encoded
*/
"is_base64_encoded": S.optionalWith(S.Boolean, { nullable: true }),
  "first_location_detected": S.optionalWith(NullableSecretScanningFirstDetectedLocation, { nullable: true }),
  /**
* A boolean value representing whether or not the token in the alert was detected in more than one location.
*/
"has_more_locations": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class SecretScanningListAlertsForEnterprise200 extends S.Array(OrganizationSecretScanningAlert) {}

export class SecretScanningListAlertsForEnterprise503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class ActivityListPublicEventsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Actor
*/
export class Actor extends S.Class<Actor>("Actor")({
  "id": S.Int,
  "login": S.String,
  "display_login": S.optionalWith(S.String, { nullable: true }),
  "gravatar_id": S.NullOr(S.String),
  "url": S.String,
  "avatar_url": S.String
}) {}

/**
* The reason for the current state
*/
export class IssueStateReason extends S.Literal("completed", "reopened", "not_planned", "duplicate") {}

/**
* The state of the milestone.
*/
export class NullableMilestoneState extends S.Literal("open", "closed") {}

/**
* A collection of related issues and pull requests.
*/
export class NullableMilestone extends S.Class<NullableMilestone>("NullableMilestone")({
  "url": S.String,
  "html_url": S.String,
  "labels_url": S.String,
  "id": S.Int,
  "node_id": S.String,
  /**
* The number of the milestone.
*/
"number": S.Int,
  /**
* The state of the milestone.
*/
"state": NullableMilestoneState.pipe(S.propertySignature, S.withConstructorDefault(() => "open" as const)),
  /**
* The title of the milestone.
*/
"title": S.String,
  "description": S.NullOr(S.String),
  "creator": S.NullOr(NullableSimpleUser),
  "open_issues": S.Int,
  "closed_issues": S.Int,
  "created_at": S.String,
  "updated_at": S.String,
  "closed_at": S.NullOr(S.String),
  "due_on": S.NullOr(S.String)
}) {}

/**
* The color of the issue type.
*/
export class IssueTypeColor extends S.Literal("gray", "blue", "green", "yellow", "orange", "red", "pink", "purple") {}

/**
* The type of issue.
*/
export class IssueType extends S.Class<IssueType>("IssueType")({
  /**
* The unique identifier of the issue type.
*/
"id": S.Int,
  /**
* The node identifier of the issue type.
*/
"node_id": S.String,
  /**
* The name of the issue type.
*/
"name": S.String,
  /**
* The description of the issue type.
*/
"description": S.NullOr(S.String),
  /**
* The color of the issue type.
*/
"color": S.optionalWith(IssueTypeColor, { nullable: true }),
  /**
* The time the issue type created.
*/
"created_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The time the issue type last updated.
*/
"updated_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The enabled state of the issue type.
*/
"is_enabled": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
*/
export class NullableIntegration extends S.Class<NullableIntegration>("NullableIntegration")({
  /**
* Unique identifier of the GitHub app
*/
"id": S.Int,
  /**
* The slug name of the GitHub app
*/
"slug": S.optionalWith(S.String, { nullable: true }),
  "node_id": S.String,
  "client_id": S.optionalWith(S.String, { nullable: true }),
  "owner": S.Union(SimpleUser,
Enterprise),
  /**
* The name of the GitHub app
*/
"name": S.String,
  "description": S.NullOr(S.String),
  "external_url": S.String,
  "html_url": S.String,
  "created_at": S.String,
  "updated_at": S.String,
  /**
* The set of permissions for the GitHub app
*/
"permissions": S.Struct({
  "issues": S.optionalWith(S.String, { nullable: true }),
  "checks": S.optionalWith(S.String, { nullable: true }),
  "metadata": S.optionalWith(S.String, { nullable: true }),
  "contents": S.optionalWith(S.String, { nullable: true }),
  "deployments": S.optionalWith(S.String, { nullable: true })
}),
  /**
* The list of events for the GitHub app. Note that the `installation_target`, `security_advisory`, and `meta` events are not included because they are global events and not specific to an installation.
*/
"events": S.Array(S.String),
  /**
* The number of installations associated with the GitHub app. Only returned when the integration is requesting details about itself.
*/
"installations_count": S.optionalWith(S.Int, { nullable: true })
}) {}

/**
* How the author is associated with the repository.
*/
export class AuthorAssociation extends S.Literal("COLLABORATOR", "CONTRIBUTOR", "FIRST_TIMER", "FIRST_TIME_CONTRIBUTOR", "MANNEQUIN", "MEMBER", "NONE", "OWNER") {}

export class ReactionRollup extends S.Class<ReactionRollup>("ReactionRollup")({
  "url": S.String,
  "total_count": S.Int,
  "+1": S.Int,
  "-1": S.Int,
  "laugh": S.Int,
  "confused": S.Int,
  "heart": S.Int,
  "hooray": S.Int,
  "eyes": S.Int,
  "rocket": S.Int
}) {}

export class SubIssuesSummary extends S.Class<SubIssuesSummary>("SubIssuesSummary")({
  "total": S.Int,
  "completed": S.Int,
  "percent_completed": S.Int
}) {}

export class IssueDependenciesSummary extends S.Class<IssueDependenciesSummary>("IssueDependenciesSummary")({
  "blocked_by": S.Int,
  "blocking": S.Int,
  "total_blocked_by": S.Int,
  "total_blocking": S.Int
}) {}

/**
* The data type of the issue field
*/
export class IssueFieldValueDataType extends S.Literal("text", "single_select", "number", "date") {}

/**
* A value assigned to an issue field
*/
export class IssueFieldValue extends S.Class<IssueFieldValue>("IssueFieldValue")({
  /**
* Unique identifier for the issue field.
*/
"issue_field_id": S.Int,
  "node_id": S.String,
  /**
* The data type of the issue field
*/
"data_type": IssueFieldValueDataType,
  /**
* The value of the issue field
*/
"value": S.NullOr(S.Union(S.String,
S.Number,
S.Int)),
  /**
* Details about the selected option (only present for single_select fields)
*/
"single_select_option": S.optionalWith(S.Struct({
  /**
* Unique identifier for the option.
*/
"id": S.Int,
  /**
* The name of the option
*/
"name": S.String,
  /**
* The color of the option
*/
"color": S.String
}), { nullable: true })
}) {}

/**
* Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
*/
export class Issue extends S.Class<Issue>("Issue")({
  "id": S.Int,
  "node_id": S.String,
  /**
* URL for the issue
*/
"url": S.String,
  "repository_url": S.String,
  "labels_url": S.String,
  "comments_url": S.String,
  "events_url": S.String,
  "html_url": S.String,
  /**
* Number uniquely identifying the issue within its repository
*/
"number": S.Int,
  /**
* State of the issue; either 'open' or 'closed'
*/
"state": S.String,
  /**
* The reason for the current state
*/
"state_reason": S.optionalWith(IssueStateReason, { nullable: true }),
  /**
* Title of the issue
*/
"title": S.String,
  /**
* Contents of the issue
*/
"body": S.optionalWith(S.String, { nullable: true }),
  "user": S.NullOr(NullableSimpleUser),
  /**
* Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
*/
"labels": S.Array(S.Union(S.String,
S.Struct({
  "id": S.optionalWith(S.Int, { nullable: true }),
  "node_id": S.optionalWith(S.String, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "color": S.optionalWith(S.String, { nullable: true }),
  "default": S.optionalWith(S.Boolean, { nullable: true })
}))),
  "assignee": S.NullOr(NullableSimpleUser),
  "assignees": S.optionalWith(S.Array(SimpleUser), { nullable: true }),
  "milestone": S.NullOr(NullableMilestone),
  "locked": S.Boolean,
  "active_lock_reason": S.optionalWith(S.String, { nullable: true }),
  "comments": S.Int,
  "pull_request": S.optionalWith(S.Struct({
  "merged_at": S.optionalWith(S.String, { nullable: true }),
  "diff_url": S.NullOr(S.String),
  "html_url": S.NullOr(S.String),
  "patch_url": S.NullOr(S.String),
  "url": S.NullOr(S.String)
}), { nullable: true }),
  "closed_at": S.NullOr(S.String),
  "created_at": S.String,
  "updated_at": S.String,
  "draft": S.optionalWith(S.Boolean, { nullable: true }),
  "closed_by": S.optionalWith(NullableSimpleUser, { nullable: true }),
  "body_html": S.optionalWith(S.String, { nullable: true }),
  "body_text": S.optionalWith(S.String, { nullable: true }),
  "timeline_url": S.optionalWith(S.String, { nullable: true }),
  "type": S.optionalWith(IssueType, { nullable: true }),
  "repository": S.optionalWith(Repository, { nullable: true }),
  "performed_via_github_app": S.optionalWith(NullableIntegration, { nullable: true }),
  "author_association": AuthorAssociation,
  "reactions": S.optionalWith(ReactionRollup, { nullable: true }),
  "sub_issues_summary": S.optionalWith(SubIssuesSummary, { nullable: true }),
  "issue_dependencies_summary": S.optionalWith(IssueDependenciesSummary, { nullable: true }),
  "issue_field_values": S.optionalWith(S.Array(IssueFieldValue), { nullable: true })
}) {}

/**
* Comments provide a way for people to collaborate on an issue.
*/
export class IssueComment extends S.Class<IssueComment>("IssueComment")({
  /**
* Unique identifier of the issue comment
*/
"id": S.Int,
  "node_id": S.String,
  /**
* URL for the issue comment
*/
"url": S.String,
  /**
* Contents of the issue comment
*/
"body": S.optionalWith(S.String, { nullable: true }),
  "body_text": S.optionalWith(S.String, { nullable: true }),
  "body_html": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.String,
  "user": S.NullOr(NullableSimpleUser),
  "created_at": S.String,
  "updated_at": S.String,
  "issue_url": S.String,
  "author_association": AuthorAssociation,
  "performed_via_github_app": S.optionalWith(NullableIntegration, { nullable: true }),
  "reactions": S.optionalWith(ReactionRollup, { nullable: true })
}) {}

/**
* Event
*/
export class Event extends S.Class<Event>("Event")({
  "id": S.String,
  "type": S.NullOr(S.String),
  "actor": Actor,
  "repo": S.Struct({
  "id": S.Int,
  "name": S.String,
  "url": S.String
}),
  "org": S.optionalWith(Actor, { nullable: true }),
  "payload": S.Struct({
  "action": S.optionalWith(S.String, { nullable: true }),
  "issue": S.optionalWith(Issue, { nullable: true }),
  "comment": S.optionalWith(IssueComment, { nullable: true }),
  "pages": S.optionalWith(S.Array(S.Struct({
  "page_name": S.optionalWith(S.String, { nullable: true }),
  "title": S.optionalWith(S.String, { nullable: true }),
  "summary": S.optionalWith(S.String, { nullable: true }),
  "action": S.optionalWith(S.String, { nullable: true }),
  "sha": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.optionalWith(S.String, { nullable: true })
})), { nullable: true })
}),
  "public": S.Boolean,
  "created_at": S.NullOr(S.String)
}) {}

export class ActivityListPublicEvents200 extends S.Array(Event) {}

export class ActivityListPublicEvents503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Hypermedia Link with Type
*/
export class LinkWithType extends S.Class<LinkWithType>("LinkWithType")({
  "href": S.String,
  "type": S.String
}) {}

/**
* Feed
*/
export class Feed extends S.Class<Feed>("Feed")({
  "timeline_url": S.String,
  "user_url": S.String,
  "current_user_public_url": S.optionalWith(S.String, { nullable: true }),
  "current_user_url": S.optionalWith(S.String, { nullable: true }),
  "current_user_actor_url": S.optionalWith(S.String, { nullable: true }),
  "current_user_organization_url": S.optionalWith(S.String, { nullable: true }),
  "current_user_organization_urls": S.optionalWith(S.Array(S.String), { nullable: true }),
  "security_advisories_url": S.optionalWith(S.String, { nullable: true }),
  /**
* A feed of discussions for a given repository.
*/
"repository_discussions_url": S.optionalWith(S.String, { nullable: true }),
  /**
* A feed of discussions for a given repository and category.
*/
"repository_discussions_category_url": S.optionalWith(S.String, { nullable: true }),
  "_links": S.Struct({
  "timeline": LinkWithType,
  "user": LinkWithType,
  "security_advisories": S.optionalWith(LinkWithType, { nullable: true }),
  "current_user": S.optionalWith(LinkWithType, { nullable: true }),
  "current_user_public": S.optionalWith(LinkWithType, { nullable: true }),
  "current_user_actor": S.optionalWith(LinkWithType, { nullable: true }),
  "current_user_organization": S.optionalWith(LinkWithType, { nullable: true }),
  "current_user_organizations": S.optionalWith(S.Array(LinkWithType), { nullable: true }),
  "repository_discussions": S.optionalWith(LinkWithType, { nullable: true }),
  "repository_discussions_category": S.optionalWith(LinkWithType, { nullable: true })
})
}) {}

export class GistsListParams extends S.Struct({
  "since": S.optionalWith(S.String, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Base Gist
*/
export class BaseGist extends S.Class<BaseGist>("BaseGist")({
  "url": S.String,
  "forks_url": S.String,
  "commits_url": S.String,
  "id": S.String,
  "node_id": S.String,
  "git_pull_url": S.String,
  "git_push_url": S.String,
  "html_url": S.String,
  "files": S.Record({ key: S.String, value: S.Unknown }),
  "public": S.Boolean,
  "created_at": S.String,
  "updated_at": S.String,
  "description": S.NullOr(S.String),
  "comments": S.Int,
  "comments_enabled": S.optionalWith(S.Boolean, { nullable: true }),
  "user": S.NullOr(NullableSimpleUser),
  "comments_url": S.String,
  "owner": S.optionalWith(SimpleUser, { nullable: true }),
  "truncated": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class GistsList200 extends S.Array(BaseGist) {}

export class GistsCreateRequestPublicEnum extends S.Literal("true", "false") {}

export class GistsCreateRequest extends S.Class<GistsCreateRequest>("GistsCreateRequest")({
  /**
* Description of the gist
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* Names and content for the files that make up the gist
*/
"files": S.Record({ key: S.String, value: S.Unknown }),
  "public": S.optionalWith(S.Union(/**
* Flag indicating whether the gist is public
*/
S.Boolean,
GistsCreateRequestPublicEnum), { nullable: true })
}) {}

/**
* Public User
*/
export class PublicUser extends S.Class<PublicUser>("PublicUser")({
  "login": S.String,
  "id": S.Int,
  "user_view_type": S.optionalWith(S.String, { nullable: true }),
  "node_id": S.String,
  "avatar_url": S.String,
  "gravatar_id": S.NullOr(S.String),
  "url": S.String,
  "html_url": S.String,
  "followers_url": S.String,
  "following_url": S.String,
  "gists_url": S.String,
  "starred_url": S.String,
  "subscriptions_url": S.String,
  "organizations_url": S.String,
  "repos_url": S.String,
  "events_url": S.String,
  "received_events_url": S.String,
  "type": S.String,
  "site_admin": S.Boolean,
  "name": S.NullOr(S.String),
  "company": S.NullOr(S.String),
  "blog": S.NullOr(S.String),
  "location": S.NullOr(S.String),
  "email": S.NullOr(S.String),
  "notification_email": S.optionalWith(S.String, { nullable: true }),
  "hireable": S.NullOr(S.Boolean),
  "bio": S.NullOr(S.String),
  "twitter_username": S.optionalWith(S.String, { nullable: true }),
  "public_repos": S.Int,
  "public_gists": S.Int,
  "followers": S.Int,
  "following": S.Int,
  "created_at": S.String,
  "updated_at": S.String,
  "plan": S.optionalWith(S.Struct({
  "collaborators": S.Int,
  "name": S.String,
  "space": S.Int,
  "private_repos": S.Int
}), { nullable: true }),
  "private_gists": S.optionalWith(S.Int, { nullable: true }),
  "total_private_repos": S.optionalWith(S.Int, { nullable: true }),
  "owned_private_repos": S.optionalWith(S.Int, { nullable: true }),
  "disk_usage": S.optionalWith(S.Int, { nullable: true }),
  "collaborators": S.optionalWith(S.Int, { nullable: true })
}) {}

/**
* Gist History
*/
export class GistHistory extends S.Class<GistHistory>("GistHistory")({
  "user": S.optionalWith(NullableSimpleUser, { nullable: true }),
  "version": S.optionalWith(S.String, { nullable: true }),
  "committed_at": S.optionalWith(S.String, { nullable: true }),
  "change_status": S.optionalWith(S.Struct({
  "total": S.optionalWith(S.Int, { nullable: true }),
  "additions": S.optionalWith(S.Int, { nullable: true }),
  "deletions": S.optionalWith(S.Int, { nullable: true })
}), { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Gist Simple
*/
export class GistSimple extends S.Class<GistSimple>("GistSimple")({
  "forks": S.optionalWith(S.Array(S.Struct({
  "id": S.optionalWith(S.String, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true }),
  "user": S.optionalWith(PublicUser, { nullable: true }),
  "created_at": S.optionalWith(S.String, { nullable: true }),
  "updated_at": S.optionalWith(S.String, { nullable: true })
})), { nullable: true }),
  "history": S.optionalWith(S.Array(GistHistory), { nullable: true }),
  /**
* Gist
*/
"fork_of": S.optionalWith(S.Struct({
  "url": S.String,
  "forks_url": S.String,
  "commits_url": S.String,
  "id": S.String,
  "node_id": S.String,
  "git_pull_url": S.String,
  "git_push_url": S.String,
  "html_url": S.String,
  "files": S.Record({ key: S.String, value: S.Unknown }),
  "public": S.Boolean,
  "created_at": S.String,
  "updated_at": S.String,
  "description": S.NullOr(S.String),
  "comments": S.Int,
  "comments_enabled": S.optionalWith(S.Boolean, { nullable: true }),
  "user": S.NullOr(NullableSimpleUser),
  "comments_url": S.String,
  "owner": S.optionalWith(NullableSimpleUser, { nullable: true }),
  "truncated": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true }),
  "forks_url": S.optionalWith(S.String, { nullable: true }),
  "commits_url": S.optionalWith(S.String, { nullable: true }),
  "id": S.optionalWith(S.String, { nullable: true }),
  "node_id": S.optionalWith(S.String, { nullable: true }),
  "git_pull_url": S.optionalWith(S.String, { nullable: true }),
  "git_push_url": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.optionalWith(S.String, { nullable: true }),
  "files": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "public": S.optionalWith(S.Boolean, { nullable: true }),
  "created_at": S.optionalWith(S.String, { nullable: true }),
  "updated_at": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "comments": S.optionalWith(S.Int, { nullable: true }),
  "comments_enabled": S.optionalWith(S.Boolean, { nullable: true }),
  "user": S.optionalWith(S.String, { nullable: true }),
  "comments_url": S.optionalWith(S.String, { nullable: true }),
  "owner": S.optionalWith(SimpleUser, { nullable: true }),
  "truncated": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class GistsListPublicParams extends S.Struct({
  "since": S.optionalWith(S.String, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class GistsListPublic200 extends S.Array(BaseGist) {}

export class GistsListStarredParams extends S.Struct({
  "since": S.optionalWith(S.String, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class GistsListStarred200 extends S.Array(BaseGist) {}

export class GistsGetParams extends S.Struct({
  
}) {}

export class GistsGet403 extends S.Struct({
  "block": S.optionalWith(S.Struct({
  "reason": S.optionalWith(S.String, { nullable: true }),
  "created_at": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class GistsDeleteParams extends S.Struct({
  
}) {}

export class GistsUpdateParams extends S.Struct({
  
}) {}

export class GistsUpdateRequest extends S.Class<GistsUpdateRequest>("GistsUpdateRequest")({
  /**
* The description of the gist.
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* The gist files to be updated, renamed, or deleted. Each `key` must match the current filename
* (including extension) of the targeted gist file. For example: `hello.py`.
* 
* To delete a file, set the whole file to null. For example: `hello.py : null`. The file will also be
* deleted if the specified object does not contain at least one of `content` or `filename`.
*/
"files": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class GistsListCommentsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* A comment made to a gist.
*/
export class GistComment extends S.Class<GistComment>("GistComment")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  /**
* The comment text.
*/
"body": S.String.pipe(S.maxLength(65535)),
  "user": S.NullOr(NullableSimpleUser),
  "created_at": S.String,
  "updated_at": S.String,
  "author_association": AuthorAssociation
}) {}

export class GistsListComments200 extends S.Array(GistComment) {}

export class GistsCreateCommentParams extends S.Struct({
  
}) {}

export class GistsCreateCommentRequest extends S.Class<GistsCreateCommentRequest>("GistsCreateCommentRequest")({
  /**
* The comment text.
*/
"body": S.String.pipe(S.maxLength(65535))
}) {}

export class GistsGetCommentParams extends S.Struct({
  
}) {}

export class GistsGetComment403 extends S.Struct({
  "block": S.optionalWith(S.Struct({
  "reason": S.optionalWith(S.String, { nullable: true }),
  "created_at": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class GistsDeleteCommentParams extends S.Struct({
  
}) {}

export class GistsUpdateCommentParams extends S.Struct({
  
}) {}

export class GistsUpdateCommentRequest extends S.Class<GistsUpdateCommentRequest>("GistsUpdateCommentRequest")({
  /**
* The comment text.
*/
"body": S.String.pipe(S.maxLength(65535))
}) {}

export class GistsListCommitsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Gist Commit
*/
export class GistCommit extends S.Class<GistCommit>("GistCommit")({
  "url": S.String,
  "version": S.String,
  "user": S.NullOr(NullableSimpleUser),
  "change_status": S.Struct({
  "total": S.optionalWith(S.Int, { nullable: true }),
  "additions": S.optionalWith(S.Int, { nullable: true }),
  "deletions": S.optionalWith(S.Int, { nullable: true })
}),
  "committed_at": S.String
}) {}

export class GistsListCommits200 extends S.Array(GistCommit) {}

export class GistsListForksParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class GistsListForks200 extends S.Array(GistSimple) {}

export class GistsForkParams extends S.Struct({
  
}) {}

export class GistsCheckIsStarredParams extends S.Struct({
  
}) {}

export class GistsCheckIsStarred404 extends S.Struct({
  
}) {}

export class GistsStarParams extends S.Struct({
  
}) {}

export class GistsUnstarParams extends S.Struct({
  
}) {}

export class GistsGetRevisionParams extends S.Struct({
  
}) {}

export class GitignoreGetAllTemplates200 extends S.Array(S.String) {}

/**
* Gitignore Template
*/
export class GitignoreTemplate extends S.Class<GitignoreTemplate>("GitignoreTemplate")({
  "name": S.String,
  "source": S.String
}) {}

export class AppsListReposAccessibleToInstallationParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class AppsListReposAccessibleToInstallation200 extends S.Struct({
  "total_count": S.Int,
  "repositories": S.Array(Repository),
  "repository_selection": S.optionalWith(S.String, { nullable: true })
}) {}

export class IssuesListParamsFilter extends S.Literal("assigned", "created", "mentioned", "subscribed", "repos", "all") {}

export class IssuesListParamsState extends S.Literal("open", "closed", "all") {}

export class IssuesListParamsSort extends S.Literal("created", "updated", "comments") {}

export class IssuesListParamsDirection extends S.Literal("asc", "desc") {}

export class IssuesListParams extends S.Struct({
  "filter": S.optionalWith(IssuesListParamsFilter, { nullable: true, default: () => "assigned" as const }),
  "state": S.optionalWith(IssuesListParamsState, { nullable: true, default: () => "open" as const }),
  "labels": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(IssuesListParamsSort, { nullable: true, default: () => "created" as const }),
  "direction": S.optionalWith(IssuesListParamsDirection, { nullable: true, default: () => "desc" as const }),
  "since": S.optionalWith(S.String, { nullable: true }),
  "collab": S.optionalWith(S.Boolean, { nullable: true }),
  "orgs": S.optionalWith(S.Boolean, { nullable: true }),
  "owned": S.optionalWith(S.Boolean, { nullable: true }),
  "pulls": S.optionalWith(S.Boolean, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class IssuesList200 extends S.Array(Issue) {}

export class LicensesGetAllCommonlyUsedParams extends S.Struct({
  "featured": S.optionalWith(S.Boolean, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* License Simple
*/
export class LicenseSimple extends S.Class<LicenseSimple>("LicenseSimple")({
  "key": S.String,
  "name": S.String,
  "url": S.NullOr(S.String),
  "spdx_id": S.NullOr(S.String),
  "node_id": S.String,
  "html_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class LicensesGetAllCommonlyUsed200 extends S.Array(LicenseSimple) {}

/**
* License
*/
export class License extends S.Class<License>("License")({
  "key": S.String,
  "name": S.String,
  "spdx_id": S.NullOr(S.String),
  "url": S.NullOr(S.String),
  "node_id": S.String,
  "html_url": S.String,
  "description": S.String,
  "implementation": S.String,
  "permissions": S.Array(S.String),
  "conditions": S.Array(S.String),
  "limitations": S.Array(S.String),
  "body": S.String,
  "featured": S.Boolean
}) {}

/**
* The rendering mode.
*/
export class MarkdownRenderRequestMode extends S.Literal("markdown", "gfm") {}

export class MarkdownRenderRequest extends S.Class<MarkdownRenderRequest>("MarkdownRenderRequest")({
  /**
* The Markdown text to render in HTML.
*/
"text": S.String,
  /**
* The rendering mode.
*/
"mode": S.optionalWith(MarkdownRenderRequestMode, { nullable: true, default: () => "markdown" as const }),
  /**
* The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.
*/
"context": S.optionalWith(S.String, { nullable: true })
}) {}

export class AppsGetSubscriptionPlanForAccountParams extends S.Struct({
  
}) {}

export class MarketplaceListingPlanPriceModel extends S.Literal("FREE", "FLAT_RATE", "PER_UNIT") {}

/**
* Marketplace Listing Plan
*/
export class MarketplaceListingPlan extends S.Class<MarketplaceListingPlan>("MarketplaceListingPlan")({
  "url": S.String,
  "accounts_url": S.String,
  "id": S.Int,
  "number": S.Int,
  "name": S.String,
  "description": S.String,
  "monthly_price_in_cents": S.Int,
  "yearly_price_in_cents": S.Int,
  "price_model": MarketplaceListingPlanPriceModel,
  "has_free_trial": S.Boolean,
  "unit_name": S.NullOr(S.String),
  "state": S.String,
  "bullets": S.Array(S.String)
}) {}

/**
* Marketplace Purchase
*/
export class MarketplacePurchase extends S.Class<MarketplacePurchase>("MarketplacePurchase")({
  "url": S.String,
  "type": S.String,
  "id": S.Int,
  "login": S.String,
  "organization_billing_email": S.optionalWith(S.String, { nullable: true }),
  "email": S.optionalWith(S.String, { nullable: true }),
  "marketplace_pending_change": S.optionalWith(S.Struct({
  "is_installed": S.optionalWith(S.Boolean, { nullable: true }),
  "effective_date": S.optionalWith(S.String, { nullable: true }),
  "unit_count": S.optionalWith(S.Int, { nullable: true }),
  "id": S.optionalWith(S.Int, { nullable: true }),
  "plan": S.optionalWith(MarketplaceListingPlan, { nullable: true })
}), { nullable: true }),
  "marketplace_purchase": S.Struct({
  "billing_cycle": S.optionalWith(S.String, { nullable: true }),
  "next_billing_date": S.optionalWith(S.String, { nullable: true }),
  "is_installed": S.optionalWith(S.Boolean, { nullable: true }),
  "unit_count": S.optionalWith(S.Int, { nullable: true }),
  "on_free_trial": S.optionalWith(S.Boolean, { nullable: true }),
  "free_trial_ends_on": S.optionalWith(S.String, { nullable: true }),
  "updated_at": S.optionalWith(S.String, { nullable: true }),
  "plan": S.optionalWith(MarketplaceListingPlan, { nullable: true })
})
}) {}

export class AppsListPlansParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class AppsListPlans200 extends S.Array(MarketplaceListingPlan) {}

export class AppsListAccountsForPlanParamsSort extends S.Literal("created", "updated") {}

export class AppsListAccountsForPlanParamsDirection extends S.Literal("asc", "desc") {}

export class AppsListAccountsForPlanParams extends S.Struct({
  "sort": S.optionalWith(AppsListAccountsForPlanParamsSort, { nullable: true, default: () => "created" as const }),
  "direction": S.optionalWith(AppsListAccountsForPlanParamsDirection, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class AppsListAccountsForPlan200 extends S.Array(MarketplacePurchase) {}

export class AppsGetSubscriptionPlanForAccountStubbedParams extends S.Struct({
  
}) {}

export class AppsListPlansStubbedParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class AppsListPlansStubbed200 extends S.Array(MarketplaceListingPlan) {}

export class AppsListAccountsForPlanStubbedParamsSort extends S.Literal("created", "updated") {}

export class AppsListAccountsForPlanStubbedParamsDirection extends S.Literal("asc", "desc") {}

export class AppsListAccountsForPlanStubbedParams extends S.Struct({
  "sort": S.optionalWith(AppsListAccountsForPlanStubbedParamsSort, { nullable: true, default: () => "created" as const }),
  "direction": S.optionalWith(AppsListAccountsForPlanStubbedParamsDirection, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class AppsListAccountsForPlanStubbed200 extends S.Array(MarketplacePurchase) {}

/**
* Api Overview
*/
export class ApiOverview extends S.Class<ApiOverview>("ApiOverview")({
  "verifiable_password_authentication": S.Boolean,
  "ssh_key_fingerprints": S.optionalWith(S.Struct({
  "SHA256_RSA": S.optionalWith(S.String, { nullable: true }),
  "SHA256_DSA": S.optionalWith(S.String, { nullable: true }),
  "SHA256_ECDSA": S.optionalWith(S.String, { nullable: true }),
  "SHA256_ED25519": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  "ssh_keys": S.optionalWith(S.Array(S.String), { nullable: true }),
  "hooks": S.optionalWith(S.Array(S.String), { nullable: true }),
  "github_enterprise_importer": S.optionalWith(S.Array(S.String), { nullable: true }),
  "web": S.optionalWith(S.Array(S.String), { nullable: true }),
  "api": S.optionalWith(S.Array(S.String), { nullable: true }),
  "git": S.optionalWith(S.Array(S.String), { nullable: true }),
  "packages": S.optionalWith(S.Array(S.String), { nullable: true }),
  "pages": S.optionalWith(S.Array(S.String), { nullable: true }),
  "importer": S.optionalWith(S.Array(S.String), { nullable: true }),
  "actions": S.optionalWith(S.Array(S.String), { nullable: true }),
  "actions_macos": S.optionalWith(S.Array(S.String), { nullable: true }),
  "codespaces": S.optionalWith(S.Array(S.String), { nullable: true }),
  "dependabot": S.optionalWith(S.Array(S.String), { nullable: true }),
  "copilot": S.optionalWith(S.Array(S.String), { nullable: true }),
  "domains": S.optionalWith(S.Struct({
  "website": S.optionalWith(S.Array(S.String), { nullable: true }),
  "codespaces": S.optionalWith(S.Array(S.String), { nullable: true }),
  "copilot": S.optionalWith(S.Array(S.String), { nullable: true }),
  "packages": S.optionalWith(S.Array(S.String), { nullable: true }),
  "actions": S.optionalWith(S.Array(S.String), { nullable: true }),
  "actions_inbound": S.optionalWith(S.Struct({
  "full_domains": S.optionalWith(S.Array(S.String), { nullable: true }),
  "wildcard_domains": S.optionalWith(S.Array(S.String), { nullable: true })
}), { nullable: true }),
  "artifact_attestations": S.optionalWith(S.Struct({
  "trust_domain": S.optionalWith(S.String, { nullable: true }),
  "services": S.optionalWith(S.Array(S.String), { nullable: true })
}), { nullable: true })
}), { nullable: true })
}) {}

export class ActivityListPublicEventsForRepoNetworkParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActivityListPublicEventsForRepoNetwork200 extends S.Array(Event) {}

export class ActivityListNotificationsForAuthenticatedUserParams extends S.Struct({
  "all": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "participating": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "since": S.optionalWith(S.String, { nullable: true }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 50 as const })
}) {}

export class SecurityAndAnalysisAdvancedSecurityStatus extends S.Literal("enabled", "disabled") {}

export class SecurityAndAnalysisCodeSecurityStatus extends S.Literal("enabled", "disabled") {}

/**
* The enablement status of Dependabot security updates for the repository.
*/
export class SecurityAndAnalysisDependabotSecurityUpdatesStatus extends S.Literal("enabled", "disabled") {}

export class SecurityAndAnalysisSecretScanningStatus extends S.Literal("enabled", "disabled") {}

export class SecurityAndAnalysisSecretScanningPushProtectionStatus extends S.Literal("enabled", "disabled") {}

export class SecurityAndAnalysisSecretScanningNonProviderPatternsStatus extends S.Literal("enabled", "disabled") {}

export class SecurityAndAnalysisSecretScanningAiDetectionStatus extends S.Literal("enabled", "disabled") {}

export class SecurityAndAnalysis extends S.Class<SecurityAndAnalysis>("SecurityAndAnalysis")({
  /**
* Enable or disable GitHub Advanced Security for the repository.
* 
* For standalone Code Scanning or Secret Protection products, this parameter cannot be used.
*/
"advanced_security": S.optionalWith(S.Struct({
  "status": S.optionalWith(SecurityAndAnalysisAdvancedSecurityStatus, { nullable: true })
}), { nullable: true }),
  "code_security": S.optionalWith(S.Struct({
  "status": S.optionalWith(SecurityAndAnalysisCodeSecurityStatus, { nullable: true })
}), { nullable: true }),
  /**
* Enable or disable Dependabot security updates for the repository.
*/
"dependabot_security_updates": S.optionalWith(S.Struct({
  /**
* The enablement status of Dependabot security updates for the repository.
*/
"status": S.optionalWith(SecurityAndAnalysisDependabotSecurityUpdatesStatus, { nullable: true })
}), { nullable: true }),
  "secret_scanning": S.optionalWith(S.Struct({
  "status": S.optionalWith(SecurityAndAnalysisSecretScanningStatus, { nullable: true })
}), { nullable: true }),
  "secret_scanning_push_protection": S.optionalWith(S.Struct({
  "status": S.optionalWith(SecurityAndAnalysisSecretScanningPushProtectionStatus, { nullable: true })
}), { nullable: true }),
  "secret_scanning_non_provider_patterns": S.optionalWith(S.Struct({
  "status": S.optionalWith(SecurityAndAnalysisSecretScanningNonProviderPatternsStatus, { nullable: true })
}), { nullable: true }),
  "secret_scanning_ai_detection": S.optionalWith(S.Struct({
  "status": S.optionalWith(SecurityAndAnalysisSecretScanningAiDetectionStatus, { nullable: true })
}), { nullable: true })
}) {}

/**
* Minimal Repository
*/
export class MinimalRepository extends S.Class<MinimalRepository>("MinimalRepository")({
  "id": S.Int,
  "node_id": S.String,
  "name": S.String,
  "full_name": S.String,
  "owner": SimpleUser,
  "private": S.Boolean,
  "html_url": S.String,
  "description": S.NullOr(S.String),
  "fork": S.Boolean,
  "url": S.String,
  "archive_url": S.String,
  "assignees_url": S.String,
  "blobs_url": S.String,
  "branches_url": S.String,
  "collaborators_url": S.String,
  "comments_url": S.String,
  "commits_url": S.String,
  "compare_url": S.String,
  "contents_url": S.String,
  "contributors_url": S.String,
  "deployments_url": S.String,
  "downloads_url": S.String,
  "events_url": S.String,
  "forks_url": S.String,
  "git_commits_url": S.String,
  "git_refs_url": S.String,
  "git_tags_url": S.String,
  "git_url": S.optionalWith(S.String, { nullable: true }),
  "issue_comment_url": S.String,
  "issue_events_url": S.String,
  "issues_url": S.String,
  "keys_url": S.String,
  "labels_url": S.String,
  "languages_url": S.String,
  "merges_url": S.String,
  "milestones_url": S.String,
  "notifications_url": S.String,
  "pulls_url": S.String,
  "releases_url": S.String,
  "ssh_url": S.optionalWith(S.String, { nullable: true }),
  "stargazers_url": S.String,
  "statuses_url": S.String,
  "subscribers_url": S.String,
  "subscription_url": S.String,
  "tags_url": S.String,
  "teams_url": S.String,
  "trees_url": S.String,
  "clone_url": S.optionalWith(S.String, { nullable: true }),
  "mirror_url": S.optionalWith(S.String, { nullable: true }),
  "hooks_url": S.String,
  "svn_url": S.optionalWith(S.String, { nullable: true }),
  "homepage": S.optionalWith(S.String, { nullable: true }),
  "language": S.optionalWith(S.String, { nullable: true }),
  "forks_count": S.optionalWith(S.Int, { nullable: true }),
  "stargazers_count": S.optionalWith(S.Int, { nullable: true }),
  "watchers_count": S.optionalWith(S.Int, { nullable: true }),
  /**
* The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
*/
"size": S.optionalWith(S.Int, { nullable: true }),
  "default_branch": S.optionalWith(S.String, { nullable: true }),
  "open_issues_count": S.optionalWith(S.Int, { nullable: true }),
  "is_template": S.optionalWith(S.Boolean, { nullable: true }),
  "topics": S.optionalWith(S.Array(S.String), { nullable: true }),
  "has_issues": S.optionalWith(S.Boolean, { nullable: true }),
  "has_projects": S.optionalWith(S.Boolean, { nullable: true }),
  "has_wiki": S.optionalWith(S.Boolean, { nullable: true }),
  "has_pages": S.optionalWith(S.Boolean, { nullable: true }),
  "has_downloads": S.optionalWith(S.Boolean, { nullable: true }),
  "has_discussions": S.optionalWith(S.Boolean, { nullable: true }),
  "archived": S.optionalWith(S.Boolean, { nullable: true }),
  "disabled": S.optionalWith(S.Boolean, { nullable: true }),
  "visibility": S.optionalWith(S.String, { nullable: true }),
  "pushed_at": S.optionalWith(S.String, { nullable: true }),
  "created_at": S.optionalWith(S.String, { nullable: true }),
  "updated_at": S.optionalWith(S.String, { nullable: true }),
  "permissions": S.optionalWith(S.Struct({
  "admin": S.optionalWith(S.Boolean, { nullable: true }),
  "maintain": S.optionalWith(S.Boolean, { nullable: true }),
  "push": S.optionalWith(S.Boolean, { nullable: true }),
  "triage": S.optionalWith(S.Boolean, { nullable: true }),
  "pull": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  "role_name": S.optionalWith(S.String, { nullable: true }),
  "temp_clone_token": S.optionalWith(S.String, { nullable: true }),
  "delete_branch_on_merge": S.optionalWith(S.Boolean, { nullable: true }),
  "subscribers_count": S.optionalWith(S.Int, { nullable: true }),
  "network_count": S.optionalWith(S.Int, { nullable: true }),
  "code_of_conduct": S.optionalWith(CodeOfConduct, { nullable: true }),
  "license": S.optionalWith(S.Struct({
  "key": S.optionalWith(S.String, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "spdx_id": S.optionalWith(S.String, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true }),
  "node_id": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  "forks": S.optionalWith(S.Int, { nullable: true }),
  "open_issues": S.optionalWith(S.Int, { nullable: true }),
  "watchers": S.optionalWith(S.Int, { nullable: true }),
  "allow_forking": S.optionalWith(S.Boolean, { nullable: true }),
  "web_commit_signoff_required": S.optionalWith(S.Boolean, { nullable: true }),
  "security_and_analysis": S.optionalWith(SecurityAndAnalysis, { nullable: true }),
  /**
* The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
*/
"custom_properties": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

/**
* Thread
*/
export class Thread extends S.Class<Thread>("Thread")({
  "id": S.String,
  "repository": MinimalRepository,
  "subject": S.Struct({
  "title": S.String,
  "url": S.String,
  "latest_comment_url": S.String,
  "type": S.String
}),
  "reason": S.String,
  "unread": S.Boolean,
  "updated_at": S.String,
  "last_read_at": S.NullOr(S.String),
  "url": S.String,
  "subscription_url": S.String
}) {}

export class ActivityListNotificationsForAuthenticatedUser200 extends S.Array(Thread) {}

export class ActivityMarkNotificationsAsReadRequest extends S.Class<ActivityMarkNotificationsAsReadRequest>("ActivityMarkNotificationsAsReadRequest")({
  /**
* Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
*/
"last_read_at": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether the notification has been read.
*/
"read": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class ActivityMarkNotificationsAsRead202 extends S.Struct({
  "message": S.optionalWith(S.String, { nullable: true })
}) {}

export class ActivityGetThreadParams extends S.Struct({
  
}) {}

export class ActivityMarkThreadAsDoneParams extends S.Struct({
  
}) {}

export class ActivityMarkThreadAsReadParams extends S.Struct({
  
}) {}

export class ActivityGetThreadSubscriptionForAuthenticatedUserParams extends S.Struct({
  
}) {}

/**
* Thread Subscription
*/
export class ThreadSubscription extends S.Class<ThreadSubscription>("ThreadSubscription")({
  "subscribed": S.Boolean,
  "ignored": S.Boolean,
  "reason": S.NullOr(S.String),
  "created_at": S.NullOr(S.String),
  "url": S.String,
  "thread_url": S.optionalWith(S.String, { nullable: true }),
  "repository_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class ActivitySetThreadSubscriptionParams extends S.Struct({
  
}) {}

export class ActivitySetThreadSubscriptionRequest extends S.Class<ActivitySetThreadSubscriptionRequest>("ActivitySetThreadSubscriptionRequest")({
  /**
* Whether to block all notifications from a thread.
*/
"ignored": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

export class ActivityDeleteThreadSubscriptionParams extends S.Struct({
  
}) {}

export class MetaGetOctocatParams extends S.Struct({
  "s": S.optionalWith(S.String, { nullable: true })
}) {}

export class OrgsListParams extends S.Struct({
  "since": S.optionalWith(S.Int, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

/**
* A GitHub organization.
*/
export class OrganizationSimple extends S.Class<OrganizationSimple>("OrganizationSimple")({
  "login": S.String,
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "repos_url": S.String,
  "events_url": S.String,
  "hooks_url": S.String,
  "issues_url": S.String,
  "members_url": S.String,
  "public_members_url": S.String,
  "avatar_url": S.String,
  "description": S.NullOr(S.String)
}) {}

export class OrgsList200 extends S.Array(OrganizationSimple) {}

export class DependabotRepositoryAccessForOrgParams extends S.Struct({
  "page": S.optionalWith(S.Int.pipe(S.greaterThanOrEqualTo(1)), { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int.pipe(S.greaterThanOrEqualTo(1), S.lessThanOrEqualTo(100)), { nullable: true, default: () => 30 as const })
}) {}

/**
* The default repository access level for Dependabot updates.
*/
export class DependabotRepositoryAccessDetailsDefaultLevel extends S.Literal("public", "internal") {}

/**
* A GitHub repository.
*/
export class NullableSimpleRepository extends S.Class<NullableSimpleRepository>("NullableSimpleRepository")({
  /**
* A unique identifier of the repository.
*/
"id": S.Int,
  /**
* The GraphQL identifier of the repository.
*/
"node_id": S.String,
  /**
* The name of the repository.
*/
"name": S.String,
  /**
* The full, globally unique, name of the repository.
*/
"full_name": S.String,
  "owner": SimpleUser,
  /**
* Whether the repository is private.
*/
"private": S.Boolean,
  /**
* The URL to view the repository on GitHub.com.
*/
"html_url": S.String,
  /**
* The repository description.
*/
"description": S.NullOr(S.String),
  /**
* Whether the repository is a fork.
*/
"fork": S.Boolean,
  /**
* The URL to get more information about the repository from the GitHub API.
*/
"url": S.String,
  /**
* A template for the API URL to download the repository as an archive.
*/
"archive_url": S.String,
  /**
* A template for the API URL to list the available assignees for issues in the repository.
*/
"assignees_url": S.String,
  /**
* A template for the API URL to create or retrieve a raw Git blob in the repository.
*/
"blobs_url": S.String,
  /**
* A template for the API URL to get information about branches in the repository.
*/
"branches_url": S.String,
  /**
* A template for the API URL to get information about collaborators of the repository.
*/
"collaborators_url": S.String,
  /**
* A template for the API URL to get information about comments on the repository.
*/
"comments_url": S.String,
  /**
* A template for the API URL to get information about commits on the repository.
*/
"commits_url": S.String,
  /**
* A template for the API URL to compare two commits or refs.
*/
"compare_url": S.String,
  /**
* A template for the API URL to get the contents of the repository.
*/
"contents_url": S.String,
  /**
* A template for the API URL to list the contributors to the repository.
*/
"contributors_url": S.String,
  /**
* The API URL to list the deployments of the repository.
*/
"deployments_url": S.String,
  /**
* The API URL to list the downloads on the repository.
*/
"downloads_url": S.String,
  /**
* The API URL to list the events of the repository.
*/
"events_url": S.String,
  /**
* The API URL to list the forks of the repository.
*/
"forks_url": S.String,
  /**
* A template for the API URL to get information about Git commits of the repository.
*/
"git_commits_url": S.String,
  /**
* A template for the API URL to get information about Git refs of the repository.
*/
"git_refs_url": S.String,
  /**
* A template for the API URL to get information about Git tags of the repository.
*/
"git_tags_url": S.String,
  /**
* A template for the API URL to get information about issue comments on the repository.
*/
"issue_comment_url": S.String,
  /**
* A template for the API URL to get information about issue events on the repository.
*/
"issue_events_url": S.String,
  /**
* A template for the API URL to get information about issues on the repository.
*/
"issues_url": S.String,
  /**
* A template for the API URL to get information about deploy keys on the repository.
*/
"keys_url": S.String,
  /**
* A template for the API URL to get information about labels of the repository.
*/
"labels_url": S.String,
  /**
* The API URL to get information about the languages of the repository.
*/
"languages_url": S.String,
  /**
* The API URL to merge branches in the repository.
*/
"merges_url": S.String,
  /**
* A template for the API URL to get information about milestones of the repository.
*/
"milestones_url": S.String,
  /**
* A template for the API URL to get information about notifications on the repository.
*/
"notifications_url": S.String,
  /**
* A template for the API URL to get information about pull requests on the repository.
*/
"pulls_url": S.String,
  /**
* A template for the API URL to get information about releases on the repository.
*/
"releases_url": S.String,
  /**
* The API URL to list the stargazers on the repository.
*/
"stargazers_url": S.String,
  /**
* A template for the API URL to get information about statuses of a commit.
*/
"statuses_url": S.String,
  /**
* The API URL to list the subscribers on the repository.
*/
"subscribers_url": S.String,
  /**
* The API URL to subscribe to notifications for this repository.
*/
"subscription_url": S.String,
  /**
* The API URL to get information about tags on the repository.
*/
"tags_url": S.String,
  /**
* The API URL to list the teams on the repository.
*/
"teams_url": S.String,
  /**
* A template for the API URL to create or retrieve a raw Git tree of the repository.
*/
"trees_url": S.String,
  /**
* The API URL to list the hooks on the repository.
*/
"hooks_url": S.String
}) {}

/**
* Information about repositories that Dependabot is able to access in an organization
*/
export class DependabotRepositoryAccessDetails extends S.Class<DependabotRepositoryAccessDetails>("DependabotRepositoryAccessDetails")({
  /**
* The default repository access level for Dependabot updates.
*/
"default_level": S.optionalWith(DependabotRepositoryAccessDetailsDefaultLevel, { nullable: true }),
  "accessible_repositories": S.optionalWith(S.Array(NullableSimpleRepository), { nullable: true })
}) {}

export class DependabotUpdateRepositoryAccessForOrgParams extends S.Struct({
  
}) {}

export class DependabotUpdateRepositoryAccessForOrgRequest extends S.Class<DependabotUpdateRepositoryAccessForOrgRequest>("DependabotUpdateRepositoryAccessForOrgRequest")({
  /**
* List of repository IDs to add.
*/
"repository_ids_to_add": S.optionalWith(S.Array(S.Int), { nullable: true }),
  /**
* List of repository IDs to remove.
*/
"repository_ids_to_remove": S.optionalWith(S.Array(S.Int), { nullable: true })
}) {}

export class DependabotSetRepositoryAccessDefaultLevelParams extends S.Struct({
  
}) {}

/**
* The default repository access level for Dependabot updates.
*/
export class DependabotSetRepositoryAccessDefaultLevelRequestDefaultLevel extends S.Literal("public", "internal") {}

export class DependabotSetRepositoryAccessDefaultLevelRequest extends S.Class<DependabotSetRepositoryAccessDefaultLevelRequest>("DependabotSetRepositoryAccessDefaultLevelRequest")({
  /**
* The default repository access level for Dependabot updates.
*/
"default_level": DependabotSetRepositoryAccessDefaultLevelRequestDefaultLevel
}) {}

export class BillingGetGithubBillingUsageReportOrgParams extends S.Struct({
  "year": S.optionalWith(S.Int, { nullable: true }),
  "month": S.optionalWith(S.Int, { nullable: true }),
  "day": S.optionalWith(S.Int, { nullable: true }),
  "hour": S.optionalWith(S.Int, { nullable: true })
}) {}

export class BillingUsageReport extends S.Class<BillingUsageReport>("BillingUsageReport")({
  "usageItems": S.optionalWith(S.Array(S.Struct({
  /**
* Date of the usage line item.
*/
"date": S.String,
  /**
* Product name.
*/
"product": S.String,
  /**
* SKU name.
*/
"sku": S.String,
  /**
* Quantity of the usage line item.
*/
"quantity": S.Int,
  /**
* Unit type of the usage line item.
*/
"unitType": S.String,
  /**
* Price per unit of the usage line item.
*/
"pricePerUnit": S.Number,
  /**
* Gross amount of the usage line item.
*/
"grossAmount": S.Number,
  /**
* Discount amount of the usage line item.
*/
"discountAmount": S.Number,
  /**
* Net amount of the usage line item.
*/
"netAmount": S.Number,
  /**
* Name of the organization.
*/
"organizationName": S.String,
  /**
* Name of the repository.
*/
"repositoryName": S.optionalWith(S.String, { nullable: true })
})), { nullable: true })
}) {}

export class BillingGetGithubBillingUsageReportOrg503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class OrgsGetParams extends S.Struct({
  
}) {}

/**
* Organization Full
*/
export class OrganizationFull extends S.Class<OrganizationFull>("OrganizationFull")({
  "login": S.String,
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "repos_url": S.String,
  "events_url": S.String,
  "hooks_url": S.String,
  "issues_url": S.String,
  "members_url": S.String,
  "public_members_url": S.String,
  "avatar_url": S.String,
  "description": S.NullOr(S.String),
  "name": S.optionalWith(S.String, { nullable: true }),
  "company": S.optionalWith(S.String, { nullable: true }),
  "blog": S.optionalWith(S.String, { nullable: true }),
  "location": S.optionalWith(S.String, { nullable: true }),
  "email": S.optionalWith(S.String, { nullable: true }),
  "twitter_username": S.optionalWith(S.String, { nullable: true }),
  "is_verified": S.optionalWith(S.Boolean, { nullable: true }),
  "has_organization_projects": S.Boolean,
  "has_repository_projects": S.Boolean,
  "public_repos": S.Int,
  "public_gists": S.Int,
  "followers": S.Int,
  "following": S.Int,
  "html_url": S.String,
  "type": S.String,
  "total_private_repos": S.optionalWith(S.Int, { nullable: true }),
  "owned_private_repos": S.optionalWith(S.Int, { nullable: true }),
  "private_gists": S.optionalWith(S.Int, { nullable: true }),
  "disk_usage": S.optionalWith(S.Int, { nullable: true }),
  /**
* The number of collaborators on private repositories.
* 
* This field may be null if the number of private repositories is over 50,000.
*/
"collaborators": S.optionalWith(S.Int, { nullable: true }),
  "billing_email": S.optionalWith(S.String, { nullable: true }),
  "plan": S.optionalWith(S.Struct({
  "name": S.String,
  "space": S.Int,
  "private_repos": S.Int,
  "filled_seats": S.optionalWith(S.Int, { nullable: true }),
  "seats": S.optionalWith(S.Int, { nullable: true })
}), { nullable: true }),
  "default_repository_permission": S.optionalWith(S.String, { nullable: true }),
  /**
* The default branch for repositories created in this organization.
*/
"default_repository_branch": S.optionalWith(S.String, { nullable: true }),
  "members_can_create_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  "two_factor_requirement_enabled": S.optionalWith(S.Boolean, { nullable: true }),
  "members_allowed_repository_creation_type": S.optionalWith(S.String, { nullable: true }),
  "members_can_create_public_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  "members_can_create_private_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  "members_can_create_internal_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  "members_can_create_pages": S.optionalWith(S.Boolean, { nullable: true }),
  "members_can_create_public_pages": S.optionalWith(S.Boolean, { nullable: true }),
  "members_can_create_private_pages": S.optionalWith(S.Boolean, { nullable: true }),
  "members_can_delete_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  "members_can_change_repo_visibility": S.optionalWith(S.Boolean, { nullable: true }),
  "members_can_invite_outside_collaborators": S.optionalWith(S.Boolean, { nullable: true }),
  "members_can_delete_issues": S.optionalWith(S.Boolean, { nullable: true }),
  "display_commenter_full_name_setting_enabled": S.optionalWith(S.Boolean, { nullable: true }),
  "readers_can_create_discussions": S.optionalWith(S.Boolean, { nullable: true }),
  "members_can_create_teams": S.optionalWith(S.Boolean, { nullable: true }),
  "members_can_view_dependency_insights": S.optionalWith(S.Boolean, { nullable: true }),
  "members_can_fork_private_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  "web_commit_signoff_required": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
* 
* This field is only visible to organization owners or members of a team with the security manager role.
*/
"advanced_security_enabled_for_new_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether Dependabot alerts are automatically enabled for new repositories and repositories transferred to this organization.
* 
* This field is only visible to organization owners or members of a team with the security manager role.
*/
"dependabot_alerts_enabled_for_new_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether Dependabot security updates are automatically enabled for new repositories and repositories transferred to this organization.
* 
* This field is only visible to organization owners or members of a team with the security manager role.
*/
"dependabot_security_updates_enabled_for_new_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether dependency graph is automatically enabled for new repositories and repositories transferred to this organization.
* 
* This field is only visible to organization owners or members of a team with the security manager role.
*/
"dependency_graph_enabled_for_new_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether secret scanning is automatically enabled for new repositories and repositories transferred to this organization.
* 
* This field is only visible to organization owners or members of a team with the security manager role.
*/
"secret_scanning_enabled_for_new_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether secret scanning push protection is automatically enabled for new repositories and repositories transferred to this organization.
* 
* This field is only visible to organization owners or members of a team with the security manager role.
*/
"secret_scanning_push_protection_enabled_for_new_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
*/
"secret_scanning_push_protection_custom_link_enabled": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* An optional URL string to display to contributors who are blocked from pushing a secret.
*/
"secret_scanning_push_protection_custom_link": S.optionalWith(S.String, { nullable: true }),
  "created_at": S.String,
  "updated_at": S.String,
  "archived_at": S.NullOr(S.String),
  /**
* Controls whether or not deploy keys may be added and used for repositories in the organization.
*/
"deploy_keys_enabled_for_repositories": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class OrgsDeleteParams extends S.Struct({
  
}) {}

export class OrgsDelete202 extends S.Record({ key: S.String, value: S.Unknown }) {}

export class OrgsUpdateParams extends S.Struct({
  
}) {}

/**
* Default permission level members have for organization repositories.
*/
export class OrgsUpdateRequestDefaultRepositoryPermission extends S.Literal("read", "write", "admin", "none") {}

/**
* Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud. 
* **Note:** This parameter is closing down and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
*/
export class OrgsUpdateRequestMembersAllowedRepositoryCreationType extends S.Literal("all", "private", "none") {}

export class OrgsUpdateRequest extends S.Class<OrgsUpdateRequest>("OrgsUpdateRequest")({
  /**
* Billing email address. This address is not publicized.
*/
"billing_email": S.optionalWith(S.String, { nullable: true }),
  /**
* The company name.
*/
"company": S.optionalWith(S.String, { nullable: true }),
  /**
* The publicly visible email address.
*/
"email": S.optionalWith(S.String, { nullable: true }),
  /**
* The Twitter username of the company.
*/
"twitter_username": S.optionalWith(S.String, { nullable: true }),
  /**
* The location.
*/
"location": S.optionalWith(S.String, { nullable: true }),
  /**
* The shorthand name of the company.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The description of the company. The maximum size is 160 characters.
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether an organization can use organization projects.
*/
"has_organization_projects": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Whether repositories that belong to the organization can use repository projects.
*/
"has_repository_projects": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Default permission level members have for organization repositories.
*/
"default_repository_permission": S.optionalWith(OrgsUpdateRequestDefaultRepositoryPermission, { nullable: true, default: () => "read" as const }),
  /**
* Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
*/
"members_can_create_repositories": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
*/
"members_can_create_internal_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
*/
"members_can_create_private_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
*/
"members_can_create_public_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud. 
* **Note:** This parameter is closing down and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
*/
"members_allowed_repository_creation_type": S.optionalWith(OrgsUpdateRequestMembersAllowedRepositoryCreationType, { nullable: true }),
  /**
* Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
*/
"members_can_create_pages": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
*/
"members_can_create_public_pages": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
*/
"members_can_create_private_pages": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Whether organization members can fork private organization repositories.
*/
"members_can_fork_private_repositories": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.
*/
"web_commit_signoff_required": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "blog": S.optionalWith(S.String, { nullable: true }),
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to this organization.
* 
* To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
*/
"advanced_security_enabled_for_new_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether Dependabot alerts are automatically enabled for new repositories and repositories transferred to this organization.
* 
* To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
*/
"dependabot_alerts_enabled_for_new_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether Dependabot security updates are automatically enabled for new repositories and repositories transferred to this organization.
* 
* To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
*/
"dependabot_security_updates_enabled_for_new_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether dependency graph is automatically enabled for new repositories and repositories transferred to this organization.
* 
* To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
*/
"dependency_graph_enabled_for_new_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether secret scanning is automatically enabled for new repositories and repositories transferred to this organization.
* 
* To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
*/
"secret_scanning_enabled_for_new_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead.
* 
* Whether secret scanning push protection is automatically enabled for new repositories and repositories transferred to this organization.
* 
* To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
*/
"secret_scanning_push_protection_enabled_for_new_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
*/
"secret_scanning_push_protection_custom_link_enabled": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret.
*/
"secret_scanning_push_protection_custom_link": S.optionalWith(S.String, { nullable: true }),
  /**
* Controls whether or not deploy keys may be added and used for repositories in the organization.
*/
"deploy_keys_enabled_for_repositories": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class OrgsUpdate422 extends S.Union(ValidationError,
ValidationErrorSimple) {}

export class ActionsGetActionsCacheUsageForOrgParams extends S.Struct({
  
}) {}

export class ActionsCacheUsageOrgEnterprise extends S.Class<ActionsCacheUsageOrgEnterprise>("ActionsCacheUsageOrgEnterprise")({
  /**
* The count of active caches across all repositories of an enterprise or an organization.
*/
"total_active_caches_count": S.Int,
  /**
* The total size in bytes of all active cache items across all repositories of an enterprise or an organization.
*/
"total_active_caches_size_in_bytes": S.Int
}) {}

export class ActionsGetActionsCacheUsageByRepoForOrgParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* GitHub Actions Cache Usage by repository.
*/
export class ActionsCacheUsageByRepository extends S.Class<ActionsCacheUsageByRepository>("ActionsCacheUsageByRepository")({
  /**
* The repository owner and name for the cache usage being shown.
*/
"full_name": S.String,
  /**
* The sum of the size in bytes of all the active cache items in the repository.
*/
"active_caches_size_in_bytes": S.Int,
  /**
* The number of active caches in the repository.
*/
"active_caches_count": S.Int
}) {}

export class ActionsGetActionsCacheUsageByRepoForOrg200 extends S.Struct({
  "total_count": S.Int,
  "repository_cache_usages": S.Array(ActionsCacheUsageByRepository)
}) {}

export class ActionsListHostedRunnersForOrgParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* The image provider.
*/
export class NullableActionsHostedRunnerPoolImageSource extends S.Literal("github", "partner", "custom") {}

/**
* Provides details of a hosted runner image
*/
export class NullableActionsHostedRunnerPoolImage extends S.Class<NullableActionsHostedRunnerPoolImage>("NullableActionsHostedRunnerPoolImage")({
  /**
* The ID of the image. Use this ID for the `image` parameter when creating a new larger runner.
*/
"id": S.String,
  /**
* Image size in GB.
*/
"size_gb": S.Int,
  /**
* Display name for this image.
*/
"display_name": S.String,
  /**
* The image provider.
*/
"source": NullableActionsHostedRunnerPoolImageSource
}) {}

/**
* Provides details of a particular machine spec.
*/
export class ActionsHostedRunnerMachineSpec extends S.Class<ActionsHostedRunnerMachineSpec>("ActionsHostedRunnerMachineSpec")({
  /**
* The ID used for the `size` parameter when creating a new runner.
*/
"id": S.String,
  /**
* The number of cores.
*/
"cpu_cores": S.Int,
  /**
* The available RAM for the machine spec.
*/
"memory_gb": S.Int,
  /**
* The available SSD storage for the machine spec.
*/
"storage_gb": S.Int
}) {}

/**
* The status of the runner.
*/
export class ActionsHostedRunnerStatus extends S.Literal("Ready", "Provisioning", "Shutdown", "Deleting", "Stuck") {}

/**
* Provides details of Public IP for a GitHub-hosted larger runners
*/
export class PublicIp extends S.Class<PublicIp>("PublicIp")({
  /**
* Whether public IP is enabled.
*/
"enabled": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The prefix for the public IP.
*/
"prefix": S.optionalWith(S.String, { nullable: true }),
  /**
* The length of the IP prefix.
*/
"length": S.optionalWith(S.Int, { nullable: true })
}) {}

/**
* A Github-hosted hosted runner.
*/
export class ActionsHostedRunner extends S.Class<ActionsHostedRunner>("ActionsHostedRunner")({
  /**
* The unique identifier of the hosted runner.
*/
"id": S.Int,
  /**
* The name of the hosted runner.
*/
"name": S.String,
  /**
* The unique identifier of the group that the hosted runner belongs to.
*/
"runner_group_id": S.optionalWith(S.Int, { nullable: true }),
  "image_details": S.NullOr(NullableActionsHostedRunnerPoolImage),
  "machine_size_details": ActionsHostedRunnerMachineSpec,
  /**
* The status of the runner.
*/
"status": ActionsHostedRunnerStatus,
  /**
* The operating system of the image.
*/
"platform": S.String,
  /**
* The maximum amount of hosted runners. Runners will not scale automatically above this number. Use this setting to limit your cost.
*/
"maximum_runners": S.optionalWith(S.Int, { nullable: true, default: () => 10 as const }),
  /**
* Whether public IP is enabled for the hosted runners.
*/
"public_ip_enabled": S.Boolean,
  /**
* The public IP ranges when public IP is enabled for the hosted runners.
*/
"public_ips": S.optionalWith(S.Array(PublicIp), { nullable: true }),
  /**
* The time at which the runner was last used, in ISO 8601 format.
*/
"last_active_on": S.optionalWith(S.String, { nullable: true })
}) {}

export class ActionsListHostedRunnersForOrg200 extends S.Struct({
  "total_count": S.Int,
  "runners": S.Array(ActionsHostedRunner)
}) {}

export class ActionsCreateHostedRunnerForOrgParams extends S.Struct({
  
}) {}

/**
* The source of the runner image.
*/
export class ActionsCreateHostedRunnerForOrgRequestImageSource extends S.Literal("github", "partner", "custom") {}

export class ActionsCreateHostedRunnerForOrgRequest extends S.Class<ActionsCreateHostedRunnerForOrgRequest>("ActionsCreateHostedRunnerForOrgRequest")({
  /**
* Name of the runner. Must be between 1 and 64 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'.
*/
"name": S.String,
  /**
* The image of runner. To list all available images, use `GET /actions/hosted-runners/images/github-owned` or `GET /actions/hosted-runners/images/partner`.
*/
"image": S.Struct({
  /**
* The unique identifier of the runner image.
*/
"id": S.optionalWith(S.String, { nullable: true }),
  /**
* The source of the runner image.
*/
"source": S.optionalWith(ActionsCreateHostedRunnerForOrgRequestImageSource, { nullable: true })
}),
  /**
* The machine size of the runner. To list available sizes, use `GET actions/hosted-runners/machine-sizes`
*/
"size": S.String,
  /**
* The existing runner group to add this runner to.
*/
"runner_group_id": S.Int,
  /**
* The maximum amount of runners to scale up to. Runners will not auto-scale above this number. Use this setting to limit your cost.
*/
"maximum_runners": S.optionalWith(S.Int, { nullable: true }),
  /**
* Whether this runner should be created with a static public IP. Note limit on account. To list limits on account, use `GET actions/hosted-runners/limits`
*/
"enable_static_ip": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class ActionsGetHostedRunnersGithubOwnedImagesForOrgParams extends S.Struct({
  
}) {}

/**
* The image provider.
*/
export class ActionsHostedRunnerCuratedImageSource extends S.Literal("github", "partner", "custom") {}

/**
* Provides details of a hosted runner image
*/
export class ActionsHostedRunnerCuratedImage extends S.Class<ActionsHostedRunnerCuratedImage>("ActionsHostedRunnerCuratedImage")({
  /**
* The ID of the image. Use this ID for the `image` parameter when creating a new larger runner.
*/
"id": S.String,
  /**
* The operating system of the image.
*/
"platform": S.String,
  /**
* Image size in GB.
*/
"size_gb": S.Int,
  /**
* Display name for this image.
*/
"display_name": S.String,
  /**
* The image provider.
*/
"source": ActionsHostedRunnerCuratedImageSource
}) {}

export class ActionsGetHostedRunnersGithubOwnedImagesForOrg200 extends S.Struct({
  "total_count": S.Int,
  "images": S.Array(ActionsHostedRunnerCuratedImage)
}) {}

export class ActionsGetHostedRunnersPartnerImagesForOrgParams extends S.Struct({
  
}) {}

export class ActionsGetHostedRunnersPartnerImagesForOrg200 extends S.Struct({
  "total_count": S.Int,
  "images": S.Array(ActionsHostedRunnerCuratedImage)
}) {}

export class ActionsGetHostedRunnersLimitsForOrgParams extends S.Struct({
  
}) {}

export class ActionsHostedRunnerLimits extends S.Class<ActionsHostedRunnerLimits>("ActionsHostedRunnerLimits")({
  /**
* Provides details of static public IP limits for GitHub-hosted Hosted Runners
*/
"public_ips": S.Struct({
  /**
* The maximum number of static public IP addresses that can be used for Hosted Runners.
*/
"maximum": S.Int,
  /**
* The current number of static public IP addresses in use by Hosted Runners.
*/
"current_usage": S.Int
})
}) {}

export class ActionsGetHostedRunnersMachineSpecsForOrgParams extends S.Struct({
  
}) {}

export class ActionsGetHostedRunnersMachineSpecsForOrg200 extends S.Struct({
  "total_count": S.Int,
  "machine_specs": S.Array(ActionsHostedRunnerMachineSpec)
}) {}

export class ActionsGetHostedRunnersPlatformsForOrgParams extends S.Struct({
  
}) {}

export class ActionsGetHostedRunnersPlatformsForOrg200 extends S.Struct({
  "total_count": S.Int,
  "platforms": S.Array(S.String)
}) {}

export class ActionsGetHostedRunnerForOrgParams extends S.Struct({
  
}) {}

export class ActionsDeleteHostedRunnerForOrgParams extends S.Struct({
  
}) {}

export class ActionsUpdateHostedRunnerForOrgParams extends S.Struct({
  
}) {}

export class ActionsUpdateHostedRunnerForOrgRequest extends S.Class<ActionsUpdateHostedRunnerForOrgRequest>("ActionsUpdateHostedRunnerForOrgRequest")({
  /**
* Name of the runner. Must be between 1 and 64 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The existing runner group to add this runner to.
*/
"runner_group_id": S.optionalWith(S.Int, { nullable: true }),
  /**
* The maximum amount of runners to scale up to. Runners will not auto-scale above this number. Use this setting to limit your cost.
*/
"maximum_runners": S.optionalWith(S.Int, { nullable: true }),
  /**
* Whether this runner should be updated with a static public IP. Note limit on account. To list limits on account, use `GET actions/hosted-runners/limits`
*/
"enable_static_ip": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class OidcGetOidcCustomSubTemplateForOrgParams extends S.Struct({
  
}) {}

/**
* Actions OIDC Subject customization
*/
export class OidcCustomSub extends S.Class<OidcCustomSub>("OidcCustomSub")({
  /**
* Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
*/
"include_claim_keys": S.Array(S.String)
}) {}

export class OidcUpdateOidcCustomSubTemplateForOrgParams extends S.Struct({
  
}) {}

/**
* An object without any properties.
*/
export class EmptyObject extends S.Class<EmptyObject>("EmptyObject")({
  
}) {}

export class ActionsGetGithubActionsPermissionsOrganizationParams extends S.Struct({
  
}) {}

/**
* The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
*/
export class EnabledRepositories extends S.Literal("all", "none", "selected") {}

/**
* The permissions policy that controls the actions and reusable workflows that are allowed to run.
*/
export class AllowedActions extends S.Literal("all", "local_only", "selected") {}

/**
* The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`.
*/
export class SelectedActionsUrl extends S.String {}

/**
* Whether actions must be pinned to a full-length commit SHA.
*/
export class ShaPinningRequired extends S.Boolean {}

export class ActionsOrganizationPermissions extends S.Class<ActionsOrganizationPermissions>("ActionsOrganizationPermissions")({
  "enabled_repositories": EnabledRepositories,
  /**
* The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.
*/
"selected_repositories_url": S.optionalWith(S.String, { nullable: true }),
  "allowed_actions": S.optionalWith(AllowedActions, { nullable: true }),
  "selected_actions_url": S.optionalWith(SelectedActionsUrl, { nullable: true }),
  "sha_pinning_required": S.optionalWith(ShaPinningRequired, { nullable: true })
}) {}

export class ActionsSetGithubActionsPermissionsOrganizationParams extends S.Struct({
  
}) {}

export class ActionsSetGithubActionsPermissionsOrganizationRequest extends S.Class<ActionsSetGithubActionsPermissionsOrganizationRequest>("ActionsSetGithubActionsPermissionsOrganizationRequest")({
  "enabled_repositories": EnabledRepositories,
  "allowed_actions": S.optionalWith(AllowedActions, { nullable: true }),
  "sha_pinning_required": S.optionalWith(ShaPinningRequired, { nullable: true })
}) {}

export class ActionsGetArtifactAndLogRetentionSettingsOrganizationParams extends S.Struct({
  
}) {}

export class ActionsArtifactAndLogRetentionResponse extends S.Class<ActionsArtifactAndLogRetentionResponse>("ActionsArtifactAndLogRetentionResponse")({
  /**
* The number of days artifacts and logs are retained
*/
"days": S.Int,
  /**
* The maximum number of days that can be configured
*/
"maximum_allowed_days": S.Int
}) {}

export class ActionsSetArtifactAndLogRetentionSettingsOrganizationParams extends S.Struct({
  
}) {}

export class ActionsArtifactAndLogRetention extends S.Class<ActionsArtifactAndLogRetention>("ActionsArtifactAndLogRetention")({
  /**
* The number of days to retain artifacts and logs
*/
"days": S.Int
}) {}

export class ActionsGetForkPrContributorApprovalPermissionsOrganizationParams extends S.Struct({
  
}) {}

/**
* The policy that controls when fork PR workflows require approval from a maintainer.
*/
export class ActionsForkPrContributorApprovalApprovalPolicy extends S.Literal("first_time_contributors_new_to_github", "first_time_contributors", "all_external_contributors") {}

export class ActionsForkPrContributorApproval extends S.Class<ActionsForkPrContributorApproval>("ActionsForkPrContributorApproval")({
  /**
* The policy that controls when fork PR workflows require approval from a maintainer.
*/
"approval_policy": ActionsForkPrContributorApprovalApprovalPolicy
}) {}

export class ActionsSetForkPrContributorApprovalPermissionsOrganizationParams extends S.Struct({
  
}) {}

export class ActionsGetPrivateRepoForkPrWorkflowsSettingsOrganizationParams extends S.Struct({
  
}) {}

export class ActionsForkPrWorkflowsPrivateRepos extends S.Class<ActionsForkPrWorkflowsPrivateRepos>("ActionsForkPrWorkflowsPrivateRepos")({
  /**
* Whether workflows triggered by pull requests from forks are allowed to run on private repositories.
*/
"run_workflows_from_fork_pull_requests": S.Boolean,
  /**
* Whether GitHub Actions can create pull requests or submit approving pull request reviews from a workflow triggered by a fork pull request.
*/
"send_write_tokens_to_workflows": S.Boolean,
  /**
* Whether to make secrets and variables available to workflows triggered by pull requests from forks.
*/
"send_secrets_and_variables": S.Boolean,
  /**
* Whether workflows triggered by pull requests from forks require approval from a repository administrator to run.
*/
"require_approval_for_fork_pr_workflows": S.Boolean
}) {}

export class ActionsSetPrivateRepoForkPrWorkflowsSettingsOrganizationParams extends S.Struct({
  
}) {}

export class ActionsForkPrWorkflowsPrivateReposRequest extends S.Class<ActionsForkPrWorkflowsPrivateReposRequest>("ActionsForkPrWorkflowsPrivateReposRequest")({
  /**
* Whether workflows triggered by pull requests from forks are allowed to run on private repositories.
*/
"run_workflows_from_fork_pull_requests": S.Boolean,
  /**
* Whether GitHub Actions can create pull requests or submit approving pull request reviews from a workflow triggered by a fork pull request.
*/
"send_write_tokens_to_workflows": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Whether to make secrets and variables available to workflows triggered by pull requests from forks.
*/
"send_secrets_and_variables": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Whether workflows triggered by pull requests from forks require approval from a repository administrator to run.
*/
"require_approval_for_fork_pr_workflows": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200 extends S.Struct({
  "total_count": S.Number,
  "repositories": S.Array(Repository)
}) {}

export class ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParams extends S.Struct({
  
}) {}

export class ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest extends S.Class<ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest>("ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest")({
  /**
* List of repository IDs to enable for GitHub Actions.
*/
"selected_repository_ids": S.Array(S.Int)
}) {}

export class ActionsEnableSelectedRepositoryGithubActionsOrganizationParams extends S.Struct({
  
}) {}

export class ActionsDisableSelectedRepositoryGithubActionsOrganizationParams extends S.Struct({
  
}) {}

export class ActionsGetAllowedActionsOrganizationParams extends S.Struct({
  
}) {}

export class SelectedActions extends S.Class<SelectedActions>("SelectedActions")({
  /**
* Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.
*/
"github_owned_allowed": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators.
*/
"verified_allowed": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.
* 
* > [!NOTE]
* > The `patterns_allowed` setting only applies to public repositories.
*/
"patterns_allowed": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class ActionsSetAllowedActionsOrganizationParams extends S.Struct({
  
}) {}

export class ActionsGetSelfHostedRunnersPermissionsOrganizationParams extends S.Struct({
  
}) {}

/**
* The policy that controls whether self-hosted runners can be used by repositories in the organization
*/
export class SelfHostedRunnersSettingsEnabledRepositories extends S.Literal("all", "selected", "none") {}

export class SelfHostedRunnersSettings extends S.Class<SelfHostedRunnersSettings>("SelfHostedRunnersSettings")({
  /**
* The policy that controls whether self-hosted runners can be used by repositories in the organization
*/
"enabled_repositories": SelfHostedRunnersSettingsEnabledRepositories,
  /**
* The URL to the endpoint for managing selected repositories for self-hosted runners in the organization
*/
"selected_repositories_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class ActionsSetSelfHostedRunnersPermissionsOrganizationParams extends S.Struct({
  
}) {}

/**
* The policy that controls whether self-hosted runners can be used in the organization
*/
export class ActionsSetSelfHostedRunnersPermissionsOrganizationRequestEnabledRepositories extends S.Literal("all", "selected", "none") {}

export class ActionsSetSelfHostedRunnersPermissionsOrganizationRequest extends S.Class<ActionsSetSelfHostedRunnersPermissionsOrganizationRequest>("ActionsSetSelfHostedRunnersPermissionsOrganizationRequest")({
  /**
* The policy that controls whether self-hosted runners can be used in the organization
*/
"enabled_repositories": ActionsSetSelfHostedRunnersPermissionsOrganizationRequestEnabledRepositories
}) {}

export class ActionsListSelectedRepositoriesSelfHostedRunnersOrganizationParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActionsListSelectedRepositoriesSelfHostedRunnersOrganization200 extends S.Struct({
  "total_count": S.optionalWith(S.Int, { nullable: true }),
  "repositories": S.optionalWith(S.Array(Repository), { nullable: true })
}) {}

export class ActionsSetSelectedRepositoriesSelfHostedRunnersOrganizationParams extends S.Struct({
  
}) {}

export class ActionsSetSelectedRepositoriesSelfHostedRunnersOrganizationRequest extends S.Class<ActionsSetSelectedRepositoriesSelfHostedRunnersOrganizationRequest>("ActionsSetSelectedRepositoriesSelfHostedRunnersOrganizationRequest")({
  /**
* IDs of repositories that can use repository-level self-hosted runners
*/
"selected_repository_ids": S.Array(S.Int)
}) {}

export class ActionsEnableSelectedRepositorySelfHostedRunnersOrganizationParams extends S.Struct({
  
}) {}

export class ActionsDisableSelectedRepositorySelfHostedRunnersOrganizationParams extends S.Struct({
  
}) {}

export class ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationParams extends S.Struct({
  
}) {}

/**
* The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
*/
export class ActionsDefaultWorkflowPermissions extends S.Literal("read", "write") {}

/**
* Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.
*/
export class ActionsCanApprovePullRequestReviews extends S.Boolean {}

export class ActionsGetDefaultWorkflowPermissions extends S.Class<ActionsGetDefaultWorkflowPermissions>("ActionsGetDefaultWorkflowPermissions")({
  "default_workflow_permissions": ActionsDefaultWorkflowPermissions,
  "can_approve_pull_request_reviews": ActionsCanApprovePullRequestReviews
}) {}

export class ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationParams extends S.Struct({
  
}) {}

export class ActionsSetDefaultWorkflowPermissions extends S.Class<ActionsSetDefaultWorkflowPermissions>("ActionsSetDefaultWorkflowPermissions")({
  "default_workflow_permissions": S.optionalWith(ActionsDefaultWorkflowPermissions, { nullable: true }),
  "can_approve_pull_request_reviews": S.optionalWith(ActionsCanApprovePullRequestReviews, { nullable: true })
}) {}

export class ActionsListSelfHostedRunnerGroupsForOrgParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "visible_to_repository": S.optionalWith(S.String, { nullable: true })
}) {}

export class RunnerGroupsOrg extends S.Class<RunnerGroupsOrg>("RunnerGroupsOrg")({
  "id": S.Number,
  "name": S.String,
  "visibility": S.String,
  "default": S.Boolean,
  /**
* Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected`
*/
"selected_repositories_url": S.optionalWith(S.String, { nullable: true }),
  "runners_url": S.String,
  "hosted_runners_url": S.optionalWith(S.String, { nullable: true }),
  /**
* The identifier of a hosted compute network configuration.
*/
"network_configuration_id": S.optionalWith(S.String, { nullable: true }),
  "inherited": S.Boolean,
  "inherited_allows_public_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  "allows_public_repositories": S.Boolean,
  /**
* If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.
*/
"workflow_restrictions_read_only": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
*/
"restricted_to_workflows": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
*/
"selected_workflows": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class ActionsListSelfHostedRunnerGroupsForOrg200 extends S.Struct({
  "total_count": S.Number,
  "runner_groups": S.Array(RunnerGroupsOrg)
}) {}

export class ActionsCreateSelfHostedRunnerGroupForOrgParams extends S.Struct({
  
}) {}

/**
* Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories.
*/
export class ActionsCreateSelfHostedRunnerGroupForOrgRequestVisibility extends S.Literal("selected", "all", "private") {}

export class ActionsCreateSelfHostedRunnerGroupForOrgRequest extends S.Class<ActionsCreateSelfHostedRunnerGroupForOrgRequest>("ActionsCreateSelfHostedRunnerGroupForOrgRequest")({
  /**
* Name of the runner group.
*/
"name": S.String,
  /**
* Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories.
*/
"visibility": S.optionalWith(ActionsCreateSelfHostedRunnerGroupForOrgRequestVisibility, { nullable: true, default: () => "all" as const }),
  /**
* List of repository IDs that can access the runner group.
*/
"selected_repository_ids": S.optionalWith(S.Array(S.Int), { nullable: true }),
  /**
* List of runner IDs to add to the runner group.
*/
"runners": S.optionalWith(S.Array(S.Int), { nullable: true }),
  /**
* Whether the runner group can be used by `public` repositories.
*/
"allows_public_repositories": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
*/
"restricted_to_workflows": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
*/
"selected_workflows": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* The identifier of a hosted compute network configuration.
*/
"network_configuration_id": S.optionalWith(S.String, { nullable: true })
}) {}

export class ActionsGetSelfHostedRunnerGroupForOrgParams extends S.Struct({
  
}) {}

export class ActionsDeleteSelfHostedRunnerGroupFromOrgParams extends S.Struct({
  
}) {}

export class ActionsUpdateSelfHostedRunnerGroupForOrgParams extends S.Struct({
  
}) {}

/**
* Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories.
*/
export class ActionsUpdateSelfHostedRunnerGroupForOrgRequestVisibility extends S.Literal("selected", "all", "private") {}

export class ActionsUpdateSelfHostedRunnerGroupForOrgRequest extends S.Class<ActionsUpdateSelfHostedRunnerGroupForOrgRequest>("ActionsUpdateSelfHostedRunnerGroupForOrgRequest")({
  /**
* Name of the runner group.
*/
"name": S.String,
  /**
* Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories.
*/
"visibility": S.optionalWith(ActionsUpdateSelfHostedRunnerGroupForOrgRequestVisibility, { nullable: true }),
  /**
* Whether the runner group can be used by `public` repositories.
*/
"allows_public_repositories": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
*/
"restricted_to_workflows": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
*/
"selected_workflows": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* The identifier of a hosted compute network configuration.
*/
"network_configuration_id": S.optionalWith(S.String, { nullable: true })
}) {}

export class ActionsListGithubHostedRunnersInGroupForOrgParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActionsListGithubHostedRunnersInGroupForOrg200 extends S.Struct({
  "total_count": S.Number,
  "runners": S.Array(ActionsHostedRunner)
}) {}

export class ActionsListRepoAccessToSelfHostedRunnerGroupInOrgParams extends S.Struct({
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

export class ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200 extends S.Struct({
  "total_count": S.Number,
  "repositories": S.Array(MinimalRepository)
}) {}

export class ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgParams extends S.Struct({
  
}) {}

export class ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest extends S.Class<ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest>("ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest")({
  /**
* List of repository IDs that can access the runner group.
*/
"selected_repository_ids": S.Array(S.Int)
}) {}

export class ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgParams extends S.Struct({
  
}) {}

export class ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParams extends S.Struct({
  
}) {}

export class ActionsListSelfHostedRunnersInGroupForOrgParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* The type of label. Read-only labels are applied automatically when the runner is configured.
*/
export class RunnerLabelType extends S.Literal("read-only", "custom") {}

/**
* A label for a self hosted runner
*/
export class RunnerLabel extends S.Class<RunnerLabel>("RunnerLabel")({
  /**
* Unique identifier of the label.
*/
"id": S.optionalWith(S.Int, { nullable: true }),
  /**
* Name of the label.
*/
"name": S.String,
  /**
* The type of label. Read-only labels are applied automatically when the runner is configured.
*/
"type": S.optionalWith(RunnerLabelType, { nullable: true })
}) {}

/**
* A self hosted runner
*/
export class Runner extends S.Class<Runner>("Runner")({
  /**
* The ID of the runner.
*/
"id": S.Int,
  /**
* The ID of the runner group.
*/
"runner_group_id": S.optionalWith(S.Int, { nullable: true }),
  /**
* The name of the runner.
*/
"name": S.String,
  /**
* The Operating System of the runner.
*/
"os": S.String,
  /**
* The status of the runner.
*/
"status": S.String,
  "busy": S.Boolean,
  "labels": S.Array(RunnerLabel),
  "ephemeral": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class ActionsListSelfHostedRunnersInGroupForOrg200 extends S.Struct({
  "total_count": S.Number,
  "runners": S.Array(Runner)
}) {}

export class ActionsSetSelfHostedRunnersInGroupForOrgParams extends S.Struct({
  
}) {}

export class ActionsSetSelfHostedRunnersInGroupForOrgRequest extends S.Class<ActionsSetSelfHostedRunnersInGroupForOrgRequest>("ActionsSetSelfHostedRunnersInGroupForOrgRequest")({
  /**
* List of runner IDs to add to the runner group.
*/
"runners": S.Array(S.Int)
}) {}

export class ActionsAddSelfHostedRunnerToGroupForOrgParams extends S.Struct({
  
}) {}

export class ActionsRemoveSelfHostedRunnerFromGroupForOrgParams extends S.Struct({
  
}) {}

export class ActionsListSelfHostedRunnersForOrgParams extends S.Struct({
  "name": S.optionalWith(S.String, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActionsListSelfHostedRunnersForOrg200 extends S.Struct({
  "total_count": S.Int,
  "runners": S.Array(Runner)
}) {}

export class ActionsListRunnerApplicationsForOrgParams extends S.Struct({
  
}) {}

/**
* Runner Application
*/
export class RunnerApplication extends S.Class<RunnerApplication>("RunnerApplication")({
  "os": S.String,
  "architecture": S.String,
  "download_url": S.String,
  "filename": S.String,
  /**
* A short lived bearer token used to download the runner, if needed.
*/
"temp_download_token": S.optionalWith(S.String, { nullable: true }),
  "sha256_checksum": S.optionalWith(S.String, { nullable: true })
}) {}

export class ActionsListRunnerApplicationsForOrg200 extends S.Array(RunnerApplication) {}

export class ActionsGenerateRunnerJitconfigForOrgParams extends S.Struct({
  
}) {}

export class ActionsGenerateRunnerJitconfigForOrgRequest extends S.Class<ActionsGenerateRunnerJitconfigForOrgRequest>("ActionsGenerateRunnerJitconfigForOrgRequest")({
  /**
* The name of the new runner.
*/
"name": S.String,
  /**
* The ID of the runner group to register the runner to.
*/
"runner_group_id": S.Int,
  /**
* The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.
*/
"labels": S.NonEmptyArray(S.String).pipe(S.minItems(1), S.maxItems(100)),
  /**
* The working directory to be used for job execution, relative to the runner install directory.
*/
"work_folder": S.optionalWith(S.String, { nullable: true, default: () => "_work" as const })
}) {}

export class ActionsGenerateRunnerJitconfigForOrg201 extends S.Struct({
  "runner": Runner,
  /**
* The base64 encoded runner configuration.
*/
"encoded_jit_config": S.String
}) {}

export class ActionsCreateRegistrationTokenForOrgParams extends S.Struct({
  
}) {}

/**
* Describe whether all repositories have been selected or there's a selection involved
*/
export class AuthenticationTokenRepositorySelection extends S.Literal("all", "selected") {}

/**
* Authentication Token
*/
export class AuthenticationToken extends S.Class<AuthenticationToken>("AuthenticationToken")({
  /**
* The token used for authentication
*/
"token": S.String,
  /**
* The time this token expires
*/
"expires_at": S.String,
  "permissions": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  /**
* The repositories this token has access to
*/
"repositories": S.optionalWith(S.Array(Repository), { nullable: true }),
  "single_file": S.optionalWith(S.String, { nullable: true }),
  /**
* Describe whether all repositories have been selected or there's a selection involved
*/
"repository_selection": S.optionalWith(AuthenticationTokenRepositorySelection, { nullable: true })
}) {}

export class ActionsCreateRemoveTokenForOrgParams extends S.Struct({
  
}) {}

export class ActionsGetSelfHostedRunnerForOrgParams extends S.Struct({
  
}) {}

export class ActionsDeleteSelfHostedRunnerFromOrgParams extends S.Struct({
  
}) {}

export class ActionsListLabelsForSelfHostedRunnerForOrgParams extends S.Struct({
  
}) {}

export class ActionsListLabelsForSelfHostedRunnerForOrg200 extends S.Struct({
  "total_count": S.Int,
  "labels": S.Array(RunnerLabel)
}) {}

export class ActionsSetCustomLabelsForSelfHostedRunnerForOrgParams extends S.Struct({
  
}) {}

export class ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest extends S.Class<ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest>("ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest")({
  /**
* The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
*/
"labels": S.Array(S.String).pipe(S.maxItems(100))
}) {}

export class ActionsSetCustomLabelsForSelfHostedRunnerForOrg200 extends S.Struct({
  "total_count": S.Int,
  "labels": S.Array(RunnerLabel)
}) {}

export class ActionsAddCustomLabelsToSelfHostedRunnerForOrgParams extends S.Struct({
  
}) {}

export class ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest extends S.Class<ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest>("ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest")({
  /**
* The names of the custom labels to add to the runner.
*/
"labels": S.NonEmptyArray(S.String).pipe(S.minItems(1), S.maxItems(100))
}) {}

export class ActionsAddCustomLabelsToSelfHostedRunnerForOrg200 extends S.Struct({
  "total_count": S.Int,
  "labels": S.Array(RunnerLabel)
}) {}

export class ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgParams extends S.Struct({
  
}) {}

export class ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg200 extends S.Struct({
  "total_count": S.Int,
  "labels": S.Array(RunnerLabel)
}) {}

export class ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgParams extends S.Struct({
  
}) {}

export class ActionsRemoveCustomLabelFromSelfHostedRunnerForOrg200 extends S.Struct({
  "total_count": S.Int,
  "labels": S.Array(RunnerLabel)
}) {}

export class ActionsListOrgSecretsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Visibility of a secret
*/
export class OrganizationActionsSecretVisibility extends S.Literal("all", "private", "selected") {}

/**
* Secrets for GitHub Actions for an organization.
*/
export class OrganizationActionsSecret extends S.Class<OrganizationActionsSecret>("OrganizationActionsSecret")({
  /**
* The name of the secret.
*/
"name": S.String,
  "created_at": S.String,
  "updated_at": S.String,
  /**
* Visibility of a secret
*/
"visibility": OrganizationActionsSecretVisibility,
  "selected_repositories_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class ActionsListOrgSecrets200 extends S.Struct({
  "total_count": S.Int,
  "secrets": S.Array(OrganizationActionsSecret)
}) {}

export class ActionsGetOrgPublicKeyParams extends S.Struct({
  
}) {}

/**
* The public key used for setting Actions Secrets.
*/
export class ActionsPublicKey extends S.Class<ActionsPublicKey>("ActionsPublicKey")({
  /**
* The identifier for the key.
*/
"key_id": S.String,
  /**
* The Base64 encoded public key.
*/
"key": S.String,
  "id": S.optionalWith(S.Int, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true }),
  "title": S.optionalWith(S.String, { nullable: true }),
  "created_at": S.optionalWith(S.String, { nullable: true })
}) {}

export class ActionsGetOrgSecretParams extends S.Struct({
  
}) {}

export class ActionsCreateOrUpdateOrgSecretParams extends S.Struct({
  
}) {}

/**
* Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
*/
export class ActionsCreateOrUpdateOrgSecretRequestVisibility extends S.Literal("all", "private", "selected") {}

export class ActionsCreateOrUpdateOrgSecretRequest extends S.Class<ActionsCreateOrUpdateOrgSecretRequest>("ActionsCreateOrUpdateOrgSecretRequest")({
  /**
* Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/actions/secrets#get-an-organization-public-key) endpoint.
*/
"encrypted_value": S.String.pipe(S.pattern(new RegExp("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"))),
  /**
* ID of the key you used to encrypt the secret.
*/
"key_id": S.String,
  /**
* Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
*/
"visibility": ActionsCreateOrUpdateOrgSecretRequestVisibility,
  /**
* An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
*/
"selected_repository_ids": S.optionalWith(S.Array(S.Int), { nullable: true })
}) {}

export class ActionsDeleteOrgSecretParams extends S.Struct({
  
}) {}

export class ActionsListSelectedReposForOrgSecretParams extends S.Struct({
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

export class ActionsListSelectedReposForOrgSecret200 extends S.Struct({
  "total_count": S.Int,
  "repositories": S.Array(MinimalRepository)
}) {}

export class ActionsSetSelectedReposForOrgSecretParams extends S.Struct({
  
}) {}

export class ActionsSetSelectedReposForOrgSecretRequest extends S.Class<ActionsSetSelectedReposForOrgSecretRequest>("ActionsSetSelectedReposForOrgSecretRequest")({
  /**
* An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
*/
"selected_repository_ids": S.Array(S.Int)
}) {}

export class ActionsAddSelectedRepoToOrgSecretParams extends S.Struct({
  
}) {}

export class ActionsRemoveSelectedRepoFromOrgSecretParams extends S.Struct({
  
}) {}

export class ActionsListOrgVariablesParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 10 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Visibility of a variable
*/
export class OrganizationActionsVariableVisibility extends S.Literal("all", "private", "selected") {}

/**
* Organization variable for GitHub Actions.
*/
export class OrganizationActionsVariable extends S.Class<OrganizationActionsVariable>("OrganizationActionsVariable")({
  /**
* The name of the variable.
*/
"name": S.String,
  /**
* The value of the variable.
*/
"value": S.String,
  /**
* The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
"created_at": S.String,
  /**
* The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
"updated_at": S.String,
  /**
* Visibility of a variable
*/
"visibility": OrganizationActionsVariableVisibility,
  "selected_repositories_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class ActionsListOrgVariables200 extends S.Struct({
  "total_count": S.Int,
  "variables": S.Array(OrganizationActionsVariable)
}) {}

export class ActionsCreateOrgVariableParams extends S.Struct({
  
}) {}

/**
* The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
*/
export class ActionsCreateOrgVariableRequestVisibility extends S.Literal("all", "private", "selected") {}

export class ActionsCreateOrgVariableRequest extends S.Class<ActionsCreateOrgVariableRequest>("ActionsCreateOrgVariableRequest")({
  /**
* The name of the variable.
*/
"name": S.String,
  /**
* The value of the variable.
*/
"value": S.String,
  /**
* The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
*/
"visibility": ActionsCreateOrgVariableRequestVisibility,
  /**
* An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.
*/
"selected_repository_ids": S.optionalWith(S.Array(S.Int), { nullable: true })
}) {}

export class ActionsGetOrgVariableParams extends S.Struct({
  
}) {}

export class ActionsDeleteOrgVariableParams extends S.Struct({
  
}) {}

export class ActionsUpdateOrgVariableParams extends S.Struct({
  
}) {}

/**
* The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
*/
export class ActionsUpdateOrgVariableRequestVisibility extends S.Literal("all", "private", "selected") {}

export class ActionsUpdateOrgVariableRequest extends S.Class<ActionsUpdateOrgVariableRequest>("ActionsUpdateOrgVariableRequest")({
  /**
* The name of the variable.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The value of the variable.
*/
"value": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
*/
"visibility": S.optionalWith(ActionsUpdateOrgVariableRequestVisibility, { nullable: true }),
  /**
* An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.
*/
"selected_repository_ids": S.optionalWith(S.Array(S.Int), { nullable: true })
}) {}

export class ActionsListSelectedReposForOrgVariableParams extends S.Struct({
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

export class ActionsListSelectedReposForOrgVariable200 extends S.Struct({
  "total_count": S.Int,
  "repositories": S.Array(MinimalRepository)
}) {}

export class ActionsSetSelectedReposForOrgVariableParams extends S.Struct({
  
}) {}

export class ActionsSetSelectedReposForOrgVariableRequest extends S.Class<ActionsSetSelectedReposForOrgVariableRequest>("ActionsSetSelectedReposForOrgVariableRequest")({
  /**
* The IDs of the repositories that can access the organization variable.
*/
"selected_repository_ids": S.Array(S.Int)
}) {}

export class ActionsAddSelectedRepoToOrgVariableParams extends S.Struct({
  
}) {}

export class ActionsRemoveSelectedRepoFromOrgVariableParams extends S.Struct({
  
}) {}

export class OrgsListAttestationsBulkParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true })
}) {}

export class OrgsListAttestationsBulkRequest extends S.Class<OrgsListAttestationsBulkRequest>("OrgsListAttestationsBulkRequest")({
  /**
* List of subject digests to fetch attestations for.
*/
"subject_digests": S.NonEmptyArray(S.String).pipe(S.minItems(1), S.maxItems(1024)),
  /**
* Optional filter for fetching attestations with a given predicate type.
* This option accepts `provenance`, `sbom`, or freeform text for custom predicate types.
*/
"predicate_type": S.optionalWith(S.String, { nullable: true })
}) {}

export class OrgsListAttestationsBulk200 extends S.Struct({
  /**
* Mapping of subject digest to bundles.
*/
"attestations_subject_digests": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  /**
* Information about the current page.
*/
"page_info": S.optionalWith(S.Struct({
  /**
* Indicates whether there is a next page.
*/
"has_next": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Indicates whether there is a previous page.
*/
"has_previous": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The cursor to the next page.
*/
"next": S.optionalWith(S.String, { nullable: true }),
  /**
* The cursor to the previous page.
*/
"previous": S.optionalWith(S.String, { nullable: true })
}), { nullable: true })
}) {}

export class OrgsDeleteAttestationsBulkParams extends S.Struct({
  
}) {}

/**
* The request body must include either `subject_digests` or `attestation_ids`, but not both.
*/
export class OrgsDeleteAttestationsBulkRequest extends S.Record({ key: S.String, value: S.Unknown }) {}

export class OrgsDeleteAttestationsBySubjectDigestParams extends S.Struct({
  
}) {}

export class OrgsDeleteAttestationsByIdParams extends S.Struct({
  
}) {}

export class OrgsListAttestationsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true }),
  "predicate_type": S.optionalWith(S.String, { nullable: true })
}) {}

export class OrgsListAttestations200 extends S.Struct({
  "attestations": S.optionalWith(S.Array(S.Struct({
  /**
* The attestation's Sigstore Bundle.
* Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
*/
"bundle": S.optionalWith(S.Struct({
  "mediaType": S.optionalWith(S.String, { nullable: true }),
  "verificationMaterial": S.optionalWith(S.Struct({
  
}), { nullable: true }),
  "dsseEnvelope": S.optionalWith(S.Struct({
  
}), { nullable: true })
}), { nullable: true }),
  "repository_id": S.optionalWith(S.Int, { nullable: true }),
  "bundle_url": S.optionalWith(S.String, { nullable: true })
})), { nullable: true })
}) {}

export class OrgsListBlockedUsersParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class OrgsListBlockedUsers200 extends S.Array(SimpleUser) {}

export class OrgsCheckBlockedUserParams extends S.Struct({
  
}) {}

export class OrgsBlockUserParams extends S.Struct({
  
}) {}

export class OrgsUnblockUserParams extends S.Struct({
  
}) {}

export class CampaignsListOrgCampaignsParamsDirection extends S.Literal("asc", "desc") {}

/**
* Indicates whether a campaign is open or closed
*/
export class CampaignState extends S.Literal("open", "closed") {}

export class CampaignsListOrgCampaignsParamsSort extends S.Literal("created", "updated", "ends_at", "published") {}

export class CampaignsListOrgCampaignsParams extends S.Struct({
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "direction": S.optionalWith(CampaignsListOrgCampaignsParamsDirection, { nullable: true, default: () => "desc" as const }),
  "state": S.optionalWith(CampaignState, { nullable: true }),
  "sort": S.optionalWith(CampaignsListOrgCampaignsParamsSort, { nullable: true, default: () => "created" as const })
}) {}

/**
* Groups of organization members that gives permissions on specified repositories.
*/
export class NullableTeamSimple extends S.Class<NullableTeamSimple>("NullableTeamSimple")({
  /**
* Unique identifier of the team
*/
"id": S.Int,
  "node_id": S.String,
  /**
* URL for the team
*/
"url": S.String,
  "members_url": S.String,
  /**
* Name of the team
*/
"name": S.String,
  /**
* Description of the team
*/
"description": S.NullOr(S.String),
  /**
* Permission that the team will have for its repositories
*/
"permission": S.String,
  /**
* The level of privacy this team should have
*/
"privacy": S.optionalWith(S.String, { nullable: true }),
  /**
* The notification setting the team has set
*/
"notification_setting": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.String,
  "repositories_url": S.String,
  "slug": S.String,
  /**
* Distinguished Name (DN) that team maps to within LDAP environment
*/
"ldap_dn": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Groups of organization members that gives permissions on specified repositories.
*/
export class Team extends S.Class<Team>("Team")({
  "id": S.Int,
  "node_id": S.String,
  "name": S.String,
  "slug": S.String,
  "description": S.NullOr(S.String),
  "privacy": S.optionalWith(S.String, { nullable: true }),
  "notification_setting": S.optionalWith(S.String, { nullable: true }),
  "permission": S.String,
  "permissions": S.optionalWith(S.Struct({
  "pull": S.Boolean,
  "triage": S.Boolean,
  "push": S.Boolean,
  "maintain": S.Boolean,
  "admin": S.Boolean
}), { nullable: true }),
  "url": S.String,
  "html_url": S.String,
  "members_url": S.String,
  "repositories_url": S.String,
  "parent": S.NullOr(NullableTeamSimple)
}) {}

/**
* The campaign metadata and alert stats.
*/
export class CampaignSummary extends S.Class<CampaignSummary>("CampaignSummary")({
  /**
* The number of the newly created campaign
*/
"number": S.Int,
  /**
* The date and time the campaign was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
"created_at": S.String,
  /**
* The date and time the campaign was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
"updated_at": S.String,
  /**
* The campaign name
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The campaign description
*/
"description": S.String,
  /**
* The campaign managers
*/
"managers": S.Array(SimpleUser),
  /**
* The campaign team managers
*/
"team_managers": S.optionalWith(S.Array(Team), { nullable: true }),
  /**
* The date and time the campaign was published, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
"published_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The date and time the campaign has ended, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
"ends_at": S.String,
  /**
* The date and time the campaign was closed, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ. Will be null if the campaign is still open.
*/
"closed_at": S.optionalWith(S.String, { nullable: true }),
  "state": CampaignState,
  /**
* The contact link of the campaign.
*/
"contact_link": S.NullOr(S.String),
  "alert_stats": S.optionalWith(S.Struct({
  /**
* The number of open alerts
*/
"open_count": S.Int,
  /**
* The number of closed alerts
*/
"closed_count": S.Int,
  /**
* The number of in-progress alerts
*/
"in_progress_count": S.Int
}), { nullable: true })
}) {}

export class CampaignsListOrgCampaigns200 extends S.Array(CampaignSummary) {}

export class CampaignsListOrgCampaigns503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CampaignsCreateCampaignParams extends S.Struct({
  
}) {}

export class CampaignsCreateCampaignRequest extends S.Class<CampaignsCreateCampaignRequest>("CampaignsCreateCampaignRequest")({
  /**
* The name of the campaign
*/
"name": S.String.pipe(S.minLength(1), S.maxLength(50)),
  /**
* A description for the campaign
*/
"description": S.String.pipe(S.minLength(1), S.maxLength(255)),
  /**
* The logins of the users to set as the campaign managers. At this time, only a single manager can be supplied.
*/
"managers": S.optionalWith(S.Array(S.String).pipe(S.maxItems(10)), { nullable: true }),
  /**
* The slugs of the teams to set as the campaign managers.
*/
"team_managers": S.optionalWith(S.Array(S.String).pipe(S.maxItems(10)), { nullable: true }),
  /**
* The end date and time of the campaign. The date must be in the future.
*/
"ends_at": S.String,
  /**
* The contact link of the campaign. Must be a URI.
*/
"contact_link": S.optionalWith(S.String, { nullable: true }),
  /**
* The code scanning alerts to include in this campaign
*/
"code_scanning_alerts": S.NonEmptyArray(S.Struct({
  /**
* The repository id
*/
"repository_id": S.Int,
  /**
* The alert numbers
*/
"alert_numbers": S.NonEmptyArray(S.Int).pipe(S.minItems(1))
})).pipe(S.minItems(1)),
  /**
* If true, will automatically generate issues for the campaign. The default is false.
*/
"generate_issues": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

export class CampaignsCreateCampaign503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CampaignsGetCampaignSummaryParams extends S.Struct({
  
}) {}

export class CampaignsGetCampaignSummary503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CampaignsDeleteCampaignParams extends S.Struct({
  
}) {}

export class CampaignsDeleteCampaign503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CampaignsUpdateCampaignParams extends S.Struct({
  
}) {}

export class CampaignsUpdateCampaignRequest extends S.Class<CampaignsUpdateCampaignRequest>("CampaignsUpdateCampaignRequest")({
  /**
* The name of the campaign
*/
"name": S.optionalWith(S.String.pipe(S.minLength(1), S.maxLength(50)), { nullable: true }),
  /**
* A description for the campaign
*/
"description": S.optionalWith(S.String.pipe(S.minLength(1), S.maxLength(255)), { nullable: true }),
  /**
* The logins of the users to set as the campaign managers. At this time, only a single manager can be supplied.
*/
"managers": S.optionalWith(S.Array(S.String).pipe(S.maxItems(10)), { nullable: true }),
  /**
* The slugs of the teams to set as the campaign managers.
*/
"team_managers": S.optionalWith(S.Array(S.String).pipe(S.maxItems(10)), { nullable: true }),
  /**
* The end date and time of the campaign, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
"ends_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The contact link of the campaign. Must be a URI.
*/
"contact_link": S.optionalWith(S.String, { nullable: true }),
  "state": S.optionalWith(CampaignState, { nullable: true })
}) {}

export class CampaignsUpdateCampaign503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The name of the tool used to generate the code scanning analysis.
*/
export class CodeScanningAnalysisToolName extends S.String {}

/**
* The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
*/
export class CodeScanningAnalysisToolGuid extends S.String {}

export class CodeScanningListAlertsForOrgParamsDirection extends S.Literal("asc", "desc") {}

/**
* State of a code scanning alert.
*/
export class CodeScanningAlertStateQuery extends S.Literal("open", "closed", "dismissed", "fixed") {}

export class CodeScanningListAlertsForOrgParamsSort extends S.Literal("created", "updated") {}

/**
* Severity of a code scanning alert.
*/
export class CodeScanningAlertSeverity extends S.Literal("critical", "high", "medium", "low", "warning", "note", "error") {}

export class CodeScanningListAlertsForOrgParams extends S.Struct({
  "tool_name": S.optionalWith(CodeScanningAnalysisToolName, { nullable: true }),
  "tool_guid": S.optionalWith(CodeScanningAnalysisToolGuid, { nullable: true }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "direction": S.optionalWith(CodeScanningListAlertsForOrgParamsDirection, { nullable: true, default: () => "desc" as const }),
  "state": S.optionalWith(CodeScanningAlertStateQuery, { nullable: true }),
  "sort": S.optionalWith(CodeScanningListAlertsForOrgParamsSort, { nullable: true, default: () => "created" as const }),
  "severity": S.optionalWith(CodeScanningAlertSeverity, { nullable: true })
}) {}

/**
* The REST API URL for fetching the list of instances for an alert.
*/
export class AlertInstancesUrl extends S.String {}

/**
* State of a code scanning alert.
*/
export class CodeScanningAlertState extends S.Literal("open", "dismissed", "fixed") {}

/**
* **Required when the state is dismissed.** The reason for dismissing or closing the alert.
*/
export class CodeScanningAlertDismissedReason extends S.Literal("false positive", "won't fix", "used in tests") {}

/**
* The dismissal comment associated with the dismissal of the alert.
*/
export class CodeScanningAlertDismissedComment extends S.String.pipe(S.maxLength(280)) {}

/**
* The severity of the alert.
*/
export class CodeScanningAlertRuleSummarySeverity extends S.Literal("none", "note", "warning", "error") {}

/**
* The security severity of the alert.
*/
export class CodeScanningAlertRuleSummarySecuritySeverityLevel extends S.Literal("low", "medium", "high", "critical") {}

export class CodeScanningAlertRuleSummary extends S.Class<CodeScanningAlertRuleSummary>("CodeScanningAlertRuleSummary")({
  /**
* A unique identifier for the rule used to detect the alert.
*/
"id": S.optionalWith(S.String, { nullable: true }),
  /**
* The name of the rule used to detect the alert.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The severity of the alert.
*/
"severity": S.optionalWith(CodeScanningAlertRuleSummarySeverity, { nullable: true }),
  /**
* The security severity of the alert.
*/
"security_severity_level": S.optionalWith(CodeScanningAlertRuleSummarySecuritySeverityLevel, { nullable: true }),
  /**
* A short description of the rule used to detect the alert.
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* A description of the rule used to detect the alert.
*/
"full_description": S.optionalWith(S.String, { nullable: true }),
  /**
* A set of tags applicable for the rule.
*/
"tags": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* Detailed documentation for the rule as GitHub Flavored Markdown.
*/
"help": S.optionalWith(S.String, { nullable: true }),
  /**
* A link to the documentation for the rule used to detect the alert.
*/
"help_uri": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The version of the tool used to generate the code scanning analysis.
*/
export class CodeScanningAnalysisToolVersion extends S.String {}

export class CodeScanningAnalysisTool extends S.Class<CodeScanningAnalysisTool>("CodeScanningAnalysisTool")({
  "name": S.optionalWith(CodeScanningAnalysisToolName, { nullable: true }),
  "version": S.optionalWith(CodeScanningAnalysisToolVersion, { nullable: true }),
  "guid": S.optionalWith(CodeScanningAnalysisToolGuid, { nullable: true })
}) {}

/**
* The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,
* `refs/heads/<branch name>` or simply `<branch name>`.
*/
export class CodeScanningRef extends S.String {}

/**
* Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
*/
export class CodeScanningAnalysisAnalysisKey extends S.String {}

/**
* Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
*/
export class CodeScanningAlertEnvironment extends S.String {}

/**
* Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
*/
export class CodeScanningAnalysisCategory extends S.String {}

/**
* Describe a region within a file for the alert.
*/
export class CodeScanningAlertLocation extends S.Class<CodeScanningAlertLocation>("CodeScanningAlertLocation")({
  "path": S.optionalWith(S.String, { nullable: true }),
  "start_line": S.optionalWith(S.Int, { nullable: true }),
  "end_line": S.optionalWith(S.Int, { nullable: true }),
  "start_column": S.optionalWith(S.Int, { nullable: true }),
  "end_column": S.optionalWith(S.Int, { nullable: true })
}) {}

/**
* A classification of the file. For example to identify it as generated.
*/
export class CodeScanningAlertClassification extends S.Literal("source", "generated", "test", "library") {}

export class CodeScanningAlertInstance extends S.Class<CodeScanningAlertInstance>("CodeScanningAlertInstance")({
  "ref": S.optionalWith(CodeScanningRef, { nullable: true }),
  "analysis_key": S.optionalWith(CodeScanningAnalysisAnalysisKey, { nullable: true }),
  "environment": S.optionalWith(CodeScanningAlertEnvironment, { nullable: true }),
  "category": S.optionalWith(CodeScanningAnalysisCategory, { nullable: true }),
  "state": S.optionalWith(CodeScanningAlertState, { nullable: true }),
  "commit_sha": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.Struct({
  "text": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  "location": S.optionalWith(CodeScanningAlertLocation, { nullable: true }),
  "html_url": S.optionalWith(S.String, { nullable: true }),
  /**
* Classifications that have been applied to the file that triggered the alert.
* For example identifying it as documentation, or a generated file.
*/
"classifications": S.optionalWith(S.Array(CodeScanningAlertClassification), { nullable: true })
}) {}

export class CodeScanningOrganizationAlertItems extends S.Class<CodeScanningOrganizationAlertItems>("CodeScanningOrganizationAlertItems")({
  "number": AlertNumber,
  "created_at": AlertCreatedAt,
  "updated_at": S.optionalWith(AlertUpdatedAt, { nullable: true }),
  "url": AlertUrl,
  "html_url": AlertHtmlUrl,
  "instances_url": AlertInstancesUrl,
  "state": S.NullOr(CodeScanningAlertState),
  "fixed_at": S.optionalWith(AlertFixedAt, { nullable: true }),
  "dismissed_by": S.NullOr(NullableSimpleUser),
  "dismissed_at": S.NullOr(AlertDismissedAt),
  "dismissed_reason": S.NullOr(CodeScanningAlertDismissedReason),
  "dismissed_comment": S.optionalWith(CodeScanningAlertDismissedComment, { nullable: true }),
  "rule": CodeScanningAlertRuleSummary,
  "tool": CodeScanningAnalysisTool,
  "most_recent_instance": CodeScanningAlertInstance,
  "repository": SimpleRepository,
  "dismissal_approved_by": S.optionalWith(NullableSimpleUser, { nullable: true })
}) {}

export class CodeScanningListAlertsForOrg200 extends S.Array(CodeScanningOrganizationAlertItems) {}

export class CodeScanningListAlertsForOrg503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeSecurityGetConfigurationsForOrgParamsTargetType extends S.Literal("global", "all") {}

export class CodeSecurityGetConfigurationsForOrgParams extends S.Struct({
  "target_type": S.optionalWith(CodeSecurityGetConfigurationsForOrgParamsTargetType, { nullable: true, default: () => "all" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeSecurityGetConfigurationsForOrg200 extends S.Array(CodeSecurityConfiguration) {}

export class CodeSecurityCreateConfigurationParams extends S.Struct({
  
}) {}

/**
* The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
* 
* > [!WARNING]
* > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
*/
export class CodeSecurityCreateConfigurationRequestAdvancedSecurity extends S.Literal("enabled", "disabled", "code_security", "secret_protection") {}

/**
* The enablement status of GitHub Code Security features.
*/
export class CodeSecurityCreateConfigurationRequestCodeSecurity extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Dependency Graph
*/
export class CodeSecurityCreateConfigurationRequestDependencyGraph extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Automatic dependency submission
*/
export class CodeSecurityCreateConfigurationRequestDependencyGraphAutosubmitAction extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Dependabot alerts
*/
export class CodeSecurityCreateConfigurationRequestDependabotAlerts extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Dependabot security updates
*/
export class CodeSecurityCreateConfigurationRequestDependabotSecurityUpdates extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of code scanning default setup
*/
export class CodeSecurityCreateConfigurationRequestCodeScanningDefaultSetup extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of code scanning delegated alert dismissal
*/
export class CodeSecurityCreateConfigurationRequestCodeScanningDelegatedAlertDismissal extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of GitHub Secret Protection features.
*/
export class CodeSecurityCreateConfigurationRequestSecretProtection extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning
*/
export class CodeSecurityCreateConfigurationRequestSecretScanning extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning push protection
*/
export class CodeSecurityCreateConfigurationRequestSecretScanningPushProtection extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning delegated bypass
*/
export class CodeSecurityCreateConfigurationRequestSecretScanningDelegatedBypass extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning validity checks
*/
export class CodeSecurityCreateConfigurationRequestSecretScanningValidityChecks extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning non provider patterns
*/
export class CodeSecurityCreateConfigurationRequestSecretScanningNonProviderPatterns extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Copilot secret scanning
*/
export class CodeSecurityCreateConfigurationRequestSecretScanningGenericSecrets extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning delegated alert dismissal
*/
export class CodeSecurityCreateConfigurationRequestSecretScanningDelegatedAlertDismissal extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of private vulnerability reporting
*/
export class CodeSecurityCreateConfigurationRequestPrivateVulnerabilityReporting extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enforcement status for a security configuration
*/
export class CodeSecurityCreateConfigurationRequestEnforcement extends S.Literal("enforced", "unenforced") {}

export class CodeSecurityCreateConfigurationRequest extends S.Class<CodeSecurityCreateConfigurationRequest>("CodeSecurityCreateConfigurationRequest")({
  /**
* The name of the code security configuration. Must be unique within the organization.
*/
"name": S.String,
  /**
* A description of the code security configuration
*/
"description": S.String.pipe(S.maxLength(255)),
  /**
* The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
* 
* > [!WARNING]
* > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
*/
"advanced_security": S.optionalWith(CodeSecurityCreateConfigurationRequestAdvancedSecurity, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of GitHub Code Security features.
*/
"code_security": S.optionalWith(CodeSecurityCreateConfigurationRequestCodeSecurity, { nullable: true }),
  /**
* The enablement status of Dependency Graph
*/
"dependency_graph": S.optionalWith(CodeSecurityCreateConfigurationRequestDependencyGraph, { nullable: true, default: () => "enabled" as const }),
  /**
* The enablement status of Automatic dependency submission
*/
"dependency_graph_autosubmit_action": S.optionalWith(CodeSecurityCreateConfigurationRequestDependencyGraphAutosubmitAction, { nullable: true, default: () => "disabled" as const }),
  /**
* Feature options for Automatic dependency submission
*/
"dependency_graph_autosubmit_action_options": S.optionalWith(S.Struct({
  /**
* Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.
*/
"labeled_runners": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}), { nullable: true }),
  /**
* The enablement status of Dependabot alerts
*/
"dependabot_alerts": S.optionalWith(CodeSecurityCreateConfigurationRequestDependabotAlerts, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of Dependabot security updates
*/
"dependabot_security_updates": S.optionalWith(CodeSecurityCreateConfigurationRequestDependabotSecurityUpdates, { nullable: true, default: () => "disabled" as const }),
  "code_scanning_options": S.optionalWith(CodeScanningOptions, { nullable: true }),
  /**
* The enablement status of code scanning default setup
*/
"code_scanning_default_setup": S.optionalWith(CodeSecurityCreateConfigurationRequestCodeScanningDefaultSetup, { nullable: true, default: () => "disabled" as const }),
  "code_scanning_default_setup_options": S.optionalWith(CodeScanningDefaultSetupOptions, { nullable: true }),
  /**
* The enablement status of code scanning delegated alert dismissal
*/
"code_scanning_delegated_alert_dismissal": S.optionalWith(CodeSecurityCreateConfigurationRequestCodeScanningDelegatedAlertDismissal, { nullable: true, default: () => "not_set" as const }),
  /**
* The enablement status of GitHub Secret Protection features.
*/
"secret_protection": S.optionalWith(CodeSecurityCreateConfigurationRequestSecretProtection, { nullable: true }),
  /**
* The enablement status of secret scanning
*/
"secret_scanning": S.optionalWith(CodeSecurityCreateConfigurationRequestSecretScanning, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of secret scanning push protection
*/
"secret_scanning_push_protection": S.optionalWith(CodeSecurityCreateConfigurationRequestSecretScanningPushProtection, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of secret scanning delegated bypass
*/
"secret_scanning_delegated_bypass": S.optionalWith(CodeSecurityCreateConfigurationRequestSecretScanningDelegatedBypass, { nullable: true, default: () => "disabled" as const }),
  /**
* Feature options for secret scanning delegated bypass
*/
"secret_scanning_delegated_bypass_options": S.optionalWith(S.Struct({
  /**
* The bypass reviewers for secret scanning delegated bypass
*/
"reviewers": S.optionalWith(S.Array(S.Struct({
  /**
* The ID of the team or role selected as a bypass reviewer
*/
"reviewer_id": S.Int,
  /**
* The type of the bypass reviewer
*/
"reviewer_type": S.Literal("TEAM", "ROLE")
})), { nullable: true })
}), { nullable: true }),
  /**
* The enablement status of secret scanning validity checks
*/
"secret_scanning_validity_checks": S.optionalWith(CodeSecurityCreateConfigurationRequestSecretScanningValidityChecks, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of secret scanning non provider patterns
*/
"secret_scanning_non_provider_patterns": S.optionalWith(CodeSecurityCreateConfigurationRequestSecretScanningNonProviderPatterns, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of Copilot secret scanning
*/
"secret_scanning_generic_secrets": S.optionalWith(CodeSecurityCreateConfigurationRequestSecretScanningGenericSecrets, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of secret scanning delegated alert dismissal
*/
"secret_scanning_delegated_alert_dismissal": S.optionalWith(CodeSecurityCreateConfigurationRequestSecretScanningDelegatedAlertDismissal, { nullable: true }),
  /**
* The enablement status of private vulnerability reporting
*/
"private_vulnerability_reporting": S.optionalWith(CodeSecurityCreateConfigurationRequestPrivateVulnerabilityReporting, { nullable: true, default: () => "disabled" as const }),
  /**
* The enforcement status for a security configuration
*/
"enforcement": S.optionalWith(CodeSecurityCreateConfigurationRequestEnforcement, { nullable: true, default: () => "enforced" as const })
}) {}

export class CodeSecurityGetDefaultConfigurationsParams extends S.Struct({
  
}) {}

export class CodeSecurityDetachConfigurationParams extends S.Struct({
  
}) {}

export class CodeSecurityDetachConfigurationRequest extends S.Class<CodeSecurityDetachConfigurationRequest>("CodeSecurityDetachConfigurationRequest")({
  /**
* An array of repository IDs to detach from configurations. Up to 250 IDs can be provided.
*/
"selected_repository_ids": S.optionalWith(S.NonEmptyArray(S.Int).pipe(S.minItems(1), S.maxItems(250)), { nullable: true })
}) {}

export class CodeSecurityGetConfigurationParams extends S.Struct({
  
}) {}

export class CodeSecurityDeleteConfigurationParams extends S.Struct({
  
}) {}

export class CodeSecurityUpdateConfigurationParams extends S.Struct({
  
}) {}

/**
* The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
* 
* > [!WARNING]
* > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
*/
export class CodeSecurityUpdateConfigurationRequestAdvancedSecurity extends S.Literal("enabled", "disabled", "code_security", "secret_protection") {}

/**
* The enablement status of GitHub Code Security features.
*/
export class CodeSecurityUpdateConfigurationRequestCodeSecurity extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Dependency Graph
*/
export class CodeSecurityUpdateConfigurationRequestDependencyGraph extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Automatic dependency submission
*/
export class CodeSecurityUpdateConfigurationRequestDependencyGraphAutosubmitAction extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Dependabot alerts
*/
export class CodeSecurityUpdateConfigurationRequestDependabotAlerts extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Dependabot security updates
*/
export class CodeSecurityUpdateConfigurationRequestDependabotSecurityUpdates extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of code scanning default setup
*/
export class CodeSecurityUpdateConfigurationRequestCodeScanningDefaultSetup extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of code scanning delegated alert dismissal
*/
export class CodeSecurityUpdateConfigurationRequestCodeScanningDelegatedAlertDismissal extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of GitHub Secret Protection features.
*/
export class CodeSecurityUpdateConfigurationRequestSecretProtection extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning
*/
export class CodeSecurityUpdateConfigurationRequestSecretScanning extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning push protection
*/
export class CodeSecurityUpdateConfigurationRequestSecretScanningPushProtection extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning delegated bypass
*/
export class CodeSecurityUpdateConfigurationRequestSecretScanningDelegatedBypass extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning validity checks
*/
export class CodeSecurityUpdateConfigurationRequestSecretScanningValidityChecks extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning non-provider patterns
*/
export class CodeSecurityUpdateConfigurationRequestSecretScanningNonProviderPatterns extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of Copilot secret scanning
*/
export class CodeSecurityUpdateConfigurationRequestSecretScanningGenericSecrets extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of secret scanning delegated alert dismissal
*/
export class CodeSecurityUpdateConfigurationRequestSecretScanningDelegatedAlertDismissal extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enablement status of private vulnerability reporting
*/
export class CodeSecurityUpdateConfigurationRequestPrivateVulnerabilityReporting extends S.Literal("enabled", "disabled", "not_set") {}

/**
* The enforcement status for a security configuration
*/
export class CodeSecurityUpdateConfigurationRequestEnforcement extends S.Literal("enforced", "unenforced") {}

export class CodeSecurityUpdateConfigurationRequest extends S.Class<CodeSecurityUpdateConfigurationRequest>("CodeSecurityUpdateConfigurationRequest")({
  /**
* The name of the code security configuration. Must be unique within the organization.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* A description of the code security configuration
*/
"description": S.optionalWith(S.String.pipe(S.maxLength(255)), { nullable: true }),
  /**
* The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
* 
* > [!WARNING]
* > `code_security` and `secret_protection` are deprecated values for this field. Prefer the individual `code_security` and `secret_protection` fields to set the status of these features.
*/
"advanced_security": S.optionalWith(CodeSecurityUpdateConfigurationRequestAdvancedSecurity, { nullable: true }),
  /**
* The enablement status of GitHub Code Security features.
*/
"code_security": S.optionalWith(CodeSecurityUpdateConfigurationRequestCodeSecurity, { nullable: true }),
  /**
* The enablement status of Dependency Graph
*/
"dependency_graph": S.optionalWith(CodeSecurityUpdateConfigurationRequestDependencyGraph, { nullable: true }),
  /**
* The enablement status of Automatic dependency submission
*/
"dependency_graph_autosubmit_action": S.optionalWith(CodeSecurityUpdateConfigurationRequestDependencyGraphAutosubmitAction, { nullable: true }),
  /**
* Feature options for Automatic dependency submission
*/
"dependency_graph_autosubmit_action_options": S.optionalWith(S.Struct({
  /**
* Whether to use runners labeled with 'dependency-submission' or standard GitHub runners.
*/
"labeled_runners": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  /**
* The enablement status of Dependabot alerts
*/
"dependabot_alerts": S.optionalWith(CodeSecurityUpdateConfigurationRequestDependabotAlerts, { nullable: true }),
  /**
* The enablement status of Dependabot security updates
*/
"dependabot_security_updates": S.optionalWith(CodeSecurityUpdateConfigurationRequestDependabotSecurityUpdates, { nullable: true }),
  /**
* The enablement status of code scanning default setup
*/
"code_scanning_default_setup": S.optionalWith(CodeSecurityUpdateConfigurationRequestCodeScanningDefaultSetup, { nullable: true }),
  "code_scanning_default_setup_options": S.optionalWith(CodeScanningDefaultSetupOptions, { nullable: true }),
  /**
* The enablement status of code scanning delegated alert dismissal
*/
"code_scanning_delegated_alert_dismissal": S.optionalWith(CodeSecurityUpdateConfigurationRequestCodeScanningDelegatedAlertDismissal, { nullable: true, default: () => "disabled" as const }),
  /**
* The enablement status of GitHub Secret Protection features.
*/
"secret_protection": S.optionalWith(CodeSecurityUpdateConfigurationRequestSecretProtection, { nullable: true }),
  /**
* The enablement status of secret scanning
*/
"secret_scanning": S.optionalWith(CodeSecurityUpdateConfigurationRequestSecretScanning, { nullable: true }),
  /**
* The enablement status of secret scanning push protection
*/
"secret_scanning_push_protection": S.optionalWith(CodeSecurityUpdateConfigurationRequestSecretScanningPushProtection, { nullable: true }),
  /**
* The enablement status of secret scanning delegated bypass
*/
"secret_scanning_delegated_bypass": S.optionalWith(CodeSecurityUpdateConfigurationRequestSecretScanningDelegatedBypass, { nullable: true }),
  /**
* Feature options for secret scanning delegated bypass
*/
"secret_scanning_delegated_bypass_options": S.optionalWith(S.Struct({
  /**
* The bypass reviewers for secret scanning delegated bypass
*/
"reviewers": S.optionalWith(S.Array(S.Struct({
  /**
* The ID of the team or role selected as a bypass reviewer
*/
"reviewer_id": S.Int,
  /**
* The type of the bypass reviewer
*/
"reviewer_type": S.Literal("TEAM", "ROLE")
})), { nullable: true })
}), { nullable: true }),
  /**
* The enablement status of secret scanning validity checks
*/
"secret_scanning_validity_checks": S.optionalWith(CodeSecurityUpdateConfigurationRequestSecretScanningValidityChecks, { nullable: true }),
  /**
* The enablement status of secret scanning non-provider patterns
*/
"secret_scanning_non_provider_patterns": S.optionalWith(CodeSecurityUpdateConfigurationRequestSecretScanningNonProviderPatterns, { nullable: true }),
  /**
* The enablement status of Copilot secret scanning
*/
"secret_scanning_generic_secrets": S.optionalWith(CodeSecurityUpdateConfigurationRequestSecretScanningGenericSecrets, { nullable: true }),
  /**
* The enablement status of secret scanning delegated alert dismissal
*/
"secret_scanning_delegated_alert_dismissal": S.optionalWith(CodeSecurityUpdateConfigurationRequestSecretScanningDelegatedAlertDismissal, { nullable: true }),
  /**
* The enablement status of private vulnerability reporting
*/
"private_vulnerability_reporting": S.optionalWith(CodeSecurityUpdateConfigurationRequestPrivateVulnerabilityReporting, { nullable: true }),
  /**
* The enforcement status for a security configuration
*/
"enforcement": S.optionalWith(CodeSecurityUpdateConfigurationRequestEnforcement, { nullable: true })
}) {}

export class CodeSecurityAttachConfigurationParams extends S.Struct({
  
}) {}

/**
* The type of repositories to attach the configuration to. `selected` means the configuration will be attached to only the repositories specified by `selected_repository_ids`
*/
export class CodeSecurityAttachConfigurationRequestScope extends S.Literal("all", "all_without_configurations", "public", "private_or_internal", "selected") {}

export class CodeSecurityAttachConfigurationRequest extends S.Class<CodeSecurityAttachConfigurationRequest>("CodeSecurityAttachConfigurationRequest")({
  /**
* The type of repositories to attach the configuration to. `selected` means the configuration will be attached to only the repositories specified by `selected_repository_ids`
*/
"scope": CodeSecurityAttachConfigurationRequestScope,
  /**
* An array of repository IDs to attach the configuration to. You can only provide a list of repository ids when the `scope` is set to `selected`.
*/
"selected_repository_ids": S.optionalWith(S.Array(S.Int), { nullable: true })
}) {}

export class CodeSecurityAttachConfiguration202 extends S.Record({ key: S.String, value: S.Unknown }) {}

export class CodeSecuritySetConfigurationAsDefaultParams extends S.Struct({
  
}) {}

/**
* Specify which types of repository this security configuration should be applied to by default.
*/
export class CodeSecuritySetConfigurationAsDefaultRequestDefaultForNewRepos extends S.Literal("all", "none", "private_and_internal", "public") {}

export class CodeSecuritySetConfigurationAsDefaultRequest extends S.Class<CodeSecuritySetConfigurationAsDefaultRequest>("CodeSecuritySetConfigurationAsDefaultRequest")({
  /**
* Specify which types of repository this security configuration should be applied to by default.
*/
"default_for_new_repos": S.optionalWith(CodeSecuritySetConfigurationAsDefaultRequestDefaultForNewRepos, { nullable: true })
}) {}

/**
* Specifies which types of repository this security configuration is applied to by default.
*/
export class CodeSecuritySetConfigurationAsDefault200DefaultForNewRepos extends S.Literal("all", "none", "private_and_internal", "public") {}

export class CodeSecuritySetConfigurationAsDefault200 extends S.Struct({
  /**
* Specifies which types of repository this security configuration is applied to by default.
*/
"default_for_new_repos": S.optionalWith(CodeSecuritySetConfigurationAsDefault200DefaultForNewRepos, { nullable: true }),
  "configuration": S.optionalWith(CodeSecurityConfiguration, { nullable: true })
}) {}

export class CodeSecurityGetRepositoriesForConfigurationParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true }),
  "status": S.optionalWith(S.String, { nullable: true, default: () => "all" as const })
}) {}

export class CodeSecurityGetRepositoriesForConfiguration200 extends S.Array(CodeSecurityConfigurationRepositories) {}

export class CodespacesListInOrganizationParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
*/
export class NullableCodespaceMachinePrebuildAvailability extends S.Literal("none", "ready", "in_progress") {}

/**
* A description of the machine powering a codespace.
*/
export class NullableCodespaceMachine extends S.Class<NullableCodespaceMachine>("NullableCodespaceMachine")({
  /**
* The name of the machine.
*/
"name": S.String,
  /**
* The display name of the machine includes cores, memory, and storage.
*/
"display_name": S.String,
  /**
* The operating system of the machine.
*/
"operating_system": S.String,
  /**
* How much storage is available to the codespace.
*/
"storage_in_bytes": S.Int,
  /**
* How much memory is available to the codespace.
*/
"memory_in_bytes": S.Int,
  /**
* How many cores are available to the codespace.
*/
"cpus": S.Int,
  /**
* Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
*/
"prebuild_availability": S.NullOr(NullableCodespaceMachinePrebuildAvailability)
}) {}

/**
* State of this codespace.
*/
export class CodespaceState extends S.Literal("Unknown", "Created", "Queued", "Provisioning", "Available", "Awaiting", "Unavailable", "Deleted", "Moved", "Shutdown", "Archived", "Starting", "ShuttingDown", "Failed", "Exporting", "Updating", "Rebuilding") {}

/**
* The initally assigned location of a new codespace.
*/
export class CodespaceLocation extends S.Literal("EastUs", "SouthEastAsia", "WestEurope", "WestUs2") {}

/**
* A codespace.
*/
export class Codespace extends S.Class<Codespace>("Codespace")({
  "id": S.Int,
  /**
* Automatically generated name of this codespace.
*/
"name": S.String,
  /**
* Display name for this codespace.
*/
"display_name": S.optionalWith(S.String, { nullable: true }),
  /**
* UUID identifying this codespace's environment.
*/
"environment_id": S.NullOr(S.String),
  "owner": SimpleUser,
  "billable_owner": SimpleUser,
  "repository": MinimalRepository,
  "machine": S.NullOr(NullableCodespaceMachine),
  /**
* Path to devcontainer.json from repo root used to create Codespace.
*/
"devcontainer_path": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether the codespace was created from a prebuild.
*/
"prebuild": S.NullOr(S.Boolean),
  "created_at": S.String,
  "updated_at": S.String,
  /**
* Last known time this codespace was started.
*/
"last_used_at": S.String,
  /**
* State of this codespace.
*/
"state": CodespaceState,
  /**
* API URL for this codespace.
*/
"url": S.String,
  /**
* Details about the codespace's git repository.
*/
"git_status": S.Struct({
  /**
* The number of commits the local repository is ahead of the remote.
*/
"ahead": S.optionalWith(S.Int, { nullable: true }),
  /**
* The number of commits the local repository is behind the remote.
*/
"behind": S.optionalWith(S.Int, { nullable: true }),
  /**
* Whether the local repository has unpushed changes.
*/
"has_unpushed_changes": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Whether the local repository has uncommitted changes.
*/
"has_uncommitted_changes": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The current branch (or SHA if in detached HEAD state) of the local repository.
*/
"ref": S.optionalWith(S.String, { nullable: true })
}),
  /**
* The initally assigned location of a new codespace.
*/
"location": CodespaceLocation,
  /**
* The number of minutes of inactivity after which this codespace will be automatically stopped.
*/
"idle_timeout_minutes": S.NullOr(S.Int),
  /**
* URL to access this codespace on the web.
*/
"web_url": S.String,
  /**
* API URL to access available alternate machine types for this codespace.
*/
"machines_url": S.String,
  /**
* API URL to start this codespace.
*/
"start_url": S.String,
  /**
* API URL to stop this codespace.
*/
"stop_url": S.String,
  /**
* API URL to publish this codespace to a new repository.
*/
"publish_url": S.optionalWith(S.String, { nullable: true }),
  /**
* API URL for the Pull Request associated with this codespace, if any.
*/
"pulls_url": S.NullOr(S.String),
  "recent_folders": S.Array(S.String),
  "runtime_constraints": S.optionalWith(S.Struct({
  /**
* The privacy settings a user can select from when forwarding a port.
*/
"allowed_port_privacy_settings": S.optionalWith(S.Array(S.String), { nullable: true })
}), { nullable: true }),
  /**
* Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
*/
"pending_operation": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Text to show user when codespace is disabled by a pending operation
*/
"pending_operation_disabled_reason": S.optionalWith(S.String, { nullable: true }),
  /**
* Text to show user when codespace idle timeout minutes has been overriden by an organization policy
*/
"idle_timeout_notice": S.optionalWith(S.String, { nullable: true }),
  /**
* Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
*/
"retention_period_minutes": S.optionalWith(S.Int, { nullable: true }),
  /**
* When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
*/
"retention_expires_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The text to display to a user when a codespace has been stopped for a potentially actionable reason.
*/
"last_known_stop_notice": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodespacesListInOrganization200 extends S.Struct({
  "total_count": S.Int,
  "codespaces": S.Array(Codespace)
}) {}

export class CodespacesSetCodespacesAccessParams extends S.Struct({
  
}) {}

/**
* Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.
*/
export class CodespacesSetCodespacesAccessRequestVisibility extends S.Literal("disabled", "selected_members", "all_members", "all_members_and_outside_collaborators") {}

export class CodespacesSetCodespacesAccessRequest extends S.Class<CodespacesSetCodespacesAccessRequest>("CodespacesSetCodespacesAccessRequest")({
  /**
* Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.
*/
"visibility": CodespacesSetCodespacesAccessRequestVisibility,
  /**
* The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.
*/
"selected_usernames": S.optionalWith(S.Array(S.String).pipe(S.maxItems(100)), { nullable: true })
}) {}

export class CodespacesSetCodespacesAccessUsersParams extends S.Struct({
  
}) {}

export class CodespacesSetCodespacesAccessUsersRequest extends S.Class<CodespacesSetCodespacesAccessUsersRequest>("CodespacesSetCodespacesAccessUsersRequest")({
  /**
* The usernames of the organization members whose codespaces be billed to the organization.
*/
"selected_usernames": S.Array(S.String).pipe(S.maxItems(100))
}) {}

export class CodespacesDeleteCodespacesAccessUsersParams extends S.Struct({
  
}) {}

export class CodespacesDeleteCodespacesAccessUsersRequest extends S.Class<CodespacesDeleteCodespacesAccessUsersRequest>("CodespacesDeleteCodespacesAccessUsersRequest")({
  /**
* The usernames of the organization members whose codespaces should not be billed to the organization.
*/
"selected_usernames": S.Array(S.String).pipe(S.maxItems(100))
}) {}

export class CodespacesListOrgSecretsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* The type of repositories in the organization that the secret is visible to
*/
export class CodespacesOrgSecretVisibility extends S.Literal("all", "private", "selected") {}

/**
* Secrets for a GitHub Codespace.
*/
export class CodespacesOrgSecret extends S.Class<CodespacesOrgSecret>("CodespacesOrgSecret")({
  /**
* The name of the secret
*/
"name": S.String,
  /**
* The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
"created_at": S.String,
  /**
* The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
"updated_at": S.String,
  /**
* The type of repositories in the organization that the secret is visible to
*/
"visibility": CodespacesOrgSecretVisibility,
  /**
* The API URL at which the list of repositories this secret is visible to can be retrieved
*/
"selected_repositories_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodespacesListOrgSecrets200 extends S.Struct({
  "total_count": S.Int,
  "secrets": S.Array(CodespacesOrgSecret)
}) {}

export class CodespacesGetOrgPublicKeyParams extends S.Struct({
  
}) {}

/**
* The public key used for setting Codespaces secrets.
*/
export class CodespacesPublicKey extends S.Class<CodespacesPublicKey>("CodespacesPublicKey")({
  /**
* The identifier for the key.
*/
"key_id": S.String,
  /**
* The Base64 encoded public key.
*/
"key": S.String,
  "id": S.optionalWith(S.Int, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true }),
  "title": S.optionalWith(S.String, { nullable: true }),
  "created_at": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodespacesGetOrgSecretParams extends S.Struct({
  
}) {}

export class CodespacesCreateOrUpdateOrgSecretParams extends S.Struct({
  
}) {}

/**
* Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
*/
export class CodespacesCreateOrUpdateOrgSecretRequestVisibility extends S.Literal("all", "private", "selected") {}

export class CodespacesCreateOrUpdateOrgSecretRequest extends S.Class<CodespacesCreateOrUpdateOrgSecretRequest>("CodespacesCreateOrUpdateOrgSecretRequest")({
  /**
* The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/codespaces/organization-secrets#get-an-organization-public-key) endpoint.
*/
"encrypted_value": S.optionalWith(S.String.pipe(S.pattern(new RegExp("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"))), { nullable: true }),
  /**
* The ID of the key you used to encrypt the secret.
*/
"key_id": S.optionalWith(S.String, { nullable: true }),
  /**
* Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
*/
"visibility": CodespacesCreateOrUpdateOrgSecretRequestVisibility,
  /**
* An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints.
*/
"selected_repository_ids": S.optionalWith(S.Array(S.Int), { nullable: true })
}) {}

export class CodespacesDeleteOrgSecretParams extends S.Struct({
  
}) {}

export class CodespacesListSelectedReposForOrgSecretParams extends S.Struct({
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

export class CodespacesListSelectedReposForOrgSecret200 extends S.Struct({
  "total_count": S.Int,
  "repositories": S.Array(MinimalRepository)
}) {}

export class CodespacesSetSelectedReposForOrgSecretParams extends S.Struct({
  
}) {}

export class CodespacesSetSelectedReposForOrgSecretRequest extends S.Class<CodespacesSetSelectedReposForOrgSecretRequest>("CodespacesSetSelectedReposForOrgSecretRequest")({
  /**
* An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints.
*/
"selected_repository_ids": S.Array(S.Int)
}) {}

export class CodespacesAddSelectedRepoToOrgSecretParams extends S.Struct({
  
}) {}

export class CodespacesRemoveSelectedRepoFromOrgSecretParams extends S.Struct({
  
}) {}

export class CopilotGetCopilotOrganizationDetailsParams extends S.Struct({
  
}) {}

/**
* The breakdown of Copilot Business seats for the organization.
*/
export class CopilotOrganizationSeatBreakdown extends S.Class<CopilotOrganizationSeatBreakdown>("CopilotOrganizationSeatBreakdown")({
  /**
* The total number of seats being billed for the organization as of the current billing cycle.
*/
"total": S.optionalWith(S.Int, { nullable: true }),
  /**
* Seats added during the current billing cycle.
*/
"added_this_cycle": S.optionalWith(S.Int, { nullable: true }),
  /**
* The number of seats that are pending cancellation at the end of the current billing cycle.
*/
"pending_cancellation": S.optionalWith(S.Int, { nullable: true }),
  /**
* The number of users who have been invited to receive a Copilot seat through this organization.
*/
"pending_invitation": S.optionalWith(S.Int, { nullable: true }),
  /**
* The number of seats that have used Copilot during the current billing cycle.
*/
"active_this_cycle": S.optionalWith(S.Int, { nullable: true }),
  /**
* The number of seats that have not used Copilot during the current billing cycle.
*/
"inactive_this_cycle": S.optionalWith(S.Int, { nullable: true })
}) {}

/**
* The organization policy for allowing or blocking suggestions matching public code (duplication detection filter).
*/
export class CopilotOrganizationDetailsPublicCodeSuggestions extends S.Literal("allow", "block", "unconfigured") {}

/**
* The organization policy for allowing or disallowing Copilot Chat in the IDE.
*/
export class CopilotOrganizationDetailsIdeChat extends S.Literal("enabled", "disabled", "unconfigured") {}

/**
* The organization policy for allowing or disallowing Copilot features on GitHub.com.
*/
export class CopilotOrganizationDetailsPlatformChat extends S.Literal("enabled", "disabled", "unconfigured") {}

/**
* The organization policy for allowing or disallowing Copilot in the CLI.
*/
export class CopilotOrganizationDetailsCli extends S.Literal("enabled", "disabled", "unconfigured") {}

/**
* The mode of assigning new seats.
*/
export class CopilotOrganizationDetailsSeatManagementSetting extends S.Literal("assign_all", "assign_selected", "disabled", "unconfigured") {}

/**
* The Copilot plan of the organization, or the parent enterprise, when applicable.
*/
export class CopilotOrganizationDetailsPlanType extends S.Literal("business", "enterprise") {}

/**
* Information about the seat breakdown and policies set for an organization with a Copilot Business or Copilot Enterprise subscription.
*/
export class CopilotOrganizationDetails extends S.Class<CopilotOrganizationDetails>("CopilotOrganizationDetails")({
  "seat_breakdown": CopilotOrganizationSeatBreakdown,
  /**
* The organization policy for allowing or blocking suggestions matching public code (duplication detection filter).
*/
"public_code_suggestions": CopilotOrganizationDetailsPublicCodeSuggestions,
  /**
* The organization policy for allowing or disallowing Copilot Chat in the IDE.
*/
"ide_chat": S.optionalWith(CopilotOrganizationDetailsIdeChat, { nullable: true }),
  /**
* The organization policy for allowing or disallowing Copilot features on GitHub.com.
*/
"platform_chat": S.optionalWith(CopilotOrganizationDetailsPlatformChat, { nullable: true }),
  /**
* The organization policy for allowing or disallowing Copilot in the CLI.
*/
"cli": S.optionalWith(CopilotOrganizationDetailsCli, { nullable: true }),
  /**
* The mode of assigning new seats.
*/
"seat_management_setting": CopilotOrganizationDetailsSeatManagementSetting,
  /**
* The Copilot plan of the organization, or the parent enterprise, when applicable.
*/
"plan_type": S.optionalWith(CopilotOrganizationDetailsPlanType, { nullable: true })
}) {}

export class CopilotListCopilotSeatsParams extends S.Struct({
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 50 as const })
}) {}

/**
* A GitHub organization.
*/
export class NullableOrganizationSimple extends S.Class<NullableOrganizationSimple>("NullableOrganizationSimple")({
  "login": S.String,
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "repos_url": S.String,
  "events_url": S.String,
  "hooks_url": S.String,
  "issues_url": S.String,
  "members_url": S.String,
  "public_members_url": S.String,
  "avatar_url": S.String,
  "description": S.NullOr(S.String)
}) {}

/**
* Group of enterprise owners and/or members
*/
export class EnterpriseTeam extends S.Class<EnterpriseTeam>("EnterpriseTeam")({
  "id": S.Int,
  "name": S.String,
  "description": S.optionalWith(S.String, { nullable: true }),
  "slug": S.String,
  "url": S.String,
  "sync_to_organizations": S.optionalWith(S.String, { nullable: true }),
  "organization_selection_type": S.optionalWith(S.String, { nullable: true }),
  "group_id": S.optionalWith(S.String, { nullable: true }),
  "group_name": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.String,
  "members_url": S.String,
  "created_at": S.String,
  "updated_at": S.String
}) {}

/**
* The Copilot plan of the organization, or the parent enterprise, when applicable.
*/
export class CopilotSeatDetailsPlanType extends S.Literal("business", "enterprise", "unknown") {}

/**
* Information about a Copilot Business seat assignment for a user, team, or organization.
*/
export class CopilotSeatDetails extends S.Class<CopilotSeatDetails>("CopilotSeatDetails")({
  "assignee": S.optionalWith(NullableSimpleUser, { nullable: true }),
  "organization": S.optionalWith(NullableOrganizationSimple, { nullable: true }),
  /**
* The team through which the assignee is granted access to GitHub Copilot, if applicable.
*/
"assigning_team": S.optionalWith(S.Union(Team,
EnterpriseTeam), { nullable: true }),
  /**
* The pending cancellation date for the seat, in `YYYY-MM-DD` format. This will be null unless the assignee's Copilot access has been canceled during the current billing cycle. If the seat has been cancelled, this corresponds to the start of the organization's next billing cycle.
*/
"pending_cancellation_date": S.optionalWith(S.String, { nullable: true }),
  /**
* Timestamp of user's last GitHub Copilot activity, in ISO 8601 format.
*/
"last_activity_at": S.optionalWith(S.String, { nullable: true }),
  /**
* Last editor that was used by the user for a GitHub Copilot completion.
*/
"last_activity_editor": S.optionalWith(S.String, { nullable: true }),
  /**
* Timestamp of the last time the user authenticated with GitHub Copilot, in ISO 8601 format.
*/
"last_authenticated_at": S.optionalWith(S.String, { nullable: true }),
  /**
* Timestamp of when the assignee was last granted access to GitHub Copilot, in ISO 8601 format.
*/
"created_at": S.String,
  /**
* **Closing down notice:** This field is no longer relevant and is closing down. Use the `created_at` field to determine when the assignee was last granted access to GitHub Copilot. Timestamp of when the assignee's GitHub Copilot access was last updated, in ISO 8601 format.
*/
"updated_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The Copilot plan of the organization, or the parent enterprise, when applicable.
*/
"plan_type": S.optionalWith(CopilotSeatDetailsPlanType, { nullable: true })
}) {}

export class CopilotListCopilotSeats200 extends S.Struct({
  /**
* Total number of Copilot seats for the organization currently being billed.
*/
"total_seats": S.optionalWith(S.Int, { nullable: true }),
  "seats": S.optionalWith(S.Array(CopilotSeatDetails), { nullable: true })
}) {}

export class CopilotAddCopilotSeatsForTeamsParams extends S.Struct({
  
}) {}

export class CopilotAddCopilotSeatsForTeamsRequest extends S.Class<CopilotAddCopilotSeatsForTeamsRequest>("CopilotAddCopilotSeatsForTeamsRequest")({
  /**
* List of team names within the organization to which to grant access to GitHub Copilot.
*/
"selected_teams": S.NonEmptyArray(S.String).pipe(S.minItems(1))
}) {}

/**
* The total number of seats created for members of the specified team(s).
*/
export class CopilotAddCopilotSeatsForTeams201 extends S.Struct({
  "seats_created": S.Int
}) {}

export class CopilotCancelCopilotSeatAssignmentForTeamsParams extends S.Struct({
  
}) {}

export class CopilotCancelCopilotSeatAssignmentForTeamsRequest extends S.Class<CopilotCancelCopilotSeatAssignmentForTeamsRequest>("CopilotCancelCopilotSeatAssignmentForTeamsRequest")({
  /**
* The names of teams from which to revoke access to GitHub Copilot.
*/
"selected_teams": S.NonEmptyArray(S.String).pipe(S.minItems(1))
}) {}

/**
* The total number of seats set to "pending cancellation" for members of the specified team(s).
*/
export class CopilotCancelCopilotSeatAssignmentForTeams200 extends S.Struct({
  "seats_cancelled": S.Int
}) {}

export class CopilotAddCopilotSeatsForUsersParams extends S.Struct({
  
}) {}

export class CopilotAddCopilotSeatsForUsersRequest extends S.Class<CopilotAddCopilotSeatsForUsersRequest>("CopilotAddCopilotSeatsForUsersRequest")({
  /**
* The usernames of the organization members to be granted access to GitHub Copilot.
*/
"selected_usernames": S.NonEmptyArray(S.String).pipe(S.minItems(1))
}) {}

/**
* The total number of seats created for the specified user(s).
*/
export class CopilotAddCopilotSeatsForUsers201 extends S.Struct({
  "seats_created": S.Int
}) {}

export class CopilotCancelCopilotSeatAssignmentForUsersParams extends S.Struct({
  
}) {}

export class CopilotCancelCopilotSeatAssignmentForUsersRequest extends S.Class<CopilotCancelCopilotSeatAssignmentForUsersRequest>("CopilotCancelCopilotSeatAssignmentForUsersRequest")({
  /**
* The usernames of the organization members for which to revoke access to GitHub Copilot.
*/
"selected_usernames": S.NonEmptyArray(S.String).pipe(S.minItems(1))
}) {}

/**
* The total number of seats set to "pending cancellation" for the specified users.
*/
export class CopilotCancelCopilotSeatAssignmentForUsers200 extends S.Struct({
  "seats_cancelled": S.Int
}) {}

export class CopilotCopilotMetricsForOrganizationParams extends S.Struct({
  "since": S.optionalWith(S.String, { nullable: true }),
  "until": S.optionalWith(S.String, { nullable: true }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 28 as const })
}) {}

/**
* Usage metrics for Copilot editor code completions in the IDE.
*/
export class CopilotIdeCodeCompletions extends S.Class<CopilotIdeCodeCompletions>("CopilotIdeCodeCompletions")({
  /**
* Number of users who accepted at least one Copilot code suggestion, across all active editors. Includes both full and partial acceptances.
*/
"total_engaged_users": S.optionalWith(S.Int, { nullable: true }),
  /**
* Code completion metrics for active languages.
*/
"languages": S.optionalWith(S.Array(S.Struct({
  /**
* Name of the language used for Copilot code completion suggestions.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* Number of users who accepted at least one Copilot code completion suggestion for the given language. Includes both full and partial acceptances.
*/
"total_engaged_users": S.optionalWith(S.Int, { nullable: true })
})), { nullable: true }),
  "editors": S.optionalWith(S.Array(S.Struct({
  /**
* Name of the given editor.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* Number of users who accepted at least one Copilot code completion suggestion for the given editor. Includes both full and partial acceptances.
*/
"total_engaged_users": S.optionalWith(S.Int, { nullable: true }),
  /**
* List of model metrics for custom models and the default model.
*/
"models": S.optionalWith(S.Array(S.Struct({
  /**
* Name of the model used for Copilot code completion suggestions. If the default model is used will appear as 'default'.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* Indicates whether a model is custom or default.
*/
"is_custom_model": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The training date for the custom model.
*/
"custom_model_training_date": S.optionalWith(S.String, { nullable: true }),
  /**
* Number of users who accepted at least one Copilot code completion suggestion for the given editor, for the given language and model. Includes both full and partial acceptances.
*/
"total_engaged_users": S.optionalWith(S.Int, { nullable: true }),
  /**
* Code completion metrics for active languages, for the given editor.
*/
"languages": S.optionalWith(S.Array(S.Struct({
  /**
* Name of the language used for Copilot code completion suggestions, for the given editor.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* Number of users who accepted at least one Copilot code completion suggestion for the given editor, for the given language. Includes both full and partial acceptances.
*/
"total_engaged_users": S.optionalWith(S.Int, { nullable: true }),
  /**
* The number of Copilot code suggestions generated for the given editor, for the given language.
*/
"total_code_suggestions": S.optionalWith(S.Int, { nullable: true }),
  /**
* The number of Copilot code suggestions accepted for the given editor, for the given language. Includes both full and partial acceptances.
*/
"total_code_acceptances": S.optionalWith(S.Int, { nullable: true }),
  /**
* The number of lines of code suggested by Copilot code completions for the given editor, for the given language.
*/
"total_code_lines_suggested": S.optionalWith(S.Int, { nullable: true }),
  /**
* The number of lines of code accepted from Copilot code suggestions for the given editor, for the given language.
*/
"total_code_lines_accepted": S.optionalWith(S.Int, { nullable: true })
})), { nullable: true })
})), { nullable: true })
})), { nullable: true })
}) {}

/**
* Usage metrics for Copilot Chat in the IDE.
*/
export class CopilotIdeChat extends S.Class<CopilotIdeChat>("CopilotIdeChat")({
  /**
* Total number of users who prompted Copilot Chat in the IDE.
*/
"total_engaged_users": S.optionalWith(S.Int, { nullable: true }),
  "editors": S.optionalWith(S.Array(S.Struct({
  /**
* Name of the given editor.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The number of users who prompted Copilot Chat in the specified editor.
*/
"total_engaged_users": S.optionalWith(S.Int, { nullable: true }),
  /**
* List of model metrics for custom models and the default model.
*/
"models": S.optionalWith(S.Array(S.Struct({
  /**
* Name of the model used for Copilot Chat. If the default model is used will appear as 'default'.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* Indicates whether a model is custom or default.
*/
"is_custom_model": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The training date for the custom model.
*/
"custom_model_training_date": S.optionalWith(S.String, { nullable: true }),
  /**
* The number of users who prompted Copilot Chat in the given editor and model.
*/
"total_engaged_users": S.optionalWith(S.Int, { nullable: true }),
  /**
* The total number of chats initiated by users in the given editor and model.
*/
"total_chats": S.optionalWith(S.Int, { nullable: true }),
  /**
* The number of times users accepted a code suggestion from Copilot Chat using the 'Insert Code' UI element, for the given editor.
*/
"total_chat_insertion_events": S.optionalWith(S.Int, { nullable: true }),
  /**
* The number of times users copied a code suggestion from Copilot Chat using the keyboard, or the 'Copy' UI element, for the given editor.
*/
"total_chat_copy_events": S.optionalWith(S.Int, { nullable: true })
})), { nullable: true })
})), { nullable: true })
}) {}

/**
* Usage metrics for Copilot Chat in GitHub.com
*/
export class CopilotDotcomChat extends S.Class<CopilotDotcomChat>("CopilotDotcomChat")({
  /**
* Total number of users who prompted Copilot Chat on github.com at least once.
*/
"total_engaged_users": S.optionalWith(S.Int, { nullable: true }),
  /**
* List of model metrics for a custom models and the default model.
*/
"models": S.optionalWith(S.Array(S.Struct({
  /**
* Name of the model used for Copilot Chat. If the default model is used will appear as 'default'.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* Indicates whether a model is custom or default.
*/
"is_custom_model": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The training date for the custom model (if applicable).
*/
"custom_model_training_date": S.optionalWith(S.String, { nullable: true }),
  /**
* Total number of users who prompted Copilot Chat on github.com at least once for each model.
*/
"total_engaged_users": S.optionalWith(S.Int, { nullable: true }),
  /**
* Total number of chats initiated by users on github.com.
*/
"total_chats": S.optionalWith(S.Int, { nullable: true })
})), { nullable: true })
}) {}

/**
* Usage metrics for Copilot for pull requests.
*/
export class CopilotDotcomPullRequests extends S.Class<CopilotDotcomPullRequests>("CopilotDotcomPullRequests")({
  /**
* The number of users who used Copilot for Pull Requests on github.com to generate a pull request summary at least once.
*/
"total_engaged_users": S.optionalWith(S.Int, { nullable: true }),
  /**
* Repositories in which users used Copilot for Pull Requests to generate pull request summaries
*/
"repositories": S.optionalWith(S.Array(S.Struct({
  /**
* Repository name
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The number of users who generated pull request summaries using Copilot for Pull Requests in the given repository.
*/
"total_engaged_users": S.optionalWith(S.Int, { nullable: true }),
  /**
* List of model metrics for custom models and the default model.
*/
"models": S.optionalWith(S.Array(S.Struct({
  /**
* Name of the model used for Copilot pull request summaries. If the default model is used will appear as 'default'.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* Indicates whether a model is custom or default.
*/
"is_custom_model": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The training date for the custom model.
*/
"custom_model_training_date": S.optionalWith(S.String, { nullable: true }),
  /**
* The number of pull request summaries generated using Copilot for Pull Requests in the given repository.
*/
"total_pr_summaries_created": S.optionalWith(S.Int, { nullable: true }),
  /**
* The number of users who generated pull request summaries using Copilot for Pull Requests in the given repository and model.
*/
"total_engaged_users": S.optionalWith(S.Int, { nullable: true })
})), { nullable: true })
})), { nullable: true })
}) {}

/**
* Copilot usage metrics for a given day.
*/
export class CopilotUsageMetricsDay extends S.Class<CopilotUsageMetricsDay>("CopilotUsageMetricsDay")({
  /**
* The date for which the usage metrics are aggregated, in `YYYY-MM-DD` format.
*/
"date": S.String,
  /**
* The total number of Copilot users with activity belonging to any Copilot feature, globally, for the given day. Includes passive activity such as receiving a code suggestion, as well as engagement activity such as accepting a code suggestion or prompting chat. Does not include authentication events. Is not limited to the individual features detailed on the endpoint.
*/
"total_active_users": S.optionalWith(S.Int, { nullable: true }),
  /**
* The total number of Copilot users who engaged with any Copilot feature, for the given day. Examples include but are not limited to accepting a code suggestion, prompting Copilot chat, or triggering a PR Summary. Does not include authentication events. Is not limited to the individual features detailed on the endpoint.
*/
"total_engaged_users": S.optionalWith(S.Int, { nullable: true }),
  "copilot_ide_code_completions": S.optionalWith(CopilotIdeCodeCompletions, { nullable: true }),
  "copilot_ide_chat": S.optionalWith(CopilotIdeChat, { nullable: true }),
  "copilot_dotcom_chat": S.optionalWith(CopilotDotcomChat, { nullable: true }),
  "copilot_dotcom_pull_requests": S.optionalWith(CopilotDotcomPullRequests, { nullable: true })
}) {}

export class CopilotCopilotMetricsForOrganization200 extends S.Array(CopilotUsageMetricsDay) {}

export class DependabotListAlertsForOrgParamsScope extends S.Literal("development", "runtime") {}

export class DependabotListAlertsForOrgParamsSort extends S.Literal("created", "updated", "epss_percentage") {}

export class DependabotListAlertsForOrgParamsDirection extends S.Literal("asc", "desc") {}

export class DependabotListAlertsForOrgParams extends S.Struct({
  "state": S.optionalWith(S.String, { nullable: true }),
  "severity": S.optionalWith(S.String, { nullable: true }),
  "ecosystem": S.optionalWith(S.String, { nullable: true }),
  "package": S.optionalWith(S.String, { nullable: true }),
  "epss_percentage": S.optionalWith(S.String, { nullable: true }),
  "artifact_registry_url": S.optionalWith(S.String, { nullable: true }),
  "artifact_registry": S.optionalWith(S.String, { nullable: true }),
  "has": S.optionalWith(S.Union(S.String,
S.Array(S.Literal("patch"))), { nullable: true }),
  "scope": S.optionalWith(DependabotListAlertsForOrgParamsScope, { nullable: true }),
  "sort": S.optionalWith(DependabotListAlertsForOrgParamsSort, { nullable: true, default: () => "created" as const }),
  "direction": S.optionalWith(DependabotListAlertsForOrgParamsDirection, { nullable: true, default: () => "desc" as const }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true }),
  "first": S.optionalWith(S.Int.pipe(S.greaterThanOrEqualTo(1), S.lessThanOrEqualTo(100)), { nullable: true, default: () => 30 as const }),
  "last": S.optionalWith(S.Int.pipe(S.greaterThanOrEqualTo(1), S.lessThanOrEqualTo(100)), { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

export class DependabotListAlertsForOrg200 extends S.Array(DependabotAlertWithRepository) {}

export class DependabotListOrgSecretsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Visibility of a secret
*/
export class OrganizationDependabotSecretVisibility extends S.Literal("all", "private", "selected") {}

/**
* Secrets for GitHub Dependabot for an organization.
*/
export class OrganizationDependabotSecret extends S.Class<OrganizationDependabotSecret>("OrganizationDependabotSecret")({
  /**
* The name of the secret.
*/
"name": S.String,
  "created_at": S.String,
  "updated_at": S.String,
  /**
* Visibility of a secret
*/
"visibility": OrganizationDependabotSecretVisibility,
  "selected_repositories_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class DependabotListOrgSecrets200 extends S.Struct({
  "total_count": S.Int,
  "secrets": S.Array(OrganizationDependabotSecret)
}) {}

export class DependabotGetOrgPublicKeyParams extends S.Struct({
  
}) {}

/**
* The public key used for setting Dependabot Secrets.
*/
export class DependabotPublicKey extends S.Class<DependabotPublicKey>("DependabotPublicKey")({
  /**
* The identifier for the key.
*/
"key_id": S.String,
  /**
* The Base64 encoded public key.
*/
"key": S.String
}) {}

export class DependabotGetOrgSecretParams extends S.Struct({
  
}) {}

export class DependabotCreateOrUpdateOrgSecretParams extends S.Struct({
  
}) {}

/**
* Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
*/
export class DependabotCreateOrUpdateOrgSecretRequestVisibility extends S.Literal("all", "private", "selected") {}

export class DependabotCreateOrUpdateOrgSecretRequest extends S.Class<DependabotCreateOrUpdateOrgSecretRequest>("DependabotCreateOrUpdateOrgSecretRequest")({
  /**
* Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/dependabot/secrets#get-an-organization-public-key) endpoint.
*/
"encrypted_value": S.optionalWith(S.String.pipe(S.pattern(new RegExp("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"))), { nullable: true }),
  /**
* ID of the key you used to encrypt the secret.
*/
"key_id": S.optionalWith(S.String, { nullable: true }),
  /**
* Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
*/
"visibility": DependabotCreateOrUpdateOrgSecretRequestVisibility,
  /**
* An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
*/
"selected_repository_ids": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class DependabotDeleteOrgSecretParams extends S.Struct({
  
}) {}

export class DependabotListSelectedReposForOrgSecretParams extends S.Struct({
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

export class DependabotListSelectedReposForOrgSecret200 extends S.Struct({
  "total_count": S.Int,
  "repositories": S.Array(MinimalRepository)
}) {}

export class DependabotSetSelectedReposForOrgSecretParams extends S.Struct({
  
}) {}

export class DependabotSetSelectedReposForOrgSecretRequest extends S.Class<DependabotSetSelectedReposForOrgSecretRequest>("DependabotSetSelectedReposForOrgSecretRequest")({
  /**
* An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
*/
"selected_repository_ids": S.Array(S.Int)
}) {}

export class DependabotAddSelectedRepoToOrgSecretParams extends S.Struct({
  
}) {}

export class DependabotRemoveSelectedRepoFromOrgSecretParams extends S.Struct({
  
}) {}

export class PackagesListDockerMigrationConflictingPackagesForOrganizationParams extends S.Struct({
  
}) {}

export class PackagePackageType extends S.Literal("npm", "maven", "rubygems", "docker", "nuget", "container") {}

export class PackageVisibility extends S.Literal("private", "public") {}

/**
* Minimal Repository
*/
export class NullableMinimalRepository extends S.Class<NullableMinimalRepository>("NullableMinimalRepository")({
  "id": S.Int,
  "node_id": S.String,
  "name": S.String,
  "full_name": S.String,
  "owner": SimpleUser,
  "private": S.Boolean,
  "html_url": S.String,
  "description": S.NullOr(S.String),
  "fork": S.Boolean,
  "url": S.String,
  "archive_url": S.String,
  "assignees_url": S.String,
  "blobs_url": S.String,
  "branches_url": S.String,
  "collaborators_url": S.String,
  "comments_url": S.String,
  "commits_url": S.String,
  "compare_url": S.String,
  "contents_url": S.String,
  "contributors_url": S.String,
  "deployments_url": S.String,
  "downloads_url": S.String,
  "events_url": S.String,
  "forks_url": S.String,
  "git_commits_url": S.String,
  "git_refs_url": S.String,
  "git_tags_url": S.String,
  "git_url": S.optionalWith(S.String, { nullable: true }),
  "issue_comment_url": S.String,
  "issue_events_url": S.String,
  "issues_url": S.String,
  "keys_url": S.String,
  "labels_url": S.String,
  "languages_url": S.String,
  "merges_url": S.String,
  "milestones_url": S.String,
  "notifications_url": S.String,
  "pulls_url": S.String,
  "releases_url": S.String,
  "ssh_url": S.optionalWith(S.String, { nullable: true }),
  "stargazers_url": S.String,
  "statuses_url": S.String,
  "subscribers_url": S.String,
  "subscription_url": S.String,
  "tags_url": S.String,
  "teams_url": S.String,
  "trees_url": S.String,
  "clone_url": S.optionalWith(S.String, { nullable: true }),
  "mirror_url": S.optionalWith(S.String, { nullable: true }),
  "hooks_url": S.String,
  "svn_url": S.optionalWith(S.String, { nullable: true }),
  "homepage": S.optionalWith(S.String, { nullable: true }),
  "language": S.optionalWith(S.String, { nullable: true }),
  "forks_count": S.optionalWith(S.Int, { nullable: true }),
  "stargazers_count": S.optionalWith(S.Int, { nullable: true }),
  "watchers_count": S.optionalWith(S.Int, { nullable: true }),
  /**
* The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
*/
"size": S.optionalWith(S.Int, { nullable: true }),
  "default_branch": S.optionalWith(S.String, { nullable: true }),
  "open_issues_count": S.optionalWith(S.Int, { nullable: true }),
  "is_template": S.optionalWith(S.Boolean, { nullable: true }),
  "topics": S.optionalWith(S.Array(S.String), { nullable: true }),
  "has_issues": S.optionalWith(S.Boolean, { nullable: true }),
  "has_projects": S.optionalWith(S.Boolean, { nullable: true }),
  "has_wiki": S.optionalWith(S.Boolean, { nullable: true }),
  "has_pages": S.optionalWith(S.Boolean, { nullable: true }),
  "has_downloads": S.optionalWith(S.Boolean, { nullable: true }),
  "has_discussions": S.optionalWith(S.Boolean, { nullable: true }),
  "archived": S.optionalWith(S.Boolean, { nullable: true }),
  "disabled": S.optionalWith(S.Boolean, { nullable: true }),
  "visibility": S.optionalWith(S.String, { nullable: true }),
  "pushed_at": S.optionalWith(S.String, { nullable: true }),
  "created_at": S.optionalWith(S.String, { nullable: true }),
  "updated_at": S.optionalWith(S.String, { nullable: true }),
  "permissions": S.optionalWith(S.Struct({
  "admin": S.optionalWith(S.Boolean, { nullable: true }),
  "maintain": S.optionalWith(S.Boolean, { nullable: true }),
  "push": S.optionalWith(S.Boolean, { nullable: true }),
  "triage": S.optionalWith(S.Boolean, { nullable: true }),
  "pull": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  "role_name": S.optionalWith(S.String, { nullable: true }),
  "temp_clone_token": S.optionalWith(S.String, { nullable: true }),
  "delete_branch_on_merge": S.optionalWith(S.Boolean, { nullable: true }),
  "subscribers_count": S.optionalWith(S.Int, { nullable: true }),
  "network_count": S.optionalWith(S.Int, { nullable: true }),
  "code_of_conduct": S.optionalWith(CodeOfConduct, { nullable: true }),
  "license": S.optionalWith(S.Struct({
  "key": S.optionalWith(S.String, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "spdx_id": S.optionalWith(S.String, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true }),
  "node_id": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  "forks": S.optionalWith(S.Int, { nullable: true }),
  "open_issues": S.optionalWith(S.Int, { nullable: true }),
  "watchers": S.optionalWith(S.Int, { nullable: true }),
  "allow_forking": S.optionalWith(S.Boolean, { nullable: true }),
  "web_commit_signoff_required": S.optionalWith(S.Boolean, { nullable: true }),
  "security_and_analysis": S.optionalWith(SecurityAndAnalysis, { nullable: true }),
  /**
* The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
*/
"custom_properties": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

/**
* A software package
*/
export class Package extends S.Class<Package>("Package")({
  /**
* Unique identifier of the package.
*/
"id": S.Int,
  /**
* The name of the package.
*/
"name": S.String,
  "package_type": PackagePackageType,
  "url": S.String,
  "html_url": S.String,
  /**
* The number of versions of the package.
*/
"version_count": S.Int,
  "visibility": PackageVisibility,
  "owner": S.optionalWith(NullableSimpleUser, { nullable: true }),
  "repository": S.optionalWith(NullableMinimalRepository, { nullable: true }),
  "created_at": S.String,
  "updated_at": S.String
}) {}

export class PackagesListDockerMigrationConflictingPackagesForOrganization200 extends S.Array(Package) {}

export class ActivityListPublicOrgEventsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActivityListPublicOrgEvents200 extends S.Array(Event) {}

export class OrgsListFailedInvitationsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Organization Invitation
*/
export class OrganizationInvitation extends S.Class<OrganizationInvitation>("OrganizationInvitation")({
  "id": S.Int,
  "login": S.NullOr(S.String),
  "email": S.NullOr(S.String),
  "role": S.String,
  "created_at": S.String,
  "failed_at": S.optionalWith(S.String, { nullable: true }),
  "failed_reason": S.optionalWith(S.String, { nullable: true }),
  "inviter": SimpleUser,
  "team_count": S.Int,
  "node_id": S.String,
  "invitation_teams_url": S.String,
  "invitation_source": S.optionalWith(S.String, { nullable: true })
}) {}

export class OrgsListFailedInvitations200 extends S.Array(OrganizationInvitation) {}

export class OrgsListWebhooksParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Org Hook
*/
export class OrgHook extends S.Class<OrgHook>("OrgHook")({
  "id": S.Int,
  "url": S.String,
  "ping_url": S.String,
  "deliveries_url": S.optionalWith(S.String, { nullable: true }),
  "name": S.String,
  "events": S.Array(S.String),
  "active": S.Boolean,
  "config": S.Struct({
  "url": S.optionalWith(S.String, { nullable: true }),
  "insecure_ssl": S.optionalWith(S.String, { nullable: true }),
  "content_type": S.optionalWith(S.String, { nullable: true }),
  "secret": S.optionalWith(S.String, { nullable: true })
}),
  "updated_at": S.String,
  "created_at": S.String,
  "type": S.String
}) {}

export class OrgsListWebhooks200 extends S.Array(OrgHook) {}

export class OrgsCreateWebhookParams extends S.Struct({
  
}) {}

export class OrgsCreateWebhookRequest extends S.Class<OrgsCreateWebhookRequest>("OrgsCreateWebhookRequest")({
  /**
* Must be passed as "web".
*/
"name": S.String,
  /**
* Key/value pairs to provide settings for this webhook.
*/
"config": S.Struct({
  "url": WebhookConfigUrl,
  "content_type": S.optionalWith(WebhookConfigContentType, { nullable: true }),
  "secret": S.optionalWith(WebhookConfigSecret, { nullable: true }),
  "insecure_ssl": S.optionalWith(WebhookConfigInsecureSsl, { nullable: true }),
  "username": S.optionalWith(S.String, { nullable: true }),
  "password": S.optionalWith(S.String, { nullable: true })
}),
  /**
* Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `["*"]` to receive all possible events.
*/
"events": S.optionalWith(S.Array(S.String), { nullable: true, default: () => ["push"] as const }),
  /**
* Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
*/
"active": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

export class OrgsGetWebhookParams extends S.Struct({
  
}) {}

export class OrgsDeleteWebhookParams extends S.Struct({
  
}) {}

export class OrgsUpdateWebhookParams extends S.Struct({
  
}) {}

export class OrgsUpdateWebhookRequest extends S.Class<OrgsUpdateWebhookRequest>("OrgsUpdateWebhookRequest")({
  /**
* Key/value pairs to provide settings for this webhook.
*/
"config": S.optionalWith(S.Struct({
  "url": WebhookConfigUrl,
  "content_type": S.optionalWith(WebhookConfigContentType, { nullable: true }),
  "secret": S.optionalWith(WebhookConfigSecret, { nullable: true }),
  "insecure_ssl": S.optionalWith(WebhookConfigInsecureSsl, { nullable: true })
}), { nullable: true }),
  /**
* Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
*/
"events": S.optionalWith(S.Array(S.String), { nullable: true, default: () => ["push"] as const }),
  /**
* Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
*/
"active": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "name": S.optionalWith(S.String, { nullable: true })
}) {}

export class OrgsGetWebhookConfigForOrgParams extends S.Struct({
  
}) {}

export class OrgsUpdateWebhookConfigForOrgParams extends S.Struct({
  
}) {}

export class OrgsUpdateWebhookConfigForOrgRequest extends S.Class<OrgsUpdateWebhookConfigForOrgRequest>("OrgsUpdateWebhookConfigForOrgRequest")({
  "url": S.optionalWith(WebhookConfigUrl, { nullable: true }),
  "content_type": S.optionalWith(WebhookConfigContentType, { nullable: true }),
  "secret": S.optionalWith(WebhookConfigSecret, { nullable: true }),
  "insecure_ssl": S.optionalWith(WebhookConfigInsecureSsl, { nullable: true })
}) {}

export class OrgsListWebhookDeliveriesParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "cursor": S.optionalWith(S.String, { nullable: true })
}) {}

export class OrgsListWebhookDeliveries200 extends S.Array(HookDeliveryItem) {}

export class OrgsGetWebhookDeliveryParams extends S.Struct({
  
}) {}

export class OrgsRedeliverWebhookDeliveryParams extends S.Struct({
  
}) {}

export class OrgsRedeliverWebhookDelivery202 extends S.Record({ key: S.String, value: S.Unknown }) {}

export class OrgsPingWebhookParams extends S.Struct({
  
}) {}

export class ApiInsightsGetRouteStatsByActorParamsDirection extends S.Literal("asc", "desc") {}

export class ApiInsightsGetRouteStatsByActorParams extends S.Struct({
  "min_timestamp": S.String,
  "max_timestamp": S.optionalWith(S.String, { nullable: true }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "direction": S.optionalWith(ApiInsightsGetRouteStatsByActorParamsDirection, { nullable: true, default: () => "desc" as const }),
  "sort": S.optionalWith(S.Array(S.Literal("last_rate_limited_timestamp", "last_request_timestamp", "rate_limited_request_count", "http_method", "api_route", "total_request_count")), { nullable: true }),
  "api_route_substring": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* API Insights usage route stats for an actor
*/
export class ApiInsightsRouteStats extends S.Array(S.Struct({
  /**
* The HTTP method
*/
"http_method": S.optionalWith(S.String, { nullable: true }),
  /**
* The API path's route template
*/
"api_route": S.optionalWith(S.String, { nullable: true }),
  /**
* The total number of requests within the queried time period
*/
"total_request_count": S.optionalWith(S.Int, { nullable: true }),
  /**
* The total number of requests that were rate limited within the queried time period
*/
"rate_limited_request_count": S.optionalWith(S.Int, { nullable: true }),
  "last_rate_limited_timestamp": S.optionalWith(S.String, { nullable: true }),
  "last_request_timestamp": S.optionalWith(S.String, { nullable: true })
})) {}

export class ApiInsightsGetSubjectStatsParamsDirection extends S.Literal("asc", "desc") {}

export class ApiInsightsGetSubjectStatsParams extends S.Struct({
  "min_timestamp": S.String,
  "max_timestamp": S.optionalWith(S.String, { nullable: true }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "direction": S.optionalWith(ApiInsightsGetSubjectStatsParamsDirection, { nullable: true, default: () => "desc" as const }),
  "sort": S.optionalWith(S.Array(S.Literal("last_rate_limited_timestamp", "last_request_timestamp", "rate_limited_request_count", "subject_name", "total_request_count")), { nullable: true }),
  "subject_name_substring": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* API Insights usage subject stats for an organization
*/
export class ApiInsightsSubjectStats extends S.Array(S.Struct({
  "subject_type": S.optionalWith(S.String, { nullable: true }),
  "subject_name": S.optionalWith(S.String, { nullable: true }),
  "subject_id": S.optionalWith(S.Int, { nullable: true }),
  "total_request_count": S.optionalWith(S.Int, { nullable: true }),
  "rate_limited_request_count": S.optionalWith(S.Int, { nullable: true }),
  "last_rate_limited_timestamp": S.optionalWith(S.String, { nullable: true }),
  "last_request_timestamp": S.optionalWith(S.String, { nullable: true })
})) {}

export class ApiInsightsGetSummaryStatsParams extends S.Struct({
  "min_timestamp": S.String,
  "max_timestamp": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* API Insights usage summary stats for an organization
*/
export class ApiInsightsSummaryStats extends S.Class<ApiInsightsSummaryStats>("ApiInsightsSummaryStats")({
  /**
* The total number of requests within the queried time period
*/
"total_request_count": S.optionalWith(S.Int, { nullable: true }),
  /**
* The total number of requests that were rate limited within the queried time period
*/
"rate_limited_request_count": S.optionalWith(S.Int, { nullable: true })
}) {}

export class ApiInsightsGetSummaryStatsByUserParams extends S.Struct({
  "min_timestamp": S.String,
  "max_timestamp": S.optionalWith(S.String, { nullable: true })
}) {}

export class ApiInsightsGetSummaryStatsByActorParams extends S.Struct({
  "min_timestamp": S.String,
  "max_timestamp": S.optionalWith(S.String, { nullable: true })
}) {}

export class ApiInsightsGetTimeStatsParams extends S.Struct({
  "min_timestamp": S.String,
  "max_timestamp": S.optionalWith(S.String, { nullable: true }),
  "timestamp_increment": S.String
}) {}

/**
* API Insights usage time stats for an organization
*/
export class ApiInsightsTimeStats extends S.Array(S.Struct({
  "timestamp": S.optionalWith(S.String, { nullable: true }),
  "total_request_count": S.optionalWith(S.Int, { nullable: true }),
  "rate_limited_request_count": S.optionalWith(S.Int, { nullable: true })
})) {}

export class ApiInsightsGetTimeStatsByUserParams extends S.Struct({
  "min_timestamp": S.String,
  "max_timestamp": S.optionalWith(S.String, { nullable: true }),
  "timestamp_increment": S.String
}) {}

export class ApiInsightsGetTimeStatsByActorParams extends S.Struct({
  "min_timestamp": S.String,
  "max_timestamp": S.optionalWith(S.String, { nullable: true }),
  "timestamp_increment": S.String
}) {}

export class ApiInsightsGetUserStatsParamsDirection extends S.Literal("asc", "desc") {}

export class ApiInsightsGetUserStatsParams extends S.Struct({
  "min_timestamp": S.String,
  "max_timestamp": S.optionalWith(S.String, { nullable: true }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "direction": S.optionalWith(ApiInsightsGetUserStatsParamsDirection, { nullable: true, default: () => "desc" as const }),
  "sort": S.optionalWith(S.Array(S.Literal("last_rate_limited_timestamp", "last_request_timestamp", "rate_limited_request_count", "subject_name", "total_request_count")), { nullable: true }),
  "actor_name_substring": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* API Insights usage stats for a user
*/
export class ApiInsightsUserStats extends S.Array(S.Struct({
  "actor_type": S.optionalWith(S.String, { nullable: true }),
  "actor_name": S.optionalWith(S.String, { nullable: true }),
  "actor_id": S.optionalWith(S.Int, { nullable: true }),
  "integration_id": S.optionalWith(S.Int, { nullable: true }),
  "oauth_application_id": S.optionalWith(S.Int, { nullable: true }),
  "total_request_count": S.optionalWith(S.Int, { nullable: true }),
  "rate_limited_request_count": S.optionalWith(S.Int, { nullable: true }),
  "last_rate_limited_timestamp": S.optionalWith(S.String, { nullable: true }),
  "last_request_timestamp": S.optionalWith(S.String, { nullable: true })
})) {}

export class AppsGetOrgInstallationParams extends S.Struct({
  
}) {}

export class OrgsListAppInstallationsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class OrgsListAppInstallations200 extends S.Struct({
  "total_count": S.Int,
  "installations": S.Array(Installation)
}) {}

export class InteractionsGetRestrictionsForOrgParams extends S.Struct({
  
}) {}

/**
* The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.
*/
export class InteractionGroup extends S.Literal("existing_users", "contributors_only", "collaborators_only") {}

/**
* Interaction limit settings.
*/
export class InteractionLimitResponse extends S.Class<InteractionLimitResponse>("InteractionLimitResponse")({
  "limit": InteractionGroup,
  "origin": S.String,
  "expires_at": S.String
}) {}

export class InteractionsGetRestrictionsForOrg200 extends S.Union(InteractionLimitResponse,
S.Struct({
  
})) {}

export class InteractionsSetRestrictionsForOrgParams extends S.Struct({
  
}) {}

/**
* The duration of the interaction restriction. Default: `one_day`.
*/
export class InteractionExpiry extends S.Literal("one_day", "three_days", "one_week", "one_month", "six_months") {}

/**
* Limit interactions to a specific type of user for a specified duration
*/
export class InteractionLimit extends S.Class<InteractionLimit>("InteractionLimit")({
  "limit": InteractionGroup,
  "expiry": S.optionalWith(InteractionExpiry, { nullable: true })
}) {}

export class InteractionsRemoveRestrictionsForOrgParams extends S.Struct({
  
}) {}

export class OrgsListPendingInvitationsParamsRole extends S.Literal("all", "admin", "direct_member", "billing_manager", "hiring_manager") {}

export class OrgsListPendingInvitationsParamsInvitationSource extends S.Literal("all", "member", "scim") {}

export class OrgsListPendingInvitationsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "role": S.optionalWith(OrgsListPendingInvitationsParamsRole, { nullable: true, default: () => "all" as const }),
  "invitation_source": S.optionalWith(OrgsListPendingInvitationsParamsInvitationSource, { nullable: true, default: () => "all" as const })
}) {}

export class OrgsListPendingInvitations200 extends S.Array(OrganizationInvitation) {}

export class OrgsCreateInvitationParams extends S.Struct({
  
}) {}

/**
* The role for the new member. 
*  * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  
*  * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  
*  * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization. 
*  * `reinstate` - The previous role assigned to the invitee before they were removed from your organization. Can be one of the roles listed above. Only works if the invitee was previously part of your organization.
*/
export class OrgsCreateInvitationRequestRole extends S.Literal("admin", "direct_member", "billing_manager", "reinstate") {}

export class OrgsCreateInvitationRequest extends S.Class<OrgsCreateInvitationRequest>("OrgsCreateInvitationRequest")({
  /**
* **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
*/
"invitee_id": S.optionalWith(S.Int, { nullable: true }),
  /**
* **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.
*/
"email": S.optionalWith(S.String, { nullable: true }),
  /**
* The role for the new member. 
*  * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  
*  * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  
*  * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization. 
*  * `reinstate` - The previous role assigned to the invitee before they were removed from your organization. Can be one of the roles listed above. Only works if the invitee was previously part of your organization.
*/
"role": S.optionalWith(OrgsCreateInvitationRequestRole, { nullable: true, default: () => "direct_member" as const }),
  /**
* Specify IDs for the teams you want to invite new members to.
*/
"team_ids": S.optionalWith(S.Array(S.Int), { nullable: true })
}) {}

export class OrgsCancelInvitationParams extends S.Struct({
  
}) {}

export class OrgsListInvitationTeamsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class OrgsListInvitationTeams200 extends S.Array(Team) {}

export class OrgsListIssueTypesParams extends S.Struct({
  
}) {}

export class OrgsListIssueTypes200 extends S.Array(IssueType) {}

export class OrgsCreateIssueTypeParams extends S.Struct({
  
}) {}

/**
* Color for the issue type.
*/
export class OrganizationCreateIssueTypeColor extends S.Literal("gray", "blue", "green", "yellow", "orange", "red", "pink", "purple") {}

export class OrganizationCreateIssueType extends S.Class<OrganizationCreateIssueType>("OrganizationCreateIssueType")({
  /**
* Name of the issue type.
*/
"name": S.String,
  /**
* Whether or not the issue type is enabled at the organization level.
*/
"is_enabled": S.Boolean,
  /**
* Description of the issue type.
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* Color for the issue type.
*/
"color": S.optionalWith(OrganizationCreateIssueTypeColor, { nullable: true })
}) {}

export class OrgsUpdateIssueTypeParams extends S.Struct({
  
}) {}

/**
* Color for the issue type.
*/
export class OrganizationUpdateIssueTypeColor extends S.Literal("gray", "blue", "green", "yellow", "orange", "red", "pink", "purple") {}

export class OrganizationUpdateIssueType extends S.Class<OrganizationUpdateIssueType>("OrganizationUpdateIssueType")({
  /**
* Name of the issue type.
*/
"name": S.String,
  /**
* Whether or not the issue type is enabled at the organization level.
*/
"is_enabled": S.Boolean,
  /**
* Description of the issue type.
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* Color for the issue type.
*/
"color": S.optionalWith(OrganizationUpdateIssueTypeColor, { nullable: true })
}) {}

export class OrgsDeleteIssueTypeParams extends S.Struct({
  
}) {}

export class IssuesListForOrgParamsFilter extends S.Literal("assigned", "created", "mentioned", "subscribed", "repos", "all") {}

export class IssuesListForOrgParamsState extends S.Literal("open", "closed", "all") {}

export class IssuesListForOrgParamsSort extends S.Literal("created", "updated", "comments") {}

export class IssuesListForOrgParamsDirection extends S.Literal("asc", "desc") {}

export class IssuesListForOrgParams extends S.Struct({
  "filter": S.optionalWith(IssuesListForOrgParamsFilter, { nullable: true, default: () => "assigned" as const }),
  "state": S.optionalWith(IssuesListForOrgParamsState, { nullable: true, default: () => "open" as const }),
  "labels": S.optionalWith(S.String, { nullable: true }),
  "type": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(IssuesListForOrgParamsSort, { nullable: true, default: () => "created" as const }),
  "direction": S.optionalWith(IssuesListForOrgParamsDirection, { nullable: true, default: () => "desc" as const }),
  "since": S.optionalWith(S.String, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class IssuesListForOrg200 extends S.Array(Issue) {}

export class OrgsListMembersParamsFilter extends S.Literal("2fa_disabled", "2fa_insecure", "all") {}

export class OrgsListMembersParamsRole extends S.Literal("all", "admin", "member") {}

export class OrgsListMembersParams extends S.Struct({
  "filter": S.optionalWith(OrgsListMembersParamsFilter, { nullable: true, default: () => "all" as const }),
  "role": S.optionalWith(OrgsListMembersParamsRole, { nullable: true, default: () => "all" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class OrgsListMembers200 extends S.Array(SimpleUser) {}

export class OrgsCheckMembershipForUserParams extends S.Struct({
  
}) {}

export class OrgsRemoveMemberParams extends S.Struct({
  
}) {}

export class CodespacesGetCodespacesForUserInOrgParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class CodespacesGetCodespacesForUserInOrg200 extends S.Struct({
  "total_count": S.Int,
  "codespaces": S.Array(Codespace)
}) {}

export class CodespacesDeleteFromOrganizationParams extends S.Struct({
  
}) {}

export class CodespacesDeleteFromOrganization202 extends S.Record({ key: S.String, value: S.Unknown }) {}

export class CodespacesStopInOrganizationParams extends S.Struct({
  
}) {}

export class CopilotGetCopilotSeatDetailsForUserParams extends S.Struct({
  
}) {}

export class OrgsGetMembershipForUserParams extends S.Struct({
  
}) {}

/**
* The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
*/
export class OrgMembershipState extends S.Literal("active", "pending") {}

/**
* The user's membership type in the organization.
*/
export class OrgMembershipRole extends S.Literal("admin", "member", "billing_manager") {}

/**
* Org Membership
*/
export class OrgMembership extends S.Class<OrgMembership>("OrgMembership")({
  "url": S.String,
  /**
* The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
*/
"state": OrgMembershipState,
  /**
* The user's membership type in the organization.
*/
"role": OrgMembershipRole,
  /**
* Whether the user has direct membership in the organization.
*/
"direct_membership": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The slugs of the enterprise teams providing the user with indirect membership in the organization.
* A limit of 100 enterprise team slugs is returned.
*/
"enterprise_teams_providing_indirect_membership": S.optionalWith(S.Array(S.String).pipe(S.maxItems(100)), { nullable: true }),
  "organization_url": S.String,
  "organization": OrganizationSimple,
  "user": S.NullOr(NullableSimpleUser),
  "permissions": S.optionalWith(S.Struct({
  "can_create_repository": S.Boolean
}), { nullable: true })
}) {}

export class OrgsSetMembershipForUserParams extends S.Struct({
  
}) {}

/**
* The role to give the user in the organization. Can be one of:  
*  * `admin` - The user will become an owner of the organization.  
*  * `member` - The user will become a non-owner member of the organization.
*/
export class OrgsSetMembershipForUserRequestRole extends S.Literal("admin", "member") {}

export class OrgsSetMembershipForUserRequest extends S.Class<OrgsSetMembershipForUserRequest>("OrgsSetMembershipForUserRequest")({
  /**
* The role to give the user in the organization. Can be one of:  
*  * `admin` - The user will become an owner of the organization.  
*  * `member` - The user will become a non-owner member of the organization.
*/
"role": S.optionalWith(OrgsSetMembershipForUserRequestRole, { nullable: true, default: () => "member" as const })
}) {}

export class OrgsRemoveMembershipForUserParams extends S.Struct({
  
}) {}

export class MigrationsListForOrgParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "exclude": S.optionalWith(S.Array(S.Literal("repositories")), { nullable: true })
}) {}

/**
* A migration.
*/
export class Migration extends S.Class<Migration>("Migration")({
  "id": S.Int,
  "owner": S.NullOr(NullableSimpleUser),
  "guid": S.String,
  "state": S.String,
  "lock_repositories": S.Boolean,
  "exclude_metadata": S.Boolean,
  "exclude_git_data": S.Boolean,
  "exclude_attachments": S.Boolean,
  "exclude_releases": S.Boolean,
  "exclude_owner_projects": S.Boolean,
  "org_metadata_only": S.Boolean,
  /**
* The repositories included in the migration. Only returned for export migrations.
*/
"repositories": S.Array(Repository),
  "url": S.String,
  "created_at": S.String,
  "updated_at": S.String,
  "node_id": S.String,
  "archive_url": S.optionalWith(S.String, { nullable: true }),
  /**
* Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`.
*/
"exclude": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class MigrationsListForOrg200 extends S.Array(Migration) {}

export class MigrationsStartForOrgParams extends S.Struct({
  
}) {}

export class MigrationsStartForOrgRequest extends S.Class<MigrationsStartForOrgRequest>("MigrationsStartForOrgRequest")({
  /**
* A list of arrays indicating which repositories should be migrated.
*/
"repositories": S.Array(S.String),
  /**
* Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
*/
"lock_repositories": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Indicates whether metadata should be excluded and only git source should be included for the migration.
*/
"exclude_metadata": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Indicates whether the repository git data should be excluded from the migration.
*/
"exclude_git_data": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
*/
"exclude_attachments": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
*/
"exclude_releases": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Indicates whether projects owned by the organization or users should be excluded. from the migration.
*/
"exclude_owner_projects": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
*/
"org_metadata_only": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Exclude related items from being returned in the response in order to improve performance of the request.
*/
"exclude": S.optionalWith(S.Array(S.Literal("repositories")), { nullable: true })
}) {}

export class MigrationsGetStatusForOrgParams extends S.Struct({
  "exclude": S.optionalWith(S.Array(S.Literal("repositories")), { nullable: true })
}) {}

export class MigrationsDownloadArchiveForOrgParams extends S.Struct({
  
}) {}

export class MigrationsDeleteArchiveForOrgParams extends S.Struct({
  
}) {}

export class MigrationsUnlockRepoForOrgParams extends S.Struct({
  
}) {}

export class MigrationsListReposForOrgParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class MigrationsListReposForOrg200 extends S.Array(MinimalRepository) {}

export class OrgsListOrgRolesParams extends S.Struct({
  
}) {}

/**
* The system role from which this role inherits permissions.
*/
export class OrganizationRoleBaseRole extends S.Literal("read", "triage", "write", "maintain", "admin") {}

/**
* Source answers the question, "where did this role come from?"
*/
export class OrganizationRoleSource extends S.Literal("Organization", "Enterprise", "Predefined") {}

/**
* Organization roles
*/
export class OrganizationRole extends S.Class<OrganizationRole>("OrganizationRole")({
  /**
* The unique identifier of the role.
*/
"id": S.Int,
  /**
* The name of the role.
*/
"name": S.String,
  /**
* A short description about who this role is for or what permissions it grants.
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* The system role from which this role inherits permissions.
*/
"base_role": S.optionalWith(OrganizationRoleBaseRole, { nullable: true }),
  /**
* Source answers the question, "where did this role come from?"
*/
"source": S.optionalWith(OrganizationRoleSource, { nullable: true }),
  /**
* A list of permissions included in this role.
*/
"permissions": S.Array(S.String),
  "organization": S.NullOr(NullableSimpleUser),
  /**
* The date and time the role was created.
*/
"created_at": S.String,
  /**
* The date and time the role was last updated.
*/
"updated_at": S.String
}) {}

export class OrgsListOrgRoles200 extends S.Struct({
  /**
* The total number of organization roles available to the organization.
*/
"total_count": S.optionalWith(S.Int, { nullable: true }),
  /**
* The list of organization roles available to the organization.
*/
"roles": S.optionalWith(S.Array(OrganizationRole), { nullable: true })
}) {}

export class OrgsRevokeAllOrgRolesTeamParams extends S.Struct({
  
}) {}

export class OrgsAssignTeamToOrgRoleParams extends S.Struct({
  
}) {}

export class OrgsRevokeOrgRoleTeamParams extends S.Struct({
  
}) {}

export class OrgsRevokeAllOrgRolesUserParams extends S.Struct({
  
}) {}

export class OrgsAssignUserToOrgRoleParams extends S.Struct({
  
}) {}

export class OrgsRevokeOrgRoleUserParams extends S.Struct({
  
}) {}

export class OrgsGetOrgRoleParams extends S.Struct({
  
}) {}

export class OrgsListOrgRoleTeamsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Determines if the team has a direct, indirect, or mixed relationship to a role
*/
export class TeamRoleAssignmentAssignment extends S.Literal("direct", "indirect", "mixed") {}

/**
* The Relationship a Team has with a role.
*/
export class TeamRoleAssignment extends S.Class<TeamRoleAssignment>("TeamRoleAssignment")({
  /**
* Determines if the team has a direct, indirect, or mixed relationship to a role
*/
"assignment": S.optionalWith(TeamRoleAssignmentAssignment, { nullable: true }),
  "id": S.Int,
  "node_id": S.String,
  "name": S.String,
  "slug": S.String,
  "description": S.NullOr(S.String),
  "privacy": S.optionalWith(S.String, { nullable: true }),
  "notification_setting": S.optionalWith(S.String, { nullable: true }),
  "permission": S.String,
  "permissions": S.optionalWith(S.Struct({
  "pull": S.Boolean,
  "triage": S.Boolean,
  "push": S.Boolean,
  "maintain": S.Boolean,
  "admin": S.Boolean
}), { nullable: true }),
  "url": S.String,
  "html_url": S.String,
  "members_url": S.String,
  "repositories_url": S.String,
  "parent": S.NullOr(NullableTeamSimple)
}) {}

/**
* List of teams assigned to the organization role
*/
export class OrgsListOrgRoleTeams200 extends S.Array(TeamRoleAssignment) {}

export class OrgsListOrgRoleUsersParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Determines if the user has a direct, indirect, or mixed relationship to a role
*/
export class UserRoleAssignmentAssignment extends S.Literal("direct", "indirect", "mixed") {}

/**
* Groups of organization members that gives permissions on specified repositories.
*/
export class TeamSimple extends S.Class<TeamSimple>("TeamSimple")({
  /**
* Unique identifier of the team
*/
"id": S.Int,
  "node_id": S.String,
  /**
* URL for the team
*/
"url": S.String,
  "members_url": S.String,
  /**
* Name of the team
*/
"name": S.String,
  /**
* Description of the team
*/
"description": S.NullOr(S.String),
  /**
* Permission that the team will have for its repositories
*/
"permission": S.String,
  /**
* The level of privacy this team should have
*/
"privacy": S.optionalWith(S.String, { nullable: true }),
  /**
* The notification setting the team has set
*/
"notification_setting": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.String,
  "repositories_url": S.String,
  "slug": S.String,
  /**
* Distinguished Name (DN) that team maps to within LDAP environment
*/
"ldap_dn": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The Relationship a User has with a role.
*/
export class UserRoleAssignment extends S.Class<UserRoleAssignment>("UserRoleAssignment")({
  /**
* Determines if the user has a direct, indirect, or mixed relationship to a role
*/
"assignment": S.optionalWith(UserRoleAssignmentAssignment, { nullable: true }),
  /**
* Team the user has gotten the role through
*/
"inherited_from": S.optionalWith(S.Array(TeamSimple), { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "email": S.optionalWith(S.String, { nullable: true }),
  "login": S.String,
  "id": S.Int,
  "node_id": S.String,
  "avatar_url": S.String,
  "gravatar_id": S.NullOr(S.String),
  "url": S.String,
  "html_url": S.String,
  "followers_url": S.String,
  "following_url": S.String,
  "gists_url": S.String,
  "starred_url": S.String,
  "subscriptions_url": S.String,
  "organizations_url": S.String,
  "repos_url": S.String,
  "events_url": S.String,
  "received_events_url": S.String,
  "type": S.String,
  "site_admin": S.Boolean,
  "starred_at": S.optionalWith(S.String, { nullable: true }),
  "user_view_type": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* List of users assigned to the organization role
*/
export class OrgsListOrgRoleUsers200 extends S.Array(UserRoleAssignment) {}

export class OrgsListOutsideCollaboratorsParamsFilter extends S.Literal("2fa_disabled", "2fa_insecure", "all") {}

export class OrgsListOutsideCollaboratorsParams extends S.Struct({
  "filter": S.optionalWith(OrgsListOutsideCollaboratorsParamsFilter, { nullable: true, default: () => "all" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class OrgsListOutsideCollaborators200 extends S.Array(SimpleUser) {}

export class OrgsConvertMemberToOutsideCollaboratorParams extends S.Struct({
  
}) {}

export class OrgsConvertMemberToOutsideCollaboratorRequest extends S.Class<OrgsConvertMemberToOutsideCollaboratorRequest>("OrgsConvertMemberToOutsideCollaboratorRequest")({
  /**
* When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.
*/
"async": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

export class OrgsConvertMemberToOutsideCollaborator202 extends S.Struct({
  
}) {}

export class OrgsRemoveOutsideCollaboratorParams extends S.Struct({
  
}) {}

export class OrgsRemoveOutsideCollaborator422 extends S.Struct({
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class PackagesListPackagesForOrganizationParamsPackageType extends S.Literal("npm", "maven", "rubygems", "docker", "nuget", "container") {}

export class PackagesListPackagesForOrganizationParamsVisibility extends S.Literal("public", "private", "internal") {}

export class PackagesListPackagesForOrganizationParams extends S.Struct({
  "package_type": PackagesListPackagesForOrganizationParamsPackageType,
  "visibility": S.optionalWith(PackagesListPackagesForOrganizationParamsVisibility, { nullable: true }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

export class PackagesListPackagesForOrganization200 extends S.Array(Package) {}

export class PackagesGetPackageForOrganizationParams extends S.Struct({
  
}) {}

export class PackagesDeletePackageForOrgParams extends S.Struct({
  
}) {}

export class PackagesRestorePackageForOrgParams extends S.Struct({
  "token": S.optionalWith(S.String, { nullable: true })
}) {}

export class PackagesGetAllPackageVersionsForPackageOwnedByOrgParamsState extends S.Literal("active", "deleted") {}

export class PackagesGetAllPackageVersionsForPackageOwnedByOrgParams extends S.Struct({
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "state": S.optionalWith(PackagesGetAllPackageVersionsForPackageOwnedByOrgParamsState, { nullable: true, default: () => "active" as const })
}) {}

export class PackageVersionMetadataPackageType extends S.Literal("npm", "maven", "rubygems", "docker", "nuget", "container") {}

/**
* A version of a software package
*/
export class PackageVersion extends S.Class<PackageVersion>("PackageVersion")({
  /**
* Unique identifier of the package version.
*/
"id": S.Int,
  /**
* The name of the package version.
*/
"name": S.String,
  "url": S.String,
  "package_html_url": S.String,
  "html_url": S.optionalWith(S.String, { nullable: true }),
  "license": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "created_at": S.String,
  "updated_at": S.String,
  "deleted_at": S.optionalWith(S.String, { nullable: true }),
  "metadata": S.optionalWith(S.Struct({
  "package_type": PackageVersionMetadataPackageType,
  "container": S.optionalWith(S.Struct({
  "tags": S.Array(S.String)
}), { nullable: true }),
  "docker": S.optionalWith(S.Struct({
  "tag": S.optionalWith(S.Array(S.String), { nullable: true })
}), { nullable: true })
}), { nullable: true })
}) {}

export class PackagesGetAllPackageVersionsForPackageOwnedByOrg200 extends S.Array(PackageVersion) {}

export class PackagesGetPackageVersionForOrganizationParams extends S.Struct({
  
}) {}

export class PackagesDeletePackageVersionForOrgParams extends S.Struct({
  
}) {}

export class PackagesRestorePackageVersionForOrgParams extends S.Struct({
  
}) {}

export class OrgsListPatGrantRequestsParamsSort extends S.Literal("created_at") {}

export class OrgsListPatGrantRequestsParamsDirection extends S.Literal("asc", "desc") {}

export class OrgsListPatGrantRequestsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "sort": S.optionalWith(OrgsListPatGrantRequestsParamsSort, { nullable: true, default: () => "created_at" as const }),
  "direction": S.optionalWith(OrgsListPatGrantRequestsParamsDirection, { nullable: true, default: () => "desc" as const }),
  "owner": S.optionalWith(S.Array(S.String).pipe(S.maxItems(10)), { nullable: true }),
  "repository": S.optionalWith(S.String, { nullable: true }),
  "permission": S.optionalWith(S.String, { nullable: true }),
  "last_used_before": S.optionalWith(S.String, { nullable: true }),
  "last_used_after": S.optionalWith(S.String, { nullable: true }),
  "token_id": S.optionalWith(S.Array(S.String).pipe(S.maxItems(50)), { nullable: true })
}) {}

/**
* Type of repository selection requested.
*/
export class OrganizationProgrammaticAccessGrantRequestRepositorySelection extends S.Literal("none", "all", "subset") {}

/**
* Minimal representation of an organization programmatic access grant request for enumerations
*/
export class OrganizationProgrammaticAccessGrantRequest extends S.Class<OrganizationProgrammaticAccessGrantRequest>("OrganizationProgrammaticAccessGrantRequest")({
  /**
* Unique identifier of the request for access via fine-grained personal access token. The `pat_request_id` used to review PAT requests.
*/
"id": S.Int,
  /**
* Reason for requesting access.
*/
"reason": S.NullOr(S.String),
  "owner": SimpleUser,
  /**
* Type of repository selection requested.
*/
"repository_selection": OrganizationProgrammaticAccessGrantRequestRepositorySelection,
  /**
* URL to the list of repositories requested to be accessed via fine-grained personal access token. Should only be followed when `repository_selection` is `subset`.
*/
"repositories_url": S.String,
  /**
* Permissions requested, categorized by type of permission.
*/
"permissions": S.Struct({
  "organization": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "repository": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "other": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}),
  /**
* Date and time when the request for access was created.
*/
"created_at": S.String,
  /**
* Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants.
*/
"token_id": S.Int,
  /**
* The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens.
*/
"token_name": S.String,
  /**
* Whether the associated fine-grained personal access token has expired.
*/
"token_expired": S.Boolean,
  /**
* Date and time when the associated fine-grained personal access token expires.
*/
"token_expires_at": S.NullOr(S.String),
  /**
* Date and time when the associated fine-grained personal access token was last used for authentication.
*/
"token_last_used_at": S.NullOr(S.String)
}) {}

export class OrgsListPatGrantRequests200 extends S.Array(OrganizationProgrammaticAccessGrantRequest) {}

export class OrgsReviewPatGrantRequestsInBulkParams extends S.Struct({
  
}) {}

/**
* Action to apply to the requests.
*/
export class OrgsReviewPatGrantRequestsInBulkRequestAction extends S.Literal("approve", "deny") {}

export class OrgsReviewPatGrantRequestsInBulkRequest extends S.Class<OrgsReviewPatGrantRequestsInBulkRequest>("OrgsReviewPatGrantRequestsInBulkRequest")({
  /**
* Unique identifiers of the requests for access via fine-grained personal access token. Must be formed of between 1 and 100 `pat_request_id` values.
*/
"pat_request_ids": S.optionalWith(S.NonEmptyArray(S.Int).pipe(S.minItems(1), S.maxItems(100)), { nullable: true }),
  /**
* Action to apply to the requests.
*/
"action": OrgsReviewPatGrantRequestsInBulkRequestAction,
  /**
* Reason for approving or denying the requests. Max 1024 characters.
*/
"reason": S.optionalWith(S.String.pipe(S.maxLength(1024)), { nullable: true })
}) {}

export class OrgsReviewPatGrantRequestsInBulk202 extends S.Record({ key: S.String, value: S.Unknown }) {}

export class OrgsReviewPatGrantRequestParams extends S.Struct({
  
}) {}

/**
* Action to apply to the request.
*/
export class OrgsReviewPatGrantRequestRequestAction extends S.Literal("approve", "deny") {}

export class OrgsReviewPatGrantRequestRequest extends S.Class<OrgsReviewPatGrantRequestRequest>("OrgsReviewPatGrantRequestRequest")({
  /**
* Action to apply to the request.
*/
"action": OrgsReviewPatGrantRequestRequestAction,
  /**
* Reason for approving or denying the request. Max 1024 characters.
*/
"reason": S.optionalWith(S.String.pipe(S.maxLength(1024)), { nullable: true })
}) {}

export class OrgsListPatGrantRequestRepositoriesParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class OrgsListPatGrantRequestRepositories200 extends S.Array(MinimalRepository) {}

export class OrgsListPatGrantsParamsSort extends S.Literal("created_at") {}

export class OrgsListPatGrantsParamsDirection extends S.Literal("asc", "desc") {}

export class OrgsListPatGrantsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "sort": S.optionalWith(OrgsListPatGrantsParamsSort, { nullable: true, default: () => "created_at" as const }),
  "direction": S.optionalWith(OrgsListPatGrantsParamsDirection, { nullable: true, default: () => "desc" as const }),
  "owner": S.optionalWith(S.Array(S.String).pipe(S.maxItems(10)), { nullable: true }),
  "repository": S.optionalWith(S.String, { nullable: true }),
  "permission": S.optionalWith(S.String, { nullable: true }),
  "last_used_before": S.optionalWith(S.String, { nullable: true }),
  "last_used_after": S.optionalWith(S.String, { nullable: true }),
  "token_id": S.optionalWith(S.Array(S.String).pipe(S.maxItems(50)), { nullable: true })
}) {}

/**
* Type of repository selection requested.
*/
export class OrganizationProgrammaticAccessGrantRepositorySelection extends S.Literal("none", "all", "subset") {}

/**
* Minimal representation of an organization programmatic access grant for enumerations
*/
export class OrganizationProgrammaticAccessGrant extends S.Class<OrganizationProgrammaticAccessGrant>("OrganizationProgrammaticAccessGrant")({
  /**
* Unique identifier of the fine-grained personal access token grant. The `pat_id` used to get details about an approved fine-grained personal access token.
*/
"id": S.Int,
  "owner": SimpleUser,
  /**
* Type of repository selection requested.
*/
"repository_selection": OrganizationProgrammaticAccessGrantRepositorySelection,
  /**
* URL to the list of repositories the fine-grained personal access token can access. Only follow when `repository_selection` is `subset`.
*/
"repositories_url": S.String,
  /**
* Permissions requested, categorized by type of permission.
*/
"permissions": S.Struct({
  "organization": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "repository": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  "other": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}),
  /**
* Date and time when the fine-grained personal access token was approved to access the organization.
*/
"access_granted_at": S.String,
  /**
* Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants.
*/
"token_id": S.Int,
  /**
* The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens.
*/
"token_name": S.String,
  /**
* Whether the associated fine-grained personal access token has expired.
*/
"token_expired": S.Boolean,
  /**
* Date and time when the associated fine-grained personal access token expires.
*/
"token_expires_at": S.NullOr(S.String),
  /**
* Date and time when the associated fine-grained personal access token was last used for authentication.
*/
"token_last_used_at": S.NullOr(S.String)
}) {}

export class OrgsListPatGrants200 extends S.Array(OrganizationProgrammaticAccessGrant) {}

export class OrgsUpdatePatAccessesParams extends S.Struct({
  
}) {}

/**
* Action to apply to the fine-grained personal access token.
*/
export class OrgsUpdatePatAccessesRequestAction extends S.Literal("revoke") {}

export class OrgsUpdatePatAccessesRequest extends S.Class<OrgsUpdatePatAccessesRequest>("OrgsUpdatePatAccessesRequest")({
  /**
* Action to apply to the fine-grained personal access token.
*/
"action": OrgsUpdatePatAccessesRequestAction,
  /**
* The IDs of the fine-grained personal access tokens.
*/
"pat_ids": S.NonEmptyArray(S.Int).pipe(S.minItems(1), S.maxItems(100))
}) {}

export class OrgsUpdatePatAccesses202 extends S.Record({ key: S.String, value: S.Unknown }) {}

export class OrgsUpdatePatAccessParams extends S.Struct({
  
}) {}

/**
* Action to apply to the fine-grained personal access token.
*/
export class OrgsUpdatePatAccessRequestAction extends S.Literal("revoke") {}

export class OrgsUpdatePatAccessRequest extends S.Class<OrgsUpdatePatAccessRequest>("OrgsUpdatePatAccessRequest")({
  /**
* Action to apply to the fine-grained personal access token.
*/
"action": OrgsUpdatePatAccessRequestAction
}) {}

export class OrgsListPatGrantRepositoriesParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class OrgsListPatGrantRepositories200 extends S.Array(MinimalRepository) {}

export class PrivateRegistriesListOrgPrivateRegistriesParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* The registry type.
*/
export class OrgPrivateRegistryConfigurationRegistryType extends S.Literal("maven_repository", "nuget_feed", "goproxy_server", "npm_registry", "rubygems_server", "cargo_registry", "composer_repository", "docker_registry", "git_source", "helm_registry", "hex_organization", "hex_repository", "pub_repository", "python_index", "terraform_registry") {}

/**
* Which type of organization repositories have access to the private registry.
*/
export class OrgPrivateRegistryConfigurationVisibility extends S.Literal("all", "private", "selected") {}

/**
* Private registry configuration for an organization
*/
export class OrgPrivateRegistryConfiguration extends S.Class<OrgPrivateRegistryConfiguration>("OrgPrivateRegistryConfiguration")({
  /**
* The name of the private registry configuration.
*/
"name": S.String,
  /**
* The registry type.
*/
"registry_type": OrgPrivateRegistryConfigurationRegistryType,
  /**
* The username to use when authenticating with the private registry.
*/
"username": S.optionalWith(S.String, { nullable: true }),
  /**
* Which type of organization repositories have access to the private registry.
*/
"visibility": OrgPrivateRegistryConfigurationVisibility,
  "created_at": S.String,
  "updated_at": S.String
}) {}

export class PrivateRegistriesListOrgPrivateRegistries200 extends S.Struct({
  "total_count": S.Int,
  "configurations": S.Array(OrgPrivateRegistryConfiguration)
}) {}

export class PrivateRegistriesCreateOrgPrivateRegistryParams extends S.Struct({
  
}) {}

/**
* The registry type.
*/
export class PrivateRegistriesCreateOrgPrivateRegistryRequestRegistryType extends S.Literal("maven_repository", "nuget_feed", "goproxy_server", "npm_registry", "rubygems_server", "cargo_registry", "composer_repository", "docker_registry", "git_source", "helm_registry", "hex_organization", "hex_repository", "pub_repository", "python_index", "terraform_registry") {}

/**
* Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry.
*/
export class PrivateRegistriesCreateOrgPrivateRegistryRequestVisibility extends S.Literal("all", "private", "selected") {}

export class PrivateRegistriesCreateOrgPrivateRegistryRequest extends S.Class<PrivateRegistriesCreateOrgPrivateRegistryRequest>("PrivateRegistriesCreateOrgPrivateRegistryRequest")({
  /**
* The registry type.
*/
"registry_type": PrivateRegistriesCreateOrgPrivateRegistryRequestRegistryType,
  /**
* The URL of the private registry.
*/
"url": S.String,
  /**
* The username to use when authenticating with the private registry. This field should be omitted if the private registry does not require a username for authentication.
*/
"username": S.optionalWith(S.String, { nullable: true }),
  /**
* The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get private registries public key for an organization](https://docs.github.com/rest/private-registries/organization-configurations#get-private-registries-public-key-for-an-organization) endpoint.
*/
"encrypted_value": S.String.pipe(S.pattern(new RegExp("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"))),
  /**
* The ID of the key you used to encrypt the secret.
*/
"key_id": S.String,
  /**
* Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry.
*/
"visibility": PrivateRegistriesCreateOrgPrivateRegistryRequestVisibility,
  /**
* An array of repository IDs that can access the organization private registry. You can only provide a list of repository IDs when `visibility` is set to `selected`. You can manage the list of selected repositories using the [Update a private registry for an organization](https://docs.github.com/rest/private-registries/organization-configurations#update-a-private-registry-for-an-organization) endpoint. This field should be omitted if `visibility` is set to `all` or `private`.
*/
"selected_repository_ids": S.optionalWith(S.Array(S.Int), { nullable: true })
}) {}

/**
* The registry type.
*/
export class OrgPrivateRegistryConfigurationWithSelectedRepositoriesRegistryType extends S.Literal("maven_repository", "nuget_feed", "goproxy_server", "npm_registry", "rubygems_server", "cargo_registry", "composer_repository", "docker_registry", "git_source", "helm_registry", "hex_organization", "hex_repository", "pub_repository", "python_index", "terraform_registry") {}

/**
* Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry.
*/
export class OrgPrivateRegistryConfigurationWithSelectedRepositoriesVisibility extends S.Literal("all", "private", "selected") {}

/**
* Private registry configuration for an organization
*/
export class OrgPrivateRegistryConfigurationWithSelectedRepositories extends S.Class<OrgPrivateRegistryConfigurationWithSelectedRepositories>("OrgPrivateRegistryConfigurationWithSelectedRepositories")({
  /**
* The name of the private registry configuration.
*/
"name": S.String,
  /**
* The registry type.
*/
"registry_type": OrgPrivateRegistryConfigurationWithSelectedRepositoriesRegistryType,
  /**
* The username to use when authenticating with the private registry.
*/
"username": S.optionalWith(S.String, { nullable: true }),
  /**
* Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry.
*/
"visibility": OrgPrivateRegistryConfigurationWithSelectedRepositoriesVisibility,
  /**
* An array of repository IDs that can access the organization private registry when `visibility` is set to `selected`.
*/
"selected_repository_ids": S.optionalWith(S.Array(S.Int), { nullable: true }),
  "created_at": S.String,
  "updated_at": S.String
}) {}

export class PrivateRegistriesGetOrgPublicKeyParams extends S.Struct({
  
}) {}

export class PrivateRegistriesGetOrgPublicKey200 extends S.Struct({
  /**
* The identifier for the key.
*/
"key_id": S.String,
  /**
* The Base64 encoded public key.
*/
"key": S.String
}) {}

export class PrivateRegistriesGetOrgPrivateRegistryParams extends S.Struct({
  
}) {}

export class PrivateRegistriesDeleteOrgPrivateRegistryParams extends S.Struct({
  
}) {}

export class PrivateRegistriesUpdateOrgPrivateRegistryParams extends S.Struct({
  
}) {}

/**
* The registry type.
*/
export class PrivateRegistriesUpdateOrgPrivateRegistryRequestRegistryType extends S.Literal("maven_repository", "nuget_feed", "goproxy_server", "npm_registry", "rubygems_server", "cargo_registry", "composer_repository", "docker_registry", "git_source", "helm_registry", "hex_organization", "hex_repository", "pub_repository", "python_index", "terraform_registry") {}

/**
* Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry.
*/
export class PrivateRegistriesUpdateOrgPrivateRegistryRequestVisibility extends S.Literal("all", "private", "selected") {}

export class PrivateRegistriesUpdateOrgPrivateRegistryRequest extends S.Class<PrivateRegistriesUpdateOrgPrivateRegistryRequest>("PrivateRegistriesUpdateOrgPrivateRegistryRequest")({
  /**
* The registry type.
*/
"registry_type": S.optionalWith(PrivateRegistriesUpdateOrgPrivateRegistryRequestRegistryType, { nullable: true }),
  /**
* The URL of the private registry.
*/
"url": S.optionalWith(S.String, { nullable: true }),
  /**
* The username to use when authenticating with the private registry. This field should be omitted if the private registry does not require a username for authentication.
*/
"username": S.optionalWith(S.String, { nullable: true }),
  /**
* The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get private registries public key for an organization](https://docs.github.com/rest/private-registries/organization-configurations#get-private-registries-public-key-for-an-organization) endpoint.
*/
"encrypted_value": S.optionalWith(S.String.pipe(S.pattern(new RegExp("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"))), { nullable: true }),
  /**
* The ID of the key you used to encrypt the secret.
*/
"key_id": S.optionalWith(S.String, { nullable: true }),
  /**
* Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry.
*/
"visibility": S.optionalWith(PrivateRegistriesUpdateOrgPrivateRegistryRequestVisibility, { nullable: true }),
  /**
* An array of repository IDs that can access the organization private registry. You can only provide a list of repository IDs when `visibility` is set to `selected`. This field should be omitted if `visibility` is set to `all` or `private`.
*/
"selected_repository_ids": S.optionalWith(S.Array(S.Int), { nullable: true })
}) {}

export class ProjectsClassicListForOrgParamsState extends S.Literal("open", "closed", "all") {}

export class ProjectsClassicListForOrgParams extends S.Struct({
  "state": S.optionalWith(ProjectsClassicListForOrgParamsState, { nullable: true, default: () => "open" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* The baseline permission that all organization members have on this project. Only present if owner is an organization.
*/
export class ProjectOrganizationPermission extends S.Literal("read", "write", "admin", "none") {}

/**
* Projects are a way to organize columns and cards of work.
*/
export class Project extends S.Class<Project>("Project")({
  "owner_url": S.String,
  "url": S.String,
  "html_url": S.String,
  "columns_url": S.String,
  "id": S.Int,
  "node_id": S.String,
  /**
* Name of the project
*/
"name": S.String,
  /**
* Body of the project
*/
"body": S.NullOr(S.String),
  "number": S.Int,
  /**
* State of the project; either 'open' or 'closed'
*/
"state": S.String,
  "creator": S.NullOr(NullableSimpleUser),
  "created_at": S.String,
  "updated_at": S.String,
  /**
* The baseline permission that all organization members have on this project. Only present if owner is an organization.
*/
"organization_permission": S.optionalWith(ProjectOrganizationPermission, { nullable: true }),
  /**
* Whether or not this project can be seen by everyone. Only present if owner is an organization.
*/
"private": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class ProjectsClassicListForOrg200 extends S.Array(Project) {}

export class ProjectsClassicCreateForOrgParams extends S.Struct({
  
}) {}

export class ProjectsClassicCreateForOrgRequest extends S.Class<ProjectsClassicCreateForOrgRequest>("ProjectsClassicCreateForOrgRequest")({
  /**
* The name of the project.
*/
"name": S.String,
  /**
* The description of the project.
*/
"body": S.optionalWith(S.String, { nullable: true })
}) {}

export class OrgsGetAllCustomPropertiesParams extends S.Struct({
  
}) {}

/**
* The source type of the property
*/
export class CustomPropertySourceType extends S.Literal("organization", "enterprise") {}

/**
* The type of the value for the property
*/
export class CustomPropertyValueType extends S.Literal("string", "single_select", "multi_select", "true_false") {}

/**
* Who can edit the values of the property
*/
export class CustomPropertyValuesEditableBy extends S.Literal("org_actors", "org_and_repo_actors") {}

/**
* Custom property defined on an organization
*/
export class CustomProperty extends S.Class<CustomProperty>("CustomProperty")({
  /**
* The name of the property
*/
"property_name": S.String,
  /**
* The URL that can be used to fetch, update, or delete info about this property via the API.
*/
"url": S.optionalWith(S.String, { nullable: true }),
  /**
* The source type of the property
*/
"source_type": S.optionalWith(CustomPropertySourceType, { nullable: true }),
  /**
* The type of the value for the property
*/
"value_type": CustomPropertyValueType,
  /**
* Whether the property is required.
*/
"required": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Default value of the property
*/
"default_value": S.optionalWith(S.Union(S.String,
S.Array(S.String)), { nullable: true }),
  /**
* Short description of the property
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* An ordered list of the allowed values of the property.
* The property can have up to 200 allowed values.
*/
"allowed_values": S.optionalWith(S.Array(S.String.pipe(S.maxLength(75))).pipe(S.maxItems(200)), { nullable: true }),
  /**
* Who can edit the values of the property
*/
"values_editable_by": S.optionalWith(CustomPropertyValuesEditableBy, { nullable: true })
}) {}

export class OrgsGetAllCustomProperties200 extends S.Array(CustomProperty) {}

export class OrgsCreateOrUpdateCustomPropertiesParams extends S.Struct({
  
}) {}

export class OrgsCreateOrUpdateCustomPropertiesRequest extends S.Class<OrgsCreateOrUpdateCustomPropertiesRequest>("OrgsCreateOrUpdateCustomPropertiesRequest")({
  /**
* The array of custom properties to create or update.
*/
"properties": S.NonEmptyArray(CustomProperty).pipe(S.minItems(1), S.maxItems(100))
}) {}

export class OrgsCreateOrUpdateCustomProperties200 extends S.Array(CustomProperty) {}

export class OrgsGetCustomPropertyParams extends S.Struct({
  
}) {}

export class OrgsCreateOrUpdateCustomPropertyParams extends S.Struct({
  
}) {}

/**
* The type of the value for the property
*/
export class CustomPropertySetPayloadValueType extends S.Literal("string", "single_select", "multi_select", "true_false") {}

/**
* Who can edit the values of the property
*/
export class CustomPropertySetPayloadValuesEditableBy extends S.Literal("org_actors", "org_and_repo_actors") {}

/**
* Custom property set payload
*/
export class CustomPropertySetPayload extends S.Class<CustomPropertySetPayload>("CustomPropertySetPayload")({
  /**
* The type of the value for the property
*/
"value_type": CustomPropertySetPayloadValueType,
  /**
* Whether the property is required.
*/
"required": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Default value of the property
*/
"default_value": S.optionalWith(S.Union(S.String,
S.Array(S.String)), { nullable: true }),
  /**
* Short description of the property
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* An ordered list of the allowed values of the property.
* The property can have up to 200 allowed values.
*/
"allowed_values": S.optionalWith(S.Array(S.String.pipe(S.maxLength(75))).pipe(S.maxItems(200)), { nullable: true }),
  /**
* Who can edit the values of the property
*/
"values_editable_by": S.optionalWith(CustomPropertySetPayloadValuesEditableBy, { nullable: true })
}) {}

export class OrgsRemoveCustomPropertyParams extends S.Struct({
  
}) {}

export class OrgsListCustomPropertiesValuesForReposParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "repository_query": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Custom property name and associated value
*/
export class CustomPropertyValue extends S.Class<CustomPropertyValue>("CustomPropertyValue")({
  /**
* The name of the property
*/
"property_name": S.String,
  /**
* The value assigned to the property
*/
"value": S.NullOr(S.Union(S.String,
S.Array(S.String)))
}) {}

/**
* List of custom property values for a repository
*/
export class OrgRepoCustomPropertyValues extends S.Class<OrgRepoCustomPropertyValues>("OrgRepoCustomPropertyValues")({
  "repository_id": S.Int,
  "repository_name": S.String,
  "repository_full_name": S.String,
  /**
* List of custom property names and associated values
*/
"properties": S.Array(CustomPropertyValue)
}) {}

export class OrgsListCustomPropertiesValuesForRepos200 extends S.Array(OrgRepoCustomPropertyValues) {}

export class OrgsCreateOrUpdateCustomPropertiesValuesForReposParams extends S.Struct({
  
}) {}

export class OrgsCreateOrUpdateCustomPropertiesValuesForReposRequest extends S.Class<OrgsCreateOrUpdateCustomPropertiesValuesForReposRequest>("OrgsCreateOrUpdateCustomPropertiesValuesForReposRequest")({
  /**
* The names of repositories that the custom property values will be applied to.
*/
"repository_names": S.NonEmptyArray(S.String).pipe(S.minItems(1), S.maxItems(30)),
  /**
* List of custom property names and associated values to apply to the repositories.
*/
"properties": S.Array(CustomPropertyValue)
}) {}

export class OrgsListPublicMembersParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class OrgsListPublicMembers200 extends S.Array(SimpleUser) {}

export class OrgsCheckPublicMembershipForUserParams extends S.Struct({
  
}) {}

export class OrgsSetPublicMembershipForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class OrgsRemovePublicMembershipForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class ReposListForOrgParamsType extends S.Literal("all", "public", "private", "forks", "sources", "member") {}

export class ReposListForOrgParamsSort extends S.Literal("created", "updated", "pushed", "full_name") {}

export class ReposListForOrgParamsDirection extends S.Literal("asc", "desc") {}

export class ReposListForOrgParams extends S.Struct({
  "type": S.optionalWith(ReposListForOrgParamsType, { nullable: true, default: () => "all" as const }),
  "sort": S.optionalWith(ReposListForOrgParamsSort, { nullable: true, default: () => "created" as const }),
  "direction": S.optionalWith(ReposListForOrgParamsDirection, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReposListForOrg200 extends S.Array(MinimalRepository) {}

export class ReposCreateInOrgParams extends S.Struct({
  
}) {}

/**
* The visibility of the repository.
*/
export class ReposCreateInOrgRequestVisibility extends S.Literal("public", "private") {}

/**
* Required when using `squash_merge_commit_message`.
* 
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
export class ReposCreateInOrgRequestSquashMergeCommitTitle extends S.Literal("PR_TITLE", "COMMIT_OR_PR_TITLE") {}

/**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
export class ReposCreateInOrgRequestSquashMergeCommitMessage extends S.Literal("PR_BODY", "COMMIT_MESSAGES", "BLANK") {}

/**
* Required when using `merge_commit_message`.
* 
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
export class ReposCreateInOrgRequestMergeCommitTitle extends S.Literal("PR_TITLE", "MERGE_MESSAGE") {}

/**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
export class ReposCreateInOrgRequestMergeCommitMessage extends S.Literal("PR_BODY", "PR_TITLE", "BLANK") {}

export class ReposCreateInOrgRequest extends S.Class<ReposCreateInOrgRequest>("ReposCreateInOrgRequest")({
  /**
* The name of the repository.
*/
"name": S.String,
  /**
* A short description of the repository.
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* A URL with more information about the repository.
*/
"homepage": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether the repository is private.
*/
"private": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* The visibility of the repository.
*/
"visibility": S.optionalWith(ReposCreateInOrgRequestVisibility, { nullable: true }),
  /**
* Either `true` to enable issues for this repository or `false` to disable them.
*/
"has_issues": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
*/
"has_projects": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Either `true` to enable the wiki for this repository or `false` to disable it.
*/
"has_wiki": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Whether downloads are enabled.
*/
"has_downloads": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Either `true` to make this repo available as a template repository or `false` to prevent it.
*/
"is_template": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
*/
"team_id": S.optionalWith(S.Int, { nullable: true }),
  /**
* Pass `true` to create an initial commit with empty README.
*/
"auto_init": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
*/
"gitignore_template": S.optionalWith(S.String, { nullable: true }),
  /**
* Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
*/
"license_template": S.optionalWith(S.String, { nullable: true }),
  /**
* Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
*/
"allow_squash_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
*/
"allow_merge_commit": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
*/
"allow_rebase_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
*/
"allow_auto_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**
*/
"delete_branch_on_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.
*/
"use_squash_pr_title_as_default": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Required when using `squash_merge_commit_message`.
* 
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
"squash_merge_commit_title": S.optionalWith(ReposCreateInOrgRequestSquashMergeCommitTitle, { nullable: true }),
  /**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
"squash_merge_commit_message": S.optionalWith(ReposCreateInOrgRequestSquashMergeCommitMessage, { nullable: true }),
  /**
* Required when using `merge_commit_message`.
* 
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
"merge_commit_title": S.optionalWith(ReposCreateInOrgRequestMergeCommitTitle, { nullable: true }),
  /**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
"merge_commit_message": S.optionalWith(ReposCreateInOrgRequestMergeCommitMessage, { nullable: true }),
  /**
* The custom properties for the new repository. The keys are the custom property names, and the values are the corresponding custom property values.
*/
"custom_properties": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

/**
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
export class NullableRepositorySquashMergeCommitTitle extends S.Literal("PR_TITLE", "COMMIT_OR_PR_TITLE") {}

/**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
export class NullableRepositorySquashMergeCommitMessage extends S.Literal("PR_BODY", "COMMIT_MESSAGES", "BLANK") {}

/**
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
export class NullableRepositoryMergeCommitTitle extends S.Literal("PR_TITLE", "MERGE_MESSAGE") {}

/**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
export class NullableRepositoryMergeCommitMessage extends S.Literal("PR_BODY", "PR_TITLE", "BLANK") {}

/**
* A repository on GitHub.
*/
export class NullableRepository extends S.Class<NullableRepository>("NullableRepository")({
  /**
* Unique identifier of the repository
*/
"id": S.Int,
  "node_id": S.String,
  /**
* The name of the repository.
*/
"name": S.String,
  "full_name": S.String,
  "license": S.NullOr(NullableLicenseSimple),
  "forks": S.Int,
  "permissions": S.optionalWith(S.Struct({
  "admin": S.Boolean,
  "pull": S.Boolean,
  "triage": S.optionalWith(S.Boolean, { nullable: true }),
  "push": S.Boolean,
  "maintain": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  "owner": SimpleUser,
  /**
* Whether the repository is private or public.
*/
"private": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => false as const)),
  "html_url": S.String,
  "description": S.NullOr(S.String),
  "fork": S.Boolean,
  "url": S.String,
  "archive_url": S.String,
  "assignees_url": S.String,
  "blobs_url": S.String,
  "branches_url": S.String,
  "collaborators_url": S.String,
  "comments_url": S.String,
  "commits_url": S.String,
  "compare_url": S.String,
  "contents_url": S.String,
  "contributors_url": S.String,
  "deployments_url": S.String,
  "downloads_url": S.String,
  "events_url": S.String,
  "forks_url": S.String,
  "git_commits_url": S.String,
  "git_refs_url": S.String,
  "git_tags_url": S.String,
  "git_url": S.String,
  "issue_comment_url": S.String,
  "issue_events_url": S.String,
  "issues_url": S.String,
  "keys_url": S.String,
  "labels_url": S.String,
  "languages_url": S.String,
  "merges_url": S.String,
  "milestones_url": S.String,
  "notifications_url": S.String,
  "pulls_url": S.String,
  "releases_url": S.String,
  "ssh_url": S.String,
  "stargazers_url": S.String,
  "statuses_url": S.String,
  "subscribers_url": S.String,
  "subscription_url": S.String,
  "tags_url": S.String,
  "teams_url": S.String,
  "trees_url": S.String,
  "clone_url": S.String,
  "mirror_url": S.NullOr(S.String),
  "hooks_url": S.String,
  "svn_url": S.String,
  "homepage": S.NullOr(S.String),
  "language": S.NullOr(S.String),
  "forks_count": S.Int,
  "stargazers_count": S.Int,
  "watchers_count": S.Int,
  /**
* The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
*/
"size": S.Int,
  /**
* The default branch of the repository.
*/
"default_branch": S.String,
  "open_issues_count": S.Int,
  /**
* Whether this repository acts as a template that can be used to generate new repositories.
*/
"is_template": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "topics": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* Whether issues are enabled.
*/
"has_issues": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => true as const)),
  /**
* Whether projects are enabled.
*/
"has_projects": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => true as const)),
  /**
* Whether the wiki is enabled.
*/
"has_wiki": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => true as const)),
  "has_pages": S.Boolean,
  /**
* Whether downloads are enabled.
*/
"has_downloads": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => true as const)),
  /**
* Whether discussions are enabled.
*/
"has_discussions": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Whether the repository is archived.
*/
"archived": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => false as const)),
  /**
* Returns whether or not this repository disabled.
*/
"disabled": S.Boolean,
  /**
* The repository visibility: public, private, or internal.
*/
"visibility": S.optionalWith(S.String, { nullable: true, default: () => "public" as const }),
  "pushed_at": S.NullOr(S.String),
  "created_at": S.NullOr(S.String),
  "updated_at": S.NullOr(S.String),
  /**
* Whether to allow rebase merges for pull requests.
*/
"allow_rebase_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "temp_clone_token": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether to allow squash merges for pull requests.
*/
"allow_squash_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Whether to allow Auto-merge to be used on pull requests.
*/
"allow_auto_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Whether to delete head branches when pull requests are merged
*/
"delete_branch_on_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
*/
"allow_update_branch": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
*/
"use_squash_pr_title_as_default": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
"squash_merge_commit_title": S.optionalWith(NullableRepositorySquashMergeCommitTitle, { nullable: true }),
  /**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
"squash_merge_commit_message": S.optionalWith(NullableRepositorySquashMergeCommitMessage, { nullable: true }),
  /**
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
"merge_commit_title": S.optionalWith(NullableRepositoryMergeCommitTitle, { nullable: true }),
  /**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
"merge_commit_message": S.optionalWith(NullableRepositoryMergeCommitMessage, { nullable: true }),
  /**
* Whether to allow merge commits for pull requests.
*/
"allow_merge_commit": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Whether to allow forking this repo
*/
"allow_forking": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Whether to require contributors to sign off on web-based commits
*/
"web_commit_signoff_required": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "open_issues": S.Int,
  "watchers": S.Int,
  "master_branch": S.optionalWith(S.String, { nullable: true }),
  "starred_at": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether anonymous git access is enabled for this repository
*/
"anonymous_access_enabled": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The status of the code search index for this repository
*/
"code_search_index_status": S.optionalWith(S.Struct({
  "lexical_search_ok": S.optionalWith(S.Boolean, { nullable: true }),
  "lexical_commit_sha": S.optionalWith(S.String, { nullable: true })
}), { nullable: true })
}) {}

/**
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
export class FullRepositorySquashMergeCommitTitle extends S.Literal("PR_TITLE", "COMMIT_OR_PR_TITLE") {}

/**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
export class FullRepositorySquashMergeCommitMessage extends S.Literal("PR_BODY", "COMMIT_MESSAGES", "BLANK") {}

/**
* The default value for a merge commit title.
* 
*   - `PR_TITLE` - default to the pull request's title.
*   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
export class FullRepositoryMergeCommitTitle extends S.Literal("PR_TITLE", "MERGE_MESSAGE") {}

/**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
export class FullRepositoryMergeCommitMessage extends S.Literal("PR_BODY", "PR_TITLE", "BLANK") {}

/**
* Code of Conduct Simple
*/
export class CodeOfConductSimple extends S.Class<CodeOfConductSimple>("CodeOfConductSimple")({
  "url": S.String,
  "key": S.String,
  "name": S.String,
  "html_url": S.NullOr(S.String)
}) {}

/**
* Full Repository
*/
export class FullRepository extends S.Class<FullRepository>("FullRepository")({
  "id": S.Int,
  "node_id": S.String,
  "name": S.String,
  "full_name": S.String,
  "owner": SimpleUser,
  "private": S.Boolean,
  "html_url": S.String,
  "description": S.NullOr(S.String),
  "fork": S.Boolean,
  "url": S.String,
  "archive_url": S.String,
  "assignees_url": S.String,
  "blobs_url": S.String,
  "branches_url": S.String,
  "collaborators_url": S.String,
  "comments_url": S.String,
  "commits_url": S.String,
  "compare_url": S.String,
  "contents_url": S.String,
  "contributors_url": S.String,
  "deployments_url": S.String,
  "downloads_url": S.String,
  "events_url": S.String,
  "forks_url": S.String,
  "git_commits_url": S.String,
  "git_refs_url": S.String,
  "git_tags_url": S.String,
  "git_url": S.String,
  "issue_comment_url": S.String,
  "issue_events_url": S.String,
  "issues_url": S.String,
  "keys_url": S.String,
  "labels_url": S.String,
  "languages_url": S.String,
  "merges_url": S.String,
  "milestones_url": S.String,
  "notifications_url": S.String,
  "pulls_url": S.String,
  "releases_url": S.String,
  "ssh_url": S.String,
  "stargazers_url": S.String,
  "statuses_url": S.String,
  "subscribers_url": S.String,
  "subscription_url": S.String,
  "tags_url": S.String,
  "teams_url": S.String,
  "trees_url": S.String,
  "clone_url": S.String,
  "mirror_url": S.NullOr(S.String),
  "hooks_url": S.String,
  "svn_url": S.String,
  "homepage": S.NullOr(S.String),
  "language": S.NullOr(S.String),
  "forks_count": S.Int,
  "stargazers_count": S.Int,
  "watchers_count": S.Int,
  /**
* The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
*/
"size": S.Int,
  "default_branch": S.String,
  "open_issues_count": S.Int,
  "is_template": S.optionalWith(S.Boolean, { nullable: true }),
  "topics": S.optionalWith(S.Array(S.String), { nullable: true }),
  "has_issues": S.Boolean,
  "has_projects": S.Boolean,
  "has_wiki": S.Boolean,
  "has_pages": S.Boolean,
  "has_downloads": S.optionalWith(S.Boolean, { nullable: true }),
  "has_discussions": S.Boolean,
  "archived": S.Boolean,
  /**
* Returns whether or not this repository disabled.
*/
"disabled": S.Boolean,
  /**
* The repository visibility: public, private, or internal.
*/
"visibility": S.optionalWith(S.String, { nullable: true }),
  "pushed_at": S.String,
  "created_at": S.String,
  "updated_at": S.String,
  "permissions": S.optionalWith(S.Struct({
  "admin": S.Boolean,
  "maintain": S.optionalWith(S.Boolean, { nullable: true }),
  "push": S.Boolean,
  "triage": S.optionalWith(S.Boolean, { nullable: true }),
  "pull": S.Boolean
}), { nullable: true }),
  "allow_rebase_merge": S.optionalWith(S.Boolean, { nullable: true }),
  "template_repository": S.optionalWith(NullableRepository, { nullable: true }),
  "temp_clone_token": S.optionalWith(S.String, { nullable: true }),
  "allow_squash_merge": S.optionalWith(S.Boolean, { nullable: true }),
  "allow_auto_merge": S.optionalWith(S.Boolean, { nullable: true }),
  "delete_branch_on_merge": S.optionalWith(S.Boolean, { nullable: true }),
  "allow_merge_commit": S.optionalWith(S.Boolean, { nullable: true }),
  "allow_update_branch": S.optionalWith(S.Boolean, { nullable: true }),
  "use_squash_pr_title_as_default": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
"squash_merge_commit_title": S.optionalWith(FullRepositorySquashMergeCommitTitle, { nullable: true }),
  /**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
"squash_merge_commit_message": S.optionalWith(FullRepositorySquashMergeCommitMessage, { nullable: true }),
  /**
* The default value for a merge commit title.
* 
*   - `PR_TITLE` - default to the pull request's title.
*   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
"merge_commit_title": S.optionalWith(FullRepositoryMergeCommitTitle, { nullable: true }),
  /**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
"merge_commit_message": S.optionalWith(FullRepositoryMergeCommitMessage, { nullable: true }),
  "allow_forking": S.optionalWith(S.Boolean, { nullable: true }),
  "web_commit_signoff_required": S.optionalWith(S.Boolean, { nullable: true }),
  "subscribers_count": S.Int,
  "network_count": S.Int,
  "license": S.NullOr(NullableLicenseSimple),
  "organization": S.optionalWith(NullableSimpleUser, { nullable: true }),
  "parent": S.optionalWith(Repository, { nullable: true }),
  "source": S.optionalWith(Repository, { nullable: true }),
  "forks": S.Int,
  "master_branch": S.optionalWith(S.String, { nullable: true }),
  "open_issues": S.Int,
  "watchers": S.Int,
  /**
* Whether anonymous git access is allowed.
*/
"anonymous_access_enabled": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "code_of_conduct": S.optionalWith(CodeOfConductSimple, { nullable: true }),
  "security_and_analysis": S.optionalWith(SecurityAndAnalysis, { nullable: true }),
  /**
* The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
*/
"custom_properties": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class ReposGetOrgRulesetsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "targets": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The target of the ruleset
*/
export class RepositoryRulesetTarget extends S.Literal("branch", "tag", "push", "repository") {}

/**
* The type of the source of the ruleset
*/
export class RepositoryRulesetSourceType extends S.Literal("Repository", "Organization", "Enterprise") {}

/**
* The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
*/
export class RepositoryRuleEnforcement extends S.Literal("disabled", "active", "evaluate") {}

/**
* The type of actor that can bypass a ruleset.
*/
export class RepositoryRulesetBypassActorActorType extends S.Literal("Integration", "OrganizationAdmin", "RepositoryRole", "Team", "DeployKey") {}

/**
* When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. Also, `pull_request` is only applicable to branch rulesets.
*/
export class RepositoryRulesetBypassActorBypassMode extends S.Literal("always", "pull_request") {}

/**
* An actor that can bypass rules in a ruleset
*/
export class RepositoryRulesetBypassActor extends S.Class<RepositoryRulesetBypassActor>("RepositoryRulesetBypassActor")({
  /**
* The ID of the actor that can bypass a ruleset. Required for `Integration`, `RepositoryRole`, and `Team` actor types. If `actor_type` is `OrganizationAdmin`, this should be `1`. If `actor_type` is `DeployKey`, this should be null. `OrganizationAdmin` is not applicable for personal repositories.
*/
"actor_id": S.optionalWith(S.Int, { nullable: true }),
  /**
* The type of actor that can bypass a ruleset.
*/
"actor_type": RepositoryRulesetBypassActorActorType,
  /**
* When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. Also, `pull_request` is only applicable to branch rulesets.
*/
"bypass_mode": S.optionalWith(RepositoryRulesetBypassActorBypassMode, { nullable: true, default: () => "always" as const })
}) {}

/**
* The bypass type of the user making the API request for this ruleset. This field is only returned when
* querying the repository-level endpoint.
*/
export class RepositoryRulesetCurrentUserCanBypass extends S.Literal("always", "pull_requests_only", "never") {}

/**
* Parameters for a repository ruleset ref name condition
*/
export class RepositoryRulesetConditions extends S.Class<RepositoryRulesetConditions>("RepositoryRulesetConditions")({
  "ref_name": S.optionalWith(S.Struct({
  /**
* Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
*/
"include": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
*/
"exclude": S.optionalWith(S.Array(S.String), { nullable: true })
}), { nullable: true })
}) {}

/**
* Parameters for a repository ruleset ref name condition
*/
export class OrgRulesetConditionsEnum extends S.Struct({
  "repository_property": S.Struct({
  /**
* The repository properties and values to include. All of these properties must match for the condition to pass.
*/
"include": S.optionalWith(S.Array(RepositoryRulesetConditionsRepositoryPropertySpec), { nullable: true }),
  /**
* The repository properties and values to exclude. The condition will not pass if any of these properties match.
*/
"exclude": S.optionalWith(S.Array(RepositoryRulesetConditionsRepositoryPropertySpec), { nullable: true })
}),
  "ref_name": S.optionalWith(S.Struct({
  /**
* Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
*/
"include": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
*/
"exclude": S.optionalWith(S.Array(S.String), { nullable: true })
}), { nullable: true })
}) {}

/**
* The source of the repository property. Defaults to 'custom' if not specified.
*/
export class RepositoryRulesetConditionsRepositoryPropertySpecSource extends S.Literal("custom", "system") {}

/**
* Parameters for a targeting a repository property
*/
export class RepositoryRulesetConditionsRepositoryPropertySpec extends S.Class<RepositoryRulesetConditionsRepositoryPropertySpec>("RepositoryRulesetConditionsRepositoryPropertySpec")({
  /**
* The name of the repository property to target
*/
"name": S.String,
  /**
* The values to match for the repository property
*/
"property_values": S.Array(S.String),
  /**
* The source of the repository property. Defaults to 'custom' if not specified.
*/
"source": S.optionalWith(RepositoryRulesetConditionsRepositoryPropertySpecSource, { nullable: true })
}) {}

/**
* Conditions for an organization ruleset.
* The branch and tag rulesets conditions object should contain both `repository_name` and `ref_name` properties, or both `repository_id` and `ref_name` properties, or both `repository_property` and `ref_name` properties.
* The push rulesets conditions object does not require the `ref_name` property.
* For repository policy rulesets, the conditions object should only contain the `repository_name`, the `repository_id`, or the `repository_property`.
*/
export class OrgRulesetConditions extends S.Record({ key: S.String, value: S.Unknown }) {}

export class RepositoryRuleCreationType extends S.Literal("creation") {}

/**
* Only allow users with bypass permission to create matching refs.
*/
export class RepositoryRuleCreation extends S.Class<RepositoryRuleCreation>("RepositoryRuleCreation")({
  "type": RepositoryRuleCreationType
}) {}

export class RepositoryRuleUpdateType extends S.Literal("update") {}

/**
* Only allow users with bypass permission to update matching refs.
*/
export class RepositoryRuleUpdate extends S.Class<RepositoryRuleUpdate>("RepositoryRuleUpdate")({
  "type": RepositoryRuleUpdateType,
  "parameters": S.optionalWith(S.Struct({
  /**
* Branch can pull changes from its upstream repository
*/
"update_allows_fetch_and_merge": S.Boolean
}), { nullable: true })
}) {}

export class RepositoryRuleDeletionType extends S.Literal("deletion") {}

/**
* Only allow users with bypass permissions to delete matching refs.
*/
export class RepositoryRuleDeletion extends S.Class<RepositoryRuleDeletion>("RepositoryRuleDeletion")({
  "type": RepositoryRuleDeletionType
}) {}

export class RepositoryRuleRequiredLinearHistoryType extends S.Literal("required_linear_history") {}

/**
* Prevent merge commits from being pushed to matching refs.
*/
export class RepositoryRuleRequiredLinearHistory extends S.Class<RepositoryRuleRequiredLinearHistory>("RepositoryRuleRequiredLinearHistory")({
  "type": RepositoryRuleRequiredLinearHistoryType
}) {}

export class RepositoryRuleMergeQueueType extends S.Literal("merge_queue") {}

/**
* When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.
*/
export class RepositoryRuleMergeQueueParametersGroupingStrategy extends S.Literal("ALLGREEN", "HEADGREEN") {}

/**
* Method to use when merging changes from queued pull requests.
*/
export class RepositoryRuleMergeQueueParametersMergeMethod extends S.Literal("MERGE", "SQUASH", "REBASE") {}

/**
* Merges must be performed via a merge queue.
*/
export class RepositoryRuleMergeQueue extends S.Class<RepositoryRuleMergeQueue>("RepositoryRuleMergeQueue")({
  "type": RepositoryRuleMergeQueueType,
  "parameters": S.optionalWith(S.Struct({
  /**
* Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed
*/
"check_response_timeout_minutes": S.Int.pipe(S.greaterThanOrEqualTo(1), S.lessThanOrEqualTo(360)),
  /**
* When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.
*/
"grouping_strategy": RepositoryRuleMergeQueueParametersGroupingStrategy,
  /**
* Limit the number of queued pull requests requesting checks and workflow runs at the same time.
*/
"max_entries_to_build": S.Int.pipe(S.greaterThanOrEqualTo(0), S.lessThanOrEqualTo(100)),
  /**
* The maximum number of PRs that will be merged together in a group.
*/
"max_entries_to_merge": S.Int.pipe(S.greaterThanOrEqualTo(0), S.lessThanOrEqualTo(100)),
  /**
* Method to use when merging changes from queued pull requests.
*/
"merge_method": RepositoryRuleMergeQueueParametersMergeMethod,
  /**
* The minimum number of PRs that will be merged together in a group.
*/
"min_entries_to_merge": S.Int.pipe(S.greaterThanOrEqualTo(0), S.lessThanOrEqualTo(100)),
  /**
* The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged.
*/
"min_entries_to_merge_wait_minutes": S.Int.pipe(S.greaterThanOrEqualTo(0), S.lessThanOrEqualTo(360))
}), { nullable: true })
}) {}

export class RepositoryRuleRequiredDeploymentsType extends S.Literal("required_deployments") {}

/**
* Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
*/
export class RepositoryRuleRequiredDeployments extends S.Class<RepositoryRuleRequiredDeployments>("RepositoryRuleRequiredDeployments")({
  "type": RepositoryRuleRequiredDeploymentsType,
  "parameters": S.optionalWith(S.Struct({
  /**
* The environments that must be successfully deployed to before branches can be merged.
*/
"required_deployment_environments": S.Array(S.String)
}), { nullable: true })
}) {}

export class RepositoryRuleRequiredSignaturesType extends S.Literal("required_signatures") {}

/**
* Commits pushed to matching refs must have verified signatures.
*/
export class RepositoryRuleRequiredSignatures extends S.Class<RepositoryRuleRequiredSignatures>("RepositoryRuleRequiredSignatures")({
  "type": RepositoryRuleRequiredSignaturesType
}) {}

export class RepositoryRulePullRequestType extends S.Literal("pull_request") {}

/**
* Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
*/
export class RepositoryRulePullRequest extends S.Class<RepositoryRulePullRequest>("RepositoryRulePullRequest")({
  "type": RepositoryRulePullRequestType,
  "parameters": S.optionalWith(S.Struct({
  /**
* Array of allowed merge methods. Allowed values include `merge`, `squash`, and `rebase`. At least one option must be enabled.
*/
"allowed_merge_methods": S.optionalWith(S.Array(S.Literal("merge", "squash", "rebase")), { nullable: true }),
  /**
* Request Copilot code review for new pull requests automatically if the author has access to Copilot code review.
*/
"automatic_copilot_code_review_enabled": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* New, reviewable commits pushed will dismiss previous pull request review approvals.
*/
"dismiss_stale_reviews_on_push": S.Boolean,
  /**
* Require an approving review in pull requests that modify files that have a designated code owner.
*/
"require_code_owner_review": S.Boolean,
  /**
* Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
*/
"require_last_push_approval": S.Boolean,
  /**
* The number of approving reviews that are required before a pull request can be merged.
*/
"required_approving_review_count": S.Int.pipe(S.greaterThanOrEqualTo(0), S.lessThanOrEqualTo(10)),
  /**
* All conversations on code must be resolved before a pull request can be merged.
*/
"required_review_thread_resolution": S.Boolean
}), { nullable: true })
}) {}

export class RepositoryRuleRequiredStatusChecksType extends S.Literal("required_status_checks") {}

/**
* Required status check
*/
export class RepositoryRuleParamsStatusCheckConfiguration extends S.Class<RepositoryRuleParamsStatusCheckConfiguration>("RepositoryRuleParamsStatusCheckConfiguration")({
  /**
* The status check context name that must be present on the commit.
*/
"context": S.String,
  /**
* The optional integration ID that this status check must originate from.
*/
"integration_id": S.optionalWith(S.Int, { nullable: true })
}) {}

/**
* Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
*/
export class RepositoryRuleRequiredStatusChecks extends S.Class<RepositoryRuleRequiredStatusChecks>("RepositoryRuleRequiredStatusChecks")({
  "type": RepositoryRuleRequiredStatusChecksType,
  "parameters": S.optionalWith(S.Struct({
  /**
* Allow repositories and branches to be created if a check would otherwise prohibit it.
*/
"do_not_enforce_on_create": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Status checks that are required.
*/
"required_status_checks": S.Array(RepositoryRuleParamsStatusCheckConfiguration),
  /**
* Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled.
*/
"strict_required_status_checks_policy": S.Boolean
}), { nullable: true })
}) {}

export class RepositoryRuleNonFastForwardType extends S.Literal("non_fast_forward") {}

/**
* Prevent users with push access from force pushing to refs.
*/
export class RepositoryRuleNonFastForward extends S.Class<RepositoryRuleNonFastForward>("RepositoryRuleNonFastForward")({
  "type": RepositoryRuleNonFastForwardType
}) {}

export class RepositoryRuleCommitMessagePatternType extends S.Literal("commit_message_pattern") {}

/**
* The operator to use for matching.
*/
export class RepositoryRuleCommitMessagePatternParametersOperator extends S.Literal("starts_with", "ends_with", "contains", "regex") {}

/**
* Parameters to be used for the commit_message_pattern rule
*/
export class RepositoryRuleCommitMessagePattern extends S.Class<RepositoryRuleCommitMessagePattern>("RepositoryRuleCommitMessagePattern")({
  "type": RepositoryRuleCommitMessagePatternType,
  "parameters": S.optionalWith(S.Struct({
  /**
* How this rule will appear to users.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* If true, the rule will fail if the pattern matches.
*/
"negate": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The operator to use for matching.
*/
"operator": RepositoryRuleCommitMessagePatternParametersOperator,
  /**
* The pattern to match with.
*/
"pattern": S.String
}), { nullable: true })
}) {}

export class RepositoryRuleCommitAuthorEmailPatternType extends S.Literal("commit_author_email_pattern") {}

/**
* The operator to use for matching.
*/
export class RepositoryRuleCommitAuthorEmailPatternParametersOperator extends S.Literal("starts_with", "ends_with", "contains", "regex") {}

/**
* Parameters to be used for the commit_author_email_pattern rule
*/
export class RepositoryRuleCommitAuthorEmailPattern extends S.Class<RepositoryRuleCommitAuthorEmailPattern>("RepositoryRuleCommitAuthorEmailPattern")({
  "type": RepositoryRuleCommitAuthorEmailPatternType,
  "parameters": S.optionalWith(S.Struct({
  /**
* How this rule will appear to users.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* If true, the rule will fail if the pattern matches.
*/
"negate": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The operator to use for matching.
*/
"operator": RepositoryRuleCommitAuthorEmailPatternParametersOperator,
  /**
* The pattern to match with.
*/
"pattern": S.String
}), { nullable: true })
}) {}

export class RepositoryRuleCommitterEmailPatternType extends S.Literal("committer_email_pattern") {}

/**
* The operator to use for matching.
*/
export class RepositoryRuleCommitterEmailPatternParametersOperator extends S.Literal("starts_with", "ends_with", "contains", "regex") {}

/**
* Parameters to be used for the committer_email_pattern rule
*/
export class RepositoryRuleCommitterEmailPattern extends S.Class<RepositoryRuleCommitterEmailPattern>("RepositoryRuleCommitterEmailPattern")({
  "type": RepositoryRuleCommitterEmailPatternType,
  "parameters": S.optionalWith(S.Struct({
  /**
* How this rule will appear to users.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* If true, the rule will fail if the pattern matches.
*/
"negate": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The operator to use for matching.
*/
"operator": RepositoryRuleCommitterEmailPatternParametersOperator,
  /**
* The pattern to match with.
*/
"pattern": S.String
}), { nullable: true })
}) {}

export class RepositoryRuleBranchNamePatternType extends S.Literal("branch_name_pattern") {}

/**
* The operator to use for matching.
*/
export class RepositoryRuleBranchNamePatternParametersOperator extends S.Literal("starts_with", "ends_with", "contains", "regex") {}

/**
* Parameters to be used for the branch_name_pattern rule
*/
export class RepositoryRuleBranchNamePattern extends S.Class<RepositoryRuleBranchNamePattern>("RepositoryRuleBranchNamePattern")({
  "type": RepositoryRuleBranchNamePatternType,
  "parameters": S.optionalWith(S.Struct({
  /**
* How this rule will appear to users.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* If true, the rule will fail if the pattern matches.
*/
"negate": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The operator to use for matching.
*/
"operator": RepositoryRuleBranchNamePatternParametersOperator,
  /**
* The pattern to match with.
*/
"pattern": S.String
}), { nullable: true })
}) {}

export class RepositoryRuleTagNamePatternType extends S.Literal("tag_name_pattern") {}

/**
* The operator to use for matching.
*/
export class RepositoryRuleTagNamePatternParametersOperator extends S.Literal("starts_with", "ends_with", "contains", "regex") {}

/**
* Parameters to be used for the tag_name_pattern rule
*/
export class RepositoryRuleTagNamePattern extends S.Class<RepositoryRuleTagNamePattern>("RepositoryRuleTagNamePattern")({
  "type": RepositoryRuleTagNamePatternType,
  "parameters": S.optionalWith(S.Struct({
  /**
* How this rule will appear to users.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* If true, the rule will fail if the pattern matches.
*/
"negate": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The operator to use for matching.
*/
"operator": RepositoryRuleTagNamePatternParametersOperator,
  /**
* The pattern to match with.
*/
"pattern": S.String
}), { nullable: true })
}) {}

export class RepositoryRuleFilePathRestrictionType extends S.Literal("file_path_restriction") {}

/**
* Prevent commits that include changes in specified file and folder paths from being pushed to the commit graph. This includes absolute paths that contain file names.
*/
export class RepositoryRuleFilePathRestriction extends S.Class<RepositoryRuleFilePathRestriction>("RepositoryRuleFilePathRestriction")({
  "type": RepositoryRuleFilePathRestrictionType,
  "parameters": S.optionalWith(S.Struct({
  /**
* The file paths that are restricted from being pushed to the commit graph.
*/
"restricted_file_paths": S.Array(S.String)
}), { nullable: true })
}) {}

export class RepositoryRuleMaxFilePathLengthType extends S.Literal("max_file_path_length") {}

/**
* Prevent commits that include file paths that exceed the specified character limit from being pushed to the commit graph.
*/
export class RepositoryRuleMaxFilePathLength extends S.Class<RepositoryRuleMaxFilePathLength>("RepositoryRuleMaxFilePathLength")({
  "type": RepositoryRuleMaxFilePathLengthType,
  "parameters": S.optionalWith(S.Struct({
  /**
* The maximum amount of characters allowed in file paths.
*/
"max_file_path_length": S.Int.pipe(S.greaterThanOrEqualTo(1), S.lessThanOrEqualTo(32767))
}), { nullable: true })
}) {}

export class RepositoryRuleFileExtensionRestrictionType extends S.Literal("file_extension_restriction") {}

/**
* Prevent commits that include files with specified file extensions from being pushed to the commit graph.
*/
export class RepositoryRuleFileExtensionRestriction extends S.Class<RepositoryRuleFileExtensionRestriction>("RepositoryRuleFileExtensionRestriction")({
  "type": RepositoryRuleFileExtensionRestrictionType,
  "parameters": S.optionalWith(S.Struct({
  /**
* The file extensions that are restricted from being pushed to the commit graph.
*/
"restricted_file_extensions": S.Array(S.String)
}), { nullable: true })
}) {}

export class RepositoryRuleMaxFileSizeType extends S.Literal("max_file_size") {}

/**
* Prevent commits with individual files that exceed the specified limit from being pushed to the commit graph.
*/
export class RepositoryRuleMaxFileSize extends S.Class<RepositoryRuleMaxFileSize>("RepositoryRuleMaxFileSize")({
  "type": RepositoryRuleMaxFileSizeType,
  "parameters": S.optionalWith(S.Struct({
  /**
* The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).
*/
"max_file_size": S.Int.pipe(S.greaterThanOrEqualTo(1), S.lessThanOrEqualTo(100))
}), { nullable: true })
}) {}

export class RepositoryRuleWorkflowsType extends S.Literal("workflows") {}

/**
* A workflow that must run for this rule to pass
*/
export class RepositoryRuleParamsWorkflowFileReference extends S.Class<RepositoryRuleParamsWorkflowFileReference>("RepositoryRuleParamsWorkflowFileReference")({
  /**
* The path to the workflow file
*/
"path": S.String,
  /**
* The ref (branch or tag) of the workflow file to use
*/
"ref": S.optionalWith(S.String, { nullable: true }),
  /**
* The ID of the repository where the workflow is defined
*/
"repository_id": S.Int,
  /**
* The commit SHA of the workflow file to use
*/
"sha": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
*/
export class RepositoryRuleWorkflows extends S.Class<RepositoryRuleWorkflows>("RepositoryRuleWorkflows")({
  "type": RepositoryRuleWorkflowsType,
  "parameters": S.optionalWith(S.Struct({
  /**
* Allow repositories and branches to be created if a check would otherwise prohibit it.
*/
"do_not_enforce_on_create": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Workflows that must pass for this rule to pass.
*/
"workflows": S.Array(RepositoryRuleParamsWorkflowFileReference)
}), { nullable: true })
}) {}

export class RepositoryRuleCodeScanningType extends S.Literal("code_scanning") {}

/**
* The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."
*/
export class RepositoryRuleParamsCodeScanningToolAlertsThreshold extends S.Literal("none", "errors", "errors_and_warnings", "all") {}

/**
* The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."
*/
export class RepositoryRuleParamsCodeScanningToolSecurityAlertsThreshold extends S.Literal("none", "critical", "high_or_higher", "medium_or_higher", "all") {}

/**
* A tool that must provide code scanning results for this rule to pass.
*/
export class RepositoryRuleParamsCodeScanningTool extends S.Class<RepositoryRuleParamsCodeScanningTool>("RepositoryRuleParamsCodeScanningTool")({
  /**
* The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."
*/
"alerts_threshold": RepositoryRuleParamsCodeScanningToolAlertsThreshold,
  /**
* The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see "[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)."
*/
"security_alerts_threshold": RepositoryRuleParamsCodeScanningToolSecurityAlertsThreshold,
  /**
* The name of a code scanning tool
*/
"tool": S.String
}) {}

/**
* Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.
*/
export class RepositoryRuleCodeScanning extends S.Class<RepositoryRuleCodeScanning>("RepositoryRuleCodeScanning")({
  "type": RepositoryRuleCodeScanningType,
  "parameters": S.optionalWith(S.Struct({
  /**
* Tools that must provide code scanning results for this rule to pass.
*/
"code_scanning_tools": S.Array(RepositoryRuleParamsCodeScanningTool)
}), { nullable: true })
}) {}

/**
* A repository rule.
*/
export class RepositoryRule extends S.Record({ key: S.String, value: S.Unknown }) {}

/**
* A set of rules to apply when specified conditions are met.
*/
export class RepositoryRuleset extends S.Class<RepositoryRuleset>("RepositoryRuleset")({
  /**
* The ID of the ruleset
*/
"id": S.Int,
  /**
* The name of the ruleset
*/
"name": S.String,
  /**
* The target of the ruleset
*/
"target": S.optionalWith(RepositoryRulesetTarget, { nullable: true }),
  /**
* The type of the source of the ruleset
*/
"source_type": S.optionalWith(RepositoryRulesetSourceType, { nullable: true }),
  /**
* The name of the source
*/
"source": S.String,
  "enforcement": RepositoryRuleEnforcement,
  /**
* The actors that can bypass the rules in this ruleset
*/
"bypass_actors": S.optionalWith(S.Array(RepositoryRulesetBypassActor), { nullable: true }),
  /**
* The bypass type of the user making the API request for this ruleset. This field is only returned when
* querying the repository-level endpoint.
*/
"current_user_can_bypass": S.optionalWith(RepositoryRulesetCurrentUserCanBypass, { nullable: true }),
  "node_id": S.optionalWith(S.String, { nullable: true }),
  "_links": S.optionalWith(S.Struct({
  "self": S.optionalWith(S.Struct({
  /**
* The URL of the ruleset
*/
"href": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  "html": S.optionalWith(S.Struct({
  /**
* The html URL of the ruleset
*/
"href": S.optionalWith(S.String, { nullable: true })
}), { nullable: true })
}), { nullable: true }),
  "conditions": S.optionalWith(S.Union(RepositoryRulesetConditions,
OrgRulesetConditions), { nullable: true }),
  "rules": S.optionalWith(S.Array(RepositoryRule), { nullable: true }),
  "created_at": S.optionalWith(S.String, { nullable: true }),
  "updated_at": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposGetOrgRulesets200 extends S.Array(RepositoryRuleset) {}

export class ReposCreateOrgRulesetParams extends S.Struct({
  
}) {}

/**
* The target of the ruleset
*/
export class ReposCreateOrgRulesetRequestTarget extends S.Literal("branch", "tag", "push", "repository") {}

/**
* A repository rule.
*/
export class OrgRules extends S.Record({ key: S.String, value: S.Unknown }) {}

export class ReposCreateOrgRulesetRequest extends S.Class<ReposCreateOrgRulesetRequest>("ReposCreateOrgRulesetRequest")({
  /**
* The name of the ruleset.
*/
"name": S.String,
  /**
* The target of the ruleset
*/
"target": S.optionalWith(ReposCreateOrgRulesetRequestTarget, { nullable: true, default: () => "branch" as const }),
  "enforcement": RepositoryRuleEnforcement,
  /**
* The actors that can bypass the rules in this ruleset
*/
"bypass_actors": S.optionalWith(S.Array(RepositoryRulesetBypassActor), { nullable: true }),
  "conditions": S.optionalWith(OrgRulesetConditions, { nullable: true }),
  /**
* An array of rules within the ruleset.
*/
"rules": S.optionalWith(S.Array(OrgRules), { nullable: true })
}) {}

export class ReposGetOrgRuleSuitesParamsTimePeriod extends S.Literal("hour", "day", "week", "month") {}

export class ReposGetOrgRuleSuitesParamsRuleSuiteResult extends S.Literal("pass", "fail", "bypass", "all") {}

export class ReposGetOrgRuleSuitesParams extends S.Struct({
  "ref": S.optionalWith(S.String, { nullable: true }),
  "repository_name": S.optionalWith(S.String, { nullable: true }),
  "time_period": S.optionalWith(ReposGetOrgRuleSuitesParamsTimePeriod, { nullable: true, default: () => "day" as const }),
  "actor_name": S.optionalWith(S.String, { nullable: true }),
  "rule_suite_result": S.optionalWith(ReposGetOrgRuleSuitesParamsRuleSuiteResult, { nullable: true, default: () => "all" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Response
*/
export class RuleSuites extends S.Array(S.Struct({
  /**
* The unique identifier of the rule insight.
*/
"id": S.optionalWith(S.Int, { nullable: true }),
  /**
* The number that identifies the user.
*/
"actor_id": S.optionalWith(S.Int, { nullable: true }),
  /**
* The handle for the GitHub user account.
*/
"actor_name": S.optionalWith(S.String, { nullable: true }),
  /**
* The first commit sha before the push evaluation.
*/
"before_sha": S.optionalWith(S.String, { nullable: true }),
  /**
* The last commit sha in the push evaluation.
*/
"after_sha": S.optionalWith(S.String, { nullable: true }),
  /**
* The ref name that the evaluation ran on.
*/
"ref": S.optionalWith(S.String, { nullable: true }),
  /**
* The ID of the repository associated with the rule evaluation.
*/
"repository_id": S.optionalWith(S.Int, { nullable: true }),
  /**
* The name of the repository without the `.git` extension.
*/
"repository_name": S.optionalWith(S.String, { nullable: true }),
  "pushed_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The result of the rule evaluations for rules with the `active` enforcement status.
*/
"result": S.optionalWith(S.Literal("pass", "fail", "bypass"), { nullable: true }),
  /**
* The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`.
*/
"evaluation_result": S.optionalWith(S.Literal("pass", "fail", "bypass"), { nullable: true })
})) {}

export class ReposGetOrgRuleSuiteParams extends S.Struct({
  
}) {}

/**
* The result of the rule evaluations for rules with the `active` enforcement status.
*/
export class RuleSuiteResult extends S.Literal("pass", "fail", "bypass") {}

/**
* The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`. Null if no rules with `evaluate` enforcement status were run.
*/
export class RuleSuiteEvaluationResult extends S.Literal("pass", "fail", "bypass") {}

/**
* Response
*/
export class RuleSuite extends S.Class<RuleSuite>("RuleSuite")({
  /**
* The unique identifier of the rule insight.
*/
"id": S.optionalWith(S.Int, { nullable: true }),
  /**
* The number that identifies the user.
*/
"actor_id": S.optionalWith(S.Int, { nullable: true }),
  /**
* The handle for the GitHub user account.
*/
"actor_name": S.optionalWith(S.String, { nullable: true }),
  /**
* The first commit sha before the push evaluation.
*/
"before_sha": S.optionalWith(S.String, { nullable: true }),
  /**
* The last commit sha in the push evaluation.
*/
"after_sha": S.optionalWith(S.String, { nullable: true }),
  /**
* The ref name that the evaluation ran on.
*/
"ref": S.optionalWith(S.String, { nullable: true }),
  /**
* The ID of the repository associated with the rule evaluation.
*/
"repository_id": S.optionalWith(S.Int, { nullable: true }),
  /**
* The name of the repository without the `.git` extension.
*/
"repository_name": S.optionalWith(S.String, { nullable: true }),
  "pushed_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The result of the rule evaluations for rules with the `active` enforcement status.
*/
"result": S.optionalWith(RuleSuiteResult, { nullable: true }),
  /**
* The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`. Null if no rules with `evaluate` enforcement status were run.
*/
"evaluation_result": S.optionalWith(RuleSuiteEvaluationResult, { nullable: true }),
  /**
* Details on the evaluated rules.
*/
"rule_evaluations": S.optionalWith(S.Array(S.Struct({
  "rule_source": S.optionalWith(S.Struct({
  /**
* The type of rule source.
*/
"type": S.optionalWith(S.String, { nullable: true }),
  /**
* The ID of the rule source.
*/
"id": S.optionalWith(S.Int, { nullable: true }),
  /**
* The name of the rule source.
*/
"name": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  /**
* The enforcement level of this rule source.
*/
"enforcement": S.optionalWith(S.Literal("active", "evaluate", "deleted ruleset"), { nullable: true }),
  /**
* The result of the evaluation of the individual rule.
*/
"result": S.optionalWith(S.Literal("pass", "fail"), { nullable: true }),
  /**
* The type of rule.
*/
"rule_type": S.optionalWith(S.String, { nullable: true }),
  /**
* The detailed failure message for the rule. Null if the rule passed.
*/
"details": S.optionalWith(S.String, { nullable: true })
})), { nullable: true })
}) {}

export class ReposGetOrgRulesetParams extends S.Struct({
  
}) {}

export class ReposUpdateOrgRulesetParams extends S.Struct({
  
}) {}

/**
* The target of the ruleset
*/
export class ReposUpdateOrgRulesetRequestTarget extends S.Literal("branch", "tag", "push", "repository") {}

export class ReposUpdateOrgRulesetRequest extends S.Class<ReposUpdateOrgRulesetRequest>("ReposUpdateOrgRulesetRequest")({
  /**
* The name of the ruleset.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The target of the ruleset
*/
"target": S.optionalWith(ReposUpdateOrgRulesetRequestTarget, { nullable: true }),
  "enforcement": S.optionalWith(RepositoryRuleEnforcement, { nullable: true }),
  /**
* The actors that can bypass the rules in this ruleset
*/
"bypass_actors": S.optionalWith(S.Array(RepositoryRulesetBypassActor), { nullable: true }),
  "conditions": S.optionalWith(OrgRulesetConditions, { nullable: true }),
  /**
* An array of rules within the ruleset.
*/
"rules": S.optionalWith(S.Array(OrgRules), { nullable: true })
}) {}

export class ReposDeleteOrgRulesetParams extends S.Struct({
  
}) {}

export class OrgsGetOrgRulesetHistoryParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* The historical version of a ruleset
*/
export class RulesetVersion extends S.Class<RulesetVersion>("RulesetVersion")({
  /**
* The ID of the previous version of the ruleset
*/
"version_id": S.Int,
  /**
* The actor who updated the ruleset
*/
"actor": S.Struct({
  "id": S.optionalWith(S.Int, { nullable: true }),
  "type": S.optionalWith(S.String, { nullable: true })
}),
  "updated_at": S.String
}) {}

export class OrgsGetOrgRulesetHistory200 extends S.Array(RulesetVersion) {}

export class OrgsGetOrgRulesetVersionParams extends S.Struct({
  
}) {}

/**
* The historical version of a ruleset
*/
export class RulesetVersionWithState extends S.Class<RulesetVersionWithState>("RulesetVersionWithState")({
  /**
* The state of the ruleset version
*/
"state": S.Record({ key: S.String, value: S.Unknown }),
  /**
* The ID of the previous version of the ruleset
*/
"version_id": S.Int,
  /**
* The actor who updated the ruleset
*/
"actor": S.Struct({
  "id": S.optionalWith(S.Int, { nullable: true }),
  "type": S.optionalWith(S.String, { nullable: true })
}),
  "updated_at": S.String
}) {}

export class SecretScanningListAlertsForOrgParamsState extends S.Literal("open", "resolved") {}

export class SecretScanningListAlertsForOrgParamsSort extends S.Literal("created", "updated") {}

export class SecretScanningListAlertsForOrgParamsDirection extends S.Literal("asc", "desc") {}

export class SecretScanningListAlertsForOrgParams extends S.Struct({
  "state": S.optionalWith(SecretScanningListAlertsForOrgParamsState, { nullable: true }),
  "secret_type": S.optionalWith(S.String, { nullable: true }),
  "resolution": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(SecretScanningListAlertsForOrgParamsSort, { nullable: true, default: () => "created" as const }),
  "direction": S.optionalWith(SecretScanningListAlertsForOrgParamsDirection, { nullable: true, default: () => "desc" as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true }),
  "validity": S.optionalWith(S.String, { nullable: true }),
  "is_publicly_leaked": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "is_multi_repo": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "hide_secret": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

export class SecretScanningListAlertsForOrg200 extends S.Array(OrganizationSecretScanningAlert) {}

export class SecretScanningListAlertsForOrg503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class SecretScanningListOrgPatternConfigsParams extends S.Struct({
  
}) {}

/**
* The version of the entity. This is used to confirm you're updating the current version of the entity and mitigate unintentionally overriding someone else's update.
*/
export class SecretScanningRowVersion extends S.String {}

/**
* The default push protection setting for this pattern.
*/
export class SecretScanningPatternOverrideDefaultSetting extends S.Literal("disabled", "enabled") {}

/**
* The push protection setting for this pattern set at the enterprise level. Only present for partner patterns when the organization has a parent enterprise.
*/
export class SecretScanningPatternOverrideEnterpriseSetting extends S.Literal("not-set", "disabled", "enabled") {}

/**
* The current push protection setting for this pattern. If this is `not-set`, then it inherits either the enterprise setting if it exists or the default setting.
*/
export class SecretScanningPatternOverrideSetting extends S.Literal("not-set", "disabled", "enabled") {}

export class SecretScanningPatternOverride extends S.Class<SecretScanningPatternOverride>("SecretScanningPatternOverride")({
  /**
* The ID of the pattern.
*/
"token_type": S.optionalWith(S.String, { nullable: true }),
  /**
* The version of this pattern if it's a custom pattern.
*/
"custom_pattern_version": S.optionalWith(S.String, { nullable: true }),
  /**
* The slug of the pattern.
*/
"slug": S.optionalWith(S.String, { nullable: true }),
  /**
* The user-friendly name for the pattern.
*/
"display_name": S.optionalWith(S.String, { nullable: true }),
  /**
* The total number of alerts generated by this pattern.
*/
"alert_total": S.optionalWith(S.Int, { nullable: true }),
  /**
* The percentage of all alerts that this pattern represents, rounded to the nearest integer.
*/
"alert_total_percentage": S.optionalWith(S.Int, { nullable: true }),
  /**
* The number of false positive alerts generated by this pattern.
*/
"false_positives": S.optionalWith(S.Int, { nullable: true }),
  /**
* The percentage of alerts from this pattern that are false positives, rounded to the nearest integer.
*/
"false_positive_rate": S.optionalWith(S.Int, { nullable: true }),
  /**
* The percentage of blocks for this pattern that were bypassed, rounded to the nearest integer.
*/
"bypass_rate": S.optionalWith(S.Int, { nullable: true }),
  /**
* The default push protection setting for this pattern.
*/
"default_setting": S.optionalWith(SecretScanningPatternOverrideDefaultSetting, { nullable: true }),
  /**
* The push protection setting for this pattern set at the enterprise level. Only present for partner patterns when the organization has a parent enterprise.
*/
"enterprise_setting": S.optionalWith(SecretScanningPatternOverrideEnterpriseSetting, { nullable: true }),
  /**
* The current push protection setting for this pattern. If this is `not-set`, then it inherits either the enterprise setting if it exists or the default setting.
*/
"setting": S.optionalWith(SecretScanningPatternOverrideSetting, { nullable: true })
}) {}

/**
* A collection of secret scanning patterns and their settings related to push protection.
*/
export class SecretScanningPatternConfiguration extends S.Class<SecretScanningPatternConfiguration>("SecretScanningPatternConfiguration")({
  "pattern_config_version": S.optionalWith(SecretScanningRowVersion, { nullable: true }),
  /**
* Overrides for partner patterns.
*/
"provider_pattern_overrides": S.optionalWith(S.Array(SecretScanningPatternOverride), { nullable: true }),
  /**
* Overrides for custom patterns defined by the organization.
*/
"custom_pattern_overrides": S.optionalWith(S.Array(SecretScanningPatternOverride), { nullable: true })
}) {}

export class SecretScanningUpdateOrgPatternConfigsParams extends S.Struct({
  
}) {}

export class SecretScanningUpdateOrgPatternConfigsRequest extends S.Class<SecretScanningUpdateOrgPatternConfigsRequest>("SecretScanningUpdateOrgPatternConfigsRequest")({
  "pattern_config_version": S.optionalWith(SecretScanningRowVersion, { nullable: true }),
  /**
* Pattern settings for provider patterns.
*/
"provider_pattern_settings": S.optionalWith(S.Array(S.Struct({
  /**
* The ID of the pattern to configure.
*/
"token_type": S.optionalWith(S.String, { nullable: true }),
  /**
* Push protection setting to set for the pattern.
*/
"push_protection_setting": S.optionalWith(S.Literal("not-set", "disabled", "enabled"), { nullable: true })
})), { nullable: true }),
  /**
* Pattern settings for custom patterns.
*/
"custom_pattern_settings": S.optionalWith(S.Array(S.Struct({
  /**
* The ID of the pattern to configure.
*/
"token_type": S.optionalWith(S.String, { nullable: true }),
  "custom_pattern_version": S.optionalWith(SecretScanningRowVersion, { nullable: true }),
  /**
* Push protection setting to set for the pattern.
*/
"push_protection_setting": S.optionalWith(S.Literal("disabled", "enabled"), { nullable: true })
})), { nullable: true })
}) {}

export class SecretScanningUpdateOrgPatternConfigs200 extends S.Struct({
  /**
* The updated pattern configuration version.
*/
"pattern_config_version": S.optionalWith(S.String, { nullable: true })
}) {}

export class SecurityAdvisoriesListOrgRepositoryAdvisoriesParamsDirection extends S.Literal("asc", "desc") {}

export class SecurityAdvisoriesListOrgRepositoryAdvisoriesParamsSort extends S.Literal("created", "updated", "published") {}

export class SecurityAdvisoriesListOrgRepositoryAdvisoriesParamsState extends S.Literal("triage", "draft", "published", "closed") {}

export class SecurityAdvisoriesListOrgRepositoryAdvisoriesParams extends S.Struct({
  "direction": S.optionalWith(SecurityAdvisoriesListOrgRepositoryAdvisoriesParamsDirection, { nullable: true, default: () => "desc" as const }),
  "sort": S.optionalWith(SecurityAdvisoriesListOrgRepositoryAdvisoriesParamsSort, { nullable: true, default: () => "created" as const }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true }),
  "per_page": S.optionalWith(S.Int.pipe(S.greaterThanOrEqualTo(1), S.lessThanOrEqualTo(100)), { nullable: true, default: () => 30 as const }),
  "state": S.optionalWith(SecurityAdvisoriesListOrgRepositoryAdvisoriesParamsState, { nullable: true })
}) {}

/**
* The severity of the advisory.
*/
export class RepositoryAdvisorySeverity extends S.Literal("critical", "high", "medium", "low") {}

/**
* The state of the advisory.
*/
export class RepositoryAdvisoryState extends S.Literal("published", "closed", "withdrawn", "draft", "triage") {}

/**
* A product affected by the vulnerability detailed in a repository security advisory.
*/
export class RepositoryAdvisoryVulnerability extends S.Class<RepositoryAdvisoryVulnerability>("RepositoryAdvisoryVulnerability")({
  /**
* The name of the package affected by the vulnerability.
*/
"package": S.NullOr(S.Struct({
  "ecosystem": SecurityAdvisoryEcosystems,
  /**
* The unique package name within its ecosystem.
*/
"name": S.NullOr(S.String)
})),
  /**
* The range of the package versions affected by the vulnerability.
*/
"vulnerable_version_range": S.NullOr(S.String),
  /**
* The package version(s) that resolve the vulnerability.
*/
"patched_versions": S.NullOr(S.String),
  /**
* The functions in the package that are affected.
*/
"vulnerable_functions": S.NullOr(S.Array(S.String))
}) {}

/**
* The state of the user's acceptance of the credit.
*/
export class RepositoryAdvisoryCreditState extends S.Literal("accepted", "declined", "pending") {}

/**
* A credit given to a user for a repository security advisory.
*/
export class RepositoryAdvisoryCredit extends S.Class<RepositoryAdvisoryCredit>("RepositoryAdvisoryCredit")({
  "user": SimpleUser,
  "type": SecurityAdvisoryCreditTypes,
  /**
* The state of the user's acceptance of the credit.
*/
"state": RepositoryAdvisoryCreditState
}) {}

/**
* A repository security advisory.
*/
export class RepositoryAdvisory extends S.Class<RepositoryAdvisory>("RepositoryAdvisory")({
  /**
* The GitHub Security Advisory ID.
*/
"ghsa_id": S.String,
  /**
* The Common Vulnerabilities and Exposures (CVE) ID.
*/
"cve_id": S.NullOr(S.String),
  /**
* The API URL for the advisory.
*/
"url": S.String,
  /**
* The URL for the advisory.
*/
"html_url": S.String,
  /**
* A short summary of the advisory.
*/
"summary": S.String.pipe(S.maxLength(1024)),
  /**
* A detailed description of what the advisory entails.
*/
"description": S.NullOr(S.String.pipe(S.maxLength(65535))),
  /**
* The severity of the advisory.
*/
"severity": S.NullOr(RepositoryAdvisorySeverity),
  /**
* The author of the advisory.
*/
"author": S.NullOr(SimpleUser),
  /**
* The publisher of the advisory.
*/
"publisher": S.NullOr(SimpleUser),
  "identifiers": S.Array(S.Struct({
  /**
* The type of identifier.
*/
"type": S.Literal("CVE", "GHSA"),
  /**
* The identifier value.
*/
"value": S.String
})),
  /**
* The state of the advisory.
*/
"state": RepositoryAdvisoryState,
  /**
* The date and time of when the advisory was created, in ISO 8601 format.
*/
"created_at": S.NullOr(S.String),
  /**
* The date and time of when the advisory was last updated, in ISO 8601 format.
*/
"updated_at": S.NullOr(S.String),
  /**
* The date and time of when the advisory was published, in ISO 8601 format.
*/
"published_at": S.NullOr(S.String),
  /**
* The date and time of when the advisory was closed, in ISO 8601 format.
*/
"closed_at": S.NullOr(S.String),
  /**
* The date and time of when the advisory was withdrawn, in ISO 8601 format.
*/
"withdrawn_at": S.NullOr(S.String),
  "submission": S.NullOr(S.Struct({
  /**
* Whether a private vulnerability report was accepted by the repository's administrators.
*/
"accepted": S.Boolean
})),
  "vulnerabilities": S.NullOr(S.Array(RepositoryAdvisoryVulnerability)),
  "cvss": S.NullOr(S.Struct({
  /**
* The CVSS vector.
*/
"vector_string": S.NullOr(S.String),
  /**
* The CVSS score.
*/
"score": S.NullOr(S.Number.pipe(S.greaterThanOrEqualTo(0), S.lessThanOrEqualTo(10)))
})),
  "cvss_severities": S.optionalWith(CvssSeverities, { nullable: true }),
  "cwes": S.NullOr(S.Array(S.Struct({
  /**
* The Common Weakness Enumeration (CWE) identifier.
*/
"cwe_id": S.String,
  /**
* The name of the CWE.
*/
"name": S.String
}))),
  /**
* A list of only the CWE IDs.
*/
"cwe_ids": S.NullOr(S.Array(S.String)),
  "credits": S.NullOr(S.Array(S.Struct({
  /**
* The username of the user credited.
*/
"login": S.optionalWith(S.String, { nullable: true }),
  "type": S.optionalWith(SecurityAdvisoryCreditTypes, { nullable: true })
}))),
  "credits_detailed": S.NullOr(S.Array(RepositoryAdvisoryCredit)),
  /**
* A list of users that collaborate on the advisory.
*/
"collaborating_users": S.NullOr(S.Array(SimpleUser)),
  /**
* A list of teams that collaborate on the advisory.
*/
"collaborating_teams": S.NullOr(S.Array(Team)),
  /**
* A temporary private fork of the advisory's repository for collaborating on a fix.
*/
"private_fork": S.NullOr(SimpleRepository)
}) {}

export class SecurityAdvisoriesListOrgRepositoryAdvisories200 extends S.Array(RepositoryAdvisory) {}

export class OrgsListSecurityManagerTeamsParams extends S.Struct({
  
}) {}

export class OrgsListSecurityManagerTeams200 extends S.Array(TeamSimple) {}

export class OrgsAddSecurityManagerTeamParams extends S.Struct({
  
}) {}

export class OrgsRemoveSecurityManagerTeamParams extends S.Struct({
  
}) {}

export class BillingGetGithubActionsBillingOrgParams extends S.Struct({
  
}) {}

export class ActionsBillingUsage extends S.Class<ActionsBillingUsage>("ActionsBillingUsage")({
  /**
* The sum of the free and paid GitHub Actions minutes used.
*/
"total_minutes_used": S.Int,
  /**
* The total paid GitHub Actions minutes used.
*/
"total_paid_minutes_used": S.Int,
  /**
* The amount of free GitHub Actions minutes available.
*/
"included_minutes": S.Int,
  "minutes_used_breakdown": S.Struct({
  /**
* Total minutes used on Ubuntu runner machines.
*/
"UBUNTU": S.optionalWith(S.Int, { nullable: true }),
  /**
* Total minutes used on macOS runner machines.
*/
"MACOS": S.optionalWith(S.Int, { nullable: true }),
  /**
* Total minutes used on Windows runner machines.
*/
"WINDOWS": S.optionalWith(S.Int, { nullable: true }),
  /**
* Total minutes used on Ubuntu 4 core runner machines.
*/
"ubuntu_4_core": S.optionalWith(S.Int, { nullable: true }),
  /**
* Total minutes used on Ubuntu 8 core runner machines.
*/
"ubuntu_8_core": S.optionalWith(S.Int, { nullable: true }),
  /**
* Total minutes used on Ubuntu 16 core runner machines.
*/
"ubuntu_16_core": S.optionalWith(S.Int, { nullable: true }),
  /**
* Total minutes used on Ubuntu 32 core runner machines.
*/
"ubuntu_32_core": S.optionalWith(S.Int, { nullable: true }),
  /**
* Total minutes used on Ubuntu 64 core runner machines.
*/
"ubuntu_64_core": S.optionalWith(S.Int, { nullable: true }),
  /**
* Total minutes used on Windows 4 core runner machines.
*/
"windows_4_core": S.optionalWith(S.Int, { nullable: true }),
  /**
* Total minutes used on Windows 8 core runner machines.
*/
"windows_8_core": S.optionalWith(S.Int, { nullable: true }),
  /**
* Total minutes used on Windows 16 core runner machines.
*/
"windows_16_core": S.optionalWith(S.Int, { nullable: true }),
  /**
* Total minutes used on Windows 32 core runner machines.
*/
"windows_32_core": S.optionalWith(S.Int, { nullable: true }),
  /**
* Total minutes used on Windows 64 core runner machines.
*/
"windows_64_core": S.optionalWith(S.Int, { nullable: true }),
  /**
* Total minutes used on macOS 12 core runner machines.
*/
"macos_12_core": S.optionalWith(S.Int, { nullable: true }),
  /**
* Total minutes used on all runner machines.
*/
"total": S.optionalWith(S.Int, { nullable: true })
})
}) {}

export class BillingGetGithubPackagesBillingOrgParams extends S.Struct({
  
}) {}

export class PackagesBillingUsage extends S.Class<PackagesBillingUsage>("PackagesBillingUsage")({
  /**
* Sum of the free and paid storage space (GB) for GitHuub Packages.
*/
"total_gigabytes_bandwidth_used": S.Int,
  /**
* Total paid storage space (GB) for GitHuub Packages.
*/
"total_paid_gigabytes_bandwidth_used": S.Int,
  /**
* Free storage space (GB) for GitHub Packages.
*/
"included_gigabytes_bandwidth": S.Int
}) {}

export class BillingGetSharedStorageBillingOrgParams extends S.Struct({
  
}) {}

export class CombinedBillingUsage extends S.Class<CombinedBillingUsage>("CombinedBillingUsage")({
  /**
* Numbers of days left in billing cycle.
*/
"days_left_in_billing_cycle": S.Int,
  /**
* Estimated storage space (GB) used in billing cycle.
*/
"estimated_paid_storage_for_month": S.Int,
  /**
* Estimated sum of free and paid storage space (GB) used in billing cycle.
*/
"estimated_storage_for_month": S.Int
}) {}

export class HostedComputeListNetworkConfigurationsForOrgParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* The hosted compute service the network configuration supports.
*/
export class NetworkConfigurationComputeService extends S.Literal("none", "actions", "codespaces") {}

/**
* A hosted compute network configuration.
*/
export class NetworkConfiguration extends S.Class<NetworkConfiguration>("NetworkConfiguration")({
  /**
* The unique identifier of the network configuration.
*/
"id": S.String,
  /**
* The name of the network configuration.
*/
"name": S.String,
  /**
* The hosted compute service the network configuration supports.
*/
"compute_service": S.optionalWith(NetworkConfigurationComputeService, { nullable: true }),
  /**
* The unique identifier of each network settings in the configuration.
*/
"network_settings_ids": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* The time at which the network configuration was created, in ISO 8601 format.
*/
"created_on": S.NullOr(S.String)
}) {}

export class HostedComputeListNetworkConfigurationsForOrg200 extends S.Struct({
  "total_count": S.Int,
  "network_configurations": S.Array(NetworkConfiguration)
}) {}

export class HostedComputeCreateNetworkConfigurationForOrgParams extends S.Struct({
  
}) {}

/**
* The hosted compute service to use for the network configuration.
*/
export class HostedComputeCreateNetworkConfigurationForOrgRequestComputeService extends S.Literal("none", "actions") {}

export class HostedComputeCreateNetworkConfigurationForOrgRequest extends S.Class<HostedComputeCreateNetworkConfigurationForOrgRequest>("HostedComputeCreateNetworkConfigurationForOrgRequest")({
  /**
* Name of the network configuration. Must be between 1 and 100 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'.
*/
"name": S.String,
  /**
* The hosted compute service to use for the network configuration.
*/
"compute_service": S.optionalWith(HostedComputeCreateNetworkConfigurationForOrgRequestComputeService, { nullable: true }),
  /**
* The identifier of the network settings to use for the network configuration. Exactly one network settings must be specified.
*/
"network_settings_ids": S.NonEmptyArray(S.String).pipe(S.minItems(1), S.maxItems(1))
}) {}

export class HostedComputeGetNetworkConfigurationForOrgParams extends S.Struct({
  
}) {}

export class HostedComputeDeleteNetworkConfigurationFromOrgParams extends S.Struct({
  
}) {}

export class HostedComputeUpdateNetworkConfigurationForOrgParams extends S.Struct({
  
}) {}

/**
* The hosted compute service to use for the network configuration.
*/
export class HostedComputeUpdateNetworkConfigurationForOrgRequestComputeService extends S.Literal("none", "actions") {}

export class HostedComputeUpdateNetworkConfigurationForOrgRequest extends S.Class<HostedComputeUpdateNetworkConfigurationForOrgRequest>("HostedComputeUpdateNetworkConfigurationForOrgRequest")({
  /**
* Name of the network configuration. Must be between 1 and 100 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The hosted compute service to use for the network configuration.
*/
"compute_service": S.optionalWith(HostedComputeUpdateNetworkConfigurationForOrgRequestComputeService, { nullable: true }),
  /**
* The identifier of the network settings to use for the network configuration. Exactly one network settings must be specified.
*/
"network_settings_ids": S.optionalWith(S.Array(S.String).pipe(S.maxItems(1)), { nullable: true })
}) {}

export class HostedComputeGetNetworkSettingsForOrgParams extends S.Struct({
  
}) {}

/**
* A hosted compute network settings resource.
*/
export class NetworkSettings extends S.Class<NetworkSettings>("NetworkSettings")({
  /**
* The unique identifier of the network settings resource.
*/
"id": S.String,
  /**
* The identifier of the network configuration that is using this settings resource.
*/
"network_configuration_id": S.optionalWith(S.String, { nullable: true }),
  /**
* The name of the network settings resource.
*/
"name": S.String,
  /**
* The subnet this network settings resource is configured for.
*/
"subnet_id": S.String,
  /**
* The location of the subnet this network settings resource is configured for.
*/
"region": S.String
}) {}

export class CopilotCopilotMetricsForTeamParams extends S.Struct({
  "since": S.optionalWith(S.String, { nullable: true }),
  "until": S.optionalWith(S.String, { nullable: true }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 28 as const })
}) {}

export class CopilotCopilotMetricsForTeam200 extends S.Array(CopilotUsageMetricsDay) {}

export class TeamsListParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class TeamsList200 extends S.Array(Team) {}

export class TeamsCreateParams extends S.Struct({
  
}) {}

/**
* The level of privacy this team should have. The options are:  
* **For a non-nested team:**  
*  * `secret` - only visible to organization owners and members of this team.  
*  * `closed` - visible to all members of this organization.  
* Default: `secret`  
* **For a parent or child team:**  
*  * `closed` - visible to all members of this organization.  
* Default for child team: `closed`
*/
export class TeamsCreateRequestPrivacy extends S.Literal("secret", "closed") {}

/**
* The notification setting the team has chosen. The options are:  
*  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
*  * `notifications_disabled` - no one receives notifications.  
* Default: `notifications_enabled`
*/
export class TeamsCreateRequestNotificationSetting extends S.Literal("notifications_enabled", "notifications_disabled") {}

/**
* **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
*/
export class TeamsCreateRequestPermission extends S.Literal("pull", "push") {}

export class TeamsCreateRequest extends S.Class<TeamsCreateRequest>("TeamsCreateRequest")({
  /**
* The name of the team.
*/
"name": S.String,
  /**
* The description of the team.
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* List GitHub usernames for organization members who will become team maintainers.
*/
"maintainers": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
*/
"repo_names": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* The level of privacy this team should have. The options are:  
* **For a non-nested team:**  
*  * `secret` - only visible to organization owners and members of this team.  
*  * `closed` - visible to all members of this organization.  
* Default: `secret`  
* **For a parent or child team:**  
*  * `closed` - visible to all members of this organization.  
* Default for child team: `closed`
*/
"privacy": S.optionalWith(TeamsCreateRequestPrivacy, { nullable: true }),
  /**
* The notification setting the team has chosen. The options are:  
*  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
*  * `notifications_disabled` - no one receives notifications.  
* Default: `notifications_enabled`
*/
"notification_setting": S.optionalWith(TeamsCreateRequestNotificationSetting, { nullable: true }),
  /**
* **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
*/
"permission": S.optionalWith(TeamsCreateRequestPermission, { nullable: true, default: () => "pull" as const }),
  /**
* The ID of a team to set as the parent team.
*/
"parent_team_id": S.optionalWith(S.Int, { nullable: true })
}) {}

/**
* The level of privacy this team should have
*/
export class TeamFullPrivacy extends S.Literal("closed", "secret") {}

/**
* The notification setting the team has set
*/
export class TeamFullNotificationSetting extends S.Literal("notifications_enabled", "notifications_disabled") {}

/**
* Team Organization
*/
export class TeamOrganization extends S.Class<TeamOrganization>("TeamOrganization")({
  "login": S.String,
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "repos_url": S.String,
  "events_url": S.String,
  "hooks_url": S.String,
  "issues_url": S.String,
  "members_url": S.String,
  "public_members_url": S.String,
  "avatar_url": S.String,
  "description": S.NullOr(S.String),
  "name": S.optionalWith(S.String, { nullable: true }),
  "company": S.optionalWith(S.String, { nullable: true }),
  "blog": S.optionalWith(S.String, { nullable: true }),
  "location": S.optionalWith(S.String, { nullable: true }),
  "email": S.optionalWith(S.String, { nullable: true }),
  "twitter_username": S.optionalWith(S.String, { nullable: true }),
  "is_verified": S.optionalWith(S.Boolean, { nullable: true }),
  "has_organization_projects": S.Boolean,
  "has_repository_projects": S.Boolean,
  "public_repos": S.Int,
  "public_gists": S.Int,
  "followers": S.Int,
  "following": S.Int,
  "html_url": S.String,
  "created_at": S.String,
  "type": S.String,
  "total_private_repos": S.optionalWith(S.Int, { nullable: true }),
  "owned_private_repos": S.optionalWith(S.Int, { nullable: true }),
  "private_gists": S.optionalWith(S.Int, { nullable: true }),
  "disk_usage": S.optionalWith(S.Int, { nullable: true }),
  "collaborators": S.optionalWith(S.Int, { nullable: true }),
  "billing_email": S.optionalWith(S.String, { nullable: true }),
  "plan": S.optionalWith(S.Struct({
  "name": S.String,
  "space": S.Int,
  "private_repos": S.Int,
  "filled_seats": S.optionalWith(S.Int, { nullable: true }),
  "seats": S.optionalWith(S.Int, { nullable: true })
}), { nullable: true }),
  "default_repository_permission": S.optionalWith(S.String, { nullable: true }),
  "members_can_create_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  "two_factor_requirement_enabled": S.optionalWith(S.Boolean, { nullable: true }),
  "members_allowed_repository_creation_type": S.optionalWith(S.String, { nullable: true }),
  "members_can_create_public_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  "members_can_create_private_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  "members_can_create_internal_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  "members_can_create_pages": S.optionalWith(S.Boolean, { nullable: true }),
  "members_can_create_public_pages": S.optionalWith(S.Boolean, { nullable: true }),
  "members_can_create_private_pages": S.optionalWith(S.Boolean, { nullable: true }),
  "members_can_fork_private_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  "web_commit_signoff_required": S.optionalWith(S.Boolean, { nullable: true }),
  "updated_at": S.String,
  "archived_at": S.NullOr(S.String)
}) {}

/**
* Groups of organization members that gives permissions on specified repositories.
*/
export class TeamFull extends S.Class<TeamFull>("TeamFull")({
  /**
* Unique identifier of the team
*/
"id": S.Int,
  "node_id": S.String,
  /**
* URL for the team
*/
"url": S.String,
  "html_url": S.String,
  /**
* Name of the team
*/
"name": S.String,
  "slug": S.String,
  "description": S.NullOr(S.String),
  /**
* The level of privacy this team should have
*/
"privacy": S.optionalWith(TeamFullPrivacy, { nullable: true }),
  /**
* The notification setting the team has set
*/
"notification_setting": S.optionalWith(TeamFullNotificationSetting, { nullable: true }),
  /**
* Permission that the team will have for its repositories
*/
"permission": S.String,
  "members_url": S.String,
  "repositories_url": S.String,
  "parent": S.optionalWith(NullableTeamSimple, { nullable: true }),
  "members_count": S.Int,
  "repos_count": S.Int,
  "created_at": S.String,
  "updated_at": S.String,
  "organization": TeamOrganization,
  /**
* Distinguished Name (DN) that team maps to within LDAP environment
*/
"ldap_dn": S.optionalWith(S.String, { nullable: true })
}) {}

export class TeamsGetByNameParams extends S.Struct({
  
}) {}

export class TeamsDeleteInOrgParams extends S.Struct({
  
}) {}

export class TeamsUpdateInOrgParams extends S.Struct({
  
}) {}

/**
* The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  
* **For a non-nested team:**  
*  * `secret` - only visible to organization owners and members of this team.  
*  * `closed` - visible to all members of this organization.  
* **For a parent or child team:**  
*  * `closed` - visible to all members of this organization.
*/
export class TeamsUpdateInOrgRequestPrivacy extends S.Literal("secret", "closed") {}

/**
* The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
*  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
*  * `notifications_disabled` - no one receives notifications.
*/
export class TeamsUpdateInOrgRequestNotificationSetting extends S.Literal("notifications_enabled", "notifications_disabled") {}

/**
* **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
*/
export class TeamsUpdateInOrgRequestPermission extends S.Literal("pull", "push", "admin") {}

export class TeamsUpdateInOrgRequest extends S.Class<TeamsUpdateInOrgRequest>("TeamsUpdateInOrgRequest")({
  /**
* The name of the team.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The description of the team.
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  
* **For a non-nested team:**  
*  * `secret` - only visible to organization owners and members of this team.  
*  * `closed` - visible to all members of this organization.  
* **For a parent or child team:**  
*  * `closed` - visible to all members of this organization.
*/
"privacy": S.optionalWith(TeamsUpdateInOrgRequestPrivacy, { nullable: true }),
  /**
* The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
*  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
*  * `notifications_disabled` - no one receives notifications.
*/
"notification_setting": S.optionalWith(TeamsUpdateInOrgRequestNotificationSetting, { nullable: true }),
  /**
* **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
*/
"permission": S.optionalWith(TeamsUpdateInOrgRequestPermission, { nullable: true, default: () => "pull" as const }),
  /**
* The ID of a team to set as the parent team.
*/
"parent_team_id": S.optionalWith(S.Int, { nullable: true })
}) {}

export class TeamsListDiscussionsInOrgParamsDirection extends S.Literal("asc", "desc") {}

export class TeamsListDiscussionsInOrgParams extends S.Struct({
  "direction": S.optionalWith(TeamsListDiscussionsInOrgParamsDirection, { nullable: true, default: () => "desc" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "pinned": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* A team discussion is a persistent record of a free-form conversation within a team.
*/
export class TeamDiscussion extends S.Class<TeamDiscussion>("TeamDiscussion")({
  "author": S.NullOr(NullableSimpleUser),
  /**
* The main text of the discussion.
*/
"body": S.String,
  "body_html": S.String,
  /**
* The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
*/
"body_version": S.String,
  "comments_count": S.Int,
  "comments_url": S.String,
  "created_at": S.String,
  "last_edited_at": S.NullOr(S.String),
  "html_url": S.String,
  "node_id": S.String,
  /**
* The unique sequence number of a team discussion.
*/
"number": S.Int,
  /**
* Whether or not this discussion should be pinned for easy retrieval.
*/
"pinned": S.Boolean,
  /**
* Whether or not this discussion should be restricted to team members and organization owners.
*/
"private": S.Boolean,
  "team_url": S.String,
  /**
* The title of the discussion.
*/
"title": S.String,
  "updated_at": S.String,
  "url": S.String,
  "reactions": S.optionalWith(ReactionRollup, { nullable: true })
}) {}

export class TeamsListDiscussionsInOrg200 extends S.Array(TeamDiscussion) {}

export class TeamsCreateDiscussionInOrgParams extends S.Struct({
  
}) {}

export class TeamsCreateDiscussionInOrgRequest extends S.Class<TeamsCreateDiscussionInOrgRequest>("TeamsCreateDiscussionInOrgRequest")({
  /**
* The discussion post's title.
*/
"title": S.String,
  /**
* The discussion post's body text.
*/
"body": S.String,
  /**
* Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
*/
"private": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

export class TeamsGetDiscussionInOrgParams extends S.Struct({
  
}) {}

export class TeamsDeleteDiscussionInOrgParams extends S.Struct({
  
}) {}

export class TeamsUpdateDiscussionInOrgParams extends S.Struct({
  
}) {}

export class TeamsUpdateDiscussionInOrgRequest extends S.Class<TeamsUpdateDiscussionInOrgRequest>("TeamsUpdateDiscussionInOrgRequest")({
  /**
* The discussion post's title.
*/
"title": S.optionalWith(S.String, { nullable: true }),
  /**
* The discussion post's body text.
*/
"body": S.optionalWith(S.String, { nullable: true })
}) {}

export class TeamsListDiscussionCommentsInOrgParamsDirection extends S.Literal("asc", "desc") {}

export class TeamsListDiscussionCommentsInOrgParams extends S.Struct({
  "direction": S.optionalWith(TeamsListDiscussionCommentsInOrgParamsDirection, { nullable: true, default: () => "desc" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* A reply to a discussion within a team.
*/
export class TeamDiscussionComment extends S.Class<TeamDiscussionComment>("TeamDiscussionComment")({
  "author": S.NullOr(NullableSimpleUser),
  /**
* The main text of the comment.
*/
"body": S.String,
  "body_html": S.String,
  /**
* The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
*/
"body_version": S.String,
  "created_at": S.String,
  "last_edited_at": S.NullOr(S.String),
  "discussion_url": S.String,
  "html_url": S.String,
  "node_id": S.String,
  /**
* The unique sequence number of a team discussion comment.
*/
"number": S.Int,
  "updated_at": S.String,
  "url": S.String,
  "reactions": S.optionalWith(ReactionRollup, { nullable: true })
}) {}

export class TeamsListDiscussionCommentsInOrg200 extends S.Array(TeamDiscussionComment) {}

export class TeamsCreateDiscussionCommentInOrgParams extends S.Struct({
  
}) {}

export class TeamsCreateDiscussionCommentInOrgRequest extends S.Class<TeamsCreateDiscussionCommentInOrgRequest>("TeamsCreateDiscussionCommentInOrgRequest")({
  /**
* The discussion comment's body text.
*/
"body": S.String
}) {}

export class TeamsGetDiscussionCommentInOrgParams extends S.Struct({
  
}) {}

export class TeamsDeleteDiscussionCommentInOrgParams extends S.Struct({
  
}) {}

export class TeamsUpdateDiscussionCommentInOrgParams extends S.Struct({
  
}) {}

export class TeamsUpdateDiscussionCommentInOrgRequest extends S.Class<TeamsUpdateDiscussionCommentInOrgRequest>("TeamsUpdateDiscussionCommentInOrgRequest")({
  /**
* The discussion comment's body text.
*/
"body": S.String
}) {}

export class ReactionsListForTeamDiscussionCommentInOrgParamsContent extends S.Literal("+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes") {}

export class ReactionsListForTeamDiscussionCommentInOrgParams extends S.Struct({
  "content": S.optionalWith(ReactionsListForTeamDiscussionCommentInOrgParamsContent, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* The reaction to use
*/
export class ReactionContent extends S.Literal("+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes") {}

/**
* Reactions to conversations provide a way to help people express their feelings more simply and effectively.
*/
export class Reaction extends S.Class<Reaction>("Reaction")({
  "id": S.Int,
  "node_id": S.String,
  "user": S.NullOr(NullableSimpleUser),
  /**
* The reaction to use
*/
"content": ReactionContent,
  "created_at": S.String
}) {}

export class ReactionsListForTeamDiscussionCommentInOrg200 extends S.Array(Reaction) {}

export class ReactionsCreateForTeamDiscussionCommentInOrgParams extends S.Struct({
  
}) {}

/**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment.
*/
export class ReactionsCreateForTeamDiscussionCommentInOrgRequestContent extends S.Literal("+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes") {}

export class ReactionsCreateForTeamDiscussionCommentInOrgRequest extends S.Class<ReactionsCreateForTeamDiscussionCommentInOrgRequest>("ReactionsCreateForTeamDiscussionCommentInOrgRequest")({
  /**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment.
*/
"content": ReactionsCreateForTeamDiscussionCommentInOrgRequestContent
}) {}

export class ReactionsDeleteForTeamDiscussionCommentParams extends S.Struct({
  
}) {}

export class ReactionsListForTeamDiscussionInOrgParamsContent extends S.Literal("+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes") {}

export class ReactionsListForTeamDiscussionInOrgParams extends S.Struct({
  "content": S.optionalWith(ReactionsListForTeamDiscussionInOrgParamsContent, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReactionsListForTeamDiscussionInOrg200 extends S.Array(Reaction) {}

export class ReactionsCreateForTeamDiscussionInOrgParams extends S.Struct({
  
}) {}

/**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion.
*/
export class ReactionsCreateForTeamDiscussionInOrgRequestContent extends S.Literal("+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes") {}

export class ReactionsCreateForTeamDiscussionInOrgRequest extends S.Class<ReactionsCreateForTeamDiscussionInOrgRequest>("ReactionsCreateForTeamDiscussionInOrgRequest")({
  /**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion.
*/
"content": ReactionsCreateForTeamDiscussionInOrgRequestContent
}) {}

export class ReactionsDeleteForTeamDiscussionParams extends S.Struct({
  
}) {}

export class TeamsListPendingInvitationsInOrgParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class TeamsListPendingInvitationsInOrg200 extends S.Array(OrganizationInvitation) {}

export class TeamsListMembersInOrgParamsRole extends S.Literal("member", "maintainer", "all") {}

export class TeamsListMembersInOrgParams extends S.Struct({
  "role": S.optionalWith(TeamsListMembersInOrgParamsRole, { nullable: true, default: () => "all" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class TeamsListMembersInOrg200 extends S.Array(SimpleUser) {}

export class TeamsGetMembershipForUserInOrgParams extends S.Struct({
  
}) {}

/**
* The role of the user in the team.
*/
export class TeamMembershipRole extends S.Literal("member", "maintainer") {}

/**
* The state of the user's membership in the team.
*/
export class TeamMembershipState extends S.Literal("active", "pending") {}

/**
* Team Membership
*/
export class TeamMembership extends S.Class<TeamMembership>("TeamMembership")({
  "url": S.String,
  /**
* The role of the user in the team.
*/
"role": TeamMembershipRole.pipe(S.propertySignature, S.withConstructorDefault(() => "member" as const)),
  /**
* The state of the user's membership in the team.
*/
"state": TeamMembershipState
}) {}

export class TeamsAddOrUpdateMembershipForUserInOrgParams extends S.Struct({
  
}) {}

/**
* The role that this user should have in the team.
*/
export class TeamsAddOrUpdateMembershipForUserInOrgRequestRole extends S.Literal("member", "maintainer") {}

export class TeamsAddOrUpdateMembershipForUserInOrgRequest extends S.Class<TeamsAddOrUpdateMembershipForUserInOrgRequest>("TeamsAddOrUpdateMembershipForUserInOrgRequest")({
  /**
* The role that this user should have in the team.
*/
"role": S.optionalWith(TeamsAddOrUpdateMembershipForUserInOrgRequestRole, { nullable: true, default: () => "member" as const })
}) {}

export class TeamsRemoveMembershipForUserInOrgParams extends S.Struct({
  
}) {}

export class TeamsListProjectsInOrgParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* A team's access to a project.
*/
export class TeamProject extends S.Class<TeamProject>("TeamProject")({
  "owner_url": S.String,
  "url": S.String,
  "html_url": S.String,
  "columns_url": S.String,
  "id": S.Int,
  "node_id": S.String,
  "name": S.String,
  "body": S.NullOr(S.String),
  "number": S.Int,
  "state": S.String,
  "creator": SimpleUser,
  "created_at": S.String,
  "updated_at": S.String,
  /**
* The organization permission for this project. Only present when owner is an organization.
*/
"organization_permission": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether the project is private or not. Only present when owner is an organization.
*/
"private": S.optionalWith(S.Boolean, { nullable: true }),
  "permissions": S.Struct({
  "read": S.Boolean,
  "write": S.Boolean,
  "admin": S.Boolean
})
}) {}

export class TeamsListProjectsInOrg200 extends S.Array(TeamProject) {}

export class TeamsCheckPermissionsForProjectInOrgParams extends S.Struct({
  
}) {}

export class TeamsAddOrUpdateProjectPermissionsInOrgParams extends S.Struct({
  
}) {}

/**
* The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
export class TeamsAddOrUpdateProjectPermissionsInOrgRequestPermission extends S.Literal("read", "write", "admin") {}

export class TeamsAddOrUpdateProjectPermissionsInOrgRequest extends S.Class<TeamsAddOrUpdateProjectPermissionsInOrgRequest>("TeamsAddOrUpdateProjectPermissionsInOrgRequest")({
  /**
* The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
"permission": S.optionalWith(TeamsAddOrUpdateProjectPermissionsInOrgRequestPermission, { nullable: true })
}) {}

export class TeamsAddOrUpdateProjectPermissionsInOrg403 extends S.Struct({
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class TeamsRemoveProjectInOrgParams extends S.Struct({
  
}) {}

export class TeamsListReposInOrgParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class TeamsListReposInOrg200 extends S.Array(MinimalRepository) {}

export class TeamsCheckPermissionsForRepoInOrgParams extends S.Struct({
  
}) {}

/**
* A team's access to a repository.
*/
export class TeamRepository extends S.Class<TeamRepository>("TeamRepository")({
  /**
* Unique identifier of the repository
*/
"id": S.Int,
  "node_id": S.String,
  /**
* The name of the repository.
*/
"name": S.String,
  "full_name": S.String,
  "license": S.NullOr(NullableLicenseSimple),
  "forks": S.Int,
  "permissions": S.optionalWith(S.Struct({
  "admin": S.Boolean,
  "pull": S.Boolean,
  "triage": S.optionalWith(S.Boolean, { nullable: true }),
  "push": S.Boolean,
  "maintain": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  "role_name": S.optionalWith(S.String, { nullable: true }),
  "owner": S.NullOr(NullableSimpleUser),
  /**
* Whether the repository is private or public.
*/
"private": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => false as const)),
  "html_url": S.String,
  "description": S.NullOr(S.String),
  "fork": S.Boolean,
  "url": S.String,
  "archive_url": S.String,
  "assignees_url": S.String,
  "blobs_url": S.String,
  "branches_url": S.String,
  "collaborators_url": S.String,
  "comments_url": S.String,
  "commits_url": S.String,
  "compare_url": S.String,
  "contents_url": S.String,
  "contributors_url": S.String,
  "deployments_url": S.String,
  "downloads_url": S.String,
  "events_url": S.String,
  "forks_url": S.String,
  "git_commits_url": S.String,
  "git_refs_url": S.String,
  "git_tags_url": S.String,
  "git_url": S.String,
  "issue_comment_url": S.String,
  "issue_events_url": S.String,
  "issues_url": S.String,
  "keys_url": S.String,
  "labels_url": S.String,
  "languages_url": S.String,
  "merges_url": S.String,
  "milestones_url": S.String,
  "notifications_url": S.String,
  "pulls_url": S.String,
  "releases_url": S.String,
  "ssh_url": S.String,
  "stargazers_url": S.String,
  "statuses_url": S.String,
  "subscribers_url": S.String,
  "subscription_url": S.String,
  "tags_url": S.String,
  "teams_url": S.String,
  "trees_url": S.String,
  "clone_url": S.String,
  "mirror_url": S.NullOr(S.String),
  "hooks_url": S.String,
  "svn_url": S.String,
  "homepage": S.NullOr(S.String),
  "language": S.NullOr(S.String),
  "forks_count": S.Int,
  "stargazers_count": S.Int,
  "watchers_count": S.Int,
  "size": S.Int,
  /**
* The default branch of the repository.
*/
"default_branch": S.String,
  "open_issues_count": S.Int,
  /**
* Whether this repository acts as a template that can be used to generate new repositories.
*/
"is_template": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "topics": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* Whether issues are enabled.
*/
"has_issues": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => true as const)),
  /**
* Whether projects are enabled.
*/
"has_projects": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => true as const)),
  /**
* Whether the wiki is enabled.
*/
"has_wiki": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => true as const)),
  "has_pages": S.Boolean,
  /**
* Whether downloads are enabled.
*/
"has_downloads": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => true as const)),
  /**
* Whether the repository is archived.
*/
"archived": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => false as const)),
  /**
* Returns whether or not this repository disabled.
*/
"disabled": S.Boolean,
  /**
* The repository visibility: public, private, or internal.
*/
"visibility": S.optionalWith(S.String, { nullable: true, default: () => "public" as const }),
  "pushed_at": S.NullOr(S.String),
  "created_at": S.NullOr(S.String),
  "updated_at": S.NullOr(S.String),
  /**
* Whether to allow rebase merges for pull requests.
*/
"allow_rebase_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "temp_clone_token": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether to allow squash merges for pull requests.
*/
"allow_squash_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Whether to allow Auto-merge to be used on pull requests.
*/
"allow_auto_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Whether to delete head branches when pull requests are merged
*/
"delete_branch_on_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Whether to allow merge commits for pull requests.
*/
"allow_merge_commit": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Whether to allow forking this repo
*/
"allow_forking": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Whether to require contributors to sign off on web-based commits
*/
"web_commit_signoff_required": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "subscribers_count": S.optionalWith(S.Int, { nullable: true }),
  "network_count": S.optionalWith(S.Int, { nullable: true }),
  "open_issues": S.Int,
  "watchers": S.Int,
  "master_branch": S.optionalWith(S.String, { nullable: true })
}) {}

export class TeamsAddOrUpdateRepoPermissionsInOrgParams extends S.Struct({
  
}) {}

export class TeamsAddOrUpdateRepoPermissionsInOrgRequest extends S.Class<TeamsAddOrUpdateRepoPermissionsInOrgRequest>("TeamsAddOrUpdateRepoPermissionsInOrgRequest")({
  /**
* The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
*/
"permission": S.optionalWith(S.String, { nullable: true })
}) {}

export class TeamsRemoveRepoInOrgParams extends S.Struct({
  
}) {}

export class TeamsListChildInOrgParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class TeamsListChildInOrg200 extends S.Array(Team) {}

export class OrgsEnableOrDisableSecurityProductOnAllOrgReposParams extends S.Struct({
  
}) {}

/**
* CodeQL query suite to be used. If you specify the `query_suite` parameter, the default setup will be configured with this query suite only on all repositories that didn't have default setup already configured. It will not change the query suite on repositories that already have default setup configured.
* If you don't specify any `query_suite` in your request, the preferred query suite of the organization will be applied.
*/
export class OrgsEnableOrDisableSecurityProductOnAllOrgReposRequestQuerySuite extends S.Literal("default", "extended") {}

export class OrgsEnableOrDisableSecurityProductOnAllOrgReposRequest extends S.Class<OrgsEnableOrDisableSecurityProductOnAllOrgReposRequest>("OrgsEnableOrDisableSecurityProductOnAllOrgReposRequest")({
  /**
* CodeQL query suite to be used. If you specify the `query_suite` parameter, the default setup will be configured with this query suite only on all repositories that didn't have default setup already configured. It will not change the query suite on repositories that already have default setup configured.
* If you don't specify any `query_suite` in your request, the preferred query suite of the organization will be applied.
*/
"query_suite": S.optionalWith(OrgsEnableOrDisableSecurityProductOnAllOrgReposRequestQuerySuite, { nullable: true })
}) {}

export class ProjectsClassicGetCardParams extends S.Struct({
  
}) {}

/**
* Project cards represent a scope of work.
*/
export class ProjectCard extends S.Class<ProjectCard>("ProjectCard")({
  "url": S.String,
  /**
* The project card's ID
*/
"id": S.Int,
  "node_id": S.String,
  "note": S.NullOr(S.String),
  "creator": S.NullOr(NullableSimpleUser),
  "created_at": S.String,
  "updated_at": S.String,
  /**
* Whether or not the card is archived
*/
"archived": S.optionalWith(S.Boolean, { nullable: true }),
  "column_name": S.optionalWith(S.String, { nullable: true }),
  "project_id": S.optionalWith(S.String, { nullable: true }),
  "column_url": S.String,
  "content_url": S.optionalWith(S.String, { nullable: true }),
  "project_url": S.String
}) {}

export class ProjectsClassicDeleteCardParams extends S.Struct({
  
}) {}

export class ProjectsClassicDeleteCard403 extends S.Struct({
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true }),
  "errors": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class ProjectsClassicUpdateCardParams extends S.Struct({
  
}) {}

export class ProjectsClassicUpdateCardRequest extends S.Class<ProjectsClassicUpdateCardRequest>("ProjectsClassicUpdateCardRequest")({
  /**
* The project card's note
*/
"note": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether or not the card is archived
*/
"archived": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class ProjectsClassicMoveCardParams extends S.Struct({
  
}) {}

export class ProjectsClassicMoveCardRequest extends S.Class<ProjectsClassicMoveCardRequest>("ProjectsClassicMoveCardRequest")({
  /**
* The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
*/
"position": S.String.pipe(S.pattern(new RegExp("^(?:top|bottom|after:\\d+)$"))),
  /**
* The unique identifier of the column the card should be moved to
*/
"column_id": S.optionalWith(S.Int, { nullable: true })
}) {}

export class ProjectsClassicMoveCard201 extends S.Struct({
  
}) {}

export class ProjectsClassicMoveCard403 extends S.Struct({
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true }),
  "errors": S.optionalWith(S.Array(S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "resource": S.optionalWith(S.String, { nullable: true }),
  "field": S.optionalWith(S.String, { nullable: true })
})), { nullable: true })
}) {}

export class ProjectsClassicMoveCard503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true }),
  "errors": S.optionalWith(S.Array(S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true })
})), { nullable: true })
}) {}

export class ProjectsClassicGetColumnParams extends S.Struct({
  
}) {}

/**
* Project columns contain cards of work.
*/
export class ProjectColumn extends S.Class<ProjectColumn>("ProjectColumn")({
  "url": S.String,
  "project_url": S.String,
  "cards_url": S.String,
  /**
* The unique identifier of the project column
*/
"id": S.Int,
  "node_id": S.String,
  /**
* Name of the project column
*/
"name": S.String,
  "created_at": S.String,
  "updated_at": S.String
}) {}

export class ProjectsClassicDeleteColumnParams extends S.Struct({
  
}) {}

export class ProjectsClassicUpdateColumnParams extends S.Struct({
  
}) {}

export class ProjectsClassicUpdateColumnRequest extends S.Class<ProjectsClassicUpdateColumnRequest>("ProjectsClassicUpdateColumnRequest")({
  /**
* Name of the project column
*/
"name": S.String
}) {}

export class ProjectsClassicListCardsParamsArchivedState extends S.Literal("all", "archived", "not_archived") {}

export class ProjectsClassicListCardsParams extends S.Struct({
  "archived_state": S.optionalWith(ProjectsClassicListCardsParamsArchivedState, { nullable: true, default: () => "not_archived" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ProjectsClassicListCards200 extends S.Array(ProjectCard) {}

export class ProjectsClassicCreateCardParams extends S.Struct({
  
}) {}

export class ProjectsClassicCreateCardRequest extends S.Union(S.Struct({
  /**
* The project card's note
*/
"note": S.NullOr(S.String)
}),
S.Struct({
  /**
* The unique identifier of the content associated with the card
*/
"content_id": S.Int,
  /**
* The piece of content associated with the card
*/
"content_type": S.String
})) {}

export class ProjectsClassicCreateCard422 extends S.Union(ValidationError,
ValidationErrorSimple) {}

export class ProjectsClassicCreateCard503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true }),
  "errors": S.optionalWith(S.Array(S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true })
})), { nullable: true })
}) {}

export class ProjectsClassicMoveColumnParams extends S.Struct({
  
}) {}

export class ProjectsClassicMoveColumnRequest extends S.Class<ProjectsClassicMoveColumnRequest>("ProjectsClassicMoveColumnRequest")({
  /**
* The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
*/
"position": S.String.pipe(S.pattern(new RegExp("^(?:first|last|after:\\d+)$")))
}) {}

export class ProjectsClassicMoveColumn201 extends S.Struct({
  
}) {}

export class ProjectsClassicGetParams extends S.Struct({
  
}) {}

export class ProjectsClassicDeleteParams extends S.Struct({
  
}) {}

export class ProjectsClassicDelete403 extends S.Struct({
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true }),
  "errors": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class ProjectsClassicUpdateParams extends S.Struct({
  
}) {}

/**
* The baseline permission that all organization members have on this project
*/
export class ProjectsClassicUpdateRequestOrganizationPermission extends S.Literal("read", "write", "admin", "none") {}

export class ProjectsClassicUpdateRequest extends S.Class<ProjectsClassicUpdateRequest>("ProjectsClassicUpdateRequest")({
  /**
* Name of the project
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* Body of the project
*/
"body": S.optionalWith(S.String, { nullable: true }),
  /**
* State of the project; either 'open' or 'closed'
*/
"state": S.optionalWith(S.String, { nullable: true }),
  /**
* The baseline permission that all organization members have on this project
*/
"organization_permission": S.optionalWith(ProjectsClassicUpdateRequestOrganizationPermission, { nullable: true }),
  /**
* Whether or not this project can be seen by everyone.
*/
"private": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class ProjectsClassicUpdate403 extends S.Struct({
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true }),
  "errors": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class ProjectsClassicListCollaboratorsParamsAffiliation extends S.Literal("outside", "direct", "all") {}

export class ProjectsClassicListCollaboratorsParams extends S.Struct({
  "affiliation": S.optionalWith(ProjectsClassicListCollaboratorsParamsAffiliation, { nullable: true, default: () => "all" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ProjectsClassicListCollaborators200 extends S.Array(SimpleUser) {}

export class ProjectsClassicAddCollaboratorParams extends S.Struct({
  
}) {}

/**
* The permission to grant the collaborator.
*/
export class ProjectsClassicAddCollaboratorRequestPermission extends S.Literal("read", "write", "admin") {}

export class ProjectsClassicAddCollaboratorRequest extends S.Class<ProjectsClassicAddCollaboratorRequest>("ProjectsClassicAddCollaboratorRequest")({
  /**
* The permission to grant the collaborator.
*/
"permission": S.optionalWith(ProjectsClassicAddCollaboratorRequestPermission, { nullable: true, default: () => "write" as const })
}) {}

export class ProjectsClassicRemoveCollaboratorParams extends S.Struct({
  
}) {}

export class ProjectsClassicGetPermissionForUserParams extends S.Struct({
  
}) {}

/**
* Project Collaborator Permission
*/
export class ProjectCollaboratorPermission extends S.Class<ProjectCollaboratorPermission>("ProjectCollaboratorPermission")({
  "permission": S.String,
  "user": S.NullOr(NullableSimpleUser)
}) {}

export class ProjectsClassicListColumnsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ProjectsClassicListColumns200 extends S.Array(ProjectColumn) {}

export class ProjectsClassicCreateColumnParams extends S.Struct({
  
}) {}

export class ProjectsClassicCreateColumnRequest extends S.Class<ProjectsClassicCreateColumnRequest>("ProjectsClassicCreateColumnRequest")({
  /**
* Name of the project column
*/
"name": S.String
}) {}

export class RateLimit extends S.Class<RateLimit>("RateLimit")({
  "limit": S.Int,
  "remaining": S.Int,
  "reset": S.Int,
  "used": S.Int
}) {}

/**
* Rate Limit Overview
*/
export class RateLimitOverview extends S.Class<RateLimitOverview>("RateLimitOverview")({
  "resources": S.Struct({
  "core": RateLimit,
  "graphql": S.optionalWith(RateLimit, { nullable: true }),
  "search": RateLimit,
  "code_search": S.optionalWith(RateLimit, { nullable: true }),
  "source_import": S.optionalWith(RateLimit, { nullable: true }),
  "integration_manifest": S.optionalWith(RateLimit, { nullable: true }),
  "code_scanning_upload": S.optionalWith(RateLimit, { nullable: true }),
  "actions_runner_registration": S.optionalWith(RateLimit, { nullable: true }),
  "scim": S.optionalWith(RateLimit, { nullable: true }),
  "dependency_snapshots": S.optionalWith(RateLimit, { nullable: true }),
  "dependency_sbom": S.optionalWith(RateLimit, { nullable: true }),
  "code_scanning_autofix": S.optionalWith(RateLimit, { nullable: true })
}),
  "rate": RateLimit
}) {}

export class ReposGetParams extends S.Struct({
  
}) {}

export class ReposDeleteParams extends S.Struct({
  
}) {}

export class ReposDelete403 extends S.Struct({
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposUpdateParams extends S.Struct({
  
}) {}

/**
* The visibility of the repository.
*/
export class ReposUpdateRequestVisibility extends S.Literal("public", "private") {}

/**
* Required when using `squash_merge_commit_message`.
* 
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
export class ReposUpdateRequestSquashMergeCommitTitle extends S.Literal("PR_TITLE", "COMMIT_OR_PR_TITLE") {}

/**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
export class ReposUpdateRequestSquashMergeCommitMessage extends S.Literal("PR_BODY", "COMMIT_MESSAGES", "BLANK") {}

/**
* Required when using `merge_commit_message`.
* 
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
export class ReposUpdateRequestMergeCommitTitle extends S.Literal("PR_TITLE", "MERGE_MESSAGE") {}

/**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
export class ReposUpdateRequestMergeCommitMessage extends S.Literal("PR_BODY", "PR_TITLE", "BLANK") {}

export class ReposUpdateRequest extends S.Class<ReposUpdateRequest>("ReposUpdateRequest")({
  /**
* The name of the repository.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* A short description of the repository.
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* A URL with more information about the repository.
*/
"homepage": S.optionalWith(S.String, { nullable: true }),
  /**
* Either `true` to make the repository private or `false` to make it public. Default: `false`.  
* **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
*/
"private": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* The visibility of the repository.
*/
"visibility": S.optionalWith(ReposUpdateRequestVisibility, { nullable: true }),
  /**
* Specify which security and analysis features to enable or disable for the repository.
* 
* To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:
* `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.
* 
* You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
*/
"security_and_analysis": S.optionalWith(S.Struct({
  /**
* Use the `status` property to enable or disable GitHub Advanced Security for this repository.
* For more information, see "[About GitHub Advanced
* Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."
* 
* For standalone Code Scanning or Secret Protection products, this parameter cannot be used.
*/
"advanced_security": S.optionalWith(S.Struct({
  /**
* Can be `enabled` or `disabled`.
*/
"status": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  /**
* Use the `status` property to enable or disable GitHub Code Security for this repository.
*/
"code_security": S.optionalWith(S.Struct({
  /**
* Can be `enabled` or `disabled`.
*/
"status": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  /**
* Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."
*/
"secret_scanning": S.optionalWith(S.Struct({
  /**
* Can be `enabled` or `disabled`.
*/
"status": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  /**
* Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)."
*/
"secret_scanning_push_protection": S.optionalWith(S.Struct({
  /**
* Can be `enabled` or `disabled`.
*/
"status": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  /**
* Use the `status` property to enable or disable secret scanning AI detection for this repository. For more information, see "[Responsible detection of generic secrets with AI](https://docs.github.com/code-security/secret-scanning/using-advanced-secret-scanning-and-push-protection-features/generic-secret-detection/responsible-ai-generic-secrets)."
*/
"secret_scanning_ai_detection": S.optionalWith(S.Struct({
  /**
* Can be `enabled` or `disabled`.
*/
"status": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  /**
* Use the `status` property to enable or disable secret scanning non-provider patterns for this repository. For more information, see "[Supported secret scanning patterns](/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
*/
"secret_scanning_non_provider_patterns": S.optionalWith(S.Struct({
  /**
* Can be `enabled` or `disabled`.
*/
"status": S.optionalWith(S.String, { nullable: true })
}), { nullable: true })
}), { nullable: true }),
  /**
* Either `true` to enable issues for this repository or `false` to disable them.
*/
"has_issues": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
*/
"has_projects": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Either `true` to enable the wiki for this repository or `false` to disable it.
*/
"has_wiki": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Either `true` to make this repo available as a template repository or `false` to prevent it.
*/
"is_template": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Updates the default branch for this repository.
*/
"default_branch": S.optionalWith(S.String, { nullable: true }),
  /**
* Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
*/
"allow_squash_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
*/
"allow_merge_commit": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
*/
"allow_rebase_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
*/
"allow_auto_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
*/
"delete_branch_on_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
*/
"allow_update_branch": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.
*/
"use_squash_pr_title_as_default": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Required when using `squash_merge_commit_message`.
* 
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
"squash_merge_commit_title": S.optionalWith(ReposUpdateRequestSquashMergeCommitTitle, { nullable: true }),
  /**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
"squash_merge_commit_message": S.optionalWith(ReposUpdateRequestSquashMergeCommitMessage, { nullable: true }),
  /**
* Required when using `merge_commit_message`.
* 
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
"merge_commit_title": S.optionalWith(ReposUpdateRequestMergeCommitTitle, { nullable: true }),
  /**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
"merge_commit_message": S.optionalWith(ReposUpdateRequestMergeCommitMessage, { nullable: true }),
  /**
* Whether to archive this repository. `false` will unarchive a previously archived repository.
*/
"archived": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Either `true` to allow private forks, or `false` to prevent private forks.
*/
"allow_forking": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.
*/
"web_commit_signoff_required": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

export class ActionsListArtifactsForRepoParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "name": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* An artifact
*/
export class Artifact extends S.Class<Artifact>("Artifact")({
  "id": S.Int,
  "node_id": S.String,
  /**
* The name of the artifact.
*/
"name": S.String,
  /**
* The size in bytes of the artifact.
*/
"size_in_bytes": S.Int,
  "url": S.String,
  "archive_download_url": S.String,
  /**
* Whether or not the artifact has expired.
*/
"expired": S.Boolean,
  "created_at": S.NullOr(S.String),
  "expires_at": S.NullOr(S.String),
  "updated_at": S.NullOr(S.String),
  /**
* The SHA256 digest of the artifact. This field will only be populated on artifacts uploaded with upload-artifact v4 or newer. For older versions, this field will be null.
*/
"digest": S.optionalWith(S.String, { nullable: true }),
  "workflow_run": S.optionalWith(S.Struct({
  "id": S.optionalWith(S.Int, { nullable: true }),
  "repository_id": S.optionalWith(S.Int, { nullable: true }),
  "head_repository_id": S.optionalWith(S.Int, { nullable: true }),
  "head_branch": S.optionalWith(S.String, { nullable: true }),
  "head_sha": S.optionalWith(S.String, { nullable: true })
}), { nullable: true })
}) {}

export class ActionsListArtifactsForRepo200 extends S.Struct({
  "total_count": S.Int,
  "artifacts": S.Array(Artifact)
}) {}

export class ActionsGetArtifactParams extends S.Struct({
  
}) {}

export class ActionsDeleteArtifactParams extends S.Struct({
  
}) {}

export class ActionsDownloadArtifactParams extends S.Struct({
  
}) {}

export class ActionsGetActionsCacheUsageParams extends S.Struct({
  
}) {}

export class ActionsGetActionsCacheListParamsSort extends S.Literal("created_at", "last_accessed_at", "size_in_bytes") {}

export class ActionsGetActionsCacheListParamsDirection extends S.Literal("asc", "desc") {}

export class ActionsGetActionsCacheListParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "ref": S.optionalWith(S.String, { nullable: true }),
  "key": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(ActionsGetActionsCacheListParamsSort, { nullable: true, default: () => "last_accessed_at" as const }),
  "direction": S.optionalWith(ActionsGetActionsCacheListParamsDirection, { nullable: true, default: () => "desc" as const })
}) {}

/**
* Repository actions caches
*/
export class ActionsCacheList extends S.Class<ActionsCacheList>("ActionsCacheList")({
  /**
* Total number of caches
*/
"total_count": S.Int,
  /**
* Array of caches
*/
"actions_caches": S.Array(S.Struct({
  "id": S.optionalWith(S.Int, { nullable: true }),
  "ref": S.optionalWith(S.String, { nullable: true }),
  "key": S.optionalWith(S.String, { nullable: true }),
  "version": S.optionalWith(S.String, { nullable: true }),
  "last_accessed_at": S.optionalWith(S.String, { nullable: true }),
  "created_at": S.optionalWith(S.String, { nullable: true }),
  "size_in_bytes": S.optionalWith(S.Int, { nullable: true })
}))
}) {}

export class ActionsDeleteActionsCacheByKeyParams extends S.Struct({
  "key": S.String,
  "ref": S.optionalWith(S.String, { nullable: true })
}) {}

export class ActionsDeleteActionsCacheByIdParams extends S.Struct({
  
}) {}

export class ActionsGetJobForWorkflowRunParams extends S.Struct({
  
}) {}

/**
* The phase of the lifecycle that the job is currently in.
*/
export class JobStatus extends S.Literal("queued", "in_progress", "completed", "waiting", "requested", "pending") {}

/**
* The outcome of the job.
*/
export class JobConclusion extends S.Literal("success", "failure", "neutral", "cancelled", "skipped", "timed_out", "action_required") {}

/**
* Information of a job execution in a workflow run
*/
export class Job extends S.Class<Job>("Job")({
  /**
* The id of the job.
*/
"id": S.Int,
  /**
* The id of the associated workflow run.
*/
"run_id": S.Int,
  "run_url": S.String,
  /**
* Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
*/
"run_attempt": S.optionalWith(S.Int, { nullable: true }),
  "node_id": S.String,
  /**
* The SHA of the commit that is being run.
*/
"head_sha": S.String,
  "url": S.String,
  "html_url": S.NullOr(S.String),
  /**
* The phase of the lifecycle that the job is currently in.
*/
"status": JobStatus,
  /**
* The outcome of the job.
*/
"conclusion": S.NullOr(JobConclusion),
  /**
* The time that the job created, in ISO 8601 format.
*/
"created_at": S.String,
  /**
* The time that the job started, in ISO 8601 format.
*/
"started_at": S.String,
  /**
* The time that the job finished, in ISO 8601 format.
*/
"completed_at": S.NullOr(S.String),
  /**
* The name of the job.
*/
"name": S.String,
  /**
* Steps in this job.
*/
"steps": S.optionalWith(S.Array(S.Struct({
  /**
* The phase of the lifecycle that the job is currently in.
*/
"status": S.Literal("queued", "in_progress", "completed"),
  /**
* The outcome of the job.
*/
"conclusion": S.NullOr(S.String),
  /**
* The name of the job.
*/
"name": S.String,
  "number": S.Int,
  /**
* The time that the step started, in ISO 8601 format.
*/
"started_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The time that the job finished, in ISO 8601 format.
*/
"completed_at": S.optionalWith(S.String, { nullable: true })
})), { nullable: true }),
  "check_run_url": S.String,
  /**
* Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file.
*/
"labels": S.Array(S.String),
  /**
* The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
*/
"runner_id": S.NullOr(S.Int),
  /**
* The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
*/
"runner_name": S.NullOr(S.String),
  /**
* The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
*/
"runner_group_id": S.NullOr(S.Int),
  /**
* The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
*/
"runner_group_name": S.NullOr(S.String),
  /**
* The name of the workflow.
*/
"workflow_name": S.NullOr(S.String),
  /**
* The name of the current branch.
*/
"head_branch": S.NullOr(S.String)
}) {}

export class ActionsDownloadJobLogsForWorkflowRunParams extends S.Struct({
  
}) {}

export class ActionsReRunJobForWorkflowRunParams extends S.Struct({
  
}) {}

export class ActionsReRunJobForWorkflowRunRequest extends S.Class<ActionsReRunJobForWorkflowRunRequest>("ActionsReRunJobForWorkflowRunRequest")({
  /**
* Whether to enable debug logging for the re-run.
*/
"enable_debug_logging": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

export class ActionsGetCustomOidcSubClaimForRepoParams extends S.Struct({
  
}) {}

/**
* Actions OIDC subject customization for a repository
*/
export class OidcCustomSubRepo extends S.Class<OidcCustomSubRepo>("OidcCustomSubRepo")({
  /**
* Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.
*/
"use_default": S.Boolean,
  /**
* Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
*/
"include_claim_keys": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class ActionsSetCustomOidcSubClaimForRepoParams extends S.Struct({
  
}) {}

/**
* Actions OIDC subject customization for a repository
*/
export class ActionsSetCustomOidcSubClaimForRepoRequest extends S.Class<ActionsSetCustomOidcSubClaimForRepoRequest>("ActionsSetCustomOidcSubClaimForRepoRequest")({
  /**
* Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.
*/
"use_default": S.Boolean,
  /**
* Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
*/
"include_claim_keys": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class ActionsListRepoOrganizationSecretsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Set secrets for GitHub Actions.
*/
export class ActionsSecret extends S.Class<ActionsSecret>("ActionsSecret")({
  /**
* The name of the secret.
*/
"name": S.String,
  "created_at": S.String,
  "updated_at": S.String
}) {}

export class ActionsListRepoOrganizationSecrets200 extends S.Struct({
  "total_count": S.Int,
  "secrets": S.Array(ActionsSecret)
}) {}

export class ActionsListRepoOrganizationVariablesParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 10 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActionsVariable extends S.Class<ActionsVariable>("ActionsVariable")({
  /**
* The name of the variable.
*/
"name": S.String,
  /**
* The value of the variable.
*/
"value": S.String,
  /**
* The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
"created_at": S.String,
  /**
* The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
"updated_at": S.String
}) {}

export class ActionsListRepoOrganizationVariables200 extends S.Struct({
  "total_count": S.Int,
  "variables": S.Array(ActionsVariable)
}) {}

export class ActionsGetGithubActionsPermissionsRepositoryParams extends S.Struct({
  
}) {}

/**
* Whether GitHub Actions is enabled on the repository.
*/
export class ActionsEnabled extends S.Boolean {}

export class ActionsRepositoryPermissions extends S.Class<ActionsRepositoryPermissions>("ActionsRepositoryPermissions")({
  "enabled": ActionsEnabled,
  "allowed_actions": S.optionalWith(AllowedActions, { nullable: true }),
  "selected_actions_url": S.optionalWith(SelectedActionsUrl, { nullable: true }),
  "sha_pinning_required": S.optionalWith(ShaPinningRequired, { nullable: true })
}) {}

export class ActionsSetGithubActionsPermissionsRepositoryParams extends S.Struct({
  
}) {}

export class ActionsSetGithubActionsPermissionsRepositoryRequest extends S.Class<ActionsSetGithubActionsPermissionsRepositoryRequest>("ActionsSetGithubActionsPermissionsRepositoryRequest")({
  "enabled": ActionsEnabled,
  "allowed_actions": S.optionalWith(AllowedActions, { nullable: true }),
  "sha_pinning_required": S.optionalWith(ShaPinningRequired, { nullable: true })
}) {}

export class ActionsGetWorkflowAccessToRepositoryParams extends S.Struct({
  
}) {}

/**
* Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
* repository.
* 
* `none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repositories only. `organization` level access allows sharing across the organization.
*/
export class ActionsWorkflowAccessToRepositoryAccessLevel extends S.Literal("none", "user", "organization") {}

export class ActionsWorkflowAccessToRepository extends S.Class<ActionsWorkflowAccessToRepository>("ActionsWorkflowAccessToRepository")({
  /**
* Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
* repository.
* 
* `none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repositories only. `organization` level access allows sharing across the organization.
*/
"access_level": ActionsWorkflowAccessToRepositoryAccessLevel
}) {}

export class ActionsSetWorkflowAccessToRepositoryParams extends S.Struct({
  
}) {}

export class ActionsGetArtifactAndLogRetentionSettingsRepositoryParams extends S.Struct({
  
}) {}

export class ActionsSetArtifactAndLogRetentionSettingsRepositoryParams extends S.Struct({
  
}) {}

export class ActionsGetForkPrContributorApprovalPermissionsRepositoryParams extends S.Struct({
  
}) {}

export class ActionsSetForkPrContributorApprovalPermissionsRepositoryParams extends S.Struct({
  
}) {}

export class ActionsGetPrivateRepoForkPrWorkflowsSettingsRepositoryParams extends S.Struct({
  
}) {}

export class ActionsSetPrivateRepoForkPrWorkflowsSettingsRepositoryParams extends S.Struct({
  
}) {}

export class ActionsGetAllowedActionsRepositoryParams extends S.Struct({
  
}) {}

export class ActionsSetAllowedActionsRepositoryParams extends S.Struct({
  
}) {}

export class ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryParams extends S.Struct({
  
}) {}

export class ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryParams extends S.Struct({
  
}) {}

export class ActionsListSelfHostedRunnersForRepoParams extends S.Struct({
  "name": S.optionalWith(S.String, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActionsListSelfHostedRunnersForRepo200 extends S.Struct({
  "total_count": S.Int,
  "runners": S.Array(Runner)
}) {}

export class ActionsListRunnerApplicationsForRepoParams extends S.Struct({
  
}) {}

export class ActionsListRunnerApplicationsForRepo200 extends S.Array(RunnerApplication) {}

export class ActionsGenerateRunnerJitconfigForRepoParams extends S.Struct({
  
}) {}

export class ActionsGenerateRunnerJitconfigForRepoRequest extends S.Class<ActionsGenerateRunnerJitconfigForRepoRequest>("ActionsGenerateRunnerJitconfigForRepoRequest")({
  /**
* The name of the new runner.
*/
"name": S.String,
  /**
* The ID of the runner group to register the runner to.
*/
"runner_group_id": S.Int,
  /**
* The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.
*/
"labels": S.NonEmptyArray(S.String).pipe(S.minItems(1), S.maxItems(100)),
  /**
* The working directory to be used for job execution, relative to the runner install directory.
*/
"work_folder": S.optionalWith(S.String, { nullable: true, default: () => "_work" as const })
}) {}

export class ActionsGenerateRunnerJitconfigForRepo201 extends S.Struct({
  "runner": Runner,
  /**
* The base64 encoded runner configuration.
*/
"encoded_jit_config": S.String
}) {}

export class ActionsCreateRegistrationTokenForRepoParams extends S.Struct({
  
}) {}

export class ActionsCreateRemoveTokenForRepoParams extends S.Struct({
  
}) {}

export class ActionsGetSelfHostedRunnerForRepoParams extends S.Struct({
  
}) {}

export class ActionsDeleteSelfHostedRunnerFromRepoParams extends S.Struct({
  
}) {}

export class ActionsListLabelsForSelfHostedRunnerForRepoParams extends S.Struct({
  
}) {}

export class ActionsListLabelsForSelfHostedRunnerForRepo200 extends S.Struct({
  "total_count": S.Int,
  "labels": S.Array(RunnerLabel)
}) {}

export class ActionsSetCustomLabelsForSelfHostedRunnerForRepoParams extends S.Struct({
  
}) {}

export class ActionsSetCustomLabelsForSelfHostedRunnerForRepoRequest extends S.Class<ActionsSetCustomLabelsForSelfHostedRunnerForRepoRequest>("ActionsSetCustomLabelsForSelfHostedRunnerForRepoRequest")({
  /**
* The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
*/
"labels": S.Array(S.String).pipe(S.maxItems(100))
}) {}

export class ActionsSetCustomLabelsForSelfHostedRunnerForRepo200 extends S.Struct({
  "total_count": S.Int,
  "labels": S.Array(RunnerLabel)
}) {}

export class ActionsAddCustomLabelsToSelfHostedRunnerForRepoParams extends S.Struct({
  
}) {}

export class ActionsAddCustomLabelsToSelfHostedRunnerForRepoRequest extends S.Class<ActionsAddCustomLabelsToSelfHostedRunnerForRepoRequest>("ActionsAddCustomLabelsToSelfHostedRunnerForRepoRequest")({
  /**
* The names of the custom labels to add to the runner.
*/
"labels": S.NonEmptyArray(S.String).pipe(S.minItems(1), S.maxItems(100))
}) {}

export class ActionsAddCustomLabelsToSelfHostedRunnerForRepo200 extends S.Struct({
  "total_count": S.Int,
  "labels": S.Array(RunnerLabel)
}) {}

export class ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoParams extends S.Struct({
  
}) {}

export class ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo200 extends S.Struct({
  "total_count": S.Int,
  "labels": S.Array(RunnerLabel)
}) {}

export class ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoParams extends S.Struct({
  
}) {}

export class ActionsRemoveCustomLabelFromSelfHostedRunnerForRepo200 extends S.Struct({
  "total_count": S.Int,
  "labels": S.Array(RunnerLabel)
}) {}

export class ActionsListWorkflowRunsForRepoParamsStatus extends S.Literal("completed", "action_required", "cancelled", "failure", "neutral", "skipped", "stale", "success", "timed_out", "in_progress", "queued", "requested", "waiting", "pending") {}

export class ActionsListWorkflowRunsForRepoParams extends S.Struct({
  "actor": S.optionalWith(S.String, { nullable: true }),
  "branch": S.optionalWith(S.String, { nullable: true }),
  "event": S.optionalWith(S.String, { nullable: true }),
  "status": S.optionalWith(ActionsListWorkflowRunsForRepoParamsStatus, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "created": S.optionalWith(S.String, { nullable: true }),
  "exclude_pull_requests": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "check_suite_id": S.optionalWith(S.Int, { nullable: true }),
  "head_sha": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* A workflow referenced/reused by the initial caller workflow
*/
export class ReferencedWorkflow extends S.Class<ReferencedWorkflow>("ReferencedWorkflow")({
  "path": S.String,
  "sha": S.String,
  "ref": S.optionalWith(S.String, { nullable: true })
}) {}

export class PullRequestMinimal extends S.Class<PullRequestMinimal>("PullRequestMinimal")({
  "id": S.Int,
  "number": S.Int,
  "url": S.String,
  "head": S.Struct({
  "ref": S.String,
  "sha": S.String,
  "repo": S.Struct({
  "id": S.Int,
  "url": S.String,
  "name": S.String
})
}),
  "base": S.Struct({
  "ref": S.String,
  "sha": S.String,
  "repo": S.Struct({
  "id": S.Int,
  "url": S.String,
  "name": S.String
})
})
}) {}

/**
* A commit.
*/
export class NullableSimpleCommit extends S.Class<NullableSimpleCommit>("NullableSimpleCommit")({
  /**
* SHA for the commit
*/
"id": S.String,
  /**
* SHA for the commit's tree
*/
"tree_id": S.String,
  /**
* Message describing the purpose of the commit
*/
"message": S.String,
  /**
* Timestamp of the commit
*/
"timestamp": S.String,
  /**
* Information about the Git author
*/
"author": S.NullOr(S.Struct({
  /**
* Name of the commit's author
*/
"name": S.String,
  /**
* Git email address of the commit's author
*/
"email": S.String
})),
  /**
* Information about the Git committer
*/
"committer": S.NullOr(S.Struct({
  /**
* Name of the commit's committer
*/
"name": S.String,
  /**
* Git email address of the commit's committer
*/
"email": S.String
}))
}) {}

/**
* An invocation of a workflow
*/
export class WorkflowRun extends S.Class<WorkflowRun>("WorkflowRun")({
  /**
* The ID of the workflow run.
*/
"id": S.Int,
  /**
* The name of the workflow run.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  "node_id": S.String,
  /**
* The ID of the associated check suite.
*/
"check_suite_id": S.optionalWith(S.Int, { nullable: true }),
  /**
* The node ID of the associated check suite.
*/
"check_suite_node_id": S.optionalWith(S.String, { nullable: true }),
  "head_branch": S.NullOr(S.String),
  /**
* The SHA of the head commit that points to the version of the workflow being run.
*/
"head_sha": S.String,
  /**
* The full path of the workflow
*/
"path": S.String,
  /**
* The auto incrementing run number for the workflow run.
*/
"run_number": S.Int,
  /**
* Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
*/
"run_attempt": S.optionalWith(S.Int, { nullable: true }),
  "referenced_workflows": S.optionalWith(S.Array(ReferencedWorkflow), { nullable: true }),
  "event": S.String,
  "status": S.NullOr(S.String),
  "conclusion": S.NullOr(S.String),
  /**
* The ID of the parent workflow.
*/
"workflow_id": S.Int,
  /**
* The URL to the workflow run.
*/
"url": S.String,
  "html_url": S.String,
  /**
* Pull requests that are open with a `head_sha` or `head_branch` that matches the workflow run. The returned pull requests do not necessarily indicate pull requests that triggered the run.
*/
"pull_requests": S.NullOr(S.Array(PullRequestMinimal)),
  "created_at": S.String,
  "updated_at": S.String,
  "actor": S.optionalWith(SimpleUser, { nullable: true }),
  "triggering_actor": S.optionalWith(SimpleUser, { nullable: true }),
  /**
* The start time of the latest run. Resets on re-run.
*/
"run_started_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The URL to the jobs for the workflow run.
*/
"jobs_url": S.String,
  /**
* The URL to download the logs for the workflow run.
*/
"logs_url": S.String,
  /**
* The URL to the associated check suite.
*/
"check_suite_url": S.String,
  /**
* The URL to the artifacts for the workflow run.
*/
"artifacts_url": S.String,
  /**
* The URL to cancel the workflow run.
*/
"cancel_url": S.String,
  /**
* The URL to rerun the workflow run.
*/
"rerun_url": S.String,
  /**
* The URL to the previous attempted run of this workflow, if one exists.
*/
"previous_attempt_url": S.optionalWith(S.String, { nullable: true }),
  /**
* The URL to the workflow.
*/
"workflow_url": S.String,
  "head_commit": S.NullOr(NullableSimpleCommit),
  "repository": MinimalRepository,
  "head_repository": MinimalRepository,
  "head_repository_id": S.optionalWith(S.Int, { nullable: true }),
  /**
* The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.
*/
"display_title": S.String
}) {}

export class ActionsListWorkflowRunsForRepo200 extends S.Struct({
  "total_count": S.Int,
  "workflow_runs": S.Array(WorkflowRun)
}) {}

export class ActionsGetWorkflowRunParams extends S.Struct({
  "exclude_pull_requests": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

export class ActionsDeleteWorkflowRunParams extends S.Struct({
  
}) {}

export class ActionsGetReviewsForRunParams extends S.Struct({
  
}) {}

/**
* Whether deployment to the environment(s) was approved or rejected or pending (with comments)
*/
export class EnvironmentApprovalsState extends S.Literal("approved", "rejected", "pending") {}

/**
* An entry in the reviews log for environment deployments
*/
export class EnvironmentApprovals extends S.Class<EnvironmentApprovals>("EnvironmentApprovals")({
  /**
* The list of environments that were approved or rejected
*/
"environments": S.Array(S.Struct({
  /**
* The id of the environment.
*/
"id": S.optionalWith(S.Int, { nullable: true }),
  "node_id": S.optionalWith(S.String, { nullable: true }),
  /**
* The name of the environment.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.optionalWith(S.String, { nullable: true }),
  /**
* The time that the environment was created, in ISO 8601 format.
*/
"created_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The time that the environment was last updated, in ISO 8601 format.
*/
"updated_at": S.optionalWith(S.String, { nullable: true })
})),
  /**
* Whether deployment to the environment(s) was approved or rejected or pending (with comments)
*/
"state": EnvironmentApprovalsState,
  "user": SimpleUser,
  /**
* The comment submitted with the deployment review
*/
"comment": S.String
}) {}

export class ActionsGetReviewsForRun200 extends S.Array(EnvironmentApprovals) {}

export class ActionsApproveWorkflowRunParams extends S.Struct({
  
}) {}

export class ActionsListWorkflowRunArtifactsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "name": S.optionalWith(S.String, { nullable: true })
}) {}

export class ActionsListWorkflowRunArtifacts200 extends S.Struct({
  "total_count": S.Int,
  "artifacts": S.Array(Artifact)
}) {}

export class ActionsGetWorkflowRunAttemptParams extends S.Struct({
  "exclude_pull_requests": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

export class ActionsListJobsForWorkflowRunAttemptParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActionsListJobsForWorkflowRunAttempt200 extends S.Struct({
  "total_count": S.Int,
  "jobs": S.Array(Job)
}) {}

export class ActionsDownloadWorkflowRunAttemptLogsParams extends S.Struct({
  
}) {}

export class ActionsCancelWorkflowRunParams extends S.Struct({
  
}) {}

export class ActionsReviewCustomGatesForRunParams extends S.Struct({
  
}) {}

export class ReviewCustomGatesCommentRequired extends S.Class<ReviewCustomGatesCommentRequired>("ReviewCustomGatesCommentRequired")({
  /**
* The name of the environment to approve or reject.
*/
"environment_name": S.String,
  /**
* Comment associated with the pending deployment protection rule. **Required when state is not provided.**
*/
"comment": S.String
}) {}

/**
* Whether to approve or reject deployment to the specified environments.
*/
export class ReviewCustomGatesStateRequiredState extends S.Literal("approved", "rejected") {}

export class ReviewCustomGatesStateRequired extends S.Class<ReviewCustomGatesStateRequired>("ReviewCustomGatesStateRequired")({
  /**
* The name of the environment to approve or reject.
*/
"environment_name": S.String,
  /**
* Whether to approve or reject deployment to the specified environments.
*/
"state": ReviewCustomGatesStateRequiredState,
  /**
* Optional comment to include with the review.
*/
"comment": S.optionalWith(S.String, { nullable: true })
}) {}

export class ActionsReviewCustomGatesForRunRequest extends S.Union(ReviewCustomGatesCommentRequired,
ReviewCustomGatesStateRequired) {}

export class ActionsForceCancelWorkflowRunParams extends S.Struct({
  
}) {}

export class ActionsListJobsForWorkflowRunParamsFilter extends S.Literal("latest", "all") {}

export class ActionsListJobsForWorkflowRunParams extends S.Struct({
  "filter": S.optionalWith(ActionsListJobsForWorkflowRunParamsFilter, { nullable: true, default: () => "latest" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActionsListJobsForWorkflowRun200 extends S.Struct({
  "total_count": S.Int,
  "jobs": S.Array(Job)
}) {}

export class ActionsDownloadWorkflowRunLogsParams extends S.Struct({
  
}) {}

export class ActionsDeleteWorkflowRunLogsParams extends S.Struct({
  
}) {}

export class ActionsGetPendingDeploymentsForRunParams extends S.Struct({
  
}) {}

/**
* The type of reviewer.
*/
export class DeploymentReviewerType extends S.Literal("User", "Team") {}

/**
* Details of a deployment that is waiting for protection rules to pass
*/
export class PendingDeployment extends S.Class<PendingDeployment>("PendingDeployment")({
  "environment": S.Struct({
  /**
* The id of the environment.
*/
"id": S.optionalWith(S.Int, { nullable: true }),
  "node_id": S.optionalWith(S.String, { nullable: true }),
  /**
* The name of the environment.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.optionalWith(S.String, { nullable: true })
}),
  /**
* The set duration of the wait timer
*/
"wait_timer": S.Int,
  /**
* The time that the wait timer began.
*/
"wait_timer_started_at": S.NullOr(S.String),
  /**
* Whether the currently authenticated user can approve the deployment
*/
"current_user_can_approve": S.Boolean,
  /**
* The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
*/
"reviewers": S.Array(S.Struct({
  "type": S.optionalWith(DeploymentReviewerType, { nullable: true }),
  "reviewer": S.optionalWith(S.Union(SimpleUser,
Team), { nullable: true })
}))
}) {}

export class ActionsGetPendingDeploymentsForRun200 extends S.Array(PendingDeployment) {}

export class ActionsReviewPendingDeploymentsForRunParams extends S.Struct({
  
}) {}

/**
* Whether to approve or reject deployment to the specified environments.
*/
export class ActionsReviewPendingDeploymentsForRunRequestState extends S.Literal("approved", "rejected") {}

export class ActionsReviewPendingDeploymentsForRunRequest extends S.Class<ActionsReviewPendingDeploymentsForRunRequest>("ActionsReviewPendingDeploymentsForRunRequest")({
  /**
* The list of environment ids to approve or reject
*/
"environment_ids": S.Array(S.Int),
  /**
* Whether to approve or reject deployment to the specified environments.
*/
"state": ActionsReviewPendingDeploymentsForRunRequestState,
  /**
* A comment to accompany the deployment review
*/
"comment": S.String
}) {}

/**
* A request for a specific ref(branch,sha,tag) to be deployed
*/
export class Deployment extends S.Class<Deployment>("Deployment")({
  "url": S.String,
  /**
* Unique identifier of the deployment
*/
"id": S.Int,
  "node_id": S.String,
  "sha": S.String,
  /**
* The ref to deploy. This can be a branch, tag, or sha.
*/
"ref": S.String,
  /**
* Parameter to specify a task to execute
*/
"task": S.String,
  "payload": S.Union(S.Record({ key: S.String, value: S.Unknown }),
S.String),
  "original_environment": S.optionalWith(S.String, { nullable: true }),
  /**
* Name for the target deployment environment.
*/
"environment": S.String,
  "description": S.NullOr(S.String),
  "creator": S.NullOr(NullableSimpleUser),
  "created_at": S.String,
  "updated_at": S.String,
  "statuses_url": S.String,
  "repository_url": S.String,
  /**
* Specifies if the given environment is will no longer exist at some point in the future. Default: false.
*/
"transient_environment": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Specifies if the given environment is one that end-users directly interact with. Default: false.
*/
"production_environment": S.optionalWith(S.Boolean, { nullable: true }),
  "performed_via_github_app": S.optionalWith(NullableIntegration, { nullable: true })
}) {}

export class ActionsReviewPendingDeploymentsForRun200 extends S.Array(Deployment) {}

export class ActionsReRunWorkflowParams extends S.Struct({
  
}) {}

export class ActionsReRunWorkflowRequest extends S.Class<ActionsReRunWorkflowRequest>("ActionsReRunWorkflowRequest")({
  /**
* Whether to enable debug logging for the re-run.
*/
"enable_debug_logging": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

export class ActionsReRunWorkflowFailedJobsParams extends S.Struct({
  
}) {}

export class ActionsReRunWorkflowFailedJobsRequest extends S.Class<ActionsReRunWorkflowFailedJobsRequest>("ActionsReRunWorkflowFailedJobsRequest")({
  /**
* Whether to enable debug logging for the re-run.
*/
"enable_debug_logging": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

export class ActionsGetWorkflowRunUsageParams extends S.Struct({
  
}) {}

/**
* Workflow Run Usage
*/
export class WorkflowRunUsage extends S.Class<WorkflowRunUsage>("WorkflowRunUsage")({
  "billable": S.Struct({
  "UBUNTU": S.optionalWith(S.Struct({
  "total_ms": S.Int,
  "jobs": S.Int,
  "job_runs": S.optionalWith(S.Array(S.Struct({
  "job_id": S.Int,
  "duration_ms": S.Int
})), { nullable: true })
}), { nullable: true }),
  "MACOS": S.optionalWith(S.Struct({
  "total_ms": S.Int,
  "jobs": S.Int,
  "job_runs": S.optionalWith(S.Array(S.Struct({
  "job_id": S.Int,
  "duration_ms": S.Int
})), { nullable: true })
}), { nullable: true }),
  "WINDOWS": S.optionalWith(S.Struct({
  "total_ms": S.Int,
  "jobs": S.Int,
  "job_runs": S.optionalWith(S.Array(S.Struct({
  "job_id": S.Int,
  "duration_ms": S.Int
})), { nullable: true })
}), { nullable: true })
}),
  "run_duration_ms": S.optionalWith(S.Int, { nullable: true })
}) {}

export class ActionsListRepoSecretsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActionsListRepoSecrets200 extends S.Struct({
  "total_count": S.Int,
  "secrets": S.Array(ActionsSecret)
}) {}

export class ActionsGetRepoPublicKeyParams extends S.Struct({
  
}) {}

export class ActionsGetRepoSecretParams extends S.Struct({
  
}) {}

export class ActionsCreateOrUpdateRepoSecretParams extends S.Struct({
  
}) {}

export class ActionsCreateOrUpdateRepoSecretRequest extends S.Class<ActionsCreateOrUpdateRepoSecretRequest>("ActionsCreateOrUpdateRepoSecretRequest")({
  /**
* Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/actions/secrets#get-a-repository-public-key) endpoint.
*/
"encrypted_value": S.String.pipe(S.pattern(new RegExp("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"))),
  /**
* ID of the key you used to encrypt the secret.
*/
"key_id": S.String
}) {}

export class ActionsDeleteRepoSecretParams extends S.Struct({
  
}) {}

export class ActionsListRepoVariablesParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 10 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActionsListRepoVariables200 extends S.Struct({
  "total_count": S.Int,
  "variables": S.Array(ActionsVariable)
}) {}

export class ActionsCreateRepoVariableParams extends S.Struct({
  
}) {}

export class ActionsCreateRepoVariableRequest extends S.Class<ActionsCreateRepoVariableRequest>("ActionsCreateRepoVariableRequest")({
  /**
* The name of the variable.
*/
"name": S.String,
  /**
* The value of the variable.
*/
"value": S.String
}) {}

export class ActionsGetRepoVariableParams extends S.Struct({
  
}) {}

export class ActionsDeleteRepoVariableParams extends S.Struct({
  
}) {}

export class ActionsUpdateRepoVariableParams extends S.Struct({
  
}) {}

export class ActionsUpdateRepoVariableRequest extends S.Class<ActionsUpdateRepoVariableRequest>("ActionsUpdateRepoVariableRequest")({
  /**
* The name of the variable.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The value of the variable.
*/
"value": S.optionalWith(S.String, { nullable: true })
}) {}

export class ActionsListRepoWorkflowsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class WorkflowState extends S.Literal("active", "deleted", "disabled_fork", "disabled_inactivity", "disabled_manually") {}

/**
* A GitHub Actions workflow
*/
export class Workflow extends S.Class<Workflow>("Workflow")({
  "id": S.Int,
  "node_id": S.String,
  "name": S.String,
  "path": S.String,
  "state": WorkflowState,
  "created_at": S.String,
  "updated_at": S.String,
  "url": S.String,
  "html_url": S.String,
  "badge_url": S.String,
  "deleted_at": S.optionalWith(S.String, { nullable: true })
}) {}

export class ActionsListRepoWorkflows200 extends S.Struct({
  "total_count": S.Int,
  "workflows": S.Array(Workflow)
}) {}

export class ActionsGetWorkflowParams extends S.Struct({
  
}) {}

export class ActionsDisableWorkflowParams extends S.Struct({
  
}) {}

export class ActionsCreateWorkflowDispatchParams extends S.Struct({
  
}) {}

export class ActionsCreateWorkflowDispatchRequest extends S.Class<ActionsCreateWorkflowDispatchRequest>("ActionsCreateWorkflowDispatchRequest")({
  /**
* The git reference for the workflow. The reference can be a branch or tag name.
*/
"ref": S.String,
  /**
* Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.
*/
"inputs": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class ActionsEnableWorkflowParams extends S.Struct({
  
}) {}

export class ActionsListWorkflowRunsParamsStatus extends S.Literal("completed", "action_required", "cancelled", "failure", "neutral", "skipped", "stale", "success", "timed_out", "in_progress", "queued", "requested", "waiting", "pending") {}

export class ActionsListWorkflowRunsParams extends S.Struct({
  "actor": S.optionalWith(S.String, { nullable: true }),
  "branch": S.optionalWith(S.String, { nullable: true }),
  "event": S.optionalWith(S.String, { nullable: true }),
  "status": S.optionalWith(ActionsListWorkflowRunsParamsStatus, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "created": S.optionalWith(S.String, { nullable: true }),
  "exclude_pull_requests": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "check_suite_id": S.optionalWith(S.Int, { nullable: true }),
  "head_sha": S.optionalWith(S.String, { nullable: true })
}) {}

export class ActionsListWorkflowRuns200 extends S.Struct({
  "total_count": S.Int,
  "workflow_runs": S.Array(WorkflowRun)
}) {}

export class ActionsGetWorkflowUsageParams extends S.Struct({
  
}) {}

/**
* Workflow Usage
*/
export class WorkflowUsage extends S.Class<WorkflowUsage>("WorkflowUsage")({
  "billable": S.Struct({
  "UBUNTU": S.optionalWith(S.Struct({
  "total_ms": S.optionalWith(S.Int, { nullable: true })
}), { nullable: true }),
  "MACOS": S.optionalWith(S.Struct({
  "total_ms": S.optionalWith(S.Int, { nullable: true })
}), { nullable: true }),
  "WINDOWS": S.optionalWith(S.Struct({
  "total_ms": S.optionalWith(S.Int, { nullable: true })
}), { nullable: true })
})
}) {}

export class ReposListActivitiesParamsDirection extends S.Literal("asc", "desc") {}

export class ReposListActivitiesParamsTimePeriod extends S.Literal("day", "week", "month", "quarter", "year") {}

export class ReposListActivitiesParamsActivityType extends S.Literal("push", "force_push", "branch_creation", "branch_deletion", "pr_merge", "merge_queue_merge") {}

export class ReposListActivitiesParams extends S.Struct({
  "direction": S.optionalWith(ReposListActivitiesParamsDirection, { nullable: true, default: () => "desc" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true }),
  "ref": S.optionalWith(S.String, { nullable: true }),
  "actor": S.optionalWith(S.String, { nullable: true }),
  "time_period": S.optionalWith(ReposListActivitiesParamsTimePeriod, { nullable: true }),
  "activity_type": S.optionalWith(ReposListActivitiesParamsActivityType, { nullable: true })
}) {}

/**
* The type of the activity that was performed.
*/
export class ActivityActivityType extends S.Literal("push", "force_push", "branch_deletion", "branch_creation", "pr_merge", "merge_queue_merge") {}

/**
* Activity
*/
export class Activity extends S.Class<Activity>("Activity")({
  "id": S.Int,
  "node_id": S.String,
  /**
* The SHA of the commit before the activity.
*/
"before": S.String,
  /**
* The SHA of the commit after the activity.
*/
"after": S.String,
  /**
* The full Git reference, formatted as `refs/heads/<branch name>`.
*/
"ref": S.String,
  /**
* The time when the activity occurred.
*/
"timestamp": S.String,
  /**
* The type of the activity that was performed.
*/
"activity_type": ActivityActivityType,
  "actor": S.NullOr(NullableSimpleUser)
}) {}

export class ReposListActivities200 extends S.Array(Activity) {}

export class IssuesListAssigneesParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class IssuesListAssignees200 extends S.Array(SimpleUser) {}

export class IssuesCheckUserCanBeAssignedParams extends S.Struct({
  
}) {}

export class ReposCreateAttestationParams extends S.Struct({
  
}) {}

export class ReposCreateAttestationRequest extends S.Class<ReposCreateAttestationRequest>("ReposCreateAttestationRequest")({
  /**
* The attestation's Sigstore Bundle.
* Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
*/
"bundle": S.Struct({
  "mediaType": S.optionalWith(S.String, { nullable: true }),
  "verificationMaterial": S.optionalWith(S.Struct({
  
}), { nullable: true }),
  "dsseEnvelope": S.optionalWith(S.Struct({
  
}), { nullable: true })
})
}) {}

export class ReposCreateAttestation201 extends S.Struct({
  /**
* The ID of the attestation.
*/
"id": S.optionalWith(S.Int, { nullable: true })
}) {}

export class ReposListAttestationsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true }),
  "predicate_type": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposListAttestations200 extends S.Struct({
  "attestations": S.optionalWith(S.Array(S.Struct({
  /**
* The attestation's Sigstore Bundle.
* Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
*/
"bundle": S.optionalWith(S.Struct({
  "mediaType": S.optionalWith(S.String, { nullable: true }),
  "verificationMaterial": S.optionalWith(S.Struct({
  
}), { nullable: true }),
  "dsseEnvelope": S.optionalWith(S.Struct({
  
}), { nullable: true })
}), { nullable: true }),
  "repository_id": S.optionalWith(S.Int, { nullable: true }),
  "bundle_url": S.optionalWith(S.String, { nullable: true })
})), { nullable: true })
}) {}

export class ReposListAutolinksParams extends S.Struct({
  
}) {}

/**
* An autolink reference.
*/
export class Autolink extends S.Class<Autolink>("Autolink")({
  "id": S.Int,
  /**
* The prefix of a key that is linkified.
*/
"key_prefix": S.String,
  /**
* A template for the target URL that is generated if a key was found.
*/
"url_template": S.String,
  /**
* Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters.
*/
"is_alphanumeric": S.Boolean,
  "updated_at": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposListAutolinks200 extends S.Array(Autolink) {}

export class ReposCreateAutolinkParams extends S.Struct({
  
}) {}

export class ReposCreateAutolinkRequest extends S.Class<ReposCreateAutolinkRequest>("ReposCreateAutolinkRequest")({
  /**
* This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit.
*/
"key_prefix": S.String,
  /**
* The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`.
*/
"url_template": S.String,
  /**
* Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.
*/
"is_alphanumeric": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

export class ReposGetAutolinkParams extends S.Struct({
  
}) {}

export class ReposDeleteAutolinkParams extends S.Struct({
  
}) {}

export class ReposCheckAutomatedSecurityFixesParams extends S.Struct({
  
}) {}

/**
* Check Dependabot security updates
*/
export class CheckAutomatedSecurityFixes extends S.Class<CheckAutomatedSecurityFixes>("CheckAutomatedSecurityFixes")({
  /**
* Whether Dependabot security updates are enabled for the repository.
*/
"enabled": S.Boolean,
  /**
* Whether Dependabot security updates are paused for the repository.
*/
"paused": S.Boolean
}) {}

export class ReposEnableAutomatedSecurityFixesParams extends S.Struct({
  
}) {}

export class ReposDisableAutomatedSecurityFixesParams extends S.Struct({
  
}) {}

export class ReposListBranchesParams extends S.Struct({
  "protected": S.optionalWith(S.Boolean, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Protected Branch Required Status Check
*/
export class ProtectedBranchRequiredStatusCheck extends S.Class<ProtectedBranchRequiredStatusCheck>("ProtectedBranchRequiredStatusCheck")({
  "url": S.optionalWith(S.String, { nullable: true }),
  "enforcement_level": S.optionalWith(S.String, { nullable: true }),
  "contexts": S.Array(S.String),
  "checks": S.Array(S.Struct({
  "context": S.String,
  "app_id": S.NullOr(S.Int)
})),
  "contexts_url": S.optionalWith(S.String, { nullable: true }),
  "strict": S.optionalWith(S.Boolean, { nullable: true })
}) {}

/**
* Protected Branch Admin Enforced
*/
export class ProtectedBranchAdminEnforced extends S.Class<ProtectedBranchAdminEnforced>("ProtectedBranchAdminEnforced")({
  "url": S.String,
  "enabled": S.Boolean
}) {}

/**
* Protected Branch Pull Request Review
*/
export class ProtectedBranchPullRequestReview extends S.Class<ProtectedBranchPullRequestReview>("ProtectedBranchPullRequestReview")({
  "url": S.optionalWith(S.String, { nullable: true }),
  "dismissal_restrictions": S.optionalWith(S.Struct({
  /**
* The list of users with review dismissal access.
*/
"users": S.optionalWith(S.Array(SimpleUser), { nullable: true }),
  /**
* The list of teams with review dismissal access.
*/
"teams": S.optionalWith(S.Array(Team), { nullable: true }),
  /**
* The list of apps with review dismissal access.
*/
"apps": S.optionalWith(S.Array(Integration), { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true }),
  "users_url": S.optionalWith(S.String, { nullable: true }),
  "teams_url": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  /**
* Allow specific users, teams, or apps to bypass pull request requirements.
*/
"bypass_pull_request_allowances": S.optionalWith(S.Struct({
  /**
* The list of users allowed to bypass pull request requirements.
*/
"users": S.optionalWith(S.Array(SimpleUser), { nullable: true }),
  /**
* The list of teams allowed to bypass pull request requirements.
*/
"teams": S.optionalWith(S.Array(Team), { nullable: true }),
  /**
* The list of apps allowed to bypass pull request requirements.
*/
"apps": S.optionalWith(S.Array(Integration), { nullable: true })
}), { nullable: true }),
  "dismiss_stale_reviews": S.Boolean,
  "require_code_owner_reviews": S.Boolean,
  "required_approving_review_count": S.optionalWith(S.Int.pipe(S.greaterThanOrEqualTo(0), S.lessThanOrEqualTo(6)), { nullable: true }),
  /**
* Whether the most recent push must be approved by someone other than the person who pushed it.
*/
"require_last_push_approval": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

/**
* Branch Restriction Policy
*/
export class BranchRestrictionPolicy extends S.Class<BranchRestrictionPolicy>("BranchRestrictionPolicy")({
  "url": S.String,
  "users_url": S.String,
  "teams_url": S.String,
  "apps_url": S.String,
  "users": S.Array(S.Struct({
  "login": S.optionalWith(S.String, { nullable: true }),
  "id": S.optionalWith(S.Int, { nullable: true }),
  "node_id": S.optionalWith(S.String, { nullable: true }),
  "avatar_url": S.optionalWith(S.String, { nullable: true }),
  "gravatar_id": S.optionalWith(S.String, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.optionalWith(S.String, { nullable: true }),
  "followers_url": S.optionalWith(S.String, { nullable: true }),
  "following_url": S.optionalWith(S.String, { nullable: true }),
  "gists_url": S.optionalWith(S.String, { nullable: true }),
  "starred_url": S.optionalWith(S.String, { nullable: true }),
  "subscriptions_url": S.optionalWith(S.String, { nullable: true }),
  "organizations_url": S.optionalWith(S.String, { nullable: true }),
  "repos_url": S.optionalWith(S.String, { nullable: true }),
  "events_url": S.optionalWith(S.String, { nullable: true }),
  "received_events_url": S.optionalWith(S.String, { nullable: true }),
  "type": S.optionalWith(S.String, { nullable: true }),
  "site_admin": S.optionalWith(S.Boolean, { nullable: true }),
  "user_view_type": S.optionalWith(S.String, { nullable: true })
})),
  "teams": S.Array(S.Struct({
  "id": S.optionalWith(S.Int, { nullable: true }),
  "node_id": S.optionalWith(S.String, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.optionalWith(S.String, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "privacy": S.optionalWith(S.String, { nullable: true }),
  "notification_setting": S.optionalWith(S.String, { nullable: true }),
  "permission": S.optionalWith(S.String, { nullable: true }),
  "members_url": S.optionalWith(S.String, { nullable: true }),
  "repositories_url": S.optionalWith(S.String, { nullable: true }),
  "parent": S.optionalWith(S.String, { nullable: true })
})),
  "apps": S.Array(S.Struct({
  "id": S.optionalWith(S.Int, { nullable: true }),
  "slug": S.optionalWith(S.String, { nullable: true }),
  "node_id": S.optionalWith(S.String, { nullable: true }),
  "owner": S.optionalWith(S.Struct({
  "login": S.optionalWith(S.String, { nullable: true }),
  "id": S.optionalWith(S.Int, { nullable: true }),
  "node_id": S.optionalWith(S.String, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true }),
  "repos_url": S.optionalWith(S.String, { nullable: true }),
  "events_url": S.optionalWith(S.String, { nullable: true }),
  "hooks_url": S.optionalWith(S.String, { nullable: true }),
  "issues_url": S.optionalWith(S.String, { nullable: true }),
  "members_url": S.optionalWith(S.String, { nullable: true }),
  "public_members_url": S.optionalWith(S.String, { nullable: true }),
  "avatar_url": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "gravatar_id": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.optionalWith(S.String, { nullable: true }),
  "followers_url": S.optionalWith(S.String, { nullable: true }),
  "following_url": S.optionalWith(S.String, { nullable: true }),
  "gists_url": S.optionalWith(S.String, { nullable: true }),
  "starred_url": S.optionalWith(S.String, { nullable: true }),
  "subscriptions_url": S.optionalWith(S.String, { nullable: true }),
  "organizations_url": S.optionalWith(S.String, { nullable: true }),
  "received_events_url": S.optionalWith(S.String, { nullable: true }),
  "type": S.optionalWith(S.String, { nullable: true }),
  "site_admin": S.optionalWith(S.Boolean, { nullable: true }),
  "user_view_type": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "client_id": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "external_url": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.optionalWith(S.String, { nullable: true }),
  "created_at": S.optionalWith(S.String, { nullable: true }),
  "updated_at": S.optionalWith(S.String, { nullable: true }),
  "permissions": S.optionalWith(S.Struct({
  "metadata": S.optionalWith(S.String, { nullable: true }),
  "contents": S.optionalWith(S.String, { nullable: true }),
  "issues": S.optionalWith(S.String, { nullable: true }),
  "single_file": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  "events": S.optionalWith(S.Array(S.String), { nullable: true })
}))
}) {}

/**
* Branch Protection
*/
export class BranchProtection extends S.Class<BranchProtection>("BranchProtection")({
  "url": S.optionalWith(S.String, { nullable: true }),
  "enabled": S.optionalWith(S.Boolean, { nullable: true }),
  "required_status_checks": S.optionalWith(ProtectedBranchRequiredStatusCheck, { nullable: true }),
  "enforce_admins": S.optionalWith(ProtectedBranchAdminEnforced, { nullable: true }),
  "required_pull_request_reviews": S.optionalWith(ProtectedBranchPullRequestReview, { nullable: true }),
  "restrictions": S.optionalWith(BranchRestrictionPolicy, { nullable: true }),
  "required_linear_history": S.optionalWith(S.Struct({
  "enabled": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  "allow_force_pushes": S.optionalWith(S.Struct({
  "enabled": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  "allow_deletions": S.optionalWith(S.Struct({
  "enabled": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  "block_creations": S.optionalWith(S.Struct({
  "enabled": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  "required_conversation_resolution": S.optionalWith(S.Struct({
  "enabled": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "protection_url": S.optionalWith(S.String, { nullable: true }),
  "required_signatures": S.optionalWith(S.Struct({
  "url": S.String,
  "enabled": S.Boolean
}), { nullable: true }),
  /**
* Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
*/
"lock_branch": S.optionalWith(S.Struct({
  "enabled": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}), { nullable: true }),
  /**
* Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
*/
"allow_fork_syncing": S.optionalWith(S.Struct({
  "enabled": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}), { nullable: true })
}) {}

/**
* Short Branch
*/
export class ShortBranch extends S.Class<ShortBranch>("ShortBranch")({
  "name": S.String,
  "commit": S.Struct({
  "sha": S.String,
  "url": S.String
}),
  "protected": S.Boolean,
  "protection": S.optionalWith(BranchProtection, { nullable: true }),
  "protection_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposListBranches200 extends S.Array(ShortBranch) {}

export class ReposGetBranchParams extends S.Struct({
  
}) {}

/**
* Metaproperties for Git author/committer information.
*/
export class NullableGitUser extends S.Class<NullableGitUser>("NullableGitUser")({
  "name": S.optionalWith(S.String, { nullable: true }),
  "email": S.optionalWith(S.String, { nullable: true }),
  "date": S.optionalWith(S.String, { nullable: true })
}) {}

export class Verification extends S.Class<Verification>("Verification")({
  "verified": S.Boolean,
  "reason": S.String,
  "payload": S.NullOr(S.String),
  "signature": S.NullOr(S.String),
  "verified_at": S.NullOr(S.String)
}) {}

export class DiffEntryStatus extends S.Literal("added", "removed", "modified", "renamed", "copied", "changed", "unchanged") {}

/**
* Diff Entry
*/
export class DiffEntry extends S.Class<DiffEntry>("DiffEntry")({
  "sha": S.String,
  "filename": S.String,
  "status": DiffEntryStatus,
  "additions": S.Int,
  "deletions": S.Int,
  "changes": S.Int,
  "blob_url": S.String,
  "raw_url": S.String,
  "contents_url": S.String,
  "patch": S.optionalWith(S.String, { nullable: true }),
  "previous_filename": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Commit
*/
export class Commit extends S.Class<Commit>("Commit")({
  "url": S.String,
  "sha": S.String,
  "node_id": S.String,
  "html_url": S.String,
  "comments_url": S.String,
  "commit": S.Struct({
  "url": S.String,
  "author": S.NullOr(NullableGitUser),
  "committer": S.NullOr(NullableGitUser),
  "message": S.String,
  "comment_count": S.Int,
  "tree": S.Struct({
  "sha": S.String,
  "url": S.String
}),
  "verification": S.optionalWith(Verification, { nullable: true })
}),
  "author": S.NullOr(S.Union(SimpleUser,
EmptyObject)),
  "committer": S.NullOr(S.Union(SimpleUser,
EmptyObject)),
  "parents": S.Array(S.Struct({
  "sha": S.String,
  "url": S.String,
  "html_url": S.optionalWith(S.String, { nullable: true })
})),
  "stats": S.optionalWith(S.Struct({
  "additions": S.optionalWith(S.Int, { nullable: true }),
  "deletions": S.optionalWith(S.Int, { nullable: true }),
  "total": S.optionalWith(S.Int, { nullable: true })
}), { nullable: true }),
  "files": S.optionalWith(S.Array(DiffEntry), { nullable: true })
}) {}

/**
* Branch With Protection
*/
export class BranchWithProtection extends S.Class<BranchWithProtection>("BranchWithProtection")({
  "name": S.String,
  "commit": Commit,
  "_links": S.Struct({
  "html": S.String,
  "self": S.String
}),
  "protected": S.Boolean,
  "protection": BranchProtection,
  "protection_url": S.String,
  "pattern": S.optionalWith(S.String, { nullable: true }),
  "required_approving_review_count": S.optionalWith(S.Int, { nullable: true })
}) {}

export class ReposGetBranchProtectionParams extends S.Struct({
  
}) {}

export class ReposUpdateBranchProtectionParams extends S.Struct({
  
}) {}

export class ReposUpdateBranchProtectionRequest extends S.Class<ReposUpdateBranchProtectionRequest>("ReposUpdateBranchProtectionRequest")({
  /**
* Require status checks to pass before merging. Set to `null` to disable.
*/
"required_status_checks": S.NullOr(S.Struct({
  /**
* Require branches to be up to date before merging.
*/
"strict": S.Boolean,
  /**
* **Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
*/
"contexts": S.Array(S.String),
  /**
* The list of status checks to require in order to merge into this branch.
*/
"checks": S.optionalWith(S.Array(S.Struct({
  /**
* The name of the required check
*/
"context": S.String,
  /**
* The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
*/
"app_id": S.optionalWith(S.Int, { nullable: true })
})), { nullable: true })
})),
  /**
* Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
*/
"enforce_admins": S.NullOr(S.Boolean),
  /**
* Require at least one approving review on a pull request, before merging. Set to `null` to disable.
*/
"required_pull_request_reviews": S.NullOr(S.Struct({
  /**
* Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
*/
"dismissal_restrictions": S.optionalWith(S.Struct({
  /**
* The list of user `login`s with dismissal access
*/
"users": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* The list of team `slug`s with dismissal access
*/
"teams": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* The list of app `slug`s with dismissal access
*/
"apps": S.optionalWith(S.Array(S.String), { nullable: true })
}), { nullable: true }),
  /**
* Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
*/
"dismiss_stale_reviews": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them.
*/
"require_code_owner_reviews": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
*/
"required_approving_review_count": S.optionalWith(S.Int, { nullable: true }),
  /**
* Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.
*/
"require_last_push_approval": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Allow specific users, teams, or apps to bypass pull request requirements.
*/
"bypass_pull_request_allowances": S.optionalWith(S.Struct({
  /**
* The list of user `login`s allowed to bypass pull request requirements.
*/
"users": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* The list of team `slug`s allowed to bypass pull request requirements.
*/
"teams": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* The list of app `slug`s allowed to bypass pull request requirements.
*/
"apps": S.optionalWith(S.Array(S.String), { nullable: true })
}), { nullable: true })
})),
  /**
* Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
*/
"restrictions": S.NullOr(S.Struct({
  /**
* The list of user `login`s with push access
*/
"users": S.Array(S.String),
  /**
* The list of team `slug`s with push access
*/
"teams": S.Array(S.String),
  /**
* The list of app `slug`s with push access
*/
"apps": S.optionalWith(S.Array(S.String), { nullable: true })
})),
  /**
* Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
*/
"required_linear_history": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
*/
"allow_force_pushes": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
*/
"allow_deletions": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`.
*/
"block_creations": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.
*/
"required_conversation_resolution": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.
*/
"lock_branch": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.
*/
"allow_fork_syncing": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

/**
* Status Check Policy
*/
export class StatusCheckPolicy extends S.Class<StatusCheckPolicy>("StatusCheckPolicy")({
  "url": S.String,
  "strict": S.Boolean,
  "contexts": S.Array(S.String),
  "checks": S.Array(S.Struct({
  "context": S.String,
  "app_id": S.NullOr(S.Int)
})),
  "contexts_url": S.String
}) {}

/**
* Branch protections protect branches
*/
export class ProtectedBranch extends S.Class<ProtectedBranch>("ProtectedBranch")({
  "url": S.String,
  "required_status_checks": S.optionalWith(StatusCheckPolicy, { nullable: true }),
  "required_pull_request_reviews": S.optionalWith(S.Struct({
  "url": S.String,
  "dismiss_stale_reviews": S.optionalWith(S.Boolean, { nullable: true }),
  "require_code_owner_reviews": S.optionalWith(S.Boolean, { nullable: true }),
  "required_approving_review_count": S.optionalWith(S.Int, { nullable: true }),
  /**
* Whether the most recent push must be approved by someone other than the person who pushed it.
*/
"require_last_push_approval": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "dismissal_restrictions": S.optionalWith(S.Struct({
  "url": S.String,
  "users_url": S.String,
  "teams_url": S.String,
  "users": S.Array(SimpleUser),
  "teams": S.Array(Team),
  "apps": S.optionalWith(S.Array(Integration), { nullable: true })
}), { nullable: true }),
  "bypass_pull_request_allowances": S.optionalWith(S.Struct({
  "users": S.Array(SimpleUser),
  "teams": S.Array(Team),
  "apps": S.optionalWith(S.Array(Integration), { nullable: true })
}), { nullable: true })
}), { nullable: true }),
  "required_signatures": S.optionalWith(S.Struct({
  "url": S.String,
  "enabled": S.Boolean
}), { nullable: true }),
  "enforce_admins": S.optionalWith(S.Struct({
  "url": S.String,
  "enabled": S.Boolean
}), { nullable: true }),
  "required_linear_history": S.optionalWith(S.Struct({
  "enabled": S.Boolean
}), { nullable: true }),
  "allow_force_pushes": S.optionalWith(S.Struct({
  "enabled": S.Boolean
}), { nullable: true }),
  "allow_deletions": S.optionalWith(S.Struct({
  "enabled": S.Boolean
}), { nullable: true }),
  "restrictions": S.optionalWith(BranchRestrictionPolicy, { nullable: true }),
  "required_conversation_resolution": S.optionalWith(S.Struct({
  "enabled": S.optionalWith(S.Boolean, { nullable: true })
}), { nullable: true }),
  "block_creations": S.optionalWith(S.Struct({
  "enabled": S.Boolean
}), { nullable: true }),
  /**
* Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
*/
"lock_branch": S.optionalWith(S.Struct({
  "enabled": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}), { nullable: true }),
  /**
* Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
*/
"allow_fork_syncing": S.optionalWith(S.Struct({
  "enabled": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}), { nullable: true })
}) {}

export class ReposDeleteBranchProtectionParams extends S.Struct({
  
}) {}

export class ReposGetAdminBranchProtectionParams extends S.Struct({
  
}) {}

export class ReposSetAdminBranchProtectionParams extends S.Struct({
  
}) {}

export class ReposDeleteAdminBranchProtectionParams extends S.Struct({
  
}) {}

export class ReposGetPullRequestReviewProtectionParams extends S.Struct({
  
}) {}

export class ReposDeletePullRequestReviewProtectionParams extends S.Struct({
  
}) {}

export class ReposUpdatePullRequestReviewProtectionParams extends S.Struct({
  
}) {}

export class ReposUpdatePullRequestReviewProtectionRequest extends S.Class<ReposUpdatePullRequestReviewProtectionRequest>("ReposUpdatePullRequestReviewProtectionRequest")({
  /**
* Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
*/
"dismissal_restrictions": S.optionalWith(S.Struct({
  /**
* The list of user `login`s with dismissal access
*/
"users": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* The list of team `slug`s with dismissal access
*/
"teams": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* The list of app `slug`s with dismissal access
*/
"apps": S.optionalWith(S.Array(S.String), { nullable: true })
}), { nullable: true }),
  /**
* Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
*/
"dismiss_stale_reviews": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.
*/
"require_code_owner_reviews": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
*/
"required_approving_review_count": S.optionalWith(S.Int, { nullable: true }),
  /**
* Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`
*/
"require_last_push_approval": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Allow specific users, teams, or apps to bypass pull request requirements.
*/
"bypass_pull_request_allowances": S.optionalWith(S.Struct({
  /**
* The list of user `login`s allowed to bypass pull request requirements.
*/
"users": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* The list of team `slug`s allowed to bypass pull request requirements.
*/
"teams": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* The list of app `slug`s allowed to bypass pull request requirements.
*/
"apps": S.optionalWith(S.Array(S.String), { nullable: true })
}), { nullable: true })
}) {}

export class ReposGetCommitSignatureProtectionParams extends S.Struct({
  
}) {}

export class ReposCreateCommitSignatureProtectionParams extends S.Struct({
  
}) {}

export class ReposDeleteCommitSignatureProtectionParams extends S.Struct({
  
}) {}

export class ReposGetStatusChecksProtectionParams extends S.Struct({
  
}) {}

export class ReposRemoveStatusCheckProtectionParams extends S.Struct({
  
}) {}

export class ReposUpdateStatusCheckProtectionParams extends S.Struct({
  
}) {}

export class ReposUpdateStatusCheckProtectionRequest extends S.Class<ReposUpdateStatusCheckProtectionRequest>("ReposUpdateStatusCheckProtectionRequest")({
  /**
* Require branches to be up to date before merging.
*/
"strict": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* **Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
*/
"contexts": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* The list of status checks to require in order to merge into this branch.
*/
"checks": S.optionalWith(S.Array(S.Struct({
  /**
* The name of the required check
*/
"context": S.String,
  /**
* The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
*/
"app_id": S.optionalWith(S.Int, { nullable: true })
})), { nullable: true })
}) {}

export class ReposGetAllStatusCheckContextsParams extends S.Struct({
  
}) {}

export class ReposGetAllStatusCheckContexts200 extends S.Array(S.String) {}

export class ReposSetStatusCheckContextsParams extends S.Struct({
  
}) {}

export class ReposSetStatusCheckContextsRequest extends S.Union(S.Struct({
  /**
* The name of the status checks
*/
"contexts": S.Array(S.String)
}),
/**
* The name of the status checks
*/
S.Array(S.String)) {}

export class ReposSetStatusCheckContexts200 extends S.Array(S.String) {}

export class ReposAddStatusCheckContextsParams extends S.Struct({
  
}) {}

export class ReposAddStatusCheckContextsRequest extends S.Union(S.Struct({
  /**
* The name of the status checks
*/
"contexts": S.Array(S.String)
}),
/**
* The name of the status checks
*/
S.Array(S.String)) {}

export class ReposAddStatusCheckContexts200 extends S.Array(S.String) {}

export class ReposRemoveStatusCheckContextsParams extends S.Struct({
  
}) {}

export class ReposRemoveStatusCheckContextsRequest extends S.Union(S.Struct({
  /**
* The name of the status checks
*/
"contexts": S.Array(S.String)
}),
/**
* The name of the status checks
*/
S.Array(S.String)) {}

export class ReposRemoveStatusCheckContexts200 extends S.Array(S.String) {}

export class ReposGetAccessRestrictionsParams extends S.Struct({
  
}) {}

export class ReposDeleteAccessRestrictionsParams extends S.Struct({
  
}) {}

export class ReposGetAppsWithAccessToProtectedBranchParams extends S.Struct({
  
}) {}

export class ReposGetAppsWithAccessToProtectedBranch200 extends S.Array(Integration) {}

export class ReposSetAppAccessRestrictionsParams extends S.Struct({
  
}) {}

export class ReposSetAppAccessRestrictionsRequest extends S.Class<ReposSetAppAccessRestrictionsRequest>("ReposSetAppAccessRestrictionsRequest")({
  /**
* The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
*/
"apps": S.Array(S.String)
}) {}

export class ReposSetAppAccessRestrictions200 extends S.Array(Integration) {}

export class ReposAddAppAccessRestrictionsParams extends S.Struct({
  
}) {}

export class ReposAddAppAccessRestrictionsRequest extends S.Class<ReposAddAppAccessRestrictionsRequest>("ReposAddAppAccessRestrictionsRequest")({
  /**
* The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
*/
"apps": S.Array(S.String)
}) {}

export class ReposAddAppAccessRestrictions200 extends S.Array(Integration) {}

export class ReposRemoveAppAccessRestrictionsParams extends S.Struct({
  
}) {}

export class ReposRemoveAppAccessRestrictionsRequest extends S.Class<ReposRemoveAppAccessRestrictionsRequest>("ReposRemoveAppAccessRestrictionsRequest")({
  /**
* The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
*/
"apps": S.Array(S.String)
}) {}

export class ReposRemoveAppAccessRestrictions200 extends S.Array(Integration) {}

export class ReposGetTeamsWithAccessToProtectedBranchParams extends S.Struct({
  
}) {}

export class ReposGetTeamsWithAccessToProtectedBranch200 extends S.Array(Team) {}

export class ReposSetTeamAccessRestrictionsParams extends S.Struct({
  
}) {}

export class ReposSetTeamAccessRestrictionsRequest extends S.Union(S.Struct({
  /**
* The slug values for teams
*/
"teams": S.Array(S.String)
}),
/**
* The slug values for teams
*/
S.Array(S.String)) {}

export class ReposSetTeamAccessRestrictions200 extends S.Array(Team) {}

export class ReposAddTeamAccessRestrictionsParams extends S.Struct({
  
}) {}

export class ReposAddTeamAccessRestrictionsRequest extends S.Union(S.Struct({
  /**
* The slug values for teams
*/
"teams": S.Array(S.String)
}),
/**
* The slug values for teams
*/
S.Array(S.String)) {}

export class ReposAddTeamAccessRestrictions200 extends S.Array(Team) {}

export class ReposRemoveTeamAccessRestrictionsParams extends S.Struct({
  
}) {}

export class ReposRemoveTeamAccessRestrictionsRequest extends S.Union(S.Struct({
  /**
* The slug values for teams
*/
"teams": S.Array(S.String)
}),
/**
* The slug values for teams
*/
S.Array(S.String)) {}

export class ReposRemoveTeamAccessRestrictions200 extends S.Array(Team) {}

export class ReposGetUsersWithAccessToProtectedBranchParams extends S.Struct({
  
}) {}

export class ReposGetUsersWithAccessToProtectedBranch200 extends S.Array(SimpleUser) {}

export class ReposSetUserAccessRestrictionsParams extends S.Struct({
  
}) {}

export class ReposSetUserAccessRestrictionsRequest extends S.Class<ReposSetUserAccessRestrictionsRequest>("ReposSetUserAccessRestrictionsRequest")({
  /**
* The username for users
*/
"users": S.Array(S.String)
}) {}

export class ReposSetUserAccessRestrictions200 extends S.Array(SimpleUser) {}

export class ReposAddUserAccessRestrictionsParams extends S.Struct({
  
}) {}

export class ReposAddUserAccessRestrictionsRequest extends S.Class<ReposAddUserAccessRestrictionsRequest>("ReposAddUserAccessRestrictionsRequest")({
  /**
* The username for users
*/
"users": S.Array(S.String)
}) {}

export class ReposAddUserAccessRestrictions200 extends S.Array(SimpleUser) {}

export class ReposRemoveUserAccessRestrictionsParams extends S.Struct({
  
}) {}

export class ReposRemoveUserAccessRestrictionsRequest extends S.Class<ReposRemoveUserAccessRestrictionsRequest>("ReposRemoveUserAccessRestrictionsRequest")({
  /**
* The username for users
*/
"users": S.Array(S.String)
}) {}

export class ReposRemoveUserAccessRestrictions200 extends S.Array(SimpleUser) {}

export class ReposRenameBranchParams extends S.Struct({
  
}) {}

export class ReposRenameBranchRequest extends S.Class<ReposRenameBranchRequest>("ReposRenameBranchRequest")({
  /**
* The new name of the branch.
*/
"new_name": S.String
}) {}

export class ChecksCreateParams extends S.Struct({
  
}) {}

/**
* The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
*/
export class ChecksCreateRequestStatus extends S.Literal("queued", "in_progress", "completed", "waiting", "requested", "pending") {}

/**
* **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. 
* **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
*/
export class ChecksCreateRequestConclusion extends S.Literal("action_required", "cancelled", "failure", "neutral", "success", "skipped", "stale", "timed_out") {}

export class ChecksCreateRequest extends S.Class<ChecksCreateRequest>("ChecksCreateRequest")({
  /**
* The name of the check. For example, "code-coverage".
*/
"name": S.String,
  /**
* The SHA of the commit.
*/
"head_sha": S.String,
  /**
* The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.
*/
"details_url": S.optionalWith(S.String, { nullable: true }),
  /**
* A reference for the run on the integrator's system.
*/
"external_id": S.optionalWith(S.String, { nullable: true }),
  /**
* The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
*/
"status": S.optionalWith(ChecksCreateRequestStatus, { nullable: true, default: () => "queued" as const }),
  /**
* The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
"started_at": S.optionalWith(S.String, { nullable: true }),
  /**
* **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. 
* **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
*/
"conclusion": S.optionalWith(ChecksCreateRequestConclusion, { nullable: true }),
  /**
* The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
"completed_at": S.optionalWith(S.String, { nullable: true }),
  /**
* Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.
*/
"output": S.optionalWith(S.Struct({
  /**
* The title of the check run.
*/
"title": S.String,
  /**
* The summary of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.
*/
"summary": S.String.pipe(S.maxLength(65535)),
  /**
* The details of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.
*/
"text": S.optionalWith(S.String.pipe(S.maxLength(65535)), { nullable: true }),
  /**
* Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/checks/runs#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. GitHub Actions are limited to 10 warning annotations and 10 error annotations per step. For details about how you can view annotations on GitHub, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)".
*/
"annotations": S.optionalWith(S.Array(S.Struct({
  /**
* The path of the file to add an annotation to. For example, `assets/css/main.css`.
*/
"path": S.String,
  /**
* The start line of the annotation. Line numbers start at 1.
*/
"start_line": S.Int,
  /**
* The end line of the annotation.
*/
"end_line": S.Int,
  /**
* The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1.
*/
"start_column": S.optionalWith(S.Int, { nullable: true }),
  /**
* The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
*/
"end_column": S.optionalWith(S.Int, { nullable: true }),
  /**
* The level of the annotation.
*/
"annotation_level": S.Literal("notice", "warning", "failure"),
  /**
* A short description of the feedback for these lines of code. The maximum size is 64 KB.
*/
"message": S.String,
  /**
* The title that represents the annotation. The maximum size is 255 characters.
*/
"title": S.optionalWith(S.String, { nullable: true }),
  /**
* Details about this annotation. The maximum size is 64 KB.
*/
"raw_details": S.optionalWith(S.String, { nullable: true })
})).pipe(S.maxItems(50)), { nullable: true }),
  /**
* Adds images to the output displayed in the GitHub pull request UI.
*/
"images": S.optionalWith(S.Array(S.Struct({
  /**
* The alternative text for the image.
*/
"alt": S.String,
  /**
* The full URL of the image.
*/
"image_url": S.String,
  /**
* A short image description.
*/
"caption": S.optionalWith(S.String, { nullable: true })
})), { nullable: true })
}), { nullable: true }),
  /**
* Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions)."
*/
"actions": S.optionalWith(S.Array(S.Struct({
  /**
* The text to be displayed on a button in the web UI. The maximum size is 20 characters.
*/
"label": S.String.pipe(S.maxLength(20)),
  /**
* A short explanation of what this action would do. The maximum size is 40 characters.
*/
"description": S.String.pipe(S.maxLength(40)),
  /**
* A reference for the action on the integrator's system. The maximum size is 20 characters.
*/
"identifier": S.String.pipe(S.maxLength(20))
})).pipe(S.maxItems(3)), { nullable: true })
}) {}

/**
* The phase of the lifecycle that the check is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check runs.
*/
export class CheckRunStatus extends S.Literal("queued", "in_progress", "completed", "waiting", "requested", "pending") {}

export class CheckRunConclusion extends S.Literal("success", "failure", "neutral", "cancelled", "skipped", "timed_out", "action_required") {}

/**
* A deployment created as the result of an Actions check run from a workflow that references an environment
*/
export class DeploymentSimple extends S.Class<DeploymentSimple>("DeploymentSimple")({
  "url": S.String,
  /**
* Unique identifier of the deployment
*/
"id": S.Int,
  "node_id": S.String,
  /**
* Parameter to specify a task to execute
*/
"task": S.String,
  "original_environment": S.optionalWith(S.String, { nullable: true }),
  /**
* Name for the target deployment environment.
*/
"environment": S.String,
  "description": S.NullOr(S.String),
  "created_at": S.String,
  "updated_at": S.String,
  "statuses_url": S.String,
  "repository_url": S.String,
  /**
* Specifies if the given environment is will no longer exist at some point in the future. Default: false.
*/
"transient_environment": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Specifies if the given environment is one that end-users directly interact with. Default: false.
*/
"production_environment": S.optionalWith(S.Boolean, { nullable: true }),
  "performed_via_github_app": S.optionalWith(NullableIntegration, { nullable: true })
}) {}

/**
* A check performed on the code of a given code change
*/
export class CheckRun extends S.Class<CheckRun>("CheckRun")({
  /**
* The id of the check.
*/
"id": S.Int,
  /**
* The SHA of the commit that is being checked.
*/
"head_sha": S.String,
  "node_id": S.String,
  "external_id": S.NullOr(S.String),
  "url": S.String,
  "html_url": S.NullOr(S.String),
  "details_url": S.NullOr(S.String),
  /**
* The phase of the lifecycle that the check is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check runs.
*/
"status": CheckRunStatus,
  "conclusion": S.NullOr(CheckRunConclusion),
  "started_at": S.NullOr(S.String),
  "completed_at": S.NullOr(S.String),
  "output": S.Struct({
  "title": S.NullOr(S.String),
  "summary": S.NullOr(S.String),
  "text": S.NullOr(S.String),
  "annotations_count": S.Int,
  "annotations_url": S.String
}),
  /**
* The name of the check.
*/
"name": S.String,
  "check_suite": S.NullOr(S.Struct({
  "id": S.Int
})),
  "app": S.NullOr(NullableIntegration),
  /**
* Pull requests that are open with a `head_sha` or `head_branch` that matches the check. The returned pull requests do not necessarily indicate pull requests that triggered the check.
*/
"pull_requests": S.Array(PullRequestMinimal),
  "deployment": S.optionalWith(DeploymentSimple, { nullable: true })
}) {}

export class ChecksGetParams extends S.Struct({
  
}) {}

export class ChecksUpdateParams extends S.Struct({
  
}) {}

/**
* The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
*/
export class ChecksUpdateRequestStatus extends S.Literal("queued", "in_progress", "completed", "waiting", "requested", "pending") {}

/**
* **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. 
* **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
*/
export class ChecksUpdateRequestConclusion extends S.Literal("action_required", "cancelled", "failure", "neutral", "success", "skipped", "stale", "timed_out") {}

export class ChecksUpdateRequest extends S.Class<ChecksUpdateRequest>("ChecksUpdateRequest")({
  /**
* The name of the check. For example, "code-coverage".
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The URL of the integrator's site that has the full details of the check.
*/
"details_url": S.optionalWith(S.String, { nullable: true }),
  /**
* A reference for the run on the integrator's system.
*/
"external_id": S.optionalWith(S.String, { nullable: true }),
  /**
* This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
"started_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
*/
"status": S.optionalWith(ChecksUpdateRequestStatus, { nullable: true }),
  /**
* **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. 
* **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
*/
"conclusion": S.optionalWith(ChecksUpdateRequestConclusion, { nullable: true }),
  /**
* The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
"completed_at": S.optionalWith(S.String, { nullable: true }),
  /**
* Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.
*/
"output": S.optionalWith(S.Struct({
  /**
* **Required**.
*/
"title": S.optionalWith(S.String, { nullable: true }),
  /**
* Can contain Markdown.
*/
"summary": S.String.pipe(S.maxLength(65535)),
  /**
* Can contain Markdown.
*/
"text": S.optionalWith(S.String.pipe(S.maxLength(65535)), { nullable: true }),
  /**
* Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/checks/runs#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. GitHub Actions are limited to 10 warning annotations and 10 error annotations per step. For details about annotations in the UI, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)".
*/
"annotations": S.optionalWith(S.Array(S.Struct({
  /**
* The path of the file to add an annotation to. For example, `assets/css/main.css`.
*/
"path": S.String,
  /**
* The start line of the annotation. Line numbers start at 1.
*/
"start_line": S.Int,
  /**
* The end line of the annotation.
*/
"end_line": S.Int,
  /**
* The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1.
*/
"start_column": S.optionalWith(S.Int, { nullable: true }),
  /**
* The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
*/
"end_column": S.optionalWith(S.Int, { nullable: true }),
  /**
* The level of the annotation.
*/
"annotation_level": S.Literal("notice", "warning", "failure"),
  /**
* A short description of the feedback for these lines of code. The maximum size is 64 KB.
*/
"message": S.String,
  /**
* The title that represents the annotation. The maximum size is 255 characters.
*/
"title": S.optionalWith(S.String, { nullable: true }),
  /**
* Details about this annotation. The maximum size is 64 KB.
*/
"raw_details": S.optionalWith(S.String, { nullable: true })
})).pipe(S.maxItems(50)), { nullable: true }),
  /**
* Adds images to the output displayed in the GitHub pull request UI.
*/
"images": S.optionalWith(S.Array(S.Struct({
  /**
* The alternative text for the image.
*/
"alt": S.String,
  /**
* The full URL of the image.
*/
"image_url": S.String,
  /**
* A short image description.
*/
"caption": S.optionalWith(S.String, { nullable: true })
})), { nullable: true })
}), { nullable: true }),
  /**
* Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions)."
*/
"actions": S.optionalWith(S.Array(S.Struct({
  /**
* The text to be displayed on a button in the web UI. The maximum size is 20 characters.
*/
"label": S.String.pipe(S.maxLength(20)),
  /**
* A short explanation of what this action would do. The maximum size is 40 characters.
*/
"description": S.String.pipe(S.maxLength(40)),
  /**
* A reference for the action on the integrator's system. The maximum size is 20 characters.
*/
"identifier": S.String.pipe(S.maxLength(20))
})).pipe(S.maxItems(3)), { nullable: true })
}) {}

export class ChecksListAnnotationsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Check Annotation
*/
export class CheckAnnotation extends S.Class<CheckAnnotation>("CheckAnnotation")({
  "path": S.String,
  "start_line": S.Int,
  "end_line": S.Int,
  "start_column": S.NullOr(S.Int),
  "end_column": S.NullOr(S.Int),
  "annotation_level": S.NullOr(S.String),
  "title": S.NullOr(S.String),
  "message": S.NullOr(S.String),
  "raw_details": S.NullOr(S.String),
  "blob_href": S.String
}) {}

export class ChecksListAnnotations200 extends S.Array(CheckAnnotation) {}

export class ChecksRerequestRunParams extends S.Struct({
  
}) {}

export class ChecksCreateSuiteParams extends S.Struct({
  
}) {}

export class ChecksCreateSuiteRequest extends S.Class<ChecksCreateSuiteRequest>("ChecksCreateSuiteRequest")({
  /**
* The sha of the head commit.
*/
"head_sha": S.String
}) {}

/**
* The phase of the lifecycle that the check suite is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check suites.
*/
export class CheckSuiteStatus extends S.Literal("queued", "in_progress", "completed", "waiting", "requested", "pending") {}

export class CheckSuiteConclusion extends S.Literal("success", "failure", "neutral", "cancelled", "skipped", "timed_out", "action_required", "startup_failure", "stale", null) {}

/**
* A commit.
*/
export class SimpleCommit extends S.Class<SimpleCommit>("SimpleCommit")({
  /**
* SHA for the commit
*/
"id": S.String,
  /**
* SHA for the commit's tree
*/
"tree_id": S.String,
  /**
* Message describing the purpose of the commit
*/
"message": S.String,
  /**
* Timestamp of the commit
*/
"timestamp": S.String,
  /**
* Information about the Git author
*/
"author": S.NullOr(S.Struct({
  /**
* Name of the commit's author
*/
"name": S.String,
  /**
* Git email address of the commit's author
*/
"email": S.String
})),
  /**
* Information about the Git committer
*/
"committer": S.NullOr(S.Struct({
  /**
* Name of the commit's committer
*/
"name": S.String,
  /**
* Git email address of the commit's committer
*/
"email": S.String
}))
}) {}

/**
* A suite of checks performed on the code of a given code change
*/
export class CheckSuite extends S.Class<CheckSuite>("CheckSuite")({
  "id": S.Int,
  "node_id": S.String,
  "head_branch": S.NullOr(S.String),
  /**
* The SHA of the head commit that is being checked.
*/
"head_sha": S.String,
  /**
* The phase of the lifecycle that the check suite is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check suites.
*/
"status": S.NullOr(CheckSuiteStatus),
  "conclusion": S.NullOr(CheckSuiteConclusion),
  "url": S.NullOr(S.String),
  "before": S.NullOr(S.String),
  "after": S.NullOr(S.String),
  "pull_requests": S.NullOr(S.Array(PullRequestMinimal)),
  "app": S.NullOr(NullableIntegration),
  "repository": MinimalRepository,
  "created_at": S.NullOr(S.String),
  "updated_at": S.NullOr(S.String),
  "head_commit": SimpleCommit,
  "latest_check_runs_count": S.Int,
  "check_runs_url": S.String,
  "rerequestable": S.optionalWith(S.Boolean, { nullable: true }),
  "runs_rerequestable": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class ChecksSetSuitesPreferencesParams extends S.Struct({
  
}) {}

export class ChecksSetSuitesPreferencesRequest extends S.Class<ChecksSetSuitesPreferencesRequest>("ChecksSetSuitesPreferencesRequest")({
  /**
* Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default.
*/
"auto_trigger_checks": S.optionalWith(S.Array(S.Struct({
  /**
* The `id` of the GitHub App.
*/
"app_id": S.Int,
  /**
* Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
*/
"setting": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => true as const))
})), { nullable: true })
}) {}

/**
* Check suite configuration preferences for a repository.
*/
export class CheckSuitePreference extends S.Class<CheckSuitePreference>("CheckSuitePreference")({
  "preferences": S.Struct({
  "auto_trigger_checks": S.optionalWith(S.Array(S.Struct({
  "app_id": S.Int,
  "setting": S.Boolean
})), { nullable: true })
}),
  "repository": MinimalRepository
}) {}

export class ChecksGetSuiteParams extends S.Struct({
  
}) {}

export class ChecksListForSuiteParamsStatus extends S.Literal("queued", "in_progress", "completed") {}

export class ChecksListForSuiteParamsFilter extends S.Literal("latest", "all") {}

export class ChecksListForSuiteParams extends S.Struct({
  "check_name": S.optionalWith(S.String, { nullable: true }),
  "status": S.optionalWith(ChecksListForSuiteParamsStatus, { nullable: true }),
  "filter": S.optionalWith(ChecksListForSuiteParamsFilter, { nullable: true, default: () => "latest" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ChecksListForSuite200 extends S.Struct({
  "total_count": S.Int,
  "check_runs": S.Array(CheckRun)
}) {}

export class ChecksRerequestSuiteParams extends S.Struct({
  
}) {}

export class CodeScanningListAlertsForRepoParamsDirection extends S.Literal("asc", "desc") {}

export class CodeScanningListAlertsForRepoParamsSort extends S.Literal("created", "updated") {}

export class CodeScanningListAlertsForRepoParams extends S.Struct({
  "tool_name": S.optionalWith(CodeScanningAnalysisToolName, { nullable: true }),
  "tool_guid": S.optionalWith(CodeScanningAnalysisToolGuid, { nullable: true }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "ref": S.optionalWith(CodeScanningRef, { nullable: true }),
  "pr": S.optionalWith(S.Int, { nullable: true }),
  "direction": S.optionalWith(CodeScanningListAlertsForRepoParamsDirection, { nullable: true, default: () => "desc" as const }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(CodeScanningListAlertsForRepoParamsSort, { nullable: true, default: () => "created" as const }),
  "state": S.optionalWith(CodeScanningAlertStateQuery, { nullable: true }),
  "severity": S.optionalWith(CodeScanningAlertSeverity, { nullable: true })
}) {}

export class CodeScanningAlertItems extends S.Class<CodeScanningAlertItems>("CodeScanningAlertItems")({
  "number": AlertNumber,
  "created_at": AlertCreatedAt,
  "updated_at": S.optionalWith(AlertUpdatedAt, { nullable: true }),
  "url": AlertUrl,
  "html_url": AlertHtmlUrl,
  "instances_url": AlertInstancesUrl,
  "state": S.NullOr(CodeScanningAlertState),
  "fixed_at": S.optionalWith(AlertFixedAt, { nullable: true }),
  "dismissed_by": S.NullOr(NullableSimpleUser),
  "dismissed_at": S.NullOr(AlertDismissedAt),
  "dismissed_reason": S.NullOr(CodeScanningAlertDismissedReason),
  "dismissed_comment": S.optionalWith(CodeScanningAlertDismissedComment, { nullable: true }),
  "rule": CodeScanningAlertRuleSummary,
  "tool": CodeScanningAnalysisTool,
  "most_recent_instance": CodeScanningAlertInstance,
  "dismissal_approved_by": S.optionalWith(NullableSimpleUser, { nullable: true })
}) {}

export class CodeScanningListAlertsForRepo200 extends S.Array(CodeScanningAlertItems) {}

export class CodeScanningListAlertsForRepo503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningGetAlertParams extends S.Struct({
  
}) {}

/**
* The severity of the alert.
*/
export class CodeScanningAlertRuleSeverity extends S.Literal("none", "note", "warning", "error") {}

/**
* The security severity of the alert.
*/
export class CodeScanningAlertRuleSecuritySeverityLevel extends S.Literal("low", "medium", "high", "critical") {}

export class CodeScanningAlertRule extends S.Class<CodeScanningAlertRule>("CodeScanningAlertRule")({
  /**
* A unique identifier for the rule used to detect the alert.
*/
"id": S.optionalWith(S.String, { nullable: true }),
  /**
* The name of the rule used to detect the alert.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The severity of the alert.
*/
"severity": S.optionalWith(CodeScanningAlertRuleSeverity, { nullable: true }),
  /**
* The security severity of the alert.
*/
"security_severity_level": S.optionalWith(CodeScanningAlertRuleSecuritySeverityLevel, { nullable: true }),
  /**
* A short description of the rule used to detect the alert.
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* A description of the rule used to detect the alert.
*/
"full_description": S.optionalWith(S.String, { nullable: true }),
  /**
* A set of tags applicable for the rule.
*/
"tags": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* Detailed documentation for the rule as GitHub Flavored Markdown.
*/
"help": S.optionalWith(S.String, { nullable: true }),
  /**
* A link to the documentation for the rule used to detect the alert.
*/
"help_uri": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningAlert extends S.Class<CodeScanningAlert>("CodeScanningAlert")({
  "number": AlertNumber,
  "created_at": AlertCreatedAt,
  "updated_at": S.optionalWith(AlertUpdatedAt, { nullable: true }),
  "url": AlertUrl,
  "html_url": AlertHtmlUrl,
  "instances_url": AlertInstancesUrl,
  "state": S.NullOr(CodeScanningAlertState),
  "fixed_at": S.optionalWith(AlertFixedAt, { nullable: true }),
  "dismissed_by": S.NullOr(NullableSimpleUser),
  "dismissed_at": S.NullOr(AlertDismissedAt),
  "dismissed_reason": S.NullOr(CodeScanningAlertDismissedReason),
  "dismissed_comment": S.optionalWith(CodeScanningAlertDismissedComment, { nullable: true }),
  "rule": CodeScanningAlertRule,
  "tool": CodeScanningAnalysisTool,
  "most_recent_instance": CodeScanningAlertInstance,
  "dismissal_approved_by": S.optionalWith(NullableSimpleUser, { nullable: true })
}) {}

export class CodeScanningGetAlert503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningUpdateAlertParams extends S.Struct({
  
}) {}

/**
* Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.
*/
export class CodeScanningAlertSetState extends S.Literal("open", "dismissed") {}

/**
* If `true`, attempt to create an alert dismissal request.
*/
export class CodeScanningAlertCreateRequest extends S.Boolean {}

export class CodeScanningUpdateAlertRequest extends S.Class<CodeScanningUpdateAlertRequest>("CodeScanningUpdateAlertRequest")({
  "state": CodeScanningAlertSetState,
  "dismissed_reason": S.optionalWith(CodeScanningAlertDismissedReason, { nullable: true }),
  "dismissed_comment": S.optionalWith(CodeScanningAlertDismissedComment, { nullable: true }),
  "create_request": S.optionalWith(CodeScanningAlertCreateRequest, { nullable: true })
}) {}

export class CodeScanningUpdateAlert503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningGetAutofixParams extends S.Struct({
  
}) {}

/**
* The status of an autofix.
*/
export class CodeScanningAutofixStatus extends S.Literal("pending", "error", "success", "outdated") {}

/**
* The description of an autofix.
*/
export class CodeScanningAutofixDescription extends S.String {}

/**
* The start time of an autofix in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
export class CodeScanningAutofixStartedAt extends S.String {}

export class CodeScanningAutofix extends S.Class<CodeScanningAutofix>("CodeScanningAutofix")({
  "status": CodeScanningAutofixStatus,
  "description": S.NullOr(CodeScanningAutofixDescription),
  "started_at": CodeScanningAutofixStartedAt
}) {}

export class CodeScanningGetAutofix503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningCreateAutofixParams extends S.Struct({
  
}) {}

export class CodeScanningCreateAutofix503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningCommitAutofixParams extends S.Struct({
  
}) {}

/**
* Commit an autofix for a code scanning alert
*/
export class CodeScanningAutofixCommits extends S.Class<CodeScanningAutofixCommits>("CodeScanningAutofixCommits")({
  /**
* The Git reference of target branch for the commit. Branch needs to already exist.  For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
*/
"target_ref": S.optionalWith(S.String, { nullable: true }),
  /**
* Commit message to be used.
*/
"message": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningAutofixCommitsResponse extends S.Class<CodeScanningAutofixCommitsResponse>("CodeScanningAutofixCommitsResponse")({
  /**
* The Git reference of target branch for the commit. For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
*/
"target_ref": S.optionalWith(S.String, { nullable: true }),
  /**
* SHA of commit with autofix.
*/
"sha": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningCommitAutofix503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningListAlertInstancesParams extends S.Struct({
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "ref": S.optionalWith(CodeScanningRef, { nullable: true }),
  "pr": S.optionalWith(S.Int, { nullable: true })
}) {}

export class CodeScanningListAlertInstances200 extends S.Array(CodeScanningAlertInstance) {}

export class CodeScanningListAlertInstances503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* An identifier for the upload.
*/
export class CodeScanningAnalysisSarifId extends S.String {}

export class CodeScanningListRecentAnalysesParamsDirection extends S.Literal("asc", "desc") {}

export class CodeScanningListRecentAnalysesParamsSort extends S.Literal("created") {}

export class CodeScanningListRecentAnalysesParams extends S.Struct({
  "tool_name": S.optionalWith(CodeScanningAnalysisToolName, { nullable: true }),
  "tool_guid": S.optionalWith(CodeScanningAnalysisToolGuid, { nullable: true }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "pr": S.optionalWith(S.Int, { nullable: true }),
  "ref": S.optionalWith(CodeScanningRef, { nullable: true }),
  "sarif_id": S.optionalWith(CodeScanningAnalysisSarifId, { nullable: true }),
  "direction": S.optionalWith(CodeScanningListRecentAnalysesParamsDirection, { nullable: true, default: () => "desc" as const }),
  "sort": S.optionalWith(CodeScanningListRecentAnalysesParamsSort, { nullable: true, default: () => "created" as const })
}) {}

/**
* The SHA of the commit to which the analysis you are uploading relates.
*/
export class CodeScanningAnalysisCommitSha extends S.String.pipe(S.minLength(40), S.maxLength(40), S.pattern(new RegExp("^[0-9a-fA-F]+$"))) {}

/**
* Identifies the variable values associated with the environment in which this analysis was performed.
*/
export class CodeScanningAnalysisEnvironment extends S.String {}

/**
* The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
export class CodeScanningAnalysisCreatedAt extends S.String {}

/**
* The REST API URL of the analysis resource.
*/
export class CodeScanningAnalysisUrl extends S.String {}

export class CodeScanningAnalysis extends S.Class<CodeScanningAnalysis>("CodeScanningAnalysis")({
  "ref": CodeScanningRef,
  "commit_sha": CodeScanningAnalysisCommitSha,
  "analysis_key": CodeScanningAnalysisAnalysisKey,
  "environment": CodeScanningAnalysisEnvironment,
  "category": S.optionalWith(CodeScanningAnalysisCategory, { nullable: true }),
  "error": S.String,
  "created_at": CodeScanningAnalysisCreatedAt,
  /**
* The total number of results in the analysis.
*/
"results_count": S.Int,
  /**
* The total number of rules used in the analysis.
*/
"rules_count": S.Int,
  /**
* Unique identifier for this analysis.
*/
"id": S.Int,
  "url": CodeScanningAnalysisUrl,
  "sarif_id": CodeScanningAnalysisSarifId,
  "tool": CodeScanningAnalysisTool,
  "deletable": S.Boolean,
  /**
* Warning generated when processing the analysis
*/
"warning": S.String
}) {}

export class CodeScanningListRecentAnalyses200 extends S.Array(CodeScanningAnalysis) {}

export class CodeScanningListRecentAnalyses503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningGetAnalysisParams extends S.Struct({
  
}) {}

export class CodeScanningGetAnalysis503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningDeleteAnalysisParams extends S.Struct({
  "confirm_delete": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Successful deletion of a code scanning analysis
*/
export class CodeScanningAnalysisDeletion extends S.Class<CodeScanningAnalysisDeletion>("CodeScanningAnalysisDeletion")({
  /**
* Next deletable analysis in chain, without last analysis deletion confirmation
*/
"next_analysis_url": S.NullOr(S.String),
  /**
* Next deletable analysis in chain, with last analysis deletion confirmation
*/
"confirm_delete_url": S.NullOr(S.String)
}) {}

export class CodeScanningDeleteAnalysis503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningListCodeqlDatabasesParams extends S.Struct({
  
}) {}

/**
* A CodeQL database.
*/
export class CodeScanningCodeqlDatabase extends S.Class<CodeScanningCodeqlDatabase>("CodeScanningCodeqlDatabase")({
  /**
* The ID of the CodeQL database.
*/
"id": S.Int,
  /**
* The name of the CodeQL database.
*/
"name": S.String,
  /**
* The language of the CodeQL database.
*/
"language": S.String,
  "uploader": SimpleUser,
  /**
* The MIME type of the CodeQL database file.
*/
"content_type": S.String,
  /**
* The size of the CodeQL database file in bytes.
*/
"size": S.Int,
  /**
* The date and time at which the CodeQL database was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
"created_at": S.String,
  /**
* The date and time at which the CodeQL database was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
"updated_at": S.String,
  /**
* The URL at which to download the CodeQL database. The `Accept` header must be set to the value of the `content_type` property.
*/
"url": S.String,
  /**
* The commit SHA of the repository at the time the CodeQL database was created.
*/
"commit_oid": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningListCodeqlDatabases200 extends S.Array(CodeScanningCodeqlDatabase) {}

export class CodeScanningListCodeqlDatabases503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningGetCodeqlDatabaseParams extends S.Struct({
  
}) {}

export class CodeScanningGetCodeqlDatabase503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningDeleteCodeqlDatabaseParams extends S.Struct({
  
}) {}

export class CodeScanningDeleteCodeqlDatabase503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningCreateVariantAnalysisParams extends S.Struct({
  
}) {}

/**
* The language targeted by the CodeQL query
*/
export class CodeScanningVariantAnalysisLanguage extends S.Literal("cpp", "csharp", "go", "java", "javascript", "python", "ruby", "rust", "swift") {}

export class CodeScanningCreateVariantAnalysisRequest extends S.Class<CodeScanningCreateVariantAnalysisRequest>("CodeScanningCreateVariantAnalysisRequest")({
  "language": CodeScanningVariantAnalysisLanguage,
  /**
* A Base64-encoded tarball containing a CodeQL query and all its dependencies
*/
"query_pack": S.String,
  /**
* List of repository names (in the form `owner/repo-name`) to run the query against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.
*/
"repositories": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* List of repository lists to run the query against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.
*/
"repository_lists": S.optionalWith(S.Array(S.String).pipe(S.maxItems(1)), { nullable: true }),
  /**
* List of organization or user names whose repositories the query should be run against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.
*/
"repository_owners": S.optionalWith(S.Array(S.String).pipe(S.maxItems(1)), { nullable: true })
}) {}

export class CodeScanningVariantAnalysisStatus extends S.Literal("in_progress", "succeeded", "failed", "cancelled") {}

/**
* The reason for a failure of the variant analysis. This is only available if the variant analysis has failed.
*/
export class CodeScanningVariantAnalysisFailureReason extends S.Literal("no_repos_queried", "actions_workflow_run_failed", "internal_error") {}

/**
* Repository Identifier
*/
export class CodeScanningVariantAnalysisRepository extends S.Class<CodeScanningVariantAnalysisRepository>("CodeScanningVariantAnalysisRepository")({
  /**
* A unique identifier of the repository.
*/
"id": S.Int,
  /**
* The name of the repository.
*/
"name": S.String,
  /**
* The full, globally unique, name of the repository.
*/
"full_name": S.String,
  /**
* Whether the repository is private.
*/
"private": S.Boolean,
  "stargazers_count": S.Int,
  "updated_at": S.NullOr(S.String)
}) {}

export class CodeScanningVariantAnalysisSkippedRepoGroup extends S.Class<CodeScanningVariantAnalysisSkippedRepoGroup>("CodeScanningVariantAnalysisSkippedRepoGroup")({
  /**
* The total number of repositories that were skipped for this reason.
*/
"repository_count": S.Int,
  /**
* A list of repositories that were skipped. This list may not include all repositories that were skipped. This is only available when the repository was found and the user has access to it.
*/
"repositories": S.Array(CodeScanningVariantAnalysisRepository)
}) {}

/**
* A run of a CodeQL query against one or more repositories.
*/
export class CodeScanningVariantAnalysis extends S.Class<CodeScanningVariantAnalysis>("CodeScanningVariantAnalysis")({
  /**
* The ID of the variant analysis.
*/
"id": S.Int,
  "controller_repo": SimpleRepository,
  "actor": SimpleUser,
  "query_language": CodeScanningVariantAnalysisLanguage,
  /**
* The download url for the query pack.
*/
"query_pack_url": S.String,
  /**
* The date and time at which the variant analysis was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
"created_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The date and time at which the variant analysis was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
"updated_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The date and time at which the variant analysis was completed, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ. Will be null if the variant analysis has not yet completed or this information is not available.
*/
"completed_at": S.optionalWith(S.String, { nullable: true }),
  "status": CodeScanningVariantAnalysisStatus,
  /**
* The GitHub Actions workflow run used to execute this variant analysis. This is only available if the workflow run has started.
*/
"actions_workflow_run_id": S.optionalWith(S.Int, { nullable: true }),
  /**
* The reason for a failure of the variant analysis. This is only available if the variant analysis has failed.
*/
"failure_reason": S.optionalWith(CodeScanningVariantAnalysisFailureReason, { nullable: true }),
  "scanned_repositories": S.optionalWith(S.Array(S.Struct({
  "repository": CodeScanningVariantAnalysisRepository,
  "analysis_status": CodeScanningVariantAnalysisStatus,
  /**
* The number of results in the case of a successful analysis. This is only available for successful analyses.
*/
"result_count": S.optionalWith(S.Int, { nullable: true }),
  /**
* The size of the artifact. This is only available for successful analyses.
*/
"artifact_size_in_bytes": S.optionalWith(S.Int, { nullable: true }),
  /**
* The reason of the failure of this repo task. This is only available if the repository task has failed.
*/
"failure_message": S.optionalWith(S.String, { nullable: true })
})), { nullable: true }),
  /**
* Information about repositories that were skipped from processing. This information is only available to the user that initiated the variant analysis.
*/
"skipped_repositories": S.optionalWith(S.Struct({
  "access_mismatch_repos": CodeScanningVariantAnalysisSkippedRepoGroup,
  "not_found_repos": S.Struct({
  /**
* The total number of repositories that were skipped for this reason.
*/
"repository_count": S.Int,
  /**
* A list of full repository names that were skipped. This list may not include all repositories that were skipped.
*/
"repository_full_names": S.Array(S.String)
}),
  "no_codeql_db_repos": CodeScanningVariantAnalysisSkippedRepoGroup,
  "over_limit_repos": CodeScanningVariantAnalysisSkippedRepoGroup
}), { nullable: true })
}) {}

export class CodeScanningCreateVariantAnalysis503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningGetVariantAnalysisParams extends S.Struct({
  
}) {}

export class CodeScanningGetVariantAnalysis503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningGetVariantAnalysisRepoTaskParams extends S.Struct({
  
}) {}

export class CodeScanningVariantAnalysisRepoTask extends S.Class<CodeScanningVariantAnalysisRepoTask>("CodeScanningVariantAnalysisRepoTask")({
  "repository": SimpleRepository,
  "analysis_status": CodeScanningVariantAnalysisStatus,
  /**
* The size of the artifact. This is only available for successful analyses.
*/
"artifact_size_in_bytes": S.optionalWith(S.Int, { nullable: true }),
  /**
* The number of results in the case of a successful analysis. This is only available for successful analyses.
*/
"result_count": S.optionalWith(S.Int, { nullable: true }),
  /**
* The reason of the failure of this repo task. This is only available if the repository task has failed.
*/
"failure_message": S.optionalWith(S.String, { nullable: true }),
  /**
* The SHA of the commit the CodeQL database was built against. This is only available for successful analyses.
*/
"database_commit_sha": S.optionalWith(S.String, { nullable: true }),
  /**
* The source location prefix to use. This is only available for successful analyses.
*/
"source_location_prefix": S.optionalWith(S.String, { nullable: true }),
  /**
* The URL of the artifact. This is only available for successful analyses.
*/
"artifact_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningGetVariantAnalysisRepoTask503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningGetDefaultSetupParams extends S.Struct({
  
}) {}

/**
* Code scanning default setup has been configured or not.
*/
export class CodeScanningDefaultSetupState extends S.Literal("configured", "not-configured") {}

/**
* Runner type to be used.
*/
export class CodeScanningDefaultSetupRunnerType extends S.Literal("standard", "labeled") {}

/**
* CodeQL query suite to be used.
*/
export class CodeScanningDefaultSetupQuerySuite extends S.Literal("default", "extended") {}

/**
* Threat model to be used for code scanning analysis. Use `remote` to analyze only network sources and `remote_and_local` to include local sources like filesystem access, command-line arguments, database reads, environment variable and standard input.
*/
export class CodeScanningDefaultSetupThreatModel extends S.Literal("remote", "remote_and_local") {}

/**
* The frequency of the periodic analysis.
*/
export class CodeScanningDefaultSetupSchedule extends S.Literal("weekly") {}

/**
* Configuration for code scanning default setup.
*/
export class CodeScanningDefaultSetup extends S.Class<CodeScanningDefaultSetup>("CodeScanningDefaultSetup")({
  /**
* Code scanning default setup has been configured or not.
*/
"state": S.optionalWith(CodeScanningDefaultSetupState, { nullable: true }),
  /**
* Languages to be analyzed.
*/
"languages": S.optionalWith(S.Array(S.Literal("actions", "c-cpp", "csharp", "go", "java-kotlin", "javascript-typescript", "javascript", "python", "ruby", "typescript", "swift")), { nullable: true }),
  /**
* Runner type to be used.
*/
"runner_type": S.optionalWith(CodeScanningDefaultSetupRunnerType, { nullable: true }),
  /**
* Runner label to be used if the runner type is labeled.
*/
"runner_label": S.optionalWith(S.String, { nullable: true }),
  /**
* CodeQL query suite to be used.
*/
"query_suite": S.optionalWith(CodeScanningDefaultSetupQuerySuite, { nullable: true }),
  /**
* Threat model to be used for code scanning analysis. Use `remote` to analyze only network sources and `remote_and_local` to include local sources like filesystem access, command-line arguments, database reads, environment variable and standard input.
*/
"threat_model": S.optionalWith(CodeScanningDefaultSetupThreatModel, { nullable: true }),
  /**
* Timestamp of latest configuration update.
*/
"updated_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The frequency of the periodic analysis.
*/
"schedule": S.optionalWith(CodeScanningDefaultSetupSchedule, { nullable: true })
}) {}

export class CodeScanningGetDefaultSetup503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningUpdateDefaultSetupParams extends S.Struct({
  
}) {}

/**
* The desired state of code scanning default setup.
*/
export class CodeScanningDefaultSetupUpdateState extends S.Literal("configured", "not-configured") {}

/**
* Runner type to be used.
*/
export class CodeScanningDefaultSetupUpdateRunnerType extends S.Literal("standard", "labeled") {}

/**
* CodeQL query suite to be used.
*/
export class CodeScanningDefaultSetupUpdateQuerySuite extends S.Literal("default", "extended") {}

/**
* Threat model to be used for code scanning analysis. Use `remote` to analyze only network sources and `remote_and_local` to include local sources like filesystem access, command-line arguments, database reads, environment variable and standard input.
*/
export class CodeScanningDefaultSetupUpdateThreatModel extends S.Literal("remote", "remote_and_local") {}

/**
* Configuration for code scanning default setup.
*/
export class CodeScanningDefaultSetupUpdate extends S.Class<CodeScanningDefaultSetupUpdate>("CodeScanningDefaultSetupUpdate")({
  /**
* The desired state of code scanning default setup.
*/
"state": S.optionalWith(CodeScanningDefaultSetupUpdateState, { nullable: true }),
  /**
* Runner type to be used.
*/
"runner_type": S.optionalWith(CodeScanningDefaultSetupUpdateRunnerType, { nullable: true }),
  /**
* Runner label to be used if the runner type is labeled.
*/
"runner_label": S.optionalWith(S.String, { nullable: true }),
  /**
* CodeQL query suite to be used.
*/
"query_suite": S.optionalWith(CodeScanningDefaultSetupUpdateQuerySuite, { nullable: true }),
  /**
* Threat model to be used for code scanning analysis. Use `remote` to analyze only network sources and `remote_and_local` to include local sources like filesystem access, command-line arguments, database reads, environment variable and standard input.
*/
"threat_model": S.optionalWith(CodeScanningDefaultSetupUpdateThreatModel, { nullable: true }),
  /**
* CodeQL languages to be analyzed.
*/
"languages": S.optionalWith(S.Array(S.Literal("actions", "c-cpp", "csharp", "go", "java-kotlin", "javascript-typescript", "python", "ruby", "swift")), { nullable: true })
}) {}

/**
* You can use `run_url` to track the status of the run. This includes a property status and conclusion.
* You should not rely on this always being an actions workflow run object.
*/
export class CodeScanningDefaultSetupUpdateResponse extends S.Class<CodeScanningDefaultSetupUpdateResponse>("CodeScanningDefaultSetupUpdateResponse")({
  /**
* ID of the corresponding run.
*/
"run_id": S.optionalWith(S.Int, { nullable: true }),
  /**
* URL of the corresponding run.
*/
"run_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningUpdateDefaultSetup503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningUploadSarifParams extends S.Struct({
  
}) {}

/**
* The full Git reference, formatted as `refs/heads/<branch name>`,
* `refs/tags/<tag>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
*/
export class CodeScanningRefFull extends S.String.pipe(S.pattern(new RegExp("^refs/(heads|tags|pull)/.*$"))) {}

/**
* A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)."
*/
export class CodeScanningAnalysisSarifFile extends S.String {}

export class CodeScanningUploadSarifRequest extends S.Class<CodeScanningUploadSarifRequest>("CodeScanningUploadSarifRequest")({
  "commit_sha": CodeScanningAnalysisCommitSha,
  "ref": CodeScanningRefFull,
  "sarif": CodeScanningAnalysisSarifFile,
  /**
* The base directory used in the analysis, as it appears in the SARIF file.
* This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
*/
"checkout_uri": S.optionalWith(S.String, { nullable: true }),
  /**
* The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
"started_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
*/
"tool_name": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether the SARIF file will be validated according to the code scanning specifications.
* This parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning.
*/
"validate": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class CodeScanningSarifsReceipt extends S.Class<CodeScanningSarifsReceipt>("CodeScanningSarifsReceipt")({
  "id": S.optionalWith(CodeScanningAnalysisSarifId, { nullable: true }),
  /**
* The REST API URL for checking the status of the upload.
*/
"url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningUploadSarif503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeScanningGetSarifParams extends S.Struct({
  
}) {}

/**
* `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.
*/
export class CodeScanningSarifsStatusProcessingStatus extends S.Literal("pending", "complete", "failed") {}

export class CodeScanningSarifsStatus extends S.Class<CodeScanningSarifsStatus>("CodeScanningSarifsStatus")({
  /**
* `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.
*/
"processing_status": S.optionalWith(CodeScanningSarifsStatusProcessingStatus, { nullable: true }),
  /**
* The REST API URL for getting the analyses associated with the upload.
*/
"analyses_url": S.optionalWith(S.String, { nullable: true }),
  /**
* Any errors that ocurred during processing of the delivery.
*/
"errors": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class CodeScanningGetSarif503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodeSecurityGetConfigurationForRepositoryParams extends S.Struct({
  
}) {}

/**
* The attachment status of the code security configuration on the repository.
*/
export class CodeSecurityConfigurationForRepositoryStatus extends S.Literal("attached", "attaching", "detached", "removed", "enforced", "failed", "updating", "removed_by_enterprise") {}

/**
* Code security configuration associated with a repository and attachment status
*/
export class CodeSecurityConfigurationForRepository extends S.Class<CodeSecurityConfigurationForRepository>("CodeSecurityConfigurationForRepository")({
  /**
* The attachment status of the code security configuration on the repository.
*/
"status": S.optionalWith(CodeSecurityConfigurationForRepositoryStatus, { nullable: true }),
  "configuration": S.optionalWith(CodeSecurityConfiguration, { nullable: true })
}) {}

export class ReposCodeownersErrorsParams extends S.Struct({
  "ref": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* A list of errors found in a repo's CODEOWNERS file
*/
export class CodeownersErrors extends S.Class<CodeownersErrors>("CodeownersErrors")({
  "errors": S.Array(S.Struct({
  /**
* The line number where this errors occurs.
*/
"line": S.Int,
  /**
* The column number where this errors occurs.
*/
"column": S.Int,
  /**
* The contents of the line where the error occurs.
*/
"source": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of error.
*/
"kind": S.String,
  /**
* Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.
*/
"suggestion": S.optionalWith(S.String, { nullable: true }),
  /**
* A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
*/
"message": S.String,
  /**
* The path of the file where the error occured.
*/
"path": S.String
}))
}) {}

export class CodespacesListInRepositoryForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class CodespacesListInRepositoryForAuthenticatedUser200 extends S.Struct({
  "total_count": S.Int,
  "codespaces": S.Array(Codespace)
}) {}

export class CodespacesCreateWithRepoForAuthenticatedUserParams extends S.Struct({
  
}) {}

/**
* The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.
*/
export class CodespacesCreateWithRepoForAuthenticatedUserRequestGeo extends S.Literal("EuropeWest", "SoutheastAsia", "UsEast", "UsWest") {}

export class CodespacesCreateWithRepoForAuthenticatedUserRequest extends S.Class<CodespacesCreateWithRepoForAuthenticatedUserRequest>("CodespacesCreateWithRepoForAuthenticatedUserRequest")({
  /**
* Git ref (typically a branch name) for this codespace
*/
"ref": S.optionalWith(S.String, { nullable: true }),
  /**
* The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
*/
"location": S.optionalWith(S.String, { nullable: true }),
  /**
* The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.
*/
"geo": S.optionalWith(CodespacesCreateWithRepoForAuthenticatedUserRequestGeo, { nullable: true }),
  /**
* IP for location auto-detection when proxying a request
*/
"client_ip": S.optionalWith(S.String, { nullable: true }),
  /**
* Machine type to use for this codespace
*/
"machine": S.optionalWith(S.String, { nullable: true }),
  /**
* Path to devcontainer.json config to use for this codespace
*/
"devcontainer_path": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether to authorize requested permissions from devcontainer.json
*/
"multi_repo_permissions_opt_out": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Working directory for this codespace
*/
"working_directory": S.optionalWith(S.String, { nullable: true }),
  /**
* Time in minutes before codespace stops from inactivity
*/
"idle_timeout_minutes": S.optionalWith(S.Int, { nullable: true }),
  /**
* Display name for this codespace
*/
"display_name": S.optionalWith(S.String, { nullable: true }),
  /**
* Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
*/
"retention_period_minutes": S.optionalWith(S.Int, { nullable: true })
}) {}

export class CodespacesCreateWithRepoForAuthenticatedUser503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodespacesListDevcontainersInRepositoryForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class CodespacesListDevcontainersInRepositoryForAuthenticatedUser200 extends S.Struct({
  "total_count": S.Int,
  "devcontainers": S.Array(S.Struct({
  "path": S.String,
  "name": S.optionalWith(S.String, { nullable: true }),
  "display_name": S.optionalWith(S.String, { nullable: true })
}))
}) {}

export class CodespacesRepoMachinesForAuthenticatedUserParams extends S.Struct({
  "location": S.optionalWith(S.String, { nullable: true }),
  "client_ip": S.optionalWith(S.String, { nullable: true }),
  "ref": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
*/
export class CodespaceMachinePrebuildAvailability extends S.Literal("none", "ready", "in_progress") {}

/**
* A description of the machine powering a codespace.
*/
export class CodespaceMachine extends S.Class<CodespaceMachine>("CodespaceMachine")({
  /**
* The name of the machine.
*/
"name": S.String,
  /**
* The display name of the machine includes cores, memory, and storage.
*/
"display_name": S.String,
  /**
* The operating system of the machine.
*/
"operating_system": S.String,
  /**
* How much storage is available to the codespace.
*/
"storage_in_bytes": S.Int,
  /**
* How much memory is available to the codespace.
*/
"memory_in_bytes": S.Int,
  /**
* How many cores are available to the codespace.
*/
"cpus": S.Int,
  /**
* Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
*/
"prebuild_availability": S.NullOr(CodespaceMachinePrebuildAvailability)
}) {}

export class CodespacesRepoMachinesForAuthenticatedUser200 extends S.Struct({
  "total_count": S.Int,
  "machines": S.Array(CodespaceMachine)
}) {}

export class CodespacesPreFlightWithRepoForAuthenticatedUserParams extends S.Struct({
  "ref": S.optionalWith(S.String, { nullable: true }),
  "client_ip": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodespacesPreFlightWithRepoForAuthenticatedUser200 extends S.Struct({
  "billable_owner": S.optionalWith(SimpleUser, { nullable: true }),
  "defaults": S.optionalWith(S.Struct({
  "location": S.String,
  "devcontainer_path": S.NullOr(S.String)
}), { nullable: true })
}) {}

export class CodespacesCheckPermissionsForDevcontainerParams extends S.Struct({
  "ref": S.String,
  "devcontainer_path": S.String
}) {}

/**
* Permission check result for a given devcontainer config.
*/
export class CodespacesPermissionsCheckForDevcontainer extends S.Class<CodespacesPermissionsCheckForDevcontainer>("CodespacesPermissionsCheckForDevcontainer")({
  /**
* Whether the user has accepted the permissions defined by the devcontainer config
*/
"accepted": S.Boolean
}) {}

export class CodespacesCheckPermissionsForDevcontainer503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodespacesListRepoSecretsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Set repository secrets for GitHub Codespaces.
*/
export class RepoCodespacesSecret extends S.Class<RepoCodespacesSecret>("RepoCodespacesSecret")({
  /**
* The name of the secret.
*/
"name": S.String,
  "created_at": S.String,
  "updated_at": S.String
}) {}

export class CodespacesListRepoSecrets200 extends S.Struct({
  "total_count": S.Int,
  "secrets": S.Array(RepoCodespacesSecret)
}) {}

export class CodespacesGetRepoPublicKeyParams extends S.Struct({
  
}) {}

export class CodespacesGetRepoSecretParams extends S.Struct({
  
}) {}

export class CodespacesCreateOrUpdateRepoSecretParams extends S.Struct({
  
}) {}

export class CodespacesCreateOrUpdateRepoSecretRequest extends S.Class<CodespacesCreateOrUpdateRepoSecretRequest>("CodespacesCreateOrUpdateRepoSecretRequest")({
  /**
* Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/codespaces/repository-secrets#get-a-repository-public-key) endpoint.
*/
"encrypted_value": S.optionalWith(S.String.pipe(S.pattern(new RegExp("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"))), { nullable: true }),
  /**
* ID of the key you used to encrypt the secret.
*/
"key_id": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodespacesDeleteRepoSecretParams extends S.Struct({
  
}) {}

export class ReposListCollaboratorsParamsAffiliation extends S.Literal("outside", "direct", "all") {}

export class ReposListCollaboratorsParamsPermission extends S.Literal("pull", "triage", "push", "maintain", "admin") {}

export class ReposListCollaboratorsParams extends S.Struct({
  "affiliation": S.optionalWith(ReposListCollaboratorsParamsAffiliation, { nullable: true, default: () => "all" as const }),
  "permission": S.optionalWith(ReposListCollaboratorsParamsPermission, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Collaborator
*/
export class Collaborator extends S.Class<Collaborator>("Collaborator")({
  "login": S.String,
  "id": S.Int,
  "email": S.optionalWith(S.String, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "node_id": S.String,
  "avatar_url": S.String,
  "gravatar_id": S.NullOr(S.String),
  "url": S.String,
  "html_url": S.String,
  "followers_url": S.String,
  "following_url": S.String,
  "gists_url": S.String,
  "starred_url": S.String,
  "subscriptions_url": S.String,
  "organizations_url": S.String,
  "repos_url": S.String,
  "events_url": S.String,
  "received_events_url": S.String,
  "type": S.String,
  "site_admin": S.Boolean,
  "permissions": S.optionalWith(S.Struct({
  "pull": S.Boolean,
  "triage": S.optionalWith(S.Boolean, { nullable: true }),
  "push": S.Boolean,
  "maintain": S.optionalWith(S.Boolean, { nullable: true }),
  "admin": S.Boolean
}), { nullable: true }),
  "role_name": S.String,
  "user_view_type": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposListCollaborators200 extends S.Array(Collaborator) {}

export class ReposCheckCollaboratorParams extends S.Struct({
  
}) {}

export class ReposAddCollaboratorParams extends S.Struct({
  
}) {}

export class ReposAddCollaboratorRequest extends S.Class<ReposAddCollaboratorRequest>("ReposAddCollaboratorRequest")({
  /**
* The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.
*/
"permission": S.optionalWith(S.String, { nullable: true, default: () => "push" as const })
}) {}

/**
* The permission associated with the invitation.
*/
export class RepositoryInvitationPermissions extends S.Literal("read", "write", "admin", "triage", "maintain") {}

/**
* Repository invitations let you manage who you collaborate with.
*/
export class RepositoryInvitation extends S.Class<RepositoryInvitation>("RepositoryInvitation")({
  /**
* Unique identifier of the repository invitation.
*/
"id": S.Int,
  "repository": MinimalRepository,
  "invitee": S.NullOr(NullableSimpleUser),
  "inviter": S.NullOr(NullableSimpleUser),
  /**
* The permission associated with the invitation.
*/
"permissions": RepositoryInvitationPermissions,
  "created_at": S.String,
  /**
* Whether or not the invitation has expired
*/
"expired": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* URL for the repository invitation
*/
"url": S.String,
  "html_url": S.String,
  "node_id": S.String
}) {}

export class ReposRemoveCollaboratorParams extends S.Struct({
  
}) {}

export class ReposGetCollaboratorPermissionLevelParams extends S.Struct({
  
}) {}

/**
* Collaborator
*/
export class NullableCollaborator extends S.Class<NullableCollaborator>("NullableCollaborator")({
  "login": S.String,
  "id": S.Int,
  "email": S.optionalWith(S.String, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "node_id": S.String,
  "avatar_url": S.String,
  "gravatar_id": S.NullOr(S.String),
  "url": S.String,
  "html_url": S.String,
  "followers_url": S.String,
  "following_url": S.String,
  "gists_url": S.String,
  "starred_url": S.String,
  "subscriptions_url": S.String,
  "organizations_url": S.String,
  "repos_url": S.String,
  "events_url": S.String,
  "received_events_url": S.String,
  "type": S.String,
  "site_admin": S.Boolean,
  "permissions": S.optionalWith(S.Struct({
  "pull": S.Boolean,
  "triage": S.optionalWith(S.Boolean, { nullable: true }),
  "push": S.Boolean,
  "maintain": S.optionalWith(S.Boolean, { nullable: true }),
  "admin": S.Boolean
}), { nullable: true }),
  "role_name": S.String,
  "user_view_type": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Repository Collaborator Permission
*/
export class RepositoryCollaboratorPermission extends S.Class<RepositoryCollaboratorPermission>("RepositoryCollaboratorPermission")({
  "permission": S.String,
  "role_name": S.String,
  "user": S.NullOr(NullableCollaborator)
}) {}

export class ReposListCommitCommentsForRepoParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Commit Comment
*/
export class CommitComment extends S.Class<CommitComment>("CommitComment")({
  "html_url": S.String,
  "url": S.String,
  "id": S.Int,
  "node_id": S.String,
  "body": S.String,
  "path": S.NullOr(S.String),
  "position": S.NullOr(S.Int),
  "line": S.NullOr(S.Int),
  "commit_id": S.String,
  "user": S.NullOr(NullableSimpleUser),
  "created_at": S.String,
  "updated_at": S.String,
  "author_association": AuthorAssociation,
  "reactions": S.optionalWith(ReactionRollup, { nullable: true })
}) {}

export class ReposListCommitCommentsForRepo200 extends S.Array(CommitComment) {}

export class ReposGetCommitCommentParams extends S.Struct({
  
}) {}

export class ReposDeleteCommitCommentParams extends S.Struct({
  
}) {}

export class ReposUpdateCommitCommentParams extends S.Struct({
  
}) {}

export class ReposUpdateCommitCommentRequest extends S.Class<ReposUpdateCommitCommentRequest>("ReposUpdateCommitCommentRequest")({
  /**
* The contents of the comment
*/
"body": S.String
}) {}

export class ReactionsListForCommitCommentParamsContent extends S.Literal("+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes") {}

export class ReactionsListForCommitCommentParams extends S.Struct({
  "content": S.optionalWith(ReactionsListForCommitCommentParamsContent, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReactionsListForCommitComment200 extends S.Array(Reaction) {}

export class ReactionsCreateForCommitCommentParams extends S.Struct({
  
}) {}

/**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the commit comment.
*/
export class ReactionsCreateForCommitCommentRequestContent extends S.Literal("+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes") {}

export class ReactionsCreateForCommitCommentRequest extends S.Class<ReactionsCreateForCommitCommentRequest>("ReactionsCreateForCommitCommentRequest")({
  /**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the commit comment.
*/
"content": ReactionsCreateForCommitCommentRequestContent
}) {}

export class ReactionsDeleteForCommitCommentParams extends S.Struct({
  
}) {}

export class ReposListCommitsParams extends S.Struct({
  "sha": S.optionalWith(S.String, { nullable: true }),
  "path": S.optionalWith(S.String, { nullable: true }),
  "author": S.optionalWith(S.String, { nullable: true }),
  "committer": S.optionalWith(S.String, { nullable: true }),
  "since": S.optionalWith(S.String, { nullable: true }),
  "until": S.optionalWith(S.String, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReposListCommits200 extends S.Array(Commit) {}

export class ReposListBranchesForHeadCommitParams extends S.Struct({
  
}) {}

/**
* Branch Short
*/
export class BranchShort extends S.Class<BranchShort>("BranchShort")({
  "name": S.String,
  "commit": S.Struct({
  "sha": S.String,
  "url": S.String
}),
  "protected": S.Boolean
}) {}

export class ReposListBranchesForHeadCommit200 extends S.Array(BranchShort) {}

export class ReposListCommentsForCommitParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReposListCommentsForCommit200 extends S.Array(CommitComment) {}

export class ReposCreateCommitCommentParams extends S.Struct({
  
}) {}

export class ReposCreateCommitCommentRequest extends S.Class<ReposCreateCommitCommentRequest>("ReposCreateCommitCommentRequest")({
  /**
* The contents of the comment.
*/
"body": S.String,
  /**
* Relative path of the file to comment on.
*/
"path": S.optionalWith(S.String, { nullable: true }),
  /**
* Line index in the diff to comment on.
*/
"position": S.optionalWith(S.Int, { nullable: true }),
  /**
* **Closing down notice**. Use **position** parameter instead. Line number in the file to comment on.
*/
"line": S.optionalWith(S.Int, { nullable: true })
}) {}

export class ReposListPullRequestsAssociatedWithCommitParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Hypermedia Link
*/
export class Link extends S.Class<Link>("Link")({
  "href": S.String
}) {}

/**
* The merge method to use.
*/
export class AutoMergeMergeMethod extends S.Literal("merge", "squash", "rebase") {}

/**
* The status of auto merging a pull request.
*/
export class AutoMerge extends S.Class<AutoMerge>("AutoMerge")({
  "enabled_by": SimpleUser,
  /**
* The merge method to use.
*/
"merge_method": AutoMergeMergeMethod,
  /**
* Title for the merge commit message.
*/
"commit_title": S.String,
  /**
* Commit message for the merge commit.
*/
"commit_message": S.String
}) {}

/**
* Pull Request Simple
*/
export class PullRequestSimple extends S.Class<PullRequestSimple>("PullRequestSimple")({
  "url": S.String,
  "id": S.Int,
  "node_id": S.String,
  "html_url": S.String,
  "diff_url": S.String,
  "patch_url": S.String,
  "issue_url": S.String,
  "commits_url": S.String,
  "review_comments_url": S.String,
  "review_comment_url": S.String,
  "comments_url": S.String,
  "statuses_url": S.String,
  "number": S.Int,
  "state": S.String,
  "locked": S.Boolean,
  "title": S.String,
  "user": S.NullOr(NullableSimpleUser),
  "body": S.NullOr(S.String),
  "labels": S.Array(S.Struct({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "name": S.String,
  "description": S.String,
  "color": S.String,
  "default": S.Boolean
})),
  "milestone": S.NullOr(NullableMilestone),
  "active_lock_reason": S.optionalWith(S.String, { nullable: true }),
  "created_at": S.String,
  "updated_at": S.String,
  "closed_at": S.NullOr(S.String),
  "merged_at": S.NullOr(S.String),
  "merge_commit_sha": S.NullOr(S.String),
  "assignee": S.NullOr(NullableSimpleUser),
  "assignees": S.optionalWith(S.Array(SimpleUser), { nullable: true }),
  "requested_reviewers": S.optionalWith(S.Array(SimpleUser), { nullable: true }),
  "requested_teams": S.optionalWith(S.Array(Team), { nullable: true }),
  "head": S.Struct({
  "label": S.String,
  "ref": S.String,
  "repo": Repository,
  "sha": S.String,
  "user": S.NullOr(NullableSimpleUser)
}),
  "base": S.Struct({
  "label": S.String,
  "ref": S.String,
  "repo": Repository,
  "sha": S.String,
  "user": S.NullOr(NullableSimpleUser)
}),
  "_links": S.Struct({
  "comments": Link,
  "commits": Link,
  "statuses": Link,
  "html": Link,
  "issue": Link,
  "review_comments": Link,
  "review_comment": Link,
  "self": Link
}),
  "author_association": AuthorAssociation,
  "auto_merge": S.NullOr(AutoMerge),
  /**
* Indicates whether or not the pull request is a draft.
*/
"draft": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class ReposListPullRequestsAssociatedWithCommit200 extends S.Array(PullRequestSimple) {}

export class ReposGetCommitParams extends S.Struct({
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

export class ReposGetCommit503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class ChecksListForRefParamsStatus extends S.Literal("queued", "in_progress", "completed") {}

export class ChecksListForRefParamsFilter extends S.Literal("latest", "all") {}

export class ChecksListForRefParams extends S.Struct({
  "check_name": S.optionalWith(S.String, { nullable: true }),
  "status": S.optionalWith(ChecksListForRefParamsStatus, { nullable: true }),
  "filter": S.optionalWith(ChecksListForRefParamsFilter, { nullable: true, default: () => "latest" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "app_id": S.optionalWith(S.Int, { nullable: true })
}) {}

export class ChecksListForRef200 extends S.Struct({
  "total_count": S.Int,
  "check_runs": S.Array(CheckRun)
}) {}

export class ChecksListSuitesForRefParams extends S.Struct({
  "app_id": S.optionalWith(S.Int, { nullable: true }),
  "check_name": S.optionalWith(S.String, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ChecksListSuitesForRef200 extends S.Struct({
  "total_count": S.Int,
  "check_suites": S.Array(CheckSuite)
}) {}

export class ReposGetCombinedStatusForRefParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class SimpleCommitStatus extends S.Class<SimpleCommitStatus>("SimpleCommitStatus")({
  "description": S.NullOr(S.String),
  "id": S.Int,
  "node_id": S.String,
  "state": S.String,
  "context": S.String,
  "target_url": S.NullOr(S.String),
  "required": S.optionalWith(S.Boolean, { nullable: true }),
  "avatar_url": S.NullOr(S.String),
  "url": S.String,
  "created_at": S.String,
  "updated_at": S.String
}) {}

/**
* Combined Commit Status
*/
export class CombinedCommitStatus extends S.Class<CombinedCommitStatus>("CombinedCommitStatus")({
  "state": S.String,
  "statuses": S.Array(SimpleCommitStatus),
  "sha": S.String,
  "total_count": S.Int,
  "repository": MinimalRepository,
  "commit_url": S.String,
  "url": S.String
}) {}

export class ReposListCommitStatusesForRefParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* The status of a commit.
*/
export class Status extends S.Class<Status>("Status")({
  "url": S.String,
  "avatar_url": S.NullOr(S.String),
  "id": S.Int,
  "node_id": S.String,
  "state": S.String,
  "description": S.NullOr(S.String),
  "target_url": S.NullOr(S.String),
  "context": S.String,
  "created_at": S.String,
  "updated_at": S.String,
  "creator": S.NullOr(NullableSimpleUser)
}) {}

export class ReposListCommitStatusesForRef200 extends S.Array(Status) {}

export class ReposGetCommunityProfileMetricsParams extends S.Struct({
  
}) {}

/**
* Code of Conduct Simple
*/
export class NullableCodeOfConductSimple extends S.Class<NullableCodeOfConductSimple>("NullableCodeOfConductSimple")({
  "url": S.String,
  "key": S.String,
  "name": S.String,
  "html_url": S.NullOr(S.String)
}) {}

export class NullableCommunityHealthFile extends S.Class<NullableCommunityHealthFile>("NullableCommunityHealthFile")({
  "url": S.String,
  "html_url": S.String
}) {}

/**
* Community Profile
*/
export class CommunityProfile extends S.Class<CommunityProfile>("CommunityProfile")({
  "health_percentage": S.Int,
  "description": S.NullOr(S.String),
  "documentation": S.NullOr(S.String),
  "files": S.Struct({
  "code_of_conduct": S.NullOr(NullableCodeOfConductSimple),
  "code_of_conduct_file": S.NullOr(NullableCommunityHealthFile),
  "license": S.NullOr(NullableLicenseSimple),
  "contributing": S.NullOr(NullableCommunityHealthFile),
  "readme": S.NullOr(NullableCommunityHealthFile),
  "issue_template": S.NullOr(NullableCommunityHealthFile),
  "pull_request_template": S.NullOr(NullableCommunityHealthFile)
}),
  "updated_at": S.NullOr(S.String),
  "content_reports_enabled": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class ReposCompareCommitsParams extends S.Struct({
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

export class CommitComparisonStatus extends S.Literal("diverged", "ahead", "behind", "identical") {}

/**
* Commit Comparison
*/
export class CommitComparison extends S.Class<CommitComparison>("CommitComparison")({
  "url": S.String,
  "html_url": S.String,
  "permalink_url": S.String,
  "diff_url": S.String,
  "patch_url": S.String,
  "base_commit": Commit,
  "merge_base_commit": Commit,
  "status": CommitComparisonStatus,
  "ahead_by": S.Int,
  "behind_by": S.Int,
  "total_commits": S.Int,
  "commits": S.Array(Commit),
  "files": S.optionalWith(S.Array(DiffEntry), { nullable: true })
}) {}

export class ReposCompareCommits503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposGetContentParams extends S.Struct({
  "ref": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* A list of directory items
*/
export class ContentDirectory extends S.Array(S.Struct({
  "type": S.Literal("dir", "file", "submodule", "symlink"),
  "size": S.Int,
  "name": S.String,
  "path": S.String,
  "content": S.optionalWith(S.String, { nullable: true }),
  "sha": S.String,
  "url": S.String,
  "git_url": S.NullOr(S.String),
  "html_url": S.NullOr(S.String),
  "download_url": S.NullOr(S.String),
  "_links": S.Struct({
  "git": S.NullOr(S.String),
  "html": S.NullOr(S.String),
  "self": S.String
})
})) {}

export class ContentFileType extends S.Literal("file") {}

/**
* Content File
*/
export class ContentFile extends S.Class<ContentFile>("ContentFile")({
  "type": ContentFileType,
  "encoding": S.String,
  "size": S.Int,
  "name": S.String,
  "path": S.String,
  "content": S.String,
  "sha": S.String,
  "url": S.String,
  "git_url": S.NullOr(S.String),
  "html_url": S.NullOr(S.String),
  "download_url": S.NullOr(S.String),
  "_links": S.Struct({
  "git": S.NullOr(S.String),
  "html": S.NullOr(S.String),
  "self": S.String
}),
  "target": S.optionalWith(S.String, { nullable: true }),
  "submodule_git_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class ContentSymlinkType extends S.Literal("symlink") {}

/**
* An object describing a symlink
*/
export class ContentSymlink extends S.Class<ContentSymlink>("ContentSymlink")({
  "type": ContentSymlinkType,
  "target": S.String,
  "size": S.Int,
  "name": S.String,
  "path": S.String,
  "sha": S.String,
  "url": S.String,
  "git_url": S.NullOr(S.String),
  "html_url": S.NullOr(S.String),
  "download_url": S.NullOr(S.String),
  "_links": S.Struct({
  "git": S.NullOr(S.String),
  "html": S.NullOr(S.String),
  "self": S.String
})
}) {}

export class ContentSubmoduleType extends S.Literal("submodule") {}

/**
* An object describing a submodule
*/
export class ContentSubmodule extends S.Class<ContentSubmodule>("ContentSubmodule")({
  "type": ContentSubmoduleType,
  "submodule_git_url": S.String,
  "size": S.Int,
  "name": S.String,
  "path": S.String,
  "sha": S.String,
  "url": S.String,
  "git_url": S.NullOr(S.String),
  "html_url": S.NullOr(S.String),
  "download_url": S.NullOr(S.String),
  "_links": S.Struct({
  "git": S.NullOr(S.String),
  "html": S.NullOr(S.String),
  "self": S.String
})
}) {}

export class ReposGetContent200 extends S.Union(ContentDirectory,
ContentFile,
ContentSymlink,
ContentSubmodule) {}

export class ReposCreateOrUpdateFileContentsParams extends S.Struct({
  
}) {}

export class ReposCreateOrUpdateFileContentsRequest extends S.Class<ReposCreateOrUpdateFileContentsRequest>("ReposCreateOrUpdateFileContentsRequest")({
  /**
* The commit message.
*/
"message": S.String,
  /**
* The new file content, using Base64 encoding.
*/
"content": S.String,
  /**
* **Required if you are updating a file**. The blob SHA of the file being replaced.
*/
"sha": S.optionalWith(S.String, { nullable: true }),
  /**
* The branch name. Default: the repository’s default branch.
*/
"branch": S.optionalWith(S.String, { nullable: true }),
  /**
* The person that committed the file. Default: the authenticated user.
*/
"committer": S.optionalWith(S.Struct({
  /**
* The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
*/
"name": S.String,
  /**
* The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
*/
"email": S.String,
  "date": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  /**
* The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
*/
"author": S.optionalWith(S.Struct({
  /**
* The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
*/
"name": S.String,
  /**
* The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
*/
"email": S.String,
  "date": S.optionalWith(S.String, { nullable: true })
}), { nullable: true })
}) {}

/**
* File Commit
*/
export class FileCommit extends S.Class<FileCommit>("FileCommit")({
  "content": S.NullOr(S.Struct({
  "name": S.optionalWith(S.String, { nullable: true }),
  "path": S.optionalWith(S.String, { nullable: true }),
  "sha": S.optionalWith(S.String, { nullable: true }),
  "size": S.optionalWith(S.Int, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.optionalWith(S.String, { nullable: true }),
  "git_url": S.optionalWith(S.String, { nullable: true }),
  "download_url": S.optionalWith(S.String, { nullable: true }),
  "type": S.optionalWith(S.String, { nullable: true }),
  "_links": S.optionalWith(S.Struct({
  "self": S.optionalWith(S.String, { nullable: true }),
  "git": S.optionalWith(S.String, { nullable: true }),
  "html": S.optionalWith(S.String, { nullable: true })
}), { nullable: true })
})),
  "commit": S.Struct({
  "sha": S.optionalWith(S.String, { nullable: true }),
  "node_id": S.optionalWith(S.String, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.optionalWith(S.String, { nullable: true }),
  "author": S.optionalWith(S.Struct({
  "date": S.optionalWith(S.String, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "email": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  "committer": S.optionalWith(S.Struct({
  "date": S.optionalWith(S.String, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "email": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "tree": S.optionalWith(S.Struct({
  "url": S.optionalWith(S.String, { nullable: true }),
  "sha": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  "parents": S.optionalWith(S.Array(S.Struct({
  "url": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.optionalWith(S.String, { nullable: true }),
  "sha": S.optionalWith(S.String, { nullable: true })
})), { nullable: true }),
  "verification": S.optionalWith(S.Struct({
  "verified": S.optionalWith(S.Boolean, { nullable: true }),
  "reason": S.optionalWith(S.String, { nullable: true }),
  "signature": S.optionalWith(S.String, { nullable: true }),
  "payload": S.optionalWith(S.String, { nullable: true }),
  "verified_at": S.optionalWith(S.String, { nullable: true })
}), { nullable: true })
})
}) {}

/**
* The ID of the push protection bypass placeholder. This value is returned on any push protected routes.
*/
export class SecretScanningPushProtectionBypassPlaceholderId extends S.String {}

/**
* Repository rule violation was detected
*/
export class RepositoryRuleViolationError extends S.Class<RepositoryRuleViolationError>("RepositoryRuleViolationError")({
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true }),
  "status": S.optionalWith(S.String, { nullable: true }),
  "metadata": S.optionalWith(S.Struct({
  "secret_scanning": S.optionalWith(S.Struct({
  "bypass_placeholders": S.optionalWith(S.Array(S.Struct({
  "placeholder_id": S.optionalWith(SecretScanningPushProtectionBypassPlaceholderId, { nullable: true }),
  "token_type": S.optionalWith(S.String, { nullable: true })
})), { nullable: true })
}), { nullable: true })
}), { nullable: true })
}) {}

export class ReposCreateOrUpdateFileContents409 extends S.Union(BasicError,
RepositoryRuleViolationError) {}

export class ReposDeleteFileParams extends S.Struct({
  
}) {}

export class ReposDeleteFileRequest extends S.Class<ReposDeleteFileRequest>("ReposDeleteFileRequest")({
  /**
* The commit message.
*/
"message": S.String,
  /**
* The blob SHA of the file being deleted.
*/
"sha": S.String,
  /**
* The branch name. Default: the repository’s default branch
*/
"branch": S.optionalWith(S.String, { nullable: true }),
  /**
* object containing information about the committer.
*/
"committer": S.optionalWith(S.Struct({
  /**
* The name of the author (or committer) of the commit
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The email of the author (or committer) of the commit
*/
"email": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  /**
* object containing information about the author.
*/
"author": S.optionalWith(S.Struct({
  /**
* The name of the author (or committer) of the commit
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The email of the author (or committer) of the commit
*/
"email": S.optionalWith(S.String, { nullable: true })
}), { nullable: true })
}) {}

export class ReposDeleteFile503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposListContributorsParams extends S.Struct({
  "anon": S.optionalWith(S.String, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Contributor
*/
export class Contributor extends S.Class<Contributor>("Contributor")({
  "login": S.optionalWith(S.String, { nullable: true }),
  "id": S.optionalWith(S.Int, { nullable: true }),
  "node_id": S.optionalWith(S.String, { nullable: true }),
  "avatar_url": S.optionalWith(S.String, { nullable: true }),
  "gravatar_id": S.optionalWith(S.String, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.optionalWith(S.String, { nullable: true }),
  "followers_url": S.optionalWith(S.String, { nullable: true }),
  "following_url": S.optionalWith(S.String, { nullable: true }),
  "gists_url": S.optionalWith(S.String, { nullable: true }),
  "starred_url": S.optionalWith(S.String, { nullable: true }),
  "subscriptions_url": S.optionalWith(S.String, { nullable: true }),
  "organizations_url": S.optionalWith(S.String, { nullable: true }),
  "repos_url": S.optionalWith(S.String, { nullable: true }),
  "events_url": S.optionalWith(S.String, { nullable: true }),
  "received_events_url": S.optionalWith(S.String, { nullable: true }),
  "type": S.String,
  "site_admin": S.optionalWith(S.Boolean, { nullable: true }),
  "contributions": S.Int,
  "email": S.optionalWith(S.String, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "user_view_type": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposListContributors200 extends S.Array(Contributor) {}

export class DependabotListAlertsForRepoParamsScope extends S.Literal("development", "runtime") {}

export class DependabotListAlertsForRepoParamsSort extends S.Literal("created", "updated", "epss_percentage") {}

export class DependabotListAlertsForRepoParamsDirection extends S.Literal("asc", "desc") {}

export class DependabotListAlertsForRepoParams extends S.Struct({
  "state": S.optionalWith(S.String, { nullable: true }),
  "severity": S.optionalWith(S.String, { nullable: true }),
  "ecosystem": S.optionalWith(S.String, { nullable: true }),
  "package": S.optionalWith(S.String, { nullable: true }),
  "manifest": S.optionalWith(S.String, { nullable: true }),
  "epss_percentage": S.optionalWith(S.String, { nullable: true }),
  "has": S.optionalWith(S.Union(S.String,
S.Array(S.Literal("patch"))), { nullable: true }),
  "scope": S.optionalWith(DependabotListAlertsForRepoParamsScope, { nullable: true }),
  "sort": S.optionalWith(DependabotListAlertsForRepoParamsSort, { nullable: true, default: () => "created" as const }),
  "direction": S.optionalWith(DependabotListAlertsForRepoParamsDirection, { nullable: true, default: () => "desc" as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true }),
  "first": S.optionalWith(S.Int.pipe(S.greaterThanOrEqualTo(1), S.lessThanOrEqualTo(100)), { nullable: true, default: () => 30 as const }),
  "last": S.optionalWith(S.Int.pipe(S.greaterThanOrEqualTo(1), S.lessThanOrEqualTo(100)), { nullable: true })
}) {}

/**
* The state of the Dependabot alert.
*/
export class DependabotAlertState extends S.Literal("auto_dismissed", "dismissed", "fixed", "open") {}

/**
* The execution scope of the vulnerable dependency.
*/
export class DependabotAlertDependencyScope extends S.Literal("development", "runtime") {}

/**
* The vulnerable dependency's relationship to your project.
* 
* > [!NOTE]
* > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
*/
export class DependabotAlertDependencyRelationship extends S.Literal("unknown", "direct", "transitive") {}

/**
* The reason that the alert was dismissed.
*/
export class DependabotAlertDismissedReason extends S.Literal("fix_started", "inaccurate", "no_bandwidth", "not_used", "tolerable_risk") {}

/**
* A Dependabot alert.
*/
export class DependabotAlert extends S.Class<DependabotAlert>("DependabotAlert")({
  "number": AlertNumber,
  /**
* The state of the Dependabot alert.
*/
"state": DependabotAlertState,
  /**
* Details for the vulnerable dependency.
*/
"dependency": S.Struct({
  "package": S.optionalWith(DependabotAlertPackage, { nullable: true }),
  /**
* The full path to the dependency manifest file, relative to the root of the repository.
*/
"manifest_path": S.optionalWith(S.String, { nullable: true }),
  /**
* The execution scope of the vulnerable dependency.
*/
"scope": S.optionalWith(DependabotAlertDependencyScope, { nullable: true }),
  /**
* The vulnerable dependency's relationship to your project.
* 
* > [!NOTE]
* > We are rolling out support for dependency relationship across ecosystems. This value will be "unknown" for all dependencies in unsupported ecosystems.
*/
"relationship": S.optionalWith(DependabotAlertDependencyRelationship, { nullable: true })
}),
  "security_advisory": DependabotAlertSecurityAdvisory,
  "security_vulnerability": DependabotAlertSecurityVulnerability,
  "url": AlertUrl,
  "html_url": AlertHtmlUrl,
  "created_at": AlertCreatedAt,
  "updated_at": AlertUpdatedAt,
  "dismissed_at": S.NullOr(AlertDismissedAt),
  "dismissed_by": S.NullOr(NullableSimpleUser),
  /**
* The reason that the alert was dismissed.
*/
"dismissed_reason": S.NullOr(DependabotAlertDismissedReason),
  /**
* An optional comment associated with the alert's dismissal.
*/
"dismissed_comment": S.NullOr(S.String.pipe(S.maxLength(280))),
  "fixed_at": S.NullOr(AlertFixedAt),
  "auto_dismissed_at": S.optionalWith(AlertAutoDismissedAt, { nullable: true })
}) {}

export class DependabotListAlertsForRepo200 extends S.Array(DependabotAlert) {}

export class DependabotGetAlertParams extends S.Struct({
  
}) {}

export class DependabotUpdateAlertParams extends S.Struct({
  
}) {}

/**
* The state of the Dependabot alert.
* A `dismissed_reason` must be provided when setting the state to `dismissed`.
*/
export class DependabotUpdateAlertRequestState extends S.Literal("dismissed", "open") {}

/**
* **Required when `state` is `dismissed`.** A reason for dismissing the alert.
*/
export class DependabotUpdateAlertRequestDismissedReason extends S.Literal("fix_started", "inaccurate", "no_bandwidth", "not_used", "tolerable_risk") {}

export class DependabotUpdateAlertRequest extends S.Class<DependabotUpdateAlertRequest>("DependabotUpdateAlertRequest")({
  /**
* The state of the Dependabot alert.
* A `dismissed_reason` must be provided when setting the state to `dismissed`.
*/
"state": DependabotUpdateAlertRequestState,
  /**
* **Required when `state` is `dismissed`.** A reason for dismissing the alert.
*/
"dismissed_reason": S.optionalWith(DependabotUpdateAlertRequestDismissedReason, { nullable: true }),
  /**
* An optional comment associated with dismissing the alert.
*/
"dismissed_comment": S.optionalWith(S.String.pipe(S.maxLength(280)), { nullable: true })
}) {}

export class DependabotListRepoSecretsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Set secrets for Dependabot.
*/
export class DependabotSecret extends S.Class<DependabotSecret>("DependabotSecret")({
  /**
* The name of the secret.
*/
"name": S.String,
  "created_at": S.String,
  "updated_at": S.String
}) {}

export class DependabotListRepoSecrets200 extends S.Struct({
  "total_count": S.Int,
  "secrets": S.Array(DependabotSecret)
}) {}

export class DependabotGetRepoPublicKeyParams extends S.Struct({
  
}) {}

export class DependabotGetRepoSecretParams extends S.Struct({
  
}) {}

export class DependabotCreateOrUpdateRepoSecretParams extends S.Struct({
  
}) {}

export class DependabotCreateOrUpdateRepoSecretRequest extends S.Class<DependabotCreateOrUpdateRepoSecretRequest>("DependabotCreateOrUpdateRepoSecretRequest")({
  /**
* Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/dependabot/secrets#get-a-repository-public-key) endpoint.
*/
"encrypted_value": S.optionalWith(S.String.pipe(S.pattern(new RegExp("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"))), { nullable: true }),
  /**
* ID of the key you used to encrypt the secret.
*/
"key_id": S.optionalWith(S.String, { nullable: true })
}) {}

export class DependabotDeleteRepoSecretParams extends S.Struct({
  
}) {}

export class DependencyGraphDiffRangeParams extends S.Struct({
  "name": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* A diff of the dependencies between two commits.
*/
export class DependencyGraphDiff extends S.Array(S.Struct({
  "change_type": S.Literal("added", "removed"),
  "manifest": S.String,
  "ecosystem": S.String,
  "name": S.String,
  "version": S.String,
  "package_url": S.NullOr(S.String),
  "license": S.NullOr(S.String),
  "source_repository_url": S.NullOr(S.String),
  "vulnerabilities": S.Array(S.Struct({
  "severity": S.String,
  "advisory_ghsa_id": S.String,
  "advisory_summary": S.String,
  "advisory_url": S.String
})),
  /**
* Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment.
*/
"scope": S.Literal("unknown", "runtime", "development")
})) {}

export class DependencyGraphExportSbomParams extends S.Struct({
  
}) {}

/**
* A schema for the SPDX JSON format returned by the Dependency Graph.
*/
export class DependencyGraphSpdxSbom extends S.Class<DependencyGraphSpdxSbom>("DependencyGraphSpdxSbom")({
  "sbom": S.Struct({
  /**
* The SPDX identifier for the SPDX document.
*/
"SPDXID": S.String,
  /**
* The version of the SPDX specification that this document conforms to.
*/
"spdxVersion": S.String,
  /**
* An optional comment about the SPDX document.
*/
"comment": S.optionalWith(S.String, { nullable: true }),
  "creationInfo": S.Struct({
  /**
* The date and time the SPDX document was created.
*/
"created": S.String,
  /**
* The tools that were used to generate the SPDX document.
*/
"creators": S.Array(S.String)
}),
  /**
* The name of the SPDX document.
*/
"name": S.String,
  /**
* The license under which the SPDX document is licensed.
*/
"dataLicense": S.String,
  /**
* The namespace for the SPDX document.
*/
"documentNamespace": S.String,
  "packages": S.Array(S.Struct({
  /**
* A unique SPDX identifier for the package.
*/
"SPDXID": S.optionalWith(S.String, { nullable: true }),
  /**
* The name of the package.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The version of the package. If the package does not have an exact version specified,
* a version range is given.
*/
"versionInfo": S.optionalWith(S.String, { nullable: true }),
  /**
* The location where the package can be downloaded,
* or NOASSERTION if this has not been determined.
*/
"downloadLocation": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether the package's file content has been subjected to
* analysis during the creation of the SPDX document.
*/
"filesAnalyzed": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The license of the package as determined while creating the SPDX document.
*/
"licenseConcluded": S.optionalWith(S.String, { nullable: true }),
  /**
* The license of the package as declared by its author, or NOASSERTION if this information
* was not available when the SPDX document was created.
*/
"licenseDeclared": S.optionalWith(S.String, { nullable: true }),
  /**
* The distribution source of this package, or NOASSERTION if this was not determined.
*/
"supplier": S.optionalWith(S.String, { nullable: true }),
  /**
* The copyright holders of the package, and any dates present with those notices, if available.
*/
"copyrightText": S.optionalWith(S.String, { nullable: true }),
  "externalRefs": S.optionalWith(S.Array(S.Struct({
  /**
* The category of reference to an external resource this reference refers to.
*/
"referenceCategory": S.String,
  /**
* A locator for the particular external resource this reference refers to.
*/
"referenceLocator": S.String,
  /**
* The category of reference to an external resource this reference refers to.
*/
"referenceType": S.String
})), { nullable: true })
})),
  "relationships": S.optionalWith(S.Array(S.Struct({
  /**
* The type of relationship between the two SPDX elements.
*/
"relationshipType": S.optionalWith(S.String, { nullable: true }),
  /**
* The SPDX identifier of the package that is the source of the relationship.
*/
"spdxElementId": S.optionalWith(S.String, { nullable: true }),
  /**
* The SPDX identifier of the package that is the target of the relationship.
*/
"relatedSpdxElement": S.optionalWith(S.String, { nullable: true })
})), { nullable: true })
})
}) {}

export class DependencyGraphCreateRepositorySnapshotParams extends S.Struct({
  
}) {}

/**
* User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
*/
export class Metadata extends S.Record({ key: S.String, value: S.Unknown }) {}

/**
* Create a new snapshot of a repository's dependencies.
*/
export class Snapshot extends S.Class<Snapshot>("Snapshot")({
  /**
* The version of the repository snapshot submission.
*/
"version": S.Int,
  "job": S.Struct({
  /**
* The external ID of the job.
*/
"id": S.String,
  /**
* Correlator provides a key that is used to group snapshots submitted over time. Only the "latest" submitted snapshot for a given combination of `job.correlator` and `detector.name` will be considered when calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given "wave" of CI workflow you run. If you're using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build matrix, then you'll also need to add additional key(s) to distinguish between each submission inside a matrix variation.
*/
"correlator": S.String,
  /**
* The url for the job.
*/
"html_url": S.optionalWith(S.String, { nullable: true })
}),
  /**
* The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.
*/
"sha": S.String.pipe(S.minLength(40), S.maxLength(40)),
  /**
* The repository branch that triggered this snapshot.
*/
"ref": S.String.pipe(S.pattern(new RegExp("^refs/"))),
  /**
* A description of the detector used.
*/
"detector": S.Struct({
  /**
* The name of the detector used.
*/
"name": S.String,
  /**
* The version of the detector used.
*/
"version": S.String,
  /**
* The url of the detector used.
*/
"url": S.String
}),
  "metadata": S.optionalWith(Metadata, { nullable: true }),
  /**
* A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies.
*/
"manifests": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  /**
* The time at which the snapshot was scanned.
*/
"scanned": S.String
}) {}

export class DependencyGraphCreateRepositorySnapshot201 extends S.Struct({
  /**
* ID of the created snapshot.
*/
"id": S.Int,
  /**
* The time at which the snapshot was created.
*/
"created_at": S.String,
  /**
* Either "SUCCESS", "ACCEPTED", or "INVALID". "SUCCESS" indicates that the snapshot was successfully created and the repository's dependencies were updated. "ACCEPTED" indicates that the snapshot was successfully created, but the repository's dependencies were not updated. "INVALID" indicates that the snapshot was malformed.
*/
"result": S.String,
  /**
* A message providing further details about the result, such as why the dependencies were not updated.
*/
"message": S.String
}) {}

export class ReposListDeploymentsParams extends S.Struct({
  "sha": S.optionalWith(S.String, { nullable: true, default: () => "none" as const }),
  "ref": S.optionalWith(S.String, { nullable: true, default: () => "none" as const }),
  "task": S.optionalWith(S.String, { nullable: true, default: () => "none" as const }),
  "environment": S.optionalWith(S.String, { nullable: true, default: () => "none" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReposListDeployments200 extends S.Array(Deployment) {}

export class ReposCreateDeploymentParams extends S.Struct({
  
}) {}

export class ReposCreateDeploymentRequest extends S.Class<ReposCreateDeploymentRequest>("ReposCreateDeploymentRequest")({
  /**
* The ref to deploy. This can be a branch, tag, or SHA.
*/
"ref": S.String,
  /**
* Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
*/
"task": S.optionalWith(S.String, { nullable: true, default: () => "deploy" as const }),
  /**
* Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
*/
"auto_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
*/
"required_contexts": S.optionalWith(S.Array(S.String), { nullable: true }),
  "payload": S.optionalWith(S.Union(S.Record({ key: S.String, value: S.Unknown }),
/**
* JSON payload with extra information about the deployment.
*/
S.String), { nullable: true }),
  /**
* Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
*/
"environment": S.optionalWith(S.String, { nullable: true, default: () => "production" as const }),
  /**
* Short description of the deployment.
*/
"description": S.optionalWith(S.String, { nullable: true, default: () => "" as const }),
  /**
* Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
*/
"transient_environment": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
*/
"production_environment": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class ReposCreateDeployment202 extends S.Struct({
  "message": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposGetDeploymentParams extends S.Struct({
  
}) {}

export class ReposDeleteDeploymentParams extends S.Struct({
  
}) {}

export class ReposListDeploymentStatusesParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* The state of the status.
*/
export class DeploymentStatusState extends S.Literal("error", "failure", "inactive", "pending", "success", "queued", "in_progress") {}

/**
* The status of a deployment.
*/
export class DeploymentStatus extends S.Class<DeploymentStatus>("DeploymentStatus")({
  "url": S.String,
  "id": S.Int,
  "node_id": S.String,
  /**
* The state of the status.
*/
"state": DeploymentStatusState,
  "creator": S.NullOr(NullableSimpleUser),
  /**
* A short description of the status.
*/
"description": S.String.pipe(S.maxLength(140)).pipe(S.propertySignature, S.withConstructorDefault(() => "" as const)),
  /**
* The environment of the deployment that the status is for.
*/
"environment": S.optionalWith(S.String, { nullable: true, default: () => "" as const }),
  /**
* Closing down notice: the URL to associate with this status.
*/
"target_url": S.String.pipe(S.propertySignature, S.withConstructorDefault(() => "" as const)),
  "created_at": S.String,
  "updated_at": S.String,
  "deployment_url": S.String,
  "repository_url": S.String,
  /**
* The URL for accessing your environment.
*/
"environment_url": S.optionalWith(S.String, { nullable: true, default: () => "" as const }),
  /**
* The URL to associate with this status.
*/
"log_url": S.optionalWith(S.String, { nullable: true, default: () => "" as const }),
  "performed_via_github_app": S.optionalWith(NullableIntegration, { nullable: true })
}) {}

export class ReposListDeploymentStatuses200 extends S.Array(DeploymentStatus) {}

export class ReposCreateDeploymentStatusParams extends S.Struct({
  
}) {}

/**
* The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
*/
export class ReposCreateDeploymentStatusRequestState extends S.Literal("error", "failure", "inactive", "in_progress", "queued", "pending", "success") {}

export class ReposCreateDeploymentStatusRequest extends S.Class<ReposCreateDeploymentStatusRequest>("ReposCreateDeploymentStatusRequest")({
  /**
* The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
*/
"state": ReposCreateDeploymentStatusRequestState,
  /**
* The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment.
* 
* > [!NOTE]
* > It's recommended to use the `log_url` parameter, which replaces `target_url`.
*/
"target_url": S.optionalWith(S.String, { nullable: true, default: () => "" as const }),
  /**
* The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
*/
"log_url": S.optionalWith(S.String, { nullable: true, default: () => "" as const }),
  /**
* A short description of the status. The maximum description length is 140 characters.
*/
"description": S.optionalWith(S.String, { nullable: true, default: () => "" as const }),
  /**
* Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. If not defined, the environment of the previous status on the deployment will be used, if it exists. Otherwise, the environment of the deployment will be used.
*/
"environment": S.optionalWith(S.String, { nullable: true }),
  /**
* Sets the URL for accessing your environment. Default: `""`
*/
"environment_url": S.optionalWith(S.String, { nullable: true, default: () => "" as const }),
  /**
* Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
*/
"auto_inactive": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class ReposGetDeploymentStatusParams extends S.Struct({
  
}) {}

export class ReposCreateDispatchEventParams extends S.Struct({
  
}) {}

export class ReposCreateDispatchEventRequest extends S.Class<ReposCreateDispatchEventRequest>("ReposCreateDispatchEventRequest")({
  /**
* A custom webhook event name. Must be 100 characters or fewer.
*/
"event_type": S.String.pipe(S.minLength(1), S.maxLength(100)),
  /**
* JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10. The total size of the JSON payload must be less than 64KB.
*/
"client_payload": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true })
}) {}

export class ReposGetAllEnvironmentsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
*/
export class WaitTimer extends S.Int {}

/**
* The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
*/
export class DeploymentBranchPolicySettings extends S.Class<DeploymentBranchPolicySettings>("DeploymentBranchPolicySettings")({
  /**
* Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.
*/
"protected_branches": S.Boolean,
  /**
* Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.
*/
"custom_branch_policies": S.Boolean
}) {}

/**
* Details of a deployment environment
*/
export class Environment extends S.Class<Environment>("Environment")({
  /**
* The id of the environment.
*/
"id": S.Int,
  "node_id": S.String,
  /**
* The name of the environment.
*/
"name": S.String,
  "url": S.String,
  "html_url": S.String,
  /**
* The time that the environment was created, in ISO 8601 format.
*/
"created_at": S.String,
  /**
* The time that the environment was last updated, in ISO 8601 format.
*/
"updated_at": S.String,
  /**
* Built-in deployment protection rules for the environment.
*/
"protection_rules": S.optionalWith(S.Array(S.Union(S.Struct({
  "id": S.Int,
  "node_id": S.String,
  "type": S.String,
  "wait_timer": S.optionalWith(WaitTimer, { nullable: true })
}),
S.Struct({
  "id": S.Int,
  "node_id": S.String,
  /**
* Whether deployments to this environment can be approved by the user who created the deployment.
*/
"prevent_self_review": S.optionalWith(S.Boolean, { nullable: true }),
  "type": S.String,
  /**
* The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
*/
"reviewers": S.optionalWith(S.Array(S.Struct({
  "type": S.optionalWith(DeploymentReviewerType, { nullable: true }),
  "reviewer": S.optionalWith(S.Union(SimpleUser,
Team), { nullable: true })
})), { nullable: true })
}),
S.Struct({
  "id": S.Int,
  "node_id": S.String,
  "type": S.String
}))), { nullable: true }),
  "deployment_branch_policy": S.optionalWith(DeploymentBranchPolicySettings, { nullable: true })
}) {}

export class ReposGetAllEnvironments200 extends S.Struct({
  /**
* The number of environments in this repository
*/
"total_count": S.optionalWith(S.Int, { nullable: true }),
  "environments": S.optionalWith(S.Array(Environment), { nullable: true })
}) {}

export class ReposGetEnvironmentParams extends S.Struct({
  
}) {}

export class ReposCreateOrUpdateEnvironmentParams extends S.Struct({
  
}) {}

/**
* Whether or not a user who created the job is prevented from approving their own job.
*/
export class PreventSelfReview extends S.Boolean {}

export class ReposCreateOrUpdateEnvironmentRequest extends S.Class<ReposCreateOrUpdateEnvironmentRequest>("ReposCreateOrUpdateEnvironmentRequest")({
  "wait_timer": S.optionalWith(WaitTimer, { nullable: true }),
  "prevent_self_review": S.optionalWith(PreventSelfReview, { nullable: true }),
  /**
* The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
*/
"reviewers": S.optionalWith(S.Array(S.Struct({
  "type": S.optionalWith(DeploymentReviewerType, { nullable: true }),
  /**
* The id of the user or team who can review the deployment
*/
"id": S.optionalWith(S.Int, { nullable: true })
})), { nullable: true }),
  "deployment_branch_policy": S.optionalWith(DeploymentBranchPolicySettings, { nullable: true })
}) {}

export class ReposDeleteAnEnvironmentParams extends S.Struct({
  
}) {}

export class ReposListDeploymentBranchPoliciesParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Whether this rule targets a branch or tag.
*/
export class DeploymentBranchPolicyType extends S.Literal("branch", "tag") {}

/**
* Details of a deployment branch or tag policy.
*/
export class DeploymentBranchPolicy extends S.Class<DeploymentBranchPolicy>("DeploymentBranchPolicy")({
  /**
* The unique identifier of the branch or tag policy.
*/
"id": S.optionalWith(S.Int, { nullable: true }),
  "node_id": S.optionalWith(S.String, { nullable: true }),
  /**
* The name pattern that branches or tags must match in order to deploy to the environment.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether this rule targets a branch or tag.
*/
"type": S.optionalWith(DeploymentBranchPolicyType, { nullable: true })
}) {}

export class ReposListDeploymentBranchPolicies200 extends S.Struct({
  /**
* The number of deployment branch policies for the environment.
*/
"total_count": S.Int,
  "branch_policies": S.Array(DeploymentBranchPolicy)
}) {}

export class ReposCreateDeploymentBranchPolicyParams extends S.Struct({
  
}) {}

/**
* Whether this rule targets a branch or tag
*/
export class DeploymentBranchPolicyNamePatternWithTypeType extends S.Literal("branch", "tag") {}

export class DeploymentBranchPolicyNamePatternWithType extends S.Class<DeploymentBranchPolicyNamePatternWithType>("DeploymentBranchPolicyNamePatternWithType")({
  /**
* The name pattern that branches or tags must match in order to deploy to the environment.
* 
* Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/ * /*`.
* For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
*/
"name": S.String,
  /**
* Whether this rule targets a branch or tag
*/
"type": S.optionalWith(DeploymentBranchPolicyNamePatternWithTypeType, { nullable: true })
}) {}

export class ReposGetDeploymentBranchPolicyParams extends S.Struct({
  
}) {}

export class ReposUpdateDeploymentBranchPolicyParams extends S.Struct({
  
}) {}

export class DeploymentBranchPolicyNamePattern extends S.Class<DeploymentBranchPolicyNamePattern>("DeploymentBranchPolicyNamePattern")({
  /**
* The name pattern that branches must match in order to deploy to the environment.
* 
* Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/ * /*`.
* For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
*/
"name": S.String
}) {}

export class ReposDeleteDeploymentBranchPolicyParams extends S.Struct({
  
}) {}

export class ReposGetAllDeploymentProtectionRulesParams extends S.Struct({
  
}) {}

/**
* A GitHub App that is providing a custom deployment protection rule.
*/
export class CustomDeploymentRuleApp extends S.Class<CustomDeploymentRuleApp>("CustomDeploymentRuleApp")({
  /**
* The unique identifier of the deployment protection rule integration.
*/
"id": S.Int,
  /**
* The slugified name of the deployment protection rule integration.
*/
"slug": S.String,
  /**
* The URL for the endpoint to get details about the app.
*/
"integration_url": S.String,
  /**
* The node ID for the deployment protection rule integration.
*/
"node_id": S.String
}) {}

/**
* Deployment protection rule
*/
export class DeploymentProtectionRule extends S.Class<DeploymentProtectionRule>("DeploymentProtectionRule")({
  /**
* The unique identifier for the deployment protection rule.
*/
"id": S.Int,
  /**
* The node ID for the deployment protection rule.
*/
"node_id": S.String,
  /**
* Whether the deployment protection rule is enabled for the environment.
*/
"enabled": S.Boolean,
  "app": CustomDeploymentRuleApp
}) {}

export class ReposGetAllDeploymentProtectionRules200 extends S.Struct({
  /**
* The number of enabled custom deployment protection rules for this environment
*/
"total_count": S.optionalWith(S.Int, { nullable: true }),
  "custom_deployment_protection_rules": S.optionalWith(S.Array(DeploymentProtectionRule), { nullable: true })
}) {}

export class ReposCreateDeploymentProtectionRuleParams extends S.Struct({
  
}) {}

export class ReposCreateDeploymentProtectionRuleRequest extends S.Class<ReposCreateDeploymentProtectionRuleRequest>("ReposCreateDeploymentProtectionRuleRequest")({
  /**
* The ID of the custom app that will be enabled on the environment.
*/
"integration_id": S.optionalWith(S.Int, { nullable: true })
}) {}

export class ReposListCustomDeploymentRuleIntegrationsParams extends S.Struct({
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

export class ReposListCustomDeploymentRuleIntegrations200 extends S.Struct({
  /**
* The total number of custom deployment protection rule integrations available for this environment.
*/
"total_count": S.optionalWith(S.Int, { nullable: true }),
  "available_custom_deployment_protection_rule_integrations": S.optionalWith(S.Array(CustomDeploymentRuleApp), { nullable: true })
}) {}

export class ReposGetCustomDeploymentProtectionRuleParams extends S.Struct({
  
}) {}

export class ReposDisableDeploymentProtectionRuleParams extends S.Struct({
  
}) {}

export class ActionsListEnvironmentSecretsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActionsListEnvironmentSecrets200 extends S.Struct({
  "total_count": S.Int,
  "secrets": S.Array(ActionsSecret)
}) {}

export class ActionsGetEnvironmentPublicKeyParams extends S.Struct({
  
}) {}

export class ActionsGetEnvironmentSecretParams extends S.Struct({
  
}) {}

export class ActionsCreateOrUpdateEnvironmentSecretParams extends S.Struct({
  
}) {}

export class ActionsCreateOrUpdateEnvironmentSecretRequest extends S.Class<ActionsCreateOrUpdateEnvironmentSecretRequest>("ActionsCreateOrUpdateEnvironmentSecretRequest")({
  /**
* Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/actions/secrets#get-an-environment-public-key) endpoint.
*/
"encrypted_value": S.String.pipe(S.pattern(new RegExp("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"))),
  /**
* ID of the key you used to encrypt the secret.
*/
"key_id": S.String
}) {}

export class ActionsDeleteEnvironmentSecretParams extends S.Struct({
  
}) {}

export class ActionsListEnvironmentVariablesParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 10 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActionsListEnvironmentVariables200 extends S.Struct({
  "total_count": S.Int,
  "variables": S.Array(ActionsVariable)
}) {}

export class ActionsCreateEnvironmentVariableParams extends S.Struct({
  
}) {}

export class ActionsCreateEnvironmentVariableRequest extends S.Class<ActionsCreateEnvironmentVariableRequest>("ActionsCreateEnvironmentVariableRequest")({
  /**
* The name of the variable.
*/
"name": S.String,
  /**
* The value of the variable.
*/
"value": S.String
}) {}

export class ActionsGetEnvironmentVariableParams extends S.Struct({
  
}) {}

export class ActionsDeleteEnvironmentVariableParams extends S.Struct({
  
}) {}

export class ActionsUpdateEnvironmentVariableParams extends S.Struct({
  
}) {}

export class ActionsUpdateEnvironmentVariableRequest extends S.Class<ActionsUpdateEnvironmentVariableRequest>("ActionsUpdateEnvironmentVariableRequest")({
  /**
* The name of the variable.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The value of the variable.
*/
"value": S.optionalWith(S.String, { nullable: true })
}) {}

export class ActivityListRepoEventsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActivityListRepoEvents200 extends S.Array(Event) {}

export class ReposListForksParamsSort extends S.Literal("newest", "oldest", "stargazers", "watchers") {}

export class ReposListForksParams extends S.Struct({
  "sort": S.optionalWith(ReposListForksParamsSort, { nullable: true, default: () => "newest" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReposListForks200 extends S.Array(MinimalRepository) {}

export class ReposCreateForkParams extends S.Struct({
  
}) {}

export class ReposCreateForkRequest extends S.Class<ReposCreateForkRequest>("ReposCreateForkRequest")({
  /**
* Optional parameter to specify the organization name if forking into an organization.
*/
"organization": S.optionalWith(S.String, { nullable: true }),
  /**
* When forking from an existing repository, a new name for the fork.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* When forking from an existing repository, fork with only the default branch.
*/
"default_branch_only": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class GitCreateBlobParams extends S.Struct({
  
}) {}

export class GitCreateBlobRequest extends S.Class<GitCreateBlobRequest>("GitCreateBlobRequest")({
  /**
* The new blob's content.
*/
"content": S.String,
  /**
* The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
*/
"encoding": S.optionalWith(S.String, { nullable: true, default: () => "utf-8" as const })
}) {}

/**
* Short Blob
*/
export class ShortBlob extends S.Class<ShortBlob>("ShortBlob")({
  "url": S.String,
  "sha": S.String
}) {}

export class GitCreateBlob422 extends S.Union(ValidationError,
RepositoryRuleViolationError) {}

export class GitGetBlobParams extends S.Struct({
  
}) {}

/**
* Blob
*/
export class Blob extends S.Class<Blob>("Blob")({
  "content": S.String,
  "encoding": S.String,
  "url": S.String,
  "sha": S.String,
  "size": S.NullOr(S.Int),
  "node_id": S.String,
  "highlighted_content": S.optionalWith(S.String, { nullable: true })
}) {}

export class GitCreateCommitParams extends S.Struct({
  
}) {}

export class GitCreateCommitRequest extends S.Class<GitCreateCommitRequest>("GitCreateCommitRequest")({
  /**
* The commit message
*/
"message": S.String,
  /**
* The SHA of the tree object this commit points to
*/
"tree": S.String,
  /**
* The full SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
*/
"parents": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
*/
"author": S.optionalWith(S.Struct({
  /**
* The name of the author (or committer) of the commit
*/
"name": S.String,
  /**
* The email of the author (or committer) of the commit
*/
"email": S.String,
  /**
* Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
"date": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  /**
* Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
*/
"committer": S.optionalWith(S.Struct({
  /**
* The name of the author (or committer) of the commit
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The email of the author (or committer) of the commit
*/
"email": S.optionalWith(S.String, { nullable: true }),
  /**
* Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
"date": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  /**
* The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
*/
"signature": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Low-level Git commit operations within a repository
*/
export class GitCommit extends S.Class<GitCommit>("GitCommit")({
  /**
* SHA for the commit
*/
"sha": S.String,
  "node_id": S.String,
  "url": S.String,
  /**
* Identifying information for the git-user
*/
"author": S.Struct({
  /**
* Timestamp of the commit
*/
"date": S.String,
  /**
* Git email address of the user
*/
"email": S.String,
  /**
* Name of the git user
*/
"name": S.String
}),
  /**
* Identifying information for the git-user
*/
"committer": S.Struct({
  /**
* Timestamp of the commit
*/
"date": S.String,
  /**
* Git email address of the user
*/
"email": S.String,
  /**
* Name of the git user
*/
"name": S.String
}),
  /**
* Message describing the purpose of the commit
*/
"message": S.String,
  "tree": S.Struct({
  /**
* SHA for the commit
*/
"sha": S.String,
  "url": S.String
}),
  "parents": S.Array(S.Struct({
  /**
* SHA for the commit
*/
"sha": S.String,
  "url": S.String,
  "html_url": S.String
})),
  "verification": S.Struct({
  "verified": S.Boolean,
  "reason": S.String,
  "signature": S.NullOr(S.String),
  "payload": S.NullOr(S.String),
  "verified_at": S.NullOr(S.String)
}),
  "html_url": S.String
}) {}

export class GitGetCommitParams extends S.Struct({
  
}) {}

export class GitListMatchingRefsParams extends S.Struct({
  
}) {}

/**
* Git references within a repository
*/
export class GitRef extends S.Class<GitRef>("GitRef")({
  "ref": S.String,
  "node_id": S.String,
  "url": S.String,
  "object": S.Struct({
  "type": S.String,
  /**
* SHA for the reference
*/
"sha": S.String.pipe(S.minLength(40), S.maxLength(40)),
  "url": S.String
})
}) {}

export class GitListMatchingRefs200 extends S.Array(GitRef) {}

export class GitGetRefParams extends S.Struct({
  
}) {}

export class GitCreateRefParams extends S.Struct({
  
}) {}

export class GitCreateRefRequest extends S.Class<GitCreateRefRequest>("GitCreateRefRequest")({
  /**
* The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
*/
"ref": S.String,
  /**
* The SHA1 value for this reference.
*/
"sha": S.String
}) {}

export class GitDeleteRefParams extends S.Struct({
  
}) {}

export class GitUpdateRefParams extends S.Struct({
  
}) {}

export class GitUpdateRefRequest extends S.Class<GitUpdateRefRequest>("GitUpdateRefRequest")({
  /**
* The SHA1 value to set this reference to
*/
"sha": S.String,
  /**
* Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
*/
"force": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

export class GitCreateTagParams extends S.Struct({
  
}) {}

/**
* The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
*/
export class GitCreateTagRequestType extends S.Literal("commit", "tree", "blob") {}

export class GitCreateTagRequest extends S.Class<GitCreateTagRequest>("GitCreateTagRequest")({
  /**
* The tag's name. This is typically a version (e.g., "v0.0.1").
*/
"tag": S.String,
  /**
* The tag message.
*/
"message": S.String,
  /**
* The SHA of the git object this is tagging.
*/
"object": S.String,
  /**
* The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
*/
"type": GitCreateTagRequestType,
  /**
* An object with information about the individual creating the tag.
*/
"tagger": S.optionalWith(S.Struct({
  /**
* The name of the author of the tag
*/
"name": S.String,
  /**
* The email of the author of the tag
*/
"email": S.String,
  /**
* When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
"date": S.optionalWith(S.String, { nullable: true })
}), { nullable: true })
}) {}

/**
* Metadata for a Git tag
*/
export class GitTag extends S.Class<GitTag>("GitTag")({
  "node_id": S.String,
  /**
* Name of the tag
*/
"tag": S.String,
  "sha": S.String,
  /**
* URL for the tag
*/
"url": S.String,
  /**
* Message describing the purpose of the tag
*/
"message": S.String,
  "tagger": S.Struct({
  "date": S.String,
  "email": S.String,
  "name": S.String
}),
  "object": S.Struct({
  "sha": S.String,
  "type": S.String,
  "url": S.String
}),
  "verification": S.optionalWith(Verification, { nullable: true })
}) {}

export class GitGetTagParams extends S.Struct({
  
}) {}

export class GitCreateTreeParams extends S.Struct({
  
}) {}

export class GitCreateTreeRequest extends S.Class<GitCreateTreeRequest>("GitCreateTreeRequest")({
  /**
* Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
*/
"tree": S.Array(S.Struct({
  /**
* The file referenced in the tree.
*/
"path": S.optionalWith(S.String, { nullable: true }),
  /**
* The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.
*/
"mode": S.optionalWith(S.Literal("100644", "100755", "040000", "160000", "120000"), { nullable: true }),
  /**
* Either `blob`, `tree`, or `commit`.
*/
"type": S.optionalWith(S.Literal("blob", "tree", "commit"), { nullable: true }),
  /**
* The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.  
*   
* **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
*/
"sha": S.optionalWith(S.String, { nullable: true }),
  /**
* The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.  
*   
* **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
*/
"content": S.optionalWith(S.String, { nullable: true })
})),
  /**
* The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
* If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
*/
"base_tree": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The hierarchy between files in a Git repository.
*/
export class GitTree extends S.Class<GitTree>("GitTree")({
  "sha": S.String,
  "url": S.optionalWith(S.String, { nullable: true }),
  "truncated": S.Boolean,
  /**
* Objects specifying a tree structure
*/
"tree": S.Array(S.Struct({
  "path": S.String,
  "mode": S.String,
  "type": S.String,
  "sha": S.String,
  "size": S.optionalWith(S.Int, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true })
}))
}) {}

export class GitGetTreeParams extends S.Struct({
  "recursive": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposListWebhooksParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class HookResponse extends S.Class<HookResponse>("HookResponse")({
  "code": S.NullOr(S.Int),
  "status": S.NullOr(S.String),
  "message": S.NullOr(S.String)
}) {}

/**
* Webhooks for repositories.
*/
export class Hook extends S.Class<Hook>("Hook")({
  "type": S.String,
  /**
* Unique identifier of the webhook.
*/
"id": S.Int,
  /**
* The name of a valid service, use 'web' for a webhook.
*/
"name": S.String,
  /**
* Determines whether the hook is actually triggered on pushes.
*/
"active": S.Boolean,
  /**
* Determines what events the hook is triggered for. Default: ['push'].
*/
"events": S.Array(S.String),
  "config": WebhookConfig,
  "updated_at": S.String,
  "created_at": S.String,
  "url": S.String,
  "test_url": S.String,
  "ping_url": S.String,
  "deliveries_url": S.optionalWith(S.String, { nullable: true }),
  "last_response": HookResponse
}) {}

export class ReposListWebhooks200 extends S.Array(Hook) {}

export class ReposCreateWebhookParams extends S.Struct({
  
}) {}

export class ReposCreateWebhookRequest extends S.Class<ReposCreateWebhookRequest>("ReposCreateWebhookRequest")({
  /**
* Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* Key/value pairs to provide settings for this webhook.
*/
"config": S.optionalWith(S.Struct({
  "url": S.optionalWith(WebhookConfigUrl, { nullable: true }),
  "content_type": S.optionalWith(WebhookConfigContentType, { nullable: true }),
  "secret": S.optionalWith(WebhookConfigSecret, { nullable: true }),
  "insecure_ssl": S.optionalWith(WebhookConfigInsecureSsl, { nullable: true })
}), { nullable: true }),
  /**
* Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
*/
"events": S.optionalWith(S.Array(S.String), { nullable: true, default: () => ["push"] as const }),
  /**
* Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
*/
"active": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

export class ReposGetWebhookParams extends S.Struct({
  
}) {}

export class ReposDeleteWebhookParams extends S.Struct({
  
}) {}

export class ReposUpdateWebhookParams extends S.Struct({
  
}) {}

export class ReposUpdateWebhookRequest extends S.Class<ReposUpdateWebhookRequest>("ReposUpdateWebhookRequest")({
  "config": S.optionalWith(WebhookConfig, { nullable: true }),
  /**
* Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
*/
"events": S.optionalWith(S.Array(S.String), { nullable: true, default: () => ["push"] as const }),
  /**
* Determines a list of events to be added to the list of events that the Hook triggers for.
*/
"add_events": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* Determines a list of events to be removed from the list of events that the Hook triggers for.
*/
"remove_events": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
*/
"active": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

export class ReposGetWebhookConfigForRepoParams extends S.Struct({
  
}) {}

export class ReposUpdateWebhookConfigForRepoParams extends S.Struct({
  
}) {}

export class ReposUpdateWebhookConfigForRepoRequest extends S.Class<ReposUpdateWebhookConfigForRepoRequest>("ReposUpdateWebhookConfigForRepoRequest")({
  "url": S.optionalWith(WebhookConfigUrl, { nullable: true }),
  "content_type": S.optionalWith(WebhookConfigContentType, { nullable: true }),
  "secret": S.optionalWith(WebhookConfigSecret, { nullable: true }),
  "insecure_ssl": S.optionalWith(WebhookConfigInsecureSsl, { nullable: true })
}) {}

export class ReposListWebhookDeliveriesParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "cursor": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposListWebhookDeliveries200 extends S.Array(HookDeliveryItem) {}

export class ReposGetWebhookDeliveryParams extends S.Struct({
  
}) {}

export class ReposRedeliverWebhookDeliveryParams extends S.Struct({
  
}) {}

export class ReposRedeliverWebhookDelivery202 extends S.Record({ key: S.String, value: S.Unknown }) {}

export class ReposPingWebhookParams extends S.Struct({
  
}) {}

export class ReposTestPushWebhookParams extends S.Struct({
  
}) {}

export class MigrationsGetImportStatusParams extends S.Struct({
  
}) {}

export class ImportStatus extends S.Literal("auth", "error", "none", "detecting", "choose", "auth_failed", "importing", "mapping", "waiting_to_push", "pushing", "complete", "setup", "unknown", "detection_found_multiple", "detection_found_nothing", "detection_needs_auth") {}

/**
* A repository import from an external source.
*/
export class Import extends S.Class<Import>("Import")({
  "vcs": S.NullOr(S.String),
  "use_lfs": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The URL of the originating repository.
*/
"vcs_url": S.String,
  "svc_root": S.optionalWith(S.String, { nullable: true }),
  "tfvc_project": S.optionalWith(S.String, { nullable: true }),
  "status": ImportStatus,
  "status_text": S.optionalWith(S.String, { nullable: true }),
  "failed_step": S.optionalWith(S.String, { nullable: true }),
  "error_message": S.optionalWith(S.String, { nullable: true }),
  "import_percent": S.optionalWith(S.Int, { nullable: true }),
  "commit_count": S.optionalWith(S.Int, { nullable: true }),
  "push_percent": S.optionalWith(S.Int, { nullable: true }),
  "has_large_files": S.optionalWith(S.Boolean, { nullable: true }),
  "large_files_size": S.optionalWith(S.Int, { nullable: true }),
  "large_files_count": S.optionalWith(S.Int, { nullable: true }),
  "project_choices": S.optionalWith(S.Array(S.Struct({
  "vcs": S.optionalWith(S.String, { nullable: true }),
  "tfvc_project": S.optionalWith(S.String, { nullable: true }),
  "human_name": S.optionalWith(S.String, { nullable: true })
})), { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "authors_count": S.optionalWith(S.Int, { nullable: true }),
  "url": S.String,
  "html_url": S.String,
  "authors_url": S.String,
  "repository_url": S.String,
  "svn_root": S.optionalWith(S.String, { nullable: true })
}) {}

export class MigrationsStartImportParams extends S.Struct({
  
}) {}

/**
* The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
*/
export class MigrationsStartImportRequestVcs extends S.Literal("subversion", "git", "mercurial", "tfvc") {}

export class MigrationsStartImportRequest extends S.Class<MigrationsStartImportRequest>("MigrationsStartImportRequest")({
  /**
* The URL of the originating repository.
*/
"vcs_url": S.String,
  /**
* The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
*/
"vcs": S.optionalWith(MigrationsStartImportRequestVcs, { nullable: true }),
  /**
* If authentication is required, the username to provide to `vcs_url`.
*/
"vcs_username": S.optionalWith(S.String, { nullable: true }),
  /**
* If authentication is required, the password to provide to `vcs_url`.
*/
"vcs_password": S.optionalWith(S.String, { nullable: true }),
  /**
* For a tfvc import, the name of the project that is being imported.
*/
"tfvc_project": S.optionalWith(S.String, { nullable: true })
}) {}

export class MigrationsCancelImportParams extends S.Struct({
  
}) {}

export class MigrationsUpdateImportParams extends S.Struct({
  
}) {}

/**
* The type of version control system you are migrating from.
*/
export class MigrationsUpdateImportRequestVcs extends S.Literal("subversion", "tfvc", "git", "mercurial") {}

export class MigrationsUpdateImportRequest extends S.Class<MigrationsUpdateImportRequest>("MigrationsUpdateImportRequest")({
  /**
* The username to provide to the originating repository.
*/
"vcs_username": S.optionalWith(S.String, { nullable: true }),
  /**
* The password to provide to the originating repository.
*/
"vcs_password": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of version control system you are migrating from.
*/
"vcs": S.optionalWith(MigrationsUpdateImportRequestVcs, { nullable: true }),
  /**
* For a tfvc import, the name of the project that is being imported.
*/
"tfvc_project": S.optionalWith(S.String, { nullable: true })
}) {}

export class MigrationsGetCommitAuthorsParams extends S.Struct({
  "since": S.optionalWith(S.Int, { nullable: true })
}) {}

/**
* Porter Author
*/
export class PorterAuthor extends S.Class<PorterAuthor>("PorterAuthor")({
  "id": S.Int,
  "remote_id": S.String,
  "remote_name": S.String,
  "email": S.String,
  "name": S.String,
  "url": S.String,
  "import_url": S.String
}) {}

export class MigrationsGetCommitAuthors200 extends S.Array(PorterAuthor) {}

export class MigrationsMapCommitAuthorParams extends S.Struct({
  
}) {}

export class MigrationsMapCommitAuthorRequest extends S.Class<MigrationsMapCommitAuthorRequest>("MigrationsMapCommitAuthorRequest")({
  /**
* The new Git author email.
*/
"email": S.optionalWith(S.String, { nullable: true }),
  /**
* The new Git author name.
*/
"name": S.optionalWith(S.String, { nullable: true })
}) {}

export class MigrationsGetLargeFilesParams extends S.Struct({
  
}) {}

/**
* Porter Large File
*/
export class PorterLargeFile extends S.Class<PorterLargeFile>("PorterLargeFile")({
  "ref_name": S.String,
  "path": S.String,
  "oid": S.String,
  "size": S.Int
}) {}

export class MigrationsGetLargeFiles200 extends S.Array(PorterLargeFile) {}

export class MigrationsSetLfsPreferenceParams extends S.Struct({
  
}) {}

/**
* Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import.
*/
export class MigrationsSetLfsPreferenceRequestUseLfs extends S.Literal("opt_in", "opt_out") {}

export class MigrationsSetLfsPreferenceRequest extends S.Class<MigrationsSetLfsPreferenceRequest>("MigrationsSetLfsPreferenceRequest")({
  /**
* Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import.
*/
"use_lfs": MigrationsSetLfsPreferenceRequestUseLfs
}) {}

export class AppsGetRepoInstallationParams extends S.Struct({
  
}) {}

export class InteractionsGetRestrictionsForRepoParams extends S.Struct({
  
}) {}

export class InteractionsGetRestrictionsForRepo200 extends S.Union(InteractionLimitResponse,
S.Struct({
  
})) {}

export class InteractionsSetRestrictionsForRepoParams extends S.Struct({
  
}) {}

export class InteractionsRemoveRestrictionsForRepoParams extends S.Struct({
  
}) {}

export class ReposListInvitationsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReposListInvitations200 extends S.Array(RepositoryInvitation) {}

export class ReposDeleteInvitationParams extends S.Struct({
  
}) {}

export class ReposUpdateInvitationParams extends S.Struct({
  
}) {}

/**
* The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
*/
export class ReposUpdateInvitationRequestPermissions extends S.Literal("read", "write", "maintain", "triage", "admin") {}

export class ReposUpdateInvitationRequest extends S.Class<ReposUpdateInvitationRequest>("ReposUpdateInvitationRequest")({
  /**
* The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
*/
"permissions": S.optionalWith(ReposUpdateInvitationRequestPermissions, { nullable: true })
}) {}

export class IssuesListForRepoParamsState extends S.Literal("open", "closed", "all") {}

export class IssuesListForRepoParamsSort extends S.Literal("created", "updated", "comments") {}

export class IssuesListForRepoParamsDirection extends S.Literal("asc", "desc") {}

export class IssuesListForRepoParams extends S.Struct({
  "milestone": S.optionalWith(S.String, { nullable: true }),
  "state": S.optionalWith(IssuesListForRepoParamsState, { nullable: true, default: () => "open" as const }),
  "assignee": S.optionalWith(S.String, { nullable: true }),
  "type": S.optionalWith(S.String, { nullable: true }),
  "creator": S.optionalWith(S.String, { nullable: true }),
  "mentioned": S.optionalWith(S.String, { nullable: true }),
  "labels": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(IssuesListForRepoParamsSort, { nullable: true, default: () => "created" as const }),
  "direction": S.optionalWith(IssuesListForRepoParamsDirection, { nullable: true, default: () => "desc" as const }),
  "since": S.optionalWith(S.String, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class IssuesListForRepo200 extends S.Array(Issue) {}

export class IssuesCreateParams extends S.Struct({
  
}) {}

export class IssuesCreateRequest extends S.Class<IssuesCreateRequest>("IssuesCreateRequest")({
  /**
* The title of the issue.
*/
"title": S.Union(S.String,
S.Int),
  /**
* The contents of the issue.
*/
"body": S.optionalWith(S.String, { nullable: true }),
  /**
* Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is closing down.**_
*/
"assignee": S.optionalWith(S.String, { nullable: true }),
  "milestone": S.optionalWith(S.Union(S.String,
/**
* The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._
*/
S.Int), { nullable: true }),
  /**
* Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
*/
"labels": S.optionalWith(S.Array(S.Union(S.String,
S.Struct({
  "id": S.optionalWith(S.Int, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "color": S.optionalWith(S.String, { nullable: true })
}))), { nullable: true }),
  /**
* Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
*/
"assignees": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* The name of the issue type to associate with this issue. _NOTE: Only users with push access can set the type for new issues. The type is silently dropped otherwise._
*/
"type": S.optionalWith(S.String, { nullable: true })
}) {}

export class IssuesCreate503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class IssuesListCommentsForRepoParamsSort extends S.Literal("created", "updated") {}

export class IssuesListCommentsForRepoParamsDirection extends S.Literal("asc", "desc") {}

export class IssuesListCommentsForRepoParams extends S.Struct({
  "sort": S.optionalWith(IssuesListCommentsForRepoParamsSort, { nullable: true, default: () => "created" as const }),
  "direction": S.optionalWith(IssuesListCommentsForRepoParamsDirection, { nullable: true }),
  "since": S.optionalWith(S.String, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class IssuesListCommentsForRepo200 extends S.Array(IssueComment) {}

export class IssuesGetCommentParams extends S.Struct({
  
}) {}

export class IssuesDeleteCommentParams extends S.Struct({
  
}) {}

export class IssuesUpdateCommentParams extends S.Struct({
  
}) {}

export class IssuesUpdateCommentRequest extends S.Class<IssuesUpdateCommentRequest>("IssuesUpdateCommentRequest")({
  /**
* The contents of the comment.
*/
"body": S.String
}) {}

export class ReactionsListForIssueCommentParamsContent extends S.Literal("+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes") {}

export class ReactionsListForIssueCommentParams extends S.Struct({
  "content": S.optionalWith(ReactionsListForIssueCommentParamsContent, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReactionsListForIssueComment200 extends S.Array(Reaction) {}

export class ReactionsCreateForIssueCommentParams extends S.Struct({
  
}) {}

/**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue comment.
*/
export class ReactionsCreateForIssueCommentRequestContent extends S.Literal("+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes") {}

export class ReactionsCreateForIssueCommentRequest extends S.Class<ReactionsCreateForIssueCommentRequest>("ReactionsCreateForIssueCommentRequest")({
  /**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue comment.
*/
"content": ReactionsCreateForIssueCommentRequestContent
}) {}

export class ReactionsDeleteForIssueCommentParams extends S.Struct({
  
}) {}

export class IssuesListEventsForRepoParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* The reason for the current state
*/
export class NullableIssueStateReason extends S.Literal("completed", "reopened", "not_planned", "duplicate") {}

/**
* Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
*/
export class NullableIssue extends S.Class<NullableIssue>("NullableIssue")({
  "id": S.Int,
  "node_id": S.String,
  /**
* URL for the issue
*/
"url": S.String,
  "repository_url": S.String,
  "labels_url": S.String,
  "comments_url": S.String,
  "events_url": S.String,
  "html_url": S.String,
  /**
* Number uniquely identifying the issue within its repository
*/
"number": S.Int,
  /**
* State of the issue; either 'open' or 'closed'
*/
"state": S.String,
  /**
* The reason for the current state
*/
"state_reason": S.optionalWith(NullableIssueStateReason, { nullable: true }),
  /**
* Title of the issue
*/
"title": S.String,
  /**
* Contents of the issue
*/
"body": S.optionalWith(S.String, { nullable: true }),
  "user": S.NullOr(NullableSimpleUser),
  /**
* Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
*/
"labels": S.Array(S.Union(S.String,
S.Struct({
  "id": S.optionalWith(S.Int, { nullable: true }),
  "node_id": S.optionalWith(S.String, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "color": S.optionalWith(S.String, { nullable: true }),
  "default": S.optionalWith(S.Boolean, { nullable: true })
}))),
  "assignee": S.NullOr(NullableSimpleUser),
  "assignees": S.optionalWith(S.Array(SimpleUser), { nullable: true }),
  "milestone": S.NullOr(NullableMilestone),
  "locked": S.Boolean,
  "active_lock_reason": S.optionalWith(S.String, { nullable: true }),
  "comments": S.Int,
  "pull_request": S.optionalWith(S.Struct({
  "merged_at": S.optionalWith(S.String, { nullable: true }),
  "diff_url": S.NullOr(S.String),
  "html_url": S.NullOr(S.String),
  "patch_url": S.NullOr(S.String),
  "url": S.NullOr(S.String)
}), { nullable: true }),
  "closed_at": S.NullOr(S.String),
  "created_at": S.String,
  "updated_at": S.String,
  "draft": S.optionalWith(S.Boolean, { nullable: true }),
  "closed_by": S.optionalWith(NullableSimpleUser, { nullable: true }),
  "body_html": S.optionalWith(S.String, { nullable: true }),
  "body_text": S.optionalWith(S.String, { nullable: true }),
  "timeline_url": S.optionalWith(S.String, { nullable: true }),
  "type": S.optionalWith(IssueType, { nullable: true }),
  "repository": S.optionalWith(Repository, { nullable: true }),
  "performed_via_github_app": S.optionalWith(NullableIntegration, { nullable: true }),
  "author_association": AuthorAssociation,
  "reactions": S.optionalWith(ReactionRollup, { nullable: true }),
  "sub_issues_summary": S.optionalWith(SubIssuesSummary, { nullable: true }),
  "issue_dependencies_summary": S.optionalWith(IssueDependenciesSummary, { nullable: true }),
  "issue_field_values": S.optionalWith(S.Array(IssueFieldValue), { nullable: true })
}) {}

/**
* Issue Event Label
*/
export class IssueEventLabel extends S.Class<IssueEventLabel>("IssueEventLabel")({
  "name": S.NullOr(S.String),
  "color": S.NullOr(S.String)
}) {}

export class IssueEventDismissedReview extends S.Class<IssueEventDismissedReview>("IssueEventDismissedReview")({
  "state": S.String,
  "review_id": S.Int,
  "dismissal_message": S.NullOr(S.String),
  "dismissal_commit_id": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Issue Event Milestone
*/
export class IssueEventMilestone extends S.Class<IssueEventMilestone>("IssueEventMilestone")({
  "title": S.String
}) {}

/**
* Issue Event Project Card
*/
export class IssueEventProjectCard extends S.Class<IssueEventProjectCard>("IssueEventProjectCard")({
  "url": S.String,
  "id": S.Int,
  "project_url": S.String,
  "project_id": S.Int,
  "column_name": S.String,
  "previous_column_name": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Issue Event Rename
*/
export class IssueEventRename extends S.Class<IssueEventRename>("IssueEventRename")({
  "from": S.String,
  "to": S.String
}) {}

/**
* Issue Event
*/
export class IssueEvent extends S.Class<IssueEvent>("IssueEvent")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "actor": S.NullOr(NullableSimpleUser),
  "event": S.String,
  "commit_id": S.NullOr(S.String),
  "commit_url": S.NullOr(S.String),
  "created_at": S.String,
  "issue": S.optionalWith(NullableIssue, { nullable: true }),
  "label": S.optionalWith(IssueEventLabel, { nullable: true }),
  "assignee": S.optionalWith(NullableSimpleUser, { nullable: true }),
  "assigner": S.optionalWith(NullableSimpleUser, { nullable: true }),
  "review_requester": S.optionalWith(NullableSimpleUser, { nullable: true }),
  "requested_reviewer": S.optionalWith(NullableSimpleUser, { nullable: true }),
  "requested_team": S.optionalWith(Team, { nullable: true }),
  "dismissed_review": S.optionalWith(IssueEventDismissedReview, { nullable: true }),
  "milestone": S.optionalWith(IssueEventMilestone, { nullable: true }),
  "project_card": S.optionalWith(IssueEventProjectCard, { nullable: true }),
  "rename": S.optionalWith(IssueEventRename, { nullable: true }),
  "author_association": S.optionalWith(AuthorAssociation, { nullable: true }),
  "lock_reason": S.optionalWith(S.String, { nullable: true }),
  "performed_via_github_app": S.optionalWith(NullableIntegration, { nullable: true })
}) {}

export class IssuesListEventsForRepo200 extends S.Array(IssueEvent) {}

export class IssuesGetEventParams extends S.Struct({
  
}) {}

export class IssuesGetParams extends S.Struct({
  
}) {}

export class IssuesUpdateParams extends S.Struct({
  
}) {}

/**
* The open or closed state of the issue.
*/
export class IssuesUpdateRequestState extends S.Literal("open", "closed") {}

/**
* The reason for the state change. Ignored unless `state` is changed.
*/
export class IssuesUpdateRequestStateReason extends S.Literal("completed", "not_planned", "duplicate", "reopened") {}

export class IssuesUpdateRequest extends S.Class<IssuesUpdateRequest>("IssuesUpdateRequest")({
  /**
* The title of the issue.
*/
"title": S.optionalWith(S.Union(S.String,
S.Int), { nullable: true }),
  /**
* The contents of the issue.
*/
"body": S.optionalWith(S.String, { nullable: true }),
  /**
* Username to assign to this issue. **This field is closing down.**
*/
"assignee": S.optionalWith(S.String, { nullable: true }),
  /**
* The open or closed state of the issue.
*/
"state": S.optionalWith(IssuesUpdateRequestState, { nullable: true }),
  /**
* The reason for the state change. Ignored unless `state` is changed.
*/
"state_reason": S.optionalWith(IssuesUpdateRequestStateReason, { nullable: true }),
  "milestone": S.optionalWith(S.Union(S.String,
/**
* The `number` of the milestone to associate this issue with or use `null` to remove the current milestone. Only users with push access can set the milestone for issues. Without push access to the repository, milestone changes are silently dropped.
*/
S.Int), { nullable: true }),
  /**
* Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
*/
"labels": S.optionalWith(S.Array(S.Union(S.String,
S.Struct({
  "id": S.optionalWith(S.Int, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true }),
  "color": S.optionalWith(S.String, { nullable: true })
}))), { nullable: true }),
  /**
* Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.
*/
"assignees": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* The name of the issue type to associate with this issue or use `null` to remove the current issue type. Only users with push access can set the type for issues. Without push access to the repository, type changes are silently dropped.
*/
"type": S.optionalWith(S.String, { nullable: true })
}) {}

export class IssuesUpdate503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class IssuesAddAssigneesParams extends S.Struct({
  
}) {}

export class IssuesAddAssigneesRequest extends S.Class<IssuesAddAssigneesRequest>("IssuesAddAssigneesRequest")({
  /**
* Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._
*/
"assignees": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class IssuesRemoveAssigneesParams extends S.Struct({
  
}) {}

export class IssuesRemoveAssigneesRequest extends S.Class<IssuesRemoveAssigneesRequest>("IssuesRemoveAssigneesRequest")({
  /**
* Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._
*/
"assignees": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class IssuesCheckUserCanBeAssignedToIssueParams extends S.Struct({
  
}) {}

export class IssuesListCommentsParams extends S.Struct({
  "since": S.optionalWith(S.String, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class IssuesListComments200 extends S.Array(IssueComment) {}

export class IssuesCreateCommentParams extends S.Struct({
  
}) {}

export class IssuesCreateCommentRequest extends S.Class<IssuesCreateCommentRequest>("IssuesCreateCommentRequest")({
  /**
* The contents of the comment.
*/
"body": S.String
}) {}

export class IssuesListDependenciesBlockedByParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class IssuesListDependenciesBlockedBy200 extends S.Array(Issue) {}

export class IssuesAddBlockedByDependencyParams extends S.Struct({
  
}) {}

export class IssuesAddBlockedByDependencyRequest extends S.Class<IssuesAddBlockedByDependencyRequest>("IssuesAddBlockedByDependencyRequest")({
  /**
* The id of the issue that blocks the current issue
*/
"issue_id": S.Int
}) {}

export class IssuesRemoveDependencyBlockedByParams extends S.Struct({
  
}) {}

export class IssuesListDependenciesBlockingParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class IssuesListDependenciesBlocking200 extends S.Array(Issue) {}

export class IssuesListEventsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Labeled Issue Event
*/
export class LabeledIssueEvent extends S.Class<LabeledIssueEvent>("LabeledIssueEvent")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "actor": SimpleUser,
  "event": S.String,
  "commit_id": S.NullOr(S.String),
  "commit_url": S.NullOr(S.String),
  "created_at": S.String,
  "performed_via_github_app": S.NullOr(NullableIntegration),
  "label": S.Struct({
  "name": S.String,
  "color": S.String
})
}) {}

/**
* Unlabeled Issue Event
*/
export class UnlabeledIssueEvent extends S.Class<UnlabeledIssueEvent>("UnlabeledIssueEvent")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "actor": SimpleUser,
  "event": S.String,
  "commit_id": S.NullOr(S.String),
  "commit_url": S.NullOr(S.String),
  "created_at": S.String,
  "performed_via_github_app": S.NullOr(NullableIntegration),
  "label": S.Struct({
  "name": S.String,
  "color": S.String
})
}) {}

/**
* Assigned Issue Event
*/
export class AssignedIssueEvent extends S.Class<AssignedIssueEvent>("AssignedIssueEvent")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "actor": SimpleUser,
  "event": S.String,
  "commit_id": S.NullOr(S.String),
  "commit_url": S.NullOr(S.String),
  "created_at": S.String,
  "performed_via_github_app": S.NullOr(Integration),
  "assignee": SimpleUser,
  "assigner": SimpleUser
}) {}

/**
* Unassigned Issue Event
*/
export class UnassignedIssueEvent extends S.Class<UnassignedIssueEvent>("UnassignedIssueEvent")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "actor": SimpleUser,
  "event": S.String,
  "commit_id": S.NullOr(S.String),
  "commit_url": S.NullOr(S.String),
  "created_at": S.String,
  "performed_via_github_app": S.NullOr(NullableIntegration),
  "assignee": SimpleUser,
  "assigner": SimpleUser
}) {}

/**
* Milestoned Issue Event
*/
export class MilestonedIssueEvent extends S.Class<MilestonedIssueEvent>("MilestonedIssueEvent")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "actor": SimpleUser,
  "event": S.String,
  "commit_id": S.NullOr(S.String),
  "commit_url": S.NullOr(S.String),
  "created_at": S.String,
  "performed_via_github_app": S.NullOr(NullableIntegration),
  "milestone": S.Struct({
  "title": S.String
})
}) {}

/**
* Demilestoned Issue Event
*/
export class DemilestonedIssueEvent extends S.Class<DemilestonedIssueEvent>("DemilestonedIssueEvent")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "actor": SimpleUser,
  "event": S.String,
  "commit_id": S.NullOr(S.String),
  "commit_url": S.NullOr(S.String),
  "created_at": S.String,
  "performed_via_github_app": S.NullOr(NullableIntegration),
  "milestone": S.Struct({
  "title": S.String
})
}) {}

/**
* Renamed Issue Event
*/
export class RenamedIssueEvent extends S.Class<RenamedIssueEvent>("RenamedIssueEvent")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "actor": SimpleUser,
  "event": S.String,
  "commit_id": S.NullOr(S.String),
  "commit_url": S.NullOr(S.String),
  "created_at": S.String,
  "performed_via_github_app": S.NullOr(NullableIntegration),
  "rename": S.Struct({
  "from": S.String,
  "to": S.String
})
}) {}

/**
* Review Requested Issue Event
*/
export class ReviewRequestedIssueEvent extends S.Class<ReviewRequestedIssueEvent>("ReviewRequestedIssueEvent")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "actor": SimpleUser,
  "event": S.String,
  "commit_id": S.NullOr(S.String),
  "commit_url": S.NullOr(S.String),
  "created_at": S.String,
  "performed_via_github_app": S.NullOr(NullableIntegration),
  "review_requester": SimpleUser,
  "requested_team": S.optionalWith(Team, { nullable: true }),
  "requested_reviewer": S.optionalWith(SimpleUser, { nullable: true })
}) {}

/**
* Review Request Removed Issue Event
*/
export class ReviewRequestRemovedIssueEvent extends S.Class<ReviewRequestRemovedIssueEvent>("ReviewRequestRemovedIssueEvent")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "actor": SimpleUser,
  "event": S.String,
  "commit_id": S.NullOr(S.String),
  "commit_url": S.NullOr(S.String),
  "created_at": S.String,
  "performed_via_github_app": S.NullOr(NullableIntegration),
  "review_requester": SimpleUser,
  "requested_team": S.optionalWith(Team, { nullable: true }),
  "requested_reviewer": S.optionalWith(SimpleUser, { nullable: true })
}) {}

/**
* Review Dismissed Issue Event
*/
export class ReviewDismissedIssueEvent extends S.Class<ReviewDismissedIssueEvent>("ReviewDismissedIssueEvent")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "actor": SimpleUser,
  "event": S.String,
  "commit_id": S.NullOr(S.String),
  "commit_url": S.NullOr(S.String),
  "created_at": S.String,
  "performed_via_github_app": S.NullOr(NullableIntegration),
  "dismissed_review": S.Struct({
  "state": S.String,
  "review_id": S.Int,
  "dismissal_message": S.NullOr(S.String),
  "dismissal_commit_id": S.optionalWith(S.String, { nullable: true })
})
}) {}

/**
* Locked Issue Event
*/
export class LockedIssueEvent extends S.Class<LockedIssueEvent>("LockedIssueEvent")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "actor": SimpleUser,
  "event": S.String,
  "commit_id": S.NullOr(S.String),
  "commit_url": S.NullOr(S.String),
  "created_at": S.String,
  "performed_via_github_app": S.NullOr(NullableIntegration),
  "lock_reason": S.NullOr(S.String)
}) {}

/**
* Added to Project Issue Event
*/
export class AddedToProjectIssueEvent extends S.Class<AddedToProjectIssueEvent>("AddedToProjectIssueEvent")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "actor": SimpleUser,
  "event": S.String,
  "commit_id": S.NullOr(S.String),
  "commit_url": S.NullOr(S.String),
  "created_at": S.String,
  "performed_via_github_app": S.NullOr(NullableIntegration),
  "project_card": S.optionalWith(S.Struct({
  "id": S.Int,
  "url": S.String,
  "project_id": S.Int,
  "project_url": S.String,
  "column_name": S.String,
  "previous_column_name": S.optionalWith(S.String, { nullable: true })
}), { nullable: true })
}) {}

/**
* Moved Column in Project Issue Event
*/
export class MovedColumnInProjectIssueEvent extends S.Class<MovedColumnInProjectIssueEvent>("MovedColumnInProjectIssueEvent")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "actor": SimpleUser,
  "event": S.String,
  "commit_id": S.NullOr(S.String),
  "commit_url": S.NullOr(S.String),
  "created_at": S.String,
  "performed_via_github_app": S.NullOr(NullableIntegration),
  "project_card": S.optionalWith(S.Struct({
  "id": S.Int,
  "url": S.String,
  "project_id": S.Int,
  "project_url": S.String,
  "column_name": S.String,
  "previous_column_name": S.optionalWith(S.String, { nullable: true })
}), { nullable: true })
}) {}

/**
* Removed from Project Issue Event
*/
export class RemovedFromProjectIssueEvent extends S.Class<RemovedFromProjectIssueEvent>("RemovedFromProjectIssueEvent")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "actor": SimpleUser,
  "event": S.String,
  "commit_id": S.NullOr(S.String),
  "commit_url": S.NullOr(S.String),
  "created_at": S.String,
  "performed_via_github_app": S.NullOr(NullableIntegration),
  "project_card": S.optionalWith(S.Struct({
  "id": S.Int,
  "url": S.String,
  "project_id": S.Int,
  "project_url": S.String,
  "column_name": S.String,
  "previous_column_name": S.optionalWith(S.String, { nullable: true })
}), { nullable: true })
}) {}

/**
* Converted Note to Issue Issue Event
*/
export class ConvertedNoteToIssueIssueEvent extends S.Class<ConvertedNoteToIssueIssueEvent>("ConvertedNoteToIssueIssueEvent")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "actor": SimpleUser,
  "event": S.String,
  "commit_id": S.NullOr(S.String),
  "commit_url": S.NullOr(S.String),
  "created_at": S.String,
  "performed_via_github_app": S.NullOr(Integration),
  "project_card": S.optionalWith(S.Struct({
  "id": S.Int,
  "url": S.String,
  "project_id": S.Int,
  "project_url": S.String,
  "column_name": S.String,
  "previous_column_name": S.optionalWith(S.String, { nullable: true })
}), { nullable: true })
}) {}

/**
* Issue Event for Issue
*/
export class IssueEventForIssue extends S.Union(LabeledIssueEvent,
UnlabeledIssueEvent,
AssignedIssueEvent,
UnassignedIssueEvent,
MilestonedIssueEvent,
DemilestonedIssueEvent,
RenamedIssueEvent,
ReviewRequestedIssueEvent,
ReviewRequestRemovedIssueEvent,
ReviewDismissedIssueEvent,
LockedIssueEvent,
AddedToProjectIssueEvent,
MovedColumnInProjectIssueEvent,
RemovedFromProjectIssueEvent,
ConvertedNoteToIssueIssueEvent) {}

export class IssuesListEvents200 extends S.Array(IssueEventForIssue) {}

export class IssuesListLabelsOnIssueParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
*/
export class Label extends S.Class<Label>("Label")({
  /**
* Unique identifier for the label.
*/
"id": S.Int,
  "node_id": S.String,
  /**
* URL for the label
*/
"url": S.String,
  /**
* The name of the label.
*/
"name": S.String,
  /**
* Optional description of the label, such as its purpose.
*/
"description": S.NullOr(S.String),
  /**
* 6-character hex code, without the leading #, identifying the color
*/
"color": S.String,
  /**
* Whether this label comes by default in a new repository.
*/
"default": S.Boolean
}) {}

export class IssuesListLabelsOnIssue200 extends S.Array(Label) {}

export class IssuesSetLabelsParams extends S.Struct({
  
}) {}

export class IssuesSetLabelsRequest extends S.Union(S.Struct({
  /**
* The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/rest/issues/labels#add-labels-to-an-issue)."
*/
"labels": S.optionalWith(S.NonEmptyArray(S.String).pipe(S.minItems(1)), { nullable: true })
}),
S.NonEmptyArray(S.String).pipe(S.minItems(1)),
S.Struct({
  "labels": S.optionalWith(S.NonEmptyArray(S.Struct({
  "name": S.String
})).pipe(S.minItems(1)), { nullable: true })
}),
S.NonEmptyArray(S.Struct({
  "name": S.String
})).pipe(S.minItems(1)),
S.String) {}

export class IssuesSetLabels200 extends S.Array(Label) {}

export class IssuesAddLabelsParams extends S.Struct({
  
}) {}

export class IssuesAddLabelsRequest extends S.Union(S.Struct({
  /**
* The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/rest/issues/labels#set-labels-for-an-issue)."
*/
"labels": S.optionalWith(S.NonEmptyArray(S.String).pipe(S.minItems(1)), { nullable: true })
}),
S.NonEmptyArray(S.String).pipe(S.minItems(1)),
S.Struct({
  "labels": S.optionalWith(S.NonEmptyArray(S.Struct({
  "name": S.String
})).pipe(S.minItems(1)), { nullable: true })
}),
S.NonEmptyArray(S.Struct({
  "name": S.String
})).pipe(S.minItems(1)),
S.String) {}

export class IssuesAddLabels200 extends S.Array(Label) {}

export class IssuesRemoveAllLabelsParams extends S.Struct({
  
}) {}

export class IssuesRemoveLabelParams extends S.Struct({
  
}) {}

export class IssuesRemoveLabel200 extends S.Array(Label) {}

export class IssuesLockParams extends S.Struct({
  
}) {}

/**
* The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  
*  * `off-topic`  
*  * `too heated`  
*  * `resolved`  
*  * `spam`
*/
export class IssuesLockRequestLockReason extends S.Literal("off-topic", "too heated", "resolved", "spam") {}

export class IssuesLockRequest extends S.Class<IssuesLockRequest>("IssuesLockRequest")({
  /**
* The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  
*  * `off-topic`  
*  * `too heated`  
*  * `resolved`  
*  * `spam`
*/
"lock_reason": S.optionalWith(IssuesLockRequestLockReason, { nullable: true })
}) {}

export class IssuesUnlockParams extends S.Struct({
  
}) {}

export class ReactionsListForIssueParamsContent extends S.Literal("+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes") {}

export class ReactionsListForIssueParams extends S.Struct({
  "content": S.optionalWith(ReactionsListForIssueParamsContent, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReactionsListForIssue200 extends S.Array(Reaction) {}

export class ReactionsCreateForIssueParams extends S.Struct({
  
}) {}

/**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue.
*/
export class ReactionsCreateForIssueRequestContent extends S.Literal("+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes") {}

export class ReactionsCreateForIssueRequest extends S.Class<ReactionsCreateForIssueRequest>("ReactionsCreateForIssueRequest")({
  /**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue.
*/
"content": ReactionsCreateForIssueRequestContent
}) {}

export class ReactionsDeleteForIssueParams extends S.Struct({
  
}) {}

export class IssuesRemoveSubIssueParams extends S.Struct({
  
}) {}

export class IssuesRemoveSubIssueRequest extends S.Class<IssuesRemoveSubIssueRequest>("IssuesRemoveSubIssueRequest")({
  /**
* The id of the sub-issue to remove
*/
"sub_issue_id": S.Int
}) {}

export class IssuesListSubIssuesParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class IssuesListSubIssues200 extends S.Array(Issue) {}

export class IssuesAddSubIssueParams extends S.Struct({
  
}) {}

export class IssuesAddSubIssueRequest extends S.Class<IssuesAddSubIssueRequest>("IssuesAddSubIssueRequest")({
  /**
* The id of the sub-issue to add. The sub-issue must belong to the same repository owner as the parent issue
*/
"sub_issue_id": S.Int,
  /**
* Option that, when true, instructs the operation to replace the sub-issues current parent issue
*/
"replace_parent": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class IssuesReprioritizeSubIssueParams extends S.Struct({
  
}) {}

export class IssuesReprioritizeSubIssueRequest extends S.Class<IssuesReprioritizeSubIssueRequest>("IssuesReprioritizeSubIssueRequest")({
  /**
* The id of the sub-issue to reprioritize
*/
"sub_issue_id": S.Int,
  /**
* The id of the sub-issue to be prioritized after (either positional argument after OR before should be specified).
*/
"after_id": S.optionalWith(S.Int, { nullable: true }),
  /**
* The id of the sub-issue to be prioritized before (either positional argument after OR before should be specified).
*/
"before_id": S.optionalWith(S.Int, { nullable: true })
}) {}

export class IssuesReprioritizeSubIssue503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class IssuesListEventsForTimelineParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Timeline Comment Event
*/
export class TimelineCommentEvent extends S.Class<TimelineCommentEvent>("TimelineCommentEvent")({
  "event": S.String,
  "actor": SimpleUser,
  /**
* Unique identifier of the issue comment
*/
"id": S.Int,
  "node_id": S.String,
  /**
* URL for the issue comment
*/
"url": S.String,
  /**
* Contents of the issue comment
*/
"body": S.optionalWith(S.String, { nullable: true }),
  "body_text": S.optionalWith(S.String, { nullable: true }),
  "body_html": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.String,
  "user": SimpleUser,
  "created_at": S.String,
  "updated_at": S.String,
  "issue_url": S.String,
  "author_association": AuthorAssociation,
  "performed_via_github_app": S.optionalWith(NullableIntegration, { nullable: true }),
  "reactions": S.optionalWith(ReactionRollup, { nullable: true })
}) {}

/**
* Timeline Cross Referenced Event
*/
export class TimelineCrossReferencedEvent extends S.Class<TimelineCrossReferencedEvent>("TimelineCrossReferencedEvent")({
  "event": S.String,
  "actor": S.optionalWith(SimpleUser, { nullable: true }),
  "created_at": S.String,
  "updated_at": S.String,
  "source": S.Struct({
  "type": S.optionalWith(S.String, { nullable: true }),
  "issue": S.optionalWith(Issue, { nullable: true })
})
}) {}

/**
* Timeline Committed Event
*/
export class TimelineCommittedEvent extends S.Class<TimelineCommittedEvent>("TimelineCommittedEvent")({
  "event": S.optionalWith(S.String, { nullable: true }),
  /**
* SHA for the commit
*/
"sha": S.String,
  "node_id": S.String,
  "url": S.String,
  /**
* Identifying information for the git-user
*/
"author": S.Struct({
  /**
* Timestamp of the commit
*/
"date": S.String,
  /**
* Git email address of the user
*/
"email": S.String,
  /**
* Name of the git user
*/
"name": S.String
}),
  /**
* Identifying information for the git-user
*/
"committer": S.Struct({
  /**
* Timestamp of the commit
*/
"date": S.String,
  /**
* Git email address of the user
*/
"email": S.String,
  /**
* Name of the git user
*/
"name": S.String
}),
  /**
* Message describing the purpose of the commit
*/
"message": S.String,
  "tree": S.Struct({
  /**
* SHA for the commit
*/
"sha": S.String,
  "url": S.String
}),
  "parents": S.Array(S.Struct({
  /**
* SHA for the commit
*/
"sha": S.String,
  "url": S.String,
  "html_url": S.String
})),
  "verification": S.Struct({
  "verified": S.Boolean,
  "reason": S.String,
  "signature": S.NullOr(S.String),
  "payload": S.NullOr(S.String),
  "verified_at": S.NullOr(S.String)
}),
  "html_url": S.String
}) {}

/**
* Timeline Reviewed Event
*/
export class TimelineReviewedEvent extends S.Class<TimelineReviewedEvent>("TimelineReviewedEvent")({
  "event": S.String,
  /**
* Unique identifier of the review
*/
"id": S.Int,
  "node_id": S.String,
  "user": SimpleUser,
  /**
* The text of the review.
*/
"body": S.NullOr(S.String),
  "state": S.String,
  "html_url": S.String,
  "pull_request_url": S.String,
  "_links": S.Struct({
  "html": S.Struct({
  "href": S.String
}),
  "pull_request": S.Struct({
  "href": S.String
})
}),
  "submitted_at": S.optionalWith(S.String, { nullable: true }),
  "updated_at": S.optionalWith(S.String, { nullable: true }),
  /**
* A commit SHA for the review.
*/
"commit_id": S.String,
  "body_html": S.optionalWith(S.String, { nullable: true }),
  "body_text": S.optionalWith(S.String, { nullable: true }),
  "author_association": AuthorAssociation
}) {}

/**
* The side of the first line of the range for a multi-line comment.
*/
export class PullRequestReviewCommentStartSide extends S.Literal("LEFT", "RIGHT") {}

/**
* The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
*/
export class PullRequestReviewCommentSide extends S.Literal("LEFT", "RIGHT") {}

/**
* The level at which the comment is targeted, can be a diff line or a file.
*/
export class PullRequestReviewCommentSubjectType extends S.Literal("line", "file") {}

/**
* Pull Request Review Comments are comments on a portion of the Pull Request's diff.
*/
export class PullRequestReviewComment extends S.Class<PullRequestReviewComment>("PullRequestReviewComment")({
  /**
* URL for the pull request review comment
*/
"url": S.String,
  /**
* The ID of the pull request review to which the comment belongs.
*/
"pull_request_review_id": S.NullOr(S.Int),
  /**
* The ID of the pull request review comment.
*/
"id": S.Int,
  /**
* The node ID of the pull request review comment.
*/
"node_id": S.String,
  /**
* The diff of the line that the comment refers to.
*/
"diff_hunk": S.String,
  /**
* The relative path of the file to which the comment applies.
*/
"path": S.String,
  /**
* The line index in the diff to which the comment applies. This field is closing down; use `line` instead.
*/
"position": S.optionalWith(S.Int, { nullable: true }),
  /**
* The index of the original line in the diff to which the comment applies. This field is closing down; use `original_line` instead.
*/
"original_position": S.optionalWith(S.Int, { nullable: true }),
  /**
* The SHA of the commit to which the comment applies.
*/
"commit_id": S.String,
  /**
* The SHA of the original commit to which the comment applies.
*/
"original_commit_id": S.String,
  /**
* The comment ID to reply to.
*/
"in_reply_to_id": S.optionalWith(S.Int, { nullable: true }),
  "user": SimpleUser,
  /**
* The text of the comment.
*/
"body": S.String,
  "created_at": S.String,
  "updated_at": S.String,
  /**
* HTML URL for the pull request review comment.
*/
"html_url": S.String,
  /**
* URL for the pull request that the review comment belongs to.
*/
"pull_request_url": S.String,
  "author_association": AuthorAssociation,
  "_links": S.Struct({
  "self": S.Struct({
  "href": S.String
}),
  "html": S.Struct({
  "href": S.String
}),
  "pull_request": S.Struct({
  "href": S.String
})
}),
  /**
* The first line of the range for a multi-line comment.
*/
"start_line": S.optionalWith(S.Int, { nullable: true }),
  /**
* The first line of the range for a multi-line comment.
*/
"original_start_line": S.optionalWith(S.Int, { nullable: true }),
  /**
* The side of the first line of the range for a multi-line comment.
*/
"start_side": S.optionalWith(PullRequestReviewCommentStartSide, { nullable: true, default: () => "RIGHT" as const }),
  /**
* The line of the blob to which the comment applies. The last line of the range for a multi-line comment
*/
"line": S.optionalWith(S.Int, { nullable: true }),
  /**
* The line of the blob to which the comment applies. The last line of the range for a multi-line comment
*/
"original_line": S.optionalWith(S.Int, { nullable: true }),
  /**
* The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
*/
"side": S.optionalWith(PullRequestReviewCommentSide, { nullable: true, default: () => "RIGHT" as const }),
  /**
* The level at which the comment is targeted, can be a diff line or a file.
*/
"subject_type": S.optionalWith(PullRequestReviewCommentSubjectType, { nullable: true }),
  "reactions": S.optionalWith(ReactionRollup, { nullable: true }),
  "body_html": S.optionalWith(S.String, { nullable: true }),
  "body_text": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Timeline Line Commented Event
*/
export class TimelineLineCommentedEvent extends S.Class<TimelineLineCommentedEvent>("TimelineLineCommentedEvent")({
  "event": S.optionalWith(S.String, { nullable: true }),
  "node_id": S.optionalWith(S.String, { nullable: true }),
  "comments": S.optionalWith(S.Array(PullRequestReviewComment), { nullable: true })
}) {}

/**
* Timeline Commit Commented Event
*/
export class TimelineCommitCommentedEvent extends S.Class<TimelineCommitCommentedEvent>("TimelineCommitCommentedEvent")({
  "event": S.optionalWith(S.String, { nullable: true }),
  "node_id": S.optionalWith(S.String, { nullable: true }),
  "commit_id": S.optionalWith(S.String, { nullable: true }),
  "comments": S.optionalWith(S.Array(CommitComment), { nullable: true })
}) {}

/**
* Timeline Assigned Issue Event
*/
export class TimelineAssignedIssueEvent extends S.Class<TimelineAssignedIssueEvent>("TimelineAssignedIssueEvent")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "actor": SimpleUser,
  "event": S.String,
  "commit_id": S.NullOr(S.String),
  "commit_url": S.NullOr(S.String),
  "created_at": S.String,
  "performed_via_github_app": S.NullOr(NullableIntegration),
  "assignee": SimpleUser
}) {}

/**
* Timeline Unassigned Issue Event
*/
export class TimelineUnassignedIssueEvent extends S.Class<TimelineUnassignedIssueEvent>("TimelineUnassignedIssueEvent")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "actor": SimpleUser,
  "event": S.String,
  "commit_id": S.NullOr(S.String),
  "commit_url": S.NullOr(S.String),
  "created_at": S.String,
  "performed_via_github_app": S.NullOr(NullableIntegration),
  "assignee": SimpleUser
}) {}

/**
* State Change Issue Event
*/
export class StateChangeIssueEvent extends S.Class<StateChangeIssueEvent>("StateChangeIssueEvent")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "actor": SimpleUser,
  "event": S.String,
  "commit_id": S.NullOr(S.String),
  "commit_url": S.NullOr(S.String),
  "created_at": S.String,
  "performed_via_github_app": S.NullOr(NullableIntegration),
  "state_reason": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Timeline Event
*/
export class TimelineIssueEvents extends S.Record({ key: S.String, value: S.Unknown }) {}

export class IssuesListEventsForTimeline200 extends S.Array(TimelineIssueEvents) {}

export class ReposListDeployKeysParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* An SSH key granting access to a single repository.
*/
export class DeployKey extends S.Class<DeployKey>("DeployKey")({
  "id": S.Int,
  "key": S.String,
  "url": S.String,
  "title": S.String,
  "verified": S.Boolean,
  "created_at": S.String,
  "read_only": S.Boolean,
  "added_by": S.optionalWith(S.String, { nullable: true }),
  "last_used": S.optionalWith(S.String, { nullable: true }),
  "enabled": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class ReposListDeployKeys200 extends S.Array(DeployKey) {}

export class ReposCreateDeployKeyParams extends S.Struct({
  
}) {}

export class ReposCreateDeployKeyRequest extends S.Class<ReposCreateDeployKeyRequest>("ReposCreateDeployKeyRequest")({
  /**
* A name for the key.
*/
"title": S.optionalWith(S.String, { nullable: true }),
  /**
* The contents of the key.
*/
"key": S.String,
  /**
* If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  
*   
* Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
*/
"read_only": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class ReposGetDeployKeyParams extends S.Struct({
  
}) {}

export class ReposDeleteDeployKeyParams extends S.Struct({
  
}) {}

export class IssuesListLabelsForRepoParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class IssuesListLabelsForRepo200 extends S.Array(Label) {}

export class IssuesCreateLabelParams extends S.Struct({
  
}) {}

export class IssuesCreateLabelRequest extends S.Class<IssuesCreateLabelRequest>("IssuesCreateLabelRequest")({
  /**
* The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
*/
"name": S.String,
  /**
* The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
*/
"color": S.optionalWith(S.String, { nullable: true }),
  /**
* A short description of the label. Must be 100 characters or fewer.
*/
"description": S.optionalWith(S.String, { nullable: true })
}) {}

export class IssuesGetLabelParams extends S.Struct({
  
}) {}

export class IssuesDeleteLabelParams extends S.Struct({
  
}) {}

export class IssuesUpdateLabelParams extends S.Struct({
  
}) {}

export class IssuesUpdateLabelRequest extends S.Class<IssuesUpdateLabelRequest>("IssuesUpdateLabelRequest")({
  /**
* The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
*/
"new_name": S.optionalWith(S.String, { nullable: true }),
  /**
* The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
*/
"color": S.optionalWith(S.String, { nullable: true }),
  /**
* A short description of the label. Must be 100 characters or fewer.
*/
"description": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposListLanguagesParams extends S.Struct({
  
}) {}

/**
* Language
*/
export class Language extends S.Record({ key: S.String, value: S.Unknown }) {}

export class LicensesGetForRepoParams extends S.Struct({
  "ref": S.optionalWith(CodeScanningRef, { nullable: true })
}) {}

/**
* License Content
*/
export class LicenseContent extends S.Class<LicenseContent>("LicenseContent")({
  "name": S.String,
  "path": S.String,
  "sha": S.String,
  "size": S.Int,
  "url": S.String,
  "html_url": S.NullOr(S.String),
  "git_url": S.NullOr(S.String),
  "download_url": S.NullOr(S.String),
  "type": S.String,
  "content": S.String,
  "encoding": S.String,
  "_links": S.Struct({
  "git": S.NullOr(S.String),
  "html": S.NullOr(S.String),
  "self": S.String
}),
  "license": S.NullOr(NullableLicenseSimple)
}) {}

export class ReposMergeUpstreamParams extends S.Struct({
  
}) {}

export class ReposMergeUpstreamRequest extends S.Class<ReposMergeUpstreamRequest>("ReposMergeUpstreamRequest")({
  /**
* The name of the branch which should be updated to match upstream.
*/
"branch": S.String
}) {}

export class MergedUpstreamMergeType extends S.Literal("merge", "fast-forward", "none") {}

/**
* Results of a successful merge upstream request
*/
export class MergedUpstream extends S.Class<MergedUpstream>("MergedUpstream")({
  "message": S.optionalWith(S.String, { nullable: true }),
  "merge_type": S.optionalWith(MergedUpstreamMergeType, { nullable: true }),
  "base_branch": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposMergeParams extends S.Struct({
  
}) {}

export class ReposMergeRequest extends S.Class<ReposMergeRequest>("ReposMergeRequest")({
  /**
* The name of the base branch that the head will be merged into.
*/
"base": S.String,
  /**
* The head to merge. This can be a branch name or a commit SHA1.
*/
"head": S.String,
  /**
* Commit message to use for the merge commit. If omitted, a default message will be used.
*/
"commit_message": S.optionalWith(S.String, { nullable: true })
}) {}

export class IssuesListMilestonesParamsState extends S.Literal("open", "closed", "all") {}

export class IssuesListMilestonesParamsSort extends S.Literal("due_on", "completeness") {}

export class IssuesListMilestonesParamsDirection extends S.Literal("asc", "desc") {}

export class IssuesListMilestonesParams extends S.Struct({
  "state": S.optionalWith(IssuesListMilestonesParamsState, { nullable: true, default: () => "open" as const }),
  "sort": S.optionalWith(IssuesListMilestonesParamsSort, { nullable: true, default: () => "due_on" as const }),
  "direction": S.optionalWith(IssuesListMilestonesParamsDirection, { nullable: true, default: () => "asc" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* The state of the milestone.
*/
export class MilestoneState extends S.Literal("open", "closed") {}

/**
* A collection of related issues and pull requests.
*/
export class Milestone extends S.Class<Milestone>("Milestone")({
  "url": S.String,
  "html_url": S.String,
  "labels_url": S.String,
  "id": S.Int,
  "node_id": S.String,
  /**
* The number of the milestone.
*/
"number": S.Int,
  /**
* The state of the milestone.
*/
"state": MilestoneState.pipe(S.propertySignature, S.withConstructorDefault(() => "open" as const)),
  /**
* The title of the milestone.
*/
"title": S.String,
  "description": S.NullOr(S.String),
  "creator": S.NullOr(NullableSimpleUser),
  "open_issues": S.Int,
  "closed_issues": S.Int,
  "created_at": S.String,
  "updated_at": S.String,
  "closed_at": S.NullOr(S.String),
  "due_on": S.NullOr(S.String)
}) {}

export class IssuesListMilestones200 extends S.Array(Milestone) {}

export class IssuesCreateMilestoneParams extends S.Struct({
  
}) {}

/**
* The state of the milestone. Either `open` or `closed`.
*/
export class IssuesCreateMilestoneRequestState extends S.Literal("open", "closed") {}

export class IssuesCreateMilestoneRequest extends S.Class<IssuesCreateMilestoneRequest>("IssuesCreateMilestoneRequest")({
  /**
* The title of the milestone.
*/
"title": S.String,
  /**
* The state of the milestone. Either `open` or `closed`.
*/
"state": S.optionalWith(IssuesCreateMilestoneRequestState, { nullable: true, default: () => "open" as const }),
  /**
* A description of the milestone.
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
"due_on": S.optionalWith(S.String, { nullable: true })
}) {}

export class IssuesGetMilestoneParams extends S.Struct({
  
}) {}

export class IssuesDeleteMilestoneParams extends S.Struct({
  
}) {}

export class IssuesUpdateMilestoneParams extends S.Struct({
  
}) {}

/**
* The state of the milestone. Either `open` or `closed`.
*/
export class IssuesUpdateMilestoneRequestState extends S.Literal("open", "closed") {}

export class IssuesUpdateMilestoneRequest extends S.Class<IssuesUpdateMilestoneRequest>("IssuesUpdateMilestoneRequest")({
  /**
* The title of the milestone.
*/
"title": S.optionalWith(S.String, { nullable: true }),
  /**
* The state of the milestone. Either `open` or `closed`.
*/
"state": S.optionalWith(IssuesUpdateMilestoneRequestState, { nullable: true, default: () => "open" as const }),
  /**
* A description of the milestone.
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
"due_on": S.optionalWith(S.String, { nullable: true })
}) {}

export class IssuesListLabelsForMilestoneParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class IssuesListLabelsForMilestone200 extends S.Array(Label) {}

export class ActivityListRepoNotificationsForAuthenticatedUserParams extends S.Struct({
  "all": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "participating": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "since": S.optionalWith(S.String, { nullable: true }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActivityListRepoNotificationsForAuthenticatedUser200 extends S.Array(Thread) {}

export class ActivityMarkRepoNotificationsAsReadParams extends S.Struct({
  
}) {}

export class ActivityMarkRepoNotificationsAsReadRequest extends S.Class<ActivityMarkRepoNotificationsAsReadRequest>("ActivityMarkRepoNotificationsAsReadRequest")({
  /**
* Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
*/
"last_read_at": S.optionalWith(S.String, { nullable: true })
}) {}

export class ActivityMarkRepoNotificationsAsRead202 extends S.Struct({
  "message": S.optionalWith(S.String, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposGetPagesParams extends S.Struct({
  
}) {}

/**
* The status of the most recent build of the Page.
*/
export class PageStatus extends S.Literal("built", "building", "errored") {}

/**
* The state if the domain is verified
*/
export class PageProtectedDomainState extends S.Literal("pending", "verified", "unverified") {}

/**
* The process in which the Page will be built.
*/
export class PageBuildType extends S.Literal("legacy", "workflow") {}

export class PagesSourceHash extends S.Class<PagesSourceHash>("PagesSourceHash")({
  "branch": S.String,
  "path": S.String
}) {}

export class PagesHttpsCertificateState extends S.Literal("new", "authorization_created", "authorization_pending", "authorized", "authorization_revoked", "issued", "uploaded", "approved", "errored", "bad_authz", "destroy_pending", "dns_changed") {}

export class PagesHttpsCertificate extends S.Class<PagesHttpsCertificate>("PagesHttpsCertificate")({
  "state": PagesHttpsCertificateState,
  "description": S.String,
  /**
* Array of the domain set and its alternate name (if it is configured)
*/
"domains": S.Array(S.String),
  "expires_at": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* The configuration for GitHub Pages for a repository.
*/
export class Page extends S.Class<Page>("Page")({
  /**
* The API address for accessing this Page resource.
*/
"url": S.String,
  /**
* The status of the most recent build of the Page.
*/
"status": S.NullOr(PageStatus),
  /**
* The Pages site's custom domain
*/
"cname": S.NullOr(S.String),
  /**
* The state if the domain is verified
*/
"protected_domain_state": S.optionalWith(PageProtectedDomainState, { nullable: true }),
  /**
* The timestamp when a pending domain becomes unverified.
*/
"pending_domain_unverified_at": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether the Page has a custom 404 page.
*/
"custom_404": S.Boolean.pipe(S.propertySignature, S.withConstructorDefault(() => false as const)),
  /**
* The web address the Page can be accessed from.
*/
"html_url": S.optionalWith(S.String, { nullable: true }),
  /**
* The process in which the Page will be built.
*/
"build_type": S.optionalWith(PageBuildType, { nullable: true }),
  "source": S.optionalWith(PagesSourceHash, { nullable: true }),
  /**
* Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
*/
"public": S.Boolean,
  "https_certificate": S.optionalWith(PagesHttpsCertificate, { nullable: true }),
  /**
* Whether https is enabled on the domain
*/
"https_enforced": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class ReposUpdateInformationAboutPagesSiteParams extends S.Struct({
  
}) {}

/**
* The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
*/
export class ReposUpdateInformationAboutPagesSiteRequestBuildType extends S.Literal("legacy", "workflow") {}

/**
* Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`.
*/
export class ReposUpdateInformationAboutPagesSiteRequestSourceEnum extends S.Literal("gh-pages", "master", "master /docs") {}

/**
* The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
*/
export class ReposUpdateInformationAboutPagesSiteRequestSourceEnumPath extends S.Literal("/", "/docs") {}

export class ReposUpdateInformationAboutPagesSiteRequest extends S.Class<ReposUpdateInformationAboutPagesSiteRequest>("ReposUpdateInformationAboutPagesSiteRequest")({
  /**
* Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/pages/configuring-a-custom-domain-for-your-github-pages-site)."
*/
"cname": S.optionalWith(S.String, { nullable: true }),
  /**
* Specify whether HTTPS should be enforced for the repository.
*/
"https_enforced": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
*/
"build_type": S.optionalWith(ReposUpdateInformationAboutPagesSiteRequestBuildType, { nullable: true }),
  "source": S.optionalWith(S.Union(/**
* Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`.
*/
ReposUpdateInformationAboutPagesSiteRequestSourceEnum,
/**
* Update the source for the repository. Must include the branch name and path.
*/
S.Struct({
  /**
* The repository branch used to publish your site's source files.
*/
"branch": S.String,
  /**
* The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
*/
"path": ReposUpdateInformationAboutPagesSiteRequestSourceEnumPath
})), { nullable: true })
}) {}

export class ReposCreatePagesSiteParams extends S.Struct({
  
}) {}

/**
* The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.
*/
export class ReposCreatePagesSiteRequestBuildType extends S.Literal("legacy", "workflow") {}

/**
* The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
*/
export class ReposCreatePagesSiteRequestSourcePath extends S.Literal("/", "/docs") {}

/**
* The source branch and directory used to publish your Pages site.
*/
export class ReposCreatePagesSiteRequest extends S.Class<ReposCreatePagesSiteRequest>("ReposCreatePagesSiteRequest")({
  /**
* The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.
*/
"build_type": S.optionalWith(ReposCreatePagesSiteRequestBuildType, { nullable: true }),
  /**
* The source branch and directory used to publish your Pages site.
*/
"source": S.optionalWith(S.Struct({
  /**
* The repository branch used to publish your site's source files.
*/
"branch": S.String,
  /**
* The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
*/
"path": S.optionalWith(ReposCreatePagesSiteRequestSourcePath, { nullable: true, default: () => "/" as const })
}), { nullable: true })
}) {}

export class ReposDeletePagesSiteParams extends S.Struct({
  
}) {}

export class ReposListPagesBuildsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Page Build
*/
export class PageBuild extends S.Class<PageBuild>("PageBuild")({
  "url": S.String,
  "status": S.String,
  "error": S.Struct({
  "message": S.NullOr(S.String)
}),
  "pusher": S.NullOr(NullableSimpleUser),
  "commit": S.String,
  "duration": S.Int,
  "created_at": S.String,
  "updated_at": S.String
}) {}

export class ReposListPagesBuilds200 extends S.Array(PageBuild) {}

export class ReposRequestPagesBuildParams extends S.Struct({
  
}) {}

/**
* Page Build Status
*/
export class PageBuildStatus extends S.Class<PageBuildStatus>("PageBuildStatus")({
  "url": S.String,
  "status": S.String
}) {}

export class ReposGetLatestPagesBuildParams extends S.Struct({
  
}) {}

export class ReposGetPagesBuildParams extends S.Struct({
  
}) {}

export class ReposCreatePagesDeploymentParams extends S.Struct({
  
}) {}

/**
* The object used to create GitHub Pages deployment
*/
export class ReposCreatePagesDeploymentRequest extends S.Class<ReposCreatePagesDeploymentRequest>("ReposCreatePagesDeploymentRequest")({
  /**
* The ID of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required.
*/
"artifact_id": S.optionalWith(S.Number, { nullable: true }),
  /**
* The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required.
*/
"artifact_url": S.optionalWith(S.String, { nullable: true }),
  /**
* The target environment for this GitHub Pages deployment.
*/
"environment": S.optionalWith(S.String, { nullable: true, default: () => "github-pages" as const }),
  /**
* A unique string that represents the version of the build for this deployment.
*/
"pages_build_version": S.String.pipe(S.propertySignature, S.withConstructorDefault(() => "GITHUB_SHA" as const)),
  /**
* The OIDC token issued by GitHub Actions certifying the origin of the deployment.
*/
"oidc_token": S.String
}) {}

/**
* The GitHub Pages deployment status.
*/
export class PageDeployment extends S.Class<PageDeployment>("PageDeployment")({
  /**
* The ID of the GitHub Pages deployment. This is the Git SHA of the deployed commit.
*/
"id": S.Union(S.Int,
S.String),
  /**
* The URI to monitor GitHub Pages deployment status.
*/
"status_url": S.String,
  /**
* The URI to the deployed GitHub Pages.
*/
"page_url": S.String,
  /**
* The URI to the deployed GitHub Pages preview.
*/
"preview_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposGetPagesDeploymentParams extends S.Struct({
  
}) {}

/**
* The current status of the deployment.
*/
export class PagesDeploymentStatusStatus extends S.Literal("deployment_in_progress", "syncing_files", "finished_file_sync", "updating_pages", "purging_cdn", "deployment_cancelled", "deployment_failed", "deployment_content_failed", "deployment_attempt_error", "deployment_lost", "succeed") {}

export class PagesDeploymentStatus extends S.Class<PagesDeploymentStatus>("PagesDeploymentStatus")({
  /**
* The current status of the deployment.
*/
"status": S.optionalWith(PagesDeploymentStatusStatus, { nullable: true })
}) {}

export class ReposCancelPagesDeploymentParams extends S.Struct({
  
}) {}

export class ReposGetPagesHealthCheckParams extends S.Struct({
  
}) {}

/**
* Pages Health Check Status
*/
export class PagesHealthCheck extends S.Class<PagesHealthCheck>("PagesHealthCheck")({
  "domain": S.optionalWith(S.Struct({
  "host": S.optionalWith(S.String, { nullable: true }),
  "uri": S.optionalWith(S.String, { nullable: true }),
  "nameservers": S.optionalWith(S.String, { nullable: true }),
  "dns_resolves": S.optionalWith(S.Boolean, { nullable: true }),
  "is_proxied": S.optionalWith(S.Boolean, { nullable: true }),
  "is_cloudflare_ip": S.optionalWith(S.Boolean, { nullable: true }),
  "is_fastly_ip": S.optionalWith(S.Boolean, { nullable: true }),
  "is_old_ip_address": S.optionalWith(S.Boolean, { nullable: true }),
  "is_a_record": S.optionalWith(S.Boolean, { nullable: true }),
  "has_cname_record": S.optionalWith(S.Boolean, { nullable: true }),
  "has_mx_records_present": S.optionalWith(S.Boolean, { nullable: true }),
  "is_valid_domain": S.optionalWith(S.Boolean, { nullable: true }),
  "is_apex_domain": S.optionalWith(S.Boolean, { nullable: true }),
  "should_be_a_record": S.optionalWith(S.Boolean, { nullable: true }),
  "is_cname_to_github_user_domain": S.optionalWith(S.Boolean, { nullable: true }),
  "is_cname_to_pages_dot_github_dot_com": S.optionalWith(S.Boolean, { nullable: true }),
  "is_cname_to_fastly": S.optionalWith(S.Boolean, { nullable: true }),
  "is_pointed_to_github_pages_ip": S.optionalWith(S.Boolean, { nullable: true }),
  "is_non_github_pages_ip_present": S.optionalWith(S.Boolean, { nullable: true }),
  "is_pages_domain": S.optionalWith(S.Boolean, { nullable: true }),
  "is_served_by_pages": S.optionalWith(S.Boolean, { nullable: true }),
  "is_valid": S.optionalWith(S.Boolean, { nullable: true }),
  "reason": S.optionalWith(S.String, { nullable: true }),
  "responds_to_https": S.optionalWith(S.Boolean, { nullable: true }),
  "enforces_https": S.optionalWith(S.Boolean, { nullable: true }),
  "https_error": S.optionalWith(S.String, { nullable: true }),
  "is_https_eligible": S.optionalWith(S.Boolean, { nullable: true }),
  "caa_error": S.optionalWith(S.String, { nullable: true })
}), { nullable: true }),
  "alt_domain": S.optionalWith(S.Struct({
  "host": S.optionalWith(S.String, { nullable: true }),
  "uri": S.optionalWith(S.String, { nullable: true }),
  "nameservers": S.optionalWith(S.String, { nullable: true }),
  "dns_resolves": S.optionalWith(S.Boolean, { nullable: true }),
  "is_proxied": S.optionalWith(S.Boolean, { nullable: true }),
  "is_cloudflare_ip": S.optionalWith(S.Boolean, { nullable: true }),
  "is_fastly_ip": S.optionalWith(S.Boolean, { nullable: true }),
  "is_old_ip_address": S.optionalWith(S.Boolean, { nullable: true }),
  "is_a_record": S.optionalWith(S.Boolean, { nullable: true }),
  "has_cname_record": S.optionalWith(S.Boolean, { nullable: true }),
  "has_mx_records_present": S.optionalWith(S.Boolean, { nullable: true }),
  "is_valid_domain": S.optionalWith(S.Boolean, { nullable: true }),
  "is_apex_domain": S.optionalWith(S.Boolean, { nullable: true }),
  "should_be_a_record": S.optionalWith(S.Boolean, { nullable: true }),
  "is_cname_to_github_user_domain": S.optionalWith(S.Boolean, { nullable: true }),
  "is_cname_to_pages_dot_github_dot_com": S.optionalWith(S.Boolean, { nullable: true }),
  "is_cname_to_fastly": S.optionalWith(S.Boolean, { nullable: true }),
  "is_pointed_to_github_pages_ip": S.optionalWith(S.Boolean, { nullable: true }),
  "is_non_github_pages_ip_present": S.optionalWith(S.Boolean, { nullable: true }),
  "is_pages_domain": S.optionalWith(S.Boolean, { nullable: true }),
  "is_served_by_pages": S.optionalWith(S.Boolean, { nullable: true }),
  "is_valid": S.optionalWith(S.Boolean, { nullable: true }),
  "reason": S.optionalWith(S.String, { nullable: true }),
  "responds_to_https": S.optionalWith(S.Boolean, { nullable: true }),
  "enforces_https": S.optionalWith(S.Boolean, { nullable: true }),
  "https_error": S.optionalWith(S.String, { nullable: true }),
  "is_https_eligible": S.optionalWith(S.Boolean, { nullable: true }),
  "caa_error": S.optionalWith(S.String, { nullable: true })
}), { nullable: true })
}) {}

export class ReposCheckPrivateVulnerabilityReportingParams extends S.Struct({
  
}) {}

export class ReposCheckPrivateVulnerabilityReporting200 extends S.Struct({
  /**
* Whether or not private vulnerability reporting is enabled for the repository.
*/
"enabled": S.Boolean
}) {}

export class ReposEnablePrivateVulnerabilityReportingParams extends S.Struct({
  
}) {}

export class ReposDisablePrivateVulnerabilityReportingParams extends S.Struct({
  
}) {}

export class ProjectsClassicListForRepoParamsState extends S.Literal("open", "closed", "all") {}

export class ProjectsClassicListForRepoParams extends S.Struct({
  "state": S.optionalWith(ProjectsClassicListForRepoParamsState, { nullable: true, default: () => "open" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ProjectsClassicListForRepo200 extends S.Array(Project) {}

export class ProjectsClassicCreateForRepoParams extends S.Struct({
  
}) {}

export class ProjectsClassicCreateForRepoRequest extends S.Class<ProjectsClassicCreateForRepoRequest>("ProjectsClassicCreateForRepoRequest")({
  /**
* The name of the project.
*/
"name": S.String,
  /**
* The description of the project.
*/
"body": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposGetCustomPropertiesValuesParams extends S.Struct({
  
}) {}

export class ReposGetCustomPropertiesValues200 extends S.Array(CustomPropertyValue) {}

export class ReposCreateOrUpdateCustomPropertiesValuesParams extends S.Struct({
  
}) {}

export class ReposCreateOrUpdateCustomPropertiesValuesRequest extends S.Class<ReposCreateOrUpdateCustomPropertiesValuesRequest>("ReposCreateOrUpdateCustomPropertiesValuesRequest")({
  /**
* A list of custom property names and associated values to apply to the repositories.
*/
"properties": S.Array(CustomPropertyValue)
}) {}

export class PullsListParamsState extends S.Literal("open", "closed", "all") {}

export class PullsListParamsSort extends S.Literal("created", "updated", "popularity", "long-running") {}

export class PullsListParamsDirection extends S.Literal("asc", "desc") {}

export class PullsListParams extends S.Struct({
  "state": S.optionalWith(PullsListParamsState, { nullable: true, default: () => "open" as const }),
  "head": S.optionalWith(S.String, { nullable: true }),
  "base": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(PullsListParamsSort, { nullable: true, default: () => "created" as const }),
  "direction": S.optionalWith(PullsListParamsDirection, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class PullsList200 extends S.Array(PullRequestSimple) {}

export class PullsCreateParams extends S.Struct({
  
}) {}

export class PullsCreateRequest extends S.Class<PullsCreateRequest>("PullsCreateRequest")({
  /**
* The title of the new pull request. Required unless `issue` is specified.
*/
"title": S.optionalWith(S.String, { nullable: true }),
  /**
* The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
*/
"head": S.String,
  /**
* The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.
*/
"head_repo": S.optionalWith(S.String, { nullable: true }),
  /**
* The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
*/
"base": S.String,
  /**
* The contents of the pull request.
*/
"body": S.optionalWith(S.String, { nullable: true }),
  /**
* Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
*/
"maintainer_can_modify": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.
*/
"draft": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.
*/
"issue": S.optionalWith(S.Int, { nullable: true })
}) {}

/**
* State of this Pull Request. Either `open` or `closed`.
*/
export class PullRequestState extends S.Literal("open", "closed") {}

/**
* Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
*/
export class PullRequest extends S.Class<PullRequest>("PullRequest")({
  "url": S.String,
  "id": S.Int,
  "node_id": S.String,
  "html_url": S.String,
  "diff_url": S.String,
  "patch_url": S.String,
  "issue_url": S.String,
  "commits_url": S.String,
  "review_comments_url": S.String,
  "review_comment_url": S.String,
  "comments_url": S.String,
  "statuses_url": S.String,
  /**
* Number uniquely identifying the pull request within its repository.
*/
"number": S.Int,
  /**
* State of this Pull Request. Either `open` or `closed`.
*/
"state": PullRequestState,
  "locked": S.Boolean,
  /**
* The title of the pull request.
*/
"title": S.String,
  "user": SimpleUser,
  "body": S.NullOr(S.String),
  "labels": S.Array(S.Struct({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "name": S.String,
  "description": S.NullOr(S.String),
  "color": S.String,
  "default": S.Boolean
})),
  "milestone": S.NullOr(NullableMilestone),
  "active_lock_reason": S.optionalWith(S.String, { nullable: true }),
  "created_at": S.String,
  "updated_at": S.String,
  "closed_at": S.NullOr(S.String),
  "merged_at": S.NullOr(S.String),
  "merge_commit_sha": S.NullOr(S.String),
  "assignee": S.NullOr(NullableSimpleUser),
  "assignees": S.optionalWith(S.Array(SimpleUser), { nullable: true }),
  "requested_reviewers": S.optionalWith(S.Array(SimpleUser), { nullable: true }),
  "requested_teams": S.optionalWith(S.Array(TeamSimple), { nullable: true }),
  "head": S.Struct({
  "label": S.String,
  "ref": S.String,
  "repo": Repository,
  "sha": S.String,
  "user": SimpleUser
}),
  "base": S.Struct({
  "label": S.String,
  "ref": S.String,
  "repo": Repository,
  "sha": S.String,
  "user": SimpleUser
}),
  "_links": S.Struct({
  "comments": Link,
  "commits": Link,
  "statuses": Link,
  "html": Link,
  "issue": Link,
  "review_comments": Link,
  "review_comment": Link,
  "self": Link
}),
  "author_association": AuthorAssociation,
  "auto_merge": S.NullOr(AutoMerge),
  /**
* Indicates whether or not the pull request is a draft.
*/
"draft": S.optionalWith(S.Boolean, { nullable: true }),
  "merged": S.Boolean,
  "mergeable": S.NullOr(S.Boolean),
  "rebaseable": S.optionalWith(S.Boolean, { nullable: true }),
  "mergeable_state": S.String,
  "merged_by": S.NullOr(NullableSimpleUser),
  "comments": S.Int,
  "review_comments": S.Int,
  /**
* Indicates whether maintainers can modify the pull request.
*/
"maintainer_can_modify": S.Boolean,
  "commits": S.Int,
  "additions": S.Int,
  "deletions": S.Int,
  "changed_files": S.Int
}) {}

export class PullsListReviewCommentsForRepoParamsSort extends S.Literal("created", "updated", "created_at") {}

export class PullsListReviewCommentsForRepoParamsDirection extends S.Literal("asc", "desc") {}

export class PullsListReviewCommentsForRepoParams extends S.Struct({
  "sort": S.optionalWith(PullsListReviewCommentsForRepoParamsSort, { nullable: true }),
  "direction": S.optionalWith(PullsListReviewCommentsForRepoParamsDirection, { nullable: true }),
  "since": S.optionalWith(S.String, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class PullsListReviewCommentsForRepo200 extends S.Array(PullRequestReviewComment) {}

export class PullsGetReviewCommentParams extends S.Struct({
  
}) {}

export class PullsDeleteReviewCommentParams extends S.Struct({
  
}) {}

export class PullsUpdateReviewCommentParams extends S.Struct({
  
}) {}

export class PullsUpdateReviewCommentRequest extends S.Class<PullsUpdateReviewCommentRequest>("PullsUpdateReviewCommentRequest")({
  /**
* The text of the reply to the review comment.
*/
"body": S.String
}) {}

export class ReactionsListForPullRequestReviewCommentParamsContent extends S.Literal("+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes") {}

export class ReactionsListForPullRequestReviewCommentParams extends S.Struct({
  "content": S.optionalWith(ReactionsListForPullRequestReviewCommentParamsContent, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReactionsListForPullRequestReviewComment200 extends S.Array(Reaction) {}

export class ReactionsCreateForPullRequestReviewCommentParams extends S.Struct({
  
}) {}

/**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the pull request review comment.
*/
export class ReactionsCreateForPullRequestReviewCommentRequestContent extends S.Literal("+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes") {}

export class ReactionsCreateForPullRequestReviewCommentRequest extends S.Class<ReactionsCreateForPullRequestReviewCommentRequest>("ReactionsCreateForPullRequestReviewCommentRequest")({
  /**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the pull request review comment.
*/
"content": ReactionsCreateForPullRequestReviewCommentRequestContent
}) {}

export class ReactionsDeleteForPullRequestCommentParams extends S.Struct({
  
}) {}

export class PullsGetParams extends S.Struct({
  
}) {}

export class PullsGet503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class PullsUpdateParams extends S.Struct({
  
}) {}

/**
* State of this Pull Request. Either `open` or `closed`.
*/
export class PullsUpdateRequestState extends S.Literal("open", "closed") {}

export class PullsUpdateRequest extends S.Class<PullsUpdateRequest>("PullsUpdateRequest")({
  /**
* The title of the pull request.
*/
"title": S.optionalWith(S.String, { nullable: true }),
  /**
* The contents of the pull request.
*/
"body": S.optionalWith(S.String, { nullable: true }),
  /**
* State of this Pull Request. Either `open` or `closed`.
*/
"state": S.optionalWith(PullsUpdateRequestState, { nullable: true }),
  /**
* The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
*/
"base": S.optionalWith(S.String, { nullable: true }),
  /**
* Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
*/
"maintainer_can_modify": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class CodespacesCreateWithPrForAuthenticatedUserParams extends S.Struct({
  
}) {}

/**
* The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.
*/
export class CodespacesCreateWithPrForAuthenticatedUserRequestGeo extends S.Literal("EuropeWest", "SoutheastAsia", "UsEast", "UsWest") {}

export class CodespacesCreateWithPrForAuthenticatedUserRequest extends S.Class<CodespacesCreateWithPrForAuthenticatedUserRequest>("CodespacesCreateWithPrForAuthenticatedUserRequest")({
  /**
* The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
*/
"location": S.optionalWith(S.String, { nullable: true }),
  /**
* The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.
*/
"geo": S.optionalWith(CodespacesCreateWithPrForAuthenticatedUserRequestGeo, { nullable: true }),
  /**
* IP for location auto-detection when proxying a request
*/
"client_ip": S.optionalWith(S.String, { nullable: true }),
  /**
* Machine type to use for this codespace
*/
"machine": S.optionalWith(S.String, { nullable: true }),
  /**
* Path to devcontainer.json config to use for this codespace
*/
"devcontainer_path": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether to authorize requested permissions from devcontainer.json
*/
"multi_repo_permissions_opt_out": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Working directory for this codespace
*/
"working_directory": S.optionalWith(S.String, { nullable: true }),
  /**
* Time in minutes before codespace stops from inactivity
*/
"idle_timeout_minutes": S.optionalWith(S.Int, { nullable: true }),
  /**
* Display name for this codespace
*/
"display_name": S.optionalWith(S.String, { nullable: true }),
  /**
* Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
*/
"retention_period_minutes": S.optionalWith(S.Int, { nullable: true })
}) {}

export class CodespacesCreateWithPrForAuthenticatedUser503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class PullsListReviewCommentsParamsSort extends S.Literal("created", "updated") {}

export class PullsListReviewCommentsParamsDirection extends S.Literal("asc", "desc") {}

export class PullsListReviewCommentsParams extends S.Struct({
  "sort": S.optionalWith(PullsListReviewCommentsParamsSort, { nullable: true, default: () => "created" as const }),
  "direction": S.optionalWith(PullsListReviewCommentsParamsDirection, { nullable: true }),
  "since": S.optionalWith(S.String, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class PullsListReviewComments200 extends S.Array(PullRequestReviewComment) {}

export class PullsCreateReviewCommentParams extends S.Struct({
  
}) {}

/**
* In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
*/
export class PullsCreateReviewCommentRequestSide extends S.Literal("LEFT", "RIGHT") {}

/**
* **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
*/
export class PullsCreateReviewCommentRequestStartSide extends S.Literal("LEFT", "RIGHT", "side") {}

/**
* The level at which the comment is targeted.
*/
export class PullsCreateReviewCommentRequestSubjectType extends S.Literal("line", "file") {}

export class PullsCreateReviewCommentRequest extends S.Class<PullsCreateReviewCommentRequest>("PullsCreateReviewCommentRequest")({
  /**
* The text of the review comment.
*/
"body": S.String,
  /**
* The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
*/
"commit_id": S.String,
  /**
* The relative path to the file that necessitates a comment.
*/
"path": S.String,
  /**
* **This parameter is closing down. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
*/
"position": S.optionalWith(S.Int, { nullable: true }),
  /**
* In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
*/
"side": S.optionalWith(PullsCreateReviewCommentRequestSide, { nullable: true }),
  /**
* **Required unless using `subject_type:file`**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
*/
"line": S.optionalWith(S.Int, { nullable: true }),
  /**
* **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.
*/
"start_line": S.optionalWith(S.Int, { nullable: true }),
  /**
* **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
*/
"start_side": S.optionalWith(PullsCreateReviewCommentRequestStartSide, { nullable: true }),
  /**
* The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
*/
"in_reply_to": S.optionalWith(S.Int, { nullable: true }),
  /**
* The level at which the comment is targeted.
*/
"subject_type": S.optionalWith(PullsCreateReviewCommentRequestSubjectType, { nullable: true })
}) {}

export class PullsCreateReplyForReviewCommentParams extends S.Struct({
  
}) {}

export class PullsCreateReplyForReviewCommentRequest extends S.Class<PullsCreateReplyForReviewCommentRequest>("PullsCreateReplyForReviewCommentRequest")({
  /**
* The text of the review comment.
*/
"body": S.String
}) {}

export class PullsListCommitsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class PullsListCommits200 extends S.Array(Commit) {}

export class PullsListFilesParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class PullsListFiles200 extends S.Array(DiffEntry) {}

export class PullsListFiles503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class PullsCheckIfMergedParams extends S.Struct({
  
}) {}

export class PullsMergeParams extends S.Struct({
  
}) {}

/**
* The merge method to use.
*/
export class PullsMergeRequestMergeMethod extends S.Literal("merge", "squash", "rebase") {}

export class PullsMergeRequest extends S.Class<PullsMergeRequest>("PullsMergeRequest")({
  /**
* Title for the automatic commit message.
*/
"commit_title": S.optionalWith(S.String, { nullable: true }),
  /**
* Extra detail to append to automatic commit message.
*/
"commit_message": S.optionalWith(S.String, { nullable: true }),
  /**
* SHA that pull request head must match to allow merge.
*/
"sha": S.optionalWith(S.String, { nullable: true }),
  /**
* The merge method to use.
*/
"merge_method": S.optionalWith(PullsMergeRequestMergeMethod, { nullable: true })
}) {}

/**
* Pull Request Merge Result
*/
export class PullRequestMergeResult extends S.Class<PullRequestMergeResult>("PullRequestMergeResult")({
  "sha": S.String,
  "merged": S.Boolean,
  "message": S.String
}) {}

export class PullsMerge405 extends S.Struct({
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class PullsMerge409 extends S.Struct({
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class PullsListRequestedReviewersParams extends S.Struct({
  
}) {}

/**
* Pull Request Review Request
*/
export class PullRequestReviewRequest extends S.Class<PullRequestReviewRequest>("PullRequestReviewRequest")({
  "users": S.Array(SimpleUser),
  "teams": S.Array(Team)
}) {}

export class PullsRequestReviewersParams extends S.Struct({
  
}) {}

export class PullsRequestReviewersRequest extends S.Class<PullsRequestReviewersRequest>("PullsRequestReviewersRequest")({
  /**
* An array of user `login`s that will be requested.
*/
"reviewers": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* An array of team `slug`s that will be requested.
*/
"team_reviewers": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class PullsRemoveRequestedReviewersParams extends S.Struct({
  
}) {}

export class PullsRemoveRequestedReviewersRequest extends S.Class<PullsRemoveRequestedReviewersRequest>("PullsRemoveRequestedReviewersRequest")({
  /**
* An array of user `login`s that will be removed.
*/
"reviewers": S.Array(S.String),
  /**
* An array of team `slug`s that will be removed.
*/
"team_reviewers": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class PullsListReviewsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Pull Request Reviews are reviews on pull requests.
*/
export class PullRequestReview extends S.Class<PullRequestReview>("PullRequestReview")({
  /**
* Unique identifier of the review
*/
"id": S.Int,
  "node_id": S.String,
  "user": S.NullOr(NullableSimpleUser),
  /**
* The text of the review.
*/
"body": S.String,
  "state": S.String,
  "html_url": S.String,
  "pull_request_url": S.String,
  "_links": S.Struct({
  "html": S.Struct({
  "href": S.String
}),
  "pull_request": S.Struct({
  "href": S.String
})
}),
  "submitted_at": S.optionalWith(S.String, { nullable: true }),
  /**
* A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`.
*/
"commit_id": S.NullOr(S.String),
  "body_html": S.optionalWith(S.String, { nullable: true }),
  "body_text": S.optionalWith(S.String, { nullable: true }),
  "author_association": AuthorAssociation
}) {}

export class PullsListReviews200 extends S.Array(PullRequestReview) {}

export class PullsCreateReviewParams extends S.Struct({
  
}) {}

/**
* The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request) when you are ready.
*/
export class PullsCreateReviewRequestEvent extends S.Literal("APPROVE", "REQUEST_CHANGES", "COMMENT") {}

export class PullsCreateReviewRequest extends S.Class<PullsCreateReviewRequest>("PullsCreateReviewRequest")({
  /**
* The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
*/
"commit_id": S.optionalWith(S.String, { nullable: true }),
  /**
* **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
*/
"body": S.optionalWith(S.String, { nullable: true }),
  /**
* The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request) when you are ready.
*/
"event": S.optionalWith(PullsCreateReviewRequestEvent, { nullable: true }),
  /**
* Use the following table to specify the location, destination, and contents of the draft review comment.
*/
"comments": S.optionalWith(S.Array(S.Struct({
  /**
* The relative path to the file that necessitates a review comment.
*/
"path": S.String,
  /**
* The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
*/
"position": S.optionalWith(S.Int, { nullable: true }),
  /**
* Text of the review comment.
*/
"body": S.String,
  "line": S.optionalWith(S.Int, { nullable: true }),
  "side": S.optionalWith(S.String, { nullable: true }),
  "start_line": S.optionalWith(S.Int, { nullable: true }),
  "start_side": S.optionalWith(S.String, { nullable: true })
})), { nullable: true })
}) {}

export class PullsGetReviewParams extends S.Struct({
  
}) {}

export class PullsUpdateReviewParams extends S.Struct({
  
}) {}

export class PullsUpdateReviewRequest extends S.Class<PullsUpdateReviewRequest>("PullsUpdateReviewRequest")({
  /**
* The body text of the pull request review.
*/
"body": S.String
}) {}

export class PullsDeletePendingReviewParams extends S.Struct({
  
}) {}

export class PullsListCommentsForReviewParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* The side of the first line of the range for a multi-line comment.
*/
export class ReviewCommentSide extends S.Literal("LEFT", "RIGHT") {}

/**
* The side of the first line of the range for a multi-line comment.
*/
export class ReviewCommentStartSide extends S.Literal("LEFT", "RIGHT") {}

/**
* The level at which the comment is targeted, can be a diff line or a file.
*/
export class ReviewCommentSubjectType extends S.Literal("line", "file") {}

/**
* Legacy Review Comment
*/
export class ReviewComment extends S.Class<ReviewComment>("ReviewComment")({
  "url": S.String,
  "pull_request_review_id": S.NullOr(S.Int),
  "id": S.Int,
  "node_id": S.String,
  "diff_hunk": S.String,
  "path": S.String,
  "position": S.NullOr(S.Int),
  "original_position": S.Int,
  "commit_id": S.String,
  "original_commit_id": S.String,
  "in_reply_to_id": S.optionalWith(S.Int, { nullable: true }),
  "user": S.NullOr(NullableSimpleUser),
  "body": S.String,
  "created_at": S.String,
  "updated_at": S.String,
  "html_url": S.String,
  "pull_request_url": S.String,
  "author_association": AuthorAssociation,
  "_links": S.Struct({
  "self": Link,
  "html": Link,
  "pull_request": Link
}),
  "body_text": S.optionalWith(S.String, { nullable: true }),
  "body_html": S.optionalWith(S.String, { nullable: true }),
  "reactions": S.optionalWith(ReactionRollup, { nullable: true }),
  /**
* The side of the first line of the range for a multi-line comment.
*/
"side": S.optionalWith(ReviewCommentSide, { nullable: true, default: () => "RIGHT" as const }),
  /**
* The side of the first line of the range for a multi-line comment.
*/
"start_side": S.optionalWith(ReviewCommentStartSide, { nullable: true, default: () => "RIGHT" as const }),
  /**
* The line of the blob to which the comment applies. The last line of the range for a multi-line comment
*/
"line": S.optionalWith(S.Int, { nullable: true }),
  /**
* The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
*/
"original_line": S.optionalWith(S.Int, { nullable: true }),
  /**
* The first line of the range for a multi-line comment.
*/
"start_line": S.optionalWith(S.Int, { nullable: true }),
  /**
* The original first line of the range for a multi-line comment.
*/
"original_start_line": S.optionalWith(S.Int, { nullable: true }),
  /**
* The level at which the comment is targeted, can be a diff line or a file.
*/
"subject_type": S.optionalWith(ReviewCommentSubjectType, { nullable: true })
}) {}

export class PullsListCommentsForReview200 extends S.Array(ReviewComment) {}

export class PullsDismissReviewParams extends S.Struct({
  
}) {}

export class PullsDismissReviewRequestEvent extends S.Literal("DISMISS") {}

export class PullsDismissReviewRequest extends S.Class<PullsDismissReviewRequest>("PullsDismissReviewRequest")({
  /**
* The message for the pull request review dismissal
*/
"message": S.String,
  "event": S.optionalWith(PullsDismissReviewRequestEvent, { nullable: true })
}) {}

export class PullsSubmitReviewParams extends S.Struct({
  
}) {}

/**
* The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
*/
export class PullsSubmitReviewRequestEvent extends S.Literal("APPROVE", "REQUEST_CHANGES", "COMMENT") {}

export class PullsSubmitReviewRequest extends S.Class<PullsSubmitReviewRequest>("PullsSubmitReviewRequest")({
  /**
* The body text of the pull request review
*/
"body": S.optionalWith(S.String, { nullable: true }),
  /**
* The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
*/
"event": PullsSubmitReviewRequestEvent
}) {}

export class PullsUpdateBranchParams extends S.Struct({
  
}) {}

export class PullsUpdateBranchRequest extends S.Class<PullsUpdateBranchRequest>("PullsUpdateBranchRequest")({
  /**
* The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/commits/commits#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.
*/
"expected_head_sha": S.optionalWith(S.String, { nullable: true })
}) {}

export class PullsUpdateBranch202 extends S.Struct({
  "message": S.optionalWith(S.String, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposGetReadmeParams extends S.Struct({
  "ref": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposGetReadmeInDirectoryParams extends S.Struct({
  "ref": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposListReleasesParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* State of the release asset.
*/
export class ReleaseAssetState extends S.Literal("uploaded", "open") {}

/**
* Data related to a release.
*/
export class ReleaseAsset extends S.Class<ReleaseAsset>("ReleaseAsset")({
  "url": S.String,
  "browser_download_url": S.String,
  "id": S.Int,
  "node_id": S.String,
  /**
* The file name of the asset.
*/
"name": S.String,
  "label": S.NullOr(S.String),
  /**
* State of the release asset.
*/
"state": ReleaseAssetState,
  "content_type": S.String,
  "size": S.Int,
  "digest": S.NullOr(S.String),
  "download_count": S.Int,
  "created_at": S.String,
  "updated_at": S.String,
  "uploader": S.NullOr(NullableSimpleUser)
}) {}

/**
* A release.
*/
export class Release extends S.Class<Release>("Release")({
  "url": S.String,
  "html_url": S.String,
  "assets_url": S.String,
  "upload_url": S.String,
  "tarball_url": S.NullOr(S.String),
  "zipball_url": S.NullOr(S.String),
  "id": S.Int,
  "node_id": S.String,
  /**
* The name of the tag.
*/
"tag_name": S.String,
  /**
* Specifies the commitish value that determines where the Git tag is created from.
*/
"target_commitish": S.String,
  "name": S.NullOr(S.String),
  "body": S.optionalWith(S.String, { nullable: true }),
  /**
* true to create a draft (unpublished) release, false to create a published one.
*/
"draft": S.Boolean,
  /**
* Whether to identify the release as a prerelease or a full release.
*/
"prerelease": S.Boolean,
  /**
* Whether or not the release is immutable.
*/
"immutable": S.optionalWith(S.Boolean, { nullable: true }),
  "created_at": S.String,
  "published_at": S.NullOr(S.String),
  "updated_at": S.optionalWith(S.String, { nullable: true }),
  "author": SimpleUser,
  "assets": S.Array(ReleaseAsset),
  "body_html": S.optionalWith(S.String, { nullable: true }),
  "body_text": S.optionalWith(S.String, { nullable: true }),
  "mentions_count": S.optionalWith(S.Int, { nullable: true }),
  /**
* The URL of the release discussion.
*/
"discussion_url": S.optionalWith(S.String, { nullable: true }),
  "reactions": S.optionalWith(ReactionRollup, { nullable: true })
}) {}

export class ReposListReleases200 extends S.Array(Release) {}

export class ReposCreateReleaseParams extends S.Struct({
  
}) {}

/**
* Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
*/
export class ReposCreateReleaseRequestMakeLatest extends S.Literal("true", "false", "legacy") {}

export class ReposCreateReleaseRequest extends S.Class<ReposCreateReleaseRequest>("ReposCreateReleaseRequest")({
  /**
* The name of the tag.
*/
"tag_name": S.String,
  /**
* Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
*/
"target_commitish": S.optionalWith(S.String, { nullable: true }),
  /**
* The name of the release.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* Text describing the contents of the tag.
*/
"body": S.optionalWith(S.String, { nullable: true }),
  /**
* `true` to create a draft (unpublished) release, `false` to create a published one.
*/
"draft": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* `true` to identify the release as a prerelease. `false` to identify the release as a full release.
*/
"prerelease": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
*/
"discussion_category_name": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
*/
"generate_release_notes": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
*/
"make_latest": S.optionalWith(ReposCreateReleaseRequestMakeLatest, { nullable: true, default: () => "true" as const })
}) {}

export class ReposGetReleaseAssetParams extends S.Struct({
  
}) {}

export class ReposDeleteReleaseAssetParams extends S.Struct({
  
}) {}

export class ReposUpdateReleaseAssetParams extends S.Struct({
  
}) {}

export class ReposUpdateReleaseAssetRequest extends S.Class<ReposUpdateReleaseAssetRequest>("ReposUpdateReleaseAssetRequest")({
  /**
* The file name of the asset.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* An alternate short description of the asset. Used in place of the filename.
*/
"label": S.optionalWith(S.String, { nullable: true }),
  "state": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposGenerateReleaseNotesParams extends S.Struct({
  
}) {}

export class ReposGenerateReleaseNotesRequest extends S.Class<ReposGenerateReleaseNotesRequest>("ReposGenerateReleaseNotesRequest")({
  /**
* The tag name for the release. This can be an existing tag or a new one.
*/
"tag_name": S.String,
  /**
* Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.
*/
"target_commitish": S.optionalWith(S.String, { nullable: true }),
  /**
* The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.
*/
"previous_tag_name": S.optionalWith(S.String, { nullable: true }),
  /**
* Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.
*/
"configuration_file_path": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Generated name and body describing a release
*/
export class ReleaseNotesContent extends S.Class<ReleaseNotesContent>("ReleaseNotesContent")({
  /**
* The generated name of the release
*/
"name": S.String,
  /**
* The generated body describing the contents of the release supporting markdown formatting
*/
"body": S.String
}) {}

export class ReposGetLatestReleaseParams extends S.Struct({
  
}) {}

export class ReposGetReleaseByTagParams extends S.Struct({
  
}) {}

export class ReposGetReleaseParams extends S.Struct({
  
}) {}

export class ReposDeleteReleaseParams extends S.Struct({
  
}) {}

export class ReposUpdateReleaseParams extends S.Struct({
  
}) {}

/**
* Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
*/
export class ReposUpdateReleaseRequestMakeLatest extends S.Literal("true", "false", "legacy") {}

export class ReposUpdateReleaseRequest extends S.Class<ReposUpdateReleaseRequest>("ReposUpdateReleaseRequest")({
  /**
* The name of the tag.
*/
"tag_name": S.optionalWith(S.String, { nullable: true }),
  /**
* Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
*/
"target_commitish": S.optionalWith(S.String, { nullable: true }),
  /**
* The name of the release.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* Text describing the contents of the tag.
*/
"body": S.optionalWith(S.String, { nullable: true }),
  /**
* `true` makes the release a draft, and `false` publishes the release.
*/
"draft": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* `true` to identify the release as a prerelease, `false` to identify the release as a full release.
*/
"prerelease": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
*/
"make_latest": S.optionalWith(ReposUpdateReleaseRequestMakeLatest, { nullable: true, default: () => true as const }),
  /**
* If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
*/
"discussion_category_name": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposListReleaseAssetsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReposListReleaseAssets200 extends S.Array(ReleaseAsset) {}

export class ReposUploadReleaseAssetParams extends S.Struct({
  "name": S.String,
  "label": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReactionsListForReleaseParamsContent extends S.Literal("+1", "laugh", "heart", "hooray", "rocket", "eyes") {}

export class ReactionsListForReleaseParams extends S.Struct({
  "content": S.optionalWith(ReactionsListForReleaseParamsContent, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReactionsListForRelease200 extends S.Array(Reaction) {}

export class ReactionsCreateForReleaseParams extends S.Struct({
  
}) {}

/**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the release.
*/
export class ReactionsCreateForReleaseRequestContent extends S.Literal("+1", "laugh", "heart", "hooray", "rocket", "eyes") {}

export class ReactionsCreateForReleaseRequest extends S.Class<ReactionsCreateForReleaseRequest>("ReactionsCreateForReleaseRequest")({
  /**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the release.
*/
"content": ReactionsCreateForReleaseRequestContent
}) {}

export class ReactionsDeleteForReleaseParams extends S.Struct({
  
}) {}

export class ReposGetBranchRulesParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* The type of source for the ruleset that includes this rule.
*/
export class RepositoryRuleDetailedEnumRulesetSourceType extends S.Literal("Repository", "Organization") {}

export class RepositoryRuleDetailedEnumType extends S.Literal("code_scanning") {}

/**
* Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.
*/
export class RepositoryRuleDetailedEnum extends S.Struct({
  /**
* The type of source for the ruleset that includes this rule.
*/
"ruleset_source_type": S.optionalWith(RepositoryRuleDetailedEnumRulesetSourceType, { nullable: true }),
  /**
* The name of the source of the ruleset that includes this rule.
*/
"ruleset_source": S.optionalWith(S.String, { nullable: true }),
  /**
* The ID of the ruleset that includes this rule.
*/
"ruleset_id": S.optionalWith(S.Int, { nullable: true }),
  "type": RepositoryRuleDetailedEnumType,
  "parameters": S.optionalWith(S.Struct({
  /**
* Tools that must provide code scanning results for this rule to pass.
*/
"code_scanning_tools": S.Array(RepositoryRuleParamsCodeScanningTool)
}), { nullable: true })
}) {}

/**
* When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.
*/
export class RepositoryRuleDetailedEnumParametersGroupingStrategy extends S.Literal("ALLGREEN", "HEADGREEN") {}

/**
* Method to use when merging changes from queued pull requests.
*/
export class RepositoryRuleDetailedEnumParametersMergeMethod extends S.Literal("MERGE", "SQUASH", "REBASE") {}

/**
* The operator to use for matching.
*/
export class RepositoryRuleDetailedEnumParametersOperator extends S.Literal("starts_with", "ends_with", "contains", "regex") {}

/**
* A repository rule with ruleset details.
*/
export class RepositoryRuleDetailed extends S.Record({ key: S.String, value: S.Unknown }) {}

export class ReposGetBranchRules200 extends S.Array(RepositoryRuleDetailed) {}

export class ReposGetRepoRulesetsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "includes_parents": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  "targets": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposGetRepoRulesets200 extends S.Array(RepositoryRuleset) {}

export class ReposCreateRepoRulesetParams extends S.Struct({
  
}) {}

/**
* The target of the ruleset
*/
export class ReposCreateRepoRulesetRequestTarget extends S.Literal("branch", "tag", "push") {}

export class ReposCreateRepoRulesetRequest extends S.Class<ReposCreateRepoRulesetRequest>("ReposCreateRepoRulesetRequest")({
  /**
* The name of the ruleset.
*/
"name": S.String,
  /**
* The target of the ruleset
*/
"target": S.optionalWith(ReposCreateRepoRulesetRequestTarget, { nullable: true, default: () => "branch" as const }),
  "enforcement": RepositoryRuleEnforcement,
  /**
* The actors that can bypass the rules in this ruleset
*/
"bypass_actors": S.optionalWith(S.Array(RepositoryRulesetBypassActor), { nullable: true }),
  "conditions": S.optionalWith(RepositoryRulesetConditions, { nullable: true }),
  /**
* An array of rules within the ruleset.
*/
"rules": S.optionalWith(S.Array(RepositoryRule), { nullable: true })
}) {}

export class ReposGetRepoRuleSuitesParamsTimePeriod extends S.Literal("hour", "day", "week", "month") {}

export class ReposGetRepoRuleSuitesParamsRuleSuiteResult extends S.Literal("pass", "fail", "bypass", "all") {}

export class ReposGetRepoRuleSuitesParams extends S.Struct({
  "ref": S.optionalWith(S.String, { nullable: true }),
  "time_period": S.optionalWith(ReposGetRepoRuleSuitesParamsTimePeriod, { nullable: true, default: () => "day" as const }),
  "actor_name": S.optionalWith(S.String, { nullable: true }),
  "rule_suite_result": S.optionalWith(ReposGetRepoRuleSuitesParamsRuleSuiteResult, { nullable: true, default: () => "all" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReposGetRepoRuleSuiteParams extends S.Struct({
  
}) {}

export class ReposGetRepoRulesetParams extends S.Struct({
  "includes_parents": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const })
}) {}

export class ReposUpdateRepoRulesetParams extends S.Struct({
  
}) {}

/**
* The target of the ruleset
*/
export class ReposUpdateRepoRulesetRequestTarget extends S.Literal("branch", "tag", "push") {}

export class ReposUpdateRepoRulesetRequest extends S.Class<ReposUpdateRepoRulesetRequest>("ReposUpdateRepoRulesetRequest")({
  /**
* The name of the ruleset.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The target of the ruleset
*/
"target": S.optionalWith(ReposUpdateRepoRulesetRequestTarget, { nullable: true }),
  "enforcement": S.optionalWith(RepositoryRuleEnforcement, { nullable: true }),
  /**
* The actors that can bypass the rules in this ruleset
*/
"bypass_actors": S.optionalWith(S.Array(RepositoryRulesetBypassActor), { nullable: true }),
  "conditions": S.optionalWith(RepositoryRulesetConditions, { nullable: true }),
  /**
* An array of rules within the ruleset.
*/
"rules": S.optionalWith(S.Array(RepositoryRule), { nullable: true })
}) {}

export class ReposDeleteRepoRulesetParams extends S.Struct({
  
}) {}

export class ReposGetRepoRulesetHistoryParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReposGetRepoRulesetHistory200 extends S.Array(RulesetVersion) {}

export class ReposGetRepoRulesetVersionParams extends S.Struct({
  
}) {}

export class SecretScanningListAlertsForRepoParamsState extends S.Literal("open", "resolved") {}

export class SecretScanningListAlertsForRepoParamsSort extends S.Literal("created", "updated") {}

export class SecretScanningListAlertsForRepoParamsDirection extends S.Literal("asc", "desc") {}

export class SecretScanningListAlertsForRepoParams extends S.Struct({
  "state": S.optionalWith(SecretScanningListAlertsForRepoParamsState, { nullable: true }),
  "secret_type": S.optionalWith(S.String, { nullable: true }),
  "resolution": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(SecretScanningListAlertsForRepoParamsSort, { nullable: true, default: () => "created" as const }),
  "direction": S.optionalWith(SecretScanningListAlertsForRepoParamsDirection, { nullable: true, default: () => "desc" as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true }),
  "validity": S.optionalWith(S.String, { nullable: true }),
  "is_publicly_leaked": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "is_multi_repo": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  "hide_secret": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

/**
* The token status as of the latest validity check.
*/
export class SecretScanningAlertValidity extends S.Literal("active", "inactive", "unknown") {}

export class SecretScanningAlert extends S.Class<SecretScanningAlert>("SecretScanningAlert")({
  "number": S.optionalWith(AlertNumber, { nullable: true }),
  "created_at": S.optionalWith(AlertCreatedAt, { nullable: true }),
  "updated_at": S.optionalWith(NullableAlertUpdatedAt, { nullable: true }),
  "url": S.optionalWith(AlertUrl, { nullable: true }),
  "html_url": S.optionalWith(AlertHtmlUrl, { nullable: true }),
  /**
* The REST API URL of the code locations for this alert.
*/
"locations_url": S.optionalWith(S.String, { nullable: true }),
  "state": S.optionalWith(SecretScanningAlertState, { nullable: true }),
  "resolution": S.optionalWith(SecretScanningAlertResolution, { nullable: true }),
  /**
* The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
"resolved_at": S.optionalWith(S.String, { nullable: true }),
  "resolved_by": S.optionalWith(NullableSimpleUser, { nullable: true }),
  /**
* An optional comment to resolve an alert.
*/
"resolution_comment": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of secret that secret scanning detected.
*/
"secret_type": S.optionalWith(S.String, { nullable: true }),
  /**
* User-friendly name for the detected secret, matching the `secret_type`.
* For a list of built-in patterns, see "[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
*/
"secret_type_display_name": S.optionalWith(S.String, { nullable: true }),
  /**
* The secret that was detected.
*/
"secret": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether push protection was bypassed for the detected secret.
*/
"push_protection_bypassed": S.optionalWith(S.Boolean, { nullable: true }),
  "push_protection_bypassed_by": S.optionalWith(NullableSimpleUser, { nullable: true }),
  /**
* The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
"push_protection_bypassed_at": S.optionalWith(S.String, { nullable: true }),
  "push_protection_bypass_request_reviewer": S.optionalWith(NullableSimpleUser, { nullable: true }),
  /**
* An optional comment when reviewing a push protection bypass.
*/
"push_protection_bypass_request_reviewer_comment": S.optionalWith(S.String, { nullable: true }),
  /**
* An optional comment when requesting a push protection bypass.
*/
"push_protection_bypass_request_comment": S.optionalWith(S.String, { nullable: true }),
  /**
* The URL to a push protection bypass request.
*/
"push_protection_bypass_request_html_url": S.optionalWith(S.String, { nullable: true }),
  /**
* The token status as of the latest validity check.
*/
"validity": S.optionalWith(SecretScanningAlertValidity, { nullable: true }),
  /**
* Whether the detected secret was publicly leaked.
*/
"publicly_leaked": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Whether the detected secret was found in multiple repositories under the same organization or enterprise.
*/
"multi_repo": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* A boolean value representing whether or not alert is base64 encoded
*/
"is_base64_encoded": S.optionalWith(S.Boolean, { nullable: true }),
  "first_location_detected": S.optionalWith(NullableSecretScanningFirstDetectedLocation, { nullable: true }),
  /**
* A boolean value representing whether or not the token in the alert was detected in more than one location.
*/
"has_more_locations": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class SecretScanningListAlertsForRepo200 extends S.Array(SecretScanningAlert) {}

export class SecretScanningListAlertsForRepo503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class SecretScanningGetAlertParams extends S.Struct({
  "hide_secret": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

export class SecretScanningGetAlert503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class SecretScanningUpdateAlertParams extends S.Struct({
  
}) {}

/**
* An optional comment when closing or reopening an alert. Cannot be updated or deleted.
*/
export class SecretScanningAlertResolutionComment extends S.String {}

export class SecretScanningUpdateAlertRequest extends S.Class<SecretScanningUpdateAlertRequest>("SecretScanningUpdateAlertRequest")({
  "state": SecretScanningAlertState,
  "resolution": S.optionalWith(SecretScanningAlertResolution, { nullable: true }),
  "resolution_comment": S.optionalWith(SecretScanningAlertResolutionComment, { nullable: true })
}) {}

export class SecretScanningUpdateAlert503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class SecretScanningListLocationsForAlertParams extends S.Struct({
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

/**
* The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.
*/
export class SecretScanningLocationType extends S.Literal("commit", "wiki_commit", "issue_title", "issue_body", "issue_comment", "discussion_title", "discussion_body", "discussion_comment", "pull_request_title", "pull_request_body", "pull_request_comment", "pull_request_review", "pull_request_review_comment") {}

export class SecretScanningLocation extends S.Class<SecretScanningLocation>("SecretScanningLocation")({
  /**
* The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.
*/
"type": S.optionalWith(SecretScanningLocationType, { nullable: true }),
  "details": S.optionalWith(S.Union(SecretScanningLocationCommit,
SecretScanningLocationWikiCommit,
SecretScanningLocationIssueTitle,
SecretScanningLocationIssueBody,
SecretScanningLocationIssueComment,
SecretScanningLocationDiscussionTitle,
SecretScanningLocationDiscussionBody,
SecretScanningLocationDiscussionComment,
SecretScanningLocationPullRequestTitle,
SecretScanningLocationPullRequestBody,
SecretScanningLocationPullRequestComment,
SecretScanningLocationPullRequestReview,
SecretScanningLocationPullRequestReviewComment), { nullable: true })
}) {}

/**
* List of locations where the secret was detected
*/
export class SecretScanningListLocationsForAlert200 extends S.Array(SecretScanningLocation) {}

export class SecretScanningListLocationsForAlert503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class SecretScanningCreatePushProtectionBypassParams extends S.Struct({
  
}) {}

/**
* The reason for bypassing push protection.
*/
export class SecretScanningPushProtectionBypassReason extends S.Literal("false_positive", "used_in_tests", "will_fix_later") {}

export class SecretScanningCreatePushProtectionBypassRequest extends S.Class<SecretScanningCreatePushProtectionBypassRequest>("SecretScanningCreatePushProtectionBypassRequest")({
  "reason": SecretScanningPushProtectionBypassReason,
  "placeholder_id": SecretScanningPushProtectionBypassPlaceholderId
}) {}

export class SecretScanningPushProtectionBypass extends S.Class<SecretScanningPushProtectionBypass>("SecretScanningPushProtectionBypass")({
  "reason": S.optionalWith(SecretScanningPushProtectionBypassReason, { nullable: true }),
  /**
* The time that the bypass will expire in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
*/
"expire_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The token type this bypass is for.
*/
"token_type": S.optionalWith(S.String, { nullable: true })
}) {}

export class SecretScanningCreatePushProtectionBypass503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class SecretScanningGetScanHistoryParams extends S.Struct({
  
}) {}

/**
* Information on a single scan performed by secret scanning on the repository
*/
export class SecretScanningScan extends S.Class<SecretScanningScan>("SecretScanningScan")({
  /**
* The type of scan
*/
"type": S.optionalWith(S.String, { nullable: true }),
  /**
* The state of the scan. Either "completed", "running", or "pending"
*/
"status": S.optionalWith(S.String, { nullable: true }),
  /**
* The time that the scan was completed. Empty if the scan is running
*/
"completed_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The time that the scan was started. Empty if the scan is pending
*/
"started_at": S.optionalWith(S.String, { nullable: true })
}) {}

export class SecretScanningScanHistory extends S.Class<SecretScanningScanHistory>("SecretScanningScanHistory")({
  "incremental_scans": S.optionalWith(S.Array(SecretScanningScan), { nullable: true }),
  "pattern_update_scans": S.optionalWith(S.Array(SecretScanningScan), { nullable: true }),
  "backfill_scans": S.optionalWith(S.Array(SecretScanningScan), { nullable: true }),
  "custom_pattern_backfill_scans": S.optionalWith(S.Array(S.Struct({
  /**
* Name of the custom pattern for custom pattern scans
*/
"pattern_name": S.optionalWith(S.String, { nullable: true }),
  /**
* Level at which the custom pattern is defined, one of "repository", "organization", or "enterprise"
*/
"pattern_scope": S.optionalWith(S.String, { nullable: true }),
  /**
* The type of scan
*/
"type": S.optionalWith(S.String, { nullable: true }),
  /**
* The state of the scan. Either "completed", "running", or "pending"
*/
"status": S.optionalWith(S.String, { nullable: true }),
  /**
* The time that the scan was completed. Empty if the scan is running
*/
"completed_at": S.optionalWith(S.String, { nullable: true }),
  /**
* The time that the scan was started. Empty if the scan is pending
*/
"started_at": S.optionalWith(S.String, { nullable: true })
})), { nullable: true })
}) {}

export class SecretScanningGetScanHistory503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class SecurityAdvisoriesListRepositoryAdvisoriesParamsDirection extends S.Literal("asc", "desc") {}

export class SecurityAdvisoriesListRepositoryAdvisoriesParamsSort extends S.Literal("created", "updated", "published") {}

export class SecurityAdvisoriesListRepositoryAdvisoriesParamsState extends S.Literal("triage", "draft", "published", "closed") {}

export class SecurityAdvisoriesListRepositoryAdvisoriesParams extends S.Struct({
  "direction": S.optionalWith(SecurityAdvisoriesListRepositoryAdvisoriesParamsDirection, { nullable: true, default: () => "desc" as const }),
  "sort": S.optionalWith(SecurityAdvisoriesListRepositoryAdvisoriesParamsSort, { nullable: true, default: () => "created" as const }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true }),
  "per_page": S.optionalWith(S.Int.pipe(S.greaterThanOrEqualTo(1), S.lessThanOrEqualTo(100)), { nullable: true, default: () => 30 as const }),
  "state": S.optionalWith(SecurityAdvisoriesListRepositoryAdvisoriesParamsState, { nullable: true })
}) {}

export class SecurityAdvisoriesListRepositoryAdvisories200 extends S.Array(RepositoryAdvisory) {}

export class SecurityAdvisoriesCreateRepositoryAdvisoryParams extends S.Struct({
  
}) {}

/**
* The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
*/
export class RepositoryAdvisoryCreateSeverity extends S.Literal("critical", "high", "medium", "low") {}

export class RepositoryAdvisoryCreate extends S.Class<RepositoryAdvisoryCreate>("RepositoryAdvisoryCreate")({
  /**
* A short summary of the advisory.
*/
"summary": S.String.pipe(S.maxLength(1024)),
  /**
* A detailed description of what the advisory impacts.
*/
"description": S.String.pipe(S.maxLength(65535)),
  /**
* The Common Vulnerabilities and Exposures (CVE) ID.
*/
"cve_id": S.optionalWith(S.String, { nullable: true }),
  /**
* A product affected by the vulnerability detailed in a repository security advisory.
*/
"vulnerabilities": S.Array(S.Struct({
  /**
* The name of the package affected by the vulnerability.
*/
"package": S.Struct({
  "ecosystem": SecurityAdvisoryEcosystems,
  /**
* The unique package name within its ecosystem.
*/
"name": S.optionalWith(S.String, { nullable: true })
}),
  /**
* The range of the package versions affected by the vulnerability.
*/
"vulnerable_version_range": S.optionalWith(S.String, { nullable: true }),
  /**
* The package version(s) that resolve the vulnerability.
*/
"patched_versions": S.optionalWith(S.String, { nullable: true }),
  /**
* The functions in the package that are affected.
*/
"vulnerable_functions": S.optionalWith(S.Array(S.String), { nullable: true })
})),
  /**
* A list of Common Weakness Enumeration (CWE) IDs.
*/
"cwe_ids": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* A list of users receiving credit for their participation in the security advisory.
*/
"credits": S.optionalWith(S.Array(S.Struct({
  /**
* The username of the user credited.
*/
"login": S.String,
  "type": SecurityAdvisoryCreditTypes
})), { nullable: true }),
  /**
* The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
*/
"severity": S.optionalWith(RepositoryAdvisoryCreateSeverity, { nullable: true }),
  /**
* The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.
*/
"cvss_vector_string": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether to create a temporary private fork of the repository to collaborate on a fix.
*/
"start_private_fork": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

export class SecurityAdvisoriesCreatePrivateVulnerabilityReportParams extends S.Struct({
  
}) {}

/**
* The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
*/
export class PrivateVulnerabilityReportCreateSeverity extends S.Literal("critical", "high", "medium", "low") {}

export class PrivateVulnerabilityReportCreate extends S.Class<PrivateVulnerabilityReportCreate>("PrivateVulnerabilityReportCreate")({
  /**
* A short summary of the advisory.
*/
"summary": S.String.pipe(S.maxLength(1024)),
  /**
* A detailed description of what the advisory impacts.
*/
"description": S.String.pipe(S.maxLength(65535)),
  /**
* An array of products affected by the vulnerability detailed in a repository security advisory.
*/
"vulnerabilities": S.optionalWith(S.Array(S.Struct({
  /**
* The name of the package affected by the vulnerability.
*/
"package": S.Struct({
  "ecosystem": SecurityAdvisoryEcosystems,
  /**
* The unique package name within its ecosystem.
*/
"name": S.optionalWith(S.String, { nullable: true })
}),
  /**
* The range of the package versions affected by the vulnerability.
*/
"vulnerable_version_range": S.optionalWith(S.String, { nullable: true }),
  /**
* The package version(s) that resolve the vulnerability.
*/
"patched_versions": S.optionalWith(S.String, { nullable: true }),
  /**
* The functions in the package that are affected.
*/
"vulnerable_functions": S.optionalWith(S.Array(S.String), { nullable: true })
})), { nullable: true }),
  /**
* A list of Common Weakness Enumeration (CWE) IDs.
*/
"cwe_ids": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
*/
"severity": S.optionalWith(PrivateVulnerabilityReportCreateSeverity, { nullable: true }),
  /**
* The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.
*/
"cvss_vector_string": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether to create a temporary private fork of the repository to collaborate on a fix.
*/
"start_private_fork": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

export class SecurityAdvisoriesGetRepositoryAdvisoryParams extends S.Struct({
  
}) {}

export class SecurityAdvisoriesUpdateRepositoryAdvisoryParams extends S.Struct({
  
}) {}

/**
* The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
*/
export class RepositoryAdvisoryUpdateSeverity extends S.Literal("critical", "high", "medium", "low") {}

/**
* The state of the advisory.
*/
export class RepositoryAdvisoryUpdateState extends S.Literal("published", "closed", "draft") {}

export class RepositoryAdvisoryUpdate extends S.Class<RepositoryAdvisoryUpdate>("RepositoryAdvisoryUpdate")({
  /**
* A short summary of the advisory.
*/
"summary": S.optionalWith(S.String.pipe(S.maxLength(1024)), { nullable: true }),
  /**
* A detailed description of what the advisory impacts.
*/
"description": S.optionalWith(S.String.pipe(S.maxLength(65535)), { nullable: true }),
  /**
* The Common Vulnerabilities and Exposures (CVE) ID.
*/
"cve_id": S.optionalWith(S.String, { nullable: true }),
  /**
* A product affected by the vulnerability detailed in a repository security advisory.
*/
"vulnerabilities": S.optionalWith(S.Array(S.Struct({
  /**
* The name of the package affected by the vulnerability.
*/
"package": S.Struct({
  "ecosystem": SecurityAdvisoryEcosystems,
  /**
* The unique package name within its ecosystem.
*/
"name": S.optionalWith(S.String, { nullable: true })
}),
  /**
* The range of the package versions affected by the vulnerability.
*/
"vulnerable_version_range": S.optionalWith(S.String, { nullable: true }),
  /**
* The package version(s) that resolve the vulnerability.
*/
"patched_versions": S.optionalWith(S.String, { nullable: true }),
  /**
* The functions in the package that are affected.
*/
"vulnerable_functions": S.optionalWith(S.Array(S.String), { nullable: true })
})), { nullable: true }),
  /**
* A list of Common Weakness Enumeration (CWE) IDs.
*/
"cwe_ids": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* A list of users receiving credit for their participation in the security advisory.
*/
"credits": S.optionalWith(S.Array(S.Struct({
  /**
* The username of the user credited.
*/
"login": S.String,
  "type": SecurityAdvisoryCreditTypes
})), { nullable: true }),
  /**
* The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
*/
"severity": S.optionalWith(RepositoryAdvisoryUpdateSeverity, { nullable: true }),
  /**
* The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.
*/
"cvss_vector_string": S.optionalWith(S.String, { nullable: true }),
  /**
* The state of the advisory.
*/
"state": S.optionalWith(RepositoryAdvisoryUpdateState, { nullable: true }),
  /**
* A list of usernames who have been granted write access to the advisory.
*/
"collaborating_users": S.optionalWith(S.Array(S.String), { nullable: true }),
  /**
* A list of team slugs which have been granted write access to the advisory.
*/
"collaborating_teams": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class SecurityAdvisoriesCreateRepositoryAdvisoryCveRequestParams extends S.Struct({
  
}) {}

export class SecurityAdvisoriesCreateRepositoryAdvisoryCveRequest202 extends S.Record({ key: S.String, value: S.Unknown }) {}

export class SecurityAdvisoriesCreateForkParams extends S.Struct({
  
}) {}

export class ActivityListStargazersForRepoParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Stargazer
*/
export class Stargazer extends S.Class<Stargazer>("Stargazer")({
  "starred_at": S.String,
  "user": S.NullOr(NullableSimpleUser)
}) {}

export class ActivityListStargazersForRepo200 extends S.Union(S.Array(SimpleUser),
S.Array(Stargazer)) {}

export class ReposGetCodeFrequencyStatsParams extends S.Struct({
  
}) {}

/**
* Code Frequency Stat
*/
export class CodeFrequencyStat extends S.Array(S.Int) {}

export class ReposGetCodeFrequencyStats200 extends S.Array(CodeFrequencyStat) {}

export class ReposGetCodeFrequencyStats202 extends S.Record({ key: S.String, value: S.Unknown }) {}

export class ReposGetCommitActivityStatsParams extends S.Struct({
  
}) {}

/**
* Commit Activity
*/
export class CommitActivity extends S.Class<CommitActivity>("CommitActivity")({
  "days": S.Array(S.Int),
  "total": S.Int,
  "week": S.Int
}) {}

export class ReposGetCommitActivityStats200 extends S.Array(CommitActivity) {}

export class ReposGetCommitActivityStats202 extends S.Record({ key: S.String, value: S.Unknown }) {}

export class ReposGetContributorsStatsParams extends S.Struct({
  
}) {}

/**
* Contributor Activity
*/
export class ContributorActivity extends S.Class<ContributorActivity>("ContributorActivity")({
  "author": S.NullOr(NullableSimpleUser),
  "total": S.Int,
  "weeks": S.Array(S.Struct({
  "w": S.optionalWith(S.Int, { nullable: true }),
  "a": S.optionalWith(S.Int, { nullable: true }),
  "d": S.optionalWith(S.Int, { nullable: true }),
  "c": S.optionalWith(S.Int, { nullable: true })
}))
}) {}

export class ReposGetContributorsStats200 extends S.Array(ContributorActivity) {}

export class ReposGetContributorsStats202 extends S.Record({ key: S.String, value: S.Unknown }) {}

export class ReposGetParticipationStatsParams extends S.Struct({
  
}) {}

export class ParticipationStats extends S.Class<ParticipationStats>("ParticipationStats")({
  "all": S.Array(S.Int),
  "owner": S.Array(S.Int)
}) {}

export class ReposGetPunchCardStatsParams extends S.Struct({
  
}) {}

export class ReposGetPunchCardStats200 extends S.Array(CodeFrequencyStat) {}

export class ReposCreateCommitStatusParams extends S.Struct({
  
}) {}

/**
* The state of the status.
*/
export class ReposCreateCommitStatusRequestState extends S.Literal("error", "failure", "pending", "success") {}

export class ReposCreateCommitStatusRequest extends S.Class<ReposCreateCommitStatusRequest>("ReposCreateCommitStatusRequest")({
  /**
* The state of the status.
*/
"state": ReposCreateCommitStatusRequestState,
  /**
* The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  
* For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  
* `http://ci.example.com/user/repo/build/sha`
*/
"target_url": S.optionalWith(S.String, { nullable: true }),
  /**
* A short description of the status.
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* A string label to differentiate this status from the status of other systems. This field is case-insensitive.
*/
"context": S.optionalWith(S.String, { nullable: true, default: () => "default" as const })
}) {}

export class ActivityListWatchersForRepoParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActivityListWatchersForRepo200 extends S.Array(SimpleUser) {}

export class ActivityGetRepoSubscriptionParams extends S.Struct({
  
}) {}

/**
* Repository invitations let you manage who you collaborate with.
*/
export class RepositorySubscription extends S.Class<RepositorySubscription>("RepositorySubscription")({
  /**
* Determines if notifications should be received from this repository.
*/
"subscribed": S.Boolean,
  /**
* Determines if all notifications should be blocked from this repository.
*/
"ignored": S.Boolean,
  "reason": S.NullOr(S.String),
  "created_at": S.String,
  "url": S.String,
  "repository_url": S.String
}) {}

export class ActivitySetRepoSubscriptionParams extends S.Struct({
  
}) {}

export class ActivitySetRepoSubscriptionRequest extends S.Class<ActivitySetRepoSubscriptionRequest>("ActivitySetRepoSubscriptionRequest")({
  /**
* Determines if notifications should be received from this repository.
*/
"subscribed": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Determines if all notifications should be blocked from this repository.
*/
"ignored": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class ActivityDeleteRepoSubscriptionParams extends S.Struct({
  
}) {}

export class ReposListTagsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Tag
*/
export class Tag extends S.Class<Tag>("Tag")({
  "name": S.String,
  "commit": S.Struct({
  "sha": S.String,
  "url": S.String
}),
  "zipball_url": S.String,
  "tarball_url": S.String,
  "node_id": S.String
}) {}

export class ReposListTags200 extends S.Array(Tag) {}

export class ReposListTagProtectionParams extends S.Struct({
  
}) {}

/**
* Tag protection
*/
export class TagProtection extends S.Class<TagProtection>("TagProtection")({
  "id": S.optionalWith(S.Int, { nullable: true }),
  "created_at": S.optionalWith(S.String, { nullable: true }),
  "updated_at": S.optionalWith(S.String, { nullable: true }),
  "enabled": S.optionalWith(S.Boolean, { nullable: true }),
  "pattern": S.String
}) {}

export class ReposListTagProtection200 extends S.Array(TagProtection) {}

export class ReposCreateTagProtectionParams extends S.Struct({
  
}) {}

export class ReposCreateTagProtectionRequest extends S.Class<ReposCreateTagProtectionRequest>("ReposCreateTagProtectionRequest")({
  /**
* An optional glob pattern to match against when enforcing tag protection.
*/
"pattern": S.String
}) {}

export class ReposDeleteTagProtectionParams extends S.Struct({
  
}) {}

export class ReposDownloadTarballArchiveParams extends S.Struct({
  
}) {}

export class ReposListTeamsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReposListTeams200 extends S.Array(Team) {}

export class ReposGetAllTopicsParams extends S.Struct({
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

/**
* A topic aggregates entities that are related to a subject.
*/
export class Topic extends S.Class<Topic>("Topic")({
  "names": S.Array(S.String)
}) {}

export class ReposReplaceAllTopicsParams extends S.Struct({
  
}) {}

export class ReposReplaceAllTopicsRequest extends S.Class<ReposReplaceAllTopicsRequest>("ReposReplaceAllTopicsRequest")({
  /**
* An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` will be saved as lowercase.
*/
"names": S.Array(S.String)
}) {}

export class ReposGetClonesParamsPer extends S.Literal("day", "week") {}

export class ReposGetClonesParams extends S.Struct({
  "per": S.optionalWith(ReposGetClonesParamsPer, { nullable: true, default: () => "day" as const })
}) {}

export class Traffic extends S.Class<Traffic>("Traffic")({
  "timestamp": S.String,
  "uniques": S.Int,
  "count": S.Int
}) {}

/**
* Clone Traffic
*/
export class CloneTraffic extends S.Class<CloneTraffic>("CloneTraffic")({
  "count": S.Int,
  "uniques": S.Int,
  "clones": S.Array(Traffic)
}) {}

export class ReposGetTopPathsParams extends S.Struct({
  
}) {}

/**
* Content Traffic
*/
export class ContentTraffic extends S.Class<ContentTraffic>("ContentTraffic")({
  "path": S.String,
  "title": S.String,
  "count": S.Int,
  "uniques": S.Int
}) {}

export class ReposGetTopPaths200 extends S.Array(ContentTraffic) {}

export class ReposGetTopReferrersParams extends S.Struct({
  
}) {}

/**
* Referrer Traffic
*/
export class ReferrerTraffic extends S.Class<ReferrerTraffic>("ReferrerTraffic")({
  "referrer": S.String,
  "count": S.Int,
  "uniques": S.Int
}) {}

export class ReposGetTopReferrers200 extends S.Array(ReferrerTraffic) {}

export class ReposGetViewsParamsPer extends S.Literal("day", "week") {}

export class ReposGetViewsParams extends S.Struct({
  "per": S.optionalWith(ReposGetViewsParamsPer, { nullable: true, default: () => "day" as const })
}) {}

/**
* View Traffic
*/
export class ViewTraffic extends S.Class<ViewTraffic>("ViewTraffic")({
  "count": S.Int,
  "uniques": S.Int,
  "views": S.Array(Traffic)
}) {}

export class ReposTransferParams extends S.Struct({
  
}) {}

export class ReposTransferRequest extends S.Class<ReposTransferRequest>("ReposTransferRequest")({
  /**
* The username or organization name the repository will be transferred to.
*/
"new_owner": S.String,
  /**
* The new name to be given to the repository.
*/
"new_name": S.optionalWith(S.String, { nullable: true }),
  /**
* ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
*/
"team_ids": S.optionalWith(S.Array(S.Int), { nullable: true })
}) {}

export class ReposCheckVulnerabilityAlertsParams extends S.Struct({
  
}) {}

export class ReposEnableVulnerabilityAlertsParams extends S.Struct({
  
}) {}

export class ReposDisableVulnerabilityAlertsParams extends S.Struct({
  
}) {}

export class ReposDownloadZipballArchiveParams extends S.Struct({
  
}) {}

export class ReposCreateUsingTemplateRequest extends S.Class<ReposCreateUsingTemplateRequest>("ReposCreateUsingTemplateRequest")({
  /**
* The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
*/
"owner": S.optionalWith(S.String, { nullable: true }),
  /**
* The name of the new repository.
*/
"name": S.String,
  /**
* A short description of the new repository.
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
*/
"include_all_branches": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Either `true` to create a new private repository or `false` to create a new public one.
*/
"private": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

export class ReposListPublicParams extends S.Struct({
  "since": S.optionalWith(S.Int, { nullable: true })
}) {}

export class ReposListPublic200 extends S.Array(MinimalRepository) {}

export class SearchCodeParamsSort extends S.Literal("indexed") {}

export class SearchCodeParamsOrder extends S.Literal("desc", "asc") {}

export class SearchCodeParams extends S.Struct({
  "q": S.String,
  "sort": S.optionalWith(SearchCodeParamsSort, { nullable: true }),
  "order": S.optionalWith(SearchCodeParamsOrder, { nullable: true, default: () => "desc" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class SearchResultTextMatches extends S.Array(S.Struct({
  "object_url": S.optionalWith(S.String, { nullable: true }),
  "object_type": S.optionalWith(S.String, { nullable: true }),
  "property": S.optionalWith(S.String, { nullable: true }),
  "fragment": S.optionalWith(S.String, { nullable: true }),
  "matches": S.optionalWith(S.Array(S.Struct({
  "text": S.optionalWith(S.String, { nullable: true }),
  "indices": S.optionalWith(S.Array(S.Int), { nullable: true })
})), { nullable: true })
})) {}

/**
* Code Search Result Item
*/
export class CodeSearchResultItem extends S.Class<CodeSearchResultItem>("CodeSearchResultItem")({
  "name": S.String,
  "path": S.String,
  "sha": S.String,
  "url": S.String,
  "git_url": S.String,
  "html_url": S.String,
  "repository": MinimalRepository,
  "score": S.Number,
  "file_size": S.optionalWith(S.Int, { nullable: true }),
  "language": S.optionalWith(S.String, { nullable: true }),
  "last_modified_at": S.optionalWith(S.String, { nullable: true }),
  "line_numbers": S.optionalWith(S.Array(S.String), { nullable: true }),
  "text_matches": S.optionalWith(SearchResultTextMatches, { nullable: true })
}) {}

export class SearchCode200 extends S.Struct({
  "total_count": S.Int,
  "incomplete_results": S.Boolean,
  "items": S.Array(CodeSearchResultItem)
}) {}

export class SearchCode503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class SearchCommitsParamsSort extends S.Literal("author-date", "committer-date") {}

export class SearchCommitsParamsOrder extends S.Literal("desc", "asc") {}

export class SearchCommitsParams extends S.Struct({
  "q": S.String,
  "sort": S.optionalWith(SearchCommitsParamsSort, { nullable: true }),
  "order": S.optionalWith(SearchCommitsParamsOrder, { nullable: true, default: () => "desc" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Commit Search Result Item
*/
export class CommitSearchResultItem extends S.Class<CommitSearchResultItem>("CommitSearchResultItem")({
  "url": S.String,
  "sha": S.String,
  "html_url": S.String,
  "comments_url": S.String,
  "commit": S.Struct({
  "author": S.Struct({
  "name": S.String,
  "email": S.String,
  "date": S.String
}),
  "committer": S.NullOr(NullableGitUser),
  "comment_count": S.Int,
  "message": S.String,
  "tree": S.Struct({
  "sha": S.String,
  "url": S.String
}),
  "url": S.String,
  "verification": S.optionalWith(Verification, { nullable: true })
}),
  "author": S.NullOr(NullableSimpleUser),
  "committer": S.NullOr(NullableGitUser),
  "parents": S.Array(S.Struct({
  "url": S.optionalWith(S.String, { nullable: true }),
  "html_url": S.optionalWith(S.String, { nullable: true }),
  "sha": S.optionalWith(S.String, { nullable: true })
})),
  "repository": MinimalRepository,
  "score": S.Number,
  "node_id": S.String,
  "text_matches": S.optionalWith(SearchResultTextMatches, { nullable: true })
}) {}

export class SearchCommits200 extends S.Struct({
  "total_count": S.Int,
  "incomplete_results": S.Boolean,
  "items": S.Array(CommitSearchResultItem)
}) {}

export class SearchIssuesAndPullRequestsParamsSort extends S.Literal("comments", "reactions", "reactions-+1", "reactions--1", "reactions-smile", "reactions-thinking_face", "reactions-heart", "reactions-tada", "interactions", "created", "updated") {}

export class SearchIssuesAndPullRequestsParamsOrder extends S.Literal("desc", "asc") {}

export class SearchIssuesAndPullRequestsParams extends S.Struct({
  "q": S.String,
  "sort": S.optionalWith(SearchIssuesAndPullRequestsParamsSort, { nullable: true }),
  "order": S.optionalWith(SearchIssuesAndPullRequestsParamsOrder, { nullable: true, default: () => "desc" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "advanced_search": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Issue Search Result Item
*/
export class IssueSearchResultItem extends S.Class<IssueSearchResultItem>("IssueSearchResultItem")({
  "url": S.String,
  "repository_url": S.String,
  "labels_url": S.String,
  "comments_url": S.String,
  "events_url": S.String,
  "html_url": S.String,
  "id": S.Int,
  "node_id": S.String,
  "number": S.Int,
  "title": S.String,
  "locked": S.Boolean,
  "active_lock_reason": S.optionalWith(S.String, { nullable: true }),
  "assignees": S.optionalWith(S.Array(SimpleUser), { nullable: true }),
  "user": S.NullOr(NullableSimpleUser),
  "labels": S.Array(S.Struct({
  "id": S.optionalWith(S.Int, { nullable: true }),
  "node_id": S.optionalWith(S.String, { nullable: true }),
  "url": S.optionalWith(S.String, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "color": S.optionalWith(S.String, { nullable: true }),
  "default": S.optionalWith(S.Boolean, { nullable: true }),
  "description": S.optionalWith(S.String, { nullable: true })
})),
  "sub_issues_summary": S.optionalWith(SubIssuesSummary, { nullable: true }),
  "issue_dependencies_summary": S.optionalWith(IssueDependenciesSummary, { nullable: true }),
  "issue_field_values": S.optionalWith(S.Array(IssueFieldValue), { nullable: true }),
  "state": S.String,
  "state_reason": S.optionalWith(S.String, { nullable: true }),
  "assignee": S.NullOr(NullableSimpleUser),
  "milestone": S.NullOr(NullableMilestone),
  "comments": S.Int,
  "created_at": S.String,
  "updated_at": S.String,
  "closed_at": S.NullOr(S.String),
  "text_matches": S.optionalWith(SearchResultTextMatches, { nullable: true }),
  "pull_request": S.optionalWith(S.Struct({
  "merged_at": S.optionalWith(S.String, { nullable: true }),
  "diff_url": S.NullOr(S.String),
  "html_url": S.NullOr(S.String),
  "patch_url": S.NullOr(S.String),
  "url": S.NullOr(S.String)
}), { nullable: true }),
  "body": S.optionalWith(S.String, { nullable: true }),
  "score": S.Number,
  "author_association": AuthorAssociation,
  "draft": S.optionalWith(S.Boolean, { nullable: true }),
  "repository": S.optionalWith(Repository, { nullable: true }),
  "body_html": S.optionalWith(S.String, { nullable: true }),
  "body_text": S.optionalWith(S.String, { nullable: true }),
  "timeline_url": S.optionalWith(S.String, { nullable: true }),
  "type": S.optionalWith(IssueType, { nullable: true }),
  "performed_via_github_app": S.optionalWith(NullableIntegration, { nullable: true }),
  "reactions": S.optionalWith(ReactionRollup, { nullable: true })
}) {}

export class SearchIssuesAndPullRequests200 extends S.Struct({
  "total_count": S.Int,
  "incomplete_results": S.Boolean,
  "items": S.Array(IssueSearchResultItem)
}) {}

export class SearchIssuesAndPullRequests503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class SearchLabelsParamsSort extends S.Literal("created", "updated") {}

export class SearchLabelsParamsOrder extends S.Literal("desc", "asc") {}

export class SearchLabelsParams extends S.Struct({
  "repository_id": S.Int,
  "q": S.String,
  "sort": S.optionalWith(SearchLabelsParamsSort, { nullable: true }),
  "order": S.optionalWith(SearchLabelsParamsOrder, { nullable: true, default: () => "desc" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Label Search Result Item
*/
export class LabelSearchResultItem extends S.Class<LabelSearchResultItem>("LabelSearchResultItem")({
  "id": S.Int,
  "node_id": S.String,
  "url": S.String,
  "name": S.String,
  "color": S.String,
  "default": S.Boolean,
  "description": S.NullOr(S.String),
  "score": S.Number,
  "text_matches": S.optionalWith(SearchResultTextMatches, { nullable: true })
}) {}

export class SearchLabels200 extends S.Struct({
  "total_count": S.Int,
  "incomplete_results": S.Boolean,
  "items": S.Array(LabelSearchResultItem)
}) {}

export class SearchReposParamsSort extends S.Literal("stars", "forks", "help-wanted-issues", "updated") {}

export class SearchReposParamsOrder extends S.Literal("desc", "asc") {}

export class SearchReposParams extends S.Struct({
  "q": S.String,
  "sort": S.optionalWith(SearchReposParamsSort, { nullable: true }),
  "order": S.optionalWith(SearchReposParamsOrder, { nullable: true, default: () => "desc" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Repo Search Result Item
*/
export class RepoSearchResultItem extends S.Class<RepoSearchResultItem>("RepoSearchResultItem")({
  "id": S.Int,
  "node_id": S.String,
  "name": S.String,
  "full_name": S.String,
  "owner": S.NullOr(NullableSimpleUser),
  "private": S.Boolean,
  "html_url": S.String,
  "description": S.NullOr(S.String),
  "fork": S.Boolean,
  "url": S.String,
  "created_at": S.String,
  "updated_at": S.String,
  "pushed_at": S.String,
  "homepage": S.NullOr(S.String),
  "size": S.Int,
  "stargazers_count": S.Int,
  "watchers_count": S.Int,
  "language": S.NullOr(S.String),
  "forks_count": S.Int,
  "open_issues_count": S.Int,
  "master_branch": S.optionalWith(S.String, { nullable: true }),
  "default_branch": S.String,
  "score": S.Number,
  "forks_url": S.String,
  "keys_url": S.String,
  "collaborators_url": S.String,
  "teams_url": S.String,
  "hooks_url": S.String,
  "issue_events_url": S.String,
  "events_url": S.String,
  "assignees_url": S.String,
  "branches_url": S.String,
  "tags_url": S.String,
  "blobs_url": S.String,
  "git_tags_url": S.String,
  "git_refs_url": S.String,
  "trees_url": S.String,
  "statuses_url": S.String,
  "languages_url": S.String,
  "stargazers_url": S.String,
  "contributors_url": S.String,
  "subscribers_url": S.String,
  "subscription_url": S.String,
  "commits_url": S.String,
  "git_commits_url": S.String,
  "comments_url": S.String,
  "issue_comment_url": S.String,
  "contents_url": S.String,
  "compare_url": S.String,
  "merges_url": S.String,
  "archive_url": S.String,
  "downloads_url": S.String,
  "issues_url": S.String,
  "pulls_url": S.String,
  "milestones_url": S.String,
  "notifications_url": S.String,
  "labels_url": S.String,
  "releases_url": S.String,
  "deployments_url": S.String,
  "git_url": S.String,
  "ssh_url": S.String,
  "clone_url": S.String,
  "svn_url": S.String,
  "forks": S.Int,
  "open_issues": S.Int,
  "watchers": S.Int,
  "topics": S.optionalWith(S.Array(S.String), { nullable: true }),
  "mirror_url": S.NullOr(S.String),
  "has_issues": S.Boolean,
  "has_projects": S.Boolean,
  "has_pages": S.Boolean,
  "has_wiki": S.Boolean,
  "has_downloads": S.Boolean,
  "has_discussions": S.optionalWith(S.Boolean, { nullable: true }),
  "archived": S.Boolean,
  /**
* Returns whether or not this repository disabled.
*/
"disabled": S.Boolean,
  /**
* The repository visibility: public, private, or internal.
*/
"visibility": S.optionalWith(S.String, { nullable: true }),
  "license": S.NullOr(NullableLicenseSimple),
  "permissions": S.optionalWith(S.Struct({
  "admin": S.Boolean,
  "maintain": S.optionalWith(S.Boolean, { nullable: true }),
  "push": S.Boolean,
  "triage": S.optionalWith(S.Boolean, { nullable: true }),
  "pull": S.Boolean
}), { nullable: true }),
  "text_matches": S.optionalWith(SearchResultTextMatches, { nullable: true }),
  "temp_clone_token": S.optionalWith(S.String, { nullable: true }),
  "allow_merge_commit": S.optionalWith(S.Boolean, { nullable: true }),
  "allow_squash_merge": S.optionalWith(S.Boolean, { nullable: true }),
  "allow_rebase_merge": S.optionalWith(S.Boolean, { nullable: true }),
  "allow_auto_merge": S.optionalWith(S.Boolean, { nullable: true }),
  "delete_branch_on_merge": S.optionalWith(S.Boolean, { nullable: true }),
  "allow_forking": S.optionalWith(S.Boolean, { nullable: true }),
  "is_template": S.optionalWith(S.Boolean, { nullable: true }),
  "web_commit_signoff_required": S.optionalWith(S.Boolean, { nullable: true })
}) {}

export class SearchRepos200 extends S.Struct({
  "total_count": S.Int,
  "incomplete_results": S.Boolean,
  "items": S.Array(RepoSearchResultItem)
}) {}

export class SearchRepos503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class SearchTopicsParams extends S.Struct({
  "q": S.String,
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Topic Search Result Item
*/
export class TopicSearchResultItem extends S.Class<TopicSearchResultItem>("TopicSearchResultItem")({
  "name": S.String,
  "display_name": S.NullOr(S.String),
  "short_description": S.NullOr(S.String),
  "description": S.NullOr(S.String),
  "created_by": S.NullOr(S.String),
  "released": S.NullOr(S.String),
  "created_at": S.String,
  "updated_at": S.String,
  "featured": S.Boolean,
  "curated": S.Boolean,
  "score": S.Number,
  "repository_count": S.optionalWith(S.Int, { nullable: true }),
  "logo_url": S.optionalWith(S.String, { nullable: true }),
  "text_matches": S.optionalWith(SearchResultTextMatches, { nullable: true }),
  "related": S.optionalWith(S.Array(S.Struct({
  "topic_relation": S.optionalWith(S.Struct({
  "id": S.optionalWith(S.Int, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "topic_id": S.optionalWith(S.Int, { nullable: true }),
  "relation_type": S.optionalWith(S.String, { nullable: true })
}), { nullable: true })
})), { nullable: true }),
  "aliases": S.optionalWith(S.Array(S.Struct({
  "topic_relation": S.optionalWith(S.Struct({
  "id": S.optionalWith(S.Int, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "topic_id": S.optionalWith(S.Int, { nullable: true }),
  "relation_type": S.optionalWith(S.String, { nullable: true })
}), { nullable: true })
})), { nullable: true })
}) {}

export class SearchTopics200 extends S.Struct({
  "total_count": S.Int,
  "incomplete_results": S.Boolean,
  "items": S.Array(TopicSearchResultItem)
}) {}

export class SearchUsersParamsSort extends S.Literal("followers", "repositories", "joined") {}

export class SearchUsersParamsOrder extends S.Literal("desc", "asc") {}

export class SearchUsersParams extends S.Struct({
  "q": S.String,
  "sort": S.optionalWith(SearchUsersParamsSort, { nullable: true }),
  "order": S.optionalWith(SearchUsersParamsOrder, { nullable: true, default: () => "desc" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* User Search Result Item
*/
export class UserSearchResultItem extends S.Class<UserSearchResultItem>("UserSearchResultItem")({
  "login": S.String,
  "id": S.Int,
  "node_id": S.String,
  "avatar_url": S.String,
  "gravatar_id": S.NullOr(S.String),
  "url": S.String,
  "html_url": S.String,
  "followers_url": S.String,
  "subscriptions_url": S.String,
  "organizations_url": S.String,
  "repos_url": S.String,
  "received_events_url": S.String,
  "type": S.String,
  "score": S.Number,
  "following_url": S.String,
  "gists_url": S.String,
  "starred_url": S.String,
  "events_url": S.String,
  "public_repos": S.optionalWith(S.Int, { nullable: true }),
  "public_gists": S.optionalWith(S.Int, { nullable: true }),
  "followers": S.optionalWith(S.Int, { nullable: true }),
  "following": S.optionalWith(S.Int, { nullable: true }),
  "created_at": S.optionalWith(S.String, { nullable: true }),
  "updated_at": S.optionalWith(S.String, { nullable: true }),
  "name": S.optionalWith(S.String, { nullable: true }),
  "bio": S.optionalWith(S.String, { nullable: true }),
  "email": S.optionalWith(S.String, { nullable: true }),
  "location": S.optionalWith(S.String, { nullable: true }),
  "site_admin": S.Boolean,
  "hireable": S.optionalWith(S.Boolean, { nullable: true }),
  "text_matches": S.optionalWith(SearchResultTextMatches, { nullable: true }),
  "blog": S.optionalWith(S.String, { nullable: true }),
  "company": S.optionalWith(S.String, { nullable: true }),
  "suspended_at": S.optionalWith(S.String, { nullable: true }),
  "user_view_type": S.optionalWith(S.String, { nullable: true })
}) {}

export class SearchUsers200 extends S.Struct({
  "total_count": S.Int,
  "incomplete_results": S.Boolean,
  "items": S.Array(UserSearchResultItem)
}) {}

export class SearchUsers503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class TeamsGetLegacyParams extends S.Struct({
  
}) {}

export class TeamsDeleteLegacyParams extends S.Struct({
  
}) {}

export class TeamsUpdateLegacyParams extends S.Struct({
  
}) {}

/**
* The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  
* **For a non-nested team:**  
*  * `secret` - only visible to organization owners and members of this team.  
*  * `closed` - visible to all members of this organization.  
* **For a parent or child team:**  
*  * `closed` - visible to all members of this organization.
*/
export class TeamsUpdateLegacyRequestPrivacy extends S.Literal("secret", "closed") {}

/**
* The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
*  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
*  * `notifications_disabled` - no one receives notifications.
*/
export class TeamsUpdateLegacyRequestNotificationSetting extends S.Literal("notifications_enabled", "notifications_disabled") {}

/**
* **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
*/
export class TeamsUpdateLegacyRequestPermission extends S.Literal("pull", "push", "admin") {}

export class TeamsUpdateLegacyRequest extends S.Class<TeamsUpdateLegacyRequest>("TeamsUpdateLegacyRequest")({
  /**
* The name of the team.
*/
"name": S.String,
  /**
* The description of the team.
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  
* **For a non-nested team:**  
*  * `secret` - only visible to organization owners and members of this team.  
*  * `closed` - visible to all members of this organization.  
* **For a parent or child team:**  
*  * `closed` - visible to all members of this organization.
*/
"privacy": S.optionalWith(TeamsUpdateLegacyRequestPrivacy, { nullable: true }),
  /**
* The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
*  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
*  * `notifications_disabled` - no one receives notifications.
*/
"notification_setting": S.optionalWith(TeamsUpdateLegacyRequestNotificationSetting, { nullable: true }),
  /**
* **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
*/
"permission": S.optionalWith(TeamsUpdateLegacyRequestPermission, { nullable: true, default: () => "pull" as const }),
  /**
* The ID of a team to set as the parent team.
*/
"parent_team_id": S.optionalWith(S.Int, { nullable: true })
}) {}

export class TeamsListDiscussionsLegacyParamsDirection extends S.Literal("asc", "desc") {}

export class TeamsListDiscussionsLegacyParams extends S.Struct({
  "direction": S.optionalWith(TeamsListDiscussionsLegacyParamsDirection, { nullable: true, default: () => "desc" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class TeamsListDiscussionsLegacy200 extends S.Array(TeamDiscussion) {}

export class TeamsCreateDiscussionLegacyParams extends S.Struct({
  
}) {}

export class TeamsCreateDiscussionLegacyRequest extends S.Class<TeamsCreateDiscussionLegacyRequest>("TeamsCreateDiscussionLegacyRequest")({
  /**
* The discussion post's title.
*/
"title": S.String,
  /**
* The discussion post's body text.
*/
"body": S.String,
  /**
* Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
*/
"private": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

export class TeamsGetDiscussionLegacyParams extends S.Struct({
  
}) {}

export class TeamsDeleteDiscussionLegacyParams extends S.Struct({
  
}) {}

export class TeamsUpdateDiscussionLegacyParams extends S.Struct({
  
}) {}

export class TeamsUpdateDiscussionLegacyRequest extends S.Class<TeamsUpdateDiscussionLegacyRequest>("TeamsUpdateDiscussionLegacyRequest")({
  /**
* The discussion post's title.
*/
"title": S.optionalWith(S.String, { nullable: true }),
  /**
* The discussion post's body text.
*/
"body": S.optionalWith(S.String, { nullable: true })
}) {}

export class TeamsListDiscussionCommentsLegacyParamsDirection extends S.Literal("asc", "desc") {}

export class TeamsListDiscussionCommentsLegacyParams extends S.Struct({
  "direction": S.optionalWith(TeamsListDiscussionCommentsLegacyParamsDirection, { nullable: true, default: () => "desc" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class TeamsListDiscussionCommentsLegacy200 extends S.Array(TeamDiscussionComment) {}

export class TeamsCreateDiscussionCommentLegacyParams extends S.Struct({
  
}) {}

export class TeamsCreateDiscussionCommentLegacyRequest extends S.Class<TeamsCreateDiscussionCommentLegacyRequest>("TeamsCreateDiscussionCommentLegacyRequest")({
  /**
* The discussion comment's body text.
*/
"body": S.String
}) {}

export class TeamsGetDiscussionCommentLegacyParams extends S.Struct({
  
}) {}

export class TeamsDeleteDiscussionCommentLegacyParams extends S.Struct({
  
}) {}

export class TeamsUpdateDiscussionCommentLegacyParams extends S.Struct({
  
}) {}

export class TeamsUpdateDiscussionCommentLegacyRequest extends S.Class<TeamsUpdateDiscussionCommentLegacyRequest>("TeamsUpdateDiscussionCommentLegacyRequest")({
  /**
* The discussion comment's body text.
*/
"body": S.String
}) {}

export class ReactionsListForTeamDiscussionCommentLegacyParamsContent extends S.Literal("+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes") {}

export class ReactionsListForTeamDiscussionCommentLegacyParams extends S.Struct({
  "content": S.optionalWith(ReactionsListForTeamDiscussionCommentLegacyParamsContent, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReactionsListForTeamDiscussionCommentLegacy200 extends S.Array(Reaction) {}

export class ReactionsCreateForTeamDiscussionCommentLegacyParams extends S.Struct({
  
}) {}

/**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment.
*/
export class ReactionsCreateForTeamDiscussionCommentLegacyRequestContent extends S.Literal("+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes") {}

export class ReactionsCreateForTeamDiscussionCommentLegacyRequest extends S.Class<ReactionsCreateForTeamDiscussionCommentLegacyRequest>("ReactionsCreateForTeamDiscussionCommentLegacyRequest")({
  /**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment.
*/
"content": ReactionsCreateForTeamDiscussionCommentLegacyRequestContent
}) {}

export class ReactionsListForTeamDiscussionLegacyParamsContent extends S.Literal("+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes") {}

export class ReactionsListForTeamDiscussionLegacyParams extends S.Struct({
  "content": S.optionalWith(ReactionsListForTeamDiscussionLegacyParamsContent, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReactionsListForTeamDiscussionLegacy200 extends S.Array(Reaction) {}

export class ReactionsCreateForTeamDiscussionLegacyParams extends S.Struct({
  
}) {}

/**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion.
*/
export class ReactionsCreateForTeamDiscussionLegacyRequestContent extends S.Literal("+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes") {}

export class ReactionsCreateForTeamDiscussionLegacyRequest extends S.Class<ReactionsCreateForTeamDiscussionLegacyRequest>("ReactionsCreateForTeamDiscussionLegacyRequest")({
  /**
* The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion.
*/
"content": ReactionsCreateForTeamDiscussionLegacyRequestContent
}) {}

export class TeamsListPendingInvitationsLegacyParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class TeamsListPendingInvitationsLegacy200 extends S.Array(OrganizationInvitation) {}

export class TeamsListMembersLegacyParamsRole extends S.Literal("member", "maintainer", "all") {}

export class TeamsListMembersLegacyParams extends S.Struct({
  "role": S.optionalWith(TeamsListMembersLegacyParamsRole, { nullable: true, default: () => "all" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class TeamsListMembersLegacy200 extends S.Array(SimpleUser) {}

export class TeamsGetMemberLegacyParams extends S.Struct({
  
}) {}

export class TeamsAddMemberLegacyParams extends S.Struct({
  
}) {}

export class TeamsRemoveMemberLegacyParams extends S.Struct({
  
}) {}

export class TeamsGetMembershipForUserLegacyParams extends S.Struct({
  
}) {}

export class TeamsAddOrUpdateMembershipForUserLegacyParams extends S.Struct({
  
}) {}

/**
* The role that this user should have in the team.
*/
export class TeamsAddOrUpdateMembershipForUserLegacyRequestRole extends S.Literal("member", "maintainer") {}

export class TeamsAddOrUpdateMembershipForUserLegacyRequest extends S.Class<TeamsAddOrUpdateMembershipForUserLegacyRequest>("TeamsAddOrUpdateMembershipForUserLegacyRequest")({
  /**
* The role that this user should have in the team.
*/
"role": S.optionalWith(TeamsAddOrUpdateMembershipForUserLegacyRequestRole, { nullable: true, default: () => "member" as const })
}) {}

export class TeamsRemoveMembershipForUserLegacyParams extends S.Struct({
  
}) {}

export class TeamsListProjectsLegacyParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class TeamsListProjectsLegacy200 extends S.Array(TeamProject) {}

export class TeamsCheckPermissionsForProjectLegacyParams extends S.Struct({
  
}) {}

export class TeamsAddOrUpdateProjectPermissionsLegacyParams extends S.Struct({
  
}) {}

/**
* The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
export class TeamsAddOrUpdateProjectPermissionsLegacyRequestPermission extends S.Literal("read", "write", "admin") {}

export class TeamsAddOrUpdateProjectPermissionsLegacyRequest extends S.Class<TeamsAddOrUpdateProjectPermissionsLegacyRequest>("TeamsAddOrUpdateProjectPermissionsLegacyRequest")({
  /**
* The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
"permission": S.optionalWith(TeamsAddOrUpdateProjectPermissionsLegacyRequestPermission, { nullable: true })
}) {}

export class TeamsAddOrUpdateProjectPermissionsLegacy403 extends S.Struct({
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class TeamsRemoveProjectLegacyParams extends S.Struct({
  
}) {}

export class TeamsListReposLegacyParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class TeamsListReposLegacy200 extends S.Array(MinimalRepository) {}

export class TeamsCheckPermissionsForRepoLegacyParams extends S.Struct({
  
}) {}

export class TeamsAddOrUpdateRepoPermissionsLegacyParams extends S.Struct({
  
}) {}

/**
* The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
*/
export class TeamsAddOrUpdateRepoPermissionsLegacyRequestPermission extends S.Literal("pull", "push", "admin") {}

export class TeamsAddOrUpdateRepoPermissionsLegacyRequest extends S.Class<TeamsAddOrUpdateRepoPermissionsLegacyRequest>("TeamsAddOrUpdateRepoPermissionsLegacyRequest")({
  /**
* The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
*/
"permission": S.optionalWith(TeamsAddOrUpdateRepoPermissionsLegacyRequestPermission, { nullable: true })
}) {}

export class TeamsRemoveRepoLegacyParams extends S.Struct({
  
}) {}

export class TeamsListChildLegacyParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class TeamsListChildLegacy200 extends S.Array(Team) {}

/**
* Private User
*/
export class PrivateUser extends S.Class<PrivateUser>("PrivateUser")({
  "login": S.String,
  "id": S.Int,
  "user_view_type": S.optionalWith(S.String, { nullable: true }),
  "node_id": S.String,
  "avatar_url": S.String,
  "gravatar_id": S.NullOr(S.String),
  "url": S.String,
  "html_url": S.String,
  "followers_url": S.String,
  "following_url": S.String,
  "gists_url": S.String,
  "starred_url": S.String,
  "subscriptions_url": S.String,
  "organizations_url": S.String,
  "repos_url": S.String,
  "events_url": S.String,
  "received_events_url": S.String,
  "type": S.String,
  "site_admin": S.Boolean,
  "name": S.NullOr(S.String),
  "company": S.NullOr(S.String),
  "blog": S.NullOr(S.String),
  "location": S.NullOr(S.String),
  "email": S.NullOr(S.String),
  "notification_email": S.optionalWith(S.String, { nullable: true }),
  "hireable": S.NullOr(S.Boolean),
  "bio": S.NullOr(S.String),
  "twitter_username": S.optionalWith(S.String, { nullable: true }),
  "public_repos": S.Int,
  "public_gists": S.Int,
  "followers": S.Int,
  "following": S.Int,
  "created_at": S.String,
  "updated_at": S.String,
  "private_gists": S.Int,
  "total_private_repos": S.Int,
  "owned_private_repos": S.Int,
  "disk_usage": S.Int,
  "collaborators": S.Int,
  "two_factor_authentication": S.Boolean,
  "plan": S.optionalWith(S.Struct({
  "collaborators": S.Int,
  "name": S.String,
  "space": S.Int,
  "private_repos": S.Int
}), { nullable: true }),
  "business_plus": S.optionalWith(S.Boolean, { nullable: true }),
  "ldap_dn": S.optionalWith(S.String, { nullable: true })
}) {}

export class UsersGetAuthenticated200 extends S.Union(PrivateUser,
PublicUser) {}

export class UsersUpdateAuthenticatedRequest extends S.Class<UsersUpdateAuthenticatedRequest>("UsersUpdateAuthenticatedRequest")({
  /**
* The new name of the user.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* The publicly visible email address of the user.
*/
"email": S.optionalWith(S.String, { nullable: true }),
  /**
* The new blog URL of the user.
*/
"blog": S.optionalWith(S.String, { nullable: true }),
  /**
* The new Twitter username of the user.
*/
"twitter_username": S.optionalWith(S.String, { nullable: true }),
  /**
* The new company of the user.
*/
"company": S.optionalWith(S.String, { nullable: true }),
  /**
* The new location of the user.
*/
"location": S.optionalWith(S.String, { nullable: true }),
  /**
* The new hiring availability of the user.
*/
"hireable": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The new short biography of the user.
*/
"bio": S.optionalWith(S.String, { nullable: true })
}) {}

export class UsersListBlockedByAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class UsersListBlockedByAuthenticatedUser200 extends S.Array(SimpleUser) {}

export class UsersCheckBlockedParams extends S.Struct({
  
}) {}

export class UsersBlockParams extends S.Struct({
  
}) {}

export class UsersUnblockParams extends S.Struct({
  
}) {}

export class CodespacesListForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "repository_id": S.optionalWith(S.Int, { nullable: true })
}) {}

export class CodespacesListForAuthenticatedUser200 extends S.Struct({
  "total_count": S.Int,
  "codespaces": S.Array(Codespace)
}) {}

export class CodespacesCreateForAuthenticatedUserRequest extends S.Union(S.Struct({
  /**
* Repository id for this codespace
*/
"repository_id": S.Int,
  /**
* Git ref (typically a branch name) for this codespace
*/
"ref": S.optionalWith(S.String, { nullable: true }),
  /**
* The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
*/
"location": S.optionalWith(S.String, { nullable: true }),
  /**
* The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.
*/
"geo": S.optionalWith(S.Literal("EuropeWest", "SoutheastAsia", "UsEast", "UsWest"), { nullable: true }),
  /**
* IP for location auto-detection when proxying a request
*/
"client_ip": S.optionalWith(S.String, { nullable: true }),
  /**
* Machine type to use for this codespace
*/
"machine": S.optionalWith(S.String, { nullable: true }),
  /**
* Path to devcontainer.json config to use for this codespace
*/
"devcontainer_path": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether to authorize requested permissions from devcontainer.json
*/
"multi_repo_permissions_opt_out": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Working directory for this codespace
*/
"working_directory": S.optionalWith(S.String, { nullable: true }),
  /**
* Time in minutes before codespace stops from inactivity
*/
"idle_timeout_minutes": S.optionalWith(S.Int, { nullable: true }),
  /**
* Display name for this codespace
*/
"display_name": S.optionalWith(S.String, { nullable: true }),
  /**
* Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
*/
"retention_period_minutes": S.optionalWith(S.Int, { nullable: true })
}),
S.Struct({
  /**
* Pull request number for this codespace
*/
"pull_request": S.Struct({
  /**
* Pull request number
*/
"pull_request_number": S.Int,
  /**
* Repository id for this codespace
*/
"repository_id": S.Int
}),
  /**
* The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
*/
"location": S.optionalWith(S.String, { nullable: true }),
  /**
* The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.
*/
"geo": S.optionalWith(S.Literal("EuropeWest", "SoutheastAsia", "UsEast", "UsWest"), { nullable: true }),
  /**
* Machine type to use for this codespace
*/
"machine": S.optionalWith(S.String, { nullable: true }),
  /**
* Path to devcontainer.json config to use for this codespace
*/
"devcontainer_path": S.optionalWith(S.String, { nullable: true }),
  /**
* Working directory for this codespace
*/
"working_directory": S.optionalWith(S.String, { nullable: true }),
  /**
* Time in minutes before codespace stops from inactivity
*/
"idle_timeout_minutes": S.optionalWith(S.Int, { nullable: true })
})) {}

export class CodespacesCreateForAuthenticatedUser503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodespacesListSecretsForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* The type of repositories in the organization that the secret is visible to
*/
export class CodespacesSecretVisibility extends S.Literal("all", "private", "selected") {}

/**
* Secrets for a GitHub Codespace.
*/
export class CodespacesSecret extends S.Class<CodespacesSecret>("CodespacesSecret")({
  /**
* The name of the secret
*/
"name": S.String,
  /**
* The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
"created_at": S.String,
  /**
* The date and time at which the secret was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
*/
"updated_at": S.String,
  /**
* The type of repositories in the organization that the secret is visible to
*/
"visibility": CodespacesSecretVisibility,
  /**
* The API URL at which the list of repositories this secret is visible to can be retrieved
*/
"selected_repositories_url": S.String
}) {}

export class CodespacesListSecretsForAuthenticatedUser200 extends S.Struct({
  "total_count": S.Int,
  "secrets": S.Array(CodespacesSecret)
}) {}

/**
* The public key used for setting user Codespaces' Secrets.
*/
export class CodespacesUserPublicKey extends S.Class<CodespacesUserPublicKey>("CodespacesUserPublicKey")({
  /**
* The identifier for the key.
*/
"key_id": S.String,
  /**
* The Base64 encoded public key.
*/
"key": S.String
}) {}

export class CodespacesGetSecretForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class CodespacesCreateOrUpdateSecretForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest extends S.Class<CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest>("CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest")({
  /**
* Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/codespaces/secrets#get-public-key-for-the-authenticated-user) endpoint.
*/
"encrypted_value": S.optionalWith(S.String.pipe(S.pattern(new RegExp("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"))), { nullable: true }),
  /**
* ID of the key you used to encrypt the secret.
*/
"key_id": S.String,
  /**
* An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.
*/
"selected_repository_ids": S.optionalWith(S.Array(S.Union(S.Int,
S.String)), { nullable: true })
}) {}

export class CodespacesDeleteSecretForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class CodespacesListRepositoriesForSecretForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class CodespacesListRepositoriesForSecretForAuthenticatedUser200 extends S.Struct({
  "total_count": S.Int,
  "repositories": S.Array(MinimalRepository)
}) {}

export class CodespacesSetRepositoriesForSecretForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class CodespacesSetRepositoriesForSecretForAuthenticatedUserRequest extends S.Class<CodespacesSetRepositoriesForSecretForAuthenticatedUserRequest>("CodespacesSetRepositoriesForSecretForAuthenticatedUserRequest")({
  /**
* An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/codespaces/secrets#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.
*/
"selected_repository_ids": S.Array(S.Int)
}) {}

export class CodespacesAddRepositoryForSecretForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class CodespacesRemoveRepositoryForSecretForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class CodespacesGetForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class CodespacesDeleteForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class CodespacesDeleteForAuthenticatedUser202 extends S.Record({ key: S.String, value: S.Unknown }) {}

export class CodespacesUpdateForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class CodespacesUpdateForAuthenticatedUserRequest extends S.Class<CodespacesUpdateForAuthenticatedUserRequest>("CodespacesUpdateForAuthenticatedUserRequest")({
  /**
* A valid machine to transition this codespace to.
*/
"machine": S.optionalWith(S.String, { nullable: true }),
  /**
* Display name for this codespace
*/
"display_name": S.optionalWith(S.String, { nullable: true }),
  /**
* Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in.
*/
"recent_folders": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class CodespacesExportForAuthenticatedUserParams extends S.Struct({
  
}) {}

/**
* An export of a codespace. Also, latest export details for a codespace can be fetched with id = latest
*/
export class CodespaceExportDetails extends S.Class<CodespaceExportDetails>("CodespaceExportDetails")({
  /**
* State of the latest export
*/
"state": S.optionalWith(S.String, { nullable: true }),
  /**
* Completion time of the last export operation
*/
"completed_at": S.optionalWith(S.String, { nullable: true }),
  /**
* Name of the exported branch
*/
"branch": S.optionalWith(S.String, { nullable: true }),
  /**
* Git commit SHA of the exported branch
*/
"sha": S.optionalWith(S.String, { nullable: true }),
  /**
* Id for the export details
*/
"id": S.optionalWith(S.String, { nullable: true }),
  /**
* Url for fetching export details
*/
"export_url": S.optionalWith(S.String, { nullable: true }),
  /**
* Web url for the exported branch
*/
"html_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodespacesGetExportDetailsForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class CodespacesCodespaceMachinesForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class CodespacesCodespaceMachinesForAuthenticatedUser200 extends S.Struct({
  "total_count": S.Int,
  "machines": S.Array(CodespaceMachine)
}) {}

export class CodespacesPublishForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class CodespacesPublishForAuthenticatedUserRequest extends S.Class<CodespacesPublishForAuthenticatedUserRequest>("CodespacesPublishForAuthenticatedUserRequest")({
  /**
* A name for the new repository.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether the new repository should be private.
*/
"private": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

/**
* State of this codespace.
*/
export class CodespaceWithFullRepositoryState extends S.Literal("Unknown", "Created", "Queued", "Provisioning", "Available", "Awaiting", "Unavailable", "Deleted", "Moved", "Shutdown", "Archived", "Starting", "ShuttingDown", "Failed", "Exporting", "Updating", "Rebuilding") {}

/**
* The initally assigned location of a new codespace.
*/
export class CodespaceWithFullRepositoryLocation extends S.Literal("EastUs", "SouthEastAsia", "WestEurope", "WestUs2") {}

/**
* A codespace.
*/
export class CodespaceWithFullRepository extends S.Class<CodespaceWithFullRepository>("CodespaceWithFullRepository")({
  "id": S.Int,
  /**
* Automatically generated name of this codespace.
*/
"name": S.String,
  /**
* Display name for this codespace.
*/
"display_name": S.optionalWith(S.String, { nullable: true }),
  /**
* UUID identifying this codespace's environment.
*/
"environment_id": S.NullOr(S.String),
  "owner": SimpleUser,
  "billable_owner": SimpleUser,
  "repository": FullRepository,
  "machine": S.NullOr(NullableCodespaceMachine),
  /**
* Path to devcontainer.json from repo root used to create Codespace.
*/
"devcontainer_path": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether the codespace was created from a prebuild.
*/
"prebuild": S.NullOr(S.Boolean),
  "created_at": S.String,
  "updated_at": S.String,
  /**
* Last known time this codespace was started.
*/
"last_used_at": S.String,
  /**
* State of this codespace.
*/
"state": CodespaceWithFullRepositoryState,
  /**
* API URL for this codespace.
*/
"url": S.String,
  /**
* Details about the codespace's git repository.
*/
"git_status": S.Struct({
  /**
* The number of commits the local repository is ahead of the remote.
*/
"ahead": S.optionalWith(S.Int, { nullable: true }),
  /**
* The number of commits the local repository is behind the remote.
*/
"behind": S.optionalWith(S.Int, { nullable: true }),
  /**
* Whether the local repository has unpushed changes.
*/
"has_unpushed_changes": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Whether the local repository has uncommitted changes.
*/
"has_uncommitted_changes": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The current branch (or SHA if in detached HEAD state) of the local repository.
*/
"ref": S.optionalWith(S.String, { nullable: true })
}),
  /**
* The initally assigned location of a new codespace.
*/
"location": CodespaceWithFullRepositoryLocation,
  /**
* The number of minutes of inactivity after which this codespace will be automatically stopped.
*/
"idle_timeout_minutes": S.NullOr(S.Int),
  /**
* URL to access this codespace on the web.
*/
"web_url": S.String,
  /**
* API URL to access available alternate machine types for this codespace.
*/
"machines_url": S.String,
  /**
* API URL to start this codespace.
*/
"start_url": S.String,
  /**
* API URL to stop this codespace.
*/
"stop_url": S.String,
  /**
* API URL to publish this codespace to a new repository.
*/
"publish_url": S.optionalWith(S.String, { nullable: true }),
  /**
* API URL for the Pull Request associated with this codespace, if any.
*/
"pulls_url": S.NullOr(S.String),
  "recent_folders": S.Array(S.String),
  "runtime_constraints": S.optionalWith(S.Struct({
  /**
* The privacy settings a user can select from when forwarding a port.
*/
"allowed_port_privacy_settings": S.optionalWith(S.Array(S.String), { nullable: true })
}), { nullable: true }),
  /**
* Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
*/
"pending_operation": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Text to show user when codespace is disabled by a pending operation
*/
"pending_operation_disabled_reason": S.optionalWith(S.String, { nullable: true }),
  /**
* Text to show user when codespace idle timeout minutes has been overriden by an organization policy
*/
"idle_timeout_notice": S.optionalWith(S.String, { nullable: true }),
  /**
* Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
*/
"retention_period_minutes": S.optionalWith(S.Int, { nullable: true }),
  /**
* When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
*/
"retention_expires_at": S.optionalWith(S.String, { nullable: true })
}) {}

export class CodespacesStartForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class CodespacesStopForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class PackagesListDockerMigrationConflictingPackagesForAuthenticatedUser200 extends S.Array(Package) {}

/**
* Denotes whether an email is publicly visible.
*/
export class UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequestVisibility extends S.Literal("public", "private") {}

export class UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequest extends S.Class<UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequest>("UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequest")({
  /**
* Denotes whether an email is publicly visible.
*/
"visibility": UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequestVisibility
}) {}

/**
* Email
*/
export class Email extends S.Class<Email>("Email")({
  "email": S.String,
  "primary": S.Boolean,
  "verified": S.Boolean,
  "visibility": S.NullOr(S.String)
}) {}

export class UsersSetPrimaryEmailVisibilityForAuthenticatedUser200 extends S.Array(Email) {}

export class UsersListEmailsForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class UsersListEmailsForAuthenticatedUser200 extends S.Array(Email) {}

export class UsersAddEmailForAuthenticatedUserRequest extends S.Union(S.Struct({
  /**
* Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
*/
"emails": S.NonEmptyArray(S.String).pipe(S.minItems(1))
}),
S.NonEmptyArray(S.String).pipe(S.minItems(1)),
S.String) {}

export class UsersAddEmailForAuthenticatedUser201 extends S.Array(Email) {}

export class UsersDeleteEmailForAuthenticatedUserRequest extends S.Union(/**
* Deletes one or more email addresses from your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
*/
S.Struct({
  /**
* Email addresses associated with the GitHub user account.
*/
"emails": S.NonEmptyArray(S.String).pipe(S.minItems(1))
}),
S.NonEmptyArray(S.String).pipe(S.minItems(1)),
S.String) {}

export class UsersListFollowersForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class UsersListFollowersForAuthenticatedUser200 extends S.Array(SimpleUser) {}

export class UsersListFollowedByAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class UsersListFollowedByAuthenticatedUser200 extends S.Array(SimpleUser) {}

export class UsersCheckPersonIsFollowedByAuthenticatedParams extends S.Struct({
  
}) {}

export class UsersFollowParams extends S.Struct({
  
}) {}

export class UsersUnfollowParams extends S.Struct({
  
}) {}

export class UsersListGpgKeysForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* A unique encryption key
*/
export class GpgKey extends S.Class<GpgKey>("GpgKey")({
  "id": S.Int,
  "name": S.optionalWith(S.String, { nullable: true }),
  "primary_key_id": S.NullOr(S.Int),
  "key_id": S.String,
  "public_key": S.String,
  "emails": S.Array(S.Struct({
  "email": S.optionalWith(S.String, { nullable: true }),
  "verified": S.optionalWith(S.Boolean, { nullable: true })
})),
  "subkeys": S.Array(S.Struct({
  "id": S.optionalWith(S.Int, { nullable: true }),
  "primary_key_id": S.optionalWith(S.Int, { nullable: true }),
  "key_id": S.optionalWith(S.String, { nullable: true }),
  "public_key": S.optionalWith(S.String, { nullable: true }),
  "emails": S.optionalWith(S.Array(S.Struct({
  "email": S.optionalWith(S.String, { nullable: true }),
  "verified": S.optionalWith(S.Boolean, { nullable: true })
})), { nullable: true }),
  "can_sign": S.optionalWith(S.Boolean, { nullable: true }),
  "can_encrypt_comms": S.optionalWith(S.Boolean, { nullable: true }),
  "can_encrypt_storage": S.optionalWith(S.Boolean, { nullable: true }),
  "can_certify": S.optionalWith(S.Boolean, { nullable: true }),
  "created_at": S.optionalWith(S.String, { nullable: true }),
  "expires_at": S.optionalWith(S.String, { nullable: true }),
  "raw_key": S.optionalWith(S.String, { nullable: true }),
  "revoked": S.optionalWith(S.Boolean, { nullable: true })
})),
  "can_sign": S.Boolean,
  "can_encrypt_comms": S.Boolean,
  "can_encrypt_storage": S.Boolean,
  "can_certify": S.Boolean,
  "created_at": S.String,
  "expires_at": S.NullOr(S.String),
  "revoked": S.Boolean,
  "raw_key": S.NullOr(S.String)
}) {}

export class UsersListGpgKeysForAuthenticatedUser200 extends S.Array(GpgKey) {}

export class UsersCreateGpgKeyForAuthenticatedUserRequest extends S.Class<UsersCreateGpgKeyForAuthenticatedUserRequest>("UsersCreateGpgKeyForAuthenticatedUserRequest")({
  /**
* A descriptive name for the new key.
*/
"name": S.optionalWith(S.String, { nullable: true }),
  /**
* A GPG key in ASCII-armored format.
*/
"armored_public_key": S.String
}) {}

export class UsersGetGpgKeyForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class UsersDeleteGpgKeyForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class AppsListInstallationsForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class AppsListInstallationsForAuthenticatedUser200 extends S.Struct({
  "total_count": S.Int,
  "installations": S.Array(Installation)
}) {}

export class AppsListInstallationReposForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class AppsListInstallationReposForAuthenticatedUser200 extends S.Struct({
  "total_count": S.Int,
  "repository_selection": S.optionalWith(S.String, { nullable: true }),
  "repositories": S.Array(Repository)
}) {}

export class AppsAddRepoToInstallationForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class AppsRemoveRepoFromInstallationForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class InteractionsGetRestrictionsForAuthenticatedUser200 extends S.Union(InteractionLimitResponse,
S.Struct({
  
})) {}

export class IssuesListForAuthenticatedUserParamsFilter extends S.Literal("assigned", "created", "mentioned", "subscribed", "repos", "all") {}

export class IssuesListForAuthenticatedUserParamsState extends S.Literal("open", "closed", "all") {}

export class IssuesListForAuthenticatedUserParamsSort extends S.Literal("created", "updated", "comments") {}

export class IssuesListForAuthenticatedUserParamsDirection extends S.Literal("asc", "desc") {}

export class IssuesListForAuthenticatedUserParams extends S.Struct({
  "filter": S.optionalWith(IssuesListForAuthenticatedUserParamsFilter, { nullable: true, default: () => "assigned" as const }),
  "state": S.optionalWith(IssuesListForAuthenticatedUserParamsState, { nullable: true, default: () => "open" as const }),
  "labels": S.optionalWith(S.String, { nullable: true }),
  "sort": S.optionalWith(IssuesListForAuthenticatedUserParamsSort, { nullable: true, default: () => "created" as const }),
  "direction": S.optionalWith(IssuesListForAuthenticatedUserParamsDirection, { nullable: true, default: () => "desc" as const }),
  "since": S.optionalWith(S.String, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class IssuesListForAuthenticatedUser200 extends S.Array(Issue) {}

export class UsersListPublicSshKeysForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Key
*/
export class Key extends S.Class<Key>("Key")({
  "key": S.String,
  "id": S.Int,
  "url": S.String,
  "title": S.String,
  "created_at": S.String,
  "verified": S.Boolean,
  "read_only": S.Boolean,
  "last_used": S.optionalWith(S.String, { nullable: true })
}) {}

export class UsersListPublicSshKeysForAuthenticatedUser200 extends S.Array(Key) {}

export class UsersCreatePublicSshKeyForAuthenticatedUserRequest extends S.Class<UsersCreatePublicSshKeyForAuthenticatedUserRequest>("UsersCreatePublicSshKeyForAuthenticatedUserRequest")({
  /**
* A descriptive name for the new key.
*/
"title": S.optionalWith(S.String, { nullable: true }),
  /**
* The public SSH key to add to your GitHub account.
*/
"key": S.String.pipe(S.pattern(new RegExp("^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) ")))
}) {}

export class UsersGetPublicSshKeyForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class UsersDeletePublicSshKeyForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class AppsListSubscriptionsForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class MarketplaceAccount extends S.Class<MarketplaceAccount>("MarketplaceAccount")({
  "url": S.String,
  "id": S.Int,
  "type": S.String,
  "node_id": S.optionalWith(S.String, { nullable: true }),
  "login": S.String,
  "email": S.optionalWith(S.String, { nullable: true }),
  "organization_billing_email": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* User Marketplace Purchase
*/
export class UserMarketplacePurchase extends S.Class<UserMarketplacePurchase>("UserMarketplacePurchase")({
  "billing_cycle": S.String,
  "next_billing_date": S.NullOr(S.String),
  "unit_count": S.NullOr(S.Int),
  "on_free_trial": S.Boolean,
  "free_trial_ends_on": S.NullOr(S.String),
  "updated_at": S.NullOr(S.String),
  "account": MarketplaceAccount,
  "plan": MarketplaceListingPlan
}) {}

export class AppsListSubscriptionsForAuthenticatedUser200 extends S.Array(UserMarketplacePurchase) {}

export class AppsListSubscriptionsForAuthenticatedUserStubbedParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class AppsListSubscriptionsForAuthenticatedUserStubbed200 extends S.Array(UserMarketplacePurchase) {}

export class OrgsListMembershipsForAuthenticatedUserParamsState extends S.Literal("active", "pending") {}

export class OrgsListMembershipsForAuthenticatedUserParams extends S.Struct({
  "state": S.optionalWith(OrgsListMembershipsForAuthenticatedUserParamsState, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class OrgsListMembershipsForAuthenticatedUser200 extends S.Array(OrgMembership) {}

export class OrgsGetMembershipForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class OrgsUpdateMembershipForAuthenticatedUserParams extends S.Struct({
  
}) {}

/**
* The state that the membership should be in. Only `"active"` will be accepted.
*/
export class OrgsUpdateMembershipForAuthenticatedUserRequestState extends S.Literal("active") {}

export class OrgsUpdateMembershipForAuthenticatedUserRequest extends S.Class<OrgsUpdateMembershipForAuthenticatedUserRequest>("OrgsUpdateMembershipForAuthenticatedUserRequest")({
  /**
* The state that the membership should be in. Only `"active"` will be accepted.
*/
"state": OrgsUpdateMembershipForAuthenticatedUserRequestState
}) {}

export class MigrationsListForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class MigrationsListForAuthenticatedUser200 extends S.Array(Migration) {}

export class MigrationsStartForAuthenticatedUserRequest extends S.Class<MigrationsStartForAuthenticatedUserRequest>("MigrationsStartForAuthenticatedUserRequest")({
  /**
* Lock the repositories being migrated at the start of the migration
*/
"lock_repositories": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Indicates whether metadata should be excluded and only git source should be included for the migration.
*/
"exclude_metadata": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Indicates whether the repository git data should be excluded from the migration.
*/
"exclude_git_data": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Do not include attachments in the migration
*/
"exclude_attachments": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Do not include releases in the migration
*/
"exclude_releases": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Indicates whether projects owned by the organization or users should be excluded.
*/
"exclude_owner_projects": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
*/
"org_metadata_only": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Exclude attributes from the API response to improve performance
*/
"exclude": S.optionalWith(S.Array(S.Literal("repositories")), { nullable: true }),
  "repositories": S.Array(S.String)
}) {}

export class MigrationsGetStatusForAuthenticatedUserParams extends S.Struct({
  "exclude": S.optionalWith(S.Array(S.String), { nullable: true })
}) {}

export class MigrationsGetArchiveForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class MigrationsDeleteArchiveForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class MigrationsUnlockRepoForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class MigrationsListReposForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class MigrationsListReposForAuthenticatedUser200 extends S.Array(MinimalRepository) {}

export class OrgsListForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class OrgsListForAuthenticatedUser200 extends S.Array(OrganizationSimple) {}

export class PackagesListPackagesForAuthenticatedUserParamsPackageType extends S.Literal("npm", "maven", "rubygems", "docker", "nuget", "container") {}

export class PackagesListPackagesForAuthenticatedUserParamsVisibility extends S.Literal("public", "private", "internal") {}

export class PackagesListPackagesForAuthenticatedUserParams extends S.Struct({
  "package_type": PackagesListPackagesForAuthenticatedUserParamsPackageType,
  "visibility": S.optionalWith(PackagesListPackagesForAuthenticatedUserParamsVisibility, { nullable: true }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

export class PackagesListPackagesForAuthenticatedUser200 extends S.Array(Package) {}

export class PackagesGetPackageForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class PackagesDeletePackageForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class PackagesRestorePackageForAuthenticatedUserParams extends S.Struct({
  "token": S.optionalWith(S.String, { nullable: true })
}) {}

export class PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamsState extends S.Literal("active", "deleted") {}

export class PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParams extends S.Struct({
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "state": S.optionalWith(PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamsState, { nullable: true, default: () => "active" as const })
}) {}

export class PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser200 extends S.Array(PackageVersion) {}

export class PackagesGetPackageVersionForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class PackagesDeletePackageVersionForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class PackagesRestorePackageVersionForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class ProjectsClassicCreateForAuthenticatedUserRequest extends S.Class<ProjectsClassicCreateForAuthenticatedUserRequest>("ProjectsClassicCreateForAuthenticatedUserRequest")({
  /**
* Name of the project
*/
"name": S.String,
  /**
* Body of the project
*/
"body": S.optionalWith(S.String, { nullable: true })
}) {}

export class UsersListPublicEmailsForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class UsersListPublicEmailsForAuthenticatedUser200 extends S.Array(Email) {}

export class ReposListForAuthenticatedUserParamsVisibility extends S.Literal("all", "public", "private") {}

export class ReposListForAuthenticatedUserParamsType extends S.Literal("all", "owner", "public", "private", "member") {}

export class ReposListForAuthenticatedUserParamsSort extends S.Literal("created", "updated", "pushed", "full_name") {}

export class ReposListForAuthenticatedUserParamsDirection extends S.Literal("asc", "desc") {}

export class ReposListForAuthenticatedUserParams extends S.Struct({
  "visibility": S.optionalWith(ReposListForAuthenticatedUserParamsVisibility, { nullable: true, default: () => "all" as const }),
  "affiliation": S.optionalWith(S.String, { nullable: true, default: () => "owner,collaborator,organization_member" as const }),
  "type": S.optionalWith(ReposListForAuthenticatedUserParamsType, { nullable: true, default: () => "all" as const }),
  "sort": S.optionalWith(ReposListForAuthenticatedUserParamsSort, { nullable: true, default: () => "full_name" as const }),
  "direction": S.optionalWith(ReposListForAuthenticatedUserParamsDirection, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "since": S.optionalWith(S.String, { nullable: true }),
  "before": S.optionalWith(S.String, { nullable: true })
}) {}

export class ReposListForAuthenticatedUser200 extends S.Array(Repository) {}

/**
* Required when using `squash_merge_commit_message`.
* 
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
export class ReposCreateForAuthenticatedUserRequestSquashMergeCommitTitle extends S.Literal("PR_TITLE", "COMMIT_OR_PR_TITLE") {}

/**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
export class ReposCreateForAuthenticatedUserRequestSquashMergeCommitMessage extends S.Literal("PR_BODY", "COMMIT_MESSAGES", "BLANK") {}

/**
* Required when using `merge_commit_message`.
* 
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
export class ReposCreateForAuthenticatedUserRequestMergeCommitTitle extends S.Literal("PR_TITLE", "MERGE_MESSAGE") {}

/**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
export class ReposCreateForAuthenticatedUserRequestMergeCommitMessage extends S.Literal("PR_BODY", "PR_TITLE", "BLANK") {}

export class ReposCreateForAuthenticatedUserRequest extends S.Class<ReposCreateForAuthenticatedUserRequest>("ReposCreateForAuthenticatedUserRequest")({
  /**
* The name of the repository.
*/
"name": S.String,
  /**
* A short description of the repository.
*/
"description": S.optionalWith(S.String, { nullable: true }),
  /**
* A URL with more information about the repository.
*/
"homepage": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether the repository is private.
*/
"private": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Whether issues are enabled.
*/
"has_issues": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Whether projects are enabled.
*/
"has_projects": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Whether the wiki is enabled.
*/
"has_wiki": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Whether discussions are enabled.
*/
"has_discussions": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
*/
"team_id": S.optionalWith(S.Int, { nullable: true }),
  /**
* Whether the repository is initialized with a minimal README.
*/
"auto_init": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* The desired language or platform to apply to the .gitignore.
*/
"gitignore_template": S.optionalWith(S.String, { nullable: true }),
  /**
* The license keyword of the open source license for this repository.
*/
"license_template": S.optionalWith(S.String, { nullable: true }),
  /**
* Whether to allow squash merges for pull requests.
*/
"allow_squash_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Whether to allow merge commits for pull requests.
*/
"allow_merge_commit": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Whether to allow rebase merges for pull requests.
*/
"allow_rebase_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Whether to allow Auto-merge to be used on pull requests.
*/
"allow_auto_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Whether to delete head branches when pull requests are merged
*/
"delete_branch_on_merge": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const }),
  /**
* Required when using `squash_merge_commit_message`.
* 
* The default value for a squash merge commit title:
* 
* - `PR_TITLE` - default to the pull request's title.
* - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
*/
"squash_merge_commit_title": S.optionalWith(ReposCreateForAuthenticatedUserRequestSquashMergeCommitTitle, { nullable: true }),
  /**
* The default value for a squash merge commit message:
* 
* - `PR_BODY` - default to the pull request's body.
* - `COMMIT_MESSAGES` - default to the branch's commit messages.
* - `BLANK` - default to a blank commit message.
*/
"squash_merge_commit_message": S.optionalWith(ReposCreateForAuthenticatedUserRequestSquashMergeCommitMessage, { nullable: true }),
  /**
* Required when using `merge_commit_message`.
* 
* The default value for a merge commit title.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
*/
"merge_commit_title": S.optionalWith(ReposCreateForAuthenticatedUserRequestMergeCommitTitle, { nullable: true }),
  /**
* The default value for a merge commit message.
* 
* - `PR_TITLE` - default to the pull request's title.
* - `PR_BODY` - default to the pull request's body.
* - `BLANK` - default to a blank commit message.
*/
"merge_commit_message": S.optionalWith(ReposCreateForAuthenticatedUserRequestMergeCommitMessage, { nullable: true }),
  /**
* Whether downloads are enabled.
*/
"has_downloads": S.optionalWith(S.Boolean, { nullable: true, default: () => true as const }),
  /**
* Whether this repository acts as a template that can be used to generate new repositories.
*/
"is_template": S.optionalWith(S.Boolean, { nullable: true, default: () => false as const })
}) {}

export class ReposListInvitationsForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReposListInvitationsForAuthenticatedUser200 extends S.Array(RepositoryInvitation) {}

export class ReposDeclineInvitationForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class ReposAcceptInvitationForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class UsersListSocialAccountsForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Social media account
*/
export class SocialAccount extends S.Class<SocialAccount>("SocialAccount")({
  "provider": S.String,
  "url": S.String
}) {}

export class UsersListSocialAccountsForAuthenticatedUser200 extends S.Array(SocialAccount) {}

export class UsersAddSocialAccountForAuthenticatedUserRequest extends S.Class<UsersAddSocialAccountForAuthenticatedUserRequest>("UsersAddSocialAccountForAuthenticatedUserRequest")({
  /**
* Full URLs for the social media profiles to add.
*/
"account_urls": S.Array(S.String)
}) {}

export class UsersAddSocialAccountForAuthenticatedUser201 extends S.Array(SocialAccount) {}

export class UsersDeleteSocialAccountForAuthenticatedUserRequest extends S.Class<UsersDeleteSocialAccountForAuthenticatedUserRequest>("UsersDeleteSocialAccountForAuthenticatedUserRequest")({
  /**
* Full URLs for the social media profiles to delete.
*/
"account_urls": S.Array(S.String)
}) {}

export class UsersListSshSigningKeysForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* A public SSH key used to sign Git commits
*/
export class SshSigningKey extends S.Class<SshSigningKey>("SshSigningKey")({
  "key": S.String,
  "id": S.Int,
  "title": S.String,
  "created_at": S.String
}) {}

export class UsersListSshSigningKeysForAuthenticatedUser200 extends S.Array(SshSigningKey) {}

export class UsersCreateSshSigningKeyForAuthenticatedUserRequest extends S.Class<UsersCreateSshSigningKeyForAuthenticatedUserRequest>("UsersCreateSshSigningKeyForAuthenticatedUserRequest")({
  /**
* A descriptive name for the new key.
*/
"title": S.optionalWith(S.String, { nullable: true }),
  /**
* The public SSH key to add to your GitHub account. For more information, see "[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)."
*/
"key": S.String.pipe(S.pattern(new RegExp("^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) |^(sk-ssh-ed25519|sk-ecdsa-sha2-nistp256)@openssh.com ")))
}) {}

export class UsersGetSshSigningKeyForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class UsersDeleteSshSigningKeyForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class ActivityListReposStarredByAuthenticatedUserParamsSort extends S.Literal("created", "updated") {}

export class ActivityListReposStarredByAuthenticatedUserParamsDirection extends S.Literal("asc", "desc") {}

export class ActivityListReposStarredByAuthenticatedUserParams extends S.Struct({
  "sort": S.optionalWith(ActivityListReposStarredByAuthenticatedUserParamsSort, { nullable: true, default: () => "created" as const }),
  "direction": S.optionalWith(ActivityListReposStarredByAuthenticatedUserParamsDirection, { nullable: true, default: () => "desc" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActivityListReposStarredByAuthenticatedUser200 extends S.Array(Repository) {}

export class ActivityCheckRepoIsStarredByAuthenticatedUserParams extends S.Struct({
  
}) {}

export class ActivityStarRepoForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class ActivityUnstarRepoForAuthenticatedUserParams extends S.Struct({
  
}) {}

export class ActivityListWatchedReposForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActivityListWatchedReposForAuthenticatedUser200 extends S.Array(MinimalRepository) {}

export class TeamsListForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class TeamsListForAuthenticatedUser200 extends S.Array(TeamFull) {}

export class UsersGetByIdParams extends S.Struct({
  
}) {}

export class UsersGetById200 extends S.Union(PrivateUser,
PublicUser) {}

export class UsersListParams extends S.Struct({
  "since": S.optionalWith(S.Int, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

export class UsersList200 extends S.Array(SimpleUser) {}

export class UsersGetByUsernameParams extends S.Struct({
  
}) {}

export class UsersGetByUsername200 extends S.Union(PrivateUser,
PublicUser) {}

export class UsersListAttestationsBulkParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true })
}) {}

export class UsersListAttestationsBulkRequest extends S.Class<UsersListAttestationsBulkRequest>("UsersListAttestationsBulkRequest")({
  /**
* List of subject digests to fetch attestations for.
*/
"subject_digests": S.NonEmptyArray(S.String).pipe(S.minItems(1), S.maxItems(1024)),
  /**
* Optional filter for fetching attestations with a given predicate type.
* This option accepts `provenance`, `sbom`, or freeform text for custom predicate types.
*/
"predicate_type": S.optionalWith(S.String, { nullable: true })
}) {}

export class UsersListAttestationsBulk200 extends S.Struct({
  /**
* Mapping of subject digest to bundles.
*/
"attestations_subject_digests": S.optionalWith(S.Record({ key: S.String, value: S.Unknown }), { nullable: true }),
  /**
* Information about the current page.
*/
"page_info": S.optionalWith(S.Struct({
  /**
* Indicates whether there is a next page.
*/
"has_next": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* Indicates whether there is a previous page.
*/
"has_previous": S.optionalWith(S.Boolean, { nullable: true }),
  /**
* The cursor to the next page.
*/
"next": S.optionalWith(S.String, { nullable: true }),
  /**
* The cursor to the previous page.
*/
"previous": S.optionalWith(S.String, { nullable: true })
}), { nullable: true })
}) {}

export class UsersDeleteAttestationsBulkParams extends S.Struct({
  
}) {}

/**
* The request body must include either `subject_digests` or `attestation_ids`, but not both.
*/
export class UsersDeleteAttestationsBulkRequest extends S.Record({ key: S.String, value: S.Unknown }) {}

export class UsersDeleteAttestationsBySubjectDigestParams extends S.Struct({
  
}) {}

export class UsersDeleteAttestationsByIdParams extends S.Struct({
  
}) {}

export class UsersListAttestationsParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "before": S.optionalWith(S.String, { nullable: true }),
  "after": S.optionalWith(S.String, { nullable: true }),
  "predicate_type": S.optionalWith(S.String, { nullable: true })
}) {}

export class UsersListAttestations200 extends S.Struct({
  "attestations": S.optionalWith(S.Array(S.Struct({
  /**
* The attestation's Sigstore Bundle.
* Refer to the [Sigstore Bundle Specification](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto) for more information.
*/
"bundle": S.optionalWith(S.Struct({
  "mediaType": S.optionalWith(S.String, { nullable: true }),
  "verificationMaterial": S.optionalWith(S.Struct({
  
}), { nullable: true }),
  "dsseEnvelope": S.optionalWith(S.Struct({
  
}), { nullable: true })
}), { nullable: true }),
  "repository_id": S.optionalWith(S.Int, { nullable: true }),
  "bundle_url": S.optionalWith(S.String, { nullable: true })
})), { nullable: true })
}) {}

export class PackagesListDockerMigrationConflictingPackagesForUserParams extends S.Struct({
  
}) {}

export class PackagesListDockerMigrationConflictingPackagesForUser200 extends S.Array(Package) {}

export class ActivityListEventsForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActivityListEventsForAuthenticatedUser200 extends S.Array(Event) {}

export class ActivityListOrgEventsForAuthenticatedUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActivityListOrgEventsForAuthenticatedUser200 extends S.Array(Event) {}

export class ActivityListPublicEventsForUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActivityListPublicEventsForUser200 extends S.Array(Event) {}

export class UsersListFollowersForUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class UsersListFollowersForUser200 extends S.Array(SimpleUser) {}

export class UsersListFollowingForUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class UsersListFollowingForUser200 extends S.Array(SimpleUser) {}

export class UsersCheckFollowingForUserParams extends S.Struct({
  
}) {}

export class GistsListForUserParams extends S.Struct({
  "since": S.optionalWith(S.String, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class GistsListForUser200 extends S.Array(BaseGist) {}

export class UsersListGpgKeysForUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class UsersListGpgKeysForUser200 extends S.Array(GpgKey) {}

export class UsersGetContextForUserParamsSubjectType extends S.Literal("organization", "repository", "issue", "pull_request") {}

export class UsersGetContextForUserParams extends S.Struct({
  "subject_type": S.optionalWith(UsersGetContextForUserParamsSubjectType, { nullable: true }),
  "subject_id": S.optionalWith(S.String, { nullable: true })
}) {}

/**
* Hovercard
*/
export class Hovercard extends S.Class<Hovercard>("Hovercard")({
  "contexts": S.Array(S.Struct({
  "message": S.String,
  "octicon": S.String
}))
}) {}

export class AppsGetUserInstallationParams extends S.Struct({
  
}) {}

export class UsersListPublicKeysForUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Key Simple
*/
export class KeySimple extends S.Class<KeySimple>("KeySimple")({
  "id": S.Int,
  "key": S.String,
  "created_at": S.optionalWith(S.String, { nullable: true }),
  "last_used": S.optionalWith(S.String, { nullable: true })
}) {}

export class UsersListPublicKeysForUser200 extends S.Array(KeySimple) {}

export class OrgsListForUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class OrgsListForUser200 extends S.Array(OrganizationSimple) {}

export class PackagesListPackagesForUserParamsPackageType extends S.Literal("npm", "maven", "rubygems", "docker", "nuget", "container") {}

export class PackagesListPackagesForUserParamsVisibility extends S.Literal("public", "private", "internal") {}

export class PackagesListPackagesForUserParams extends S.Struct({
  "package_type": PackagesListPackagesForUserParamsPackageType,
  "visibility": S.optionalWith(PackagesListPackagesForUserParamsVisibility, { nullable: true }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const })
}) {}

export class PackagesListPackagesForUser200 extends S.Array(Package) {}

export class PackagesGetPackageForUserParams extends S.Struct({
  
}) {}

export class PackagesDeletePackageForUserParams extends S.Struct({
  
}) {}

export class PackagesRestorePackageForUserParams extends S.Struct({
  "token": S.optionalWith(S.String, { nullable: true })
}) {}

export class PackagesGetAllPackageVersionsForPackageOwnedByUserParams extends S.Struct({
  
}) {}

export class PackagesGetAllPackageVersionsForPackageOwnedByUser200 extends S.Array(PackageVersion) {}

export class PackagesGetPackageVersionForUserParams extends S.Struct({
  
}) {}

export class PackagesDeletePackageVersionForUserParams extends S.Struct({
  
}) {}

export class PackagesRestorePackageVersionForUserParams extends S.Struct({
  
}) {}

export class ProjectsClassicListForUserParamsState extends S.Literal("open", "closed", "all") {}

export class ProjectsClassicListForUserParams extends S.Struct({
  "state": S.optionalWith(ProjectsClassicListForUserParamsState, { nullable: true, default: () => "open" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ProjectsClassicListForUser200 extends S.Array(Project) {}

export class ActivityListReceivedEventsForUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActivityListReceivedEventsForUser200 extends S.Array(Event) {}

export class ActivityListReceivedPublicEventsForUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActivityListReceivedPublicEventsForUser200 extends S.Array(Event) {}

export class ReposListForUserParamsType extends S.Literal("all", "owner", "member") {}

export class ReposListForUserParamsSort extends S.Literal("created", "updated", "pushed", "full_name") {}

export class ReposListForUserParamsDirection extends S.Literal("asc", "desc") {}

export class ReposListForUserParams extends S.Struct({
  "type": S.optionalWith(ReposListForUserParamsType, { nullable: true, default: () => "owner" as const }),
  "sort": S.optionalWith(ReposListForUserParamsSort, { nullable: true, default: () => "full_name" as const }),
  "direction": S.optionalWith(ReposListForUserParamsDirection, { nullable: true }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ReposListForUser200 extends S.Array(MinimalRepository) {}

export class BillingGetGithubActionsBillingUserParams extends S.Struct({
  
}) {}

export class BillingGetGithubPackagesBillingUserParams extends S.Struct({
  
}) {}

export class BillingGetSharedStorageBillingUserParams extends S.Struct({
  
}) {}

export class BillingGetGithubBillingUsageReportUserParams extends S.Struct({
  "year": S.optionalWith(S.Int, { nullable: true }),
  "month": S.optionalWith(S.Int, { nullable: true }),
  "day": S.optionalWith(S.Int, { nullable: true }),
  "hour": S.optionalWith(S.Int, { nullable: true })
}) {}

export class BillingUsageReportUser extends S.Class<BillingUsageReportUser>("BillingUsageReportUser")({
  "usageItems": S.optionalWith(S.Array(S.Struct({
  /**
* Date of the usage line item.
*/
"date": S.String,
  /**
* Product name.
*/
"product": S.String,
  /**
* SKU name.
*/
"sku": S.String,
  /**
* Quantity of the usage line item.
*/
"quantity": S.Int,
  /**
* Unit type of the usage line item.
*/
"unitType": S.String,
  /**
* Price per unit of the usage line item.
*/
"pricePerUnit": S.Number,
  /**
* Gross amount of the usage line item.
*/
"grossAmount": S.Number,
  /**
* Discount amount of the usage line item.
*/
"discountAmount": S.Number,
  /**
* Net amount of the usage line item.
*/
"netAmount": S.Number,
  /**
* Name of the repository.
*/
"repositoryName": S.optionalWith(S.String, { nullable: true })
})), { nullable: true })
}) {}

export class BillingGetGithubBillingUsageReportUser503 extends S.Struct({
  "code": S.optionalWith(S.String, { nullable: true }),
  "message": S.optionalWith(S.String, { nullable: true }),
  "documentation_url": S.optionalWith(S.String, { nullable: true })
}) {}

export class UsersListSocialAccountsForUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class UsersListSocialAccountsForUser200 extends S.Array(SocialAccount) {}

export class UsersListSshSigningKeysForUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class UsersListSshSigningKeysForUser200 extends S.Array(SshSigningKey) {}

export class ActivityListReposStarredByUserParamsSort extends S.Literal("created", "updated") {}

export class ActivityListReposStarredByUserParamsDirection extends S.Literal("asc", "desc") {}

export class ActivityListReposStarredByUserParams extends S.Struct({
  "sort": S.optionalWith(ActivityListReposStarredByUserParamsSort, { nullable: true, default: () => "created" as const }),
  "direction": S.optionalWith(ActivityListReposStarredByUserParamsDirection, { nullable: true, default: () => "desc" as const }),
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

/**
* Starred Repository
*/
export class StarredRepository extends S.Class<StarredRepository>("StarredRepository")({
  "starred_at": S.String,
  "repo": Repository
}) {}

export class ActivityListReposStarredByUser200 extends S.Union(S.Array(StarredRepository),
S.Array(Repository)) {}

export class ActivityListReposWatchedByUserParams extends S.Struct({
  "per_page": S.optionalWith(S.Int, { nullable: true, default: () => 30 as const }),
  "page": S.optionalWith(S.Int, { nullable: true, default: () => 1 as const })
}) {}

export class ActivityListReposWatchedByUser200 extends S.Array(MinimalRepository) {}

export class MetaGetAllVersions200 extends S.Array(S.String) {}

export const make = (
  httpClient: HttpClient.HttpClient, 
  options: {
    readonly transformClient?: ((client: HttpClient.HttpClient) => Effect.Effect<HttpClient.HttpClient>) | undefined
  } = {}
): Client => {
  const unexpectedStatus = (response: HttpClientResponse.HttpClientResponse) =>
    Effect.flatMap(
      Effect.orElseSucceed(response.json, () => "Unexpected status code"),
      (description) =>
        Effect.fail(
          new HttpClientError.ResponseError({
            request: response.request,
            response,
            reason: "StatusCode",
            description: typeof description === "string" ? description : JSON.stringify(description),
          }),
        ),
    )
  const withResponse: <A, E>(
    f: (response: HttpClientResponse.HttpClientResponse) => Effect.Effect<A, E>,
  ) => (
    request: HttpClientRequest.HttpClientRequest,
  ) => Effect.Effect<any, any> = options.transformClient
    ? (f) => (request) =>
        Effect.flatMap(
          Effect.flatMap(options.transformClient!(httpClient), (client) =>
            client.execute(request),
          ),
          f,
        )
    : (f) => (request) => Effect.flatMap(httpClient.execute(request), f)
  const decodeSuccess =
    <A, I, R>(schema: S.Schema<A, I, R>) =>
    (response: HttpClientResponse.HttpClientResponse) =>
      HttpClientResponse.schemaBodyJson(schema)(response)
  const decodeError =
    <const Tag extends string, A, I, R>(tag: Tag, schema: S.Schema<A, I, R>) =>
    (response: HttpClientResponse.HttpClientResponse) =>
      Effect.flatMap(
        HttpClientResponse.schemaBodyJson(schema)(response),
        (cause) => Effect.fail(ClientError(tag, cause, response)),
      )
  return {
    httpClient,
    "metaRoot": () => HttpClientRequest.get(`/`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Root),
      orElse: unexpectedStatus
    }))
  ),
  "securityAdvisoriesListGlobalAdvisories": (options) => HttpClientRequest.get(`/advisories`).pipe(
    HttpClientRequest.setUrlParams({ "ghsa_id": options?.["ghsa_id"] as any, "type": options?.["type"] as any, "cve_id": options?.["cve_id"] as any, "ecosystem": options?.["ecosystem"] as any, "severity": options?.["severity"] as any, "cwes": options?.["cwes"] as any, "is_withdrawn": options?.["is_withdrawn"] as any, "affects": options?.["affects"] as any, "published": options?.["published"] as any, "updated": options?.["updated"] as any, "modified": options?.["modified"] as any, "epss_percentage": options?.["epss_percentage"] as any, "epss_percentile": options?.["epss_percentile"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "sort": options?.["sort"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SecurityAdvisoriesListGlobalAdvisories200),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      "429": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "securityAdvisoriesGetGlobalAdvisory": (ghsaId, options) => HttpClientRequest.get(`/advisories/${ghsaId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GlobalAdvisory),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "appsGetAuthenticated": () => HttpClientRequest.get(`/app`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Integration),
      orElse: unexpectedStatus
    }))
  ),
  "appsCreateFromManifest": (code) => HttpClientRequest.post(`/app-manifests/${code}/conversions`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppsCreateFromManifest201),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "appsGetWebhookConfigForApp": () => HttpClientRequest.get(`/app/hook/config`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(WebhookConfig),
      orElse: unexpectedStatus
    }))
  ),
  "appsUpdateWebhookConfigForApp": (options) => HttpClientRequest.patch(`/app/hook/config`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(WebhookConfig),
      orElse: unexpectedStatus
    }))
  ),
  "appsListWebhookDeliveries": (options) => HttpClientRequest.get(`/app/hook/deliveries`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "cursor": options?.["cursor"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppsListWebhookDeliveries200),
      "400": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "appsGetWebhookDelivery": (deliveryId, options) => HttpClientRequest.get(`/app/hook/deliveries/${deliveryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(HookDelivery),
      "400": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "appsRedeliverWebhookDelivery": (deliveryId, options) => HttpClientRequest.post(`/app/hook/deliveries/${deliveryId}/attempts`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppsRedeliverWebhookDelivery202),
      "400": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "appsListInstallationRequestsForAuthenticatedApp": (options) => HttpClientRequest.get(`/app/installation-requests`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppsListInstallationRequestsForAuthenticatedApp200),
      "401": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "appsListInstallations": (options) => HttpClientRequest.get(`/app/installations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "since": options?.["since"] as any, "outdated": options?.["outdated"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppsListInstallations200),
      orElse: unexpectedStatus
    }))
  ),
  "appsGetInstallation": (installationId, options) => HttpClientRequest.get(`/app/installations/${installationId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Installation),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "appsDeleteInstallation": (installationId, options) => HttpClientRequest.del(`/app/installations/${installationId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "appsCreateInstallationAccessToken": (installationId, options) => HttpClientRequest.post(`/app/installations/${installationId}/access_tokens`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(InstallationToken),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "appsSuspendInstallation": (installationId, options) => HttpClientRequest.put(`/app/installations/${installationId}/suspended`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "appsUnsuspendInstallation": (installationId, options) => HttpClientRequest.del(`/app/installations/${installationId}/suspended`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "appsDeleteAuthorization": (clientId, options) => HttpClientRequest.del(`/applications/${clientId}/grant`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "appsCheckToken": (clientId, options) => HttpClientRequest.post(`/applications/${clientId}/token`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Authorization),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "appsDeleteToken": (clientId, options) => HttpClientRequest.del(`/applications/${clientId}/token`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "appsResetToken": (clientId, options) => HttpClientRequest.patch(`/applications/${clientId}/token`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Authorization),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "appsScopeToken": (clientId, options) => HttpClientRequest.post(`/applications/${clientId}/token/scoped`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Authorization),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "appsGetBySlug": (appSlug, options) => HttpClientRequest.get(`/apps/${appSlug}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Integration),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "classroomGetAnAssignment": (assignmentId, options) => HttpClientRequest.get(`/assignments/${assignmentId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ClassroomAssignment),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "classroomListAcceptedAssignmentsForAnAssignment": (assignmentId, options) => HttpClientRequest.get(`/assignments/${assignmentId}/accepted_assignments`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ClassroomListAcceptedAssignmentsForAnAssignment200),
      orElse: unexpectedStatus
    }))
  ),
  "classroomGetAssignmentGrades": (assignmentId, options) => HttpClientRequest.get(`/assignments/${assignmentId}/grades`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ClassroomGetAssignmentGrades200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "classroomListClassrooms": (options) => HttpClientRequest.get(`/classrooms`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ClassroomListClassrooms200),
      orElse: unexpectedStatus
    }))
  ),
  "classroomGetAClassroom": (classroomId, options) => HttpClientRequest.get(`/classrooms/${classroomId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Classroom),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "classroomListAssignmentsForAClassroom": (classroomId, options) => HttpClientRequest.get(`/classrooms/${classroomId}/assignments`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ClassroomListAssignmentsForAClassroom200),
      orElse: unexpectedStatus
    }))
  ),
  "codesOfConductGetAllCodesOfConduct": () => HttpClientRequest.get(`/codes_of_conduct`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodesOfConductGetAllCodesOfConduct200),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codesOfConductGetConductCode": (key) => HttpClientRequest.get(`/codes_of_conduct/${key}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeOfConduct),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "credentialsRevoke": (options) => HttpClientRequest.post(`/credentials/revoke`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CredentialsRevoke202),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "emojisGet": () => HttpClientRequest.get(`/emojis`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmojisGet200),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codeSecurityGetConfigurationsForEnterprise": (enterprise, options) => HttpClientRequest.get(`/enterprises/${enterprise}/code-security/configurations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeSecurityGetConfigurationsForEnterprise200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "codeSecurityCreateConfigurationForEnterprise": (enterprise, options) => HttpClientRequest.post(`/enterprises/${enterprise}/code-security/configurations`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeSecurityConfiguration),
      "400": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "codeSecurityGetDefaultConfigurationsForEnterprise": (enterprise, options) => HttpClientRequest.get(`/enterprises/${enterprise}/code-security/configurations/defaults`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeSecurityDefaultConfigurations),
      orElse: unexpectedStatus
    }))
  ),
  "codeSecurityGetSingleConfigurationForEnterprise": (enterprise, configurationId, options) => HttpClientRequest.get(`/enterprises/${enterprise}/code-security/configurations/${configurationId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeSecurityConfiguration),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codeSecurityDeleteConfigurationForEnterprise": (enterprise, configurationId, options) => HttpClientRequest.del(`/enterprises/${enterprise}/code-security/configurations/${configurationId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "400": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codeSecurityUpdateEnterpriseConfiguration": (enterprise, configurationId, options) => HttpClientRequest.patch(`/enterprises/${enterprise}/code-security/configurations/${configurationId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeSecurityConfiguration),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codeSecurityAttachEnterpriseConfiguration": (enterprise, configurationId, options) => HttpClientRequest.post(`/enterprises/${enterprise}/code-security/configurations/${configurationId}/attach`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeSecurityAttachEnterpriseConfiguration202),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "codeSecuritySetConfigurationAsDefaultForEnterprise": (enterprise, configurationId, options) => HttpClientRequest.put(`/enterprises/${enterprise}/code-security/configurations/${configurationId}/defaults`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeSecuritySetConfigurationAsDefaultForEnterprise200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "codeSecurityGetRepositoriesForEnterpriseConfiguration": (enterprise, configurationId, options) => HttpClientRequest.get(`/enterprises/${enterprise}/code-security/configurations/${configurationId}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "status": options?.["status"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeSecurityGetRepositoriesForEnterpriseConfiguration200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "dependabotListAlertsForEnterprise": (enterprise, options) => HttpClientRequest.get(`/enterprises/${enterprise}/dependabot/alerts`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "severity": options?.["severity"] as any, "ecosystem": options?.["ecosystem"] as any, "package": options?.["package"] as any, "epss_percentage": options?.["epss_percentage"] as any, "has": options?.["has"] as any, "scope": options?.["scope"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "first": options?.["first"] as any, "last": options?.["last"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DependabotListAlertsForEnterprise200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "secretScanningListAlertsForEnterprise": (enterprise, options) => HttpClientRequest.get(`/enterprises/${enterprise}/secret-scanning/alerts`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "secret_type": options?.["secret_type"] as any, "resolution": options?.["resolution"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "validity": options?.["validity"] as any, "is_publicly_leaked": options?.["is_publicly_leaked"] as any, "is_multi_repo": options?.["is_multi_repo"] as any, "hide_secret": options?.["hide_secret"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SecretScanningListAlertsForEnterprise200),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("SecretScanningListAlertsForEnterprise503", SecretScanningListAlertsForEnterprise503),
      orElse: unexpectedStatus
    }))
  ),
  "activityListPublicEvents": (options) => HttpClientRequest.get(`/events`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActivityListPublicEvents200),
      "403": decodeError("BasicError", BasicError),
      "503": decodeError("ActivityListPublicEvents503", ActivityListPublicEvents503),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "activityGetFeeds": () => HttpClientRequest.get(`/feeds`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Feed),
      orElse: unexpectedStatus
    }))
  ),
  "gistsList": (options) => HttpClientRequest.get(`/gists`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GistsList200),
      "403": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "gistsCreate": (options) => HttpClientRequest.post(`/gists`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GistSimple),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "gistsListPublic": (options) => HttpClientRequest.get(`/gists/public`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GistsListPublic200),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "gistsListStarred": (options) => HttpClientRequest.get(`/gists/starred`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GistsListStarred200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "gistsGet": (gistId, options) => HttpClientRequest.get(`/gists/${gistId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GistSimple),
      "403": decodeError("GistsGet403", GistsGet403),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "gistsDelete": (gistId, options) => HttpClientRequest.del(`/gists/${gistId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "gistsUpdate": (gistId, options) => HttpClientRequest.patch(`/gists/${gistId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GistSimple),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "gistsListComments": (gistId, options) => HttpClientRequest.get(`/gists/${gistId}/comments`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GistsListComments200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "gistsCreateComment": (gistId, options) => HttpClientRequest.post(`/gists/${gistId}/comments`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GistComment),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "gistsGetComment": (gistId, commentId, options) => HttpClientRequest.get(`/gists/${gistId}/comments/${commentId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GistComment),
      "403": decodeError("GistsGetComment403", GistsGetComment403),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "gistsDeleteComment": (gistId, commentId, options) => HttpClientRequest.del(`/gists/${gistId}/comments/${commentId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "gistsUpdateComment": (gistId, commentId, options) => HttpClientRequest.patch(`/gists/${gistId}/comments/${commentId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GistComment),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "gistsListCommits": (gistId, options) => HttpClientRequest.get(`/gists/${gistId}/commits`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GistsListCommits200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "gistsListForks": (gistId, options) => HttpClientRequest.get(`/gists/${gistId}/forks`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GistsListForks200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "gistsFork": (gistId, options) => HttpClientRequest.post(`/gists/${gistId}/forks`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BaseGist),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "gistsCheckIsStarred": (gistId, options) => HttpClientRequest.get(`/gists/${gistId}/star`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("GistsCheckIsStarred404", GistsCheckIsStarred404),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "gistsStar": (gistId, options) => HttpClientRequest.put(`/gists/${gistId}/star`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "gistsUnstar": (gistId, options) => HttpClientRequest.del(`/gists/${gistId}/star`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "gistsGetRevision": (gistId, sha, options) => HttpClientRequest.get(`/gists/${gistId}/${sha}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GistSimple),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "gitignoreGetAllTemplates": () => HttpClientRequest.get(`/gitignore/templates`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GitignoreGetAllTemplates200),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "gitignoreGetTemplate": (name) => HttpClientRequest.get(`/gitignore/templates/${name}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GitignoreTemplate),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "appsListReposAccessibleToInstallation": (options) => HttpClientRequest.get(`/installation/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppsListReposAccessibleToInstallation200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "appsRevokeInstallationAccessToken": () => HttpClientRequest.del(`/installation/token`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "issuesList": (options) => HttpClientRequest.get(`/issues`).pipe(
    HttpClientRequest.setUrlParams({ "filter": options?.["filter"] as any, "state": options?.["state"] as any, "labels": options?.["labels"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "since": options?.["since"] as any, "collab": options?.["collab"] as any, "orgs": options?.["orgs"] as any, "owned": options?.["owned"] as any, "pulls": options?.["pulls"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IssuesList200),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "licensesGetAllCommonlyUsed": (options) => HttpClientRequest.get(`/licenses`).pipe(
    HttpClientRequest.setUrlParams({ "featured": options?.["featured"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(LicensesGetAllCommonlyUsed200),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "licensesGet": (license) => HttpClientRequest.get(`/licenses/${license}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(License),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "markdownRender": (options) => HttpClientRequest.post(`/markdown`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "markdownRenderRaw": () => HttpClientRequest.post(`/markdown/raw`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "appsGetSubscriptionPlanForAccount": (accountId, options) => HttpClientRequest.get(`/marketplace_listing/accounts/${accountId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(MarketplacePurchase),
      "401": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "appsListPlans": (options) => HttpClientRequest.get(`/marketplace_listing/plans`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppsListPlans200),
      "401": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "appsListAccountsForPlan": (planId, options) => HttpClientRequest.get(`/marketplace_listing/plans/${planId}/accounts`).pipe(
    HttpClientRequest.setUrlParams({ "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppsListAccountsForPlan200),
      "401": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "appsGetSubscriptionPlanForAccountStubbed": (accountId, options) => HttpClientRequest.get(`/marketplace_listing/stubbed/accounts/${accountId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(MarketplacePurchase),
      "401": decodeError("BasicError", BasicError),
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "appsListPlansStubbed": (options) => HttpClientRequest.get(`/marketplace_listing/stubbed/plans`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppsListPlansStubbed200),
      "401": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "appsListAccountsForPlanStubbed": (planId, options) => HttpClientRequest.get(`/marketplace_listing/stubbed/plans/${planId}/accounts`).pipe(
    HttpClientRequest.setUrlParams({ "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppsListAccountsForPlanStubbed200),
      "401": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "metaGet": () => HttpClientRequest.get(`/meta`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ApiOverview),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "activityListPublicEventsForRepoNetwork": (owner, repo, options) => HttpClientRequest.get(`/networks/${owner}/${repo}/events`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(ActivityListPublicEventsForRepoNetwork200),
      "301": decodeSuccess(BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "activityListNotificationsForAuthenticatedUser": (options) => HttpClientRequest.get(`/notifications`).pipe(
    HttpClientRequest.setUrlParams({ "all": options?.["all"] as any, "participating": options?.["participating"] as any, "since": options?.["since"] as any, "before": options?.["before"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActivityListNotificationsForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "activityMarkNotificationsAsRead": (options) => HttpClientRequest.put(`/notifications`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActivityMarkNotificationsAsRead202),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "205": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "activityGetThread": (threadId, options) => HttpClientRequest.get(`/notifications/threads/${threadId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Thread),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "activityMarkThreadAsDone": (threadId, options) => HttpClientRequest.del(`/notifications/threads/${threadId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "activityMarkThreadAsRead": (threadId, options) => HttpClientRequest.patch(`/notifications/threads/${threadId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "205": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "activityGetThreadSubscriptionForAuthenticatedUser": (threadId, options) => HttpClientRequest.get(`/notifications/threads/${threadId}/subscription`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ThreadSubscription),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "activitySetThreadSubscription": (threadId, options) => HttpClientRequest.put(`/notifications/threads/${threadId}/subscription`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ThreadSubscription),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "activityDeleteThreadSubscription": (threadId, options) => HttpClientRequest.del(`/notifications/threads/${threadId}/subscription`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "metaGetOctocat": (options) => HttpClientRequest.get(`/octocat`).pipe(
    HttpClientRequest.setUrlParams({ "s": options?.["s"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      orElse: unexpectedStatus
    }))
  ),
  "orgsList": (options) => HttpClientRequest.get(`/organizations`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsList200),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "dependabotRepositoryAccessForOrg": (org, options) => HttpClientRequest.get(`/organizations/${org}/dependabot/repository-access`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DependabotRepositoryAccessDetails),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "dependabotUpdateRepositoryAccessForOrg": (org, options) => HttpClientRequest.patch(`/organizations/${org}/dependabot/repository-access`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "dependabotSetRepositoryAccessDefaultLevel": (org, options) => HttpClientRequest.put(`/organizations/${org}/dependabot/repository-access/default-level`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "billingGetGithubBillingUsageReportOrg": (org, options) => HttpClientRequest.get(`/organizations/${org}/settings/billing/usage`).pipe(
    HttpClientRequest.setUrlParams({ "year": options?.["year"] as any, "month": options?.["month"] as any, "day": options?.["day"] as any, "hour": options?.["hour"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BillingUsageReport),
      "400": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "503": decodeError("BillingGetGithubBillingUsageReportOrg503", BillingGetGithubBillingUsageReportOrg503),
      orElse: unexpectedStatus
    }))
  ),
  "orgsGet": (org, options) => HttpClientRequest.get(`/orgs/${org}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrganizationFull),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsDelete": (org, options) => HttpClientRequest.del(`/orgs/${org}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsDelete202),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsUpdate": (org, options) => HttpClientRequest.patch(`/orgs/${org}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrganizationFull),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("OrgsUpdate422", OrgsUpdate422),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetActionsCacheUsageForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/cache/usage`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsCacheUsageOrgEnterprise),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetActionsCacheUsageByRepoForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/cache/usage-by-repository`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsGetActionsCacheUsageByRepoForOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsListHostedRunnersForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/hosted-runners`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListHostedRunnersForOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsCreateHostedRunnerForOrg": (org, options) => HttpClientRequest.post(`/orgs/${org}/actions/hosted-runners`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsHostedRunner),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetHostedRunnersGithubOwnedImagesForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/hosted-runners/images/github-owned`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsGetHostedRunnersGithubOwnedImagesForOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetHostedRunnersPartnerImagesForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/hosted-runners/images/partner`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsGetHostedRunnersPartnerImagesForOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetHostedRunnersLimitsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/hosted-runners/limits`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsHostedRunnerLimits),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetHostedRunnersMachineSpecsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/hosted-runners/machine-sizes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsGetHostedRunnersMachineSpecsForOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetHostedRunnersPlatformsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/hosted-runners/platforms`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsGetHostedRunnersPlatformsForOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetHostedRunnerForOrg": (org, hostedRunnerId, options) => HttpClientRequest.get(`/orgs/${org}/actions/hosted-runners/${hostedRunnerId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsHostedRunner),
      orElse: unexpectedStatus
    }))
  ),
  "actionsDeleteHostedRunnerForOrg": (org, hostedRunnerId, options) => HttpClientRequest.del(`/orgs/${org}/actions/hosted-runners/${hostedRunnerId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsHostedRunner),
      orElse: unexpectedStatus
    }))
  ),
  "actionsUpdateHostedRunnerForOrg": (org, hostedRunnerId, options) => HttpClientRequest.patch(`/orgs/${org}/actions/hosted-runners/${hostedRunnerId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsHostedRunner),
      orElse: unexpectedStatus
    }))
  ),
  "oidcGetOidcCustomSubTemplateForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/oidc/customization/sub`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OidcCustomSub),
      orElse: unexpectedStatus
    }))
  ),
  "oidcUpdateOidcCustomSubTemplateForOrg": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/oidc/customization/sub`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetGithubActionsPermissionsOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/permissions`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsOrganizationPermissions),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetGithubActionsPermissionsOrganization": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetArtifactAndLogRetentionSettingsOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/permissions/artifact-and-log-retention`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsArtifactAndLogRetentionResponse),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetArtifactAndLogRetentionSettingsOrganization": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/artifact-and-log-retention`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetForkPrContributorApprovalPermissionsOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/permissions/fork-pr-contributor-approval`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsForkPrContributorApproval),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetForkPrContributorApprovalPermissionsOrganization": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/fork-pr-contributor-approval`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetPrivateRepoForkPrWorkflowsSettingsOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/permissions/fork-pr-workflows-private-repos`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsForkPrWorkflowsPrivateRepos),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetPrivateRepoForkPrWorkflowsSettingsOrganization": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/fork-pr-workflows-private-repos`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsListSelectedRepositoriesEnabledGithubActionsOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/permissions/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetSelectedRepositoriesEnabledGithubActionsOrganization": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/repositories`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsEnableSelectedRepositoryGithubActionsOrganization": (org, repositoryId, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/repositories/${repositoryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsDisableSelectedRepositoryGithubActionsOrganization": (org, repositoryId, options) => HttpClientRequest.del(`/orgs/${org}/actions/permissions/repositories/${repositoryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetAllowedActionsOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/permissions/selected-actions`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SelectedActions),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetAllowedActionsOrganization": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/selected-actions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetSelfHostedRunnersPermissionsOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/permissions/self-hosted-runners`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SelfHostedRunnersSettings),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetSelfHostedRunnersPermissionsOrganization": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/self-hosted-runners`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsListSelectedRepositoriesSelfHostedRunnersOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/permissions/self-hosted-runners/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListSelectedRepositoriesSelfHostedRunnersOrganization200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetSelectedRepositoriesSelfHostedRunnersOrganization": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/self-hosted-runners/repositories`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsEnableSelectedRepositorySelfHostedRunnersOrganization": (org, repositoryId, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/self-hosted-runners/repositories/${repositoryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsDisableSelectedRepositorySelfHostedRunnersOrganization": (org, repositoryId, options) => HttpClientRequest.del(`/orgs/${org}/actions/permissions/self-hosted-runners/repositories/${repositoryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetGithubActionsDefaultWorkflowPermissionsOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/permissions/workflow`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsGetDefaultWorkflowPermissions),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetGithubActionsDefaultWorkflowPermissionsOrganization": (org, options) => HttpClientRequest.put(`/orgs/${org}/actions/permissions/workflow`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsListSelfHostedRunnerGroupsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/runner-groups`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "visible_to_repository": options?.["visible_to_repository"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListSelfHostedRunnerGroupsForOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsCreateSelfHostedRunnerGroupForOrg": (org, options) => HttpClientRequest.post(`/orgs/${org}/actions/runner-groups`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RunnerGroupsOrg),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetSelfHostedRunnerGroupForOrg": (org, runnerGroupId, options) => HttpClientRequest.get(`/orgs/${org}/actions/runner-groups/${runnerGroupId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RunnerGroupsOrg),
      orElse: unexpectedStatus
    }))
  ),
  "actionsDeleteSelfHostedRunnerGroupFromOrg": (org, runnerGroupId, options) => HttpClientRequest.del(`/orgs/${org}/actions/runner-groups/${runnerGroupId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsUpdateSelfHostedRunnerGroupForOrg": (org, runnerGroupId, options) => HttpClientRequest.patch(`/orgs/${org}/actions/runner-groups/${runnerGroupId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RunnerGroupsOrg),
      orElse: unexpectedStatus
    }))
  ),
  "actionsListGithubHostedRunnersInGroupForOrg": (org, runnerGroupId, options) => HttpClientRequest.get(`/orgs/${org}/actions/runner-groups/${runnerGroupId}/hosted-runners`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListGithubHostedRunnersInGroupForOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsListRepoAccessToSelfHostedRunnerGroupInOrg": (org, runnerGroupId, options) => HttpClientRequest.get(`/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetRepoAccessToSelfHostedRunnerGroupInOrg": (org, runnerGroupId, options) => HttpClientRequest.put(`/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsAddRepoAccessToSelfHostedRunnerGroupInOrg": (org, runnerGroupId, repositoryId, options) => HttpClientRequest.put(`/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories/${repositoryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg": (org, runnerGroupId, repositoryId, options) => HttpClientRequest.del(`/orgs/${org}/actions/runner-groups/${runnerGroupId}/repositories/${repositoryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsListSelfHostedRunnersInGroupForOrg": (org, runnerGroupId, options) => HttpClientRequest.get(`/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListSelfHostedRunnersInGroupForOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetSelfHostedRunnersInGroupForOrg": (org, runnerGroupId, options) => HttpClientRequest.put(`/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsAddSelfHostedRunnerToGroupForOrg": (org, runnerGroupId, runnerId, options) => HttpClientRequest.put(`/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners/${runnerId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsRemoveSelfHostedRunnerFromGroupForOrg": (org, runnerGroupId, runnerId, options) => HttpClientRequest.del(`/orgs/${org}/actions/runner-groups/${runnerGroupId}/runners/${runnerId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsListSelfHostedRunnersForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/runners`).pipe(
    HttpClientRequest.setUrlParams({ "name": options?.["name"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListSelfHostedRunnersForOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsListRunnerApplicationsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/runners/downloads`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListRunnerApplicationsForOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGenerateRunnerJitconfigForOrg": (org, options) => HttpClientRequest.post(`/orgs/${org}/actions/runners/generate-jitconfig`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsGenerateRunnerJitconfigForOrg201),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "actionsCreateRegistrationTokenForOrg": (org, options) => HttpClientRequest.post(`/orgs/${org}/actions/runners/registration-token`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AuthenticationToken),
      orElse: unexpectedStatus
    }))
  ),
  "actionsCreateRemoveTokenForOrg": (org, options) => HttpClientRequest.post(`/orgs/${org}/actions/runners/remove-token`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AuthenticationToken),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetSelfHostedRunnerForOrg": (org, runnerId, options) => HttpClientRequest.get(`/orgs/${org}/actions/runners/${runnerId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Runner),
      orElse: unexpectedStatus
    }))
  ),
  "actionsDeleteSelfHostedRunnerFromOrg": (org, runnerId, options) => HttpClientRequest.del(`/orgs/${org}/actions/runners/${runnerId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsListLabelsForSelfHostedRunnerForOrg": (org, runnerId, options) => HttpClientRequest.get(`/orgs/${org}/actions/runners/${runnerId}/labels`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListLabelsForSelfHostedRunnerForOrg200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetCustomLabelsForSelfHostedRunnerForOrg": (org, runnerId, options) => HttpClientRequest.put(`/orgs/${org}/actions/runners/${runnerId}/labels`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsSetCustomLabelsForSelfHostedRunnerForOrg200),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "actionsAddCustomLabelsToSelfHostedRunnerForOrg": (org, runnerId, options) => HttpClientRequest.post(`/orgs/${org}/actions/runners/${runnerId}/labels`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsAddCustomLabelsToSelfHostedRunnerForOrg200),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg": (org, runnerId, options) => HttpClientRequest.del(`/orgs/${org}/actions/runners/${runnerId}/labels`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsRemoveCustomLabelFromSelfHostedRunnerForOrg": (org, runnerId, name, options) => HttpClientRequest.del(`/orgs/${org}/actions/runners/${runnerId}/labels/${name}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsRemoveCustomLabelFromSelfHostedRunnerForOrg200),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "actionsListOrgSecrets": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/secrets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListOrgSecrets200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetOrgPublicKey": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/secrets/public-key`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsPublicKey),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetOrgSecret": (org, secretName, options) => HttpClientRequest.get(`/orgs/${org}/actions/secrets/${secretName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrganizationActionsSecret),
      orElse: unexpectedStatus
    }))
  ),
  "actionsCreateOrUpdateOrgSecret": (org, secretName, options) => HttpClientRequest.put(`/orgs/${org}/actions/secrets/${secretName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsDeleteOrgSecret": (org, secretName, options) => HttpClientRequest.del(`/orgs/${org}/actions/secrets/${secretName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsListSelectedReposForOrgSecret": (org, secretName, options) => HttpClientRequest.get(`/orgs/${org}/actions/secrets/${secretName}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListSelectedReposForOrgSecret200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetSelectedReposForOrgSecret": (org, secretName, options) => HttpClientRequest.put(`/orgs/${org}/actions/secrets/${secretName}/repositories`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsAddSelectedRepoToOrgSecret": (org, secretName, repositoryId, options) => HttpClientRequest.put(`/orgs/${org}/actions/secrets/${secretName}/repositories/${repositoryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "409": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsRemoveSelectedRepoFromOrgSecret": (org, secretName, repositoryId, options) => HttpClientRequest.del(`/orgs/${org}/actions/secrets/${secretName}/repositories/${repositoryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "409": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsListOrgVariables": (org, options) => HttpClientRequest.get(`/orgs/${org}/actions/variables`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListOrgVariables200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsCreateOrgVariable": (org, options) => HttpClientRequest.post(`/orgs/${org}/actions/variables`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetOrgVariable": (org, name, options) => HttpClientRequest.get(`/orgs/${org}/actions/variables/${name}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrganizationActionsVariable),
      orElse: unexpectedStatus
    }))
  ),
  "actionsDeleteOrgVariable": (org, name, options) => HttpClientRequest.del(`/orgs/${org}/actions/variables/${name}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsUpdateOrgVariable": (org, name, options) => HttpClientRequest.patch(`/orgs/${org}/actions/variables/${name}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsListSelectedReposForOrgVariable": (org, name, options) => HttpClientRequest.get(`/orgs/${org}/actions/variables/${name}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListSelectedReposForOrgVariable200),
      "409": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetSelectedReposForOrgVariable": (org, name, options) => HttpClientRequest.put(`/orgs/${org}/actions/variables/${name}/repositories`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "409": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsAddSelectedRepoToOrgVariable": (org, name, repositoryId, options) => HttpClientRequest.put(`/orgs/${org}/actions/variables/${name}/repositories/${repositoryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "409": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsRemoveSelectedRepoFromOrgVariable": (org, name, repositoryId, options) => HttpClientRequest.del(`/orgs/${org}/actions/variables/${name}/repositories/${repositoryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "409": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsListAttestationsBulk": (org, options) => HttpClientRequest.post(`/orgs/${org}/attestations/bulk-list`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options.params?.["per_page"] as any, "before": options.params?.["before"] as any, "after": options.params?.["after"] as any }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListAttestationsBulk200),
      orElse: unexpectedStatus
    }))
  ),
  "orgsDeleteAttestationsBulk": (org, options) => HttpClientRequest.post(`/orgs/${org}/attestations/delete-request`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "200": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsDeleteAttestationsBySubjectDigest": (org, subjectDigest, options) => HttpClientRequest.del(`/orgs/${org}/attestations/digest/${subjectDigest}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "200": () => Effect.void,
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsDeleteAttestationsById": (org, attestationId, options) => HttpClientRequest.del(`/orgs/${org}/attestations/${attestationId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "200": () => Effect.void,
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsListAttestations": (org, subjectDigest, options) => HttpClientRequest.get(`/orgs/${org}/attestations/${subjectDigest}`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "predicate_type": options?.["predicate_type"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListAttestations200),
      orElse: unexpectedStatus
    }))
  ),
  "orgsListBlockedUsers": (org, options) => HttpClientRequest.get(`/orgs/${org}/blocks`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListBlockedUsers200),
      orElse: unexpectedStatus
    }))
  ),
  "orgsCheckBlockedUser": (org, username, options) => HttpClientRequest.get(`/orgs/${org}/blocks/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsBlockUser": (org, username, options) => HttpClientRequest.put(`/orgs/${org}/blocks/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsUnblockUser": (org, username, options) => HttpClientRequest.del(`/orgs/${org}/blocks/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "campaignsListOrgCampaigns": (org, options) => HttpClientRequest.get(`/orgs/${org}/campaigns`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "direction": options?.["direction"] as any, "state": options?.["state"] as any, "sort": options?.["sort"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CampaignsListOrgCampaigns200),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CampaignsListOrgCampaigns503", CampaignsListOrgCampaigns503),
      orElse: unexpectedStatus
    }))
  ),
  "campaignsCreateCampaign": (org, options) => HttpClientRequest.post(`/orgs/${org}/campaigns`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CampaignSummary),
      "400": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("BasicError", BasicError),
      "503": decodeError("CampaignsCreateCampaign503", CampaignsCreateCampaign503),
      "429": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "campaignsGetCampaignSummary": (org, campaignNumber, options) => HttpClientRequest.get(`/orgs/${org}/campaigns/${campaignNumber}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CampaignSummary),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("BasicError", BasicError),
      "503": decodeError("CampaignsGetCampaignSummary503", CampaignsGetCampaignSummary503),
      orElse: unexpectedStatus
    }))
  ),
  "campaignsDeleteCampaign": (org, campaignNumber, options) => HttpClientRequest.del(`/orgs/${org}/campaigns/${campaignNumber}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CampaignsDeleteCampaign503", CampaignsDeleteCampaign503),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "campaignsUpdateCampaign": (org, campaignNumber, options) => HttpClientRequest.patch(`/orgs/${org}/campaigns/${campaignNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CampaignSummary),
      "400": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("BasicError", BasicError),
      "503": decodeError("CampaignsUpdateCampaign503", CampaignsUpdateCampaign503),
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningListAlertsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/code-scanning/alerts`).pipe(
    HttpClientRequest.setUrlParams({ "tool_name": options?.["tool_name"] as any, "tool_guid": options?.["tool_guid"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "direction": options?.["direction"] as any, "state": options?.["state"] as any, "sort": options?.["sort"] as any, "severity": options?.["severity"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeScanningListAlertsForOrg200),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningListAlertsForOrg503", CodeScanningListAlertsForOrg503),
      orElse: unexpectedStatus
    }))
  ),
  "codeSecurityGetConfigurationsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/code-security/configurations`).pipe(
    HttpClientRequest.setUrlParams({ "target_type": options?.["target_type"] as any, "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeSecurityGetConfigurationsForOrg200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "codeSecurityCreateConfiguration": (org, options) => HttpClientRequest.post(`/orgs/${org}/code-security/configurations`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeSecurityConfiguration),
      orElse: unexpectedStatus
    }))
  ),
  "codeSecurityGetDefaultConfigurations": (org, options) => HttpClientRequest.get(`/orgs/${org}/code-security/configurations/defaults`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeSecurityDefaultConfigurations),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codeSecurityDetachConfiguration": (org, options) => HttpClientRequest.del(`/orgs/${org}/code-security/configurations/detach`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "400": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codeSecurityGetConfiguration": (org, configurationId, options) => HttpClientRequest.get(`/orgs/${org}/code-security/configurations/${configurationId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeSecurityConfiguration),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codeSecurityDeleteConfiguration": (org, configurationId, options) => HttpClientRequest.del(`/orgs/${org}/code-security/configurations/${configurationId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "400": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codeSecurityUpdateConfiguration": (org, configurationId, options) => HttpClientRequest.patch(`/orgs/${org}/code-security/configurations/${configurationId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeSecurityConfiguration),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codeSecurityAttachConfiguration": (org, configurationId, options) => HttpClientRequest.post(`/orgs/${org}/code-security/configurations/${configurationId}/attach`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeSecurityAttachConfiguration202),
      orElse: unexpectedStatus
    }))
  ),
  "codeSecuritySetConfigurationAsDefault": (org, configurationId, options) => HttpClientRequest.put(`/orgs/${org}/code-security/configurations/${configurationId}/defaults`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeSecuritySetConfigurationAsDefault200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "codeSecurityGetRepositoriesForConfiguration": (org, configurationId, options) => HttpClientRequest.get(`/orgs/${org}/code-security/configurations/${configurationId}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "status": options?.["status"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeSecurityGetRepositoriesForConfiguration200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesListInOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/codespaces`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesListInOrganization200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesSetCodespacesAccess": (org, options) => HttpClientRequest.put(`/orgs/${org}/codespaces/access`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "500": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      "400": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesSetCodespacesAccessUsers": (org, options) => HttpClientRequest.post(`/orgs/${org}/codespaces/access/selected_users`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "500": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      "400": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesDeleteCodespacesAccessUsers": (org, options) => HttpClientRequest.del(`/orgs/${org}/codespaces/access/selected_users`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "500": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      "400": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesListOrgSecrets": (org, options) => HttpClientRequest.get(`/orgs/${org}/codespaces/secrets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesListOrgSecrets200),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesGetOrgPublicKey": (org, options) => HttpClientRequest.get(`/orgs/${org}/codespaces/secrets/public-key`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesPublicKey),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesGetOrgSecret": (org, secretName, options) => HttpClientRequest.get(`/orgs/${org}/codespaces/secrets/${secretName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesOrgSecret),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesCreateOrUpdateOrgSecret": (org, secretName, options) => HttpClientRequest.put(`/orgs/${org}/codespaces/secrets/${secretName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesDeleteOrgSecret": (org, secretName, options) => HttpClientRequest.del(`/orgs/${org}/codespaces/secrets/${secretName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesListSelectedReposForOrgSecret": (org, secretName, options) => HttpClientRequest.get(`/orgs/${org}/codespaces/secrets/${secretName}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesListSelectedReposForOrgSecret200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesSetSelectedReposForOrgSecret": (org, secretName, options) => HttpClientRequest.put(`/orgs/${org}/codespaces/secrets/${secretName}/repositories`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "409": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesAddSelectedRepoToOrgSecret": (org, secretName, repositoryId, options) => HttpClientRequest.put(`/orgs/${org}/codespaces/secrets/${secretName}/repositories/${repositoryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      "409": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesRemoveSelectedRepoFromOrgSecret": (org, secretName, repositoryId, options) => HttpClientRequest.del(`/orgs/${org}/codespaces/secrets/${secretName}/repositories/${repositoryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      "409": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "copilotGetCopilotOrganizationDetails": (org, options) => HttpClientRequest.get(`/orgs/${org}/copilot/billing`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CopilotOrganizationDetails),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "copilotListCopilotSeats": (org, options) => HttpClientRequest.get(`/orgs/${org}/copilot/billing/seats`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CopilotListCopilotSeats200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "copilotAddCopilotSeatsForTeams": (org, options) => HttpClientRequest.post(`/orgs/${org}/copilot/billing/selected_teams`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CopilotAddCopilotSeatsForTeams201),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "copilotCancelCopilotSeatAssignmentForTeams": (org, options) => HttpClientRequest.del(`/orgs/${org}/copilot/billing/selected_teams`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CopilotCancelCopilotSeatAssignmentForTeams200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "copilotAddCopilotSeatsForUsers": (org, options) => HttpClientRequest.post(`/orgs/${org}/copilot/billing/selected_users`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CopilotAddCopilotSeatsForUsers201),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "copilotCancelCopilotSeatAssignmentForUsers": (org, options) => HttpClientRequest.del(`/orgs/${org}/copilot/billing/selected_users`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CopilotCancelCopilotSeatAssignmentForUsers200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "copilotCopilotMetricsForOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/copilot/metrics`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any, "until": options?.["until"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CopilotCopilotMetricsForOrganization200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "dependabotListAlertsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/dependabot/alerts`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "severity": options?.["severity"] as any, "ecosystem": options?.["ecosystem"] as any, "package": options?.["package"] as any, "epss_percentage": options?.["epss_percentage"] as any, "artifact_registry_url": options?.["artifact_registry_url"] as any, "artifact_registry": options?.["artifact_registry"] as any, "has": options?.["has"] as any, "scope": options?.["scope"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "first": options?.["first"] as any, "last": options?.["last"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DependabotListAlertsForOrg200),
      "400": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "dependabotListOrgSecrets": (org, options) => HttpClientRequest.get(`/orgs/${org}/dependabot/secrets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DependabotListOrgSecrets200),
      orElse: unexpectedStatus
    }))
  ),
  "dependabotGetOrgPublicKey": (org, options) => HttpClientRequest.get(`/orgs/${org}/dependabot/secrets/public-key`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DependabotPublicKey),
      orElse: unexpectedStatus
    }))
  ),
  "dependabotGetOrgSecret": (org, secretName, options) => HttpClientRequest.get(`/orgs/${org}/dependabot/secrets/${secretName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrganizationDependabotSecret),
      orElse: unexpectedStatus
    }))
  ),
  "dependabotCreateOrUpdateOrgSecret": (org, secretName, options) => HttpClientRequest.put(`/orgs/${org}/dependabot/secrets/${secretName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "dependabotDeleteOrgSecret": (org, secretName, options) => HttpClientRequest.del(`/orgs/${org}/dependabot/secrets/${secretName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "dependabotListSelectedReposForOrgSecret": (org, secretName, options) => HttpClientRequest.get(`/orgs/${org}/dependabot/secrets/${secretName}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DependabotListSelectedReposForOrgSecret200),
      orElse: unexpectedStatus
    }))
  ),
  "dependabotSetSelectedReposForOrgSecret": (org, secretName, options) => HttpClientRequest.put(`/orgs/${org}/dependabot/secrets/${secretName}/repositories`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "dependabotAddSelectedRepoToOrgSecret": (org, secretName, repositoryId, options) => HttpClientRequest.put(`/orgs/${org}/dependabot/secrets/${secretName}/repositories/${repositoryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "409": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "dependabotRemoveSelectedRepoFromOrgSecret": (org, secretName, repositoryId, options) => HttpClientRequest.del(`/orgs/${org}/dependabot/secrets/${secretName}/repositories/${repositoryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "409": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "packagesListDockerMigrationConflictingPackagesForOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/docker/conflicts`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PackagesListDockerMigrationConflictingPackagesForOrganization200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "activityListPublicOrgEvents": (org, options) => HttpClientRequest.get(`/orgs/${org}/events`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActivityListPublicOrgEvents200),
      orElse: unexpectedStatus
    }))
  ),
  "orgsListFailedInvitations": (org, options) => HttpClientRequest.get(`/orgs/${org}/failed_invitations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListFailedInvitations200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsListWebhooks": (org, options) => HttpClientRequest.get(`/orgs/${org}/hooks`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListWebhooks200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsCreateWebhook": (org, options) => HttpClientRequest.post(`/orgs/${org}/hooks`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgHook),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsGetWebhook": (org, hookId, options) => HttpClientRequest.get(`/orgs/${org}/hooks/${hookId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgHook),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsDeleteWebhook": (org, hookId, options) => HttpClientRequest.del(`/orgs/${org}/hooks/${hookId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsUpdateWebhook": (org, hookId, options) => HttpClientRequest.patch(`/orgs/${org}/hooks/${hookId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgHook),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsGetWebhookConfigForOrg": (org, hookId, options) => HttpClientRequest.get(`/orgs/${org}/hooks/${hookId}/config`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(WebhookConfig),
      orElse: unexpectedStatus
    }))
  ),
  "orgsUpdateWebhookConfigForOrg": (org, hookId, options) => HttpClientRequest.patch(`/orgs/${org}/hooks/${hookId}/config`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(WebhookConfig),
      orElse: unexpectedStatus
    }))
  ),
  "orgsListWebhookDeliveries": (org, hookId, options) => HttpClientRequest.get(`/orgs/${org}/hooks/${hookId}/deliveries`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "cursor": options?.["cursor"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListWebhookDeliveries200),
      "400": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsGetWebhookDelivery": (org, hookId, deliveryId, options) => HttpClientRequest.get(`/orgs/${org}/hooks/${hookId}/deliveries/${deliveryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(HookDelivery),
      "400": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsRedeliverWebhookDelivery": (org, hookId, deliveryId, options) => HttpClientRequest.post(`/orgs/${org}/hooks/${hookId}/deliveries/${deliveryId}/attempts`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsRedeliverWebhookDelivery202),
      "400": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsPingWebhook": (org, hookId, options) => HttpClientRequest.post(`/orgs/${org}/hooks/${hookId}/pings`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "apiInsightsGetRouteStatsByActor": (org, actorType, actorId, options) => HttpClientRequest.get(`/orgs/${org}/insights/api/route-stats/${actorType}/${actorId}`).pipe(
    HttpClientRequest.setUrlParams({ "min_timestamp": options?.["min_timestamp"] as any, "max_timestamp": options?.["max_timestamp"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "direction": options?.["direction"] as any, "sort": options?.["sort"] as any, "api_route_substring": options?.["api_route_substring"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ApiInsightsRouteStats),
      orElse: unexpectedStatus
    }))
  ),
  "apiInsightsGetSubjectStats": (org, options) => HttpClientRequest.get(`/orgs/${org}/insights/api/subject-stats`).pipe(
    HttpClientRequest.setUrlParams({ "min_timestamp": options?.["min_timestamp"] as any, "max_timestamp": options?.["max_timestamp"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "direction": options?.["direction"] as any, "sort": options?.["sort"] as any, "subject_name_substring": options?.["subject_name_substring"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ApiInsightsSubjectStats),
      orElse: unexpectedStatus
    }))
  ),
  "apiInsightsGetSummaryStats": (org, options) => HttpClientRequest.get(`/orgs/${org}/insights/api/summary-stats`).pipe(
    HttpClientRequest.setUrlParams({ "min_timestamp": options?.["min_timestamp"] as any, "max_timestamp": options?.["max_timestamp"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ApiInsightsSummaryStats),
      orElse: unexpectedStatus
    }))
  ),
  "apiInsightsGetSummaryStatsByUser": (org, userId, options) => HttpClientRequest.get(`/orgs/${org}/insights/api/summary-stats/users/${userId}`).pipe(
    HttpClientRequest.setUrlParams({ "min_timestamp": options?.["min_timestamp"] as any, "max_timestamp": options?.["max_timestamp"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ApiInsightsSummaryStats),
      orElse: unexpectedStatus
    }))
  ),
  "apiInsightsGetSummaryStatsByActor": (org, actorType, actorId, options) => HttpClientRequest.get(`/orgs/${org}/insights/api/summary-stats/${actorType}/${actorId}`).pipe(
    HttpClientRequest.setUrlParams({ "min_timestamp": options?.["min_timestamp"] as any, "max_timestamp": options?.["max_timestamp"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ApiInsightsSummaryStats),
      orElse: unexpectedStatus
    }))
  ),
  "apiInsightsGetTimeStats": (org, options) => HttpClientRequest.get(`/orgs/${org}/insights/api/time-stats`).pipe(
    HttpClientRequest.setUrlParams({ "min_timestamp": options?.["min_timestamp"] as any, "max_timestamp": options?.["max_timestamp"] as any, "timestamp_increment": options?.["timestamp_increment"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ApiInsightsTimeStats),
      orElse: unexpectedStatus
    }))
  ),
  "apiInsightsGetTimeStatsByUser": (org, userId, options) => HttpClientRequest.get(`/orgs/${org}/insights/api/time-stats/users/${userId}`).pipe(
    HttpClientRequest.setUrlParams({ "min_timestamp": options?.["min_timestamp"] as any, "max_timestamp": options?.["max_timestamp"] as any, "timestamp_increment": options?.["timestamp_increment"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ApiInsightsTimeStats),
      orElse: unexpectedStatus
    }))
  ),
  "apiInsightsGetTimeStatsByActor": (org, actorType, actorId, options) => HttpClientRequest.get(`/orgs/${org}/insights/api/time-stats/${actorType}/${actorId}`).pipe(
    HttpClientRequest.setUrlParams({ "min_timestamp": options?.["min_timestamp"] as any, "max_timestamp": options?.["max_timestamp"] as any, "timestamp_increment": options?.["timestamp_increment"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ApiInsightsTimeStats),
      orElse: unexpectedStatus
    }))
  ),
  "apiInsightsGetUserStats": (org, userId, options) => HttpClientRequest.get(`/orgs/${org}/insights/api/user-stats/${userId}`).pipe(
    HttpClientRequest.setUrlParams({ "min_timestamp": options?.["min_timestamp"] as any, "max_timestamp": options?.["max_timestamp"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "direction": options?.["direction"] as any, "sort": options?.["sort"] as any, "actor_name_substring": options?.["actor_name_substring"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ApiInsightsUserStats),
      orElse: unexpectedStatus
    }))
  ),
  "appsGetOrgInstallation": (org, options) => HttpClientRequest.get(`/orgs/${org}/installation`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Installation),
      orElse: unexpectedStatus
    }))
  ),
  "orgsListAppInstallations": (org, options) => HttpClientRequest.get(`/orgs/${org}/installations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListAppInstallations200),
      orElse: unexpectedStatus
    }))
  ),
  "interactionsGetRestrictionsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/interaction-limits`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(InteractionsGetRestrictionsForOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "interactionsSetRestrictionsForOrg": (org, options) => HttpClientRequest.put(`/orgs/${org}/interaction-limits`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(InteractionLimitResponse),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "interactionsRemoveRestrictionsForOrg": (org, options) => HttpClientRequest.del(`/orgs/${org}/interaction-limits`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsListPendingInvitations": (org, options) => HttpClientRequest.get(`/orgs/${org}/invitations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "role": options?.["role"] as any, "invitation_source": options?.["invitation_source"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListPendingInvitations200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsCreateInvitation": (org, options) => HttpClientRequest.post(`/orgs/${org}/invitations`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrganizationInvitation),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsCancelInvitation": (org, invitationId, options) => HttpClientRequest.del(`/orgs/${org}/invitations/${invitationId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsListInvitationTeams": (org, invitationId, options) => HttpClientRequest.get(`/orgs/${org}/invitations/${invitationId}/teams`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListInvitationTeams200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsListIssueTypes": (org, options) => HttpClientRequest.get(`/orgs/${org}/issue-types`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListIssueTypes200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsCreateIssueType": (org, options) => HttpClientRequest.post(`/orgs/${org}/issue-types`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IssueType),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "orgsUpdateIssueType": (org, issueTypeId, options) => HttpClientRequest.put(`/orgs/${org}/issue-types/${issueTypeId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IssueType),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "orgsDeleteIssueType": (org, issueTypeId, options) => HttpClientRequest.del(`/orgs/${org}/issue-types/${issueTypeId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "issuesListForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/issues`).pipe(
    HttpClientRequest.setUrlParams({ "filter": options?.["filter"] as any, "state": options?.["state"] as any, "labels": options?.["labels"] as any, "type": options?.["type"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IssuesListForOrg200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsListMembers": (org, options) => HttpClientRequest.get(`/orgs/${org}/members`).pipe(
    HttpClientRequest.setUrlParams({ "filter": options?.["filter"] as any, "role": options?.["role"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListMembers200),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsCheckMembershipForUser": (org, username, options) => HttpClientRequest.get(`/orgs/${org}/members/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "302": () => Effect.void,
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsRemoveMember": (org, username, options) => HttpClientRequest.del(`/orgs/${org}/members/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesGetCodespacesForUserInOrg": (org, username, options) => HttpClientRequest.get(`/orgs/${org}/members/${username}/codespaces`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesGetCodespacesForUserInOrg200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesDeleteFromOrganization": (org, username, codespaceName, options) => HttpClientRequest.del(`/orgs/${org}/members/${username}/codespaces/${codespaceName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesDeleteFromOrganization202),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesStopInOrganization": (org, username, codespaceName, options) => HttpClientRequest.post(`/orgs/${org}/members/${username}/codespaces/${codespaceName}/stop`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Codespace),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "copilotGetCopilotSeatDetailsForUser": (org, username, options) => HttpClientRequest.get(`/orgs/${org}/members/${username}/copilot`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CopilotSeatDetails),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsGetMembershipForUser": (org, username, options) => HttpClientRequest.get(`/orgs/${org}/memberships/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgMembership),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsSetMembershipForUser": (org, username, options) => HttpClientRequest.put(`/orgs/${org}/memberships/${username}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgMembership),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsRemoveMembershipForUser": (org, username, options) => HttpClientRequest.del(`/orgs/${org}/memberships/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "migrationsListForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/migrations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "exclude": options?.["exclude"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(MigrationsListForOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "migrationsStartForOrg": (org, options) => HttpClientRequest.post(`/orgs/${org}/migrations`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Migration),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "migrationsGetStatusForOrg": (org, migrationId, options) => HttpClientRequest.get(`/orgs/${org}/migrations/${migrationId}`).pipe(
    HttpClientRequest.setUrlParams({ "exclude": options?.["exclude"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Migration),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "migrationsDownloadArchiveForOrg": (org, migrationId, options) => HttpClientRequest.get(`/orgs/${org}/migrations/${migrationId}/archive`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "302": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "migrationsDeleteArchiveForOrg": (org, migrationId, options) => HttpClientRequest.del(`/orgs/${org}/migrations/${migrationId}/archive`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "migrationsUnlockRepoForOrg": (org, migrationId, repoName, options) => HttpClientRequest.del(`/orgs/${org}/migrations/${migrationId}/repos/${repoName}/lock`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "migrationsListReposForOrg": (org, migrationId, options) => HttpClientRequest.get(`/orgs/${org}/migrations/${migrationId}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(MigrationsListReposForOrg200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsListOrgRoles": (org, options) => HttpClientRequest.get(`/orgs/${org}/organization-roles`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListOrgRoles200),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsRevokeAllOrgRolesTeam": (org, teamSlug, options) => HttpClientRequest.del(`/orgs/${org}/organization-roles/teams/${teamSlug}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsAssignTeamToOrgRole": (org, teamSlug, roleId, options) => HttpClientRequest.put(`/orgs/${org}/organization-roles/teams/${teamSlug}/${roleId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "404": () => Effect.void,
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsRevokeOrgRoleTeam": (org, teamSlug, roleId, options) => HttpClientRequest.del(`/orgs/${org}/organization-roles/teams/${teamSlug}/${roleId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsRevokeAllOrgRolesUser": (org, username, options) => HttpClientRequest.del(`/orgs/${org}/organization-roles/users/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsAssignUserToOrgRole": (org, username, roleId, options) => HttpClientRequest.put(`/orgs/${org}/organization-roles/users/${username}/${roleId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "404": () => Effect.void,
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsRevokeOrgRoleUser": (org, username, roleId, options) => HttpClientRequest.del(`/orgs/${org}/organization-roles/users/${username}/${roleId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsGetOrgRole": (org, roleId, options) => HttpClientRequest.get(`/orgs/${org}/organization-roles/${roleId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrganizationRole),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsListOrgRoleTeams": (org, roleId, options) => HttpClientRequest.get(`/orgs/${org}/organization-roles/${roleId}/teams`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListOrgRoleTeams200),
      "404": () => Effect.void,
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsListOrgRoleUsers": (org, roleId, options) => HttpClientRequest.get(`/orgs/${org}/organization-roles/${roleId}/users`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListOrgRoleUsers200),
      "404": () => Effect.void,
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsListOutsideCollaborators": (org, options) => HttpClientRequest.get(`/orgs/${org}/outside_collaborators`).pipe(
    HttpClientRequest.setUrlParams({ "filter": options?.["filter"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListOutsideCollaborators200),
      orElse: unexpectedStatus
    }))
  ),
  "orgsConvertMemberToOutsideCollaborator": (org, username, options) => HttpClientRequest.put(`/orgs/${org}/outside_collaborators/${username}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsConvertMemberToOutsideCollaborator202),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "403": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsRemoveOutsideCollaborator": (org, username, options) => HttpClientRequest.del(`/orgs/${org}/outside_collaborators/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "422": decodeError("OrgsRemoveOutsideCollaborator422", OrgsRemoveOutsideCollaborator422),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "packagesListPackagesForOrganization": (org, options) => HttpClientRequest.get(`/orgs/${org}/packages`).pipe(
    HttpClientRequest.setUrlParams({ "package_type": options?.["package_type"] as any, "visibility": options?.["visibility"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PackagesListPackagesForOrganization200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "400": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "packagesGetPackageForOrganization": (org, packageType, packageName, options) => HttpClientRequest.get(`/orgs/${org}/packages/${packageType}/${packageName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Package),
      orElse: unexpectedStatus
    }))
  ),
  "packagesDeletePackageForOrg": (org, packageType, packageName, options) => HttpClientRequest.del(`/orgs/${org}/packages/${packageType}/${packageName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "packagesRestorePackageForOrg": (org, packageType, packageName, options) => HttpClientRequest.post(`/orgs/${org}/packages/${packageType}/${packageName}/restore`).pipe(
    HttpClientRequest.setUrlParams({ "token": options?.["token"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "packagesGetAllPackageVersionsForPackageOwnedByOrg": (org, packageType, packageName, options) => HttpClientRequest.get(`/orgs/${org}/packages/${packageType}/${packageName}/versions`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "state": options?.["state"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PackagesGetAllPackageVersionsForPackageOwnedByOrg200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "packagesGetPackageVersionForOrganization": (org, packageType, packageName, packageVersionId, options) => HttpClientRequest.get(`/orgs/${org}/packages/${packageType}/${packageName}/versions/${packageVersionId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PackageVersion),
      orElse: unexpectedStatus
    }))
  ),
  "packagesDeletePackageVersionForOrg": (org, packageType, packageName, packageVersionId, options) => HttpClientRequest.del(`/orgs/${org}/packages/${packageType}/${packageName}/versions/${packageVersionId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "packagesRestorePackageVersionForOrg": (org, packageType, packageName, packageVersionId, options) => HttpClientRequest.post(`/orgs/${org}/packages/${packageType}/${packageName}/versions/${packageVersionId}/restore`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsListPatGrantRequests": (org, options) => HttpClientRequest.get(`/orgs/${org}/personal-access-token-requests`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "owner": options?.["owner"] as any, "repository": options?.["repository"] as any, "permission": options?.["permission"] as any, "last_used_before": options?.["last_used_before"] as any, "last_used_after": options?.["last_used_after"] as any, "token_id": options?.["token_id"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListPatGrantRequests200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsReviewPatGrantRequestsInBulk": (org, options) => HttpClientRequest.post(`/orgs/${org}/personal-access-token-requests`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsReviewPatGrantRequestsInBulk202),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsReviewPatGrantRequest": (org, patRequestId, options) => HttpClientRequest.post(`/orgs/${org}/personal-access-token-requests/${patRequestId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "500": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsListPatGrantRequestRepositories": (org, patRequestId, options) => HttpClientRequest.get(`/orgs/${org}/personal-access-token-requests/${patRequestId}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListPatGrantRequestRepositories200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsListPatGrants": (org, options) => HttpClientRequest.get(`/orgs/${org}/personal-access-tokens`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "owner": options?.["owner"] as any, "repository": options?.["repository"] as any, "permission": options?.["permission"] as any, "last_used_before": options?.["last_used_before"] as any, "last_used_after": options?.["last_used_after"] as any, "token_id": options?.["token_id"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListPatGrants200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsUpdatePatAccesses": (org, options) => HttpClientRequest.post(`/orgs/${org}/personal-access-tokens`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsUpdatePatAccesses202),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsUpdatePatAccess": (org, patId, options) => HttpClientRequest.post(`/orgs/${org}/personal-access-tokens/${patId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "500": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsListPatGrantRepositories": (org, patId, options) => HttpClientRequest.get(`/orgs/${org}/personal-access-tokens/${patId}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListPatGrantRepositories200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "privateRegistriesListOrgPrivateRegistries": (org, options) => HttpClientRequest.get(`/orgs/${org}/private-registries`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PrivateRegistriesListOrgPrivateRegistries200),
      "400": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "privateRegistriesCreateOrgPrivateRegistry": (org, options) => HttpClientRequest.post(`/orgs/${org}/private-registries`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgPrivateRegistryConfigurationWithSelectedRepositories),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "privateRegistriesGetOrgPublicKey": (org, options) => HttpClientRequest.get(`/orgs/${org}/private-registries/public-key`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PrivateRegistriesGetOrgPublicKey200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "privateRegistriesGetOrgPrivateRegistry": (org, secretName, options) => HttpClientRequest.get(`/orgs/${org}/private-registries/${secretName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgPrivateRegistryConfiguration),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "privateRegistriesDeleteOrgPrivateRegistry": (org, secretName, options) => HttpClientRequest.del(`/orgs/${org}/private-registries/${secretName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "400": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "privateRegistriesUpdateOrgPrivateRegistry": (org, secretName, options) => HttpClientRequest.patch(`/orgs/${org}/private-registries/${secretName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicListForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectsClassicListForOrg200),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicCreateForOrg": (org, options) => HttpClientRequest.post(`/orgs/${org}/projects`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "orgsGetAllCustomProperties": (org, options) => HttpClientRequest.get(`/orgs/${org}/properties/schema`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsGetAllCustomProperties200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsCreateOrUpdateCustomProperties": (org, options) => HttpClientRequest.patch(`/orgs/${org}/properties/schema`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsCreateOrUpdateCustomProperties200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsGetCustomProperty": (org, customPropertyName, options) => HttpClientRequest.get(`/orgs/${org}/properties/schema/${customPropertyName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CustomProperty),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsCreateOrUpdateCustomProperty": (org, customPropertyName, options) => HttpClientRequest.put(`/orgs/${org}/properties/schema/${customPropertyName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CustomProperty),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsRemoveCustomProperty": (org, customPropertyName, options) => HttpClientRequest.del(`/orgs/${org}/properties/schema/${customPropertyName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsListCustomPropertiesValuesForRepos": (org, options) => HttpClientRequest.get(`/orgs/${org}/properties/values`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "repository_query": options?.["repository_query"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListCustomPropertiesValuesForRepos200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsCreateOrUpdateCustomPropertiesValuesForRepos": (org, options) => HttpClientRequest.patch(`/orgs/${org}/properties/values`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsListPublicMembers": (org, options) => HttpClientRequest.get(`/orgs/${org}/public_members`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListPublicMembers200),
      orElse: unexpectedStatus
    }))
  ),
  "orgsCheckPublicMembershipForUser": (org, username, options) => HttpClientRequest.get(`/orgs/${org}/public_members/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsSetPublicMembershipForAuthenticatedUser": (org, username, options) => HttpClientRequest.put(`/orgs/${org}/public_members/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsRemovePublicMembershipForAuthenticatedUser": (org, username, options) => HttpClientRequest.del(`/orgs/${org}/public_members/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposListForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/repos`).pipe(
    HttpClientRequest.setUrlParams({ "type": options?.["type"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListForOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateInOrg": (org, options) => HttpClientRequest.post(`/orgs/${org}/repos`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FullRepository),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetOrgRulesets": (org, options) => HttpClientRequest.get(`/orgs/${org}/rulesets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "targets": options?.["targets"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposGetOrgRulesets200),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateOrgRuleset": (org, options) => HttpClientRequest.post(`/orgs/${org}/rulesets`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RepositoryRuleset),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetOrgRuleSuites": (org, options) => HttpClientRequest.get(`/orgs/${org}/rulesets/rule-suites`).pipe(
    HttpClientRequest.setUrlParams({ "ref": options?.["ref"] as any, "repository_name": options?.["repository_name"] as any, "time_period": options?.["time_period"] as any, "actor_name": options?.["actor_name"] as any, "rule_suite_result": options?.["rule_suite_result"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RuleSuites),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetOrgRuleSuite": (org, ruleSuiteId, options) => HttpClientRequest.get(`/orgs/${org}/rulesets/rule-suites/${ruleSuiteId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RuleSuite),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetOrgRuleset": (org, rulesetId, options) => HttpClientRequest.get(`/orgs/${org}/rulesets/${rulesetId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RepositoryRuleset),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposUpdateOrgRuleset": (org, rulesetId, options) => HttpClientRequest.put(`/orgs/${org}/rulesets/${rulesetId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RepositoryRuleset),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposDeleteOrgRuleset": (org, rulesetId, options) => HttpClientRequest.del(`/orgs/${org}/rulesets/${rulesetId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsGetOrgRulesetHistory": (org, rulesetId, options) => HttpClientRequest.get(`/orgs/${org}/rulesets/${rulesetId}/history`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsGetOrgRulesetHistory200),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsGetOrgRulesetVersion": (org, rulesetId, versionId, options) => HttpClientRequest.get(`/orgs/${org}/rulesets/${rulesetId}/history/${versionId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RulesetVersionWithState),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "secretScanningListAlertsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/secret-scanning/alerts`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "secret_type": options?.["secret_type"] as any, "resolution": options?.["resolution"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "validity": options?.["validity"] as any, "is_publicly_leaked": options?.["is_publicly_leaked"] as any, "is_multi_repo": options?.["is_multi_repo"] as any, "hide_secret": options?.["hide_secret"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SecretScanningListAlertsForOrg200),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("SecretScanningListAlertsForOrg503", SecretScanningListAlertsForOrg503),
      orElse: unexpectedStatus
    }))
  ),
  "secretScanningListOrgPatternConfigs": (org, options) => HttpClientRequest.get(`/orgs/${org}/secret-scanning/pattern-configurations`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SecretScanningPatternConfiguration),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "secretScanningUpdateOrgPatternConfigs": (org, options) => HttpClientRequest.patch(`/orgs/${org}/secret-scanning/pattern-configurations`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SecretScanningUpdateOrgPatternConfigs200),
      "400": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "securityAdvisoriesListOrgRepositoryAdvisories": (org, options) => HttpClientRequest.get(`/orgs/${org}/security-advisories`).pipe(
    HttpClientRequest.setUrlParams({ "direction": options?.["direction"] as any, "sort": options?.["sort"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "per_page": options?.["per_page"] as any, "state": options?.["state"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SecurityAdvisoriesListOrgRepositoryAdvisories200),
      "400": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsListSecurityManagerTeams": (org, options) => HttpClientRequest.get(`/orgs/${org}/security-managers`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListSecurityManagerTeams200),
      orElse: unexpectedStatus
    }))
  ),
  "orgsAddSecurityManagerTeam": (org, teamSlug, options) => HttpClientRequest.put(`/orgs/${org}/security-managers/teams/${teamSlug}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsRemoveSecurityManagerTeam": (org, teamSlug, options) => HttpClientRequest.del(`/orgs/${org}/security-managers/teams/${teamSlug}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "billingGetGithubActionsBillingOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/settings/billing/actions`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsBillingUsage),
      orElse: unexpectedStatus
    }))
  ),
  "billingGetGithubPackagesBillingOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/settings/billing/packages`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PackagesBillingUsage),
      orElse: unexpectedStatus
    }))
  ),
  "billingGetSharedStorageBillingOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/settings/billing/shared-storage`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CombinedBillingUsage),
      orElse: unexpectedStatus
    }))
  ),
  "hostedComputeListNetworkConfigurationsForOrg": (org, options) => HttpClientRequest.get(`/orgs/${org}/settings/network-configurations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(HostedComputeListNetworkConfigurationsForOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "hostedComputeCreateNetworkConfigurationForOrg": (org, options) => HttpClientRequest.post(`/orgs/${org}/settings/network-configurations`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NetworkConfiguration),
      orElse: unexpectedStatus
    }))
  ),
  "hostedComputeGetNetworkConfigurationForOrg": (org, networkConfigurationId, options) => HttpClientRequest.get(`/orgs/${org}/settings/network-configurations/${networkConfigurationId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NetworkConfiguration),
      orElse: unexpectedStatus
    }))
  ),
  "hostedComputeDeleteNetworkConfigurationFromOrg": (org, networkConfigurationId, options) => HttpClientRequest.del(`/orgs/${org}/settings/network-configurations/${networkConfigurationId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "hostedComputeUpdateNetworkConfigurationForOrg": (org, networkConfigurationId, options) => HttpClientRequest.patch(`/orgs/${org}/settings/network-configurations/${networkConfigurationId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NetworkConfiguration),
      orElse: unexpectedStatus
    }))
  ),
  "hostedComputeGetNetworkSettingsForOrg": (org, networkSettingsId, options) => HttpClientRequest.get(`/orgs/${org}/settings/network-settings/${networkSettingsId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(NetworkSettings),
      orElse: unexpectedStatus
    }))
  ),
  "copilotCopilotMetricsForTeam": (org, teamSlug, options) => HttpClientRequest.get(`/orgs/${org}/team/${teamSlug}/copilot/metrics`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any, "until": options?.["until"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CopilotCopilotMetricsForTeam200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "teamsList": (org, options) => HttpClientRequest.get(`/orgs/${org}/teams`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamsList200),
      "403": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "teamsCreate": (org, options) => HttpClientRequest.post(`/orgs/${org}/teams`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamFull),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "teamsGetByName": (org, teamSlug, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamFull),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "teamsDeleteInOrg": (org, teamSlug, options) => HttpClientRequest.del(`/orgs/${org}/teams/${teamSlug}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsUpdateInOrg": (org, teamSlug, options) => HttpClientRequest.patch(`/orgs/${org}/teams/${teamSlug}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(TeamFull),
      "201": decodeSuccess(TeamFull),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "teamsListDiscussionsInOrg": (org, teamSlug, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/discussions`).pipe(
    HttpClientRequest.setUrlParams({ "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "pinned": options?.["pinned"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamsListDiscussionsInOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "teamsCreateDiscussionInOrg": (org, teamSlug, options) => HttpClientRequest.post(`/orgs/${org}/teams/${teamSlug}/discussions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamDiscussion),
      orElse: unexpectedStatus
    }))
  ),
  "teamsGetDiscussionInOrg": (org, teamSlug, discussionNumber, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamDiscussion),
      orElse: unexpectedStatus
    }))
  ),
  "teamsDeleteDiscussionInOrg": (org, teamSlug, discussionNumber, options) => HttpClientRequest.del(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsUpdateDiscussionInOrg": (org, teamSlug, discussionNumber, options) => HttpClientRequest.patch(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamDiscussion),
      orElse: unexpectedStatus
    }))
  ),
  "teamsListDiscussionCommentsInOrg": (org, teamSlug, discussionNumber, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments`).pipe(
    HttpClientRequest.setUrlParams({ "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamsListDiscussionCommentsInOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "teamsCreateDiscussionCommentInOrg": (org, teamSlug, discussionNumber, options) => HttpClientRequest.post(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamDiscussionComment),
      orElse: unexpectedStatus
    }))
  ),
  "teamsGetDiscussionCommentInOrg": (org, teamSlug, discussionNumber, commentNumber, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamDiscussionComment),
      orElse: unexpectedStatus
    }))
  ),
  "teamsDeleteDiscussionCommentInOrg": (org, teamSlug, discussionNumber, commentNumber, options) => HttpClientRequest.del(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsUpdateDiscussionCommentInOrg": (org, teamSlug, discussionNumber, commentNumber, options) => HttpClientRequest.patch(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamDiscussionComment),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsListForTeamDiscussionCommentInOrg": (org, teamSlug, discussionNumber, commentNumber, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}/reactions`).pipe(
    HttpClientRequest.setUrlParams({ "content": options?.["content"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReactionsListForTeamDiscussionCommentInOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsCreateForTeamDiscussionCommentInOrg": (org, teamSlug, discussionNumber, commentNumber, options) => HttpClientRequest.post(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}/reactions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(Reaction),
      "201": decodeSuccess(Reaction),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsDeleteForTeamDiscussionComment": (org, teamSlug, discussionNumber, commentNumber, reactionId, options) => HttpClientRequest.del(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/comments/${commentNumber}/reactions/${reactionId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reactionsListForTeamDiscussionInOrg": (org, teamSlug, discussionNumber, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/reactions`).pipe(
    HttpClientRequest.setUrlParams({ "content": options?.["content"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReactionsListForTeamDiscussionInOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsCreateForTeamDiscussionInOrg": (org, teamSlug, discussionNumber, options) => HttpClientRequest.post(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/reactions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(Reaction),
      "201": decodeSuccess(Reaction),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsDeleteForTeamDiscussion": (org, teamSlug, discussionNumber, reactionId, options) => HttpClientRequest.del(`/orgs/${org}/teams/${teamSlug}/discussions/${discussionNumber}/reactions/${reactionId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsListPendingInvitationsInOrg": (org, teamSlug, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/invitations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamsListPendingInvitationsInOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "teamsListMembersInOrg": (org, teamSlug, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/members`).pipe(
    HttpClientRequest.setUrlParams({ "role": options?.["role"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamsListMembersInOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "teamsGetMembershipForUserInOrg": (org, teamSlug, username, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/memberships/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamMembership),
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsAddOrUpdateMembershipForUserInOrg": (org, teamSlug, username, options) => HttpClientRequest.put(`/orgs/${org}/teams/${teamSlug}/memberships/${username}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamMembership),
      "403": () => Effect.void,
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsRemoveMembershipForUserInOrg": (org, teamSlug, username, options) => HttpClientRequest.del(`/orgs/${org}/teams/${teamSlug}/memberships/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "403": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsListProjectsInOrg": (org, teamSlug, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamsListProjectsInOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "teamsCheckPermissionsForProjectInOrg": (org, teamSlug, projectId, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/projects/${projectId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamProject),
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsAddOrUpdateProjectPermissionsInOrg": (org, teamSlug, projectId, options) => HttpClientRequest.put(`/orgs/${org}/teams/${teamSlug}/projects/${projectId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("TeamsAddOrUpdateProjectPermissionsInOrg403", TeamsAddOrUpdateProjectPermissionsInOrg403),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsRemoveProjectInOrg": (org, teamSlug, projectId, options) => HttpClientRequest.del(`/orgs/${org}/teams/${teamSlug}/projects/${projectId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsListReposInOrg": (org, teamSlug, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/repos`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamsListReposInOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "teamsCheckPermissionsForRepoInOrg": (org, teamSlug, owner, repo, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/repos/${owner}/${repo}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamRepository),
      "204": () => Effect.void,
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsAddOrUpdateRepoPermissionsInOrg": (org, teamSlug, owner, repo, options) => HttpClientRequest.put(`/orgs/${org}/teams/${teamSlug}/repos/${owner}/${repo}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsRemoveRepoInOrg": (org, teamSlug, owner, repo, options) => HttpClientRequest.del(`/orgs/${org}/teams/${teamSlug}/repos/${owner}/${repo}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsListChildInOrg": (org, teamSlug, options) => HttpClientRequest.get(`/orgs/${org}/teams/${teamSlug}/teams`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamsListChildInOrg200),
      orElse: unexpectedStatus
    }))
  ),
  "orgsEnableOrDisableSecurityProductOnAllOrgRepos": (org, securityProduct, enablement, options) => HttpClientRequest.post(`/orgs/${org}/${securityProduct}/${enablement}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicGetCard": (cardId, options) => HttpClientRequest.get(`/projects/columns/cards/${cardId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectCard),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicDeleteCard": (cardId, options) => HttpClientRequest.del(`/projects/columns/cards/${cardId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("ProjectsClassicDeleteCard403", ProjectsClassicDeleteCard403),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicUpdateCard": (cardId, options) => HttpClientRequest.patch(`/projects/columns/cards/${cardId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectCard),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicMoveCard": (cardId, options) => HttpClientRequest.post(`/projects/columns/cards/${cardId}/moves`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectsClassicMoveCard201),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("ProjectsClassicMoveCard403", ProjectsClassicMoveCard403),
      "422": decodeError("ValidationError", ValidationError),
      "503": decodeError("ProjectsClassicMoveCard503", ProjectsClassicMoveCard503),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicGetColumn": (columnId, options) => HttpClientRequest.get(`/projects/columns/${columnId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectColumn),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicDeleteColumn": (columnId, options) => HttpClientRequest.del(`/projects/columns/${columnId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicUpdateColumn": (columnId, options) => HttpClientRequest.patch(`/projects/columns/${columnId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectColumn),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicListCards": (columnId, options) => HttpClientRequest.get(`/projects/columns/${columnId}/cards`).pipe(
    HttpClientRequest.setUrlParams({ "archived_state": options?.["archived_state"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectsClassicListCards200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicCreateCard": (columnId, options) => HttpClientRequest.post(`/projects/columns/${columnId}/cards`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectCard),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ProjectsClassicCreateCard422", ProjectsClassicCreateCard422),
      "503": decodeError("ProjectsClassicCreateCard503", ProjectsClassicCreateCard503),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicMoveColumn": (columnId, options) => HttpClientRequest.post(`/projects/columns/${columnId}/moves`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectsClassicMoveColumn201),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicGet": (projectId, options) => HttpClientRequest.get(`/projects/${projectId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicDelete": (projectId, options) => HttpClientRequest.del(`/projects/${projectId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("ProjectsClassicDelete403", ProjectsClassicDelete403),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicUpdate": (projectId, options) => HttpClientRequest.patch(`/projects/${projectId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("ProjectsClassicUpdate403", ProjectsClassicUpdate403),
      "410": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      "304": () => Effect.void,
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicListCollaborators": (projectId, options) => HttpClientRequest.get(`/projects/${projectId}/collaborators`).pipe(
    HttpClientRequest.setUrlParams({ "affiliation": options?.["affiliation"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectsClassicListCollaborators200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicAddCollaborator": (projectId, username, options) => HttpClientRequest.put(`/projects/${projectId}/collaborators/${username}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicRemoveCollaborator": (projectId, username, options) => HttpClientRequest.del(`/projects/${projectId}/collaborators/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicGetPermissionForUser": (projectId, username, options) => HttpClientRequest.get(`/projects/${projectId}/collaborators/${username}/permission`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectCollaboratorPermission),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicListColumns": (projectId, options) => HttpClientRequest.get(`/projects/${projectId}/columns`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectsClassicListColumns200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicCreateColumn": (projectId, options) => HttpClientRequest.post(`/projects/${projectId}/columns`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectColumn),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "rateLimitGet": () => HttpClientRequest.get(`/rate_limit`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RateLimitOverview),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposGet": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(FullRepository),
      "301": decodeSuccess(BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposDelete": (owner, repo, options) => HttpClientRequest.del(`/repos/${owner}/${repo}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "307": decodeSuccess(BasicError),
      "403": decodeError("ReposDelete403", ReposDelete403),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposUpdate": (owner, repo, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(FullRepository),
      "307": decodeSuccess(BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsListArtifactsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/artifacts`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "name": options?.["name"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListArtifactsForRepo200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetArtifact": (owner, repo, artifactId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/artifacts/${artifactId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Artifact),
      orElse: unexpectedStatus
    }))
  ),
  "actionsDeleteArtifact": (owner, repo, artifactId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/artifacts/${artifactId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsDownloadArtifact": (owner, repo, artifactId, archiveFormat, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/artifacts/${artifactId}/${archiveFormat}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "410": decodeError("BasicError", BasicError),
      "302": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetActionsCacheUsage": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/cache/usage`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsCacheUsageByRepository),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetActionsCacheList": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/caches`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "ref": options?.["ref"] as any, "key": options?.["key"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsCacheList),
      orElse: unexpectedStatus
    }))
  ),
  "actionsDeleteActionsCacheByKey": (owner, repo, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/caches`).pipe(
    HttpClientRequest.setUrlParams({ "key": options?.["key"] as any, "ref": options?.["ref"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsCacheList),
      orElse: unexpectedStatus
    }))
  ),
  "actionsDeleteActionsCacheById": (owner, repo, cacheId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/caches/${cacheId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetJobForWorkflowRun": (owner, repo, jobId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/jobs/${jobId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Job),
      orElse: unexpectedStatus
    }))
  ),
  "actionsDownloadJobLogsForWorkflowRun": (owner, repo, jobId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/jobs/${jobId}/logs`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "302": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsReRunJobForWorkflowRun": (owner, repo, jobId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/jobs/${jobId}/rerun`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      "403": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetCustomOidcSubClaimForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/oidc/customization/sub`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OidcCustomSubRepo),
      "400": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetCustomOidcSubClaimForRepo": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/oidc/customization/sub`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      "400": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "actionsListRepoOrganizationSecrets": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/organization-secrets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListRepoOrganizationSecrets200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsListRepoOrganizationVariables": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/organization-variables`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListRepoOrganizationVariables200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetGithubActionsPermissionsRepository": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/permissions`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsRepositoryPermissions),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetGithubActionsPermissionsRepository": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/permissions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetWorkflowAccessToRepository": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/permissions/access`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsWorkflowAccessToRepository),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetWorkflowAccessToRepository": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/permissions/access`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetArtifactAndLogRetentionSettingsRepository": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/permissions/artifact-and-log-retention`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsArtifactAndLogRetentionResponse),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetArtifactAndLogRetentionSettingsRepository": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/permissions/artifact-and-log-retention`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetForkPrContributorApprovalPermissionsRepository": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/permissions/fork-pr-contributor-approval`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsForkPrContributorApproval),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetForkPrContributorApprovalPermissionsRepository": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/permissions/fork-pr-contributor-approval`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetPrivateRepoForkPrWorkflowsSettingsRepository": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/permissions/fork-pr-workflows-private-repos`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsForkPrWorkflowsPrivateRepos),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetPrivateRepoForkPrWorkflowsSettingsRepository": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/permissions/fork-pr-workflows-private-repos`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetAllowedActionsRepository": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/permissions/selected-actions`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SelectedActions),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetAllowedActionsRepository": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/permissions/selected-actions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetGithubActionsDefaultWorkflowPermissionsRepository": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/permissions/workflow`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsGetDefaultWorkflowPermissions),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetGithubActionsDefaultWorkflowPermissionsRepository": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/permissions/workflow`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "409": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsListSelfHostedRunnersForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runners`).pipe(
    HttpClientRequest.setUrlParams({ "name": options?.["name"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListSelfHostedRunnersForRepo200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsListRunnerApplicationsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runners/downloads`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListRunnerApplicationsForRepo200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGenerateRunnerJitconfigForRepo": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runners/generate-jitconfig`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsGenerateRunnerJitconfigForRepo201),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "actionsCreateRegistrationTokenForRepo": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runners/registration-token`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AuthenticationToken),
      orElse: unexpectedStatus
    }))
  ),
  "actionsCreateRemoveTokenForRepo": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runners/remove-token`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AuthenticationToken),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetSelfHostedRunnerForRepo": (owner, repo, runnerId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runners/${runnerId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Runner),
      orElse: unexpectedStatus
    }))
  ),
  "actionsDeleteSelfHostedRunnerFromRepo": (owner, repo, runnerId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/runners/${runnerId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsListLabelsForSelfHostedRunnerForRepo": (owner, repo, runnerId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runners/${runnerId}/labels`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListLabelsForSelfHostedRunnerForRepo200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsSetCustomLabelsForSelfHostedRunnerForRepo": (owner, repo, runnerId, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/runners/${runnerId}/labels`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsSetCustomLabelsForSelfHostedRunnerForRepo200),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "actionsAddCustomLabelsToSelfHostedRunnerForRepo": (owner, repo, runnerId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runners/${runnerId}/labels`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsAddCustomLabelsToSelfHostedRunnerForRepo200),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo": (owner, repo, runnerId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/runners/${runnerId}/labels`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsRemoveCustomLabelFromSelfHostedRunnerForRepo": (owner, repo, runnerId, name, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/runners/${runnerId}/labels/${name}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsRemoveCustomLabelFromSelfHostedRunnerForRepo200),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "actionsListWorkflowRunsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs`).pipe(
    HttpClientRequest.setUrlParams({ "actor": options?.["actor"] as any, "branch": options?.["branch"] as any, "event": options?.["event"] as any, "status": options?.["status"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "created": options?.["created"] as any, "exclude_pull_requests": options?.["exclude_pull_requests"] as any, "check_suite_id": options?.["check_suite_id"] as any, "head_sha": options?.["head_sha"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListWorkflowRunsForRepo200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetWorkflowRun": (owner, repo, runId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}`).pipe(
    HttpClientRequest.setUrlParams({ "exclude_pull_requests": options?.["exclude_pull_requests"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(WorkflowRun),
      orElse: unexpectedStatus
    }))
  ),
  "actionsDeleteWorkflowRun": (owner, repo, runId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/runs/${runId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetReviewsForRun": (owner, repo, runId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}/approvals`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsGetReviewsForRun200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsApproveWorkflowRun": (owner, repo, runId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runs/${runId}/approve`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsListWorkflowRunArtifacts": (owner, repo, runId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}/artifacts`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "name": options?.["name"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListWorkflowRunArtifacts200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetWorkflowRunAttempt": (owner, repo, runId, attemptNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}/attempts/${attemptNumber}`).pipe(
    HttpClientRequest.setUrlParams({ "exclude_pull_requests": options?.["exclude_pull_requests"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(WorkflowRun),
      orElse: unexpectedStatus
    }))
  ),
  "actionsListJobsForWorkflowRunAttempt": (owner, repo, runId, attemptNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}/attempts/${attemptNumber}/jobs`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListJobsForWorkflowRunAttempt200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsDownloadWorkflowRunAttemptLogs": (owner, repo, runId, attemptNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}/attempts/${attemptNumber}/logs`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "302": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsCancelWorkflowRun": (owner, repo, runId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runs/${runId}/cancel`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      "409": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsReviewCustomGatesForRun": (owner, repo, runId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runs/${runId}/deployment_protection_rule`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsForceCancelWorkflowRun": (owner, repo, runId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runs/${runId}/force-cancel`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      "409": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "actionsListJobsForWorkflowRun": (owner, repo, runId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}/jobs`).pipe(
    HttpClientRequest.setUrlParams({ "filter": options?.["filter"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListJobsForWorkflowRun200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsDownloadWorkflowRunLogs": (owner, repo, runId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}/logs`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "302": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsDeleteWorkflowRunLogs": (owner, repo, runId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/runs/${runId}/logs`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetPendingDeploymentsForRun": (owner, repo, runId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}/pending_deployments`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsGetPendingDeploymentsForRun200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsReviewPendingDeploymentsForRun": (owner, repo, runId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runs/${runId}/pending_deployments`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsReviewPendingDeploymentsForRun200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsReRunWorkflow": (owner, repo, runId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runs/${runId}/rerun`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      orElse: unexpectedStatus
    }))
  ),
  "actionsReRunWorkflowFailedJobs": (owner, repo, runId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/runs/${runId}/rerun-failed-jobs`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetWorkflowRunUsage": (owner, repo, runId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/runs/${runId}/timing`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(WorkflowRunUsage),
      orElse: unexpectedStatus
    }))
  ),
  "actionsListRepoSecrets": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/secrets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListRepoSecrets200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetRepoPublicKey": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/secrets/public-key`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsPublicKey),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetRepoSecret": (owner, repo, secretName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/secrets/${secretName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsSecret),
      orElse: unexpectedStatus
    }))
  ),
  "actionsCreateOrUpdateRepoSecret": (owner, repo, secretName, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/secrets/${secretName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsDeleteRepoSecret": (owner, repo, secretName, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/secrets/${secretName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsListRepoVariables": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/variables`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListRepoVariables200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsCreateRepoVariable": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/variables`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetRepoVariable": (owner, repo, name, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/variables/${name}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsVariable),
      orElse: unexpectedStatus
    }))
  ),
  "actionsDeleteRepoVariable": (owner, repo, name, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/actions/variables/${name}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsUpdateRepoVariable": (owner, repo, name, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/actions/variables/${name}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsListRepoWorkflows": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/workflows`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListRepoWorkflows200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetWorkflow": (owner, repo, workflowId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/workflows/${workflowId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Workflow),
      orElse: unexpectedStatus
    }))
  ),
  "actionsDisableWorkflow": (owner, repo, workflowId, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/workflows/${workflowId}/disable`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsCreateWorkflowDispatch": (owner, repo, workflowId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/actions/workflows/${workflowId}/dispatches`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsEnableWorkflow": (owner, repo, workflowId, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/actions/workflows/${workflowId}/enable`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsListWorkflowRuns": (owner, repo, workflowId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/workflows/${workflowId}/runs`).pipe(
    HttpClientRequest.setUrlParams({ "actor": options?.["actor"] as any, "branch": options?.["branch"] as any, "event": options?.["event"] as any, "status": options?.["status"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "created": options?.["created"] as any, "exclude_pull_requests": options?.["exclude_pull_requests"] as any, "check_suite_id": options?.["check_suite_id"] as any, "head_sha": options?.["head_sha"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListWorkflowRuns200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetWorkflowUsage": (owner, repo, workflowId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/actions/workflows/${workflowId}/timing`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(WorkflowUsage),
      orElse: unexpectedStatus
    }))
  ),
  "reposListActivities": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/activity`).pipe(
    HttpClientRequest.setUrlParams({ "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "ref": options?.["ref"] as any, "actor": options?.["actor"] as any, "time_period": options?.["time_period"] as any, "activity_type": options?.["activity_type"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListActivities200),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "issuesListAssignees": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/assignees`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IssuesListAssignees200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesCheckUserCanBeAssigned": (owner, repo, assignee, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/assignees/${assignee}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateAttestation": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/attestations`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposCreateAttestation201),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposListAttestations": (owner, repo, subjectDigest, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/attestations/${subjectDigest}`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "predicate_type": options?.["predicate_type"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListAttestations200),
      orElse: unexpectedStatus
    }))
  ),
  "reposListAutolinks": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/autolinks`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListAutolinks200),
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateAutolink": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/autolinks`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Autolink),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetAutolink": (owner, repo, autolinkId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/autolinks/${autolinkId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Autolink),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposDeleteAutolink": (owner, repo, autolinkId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/autolinks/${autolinkId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposCheckAutomatedSecurityFixes": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/automated-security-fixes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CheckAutomatedSecurityFixes),
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposEnableAutomatedSecurityFixes": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/automated-security-fixes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposDisableAutomatedSecurityFixes": (owner, repo, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/automated-security-fixes`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposListBranches": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches`).pipe(
    HttpClientRequest.setUrlParams({ "protected": options?.["protected"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListBranches200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetBranch": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(BranchWithProtection),
      "301": decodeSuccess(BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetBranchProtection": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BranchProtection),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposUpdateBranchProtection": (owner, repo, branch, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/branches/${branch}/protection`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProtectedBranch),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "reposDeleteBranchProtection": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposGetAdminBranchProtection": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection/enforce_admins`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProtectedBranchAdminEnforced),
      orElse: unexpectedStatus
    }))
  ),
  "reposSetAdminBranchProtection": (owner, repo, branch, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/branches/${branch}/protection/enforce_admins`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProtectedBranchAdminEnforced),
      orElse: unexpectedStatus
    }))
  ),
  "reposDeleteAdminBranchProtection": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection/enforce_admins`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposGetPullRequestReviewProtection": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection/required_pull_request_reviews`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProtectedBranchPullRequestReview),
      orElse: unexpectedStatus
    }))
  ),
  "reposDeletePullRequestReviewProtection": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection/required_pull_request_reviews`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposUpdatePullRequestReviewProtection": (owner, repo, branch, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/branches/${branch}/protection/required_pull_request_reviews`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProtectedBranchPullRequestReview),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetCommitSignatureProtection": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection/required_signatures`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProtectedBranchAdminEnforced),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateCommitSignatureProtection": (owner, repo, branch, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/branches/${branch}/protection/required_signatures`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProtectedBranchAdminEnforced),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposDeleteCommitSignatureProtection": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection/required_signatures`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposGetStatusChecksProtection": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(StatusCheckPolicy),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposRemoveStatusCheckProtection": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposUpdateStatusCheckProtection": (owner, repo, branch, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(StatusCheckPolicy),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetAllStatusCheckContexts": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposGetAllStatusCheckContexts200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposSetStatusCheckContexts": (owner, repo, branch, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposSetStatusCheckContexts200),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposAddStatusCheckContexts": (owner, repo, branch, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposAddStatusCheckContexts200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposRemoveStatusCheckContexts": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection/required_status_checks/contexts`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposRemoveStatusCheckContexts200),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BranchRestrictionPolicy),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposDeleteAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposGetAppsWithAccessToProtectedBranch": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposGetAppsWithAccessToProtectedBranch200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposSetAppAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposSetAppAccessRestrictions200),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposAddAppAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposAddAppAccessRestrictions200),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposRemoveAppAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/apps`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposRemoveAppAccessRestrictions200),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetTeamsWithAccessToProtectedBranch": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposGetTeamsWithAccessToProtectedBranch200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposSetTeamAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposSetTeamAccessRestrictions200),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposAddTeamAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposAddTeamAccessRestrictions200),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposRemoveTeamAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/teams`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposRemoveTeamAccessRestrictions200),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetUsersWithAccessToProtectedBranch": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposGetUsersWithAccessToProtectedBranch200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposSetUserAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposSetUserAccessRestrictions200),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposAddUserAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposAddUserAccessRestrictions200),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposRemoveUserAccessRestrictions": (owner, repo, branch, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/branches/${branch}/protection/restrictions/users`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposRemoveUserAccessRestrictions200),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposRenameBranch": (owner, repo, branch, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/branches/${branch}/rename`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BranchWithProtection),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "checksCreate": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/check-runs`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CheckRun),
      orElse: unexpectedStatus
    }))
  ),
  "checksGet": (owner, repo, checkRunId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/check-runs/${checkRunId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CheckRun),
      orElse: unexpectedStatus
    }))
  ),
  "checksUpdate": (owner, repo, checkRunId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/check-runs/${checkRunId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CheckRun),
      orElse: unexpectedStatus
    }))
  ),
  "checksListAnnotations": (owner, repo, checkRunId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/check-runs/${checkRunId}/annotations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChecksListAnnotations200),
      orElse: unexpectedStatus
    }))
  ),
  "checksRerequestRun": (owner, repo, checkRunId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/check-runs/${checkRunId}/rerequest`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "checksCreateSuite": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/check-suites`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(CheckSuite),
      "201": decodeSuccess(CheckSuite),
      orElse: unexpectedStatus
    }))
  ),
  "checksSetSuitesPreferences": (owner, repo, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/check-suites/preferences`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CheckSuitePreference),
      orElse: unexpectedStatus
    }))
  ),
  "checksGetSuite": (owner, repo, checkSuiteId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/check-suites/${checkSuiteId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CheckSuite),
      orElse: unexpectedStatus
    }))
  ),
  "checksListForSuite": (owner, repo, checkSuiteId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/check-suites/${checkSuiteId}/check-runs`).pipe(
    HttpClientRequest.setUrlParams({ "check_name": options?.["check_name"] as any, "status": options?.["status"] as any, "filter": options?.["filter"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChecksListForSuite200),
      orElse: unexpectedStatus
    }))
  ),
  "checksRerequestSuite": (owner, repo, checkSuiteId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/check-suites/${checkSuiteId}/rerequest`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningListAlertsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/alerts`).pipe(
    HttpClientRequest.setUrlParams({ "tool_name": options?.["tool_name"] as any, "tool_guid": options?.["tool_guid"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "ref": options?.["ref"] as any, "pr": options?.["pr"] as any, "direction": options?.["direction"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "sort": options?.["sort"] as any, "state": options?.["state"] as any, "severity": options?.["severity"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeScanningListAlertsForRepo200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningListAlertsForRepo503", CodeScanningListAlertsForRepo503),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningGetAlert": (owner, repo, alertNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeScanningAlert),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningGetAlert503", CodeScanningGetAlert503),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningUpdateAlert": (owner, repo, alertNumber, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeScanningAlert),
      "400": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningUpdateAlert503", CodeScanningUpdateAlert503),
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningGetAutofix": (owner, repo, alertNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/autofix`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeScanningAutofix),
      "400": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningGetAutofix503", CodeScanningGetAutofix503),
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningCreateAutofix": (owner, repo, alertNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/autofix`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(CodeScanningAutofix),
      "202": decodeSuccess(CodeScanningAutofix),
      "400": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningCreateAutofix503", CodeScanningCreateAutofix503),
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningCommitAutofix": (owner, repo, alertNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/autofix/commits`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeScanningAutofixCommitsResponse),
      "400": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningCommitAutofix503", CodeScanningCommitAutofix503),
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningListAlertInstances": (owner, repo, alertNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/alerts/${alertNumber}/instances`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "ref": options?.["ref"] as any, "pr": options?.["pr"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeScanningListAlertInstances200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningListAlertInstances503", CodeScanningListAlertInstances503),
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningListRecentAnalyses": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/analyses`).pipe(
    HttpClientRequest.setUrlParams({ "tool_name": options?.["tool_name"] as any, "tool_guid": options?.["tool_guid"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "pr": options?.["pr"] as any, "ref": options?.["ref"] as any, "sarif_id": options?.["sarif_id"] as any, "direction": options?.["direction"] as any, "sort": options?.["sort"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeScanningListRecentAnalyses200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningListRecentAnalyses503", CodeScanningListRecentAnalyses503),
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningGetAnalysis": (owner, repo, analysisId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/analyses/${analysisId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeScanningAnalysis),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningGetAnalysis503", CodeScanningGetAnalysis503),
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningDeleteAnalysis": (owner, repo, analysisId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/code-scanning/analyses/${analysisId}`).pipe(
    HttpClientRequest.setUrlParams({ "confirm_delete": options?.["confirm_delete"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeScanningAnalysisDeletion),
      "400": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningDeleteAnalysis503", CodeScanningDeleteAnalysis503),
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningListCodeqlDatabases": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/codeql/databases`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeScanningListCodeqlDatabases200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningListCodeqlDatabases503", CodeScanningListCodeqlDatabases503),
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningGetCodeqlDatabase": (owner, repo, language, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/codeql/databases/${language}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeScanningCodeqlDatabase),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningGetCodeqlDatabase503", CodeScanningGetCodeqlDatabase503),
      "302": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningDeleteCodeqlDatabase": (owner, repo, language, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/code-scanning/codeql/databases/${language}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningDeleteCodeqlDatabase503", CodeScanningDeleteCodeqlDatabase503),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningCreateVariantAnalysis": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/code-scanning/codeql/variant-analyses`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeScanningVariantAnalysis),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningCreateVariantAnalysis503", CodeScanningCreateVariantAnalysis503),
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningGetVariantAnalysis": (owner, repo, codeqlVariantAnalysisId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/codeql/variant-analyses/${codeqlVariantAnalysisId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeScanningVariantAnalysis),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningGetVariantAnalysis503", CodeScanningGetVariantAnalysis503),
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningGetVariantAnalysisRepoTask": (owner, repo, codeqlVariantAnalysisId, repoOwner, repoName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/codeql/variant-analyses/${codeqlVariantAnalysisId}/repos/${repoOwner}/${repoName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeScanningVariantAnalysisRepoTask),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningGetVariantAnalysisRepoTask503", CodeScanningGetVariantAnalysisRepoTask503),
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningGetDefaultSetup": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/default-setup`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeScanningDefaultSetup),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningGetDefaultSetup503", CodeScanningGetDefaultSetup503),
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningUpdateDefaultSetup": (owner, repo, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/code-scanning/default-setup`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(EmptyObject),
      "202": decodeSuccess(CodeScanningDefaultSetupUpdateResponse),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningUpdateDefaultSetup503", CodeScanningUpdateDefaultSetup503),
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningUploadSarif": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/code-scanning/sarifs`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeScanningSarifsReceipt),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningUploadSarif503", CodeScanningUploadSarif503),
      "400": () => Effect.void,
      "413": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codeScanningGetSarif": (owner, repo, sarifId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-scanning/sarifs/${sarifId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeScanningSarifsStatus),
      "403": decodeError("BasicError", BasicError),
      "503": decodeError("CodeScanningGetSarif503", CodeScanningGetSarif503),
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codeSecurityGetConfigurationForRepository": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/code-security-configuration`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeSecurityConfigurationForRepository),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposCodeownersErrors": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/codeowners/errors`).pipe(
    HttpClientRequest.setUrlParams({ "ref": options?.["ref"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodeownersErrors),
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesListInRepositoryForAuthenticatedUser": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/codespaces`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesListInRepositoryForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesCreateWithRepoForAuthenticatedUser": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/codespaces`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "201": decodeSuccess(Codespace),
      "202": decodeSuccess(Codespace),
      "400": decodeError("BasicError", BasicError),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodespacesCreateWithRepoForAuthenticatedUser503", CodespacesCreateWithRepoForAuthenticatedUser503),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesListDevcontainersInRepositoryForAuthenticatedUser": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/codespaces/devcontainers`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesListDevcontainersInRepositoryForAuthenticatedUser200),
      "400": decodeError("BasicError", BasicError),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesRepoMachinesForAuthenticatedUser": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/codespaces/machines`).pipe(
    HttpClientRequest.setUrlParams({ "location": options?.["location"] as any, "client_ip": options?.["client_ip"] as any, "ref": options?.["ref"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesRepoMachinesForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesPreFlightWithRepoForAuthenticatedUser": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/codespaces/new`).pipe(
    HttpClientRequest.setUrlParams({ "ref": options?.["ref"] as any, "client_ip": options?.["client_ip"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesPreFlightWithRepoForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesCheckPermissionsForDevcontainer": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/codespaces/permissions_check`).pipe(
    HttpClientRequest.setUrlParams({ "ref": options?.["ref"] as any, "devcontainer_path": options?.["devcontainer_path"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesPermissionsCheckForDevcontainer),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "503": decodeError("CodespacesCheckPermissionsForDevcontainer503", CodespacesCheckPermissionsForDevcontainer503),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesListRepoSecrets": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/codespaces/secrets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesListRepoSecrets200),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesGetRepoPublicKey": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/codespaces/secrets/public-key`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesPublicKey),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesGetRepoSecret": (owner, repo, secretName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/codespaces/secrets/${secretName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RepoCodespacesSecret),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesCreateOrUpdateRepoSecret": (owner, repo, secretName, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/codespaces/secrets/${secretName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesDeleteRepoSecret": (owner, repo, secretName, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/codespaces/secrets/${secretName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposListCollaborators": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/collaborators`).pipe(
    HttpClientRequest.setUrlParams({ "affiliation": options?.["affiliation"] as any, "permission": options?.["permission"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListCollaborators200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposCheckCollaborator": (owner, repo, username, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/collaborators/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposAddCollaborator": (owner, repo, username, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/collaborators/${username}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RepositoryInvitation),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposRemoveCollaborator": (owner, repo, username, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/collaborators/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposGetCollaboratorPermissionLevel": (owner, repo, username, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/collaborators/${username}/permission`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RepositoryCollaboratorPermission),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposListCommitCommentsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/comments`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListCommitCommentsForRepo200),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetCommitComment": (owner, repo, commentId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/comments/${commentId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CommitComment),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposDeleteCommitComment": (owner, repo, commentId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/comments/${commentId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposUpdateCommitComment": (owner, repo, commentId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/comments/${commentId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CommitComment),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsListForCommitComment": (owner, repo, commentId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/comments/${commentId}/reactions`).pipe(
    HttpClientRequest.setUrlParams({ "content": options?.["content"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReactionsListForCommitComment200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsCreateForCommitComment": (owner, repo, commentId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/comments/${commentId}/reactions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(Reaction),
      "201": decodeSuccess(Reaction),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsDeleteForCommitComment": (owner, repo, commentId, reactionId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/comments/${commentId}/reactions/${reactionId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposListCommits": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/commits`).pipe(
    HttpClientRequest.setUrlParams({ "sha": options?.["sha"] as any, "path": options?.["path"] as any, "author": options?.["author"] as any, "committer": options?.["committer"] as any, "since": options?.["since"] as any, "until": options?.["until"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListCommits200),
      "400": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposListBranchesForHeadCommit": (owner, repo, commitSha, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/commits/${commitSha}/branches-where-head`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListBranchesForHeadCommit200),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposListCommentsForCommit": (owner, repo, commitSha, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/commits/${commitSha}/comments`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListCommentsForCommit200),
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateCommitComment": (owner, repo, commitSha, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/commits/${commitSha}/comments`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CommitComment),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposListPullRequestsAssociatedWithCommit": (owner, repo, commitSha, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/commits/${commitSha}/pulls`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListPullRequestsAssociatedWithCommit200),
      "409": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetCommit": (owner, repo, ref, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/commits/${ref}`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Commit),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "500": decodeError("BasicError", BasicError),
      "503": decodeError("ReposGetCommit503", ReposGetCommit503),
      orElse: unexpectedStatus
    }))
  ),
  "checksListForRef": (owner, repo, ref, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/commits/${ref}/check-runs`).pipe(
    HttpClientRequest.setUrlParams({ "check_name": options?.["check_name"] as any, "status": options?.["status"] as any, "filter": options?.["filter"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "app_id": options?.["app_id"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChecksListForRef200),
      orElse: unexpectedStatus
    }))
  ),
  "checksListSuitesForRef": (owner, repo, ref, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/commits/${ref}/check-suites`).pipe(
    HttpClientRequest.setUrlParams({ "app_id": options?.["app_id"] as any, "check_name": options?.["check_name"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ChecksListSuitesForRef200),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetCombinedStatusForRef": (owner, repo, ref, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/commits/${ref}/status`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CombinedCommitStatus),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposListCommitStatusesForRef": (owner, repo, ref, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/commits/${ref}/statuses`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(ReposListCommitStatusesForRef200),
      "301": decodeSuccess(BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetCommunityProfileMetrics": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/community/profile`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CommunityProfile),
      orElse: unexpectedStatus
    }))
  ),
  "reposCompareCommits": (owner, repo, basehead, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/compare/${basehead}`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CommitComparison),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "503": decodeError("ReposCompareCommits503", ReposCompareCommits503),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetContent": (owner, repo, path, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/contents/${path}`).pipe(
    HttpClientRequest.setUrlParams({ "ref": options?.["ref"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposGetContent200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "302": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateOrUpdateFileContents": (owner, repo, path, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/contents/${path}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(FileCommit),
      "201": decodeSuccess(FileCommit),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("ReposCreateOrUpdateFileContents409", ReposCreateOrUpdateFileContents409),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposDeleteFile": (owner, repo, path, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/contents/${path}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FileCommit),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "503": decodeError("ReposDeleteFile503", ReposDeleteFile503),
      orElse: unexpectedStatus
    }))
  ),
  "reposListContributors": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/contributors`).pipe(
    HttpClientRequest.setUrlParams({ "anon": options?.["anon"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListContributors200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "dependabotListAlertsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/dependabot/alerts`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "severity": options?.["severity"] as any, "ecosystem": options?.["ecosystem"] as any, "package": options?.["package"] as any, "manifest": options?.["manifest"] as any, "epss_percentage": options?.["epss_percentage"] as any, "has": options?.["has"] as any, "scope": options?.["scope"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "first": options?.["first"] as any, "last": options?.["last"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DependabotListAlertsForRepo200),
      "400": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "dependabotGetAlert": (owner, repo, alertNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/dependabot/alerts/${alertNumber}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DependabotAlert),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "dependabotUpdateAlert": (owner, repo, alertNumber, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/dependabot/alerts/${alertNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DependabotAlert),
      "400": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "dependabotListRepoSecrets": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/dependabot/secrets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DependabotListRepoSecrets200),
      orElse: unexpectedStatus
    }))
  ),
  "dependabotGetRepoPublicKey": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/dependabot/secrets/public-key`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DependabotPublicKey),
      orElse: unexpectedStatus
    }))
  ),
  "dependabotGetRepoSecret": (owner, repo, secretName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/dependabot/secrets/${secretName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DependabotSecret),
      orElse: unexpectedStatus
    }))
  ),
  "dependabotCreateOrUpdateRepoSecret": (owner, repo, secretName, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/dependabot/secrets/${secretName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "dependabotDeleteRepoSecret": (owner, repo, secretName, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/dependabot/secrets/${secretName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "dependencyGraphDiffRange": (owner, repo, basehead, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/dependency-graph/compare/${basehead}`).pipe(
    HttpClientRequest.setUrlParams({ "name": options?.["name"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DependencyGraphDiff),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "dependencyGraphExportSbom": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/dependency-graph/sbom`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DependencyGraphSpdxSbom),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "dependencyGraphCreateRepositorySnapshot": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/dependency-graph/snapshots`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DependencyGraphCreateRepositorySnapshot201),
      orElse: unexpectedStatus
    }))
  ),
  "reposListDeployments": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/deployments`).pipe(
    HttpClientRequest.setUrlParams({ "sha": options?.["sha"] as any, "ref": options?.["ref"] as any, "task": options?.["task"] as any, "environment": options?.["environment"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListDeployments200),
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateDeployment": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/deployments`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "201": decodeSuccess(Deployment),
      "202": decodeSuccess(ReposCreateDeployment202),
      "422": decodeError("ValidationError", ValidationError),
      "409": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposGetDeployment": (owner, repo, deploymentId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/deployments/${deploymentId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Deployment),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposDeleteDeployment": (owner, repo, deploymentId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/deployments/${deploymentId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposListDeploymentStatuses": (owner, repo, deploymentId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/deployments/${deploymentId}/statuses`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListDeploymentStatuses200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateDeploymentStatus": (owner, repo, deploymentId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/deployments/${deploymentId}/statuses`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeploymentStatus),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetDeploymentStatus": (owner, repo, deploymentId, statusId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/deployments/${deploymentId}/statuses/${statusId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeploymentStatus),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateDispatchEvent": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/dispatches`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposGetAllEnvironments": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposGetAllEnvironments200),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetEnvironment": (owner, repo, environmentName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Environment),
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateOrUpdateEnvironment": (owner, repo, environmentName, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/environments/${environmentName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Environment),
      "422": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposDeleteAnEnvironment": (owner, repo, environmentName, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/environments/${environmentName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposListDeploymentBranchPolicies": (owner, repo, environmentName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListDeploymentBranchPolicies200),
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateDeploymentBranchPolicy": (owner, repo, environmentName, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeploymentBranchPolicy),
      "303": () => Effect.void,
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposGetDeploymentBranchPolicy": (owner, repo, environmentName, branchPolicyId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies/${branchPolicyId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeploymentBranchPolicy),
      orElse: unexpectedStatus
    }))
  ),
  "reposUpdateDeploymentBranchPolicy": (owner, repo, environmentName, branchPolicyId, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies/${branchPolicyId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeploymentBranchPolicy),
      orElse: unexpectedStatus
    }))
  ),
  "reposDeleteDeploymentBranchPolicy": (owner, repo, environmentName, branchPolicyId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/environments/${environmentName}/deployment-branch-policies/${branchPolicyId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposGetAllDeploymentProtectionRules": (owner, repo, environmentName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposGetAllDeploymentProtectionRules200),
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateDeploymentProtectionRule": (owner, repo, environmentName, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeploymentProtectionRule),
      orElse: unexpectedStatus
    }))
  ),
  "reposListCustomDeploymentRuleIntegrations": (owner, repo, environmentName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules/apps`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListCustomDeploymentRuleIntegrations200),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetCustomDeploymentProtectionRule": (owner, repo, environmentName, protectionRuleId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules/${protectionRuleId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeploymentProtectionRule),
      orElse: unexpectedStatus
    }))
  ),
  "reposDisableDeploymentProtectionRule": (owner, repo, environmentName, protectionRuleId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/environments/${environmentName}/deployment_protection_rules/${protectionRuleId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsListEnvironmentSecrets": (owner, repo, environmentName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/secrets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListEnvironmentSecrets200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetEnvironmentPublicKey": (owner, repo, environmentName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/secrets/public-key`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsPublicKey),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetEnvironmentSecret": (owner, repo, environmentName, secretName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/secrets/${secretName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsSecret),
      orElse: unexpectedStatus
    }))
  ),
  "actionsCreateOrUpdateEnvironmentSecret": (owner, repo, environmentName, secretName, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/environments/${environmentName}/secrets/${secretName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsDeleteEnvironmentSecret": (owner, repo, environmentName, secretName, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/environments/${environmentName}/secrets/${secretName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsListEnvironmentVariables": (owner, repo, environmentName, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/variables`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsListEnvironmentVariables200),
      orElse: unexpectedStatus
    }))
  ),
  "actionsCreateEnvironmentVariable": (owner, repo, environmentName, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/environments/${environmentName}/variables`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      orElse: unexpectedStatus
    }))
  ),
  "actionsGetEnvironmentVariable": (owner, repo, environmentName, name, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/environments/${environmentName}/variables/${name}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsVariable),
      orElse: unexpectedStatus
    }))
  ),
  "actionsDeleteEnvironmentVariable": (owner, repo, environmentName, name, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/environments/${environmentName}/variables/${name}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "actionsUpdateEnvironmentVariable": (owner, repo, environmentName, name, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/environments/${environmentName}/variables/${name}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "activityListRepoEvents": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/events`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActivityListRepoEvents200),
      orElse: unexpectedStatus
    }))
  ),
  "reposListForks": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/forks`).pipe(
    HttpClientRequest.setUrlParams({ "sort": options?.["sort"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListForks200),
      "400": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateFork": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/forks`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FullRepository),
      "400": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "gitCreateBlob": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/git/blobs`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ShortBlob),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("GitCreateBlob422", GitCreateBlob422),
      orElse: unexpectedStatus
    }))
  ),
  "gitGetBlob": (owner, repo, fileSha, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/git/blobs/${fileSha}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Blob),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "gitCreateCommit": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/git/commits`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GitCommit),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "gitGetCommit": (owner, repo, commitSha, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/git/commits/${commitSha}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GitCommit),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "gitListMatchingRefs": (owner, repo, ref, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/git/matching-refs/${ref}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GitListMatchingRefs200),
      "409": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "gitGetRef": (owner, repo, ref, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/git/ref/${ref}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GitRef),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "gitCreateRef": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/git/refs`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GitRef),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "gitDeleteRef": (owner, repo, ref, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/git/refs/${ref}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "409": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "gitUpdateRef": (owner, repo, ref, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/git/refs/${ref}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GitRef),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "gitCreateTag": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/git/tags`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GitTag),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "gitGetTag": (owner, repo, tagSha, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/git/tags/${tagSha}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GitTag),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "gitCreateTree": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/git/trees`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GitTree),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "gitGetTree": (owner, repo, treeSha, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/git/trees/${treeSha}`).pipe(
    HttpClientRequest.setUrlParams({ "recursive": options?.["recursive"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GitTree),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposListWebhooks": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/hooks`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListWebhooks200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateWebhook": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/hooks`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Hook),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetWebhook": (owner, repo, hookId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/hooks/${hookId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Hook),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposDeleteWebhook": (owner, repo, hookId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/hooks/${hookId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposUpdateWebhook": (owner, repo, hookId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/hooks/${hookId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Hook),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetWebhookConfigForRepo": (owner, repo, hookId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/hooks/${hookId}/config`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(WebhookConfig),
      orElse: unexpectedStatus
    }))
  ),
  "reposUpdateWebhookConfigForRepo": (owner, repo, hookId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/hooks/${hookId}/config`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(WebhookConfig),
      orElse: unexpectedStatus
    }))
  ),
  "reposListWebhookDeliveries": (owner, repo, hookId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/hooks/${hookId}/deliveries`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "cursor": options?.["cursor"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListWebhookDeliveries200),
      "400": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetWebhookDelivery": (owner, repo, hookId, deliveryId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/hooks/${hookId}/deliveries/${deliveryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(HookDelivery),
      "400": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposRedeliverWebhookDelivery": (owner, repo, hookId, deliveryId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/hooks/${hookId}/deliveries/${deliveryId}/attempts`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposRedeliverWebhookDelivery202),
      "400": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposPingWebhook": (owner, repo, hookId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/hooks/${hookId}/pings`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposTestPushWebhook": (owner, repo, hookId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/hooks/${hookId}/tests`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "migrationsGetImportStatus": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/import`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Import),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "migrationsStartImport": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/import`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Import),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "503": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "migrationsCancelImport": (owner, repo, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/import`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "503": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "migrationsUpdateImport": (owner, repo, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/import`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Import),
      "503": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "migrationsGetCommitAuthors": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/import/authors`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(MigrationsGetCommitAuthors200),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "migrationsMapCommitAuthor": (owner, repo, authorId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/import/authors/${authorId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PorterAuthor),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "503": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "migrationsGetLargeFiles": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/import/large_files`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(MigrationsGetLargeFiles200),
      "503": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "migrationsSetLfsPreference": (owner, repo, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/import/lfs`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Import),
      "422": decodeError("ValidationError", ValidationError),
      "503": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "appsGetRepoInstallation": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/installation`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(Installation),
      "301": decodeSuccess(BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "interactionsGetRestrictionsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/interaction-limits`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(InteractionsGetRestrictionsForRepo200),
      orElse: unexpectedStatus
    }))
  ),
  "interactionsSetRestrictionsForRepo": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/interaction-limits`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(InteractionLimitResponse),
      "409": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "interactionsRemoveRestrictionsForRepo": (owner, repo, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/interaction-limits`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "409": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposListInvitations": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/invitations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListInvitations200),
      orElse: unexpectedStatus
    }))
  ),
  "reposDeleteInvitation": (owner, repo, invitationId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/invitations/${invitationId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposUpdateInvitation": (owner, repo, invitationId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/invitations/${invitationId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RepositoryInvitation),
      orElse: unexpectedStatus
    }))
  ),
  "issuesListForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues`).pipe(
    HttpClientRequest.setUrlParams({ "milestone": options?.["milestone"] as any, "state": options?.["state"] as any, "assignee": options?.["assignee"] as any, "type": options?.["type"] as any, "creator": options?.["creator"] as any, "mentioned": options?.["mentioned"] as any, "labels": options?.["labels"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(IssuesListForRepo200),
      "301": decodeSuccess(BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesCreate": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/issues`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Issue),
      "400": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "503": decodeError("IssuesCreate503", IssuesCreate503),
      orElse: unexpectedStatus
    }))
  ),
  "issuesListCommentsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/comments`).pipe(
    HttpClientRequest.setUrlParams({ "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IssuesListCommentsForRepo200),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesGetComment": (owner, repo, commentId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/comments/${commentId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IssueComment),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesDeleteComment": (owner, repo, commentId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/issues/comments/${commentId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "issuesUpdateComment": (owner, repo, commentId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/issues/comments/${commentId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IssueComment),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsListForIssueComment": (owner, repo, commentId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/comments/${commentId}/reactions`).pipe(
    HttpClientRequest.setUrlParams({ "content": options?.["content"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReactionsListForIssueComment200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsCreateForIssueComment": (owner, repo, commentId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/issues/comments/${commentId}/reactions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(Reaction),
      "201": decodeSuccess(Reaction),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsDeleteForIssueComment": (owner, repo, commentId, reactionId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/issues/comments/${commentId}/reactions/${reactionId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "issuesListEventsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/events`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IssuesListEventsForRepo200),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesGetEvent": (owner, repo, eventId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/events/${eventId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IssueEvent),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesGet": (owner, repo, issueNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(Issue),
      "301": decodeSuccess(BasicError),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "issuesUpdate": (owner, repo, issueNumber, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/issues/${issueNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(Issue),
      "301": decodeSuccess(BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "503": decodeError("IssuesUpdate503", IssuesUpdate503),
      orElse: unexpectedStatus
    }))
  ),
  "issuesAddAssignees": (owner, repo, issueNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/issues/${issueNumber}/assignees`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Issue),
      orElse: unexpectedStatus
    }))
  ),
  "issuesRemoveAssignees": (owner, repo, issueNumber, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/issues/${issueNumber}/assignees`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Issue),
      orElse: unexpectedStatus
    }))
  ),
  "issuesCheckUserCanBeAssignedToIssue": (owner, repo, issueNumber, assignee, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}/assignees/${assignee}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "issuesListComments": (owner, repo, issueNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}/comments`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IssuesListComments200),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesCreateComment": (owner, repo, issueNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/issues/${issueNumber}/comments`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IssueComment),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesListDependenciesBlockedBy": (owner, repo, issueNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}/dependencies/blocked_by`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(IssuesListDependenciesBlockedBy200),
      "301": decodeSuccess(BasicError),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesAddBlockedByDependency": (owner, repo, issueNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/issues/${issueNumber}/dependencies/blocked_by`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "201": decodeSuccess(Issue),
      "301": decodeSuccess(BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesRemoveDependencyBlockedBy": (owner, repo, issueNumber, issueId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/issues/${issueNumber}/dependencies/blocked_by/${issueId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(Issue),
      "301": decodeSuccess(BasicError),
      "400": decodeError("BasicError", BasicError),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesListDependenciesBlocking": (owner, repo, issueNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}/dependencies/blocking`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(IssuesListDependenciesBlocking200),
      "301": decodeSuccess(BasicError),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesListEvents": (owner, repo, issueNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}/events`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IssuesListEvents200),
      "410": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesListLabelsOnIssue": (owner, repo, issueNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}/labels`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(IssuesListLabelsOnIssue200),
      "301": decodeSuccess(BasicError),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesSetLabels": (owner, repo, issueNumber, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/issues/${issueNumber}/labels`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(IssuesSetLabels200),
      "301": decodeSuccess(BasicError),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesAddLabels": (owner, repo, issueNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/issues/${issueNumber}/labels`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(IssuesAddLabels200),
      "301": decodeSuccess(BasicError),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesRemoveAllLabels": (owner, repo, issueNumber, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/issues/${issueNumber}/labels`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "301": decodeSuccess(BasicError),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "issuesRemoveLabel": (owner, repo, issueNumber, name, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/issues/${issueNumber}/labels/${name}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(IssuesRemoveLabel200),
      "301": decodeSuccess(BasicError),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesLock": (owner, repo, issueNumber, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/issues/${issueNumber}/lock`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "issuesUnlock": (owner, repo, issueNumber, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/issues/${issueNumber}/lock`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reactionsListForIssue": (owner, repo, issueNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}/reactions`).pipe(
    HttpClientRequest.setUrlParams({ "content": options?.["content"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReactionsListForIssue200),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsCreateForIssue": (owner, repo, issueNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/issues/${issueNumber}/reactions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(Reaction),
      "201": decodeSuccess(Reaction),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsDeleteForIssue": (owner, repo, issueNumber, reactionId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/issues/${issueNumber}/reactions/${reactionId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "issuesRemoveSubIssue": (owner, repo, issueNumber, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/issues/${issueNumber}/sub_issue`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Issue),
      "400": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesListSubIssues": (owner, repo, issueNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}/sub_issues`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IssuesListSubIssues200),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesAddSubIssue": (owner, repo, issueNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/issues/${issueNumber}/sub_issues`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Issue),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesReprioritizeSubIssue": (owner, repo, issueNumber, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/issues/${issueNumber}/sub_issues/priority`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Issue),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      "503": decodeError("IssuesReprioritizeSubIssue503", IssuesReprioritizeSubIssue503),
      orElse: unexpectedStatus
    }))
  ),
  "issuesListEventsForTimeline": (owner, repo, issueNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/issues/${issueNumber}/timeline`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IssuesListEventsForTimeline200),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposListDeployKeys": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/keys`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListDeployKeys200),
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateDeployKey": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/keys`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeployKey),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetDeployKey": (owner, repo, keyId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/keys/${keyId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(DeployKey),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposDeleteDeployKey": (owner, repo, keyId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/keys/${keyId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "issuesListLabelsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/labels`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IssuesListLabelsForRepo200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesCreateLabel": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/labels`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Label),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesGetLabel": (owner, repo, name, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/labels/${name}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Label),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesDeleteLabel": (owner, repo, name, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/labels/${name}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "issuesUpdateLabel": (owner, repo, name, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/labels/${name}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Label),
      orElse: unexpectedStatus
    }))
  ),
  "reposListLanguages": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/languages`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Language),
      orElse: unexpectedStatus
    }))
  ),
  "licensesGetForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/license`).pipe(
    HttpClientRequest.setUrlParams({ "ref": options?.["ref"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(LicenseContent),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposMergeUpstream": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/merge-upstream`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(MergedUpstream),
      "409": () => Effect.void,
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposMerge": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/merges`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Commit),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      "404": () => Effect.void,
      "409": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "issuesListMilestones": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/milestones`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IssuesListMilestones200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesCreateMilestone": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/milestones`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Milestone),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesGetMilestone": (owner, repo, milestoneNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/milestones/${milestoneNumber}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Milestone),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "issuesDeleteMilestone": (owner, repo, milestoneNumber, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/milestones/${milestoneNumber}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "issuesUpdateMilestone": (owner, repo, milestoneNumber, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/milestones/${milestoneNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Milestone),
      orElse: unexpectedStatus
    }))
  ),
  "issuesListLabelsForMilestone": (owner, repo, milestoneNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/milestones/${milestoneNumber}/labels`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IssuesListLabelsForMilestone200),
      orElse: unexpectedStatus
    }))
  ),
  "activityListRepoNotificationsForAuthenticatedUser": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/notifications`).pipe(
    HttpClientRequest.setUrlParams({ "all": options?.["all"] as any, "participating": options?.["participating"] as any, "since": options?.["since"] as any, "before": options?.["before"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActivityListRepoNotificationsForAuthenticatedUser200),
      orElse: unexpectedStatus
    }))
  ),
  "activityMarkRepoNotificationsAsRead": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/notifications`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActivityMarkRepoNotificationsAsRead202),
      "205": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposGetPages": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pages`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Page),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposUpdateInformationAboutPagesSite": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/pages`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "400": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposCreatePagesSite": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pages`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Page),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposDeletePagesSite": (owner, repo, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/pages`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposListPagesBuilds": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pages/builds`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListPagesBuilds200),
      orElse: unexpectedStatus
    }))
  ),
  "reposRequestPagesBuild": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pages/builds`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PageBuildStatus),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetLatestPagesBuild": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pages/builds/latest`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PageBuild),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetPagesBuild": (owner, repo, buildId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pages/builds/${buildId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PageBuild),
      orElse: unexpectedStatus
    }))
  ),
  "reposCreatePagesDeployment": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pages/deployments`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PageDeployment),
      "400": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetPagesDeployment": (owner, repo, pagesDeploymentId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pages/deployments/${pagesDeploymentId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PagesDeploymentStatus),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposCancelPagesDeployment": (owner, repo, pagesDeploymentId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pages/deployments/${pagesDeploymentId}/cancel`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposGetPagesHealthCheck": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pages/health`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(PagesHealthCheck),
      "202": decodeSuccess(EmptyObject),
      "404": decodeError("BasicError", BasicError),
      "400": () => Effect.void,
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposCheckPrivateVulnerabilityReporting": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/private-vulnerability-reporting`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposCheckPrivateVulnerabilityReporting200),
      "422": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposEnablePrivateVulnerabilityReporting": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/private-vulnerability-reporting`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "422": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposDisablePrivateVulnerabilityReporting": (owner, repo, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/private-vulnerability-reporting`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "422": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicListForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectsClassicListForRepo200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicCreateForRepo": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/projects`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "410": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetCustomPropertiesValues": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/properties/values`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposGetCustomPropertiesValues200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateOrUpdateCustomPropertiesValues": (owner, repo, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/properties/values`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "pullsList": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "head": options?.["head"] as any, "base": options?.["base"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullsList200),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "pullsCreate": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pulls`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullRequest),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "pullsListReviewCommentsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/comments`).pipe(
    HttpClientRequest.setUrlParams({ "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullsListReviewCommentsForRepo200),
      orElse: unexpectedStatus
    }))
  ),
  "pullsGetReviewComment": (owner, repo, commentId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/comments/${commentId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullRequestReviewComment),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "pullsDeleteReviewComment": (owner, repo, commentId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/pulls/comments/${commentId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "pullsUpdateReviewComment": (owner, repo, commentId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/pulls/comments/${commentId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullRequestReviewComment),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsListForPullRequestReviewComment": (owner, repo, commentId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/comments/${commentId}/reactions`).pipe(
    HttpClientRequest.setUrlParams({ "content": options?.["content"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReactionsListForPullRequestReviewComment200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsCreateForPullRequestReviewComment": (owner, repo, commentId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pulls/comments/${commentId}/reactions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(Reaction),
      "201": decodeSuccess(Reaction),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsDeleteForPullRequestComment": (owner, repo, commentId, reactionId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/pulls/comments/${commentId}/reactions/${reactionId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "pullsGet": (owner, repo, pullNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/${pullNumber}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullRequest),
      "404": decodeError("BasicError", BasicError),
      "406": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "503": decodeError("PullsGet503", PullsGet503),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "pullsUpdate": (owner, repo, pullNumber, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/pulls/${pullNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullRequest),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesCreateWithPrForAuthenticatedUser": (owner, repo, pullNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pulls/${pullNumber}/codespaces`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "201": decodeSuccess(Codespace),
      "202": decodeSuccess(Codespace),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodespacesCreateWithPrForAuthenticatedUser503", CodespacesCreateWithPrForAuthenticatedUser503),
      orElse: unexpectedStatus
    }))
  ),
  "pullsListReviewComments": (owner, repo, pullNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/${pullNumber}/comments`).pipe(
    HttpClientRequest.setUrlParams({ "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullsListReviewComments200),
      orElse: unexpectedStatus
    }))
  ),
  "pullsCreateReviewComment": (owner, repo, pullNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pulls/${pullNumber}/comments`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullRequestReviewComment),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "pullsCreateReplyForReviewComment": (owner, repo, pullNumber, commentId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pulls/${pullNumber}/comments/${commentId}/replies`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullRequestReviewComment),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "pullsListCommits": (owner, repo, pullNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/${pullNumber}/commits`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullsListCommits200),
      orElse: unexpectedStatus
    }))
  ),
  "pullsListFiles": (owner, repo, pullNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/${pullNumber}/files`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullsListFiles200),
      "422": decodeError("ValidationError", ValidationError),
      "500": decodeError("BasicError", BasicError),
      "503": decodeError("PullsListFiles503", PullsListFiles503),
      orElse: unexpectedStatus
    }))
  ),
  "pullsCheckIfMerged": (owner, repo, pullNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/${pullNumber}/merge`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "pullsMerge": (owner, repo, pullNumber, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/pulls/${pullNumber}/merge`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullRequestMergeResult),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "405": decodeError("PullsMerge405", PullsMerge405),
      "409": decodeError("PullsMerge409", PullsMerge409),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "pullsListRequestedReviewers": (owner, repo, pullNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/${pullNumber}/requested_reviewers`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullRequestReviewRequest),
      orElse: unexpectedStatus
    }))
  ),
  "pullsRequestReviewers": (owner, repo, pullNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pulls/${pullNumber}/requested_reviewers`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullRequestSimple),
      "403": decodeError("BasicError", BasicError),
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "pullsRemoveRequestedReviewers": (owner, repo, pullNumber, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/pulls/${pullNumber}/requested_reviewers`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullRequestSimple),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "pullsListReviews": (owner, repo, pullNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/${pullNumber}/reviews`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullsListReviews200),
      orElse: unexpectedStatus
    }))
  ),
  "pullsCreateReview": (owner, repo, pullNumber, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pulls/${pullNumber}/reviews`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullRequestReview),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "pullsGetReview": (owner, repo, pullNumber, reviewId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullRequestReview),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "pullsUpdateReview": (owner, repo, pullNumber, reviewId, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullRequestReview),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "pullsDeletePendingReview": (owner, repo, pullNumber, reviewId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullRequestReview),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "pullsListCommentsForReview": (owner, repo, pullNumber, reviewId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}/comments`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullsListCommentsForReview200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "pullsDismissReview": (owner, repo, pullNumber, reviewId, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}/dismissals`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullRequestReview),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "pullsSubmitReview": (owner, repo, pullNumber, reviewId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/pulls/${pullNumber}/reviews/${reviewId}/events`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullRequestReview),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "pullsUpdateBranch": (owner, repo, pullNumber, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/pulls/${pullNumber}/update-branch`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PullsUpdateBranch202),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetReadme": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/readme`).pipe(
    HttpClientRequest.setUrlParams({ "ref": options?.["ref"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ContentFile),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposGetReadmeInDirectory": (owner, repo, dir, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/readme/${dir}`).pipe(
    HttpClientRequest.setUrlParams({ "ref": options?.["ref"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ContentFile),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposListReleases": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/releases`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListReleases200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateRelease": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/releases`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Release),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetReleaseAsset": (owner, repo, assetId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/releases/assets/${assetId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReleaseAsset),
      "404": decodeError("BasicError", BasicError),
      "302": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposDeleteReleaseAsset": (owner, repo, assetId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/releases/assets/${assetId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposUpdateReleaseAsset": (owner, repo, assetId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/releases/assets/${assetId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReleaseAsset),
      orElse: unexpectedStatus
    }))
  ),
  "reposGenerateReleaseNotes": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/releases/generate-notes`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReleaseNotesContent),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetLatestRelease": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/releases/latest`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Release),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetReleaseByTag": (owner, repo, tag, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/releases/tags/${tag}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Release),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetRelease": (owner, repo, releaseId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/releases/${releaseId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Release),
      "401": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposDeleteRelease": (owner, repo, releaseId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/releases/${releaseId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposUpdateRelease": (owner, repo, releaseId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/releases/${releaseId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Release),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposListReleaseAssets": (owner, repo, releaseId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/releases/${releaseId}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListReleaseAssets200),
      orElse: unexpectedStatus
    }))
  ),
  "reposUploadReleaseAsset": (owner, repo, releaseId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/releases/${releaseId}/assets`).pipe(
    HttpClientRequest.setUrlParams({ "name": options?.["name"] as any, "label": options?.["label"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReleaseAsset),
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reactionsListForRelease": (owner, repo, releaseId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/releases/${releaseId}/reactions`).pipe(
    HttpClientRequest.setUrlParams({ "content": options?.["content"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReactionsListForRelease200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsCreateForRelease": (owner, repo, releaseId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/releases/${releaseId}/reactions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(Reaction),
      "201": decodeSuccess(Reaction),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsDeleteForRelease": (owner, repo, releaseId, reactionId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/releases/${releaseId}/reactions/${reactionId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposGetBranchRules": (owner, repo, branch, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/rules/branches/${branch}`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposGetBranchRules200),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetRepoRulesets": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/rulesets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "includes_parents": options?.["includes_parents"] as any, "targets": options?.["targets"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposGetRepoRulesets200),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateRepoRuleset": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/rulesets`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RepositoryRuleset),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetRepoRuleSuites": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/rulesets/rule-suites`).pipe(
    HttpClientRequest.setUrlParams({ "ref": options?.["ref"] as any, "time_period": options?.["time_period"] as any, "actor_name": options?.["actor_name"] as any, "rule_suite_result": options?.["rule_suite_result"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RuleSuites),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetRepoRuleSuite": (owner, repo, ruleSuiteId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/rulesets/rule-suites/${ruleSuiteId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RuleSuite),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetRepoRuleset": (owner, repo, rulesetId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/rulesets/${rulesetId}`).pipe(
    HttpClientRequest.setUrlParams({ "includes_parents": options?.["includes_parents"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RepositoryRuleset),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposUpdateRepoRuleset": (owner, repo, rulesetId, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/rulesets/${rulesetId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RepositoryRuleset),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposDeleteRepoRuleset": (owner, repo, rulesetId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/rulesets/${rulesetId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposGetRepoRulesetHistory": (owner, repo, rulesetId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/rulesets/${rulesetId}/history`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposGetRepoRulesetHistory200),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetRepoRulesetVersion": (owner, repo, rulesetId, versionId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/rulesets/${rulesetId}/history/${versionId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RulesetVersionWithState),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "secretScanningListAlertsForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/secret-scanning/alerts`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "secret_type": options?.["secret_type"] as any, "resolution": options?.["resolution"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "validity": options?.["validity"] as any, "is_publicly_leaked": options?.["is_publicly_leaked"] as any, "is_multi_repo": options?.["is_multi_repo"] as any, "hide_secret": options?.["hide_secret"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SecretScanningListAlertsForRepo200),
      "503": decodeError("SecretScanningListAlertsForRepo503", SecretScanningListAlertsForRepo503),
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "secretScanningGetAlert": (owner, repo, alertNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/secret-scanning/alerts/${alertNumber}`).pipe(
    HttpClientRequest.setUrlParams({ "hide_secret": options?.["hide_secret"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SecretScanningAlert),
      "503": decodeError("SecretScanningGetAlert503", SecretScanningGetAlert503),
      "304": () => Effect.void,
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "secretScanningUpdateAlert": (owner, repo, alertNumber, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/secret-scanning/alerts/${alertNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SecretScanningAlert),
      "503": decodeError("SecretScanningUpdateAlert503", SecretScanningUpdateAlert503),
      "400": () => Effect.void,
      "404": () => Effect.void,
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "secretScanningListLocationsForAlert": (owner, repo, alertNumber, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/secret-scanning/alerts/${alertNumber}/locations`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SecretScanningListLocationsForAlert200),
      "503": decodeError("SecretScanningListLocationsForAlert503", SecretScanningListLocationsForAlert503),
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "secretScanningCreatePushProtectionBypass": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/secret-scanning/push-protection-bypasses`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SecretScanningPushProtectionBypass),
      "503": decodeError("SecretScanningCreatePushProtectionBypass503", SecretScanningCreatePushProtectionBypass503),
      "403": () => Effect.void,
      "404": () => Effect.void,
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "secretScanningGetScanHistory": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/secret-scanning/scan-history`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SecretScanningScanHistory),
      "503": decodeError("SecretScanningGetScanHistory503", SecretScanningGetScanHistory503),
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "securityAdvisoriesListRepositoryAdvisories": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/security-advisories`).pipe(
    HttpClientRequest.setUrlParams({ "direction": options?.["direction"] as any, "sort": options?.["sort"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "per_page": options?.["per_page"] as any, "state": options?.["state"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SecurityAdvisoriesListRepositoryAdvisories200),
      "400": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "securityAdvisoriesCreateRepositoryAdvisory": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/security-advisories`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RepositoryAdvisory),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "securityAdvisoriesCreatePrivateVulnerabilityReport": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/security-advisories/reports`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RepositoryAdvisory),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "securityAdvisoriesGetRepositoryAdvisory": (owner, repo, ghsaId, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/security-advisories/${ghsaId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RepositoryAdvisory),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "securityAdvisoriesUpdateRepositoryAdvisory": (owner, repo, ghsaId, options) => HttpClientRequest.patch(`/repos/${owner}/${repo}/security-advisories/${ghsaId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RepositoryAdvisory),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "securityAdvisoriesCreateRepositoryAdvisoryCveRequest": (owner, repo, ghsaId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/security-advisories/${ghsaId}/cve`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SecurityAdvisoriesCreateRepositoryAdvisoryCveRequest202),
      "400": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "securityAdvisoriesCreateFork": (owner, repo, ghsaId, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/security-advisories/${ghsaId}/forks`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FullRepository),
      "400": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "activityListStargazersForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/stargazers`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActivityListStargazersForRepo200),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetCodeFrequencyStats": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/stats/code_frequency`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(ReposGetCodeFrequencyStats200),
      "202": decodeSuccess(ReposGetCodeFrequencyStats202),
      "204": () => Effect.void,
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposGetCommitActivityStats": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/stats/commit_activity`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(ReposGetCommitActivityStats200),
      "202": decodeSuccess(ReposGetCommitActivityStats202),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposGetContributorsStats": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/stats/contributors`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(ReposGetContributorsStats200),
      "202": decodeSuccess(ReposGetContributorsStats202),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposGetParticipationStats": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/stats/participation`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ParticipationStats),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetPunchCardStats": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/stats/punch_card`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposGetPunchCardStats200),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateCommitStatus": (owner, repo, sha, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/statuses/${sha}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Status),
      orElse: unexpectedStatus
    }))
  ),
  "activityListWatchersForRepo": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/subscribers`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActivityListWatchersForRepo200),
      orElse: unexpectedStatus
    }))
  ),
  "activityGetRepoSubscription": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/subscription`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RepositorySubscription),
      "403": decodeError("BasicError", BasicError),
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "activitySetRepoSubscription": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/subscription`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(RepositorySubscription),
      orElse: unexpectedStatus
    }))
  ),
  "activityDeleteRepoSubscription": (owner, repo, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/subscription`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposListTags": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/tags`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListTags200),
      orElse: unexpectedStatus
    }))
  ),
  "reposListTagProtection": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/tags/protection`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListTagProtection200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateTagProtection": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/tags/protection`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TagProtection),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposDeleteTagProtection": (owner, repo, tagProtectionId, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/tags/protection/${tagProtectionId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposDownloadTarballArchive": (owner, repo, ref, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/tarball/${ref}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "302": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposListTeams": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/teams`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListTeams200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetAllTopics": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/topics`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Topic),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposReplaceAllTopics": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/topics`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Topic),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetClones": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/traffic/clones`).pipe(
    HttpClientRequest.setUrlParams({ "per": options?.["per"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CloneTraffic),
      "403": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetTopPaths": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/traffic/popular/paths`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposGetTopPaths200),
      "403": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetTopReferrers": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/traffic/popular/referrers`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposGetTopReferrers200),
      "403": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposGetViews": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/traffic/views`).pipe(
    HttpClientRequest.setUrlParams({ "per": options?.["per"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ViewTraffic),
      "403": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "reposTransfer": (owner, repo, options) => HttpClientRequest.post(`/repos/${owner}/${repo}/transfer`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(MinimalRepository),
      orElse: unexpectedStatus
    }))
  ),
  "reposCheckVulnerabilityAlerts": (owner, repo, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/vulnerability-alerts`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposEnableVulnerabilityAlerts": (owner, repo, options) => HttpClientRequest.put(`/repos/${owner}/${repo}/vulnerability-alerts`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposDisableVulnerabilityAlerts": (owner, repo, options) => HttpClientRequest.del(`/repos/${owner}/${repo}/vulnerability-alerts`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposDownloadZipballArchive": (owner, repo, ref, options) => HttpClientRequest.get(`/repos/${owner}/${repo}/zipball/${ref}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "302": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateUsingTemplate": (templateOwner, templateRepo, options) => HttpClientRequest.post(`/repos/${templateOwner}/${templateRepo}/generate`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FullRepository),
      orElse: unexpectedStatus
    }))
  ),
  "reposListPublic": (options) => HttpClientRequest.get(`/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListPublic200),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "searchCode": (options) => HttpClientRequest.get(`/search/code`).pipe(
    HttpClientRequest.setUrlParams({ "q": options?.["q"] as any, "sort": options?.["sort"] as any, "order": options?.["order"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SearchCode200),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "503": decodeError("SearchCode503", SearchCode503),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "searchCommits": (options) => HttpClientRequest.get(`/search/commits`).pipe(
    HttpClientRequest.setUrlParams({ "q": options?.["q"] as any, "sort": options?.["sort"] as any, "order": options?.["order"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SearchCommits200),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "searchIssuesAndPullRequests": (options) => HttpClientRequest.get(`/search/issues`).pipe(
    HttpClientRequest.setUrlParams({ "q": options?.["q"] as any, "sort": options?.["sort"] as any, "order": options?.["order"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "advanced_search": options?.["advanced_search"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SearchIssuesAndPullRequests200),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "503": decodeError("SearchIssuesAndPullRequests503", SearchIssuesAndPullRequests503),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "searchLabels": (options) => HttpClientRequest.get(`/search/labels`).pipe(
    HttpClientRequest.setUrlParams({ "repository_id": options?.["repository_id"] as any, "q": options?.["q"] as any, "sort": options?.["sort"] as any, "order": options?.["order"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SearchLabels200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "searchRepos": (options) => HttpClientRequest.get(`/search/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "q": options?.["q"] as any, "sort": options?.["sort"] as any, "order": options?.["order"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SearchRepos200),
      "422": decodeError("ValidationError", ValidationError),
      "503": decodeError("SearchRepos503", SearchRepos503),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "searchTopics": (options) => HttpClientRequest.get(`/search/topics`).pipe(
    HttpClientRequest.setUrlParams({ "q": options?.["q"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SearchTopics200),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "searchUsers": (options) => HttpClientRequest.get(`/search/users`).pipe(
    HttpClientRequest.setUrlParams({ "q": options?.["q"] as any, "sort": options?.["sort"] as any, "order": options?.["order"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SearchUsers200),
      "422": decodeError("ValidationError", ValidationError),
      "503": decodeError("SearchUsers503", SearchUsers503),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsGetLegacy": (teamId, options) => HttpClientRequest.get(`/teams/${teamId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamFull),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "teamsDeleteLegacy": (teamId, options) => HttpClientRequest.del(`/teams/${teamId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsUpdateLegacy": (teamId, options) => HttpClientRequest.patch(`/teams/${teamId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(TeamFull),
      "201": decodeSuccess(TeamFull),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "teamsListDiscussionsLegacy": (teamId, options) => HttpClientRequest.get(`/teams/${teamId}/discussions`).pipe(
    HttpClientRequest.setUrlParams({ "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamsListDiscussionsLegacy200),
      orElse: unexpectedStatus
    }))
  ),
  "teamsCreateDiscussionLegacy": (teamId, options) => HttpClientRequest.post(`/teams/${teamId}/discussions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamDiscussion),
      orElse: unexpectedStatus
    }))
  ),
  "teamsGetDiscussionLegacy": (teamId, discussionNumber, options) => HttpClientRequest.get(`/teams/${teamId}/discussions/${discussionNumber}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamDiscussion),
      orElse: unexpectedStatus
    }))
  ),
  "teamsDeleteDiscussionLegacy": (teamId, discussionNumber, options) => HttpClientRequest.del(`/teams/${teamId}/discussions/${discussionNumber}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsUpdateDiscussionLegacy": (teamId, discussionNumber, options) => HttpClientRequest.patch(`/teams/${teamId}/discussions/${discussionNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamDiscussion),
      orElse: unexpectedStatus
    }))
  ),
  "teamsListDiscussionCommentsLegacy": (teamId, discussionNumber, options) => HttpClientRequest.get(`/teams/${teamId}/discussions/${discussionNumber}/comments`).pipe(
    HttpClientRequest.setUrlParams({ "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamsListDiscussionCommentsLegacy200),
      orElse: unexpectedStatus
    }))
  ),
  "teamsCreateDiscussionCommentLegacy": (teamId, discussionNumber, options) => HttpClientRequest.post(`/teams/${teamId}/discussions/${discussionNumber}/comments`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamDiscussionComment),
      orElse: unexpectedStatus
    }))
  ),
  "teamsGetDiscussionCommentLegacy": (teamId, discussionNumber, commentNumber, options) => HttpClientRequest.get(`/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamDiscussionComment),
      orElse: unexpectedStatus
    }))
  ),
  "teamsDeleteDiscussionCommentLegacy": (teamId, discussionNumber, commentNumber, options) => HttpClientRequest.del(`/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsUpdateDiscussionCommentLegacy": (teamId, discussionNumber, commentNumber, options) => HttpClientRequest.patch(`/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamDiscussionComment),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsListForTeamDiscussionCommentLegacy": (teamId, discussionNumber, commentNumber, options) => HttpClientRequest.get(`/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}/reactions`).pipe(
    HttpClientRequest.setUrlParams({ "content": options?.["content"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReactionsListForTeamDiscussionCommentLegacy200),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsCreateForTeamDiscussionCommentLegacy": (teamId, discussionNumber, commentNumber, options) => HttpClientRequest.post(`/teams/${teamId}/discussions/${discussionNumber}/comments/${commentNumber}/reactions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Reaction),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsListForTeamDiscussionLegacy": (teamId, discussionNumber, options) => HttpClientRequest.get(`/teams/${teamId}/discussions/${discussionNumber}/reactions`).pipe(
    HttpClientRequest.setUrlParams({ "content": options?.["content"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReactionsListForTeamDiscussionLegacy200),
      orElse: unexpectedStatus
    }))
  ),
  "reactionsCreateForTeamDiscussionLegacy": (teamId, discussionNumber, options) => HttpClientRequest.post(`/teams/${teamId}/discussions/${discussionNumber}/reactions`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Reaction),
      orElse: unexpectedStatus
    }))
  ),
  "teamsListPendingInvitationsLegacy": (teamId, options) => HttpClientRequest.get(`/teams/${teamId}/invitations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamsListPendingInvitationsLegacy200),
      orElse: unexpectedStatus
    }))
  ),
  "teamsListMembersLegacy": (teamId, options) => HttpClientRequest.get(`/teams/${teamId}/members`).pipe(
    HttpClientRequest.setUrlParams({ "role": options?.["role"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamsListMembersLegacy200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "teamsGetMemberLegacy": (teamId, username, options) => HttpClientRequest.get(`/teams/${teamId}/members/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsAddMemberLegacy": (teamId, username, options) => HttpClientRequest.put(`/teams/${teamId}/members/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "404": () => Effect.void,
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsRemoveMemberLegacy": (teamId, username, options) => HttpClientRequest.del(`/teams/${teamId}/members/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsGetMembershipForUserLegacy": (teamId, username, options) => HttpClientRequest.get(`/teams/${teamId}/memberships/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamMembership),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "teamsAddOrUpdateMembershipForUserLegacy": (teamId, username, options) => HttpClientRequest.put(`/teams/${teamId}/memberships/${username}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamMembership),
      "404": decodeError("BasicError", BasicError),
      "403": () => Effect.void,
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsRemoveMembershipForUserLegacy": (teamId, username, options) => HttpClientRequest.del(`/teams/${teamId}/memberships/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "403": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsListProjectsLegacy": (teamId, options) => HttpClientRequest.get(`/teams/${teamId}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamsListProjectsLegacy200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "teamsCheckPermissionsForProjectLegacy": (teamId, projectId, options) => HttpClientRequest.get(`/teams/${teamId}/projects/${projectId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamProject),
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsAddOrUpdateProjectPermissionsLegacy": (teamId, projectId, options) => HttpClientRequest.put(`/teams/${teamId}/projects/${projectId}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("TeamsAddOrUpdateProjectPermissionsLegacy403", TeamsAddOrUpdateProjectPermissionsLegacy403),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsRemoveProjectLegacy": (teamId, projectId, options) => HttpClientRequest.del(`/teams/${teamId}/projects/${projectId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsListReposLegacy": (teamId, options) => HttpClientRequest.get(`/teams/${teamId}/repos`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamsListReposLegacy200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "teamsCheckPermissionsForRepoLegacy": (teamId, owner, repo, options) => HttpClientRequest.get(`/teams/${teamId}/repos/${owner}/${repo}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamRepository),
      "204": () => Effect.void,
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsAddOrUpdateRepoPermissionsLegacy": (teamId, owner, repo, options) => HttpClientRequest.put(`/teams/${teamId}/repos/${owner}/${repo}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsRemoveRepoLegacy": (teamId, owner, repo, options) => HttpClientRequest.del(`/teams/${teamId}/repos/${owner}/${repo}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsListChildLegacy": (teamId, options) => HttpClientRequest.get(`/teams/${teamId}/teams`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamsListChildLegacy200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "usersGetAuthenticated": () => HttpClientRequest.get(`/user`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersGetAuthenticated200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersUpdateAuthenticated": (options) => HttpClientRequest.patch(`/user`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PrivateUser),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersListBlockedByAuthenticatedUser": (options) => HttpClientRequest.get(`/user/blocks`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersListBlockedByAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersCheckBlocked": (username, options) => HttpClientRequest.get(`/user/blocks/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersBlock": (username, options) => HttpClientRequest.put(`/user/blocks/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersUnblock": (username, options) => HttpClientRequest.del(`/user/blocks/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesListForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/codespaces`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "repository_id": options?.["repository_id"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesListForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesCreateForAuthenticatedUser": (options) => HttpClientRequest.post(`/user/codespaces`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "201": decodeSuccess(Codespace),
      "202": decodeSuccess(Codespace),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "503": decodeError("CodespacesCreateForAuthenticatedUser503", CodespacesCreateForAuthenticatedUser503),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesListSecretsForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/codespaces/secrets`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesListSecretsForAuthenticatedUser200),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesGetPublicKeyForAuthenticatedUser": () => HttpClientRequest.get(`/user/codespaces/secrets/public-key`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesUserPublicKey),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesGetSecretForAuthenticatedUser": (secretName, options) => HttpClientRequest.get(`/user/codespaces/secrets/${secretName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesSecret),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesCreateOrUpdateSecretForAuthenticatedUser": (secretName, options) => HttpClientRequest.put(`/user/codespaces/secrets/${secretName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(EmptyObject),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesDeleteSecretForAuthenticatedUser": (secretName, options) => HttpClientRequest.del(`/user/codespaces/secrets/${secretName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesListRepositoriesForSecretForAuthenticatedUser": (secretName, options) => HttpClientRequest.get(`/user/codespaces/secrets/${secretName}/repositories`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesListRepositoriesForSecretForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesSetRepositoriesForSecretForAuthenticatedUser": (secretName, options) => HttpClientRequest.put(`/user/codespaces/secrets/${secretName}/repositories`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesAddRepositoryForSecretForAuthenticatedUser": (secretName, repositoryId, options) => HttpClientRequest.put(`/user/codespaces/secrets/${secretName}/repositories/${repositoryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesRemoveRepositoryForSecretForAuthenticatedUser": (secretName, repositoryId, options) => HttpClientRequest.del(`/user/codespaces/secrets/${secretName}/repositories/${repositoryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesGetForAuthenticatedUser": (codespaceName, options) => HttpClientRequest.get(`/user/codespaces/${codespaceName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Codespace),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesDeleteForAuthenticatedUser": (codespaceName, options) => HttpClientRequest.del(`/user/codespaces/${codespaceName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesDeleteForAuthenticatedUser202),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesUpdateForAuthenticatedUser": (codespaceName, options) => HttpClientRequest.patch(`/user/codespaces/${codespaceName}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Codespace),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesExportForAuthenticatedUser": (codespaceName, options) => HttpClientRequest.post(`/user/codespaces/${codespaceName}/exports`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespaceExportDetails),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesGetExportDetailsForAuthenticatedUser": (codespaceName, exportId, options) => HttpClientRequest.get(`/user/codespaces/${codespaceName}/exports/${exportId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespaceExportDetails),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesCodespaceMachinesForAuthenticatedUser": (codespaceName, options) => HttpClientRequest.get(`/user/codespaces/${codespaceName}/machines`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespacesCodespaceMachinesForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesPublishForAuthenticatedUser": (codespaceName, options) => HttpClientRequest.post(`/user/codespaces/${codespaceName}/publish`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CodespaceWithFullRepository),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "codespacesStartForAuthenticatedUser": (codespaceName, options) => HttpClientRequest.post(`/user/codespaces/${codespaceName}/start`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Codespace),
      "400": decodeError("BasicError", BasicError),
      "401": decodeError("BasicError", BasicError),
      "402": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "codespacesStopForAuthenticatedUser": (codespaceName, options) => HttpClientRequest.post(`/user/codespaces/${codespaceName}/stop`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Codespace),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "packagesListDockerMigrationConflictingPackagesForAuthenticatedUser": () => HttpClientRequest.get(`/user/docker/conflicts`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PackagesListDockerMigrationConflictingPackagesForAuthenticatedUser200),
      orElse: unexpectedStatus
    }))
  ),
  "usersSetPrimaryEmailVisibilityForAuthenticatedUser": (options) => HttpClientRequest.patch(`/user/email/visibility`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersSetPrimaryEmailVisibilityForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersListEmailsForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/emails`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersListEmailsForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersAddEmailForAuthenticatedUser": (options) => HttpClientRequest.post(`/user/emails`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersAddEmailForAuthenticatedUser201),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersDeleteEmailForAuthenticatedUser": (options) => HttpClientRequest.del(`/user/emails`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersListFollowersForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/followers`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersListFollowersForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersListFollowedByAuthenticatedUser": (options) => HttpClientRequest.get(`/user/following`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersListFollowedByAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersCheckPersonIsFollowedByAuthenticated": (username, options) => HttpClientRequest.get(`/user/following/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersFollow": (username, options) => HttpClientRequest.put(`/user/following/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersUnfollow": (username, options) => HttpClientRequest.del(`/user/following/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersListGpgKeysForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/gpg_keys`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersListGpgKeysForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersCreateGpgKeyForAuthenticatedUser": (options) => HttpClientRequest.post(`/user/gpg_keys`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GpgKey),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersGetGpgKeyForAuthenticatedUser": (gpgKeyId, options) => HttpClientRequest.get(`/user/gpg_keys/${gpgKeyId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GpgKey),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersDeleteGpgKeyForAuthenticatedUser": (gpgKeyId, options) => HttpClientRequest.del(`/user/gpg_keys/${gpgKeyId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "appsListInstallationsForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/installations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppsListInstallationsForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "appsListInstallationReposForAuthenticatedUser": (installationId, options) => HttpClientRequest.get(`/user/installations/${installationId}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppsListInstallationReposForAuthenticatedUser200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "appsAddRepoToInstallationForAuthenticatedUser": (installationId, repositoryId, options) => HttpClientRequest.put(`/user/installations/${installationId}/repositories/${repositoryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "appsRemoveRepoFromInstallationForAuthenticatedUser": (installationId, repositoryId, options) => HttpClientRequest.del(`/user/installations/${installationId}/repositories/${repositoryId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      "422": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "interactionsGetRestrictionsForAuthenticatedUser": () => HttpClientRequest.get(`/user/interaction-limits`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(InteractionsGetRestrictionsForAuthenticatedUser200),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "interactionsSetRestrictionsForAuthenticatedUser": (options) => HttpClientRequest.put(`/user/interaction-limits`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(InteractionLimitResponse),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "interactionsRemoveRestrictionsForAuthenticatedUser": () => HttpClientRequest.del(`/user/interaction-limits`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "issuesListForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/issues`).pipe(
    HttpClientRequest.setUrlParams({ "filter": options?.["filter"] as any, "state": options?.["state"] as any, "labels": options?.["labels"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(IssuesListForAuthenticatedUser200),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersListPublicSshKeysForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/keys`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersListPublicSshKeysForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersCreatePublicSshKeyForAuthenticatedUser": (options) => HttpClientRequest.post(`/user/keys`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Key),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersGetPublicSshKeyForAuthenticatedUser": (keyId, options) => HttpClientRequest.get(`/user/keys/${keyId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Key),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersDeletePublicSshKeyForAuthenticatedUser": (keyId, options) => HttpClientRequest.del(`/user/keys/${keyId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "appsListSubscriptionsForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/marketplace_purchases`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppsListSubscriptionsForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "appsListSubscriptionsForAuthenticatedUserStubbed": (options) => HttpClientRequest.get(`/user/marketplace_purchases/stubbed`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(AppsListSubscriptionsForAuthenticatedUserStubbed200),
      "401": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsListMembershipsForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/memberships/orgs`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListMembershipsForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "orgsGetMembershipForAuthenticatedUser": (org, options) => HttpClientRequest.get(`/user/memberships/orgs/${org}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgMembership),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsUpdateMembershipForAuthenticatedUser": (org, options) => HttpClientRequest.patch(`/user/memberships/orgs/${org}`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgMembership),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "migrationsListForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/migrations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(MigrationsListForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "migrationsStartForAuthenticatedUser": (options) => HttpClientRequest.post(`/user/migrations`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Migration),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "migrationsGetStatusForAuthenticatedUser": (migrationId, options) => HttpClientRequest.get(`/user/migrations/${migrationId}`).pipe(
    HttpClientRequest.setUrlParams({ "exclude": options?.["exclude"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Migration),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "migrationsGetArchiveForAuthenticatedUser": (migrationId, options) => HttpClientRequest.get(`/user/migrations/${migrationId}/archive`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "302": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "migrationsDeleteArchiveForAuthenticatedUser": (migrationId, options) => HttpClientRequest.del(`/user/migrations/${migrationId}/archive`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "migrationsUnlockRepoForAuthenticatedUser": (migrationId, repoName, options) => HttpClientRequest.del(`/user/migrations/${migrationId}/repos/${repoName}/lock`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "migrationsListReposForAuthenticatedUser": (migrationId, options) => HttpClientRequest.get(`/user/migrations/${migrationId}/repositories`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(MigrationsListReposForAuthenticatedUser200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "orgsListForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/orgs`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "packagesListPackagesForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/packages`).pipe(
    HttpClientRequest.setUrlParams({ "package_type": options?.["package_type"] as any, "visibility": options?.["visibility"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PackagesListPackagesForAuthenticatedUser200),
      "400": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "packagesGetPackageForAuthenticatedUser": (packageType, packageName, options) => HttpClientRequest.get(`/user/packages/${packageType}/${packageName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Package),
      orElse: unexpectedStatus
    }))
  ),
  "packagesDeletePackageForAuthenticatedUser": (packageType, packageName, options) => HttpClientRequest.del(`/user/packages/${packageType}/${packageName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "packagesRestorePackageForAuthenticatedUser": (packageType, packageName, options) => HttpClientRequest.post(`/user/packages/${packageType}/${packageName}/restore`).pipe(
    HttpClientRequest.setUrlParams({ "token": options?.["token"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser": (packageType, packageName, options) => HttpClientRequest.get(`/user/packages/${packageType}/${packageName}/versions`).pipe(
    HttpClientRequest.setUrlParams({ "page": options?.["page"] as any, "per_page": options?.["per_page"] as any, "state": options?.["state"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "packagesGetPackageVersionForAuthenticatedUser": (packageType, packageName, packageVersionId, options) => HttpClientRequest.get(`/user/packages/${packageType}/${packageName}/versions/${packageVersionId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PackageVersion),
      orElse: unexpectedStatus
    }))
  ),
  "packagesDeletePackageVersionForAuthenticatedUser": (packageType, packageName, packageVersionId, options) => HttpClientRequest.del(`/user/packages/${packageType}/${packageName}/versions/${packageVersionId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "packagesRestorePackageVersionForAuthenticatedUser": (packageType, packageName, packageVersionId, options) => HttpClientRequest.post(`/user/packages/${packageType}/${packageName}/versions/${packageVersionId}/restore`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicCreateForAuthenticatedUser": (options) => HttpClientRequest.post(`/user/projects`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Project),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationErrorSimple", ValidationErrorSimple),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersListPublicEmailsForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/public_emails`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersListPublicEmailsForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposListForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/repos`).pipe(
    HttpClientRequest.setUrlParams({ "visibility": options?.["visibility"] as any, "affiliation": options?.["affiliation"] as any, "type": options?.["type"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any, "since": options?.["since"] as any, "before": options?.["before"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposCreateForAuthenticatedUser": (options) => HttpClientRequest.post(`/user/repos`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(FullRepository),
      "400": decodeError("BasicError", BasicError),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposListInvitationsForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/repository_invitations`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListInvitationsForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposDeclineInvitationForAuthenticatedUser": (invitationId, options) => HttpClientRequest.del(`/user/repository_invitations/${invitationId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "reposAcceptInvitationForAuthenticatedUser": (invitationId, options) => HttpClientRequest.patch(`/user/repository_invitations/${invitationId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "409": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersListSocialAccountsForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/social_accounts`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersListSocialAccountsForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersAddSocialAccountForAuthenticatedUser": (options) => HttpClientRequest.post(`/user/social_accounts`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersAddSocialAccountForAuthenticatedUser201),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersDeleteSocialAccountForAuthenticatedUser": (options) => HttpClientRequest.del(`/user/social_accounts`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersListSshSigningKeysForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/ssh_signing_keys`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersListSshSigningKeysForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersCreateSshSigningKeyForAuthenticatedUser": (options) => HttpClientRequest.post(`/user/ssh_signing_keys`).pipe(
    HttpClientRequest.bodyUnsafeJson(options),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SshSigningKey),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersGetSshSigningKeyForAuthenticatedUser": (sshSigningKeyId, options) => HttpClientRequest.get(`/user/ssh_signing_keys/${sshSigningKeyId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(SshSigningKey),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersDeleteSshSigningKeyForAuthenticatedUser": (sshSigningKeyId, options) => HttpClientRequest.del(`/user/ssh_signing_keys/${sshSigningKeyId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "activityListReposStarredByAuthenticatedUser": (options) => HttpClientRequest.get(`/user/starred`).pipe(
    HttpClientRequest.setUrlParams({ "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActivityListReposStarredByAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "activityCheckRepoIsStarredByAuthenticatedUser": (owner, repo, options) => HttpClientRequest.get(`/user/starred/${owner}/${repo}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "activityStarRepoForAuthenticatedUser": (owner, repo, options) => HttpClientRequest.put(`/user/starred/${owner}/${repo}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "activityUnstarRepoForAuthenticatedUser": (owner, repo, options) => HttpClientRequest.del(`/user/starred/${owner}/${repo}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "activityListWatchedReposForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/subscriptions`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActivityListWatchedReposForAuthenticatedUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "teamsListForAuthenticatedUser": (options) => HttpClientRequest.get(`/user/teams`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(TeamsListForAuthenticatedUser200),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersGetById": (accountId, options) => HttpClientRequest.get(`/user/${accountId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersGetById200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "usersList": (options) => HttpClientRequest.get(`/users`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersList200),
      "304": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersGetByUsername": (username, options) => HttpClientRequest.get(`/users/${username}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersGetByUsername200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "usersListAttestationsBulk": (username, options) => HttpClientRequest.post(`/users/${username}/attestations/bulk-list`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options.params?.["per_page"] as any, "before": options.params?.["before"] as any, "after": options.params?.["after"] as any }),
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersListAttestationsBulk200),
      orElse: unexpectedStatus
    }))
  ),
  "usersDeleteAttestationsBulk": (username, options) => HttpClientRequest.post(`/users/${username}/attestations/delete-request`).pipe(
    HttpClientRequest.bodyUnsafeJson(options.payload),
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "200": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersDeleteAttestationsBySubjectDigest": (username, subjectDigest, options) => HttpClientRequest.del(`/users/${username}/attestations/digest/${subjectDigest}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "404": decodeError("BasicError", BasicError),
      "200": () => Effect.void,
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersDeleteAttestationsById": (username, attestationId, options) => HttpClientRequest.del(`/users/${username}/attestations/${attestationId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "200": () => Effect.void,
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "usersListAttestations": (username, subjectDigest, options) => HttpClientRequest.get(`/users/${username}/attestations/${subjectDigest}`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "before": options?.["before"] as any, "after": options?.["after"] as any, "predicate_type": options?.["predicate_type"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "200": decodeSuccess(UsersListAttestations200),
      "201": decodeSuccess(EmptyObject),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "packagesListDockerMigrationConflictingPackagesForUser": (username, options) => HttpClientRequest.get(`/users/${username}/docker/conflicts`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PackagesListDockerMigrationConflictingPackagesForUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "activityListEventsForAuthenticatedUser": (username, options) => HttpClientRequest.get(`/users/${username}/events`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActivityListEventsForAuthenticatedUser200),
      orElse: unexpectedStatus
    }))
  ),
  "activityListOrgEventsForAuthenticatedUser": (username, org, options) => HttpClientRequest.get(`/users/${username}/events/orgs/${org}`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActivityListOrgEventsForAuthenticatedUser200),
      orElse: unexpectedStatus
    }))
  ),
  "activityListPublicEventsForUser": (username, options) => HttpClientRequest.get(`/users/${username}/events/public`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActivityListPublicEventsForUser200),
      orElse: unexpectedStatus
    }))
  ),
  "usersListFollowersForUser": (username, options) => HttpClientRequest.get(`/users/${username}/followers`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersListFollowersForUser200),
      orElse: unexpectedStatus
    }))
  ),
  "usersListFollowingForUser": (username, options) => HttpClientRequest.get(`/users/${username}/following`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersListFollowingForUser200),
      orElse: unexpectedStatus
    }))
  ),
  "usersCheckFollowingForUser": (username, targetUser, options) => HttpClientRequest.get(`/users/${username}/following/${targetUser}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "204": () => Effect.void,
      "404": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "gistsListForUser": (username, options) => HttpClientRequest.get(`/users/${username}/gists`).pipe(
    HttpClientRequest.setUrlParams({ "since": options?.["since"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(GistsListForUser200),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "usersListGpgKeysForUser": (username, options) => HttpClientRequest.get(`/users/${username}/gpg_keys`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersListGpgKeysForUser200),
      orElse: unexpectedStatus
    }))
  ),
  "usersGetContextForUser": (username, options) => HttpClientRequest.get(`/users/${username}/hovercard`).pipe(
    HttpClientRequest.setUrlParams({ "subject_type": options?.["subject_type"] as any, "subject_id": options?.["subject_id"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Hovercard),
      "404": decodeError("BasicError", BasicError),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "appsGetUserInstallation": (username, options) => HttpClientRequest.get(`/users/${username}/installation`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Installation),
      orElse: unexpectedStatus
    }))
  ),
  "usersListPublicKeysForUser": (username, options) => HttpClientRequest.get(`/users/${username}/keys`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersListPublicKeysForUser200),
      orElse: unexpectedStatus
    }))
  ),
  "orgsListForUser": (username, options) => HttpClientRequest.get(`/users/${username}/orgs`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(OrgsListForUser200),
      orElse: unexpectedStatus
    }))
  ),
  "packagesListPackagesForUser": (username, options) => HttpClientRequest.get(`/users/${username}/packages`).pipe(
    HttpClientRequest.setUrlParams({ "package_type": options?.["package_type"] as any, "visibility": options?.["visibility"] as any, "page": options?.["page"] as any, "per_page": options?.["per_page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PackagesListPackagesForUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "400": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "packagesGetPackageForUser": (username, packageType, packageName, options) => HttpClientRequest.get(`/users/${username}/packages/${packageType}/${packageName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(Package),
      orElse: unexpectedStatus
    }))
  ),
  "packagesDeletePackageForUser": (username, packageType, packageName, options) => HttpClientRequest.del(`/users/${username}/packages/${packageType}/${packageName}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "packagesRestorePackageForUser": (username, packageType, packageName, options) => HttpClientRequest.post(`/users/${username}/packages/${packageType}/${packageName}/restore`).pipe(
    HttpClientRequest.setUrlParams({ "token": options?.["token"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "packagesGetAllPackageVersionsForPackageOwnedByUser": (username, packageType, packageName, options) => HttpClientRequest.get(`/users/${username}/packages/${packageType}/${packageName}/versions`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PackagesGetAllPackageVersionsForPackageOwnedByUser200),
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "packagesGetPackageVersionForUser": (username, packageType, packageName, packageVersionId, options) => HttpClientRequest.get(`/users/${username}/packages/${packageType}/${packageName}/versions/${packageVersionId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PackageVersion),
      orElse: unexpectedStatus
    }))
  ),
  "packagesDeletePackageVersionForUser": (username, packageType, packageName, packageVersionId, options) => HttpClientRequest.del(`/users/${username}/packages/${packageType}/${packageName}/versions/${packageVersionId}`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "packagesRestorePackageVersionForUser": (username, packageType, packageName, packageVersionId, options) => HttpClientRequest.post(`/users/${username}/packages/${packageType}/${packageName}/versions/${packageVersionId}/restore`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "401": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "404": decodeError("BasicError", BasicError),
      "204": () => Effect.void,
      orElse: unexpectedStatus
    }))
  ),
  "projectsClassicListForUser": (username, options) => HttpClientRequest.get(`/users/${username}/projects`).pipe(
    HttpClientRequest.setUrlParams({ "state": options?.["state"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ProjectsClassicListForUser200),
      "422": decodeError("ValidationError", ValidationError),
      orElse: unexpectedStatus
    }))
  ),
  "activityListReceivedEventsForUser": (username, options) => HttpClientRequest.get(`/users/${username}/received_events`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActivityListReceivedEventsForUser200),
      orElse: unexpectedStatus
    }))
  ),
  "activityListReceivedPublicEventsForUser": (username, options) => HttpClientRequest.get(`/users/${username}/received_events/public`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActivityListReceivedPublicEventsForUser200),
      orElse: unexpectedStatus
    }))
  ),
  "reposListForUser": (username, options) => HttpClientRequest.get(`/users/${username}/repos`).pipe(
    HttpClientRequest.setUrlParams({ "type": options?.["type"] as any, "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ReposListForUser200),
      orElse: unexpectedStatus
    }))
  ),
  "billingGetGithubActionsBillingUser": (username, options) => HttpClientRequest.get(`/users/${username}/settings/billing/actions`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActionsBillingUsage),
      orElse: unexpectedStatus
    }))
  ),
  "billingGetGithubPackagesBillingUser": (username, options) => HttpClientRequest.get(`/users/${username}/settings/billing/packages`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(PackagesBillingUsage),
      orElse: unexpectedStatus
    }))
  ),
  "billingGetSharedStorageBillingUser": (username, options) => HttpClientRequest.get(`/users/${username}/settings/billing/shared-storage`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(CombinedBillingUsage),
      orElse: unexpectedStatus
    }))
  ),
  "billingGetGithubBillingUsageReportUser": (username, options) => HttpClientRequest.get(`/users/${username}/settings/billing/usage`).pipe(
    HttpClientRequest.setUrlParams({ "year": options?.["year"] as any, "month": options?.["month"] as any, "day": options?.["day"] as any, "hour": options?.["hour"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(BillingUsageReportUser),
      "400": decodeError("BasicError", BasicError),
      "403": decodeError("BasicError", BasicError),
      "500": decodeError("BasicError", BasicError),
      "503": decodeError("BillingGetGithubBillingUsageReportUser503", BillingGetGithubBillingUsageReportUser503),
      orElse: unexpectedStatus
    }))
  ),
  "usersListSocialAccountsForUser": (username, options) => HttpClientRequest.get(`/users/${username}/social_accounts`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersListSocialAccountsForUser200),
      orElse: unexpectedStatus
    }))
  ),
  "usersListSshSigningKeysForUser": (username, options) => HttpClientRequest.get(`/users/${username}/ssh_signing_keys`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(UsersListSshSigningKeysForUser200),
      orElse: unexpectedStatus
    }))
  ),
  "activityListReposStarredByUser": (username, options) => HttpClientRequest.get(`/users/${username}/starred`).pipe(
    HttpClientRequest.setUrlParams({ "sort": options?.["sort"] as any, "direction": options?.["direction"] as any, "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActivityListReposStarredByUser200),
      orElse: unexpectedStatus
    }))
  ),
  "activityListReposWatchedByUser": (username, options) => HttpClientRequest.get(`/users/${username}/subscriptions`).pipe(
    HttpClientRequest.setUrlParams({ "per_page": options?.["per_page"] as any, "page": options?.["page"] as any }),
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(ActivityListReposWatchedByUser200),
      orElse: unexpectedStatus
    }))
  ),
  "metaGetAllVersions": () => HttpClientRequest.get(`/versions`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      "2xx": decodeSuccess(MetaGetAllVersions200),
      "404": decodeError("BasicError", BasicError),
      orElse: unexpectedStatus
    }))
  ),
  "metaGetZen": () => HttpClientRequest.get(`/zen`).pipe(
    withResponse(HttpClientResponse.matchStatus({
      orElse: unexpectedStatus
    }))
  )
  }
}

export interface Client {
  readonly httpClient: HttpClient.HttpClient
  /**
* Get Hypermedia links to resources accessible in GitHub's REST API
*/
readonly "metaRoot": () => Effect.Effect<typeof Root.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all global security advisories that match the specified parameters. If no other parameters are defined, the request will return only GitHub-reviewed advisories that are not malware.
* 
* By default, all responses will exclude advisories for malware, because malware are not standard vulnerabilities. To list advisories for malware, you must include the `type` parameter in your request, with the value `malware`. For more information about the different types of security advisories, see "[About the GitHub Advisory database](https://docs.github.com/code-security/security-advisories/global-security-advisories/about-the-github-advisory-database#about-types-of-security-advisories)."
*/
readonly "securityAdvisoriesListGlobalAdvisories": (options?: typeof SecurityAdvisoriesListGlobalAdvisoriesParams.Encoded | undefined) => Effect.Effect<typeof SecurityAdvisoriesListGlobalAdvisories200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets a global security advisory using its GitHub Security Advisory (GHSA) identifier.
*/
readonly "securityAdvisoriesGetGlobalAdvisory": (ghsaId: string, options?: typeof SecurityAdvisoriesGetGlobalAdvisoryParams.Encoded | undefined) => Effect.Effect<typeof GlobalAdvisory.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/apps/apps#list-installations-for-the-authenticated-app)" endpoint.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsGetAuthenticated": () => Effect.Effect<typeof Integration.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
*/
readonly "appsCreateFromManifest": (code: string) => Effect.Effect<typeof AppsCreateFromManifest201.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsGetWebhookConfigForApp": () => Effect.Effect<typeof WebhookConfig.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsUpdateWebhookConfigForApp": (options: typeof AppsUpdateWebhookConfigForAppRequest.Encoded) => Effect.Effect<typeof WebhookConfig.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Returns a list of webhook deliveries for the webhook configured for a GitHub App.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsListWebhookDeliveries": (options?: typeof AppsListWebhookDeliveriesParams.Encoded | undefined) => Effect.Effect<typeof AppsListWebhookDeliveries200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Returns a delivery for the webhook configured for a GitHub App.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsGetWebhookDelivery": (deliveryId: string, options?: typeof AppsGetWebhookDeliveryParams.Encoded | undefined) => Effect.Effect<typeof HookDelivery.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Redeliver a delivery for the webhook configured for a GitHub App.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsRedeliverWebhookDelivery": (deliveryId: string, options?: typeof AppsRedeliverWebhookDeliveryParams.Encoded | undefined) => Effect.Effect<typeof AppsRedeliverWebhookDelivery202.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists all the pending installation requests for the authenticated GitHub App.
*/
readonly "appsListInstallationRequestsForAuthenticatedApp": (options?: typeof AppsListInstallationRequestsForAuthenticatedAppParams.Encoded | undefined) => Effect.Effect<typeof AppsListInstallationRequestsForAuthenticatedApp200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* The permissions the installation has are included under the `permissions` key.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsListInstallations": (options?: typeof AppsListInstallationsParams.Encoded | undefined) => Effect.Effect<typeof AppsListInstallations200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Enables an authenticated GitHub App to find an installation's information using the installation id.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsGetInstallation": (installationId: string, options?: typeof AppsGetInstallationParams.Encoded | undefined) => Effect.Effect<typeof Installation.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Uninstalls a GitHub App on a user, organization, or enterprise account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/apps/apps#suspend-an-app-installation)" endpoint.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsDeleteInstallation": (installationId: string, options?: typeof AppsDeleteInstallationParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access.
* 
* Optionally, you can use the `repositories` or `repository_ids` body parameters to specify individual repositories that the installation access token can access. If you don't use `repositories` or `repository_ids` to grant access to specific repositories, the installation access token will have access to all repositories that the installation was granted access to. The installation access token cannot be granted access to repositories that the installation was not granted access to. Up to 500 repositories can be listed in this manner.
* 
* Optionally, use the `permissions` body parameter to specify the permissions that the installation access token should have. If `permissions` is not specified, the installation access token will have all of the permissions that were granted to the app. The installation access token cannot be granted permissions that the app was not granted.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsCreateInstallationAccessToken": (installationId: string, options: { readonly params?: typeof AppsCreateInstallationAccessTokenParams.Encoded | undefined; readonly payload: typeof AppsCreateInstallationAccessTokenRequest.Encoded }) => Effect.Effect<typeof InstallationToken.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Suspends a GitHub App on a user, organization, or enterprise account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsSuspendInstallation": (installationId: string, options?: typeof AppsSuspendInstallationParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Removes a GitHub App installation suspension.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsUnsuspendInstallation": (installationId: string, options?: typeof AppsUnsuspendInstallationParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* OAuth and GitHub application owners can revoke a grant for their application and a specific user. You must provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
* Deleting an application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
*/
readonly "appsDeleteAuthorization": (clientId: string, options: { readonly params?: typeof AppsDeleteAuthorizationParams.Encoded | undefined; readonly payload: typeof AppsDeleteAuthorizationRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* OAuth applications and GitHub applications with OAuth authorizations can use this API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. Invalid tokens will return `404 NOT FOUND`.
*/
readonly "appsCheckToken": (clientId: string, options: { readonly params?: typeof AppsCheckTokenParams.Encoded | undefined; readonly payload: typeof AppsCheckTokenRequest.Encoded }) => Effect.Effect<typeof Authorization.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* OAuth  or GitHub application owners can revoke a single token for an OAuth application or a GitHub application with an OAuth authorization.
*/
readonly "appsDeleteToken": (clientId: string, options: { readonly params?: typeof AppsDeleteTokenParams.Encoded | undefined; readonly payload: typeof AppsDeleteTokenRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* OAuth applications and GitHub applications with OAuth authorizations can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. Invalid tokens will return `404 NOT FOUND`.
*/
readonly "appsResetToken": (clientId: string, options: { readonly params?: typeof AppsResetTokenParams.Encoded | undefined; readonly payload: typeof AppsResetTokenRequest.Encoded }) => Effect.Effect<typeof Authorization.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Use a non-scoped user access token to create a repository-scoped and/or permission-scoped user access token. You can specify
* which repositories the token can access and which permissions are granted to the
* token.
* 
* Invalid tokens will return `404 NOT FOUND`.
*/
readonly "appsScopeToken": (clientId: string, options: { readonly params?: typeof AppsScopeTokenParams.Encoded | undefined; readonly payload: typeof AppsScopeTokenRequest.Encoded }) => Effect.Effect<typeof Authorization.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* > [!NOTE]
* > The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
*/
readonly "appsGetBySlug": (appSlug: string, options?: typeof AppsGetBySlugParams.Encoded | undefined) => Effect.Effect<typeof Integration.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets a GitHub Classroom assignment. Assignment will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
*/
readonly "classroomGetAnAssignment": (assignmentId: string, options?: typeof ClassroomGetAnAssignmentParams.Encoded | undefined) => Effect.Effect<typeof ClassroomAssignment.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists any assignment repositories that have been created by students accepting a GitHub Classroom assignment. Accepted assignments will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
*/
readonly "classroomListAcceptedAssignmentsForAnAssignment": (assignmentId: string, options?: typeof ClassroomListAcceptedAssignmentsForAnAssignmentParams.Encoded | undefined) => Effect.Effect<typeof ClassroomListAcceptedAssignmentsForAnAssignment200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets grades for a GitHub Classroom assignment. Grades will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
*/
readonly "classroomGetAssignmentGrades": (assignmentId: string, options?: typeof ClassroomGetAssignmentGradesParams.Encoded | undefined) => Effect.Effect<typeof ClassroomGetAssignmentGrades200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists GitHub Classroom classrooms for the current user. Classrooms will only be returned if the current user is an administrator of one or more GitHub Classrooms.
*/
readonly "classroomListClassrooms": (options?: typeof ClassroomListClassroomsParams.Encoded | undefined) => Effect.Effect<typeof ClassroomListClassrooms200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a GitHub Classroom classroom for the current user. Classroom will only be returned if the current user is an administrator of the GitHub Classroom.
*/
readonly "classroomGetAClassroom": (classroomId: string, options?: typeof ClassroomGetAClassroomParams.Encoded | undefined) => Effect.Effect<typeof Classroom.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists GitHub Classroom assignments for a classroom. Assignments will only be returned if the current user is an administrator of the GitHub Classroom.
*/
readonly "classroomListAssignmentsForAClassroom": (classroomId: string, options?: typeof ClassroomListAssignmentsForAClassroomParams.Encoded | undefined) => Effect.Effect<typeof ClassroomListAssignmentsForAClassroom200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Returns array of all GitHub's codes of conduct.
*/
readonly "codesOfConductGetAllCodesOfConduct": () => Effect.Effect<typeof CodesOfConductGetAllCodesOfConduct200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Returns information about the specified GitHub code of conduct.
*/
readonly "codesOfConductGetConductCode": (key: string) => Effect.Effect<typeof CodeOfConduct.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Submit a list of credentials to be revoked. This endpoint is intended to revoke credentials the caller does not own and may have found exposed on GitHub.com or elsewhere. It can also be used for credentials associated with an old user account that you no longer have access to. Credential owners will be notified of the revocation.
* 
* This endpoint currently accepts the following credential types:
* - Personal access tokens (classic)
* - Fine-grained personal access tokens
* 
* Revoked credentials may impact users on GitHub Free, Pro, & Team and GitHub Enterprise Cloud, and GitHub Enterprise Cloud with Enterprise Managed Users.
* GitHub cannot reactivate any credentials that have been revoked; new credentials will need to be generated.
* 
* To prevent abuse, this API is limited to only 60 unauthenticated requests per hour and a max of 1000 tokens per API request.
* 
* > [!NOTE]
* > Any authenticated requests will return a 403.
*/
readonly "credentialsRevoke": (options: typeof CredentialsRevokeRequest.Encoded) => Effect.Effect<typeof CredentialsRevoke202.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists all the emojis available to use on GitHub.
*/
readonly "emojisGet": () => Effect.Effect<typeof EmojisGet200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all code security configurations available in an enterprise.
* 
* The authenticated user must be an administrator of the enterprise in order to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.
*/
readonly "codeSecurityGetConfigurationsForEnterprise": (enterprise: string, options?: typeof CodeSecurityGetConfigurationsForEnterpriseParams.Encoded | undefined) => Effect.Effect<typeof CodeSecurityGetConfigurationsForEnterprise200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Creates a code security configuration in an enterprise.
* 
* The authenticated user must be an administrator of the enterprise in order to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
*/
readonly "codeSecurityCreateConfigurationForEnterprise": (enterprise: string, options: { readonly params?: typeof CodeSecurityCreateConfigurationForEnterpriseParams.Encoded | undefined; readonly payload: typeof CodeSecurityCreateConfigurationForEnterpriseRequest.Encoded }) => Effect.Effect<typeof CodeSecurityConfiguration.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists the default code security configurations for an enterprise.
* 
* The authenticated user must be an administrator of the enterprise in order to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.
*/
readonly "codeSecurityGetDefaultConfigurationsForEnterprise": (enterprise: string, options?: typeof CodeSecurityGetDefaultConfigurationsForEnterpriseParams.Encoded | undefined) => Effect.Effect<typeof CodeSecurityDefaultConfigurations.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a code security configuration available in an enterprise.
* 
* The authenticated user must be an administrator of the enterprise in order to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.
*/
readonly "codeSecurityGetSingleConfigurationForEnterprise": (enterprise: string, configurationId: string, options?: typeof CodeSecurityGetSingleConfigurationForEnterpriseParams.Encoded | undefined) => Effect.Effect<typeof CodeSecurityConfiguration.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Deletes a code security configuration from an enterprise.
* Repositories attached to the configuration will retain their settings but will no longer be associated with
* the configuration.
* 
* The authenticated user must be an administrator for the enterprise to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
*/
readonly "codeSecurityDeleteConfigurationForEnterprise": (enterprise: string, configurationId: string, options?: typeof CodeSecurityDeleteConfigurationForEnterpriseParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Updates a code security configuration in an enterprise.
* 
* The authenticated user must be an administrator of the enterprise in order to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
*/
readonly "codeSecurityUpdateEnterpriseConfiguration": (enterprise: string, configurationId: string, options: { readonly params?: typeof CodeSecurityUpdateEnterpriseConfigurationParams.Encoded | undefined; readonly payload: typeof CodeSecurityUpdateEnterpriseConfigurationRequest.Encoded }) => Effect.Effect<typeof CodeSecurityConfiguration.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Attaches an enterprise code security configuration to repositories. If the repositories specified are already attached to a configuration, they will be re-attached to the provided configuration.
* 
* If insufficient GHAS licenses are available to attach the configuration to a repository, only free features will be enabled.
* 
* The authenticated user must be an administrator for the enterprise to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
*/
readonly "codeSecurityAttachEnterpriseConfiguration": (enterprise: string, configurationId: string, options: { readonly params?: typeof CodeSecurityAttachEnterpriseConfigurationParams.Encoded | undefined; readonly payload: typeof CodeSecurityAttachEnterpriseConfigurationRequest.Encoded }) => Effect.Effect<typeof CodeSecurityAttachEnterpriseConfiguration202.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Sets a code security configuration as a default to be applied to new repositories in your enterprise.
* 
* This configuration will be applied by default to the matching repository type when created, but only for organizations within the enterprise that do not already have a default code security configuration set.
* 
* The authenticated user must be an administrator for the enterprise to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:enterprise` scope to use this endpoint.
*/
readonly "codeSecuritySetConfigurationAsDefaultForEnterprise": (enterprise: string, configurationId: string, options: { readonly params?: typeof CodeSecuritySetConfigurationAsDefaultForEnterpriseParams.Encoded | undefined; readonly payload: typeof CodeSecuritySetConfigurationAsDefaultForEnterpriseRequest.Encoded }) => Effect.Effect<typeof CodeSecuritySetConfigurationAsDefaultForEnterprise200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists the repositories associated with an enterprise code security configuration in an organization.
* 
* The authenticated user must be an administrator of the enterprise in order to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:enterprise` scope to use this endpoint.
*/
readonly "codeSecurityGetRepositoriesForEnterpriseConfiguration": (enterprise: string, configurationId: string, options?: typeof CodeSecurityGetRepositoriesForEnterpriseConfigurationParams.Encoded | undefined) => Effect.Effect<typeof CodeSecurityGetRepositoriesForEnterpriseConfiguration200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists Dependabot alerts for repositories that are owned by the specified enterprise.
* 
* The authenticated user must be a member of the enterprise to use this endpoint.
* 
* Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint.
*/
readonly "dependabotListAlertsForEnterprise": (enterprise: string, options?: typeof DependabotListAlertsForEnterpriseParams.Encoded | undefined) => Effect.Effect<typeof DependabotListAlertsForEnterprise200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
* 
* Alerts are only returned for organizations in the enterprise for which the authenticated user is an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
* 
* The authenticated user must be a member of the enterprise in order to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope or `security_events` scope to use this endpoint.
*/
readonly "secretScanningListAlertsForEnterprise": (enterprise: string, options?: typeof SecretScanningListAlertsForEnterpriseParams.Encoded | undefined) => Effect.Effect<typeof SecretScanningListAlertsForEnterprise200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"SecretScanningListAlertsForEnterprise503", typeof SecretScanningListAlertsForEnterprise503.Type>>
  /**
* > [!NOTE]
* > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
*/
readonly "activityListPublicEvents": (options?: typeof ActivityListPublicEventsParams.Encoded | undefined) => Effect.Effect<typeof ActivityListPublicEvents200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ActivityListPublicEvents503", typeof ActivityListPublicEvents503.Type>>
  /**
* Lists the feeds available to the authenticated user. The response provides a URL for each feed. You can then get a specific feed by sending a request to one of the feed URLs.
* 
* *   **Timeline**: The GitHub global public timeline
* *   **User**: The public timeline for any user, using `uri_template`. For more information, see "[Hypermedia](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
* *   **Current user public**: The public timeline for the authenticated user
* *   **Current user**: The private timeline for the authenticated user
* *   **Current user actor**: The private timeline for activity created by the authenticated user
* *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
* *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
* 
* By default, timeline resources are returned in JSON. You can specify the `application/atom+xml` type in the `Accept` header to return timeline resources in Atom format. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* > [!NOTE]
* > Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) since current feed URIs use the older, non revocable auth tokens.
*/
readonly "activityGetFeeds": () => Effect.Effect<typeof Feed.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
*/
readonly "gistsList": (options?: typeof GistsListParams.Encoded | undefined) => Effect.Effect<typeof GistsList200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Allows you to add a new gist with one or more files.
* 
* > [!NOTE]
* > Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
*/
readonly "gistsCreate": (options: typeof GistsCreateRequest.Encoded) => Effect.Effect<typeof GistSimple.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* List public gists sorted by most recently updated to least recently updated.
* 
* Note: With [pagination](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
*/
readonly "gistsListPublic": (options?: typeof GistsListPublicParams.Encoded | undefined) => Effect.Effect<typeof GistsListPublic200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* List the authenticated user's starred gists:
*/
readonly "gistsListStarred": (options?: typeof GistsListStarredParams.Encoded | undefined) => Effect.Effect<typeof GistsListStarred200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets a specified gist.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
*/
readonly "gistsGet": (gistId: string, options?: typeof GistsGetParams.Encoded | undefined) => Effect.Effect<typeof GistSimple.Type, HttpClientError.HttpClientError | ParseError | ClientError<"GistsGet403", typeof GistsGet403.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Delete a gist
*/
readonly "gistsDelete": (gistId: string, options?: typeof GistsDeleteParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Allows you to update a gist's description and to update, delete, or rename gist files. Files
* from the previous version of the gist that aren't explicitly changed during an edit
* are unchanged.
* 
* At least one of `description` or `files` is required.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
*/
readonly "gistsUpdate": (gistId: string, options: { readonly params?: typeof GistsUpdateParams.Encoded | undefined; readonly payload: typeof GistsUpdateRequest.Encoded }) => Effect.Effect<typeof GistSimple.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists the comments on a gist.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
*/
readonly "gistsListComments": (gistId: string, options?: typeof GistsListCommentsParams.Encoded | undefined) => Effect.Effect<typeof GistsListComments200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Creates a comment on a gist.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
*/
readonly "gistsCreateComment": (gistId: string, options: { readonly params?: typeof GistsCreateCommentParams.Encoded | undefined; readonly payload: typeof GistsCreateCommentRequest.Encoded }) => Effect.Effect<typeof GistComment.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets a comment on a gist.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
*/
readonly "gistsGetComment": (gistId: string, commentId: string, options?: typeof GistsGetCommentParams.Encoded | undefined) => Effect.Effect<typeof GistComment.Type, HttpClientError.HttpClientError | ParseError | ClientError<"GistsGetComment403", typeof GistsGetComment403.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Delete a gist comment
*/
readonly "gistsDeleteComment": (gistId: string, commentId: string, options?: typeof GistsDeleteCommentParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Updates a comment on a gist.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
*/
readonly "gistsUpdateComment": (gistId: string, commentId: string, options: { readonly params?: typeof GistsUpdateCommentParams.Encoded | undefined; readonly payload: typeof GistsUpdateCommentRequest.Encoded }) => Effect.Effect<typeof GistComment.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List gist commits
*/
readonly "gistsListCommits": (gistId: string, options?: typeof GistsListCommitsParams.Encoded | undefined) => Effect.Effect<typeof GistsListCommits200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List gist forks
*/
readonly "gistsListForks": (gistId: string, options?: typeof GistsListForksParams.Encoded | undefined) => Effect.Effect<typeof GistsListForks200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Fork a gist
*/
readonly "gistsFork": (gistId: string, options?: typeof GistsForkParams.Encoded | undefined) => Effect.Effect<typeof BaseGist.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Check if a gist is starred
*/
readonly "gistsCheckIsStarred": (gistId: string, options?: typeof GistsCheckIsStarredParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"GistsCheckIsStarred404", typeof GistsCheckIsStarred404.Type>>
  /**
* Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
readonly "gistsStar": (gistId: string, options?: typeof GistsStarParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Unstar a gist
*/
readonly "gistsUnstar": (gistId: string, options?: typeof GistsUnstarParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets a specified gist revision.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
*/
readonly "gistsGetRevision": (gistId: string, sha: string, options?: typeof GistsGetRevisionParams.Encoded | undefined) => Effect.Effect<typeof GistSimple.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user).
*/
readonly "gitignoreGetAllTemplates": () => Effect.Effect<typeof GitignoreGetAllTemplates200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get the content of a gitignore template.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw .gitignore contents.
*/
readonly "gitignoreGetTemplate": (name: string) => Effect.Effect<typeof GitignoreTemplate.Type, HttpClientError.HttpClientError | ParseError>
  /**
* List repositories that an app installation can access.
*/
readonly "appsListReposAccessibleToInstallation": (options?: typeof AppsListReposAccessibleToInstallationParams.Encoded | undefined) => Effect.Effect<typeof AppsListReposAccessibleToInstallation200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Revokes the installation token you're using to authenticate as an installation and access this endpoint.
* 
* Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/apps/apps#create-an-installation-access-token-for-an-app)" endpoint.
*/
readonly "appsRevokeInstallationAccessToken": () => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* List issues assigned to the authenticated user across all visible repositories including owned repositories, member
* repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
* necessarily assigned to you.
* 
* > [!NOTE]
* > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesList": (options?: typeof IssuesListParams.Encoded | undefined) => Effect.Effect<typeof IssuesList200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists the most commonly used licenses on GitHub. For more information, see "[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."
*/
readonly "licensesGetAllCommonlyUsed": (options?: typeof LicensesGetAllCommonlyUsedParams.Encoded | undefined) => Effect.Effect<typeof LicensesGetAllCommonlyUsed200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets information about a specific license. For more information, see "[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."
*/
readonly "licensesGet": (license: string) => Effect.Effect<typeof License.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Depending on what is rendered in the Markdown, you may need to provide additional token scopes for labels, such as `issues:read` or `pull_requests:read`.
*/
readonly "markdownRender": (options: typeof MarkdownRenderRequest.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
*/
readonly "markdownRenderRaw": () => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
* 
* GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
*/
readonly "appsGetSubscriptionPlanForAccount": (accountId: string, options?: typeof AppsGetSubscriptionPlanForAccountParams.Encoded | undefined) => Effect.Effect<typeof MarketplacePurchase.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists all plans that are part of your GitHub Marketplace listing.
* 
* GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
*/
readonly "appsListPlans": (options?: typeof AppsListPlansParams.Encoded | undefined) => Effect.Effect<typeof AppsListPlans200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
* 
* GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
*/
readonly "appsListAccountsForPlan": (planId: string, options?: typeof AppsListAccountsForPlanParams.Encoded | undefined) => Effect.Effect<typeof AppsListAccountsForPlan200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
* 
* GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
*/
readonly "appsGetSubscriptionPlanForAccountStubbed": (accountId: string, options?: typeof AppsGetSubscriptionPlanForAccountStubbedParams.Encoded | undefined) => Effect.Effect<typeof MarketplacePurchase.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists all plans that are part of your GitHub Marketplace listing.
* 
* GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
*/
readonly "appsListPlansStubbed": (options?: typeof AppsListPlansStubbedParams.Encoded | undefined) => Effect.Effect<typeof AppsListPlansStubbed200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
* 
* GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/authentication/authenticating-to-the-rest-api#using-basic-authentication) with their client ID and client secret to access this endpoint.
*/
readonly "appsListAccountsForPlanStubbed": (planId: string, options?: typeof AppsListAccountsForPlanStubbedParams.Encoded | undefined) => Effect.Effect<typeof AppsListAccountsForPlanStubbed200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)."
* 
* The API's response also includes a list of GitHub's domain names.
* 
* The values shown in the documentation's response are example values. You must always query the API directly to get the latest values.
* 
* > [!NOTE]
* > This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.
*/
readonly "metaGet": () => Effect.Effect<typeof ApiOverview.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!NOTE]
* > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
*/
readonly "activityListPublicEventsForRepoNetwork": (owner: string, repo: string, options?: typeof ActivityListPublicEventsForRepoNetworkParams.Encoded | undefined) => Effect.Effect<typeof ActivityListPublicEventsForRepoNetwork200.Type | typeof BasicError.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List all notifications for the current user, sorted by most recently updated.
*/
readonly "activityListNotificationsForAuthenticatedUser": (options?: typeof ActivityListNotificationsForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof ActivityListNotificationsForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
*/
readonly "activityMarkNotificationsAsRead": (options: typeof ActivityMarkNotificationsAsReadRequest.Encoded) => Effect.Effect<typeof ActivityMarkNotificationsAsRead202.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets information about a notification thread.
*/
readonly "activityGetThread": (threadId: string, options?: typeof ActivityGetThreadParams.Encoded | undefined) => Effect.Effect<typeof Thread.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Marks a thread as "done." Marking a thread as "done" is equivalent to marking a notification in your notification inbox on GitHub as done: https://github.com/notifications.
*/
readonly "activityMarkThreadAsDone": (threadId: string, options?: typeof ActivityMarkThreadAsDoneParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub: https://github.com/notifications.
*/
readonly "activityMarkThreadAsRead": (threadId: string, options?: typeof ActivityMarkThreadAsReadParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/activity/watching#get-a-repository-subscription).
* 
* Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
*/
readonly "activityGetThreadSubscriptionForAuthenticatedUser": (threadId: string, options?: typeof ActivityGetThreadSubscriptionForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof ThreadSubscription.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
* 
* You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
* 
* Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/activity/notifications#delete-a-thread-subscription) endpoint.
*/
readonly "activitySetThreadSubscription": (threadId: string, options: { readonly params?: typeof ActivitySetThreadSubscriptionParams.Encoded | undefined; readonly payload: typeof ActivitySetThreadSubscriptionRequest.Encoded }) => Effect.Effect<typeof ThreadSubscription.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/activity/notifications#set-a-thread-subscription) endpoint and set `ignore` to `true`.
*/
readonly "activityDeleteThreadSubscription": (threadId: string, options?: typeof ActivityDeleteThreadSubscriptionParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Get the octocat as ASCII art
*/
readonly "metaGetOctocat": (options?: typeof MetaGetOctocatParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all organizations, in the order that they were created.
* 
* > [!NOTE]
* > Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations.
*/
readonly "orgsList": (options?: typeof OrgsListParams.Encoded | undefined) => Effect.Effect<typeof OrgsList200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists repositories that organization admins have allowed Dependabot to access when updating dependencies.
* > [!NOTE]
* >    This operation supports both server-to-server and user-to-server access.
* Unauthorized users will not see the existence of this endpoint.
*/
readonly "dependabotRepositoryAccessForOrg": (org: string, options?: typeof DependabotRepositoryAccessForOrgParams.Encoded | undefined) => Effect.Effect<typeof DependabotRepositoryAccessDetails.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Updates repositories according to the list of repositories that organization admins have given Dependabot access to when they've updated dependencies.
* 
* > [!NOTE]
* >    This operation supports both server-to-server and user-to-server access.
* Unauthorized users will not see the existence of this endpoint.
* 
* **Example request body:**
* ```json
* {
*   "repository_ids_to_add": [123, 456],
*   "repository_ids_to_remove": [789]
* }
* ```
*/
readonly "dependabotUpdateRepositoryAccessForOrg": (org: string, options: { readonly params?: typeof DependabotUpdateRepositoryAccessForOrgParams.Encoded | undefined; readonly payload: typeof DependabotUpdateRepositoryAccessForOrgRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Sets the default level of repository access Dependabot will have while performing an update.  Available values are:
* - 'public' - Dependabot will only have access to public repositories, unless access is explicitly granted to non-public repositories.
* - 'internal' - Dependabot will only have access to public and internal repositories, unless access is explicitly granted to private repositories.
* 
* Unauthorized users will not see the existence of this endpoint.
* 
* This operation supports both server-to-server and user-to-server access.
*/
readonly "dependabotSetRepositoryAccessDefaultLevel": (org: string, options: { readonly params?: typeof DependabotSetRepositoryAccessDefaultLevelParams.Encoded | undefined; readonly payload: typeof DependabotSetRepositoryAccessDefaultLevelRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets a report of the total usage for an organization. To use this endpoint, you must be an administrator of an organization within an enterprise or an organization account.
* 
* **Note:** This endpoint is only available to organizations with access to the enhanced billing platform. For more information, see "[About the enhanced billing platform](https://docs.github.com/billing/using-the-new-billing-platform)."
*/
readonly "billingGetGithubBillingUsageReportOrg": (org: string, options?: typeof BillingGetGithubBillingUsageReportOrgParams.Encoded | undefined) => Effect.Effect<typeof BillingUsageReport.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BillingGetGithubBillingUsageReportOrg503", typeof BillingGetGithubBillingUsageReportOrg503.Type>>
  /**
* Gets information about an organization.
* 
* When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, outside collaborators, guest collaborators, repository collaborators, or everyone with access to any repository within the organization to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
* 
* To see the full details about an organization, the authenticated user must be an organization owner.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to see the full details about an organization.
* 
* To see information about an organization's GitHub plan, GitHub Apps need the `Organization plan` permission.
*/
readonly "orgsGet": (org: string, options?: typeof OrgsGetParams.Encoded | undefined) => Effect.Effect<typeof OrganizationFull.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Deletes an organization and all its repositories.
* 
* The organization login will be unavailable for 90 days after deletion.
* 
* Please review the Terms of Service regarding account deletion before using this endpoint:
* 
* https://docs.github.com/site-policy/github-terms/github-terms-of-service
*/
readonly "orgsDelete": (org: string, options?: typeof OrgsDeleteParams.Encoded | undefined) => Effect.Effect<typeof OrgsDelete202.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
* 
* > [!WARNING]
* > **Closing down notice:** Code security product enablement for new repositories through the organization API is closing down. Please use [code security configurations](https://docs.github.com/rest/code-security/configurations#set-a-code-security-configuration-as-a-default-for-an-organization) to set defaults instead. For more information on setting a default security configuration, see the [changelog](https://github.blog/changelog/2024-07-09-sunsetting-security-settings-defaults-parameters-in-the-organizations-rest-api/).
* 
* Updates the organization's profile and member privileges.
* 
* The authenticated user must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` or `repo` scope to use this endpoint.
*/
readonly "orgsUpdate": (org: string, options: { readonly params?: typeof OrgsUpdateParams.Encoded | undefined; readonly payload: typeof OrgsUpdateRequest.Encoded }) => Effect.Effect<typeof OrganizationFull.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"OrgsUpdate422", typeof OrgsUpdate422.Type>>
  /**
* Gets the total GitHub Actions cache usage for an organization.
* The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
* 
* OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
*/
readonly "actionsGetActionsCacheUsageForOrg": (org: string, options?: typeof ActionsGetActionsCacheUsageForOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsCacheUsageOrgEnterprise.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists repositories and their GitHub Actions cache usage for an organization.
* The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
* 
* OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
*/
readonly "actionsGetActionsCacheUsageByRepoForOrg": (org: string, options?: typeof ActionsGetActionsCacheUsageByRepoForOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsGetActionsCacheUsageByRepoForOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all GitHub-hosted runners configured in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `manage_runner:org` scope to use this endpoint.
*/
readonly "actionsListHostedRunnersForOrg": (org: string, options?: typeof ActionsListHostedRunnersForOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsListHostedRunnersForOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates a GitHub-hosted runner for an organization.
* OAuth tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.
*/
readonly "actionsCreateHostedRunnerForOrg": (org: string, options: { readonly params?: typeof ActionsCreateHostedRunnerForOrgParams.Encoded | undefined; readonly payload: typeof ActionsCreateHostedRunnerForOrgRequest.Encoded }) => Effect.Effect<typeof ActionsHostedRunner.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get the list of GitHub-owned images available for GitHub-hosted runners for an organization.
*/
readonly "actionsGetHostedRunnersGithubOwnedImagesForOrg": (org: string, options?: typeof ActionsGetHostedRunnersGithubOwnedImagesForOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsGetHostedRunnersGithubOwnedImagesForOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get the list of partner images available for GitHub-hosted runners for an organization.
*/
readonly "actionsGetHostedRunnersPartnerImagesForOrg": (org: string, options?: typeof ActionsGetHostedRunnersPartnerImagesForOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsGetHostedRunnersPartnerImagesForOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get the GitHub-hosted runners limits for an organization.
*/
readonly "actionsGetHostedRunnersLimitsForOrg": (org: string, options?: typeof ActionsGetHostedRunnersLimitsForOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsHostedRunnerLimits.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get the list of machine specs available for GitHub-hosted runners for an organization.
*/
readonly "actionsGetHostedRunnersMachineSpecsForOrg": (org: string, options?: typeof ActionsGetHostedRunnersMachineSpecsForOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsGetHostedRunnersMachineSpecsForOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get the list of platforms available for GitHub-hosted runners for an organization.
*/
readonly "actionsGetHostedRunnersPlatformsForOrg": (org: string, options?: typeof ActionsGetHostedRunnersPlatformsForOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsGetHostedRunnersPlatformsForOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a GitHub-hosted runner configured in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.
*/
readonly "actionsGetHostedRunnerForOrg": (org: string, hostedRunnerId: string, options?: typeof ActionsGetHostedRunnerForOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsHostedRunner.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes a GitHub-hosted runner for an organization.
*/
readonly "actionsDeleteHostedRunnerForOrg": (org: string, hostedRunnerId: string, options?: typeof ActionsDeleteHostedRunnerForOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsHostedRunner.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Updates a GitHub-hosted runner for an organization.
* OAuth app tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.
*/
readonly "actionsUpdateHostedRunnerForOrg": (org: string, hostedRunnerId: string, options: { readonly params?: typeof ActionsUpdateHostedRunnerForOrgParams.Encoded | undefined; readonly payload: typeof ActionsUpdateHostedRunnerForOrgRequest.Encoded }) => Effect.Effect<typeof ActionsHostedRunner.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets the customization template for an OpenID Connect (OIDC) subject claim.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
*/
readonly "oidcGetOidcCustomSubTemplateForOrg": (org: string, options?: typeof OidcGetOidcCustomSubTemplateForOrgParams.Encoded | undefined) => Effect.Effect<typeof OidcCustomSub.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "oidcUpdateOidcCustomSubTemplateForOrg": (org: string, options: { readonly params?: typeof OidcUpdateOidcCustomSubTemplateForOrgParams.Encoded | undefined; readonly payload: typeof OidcCustomSub.Encoded }) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsGetGithubActionsPermissionsOrganization": (org: string, options?: typeof ActionsGetGithubActionsPermissionsOrganizationParams.Encoded | undefined) => Effect.Effect<typeof ActionsOrganizationPermissions.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsSetGithubActionsPermissionsOrganization": (org: string, options: { readonly params?: typeof ActionsSetGithubActionsPermissionsOrganizationParams.Encoded | undefined; readonly payload: typeof ActionsSetGithubActionsPermissionsOrganizationRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Gets artifact and log retention settings for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
*/
readonly "actionsGetArtifactAndLogRetentionSettingsOrganization": (org: string, options?: typeof ActionsGetArtifactAndLogRetentionSettingsOrganizationParams.Encoded | undefined) => Effect.Effect<typeof ActionsArtifactAndLogRetentionResponse.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Sets artifact and log retention settings for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
*/
readonly "actionsSetArtifactAndLogRetentionSettingsOrganization": (org: string, options: { readonly params?: typeof ActionsSetArtifactAndLogRetentionSettingsOrganizationParams.Encoded | undefined; readonly payload: typeof ActionsArtifactAndLogRetention.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Gets the fork PR contributor approval policy for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
*/
readonly "actionsGetForkPrContributorApprovalPermissionsOrganization": (org: string, options?: typeof ActionsGetForkPrContributorApprovalPermissionsOrganizationParams.Encoded | undefined) => Effect.Effect<typeof ActionsForkPrContributorApproval.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Sets the fork PR contributor approval policy for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsSetForkPrContributorApprovalPermissionsOrganization": (org: string, options: { readonly params?: typeof ActionsSetForkPrContributorApprovalPermissionsOrganizationParams.Encoded | undefined; readonly payload: typeof ActionsForkPrContributorApproval.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Gets the settings for whether workflows from fork pull requests can run on private repositories in an organization.
*/
readonly "actionsGetPrivateRepoForkPrWorkflowsSettingsOrganization": (org: string, options?: typeof ActionsGetPrivateRepoForkPrWorkflowsSettingsOrganizationParams.Encoded | undefined) => Effect.Effect<typeof ActionsForkPrWorkflowsPrivateRepos.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Sets the settings for whether workflows from fork pull requests can run on private repositories in an organization.
*/
readonly "actionsSetPrivateRepoForkPrWorkflowsSettingsOrganization": (org: string, options: { readonly params?: typeof ActionsSetPrivateRepoForkPrWorkflowsSettingsOrganizationParams.Encoded | undefined; readonly payload: typeof ActionsForkPrWorkflowsPrivateReposRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsListSelectedRepositoriesEnabledGithubActionsOrganization": (org: string, options?: typeof ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams.Encoded | undefined) => Effect.Effect<typeof ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
* 
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsSetSelectedRepositoriesEnabledGithubActionsOrganization": (org: string, options: { readonly params?: typeof ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParams.Encoded | undefined; readonly payload: typeof ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsEnableSelectedRepositoryGithubActionsOrganization": (org: string, repositoryId: string, options?: typeof ActionsEnableSelectedRepositoryGithubActionsOrganizationParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsDisableSelectedRepositoryGithubActionsOrganization": (org: string, repositoryId: string, options?: typeof ActionsDisableSelectedRepositoryGithubActionsOrganizationParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsGetAllowedActionsOrganization": (org: string, options?: typeof ActionsGetAllowedActionsOrganizationParams.Encoded | undefined) => Effect.Effect<typeof SelectedActions.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsSetAllowedActionsOrganization": (org: string, options: { readonly params?: typeof ActionsSetAllowedActionsOrganizationParams.Encoded | undefined; readonly payload: typeof SelectedActions.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Gets the settings for self-hosted runners for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
*/
readonly "actionsGetSelfHostedRunnersPermissionsOrganization": (org: string, options?: typeof ActionsGetSelfHostedRunnersPermissionsOrganizationParams.Encoded | undefined) => Effect.Effect<typeof SelfHostedRunnersSettings.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Sets the settings for self-hosted runners for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
*/
readonly "actionsSetSelfHostedRunnersPermissionsOrganization": (org: string, options: { readonly params?: typeof ActionsSetSelfHostedRunnersPermissionsOrganizationParams.Encoded | undefined; readonly payload: typeof ActionsSetSelfHostedRunnersPermissionsOrganizationRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists repositories that are allowed to use self-hosted runners in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
*/
readonly "actionsListSelectedRepositoriesSelfHostedRunnersOrganization": (org: string, options?: typeof ActionsListSelectedRepositoriesSelfHostedRunnersOrganizationParams.Encoded | undefined) => Effect.Effect<typeof ActionsListSelectedRepositoriesSelfHostedRunnersOrganization200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Sets repositories that are allowed to use self-hosted runners in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
*/
readonly "actionsSetSelectedRepositoriesSelfHostedRunnersOrganization": (org: string, options: { readonly params?: typeof ActionsSetSelectedRepositoriesSelfHostedRunnersOrganizationParams.Encoded | undefined; readonly payload: typeof ActionsSetSelectedRepositoriesSelfHostedRunnersOrganizationRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Adds a repository to the list of repositories that are allowed to use self-hosted runners in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
*/
readonly "actionsEnableSelectedRepositorySelfHostedRunnersOrganization": (org: string, repositoryId: string, options?: typeof ActionsEnableSelectedRepositorySelfHostedRunnersOrganizationParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Removes a repository from the list of repositories that are allowed to use self-hosted runners in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope or the "Actions policies" fine-grained permission to use this endpoint.
*/
readonly "actionsDisableSelectedRepositorySelfHostedRunnersOrganization": (org: string, repositoryId: string, options?: typeof ActionsDisableSelectedRepositorySelfHostedRunnersOrganizationParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
* as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
* "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsGetGithubActionsDefaultWorkflowPermissionsOrganization": (org: string, options?: typeof ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationParams.Encoded | undefined) => Effect.Effect<typeof ActionsGetDefaultWorkflowPermissions.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions
* can submit approving pull request reviews. For more information, see
* "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsSetGithubActionsDefaultWorkflowPermissionsOrganization": (org: string, options: { readonly params?: typeof ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationParams.Encoded | undefined; readonly payload: typeof ActionsSetDefaultWorkflowPermissions.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsListSelfHostedRunnerGroupsForOrg": (org: string, options?: typeof ActionsListSelfHostedRunnerGroupsForOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsListSelfHostedRunnerGroupsForOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates a new self-hosted runner group for an organization.
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsCreateSelfHostedRunnerGroupForOrg": (org: string, options: { readonly params?: typeof ActionsCreateSelfHostedRunnerGroupForOrgParams.Encoded | undefined; readonly payload: typeof ActionsCreateSelfHostedRunnerGroupForOrgRequest.Encoded }) => Effect.Effect<typeof RunnerGroupsOrg.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a specific self-hosted runner group for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsGetSelfHostedRunnerGroupForOrg": (org: string, runnerGroupId: string, options?: typeof ActionsGetSelfHostedRunnerGroupForOrgParams.Encoded | undefined) => Effect.Effect<typeof RunnerGroupsOrg.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes a self-hosted runner group for an organization.
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsDeleteSelfHostedRunnerGroupFromOrg": (org: string, runnerGroupId: string, options?: typeof ActionsDeleteSelfHostedRunnerGroupFromOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Updates the `name` and `visibility` of a self-hosted runner group in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsUpdateSelfHostedRunnerGroupForOrg": (org: string, runnerGroupId: string, options: { readonly params?: typeof ActionsUpdateSelfHostedRunnerGroupForOrgParams.Encoded | undefined; readonly payload: typeof ActionsUpdateSelfHostedRunnerGroupForOrgRequest.Encoded }) => Effect.Effect<typeof RunnerGroupsOrg.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists the GitHub-hosted runners in an organization group.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsListGithubHostedRunnersInGroupForOrg": (org: string, runnerGroupId: string, options?: typeof ActionsListGithubHostedRunnersInGroupForOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsListGithubHostedRunnersInGroupForOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists the repositories with access to a self-hosted runner group configured in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsListRepoAccessToSelfHostedRunnerGroupInOrg": (org: string, runnerGroupId: string, options?: typeof ActionsListRepoAccessToSelfHostedRunnerGroupInOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsSetRepoAccessToSelfHostedRunnerGroupInOrg": (org: string, runnerGroupId: string, options: { readonly params?: typeof ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgParams.Encoded | undefined; readonly payload: typeof ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Adds a repository to the list of repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsAddRepoAccessToSelfHostedRunnerGroupInOrg": (org: string, runnerGroupId: string, repositoryId: string, options?: typeof ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg": (org: string, runnerGroupId: string, repositoryId: string, options?: typeof ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists self-hosted runners that are in a specific organization group.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsListSelfHostedRunnersInGroupForOrg": (org: string, runnerGroupId: string, options?: typeof ActionsListSelfHostedRunnersInGroupForOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsListSelfHostedRunnersInGroupForOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replaces the list of self-hosted runners that are part of an organization runner group.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsSetSelfHostedRunnersInGroupForOrg": (org: string, runnerGroupId: string, options: { readonly params?: typeof ActionsSetSelfHostedRunnersInGroupForOrgParams.Encoded | undefined; readonly payload: typeof ActionsSetSelfHostedRunnersInGroupForOrgRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Adds a self-hosted runner to a runner group configured in an organization.
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsAddSelfHostedRunnerToGroupForOrg": (org: string, runnerGroupId: string, runnerId: string, options?: typeof ActionsAddSelfHostedRunnerToGroupForOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsRemoveSelfHostedRunnerFromGroupForOrg": (org: string, runnerGroupId: string, runnerId: string, options?: typeof ActionsRemoveSelfHostedRunnerFromGroupForOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all self-hosted runners configured in an organization.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsListSelfHostedRunnersForOrg": (org: string, options?: typeof ActionsListSelfHostedRunnersForOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsListSelfHostedRunnersForOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists binaries for the runner application that you can download and run.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.  If the repository is private, the `repo` scope is also required.
*/
readonly "actionsListRunnerApplicationsForOrg": (org: string, options?: typeof ActionsListRunnerApplicationsForOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsListRunnerApplicationsForOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Generates a configuration that can be passed to the runner application at startup.
* 
* The authenticated user must have admin access to the organization.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGenerateRunnerJitconfigForOrg": (org: string, options: { readonly params?: typeof ActionsGenerateRunnerJitconfigForOrgParams.Encoded | undefined; readonly payload: typeof ActionsGenerateRunnerJitconfigForOrgRequest.Encoded }) => Effect.Effect<typeof ActionsGenerateRunnerJitconfigForOrg201.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Returns a token that you can pass to the `config` script. The token expires after one hour.
* 
* For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:
* 
* ```
* ./config.sh --url https://github.com/octo-org --token TOKEN
* ```
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateRegistrationTokenForOrg": (org: string, options?: typeof ActionsCreateRegistrationTokenForOrgParams.Encoded | undefined) => Effect.Effect<typeof AuthenticationToken.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
* 
* For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:
* 
* ```
* ./config.sh remove --token TOKEN
* ```
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateRemoveTokenForOrg": (org: string, options?: typeof ActionsCreateRemoveTokenForOrgParams.Encoded | undefined) => Effect.Effect<typeof AuthenticationToken.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a specific self-hosted runner configured in an organization.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsGetSelfHostedRunnerForOrg": (org: string, runnerId: string, options?: typeof ActionsGetSelfHostedRunnerForOrgParams.Encoded | undefined) => Effect.Effect<typeof Runner.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteSelfHostedRunnerFromOrg": (org: string, runnerId: string, options?: typeof ActionsDeleteSelfHostedRunnerFromOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Lists all labels for a self-hosted runner configured in an organization.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsListLabelsForSelfHostedRunnerForOrg": (org: string, runnerId: string, options?: typeof ActionsListLabelsForSelfHostedRunnerForOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsListLabelsForSelfHostedRunnerForOrg200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Remove all previous custom labels and set the new custom labels for a specific
* self-hosted runner configured in an organization.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsSetCustomLabelsForSelfHostedRunnerForOrg": (org: string, runnerId: string, options: { readonly params?: typeof ActionsSetCustomLabelsForSelfHostedRunnerForOrgParams.Encoded | undefined; readonly payload: typeof ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest.Encoded }) => Effect.Effect<typeof ActionsSetCustomLabelsForSelfHostedRunnerForOrg200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Adds custom labels to a self-hosted runner configured in an organization.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "actionsAddCustomLabelsToSelfHostedRunnerForOrg": (org: string, runnerId: string, options: { readonly params?: typeof ActionsAddCustomLabelsToSelfHostedRunnerForOrgParams.Encoded | undefined; readonly payload: typeof ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest.Encoded }) => Effect.Effect<typeof ActionsAddCustomLabelsToSelfHostedRunnerForOrg200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Remove all custom labels from a self-hosted runner configured in an
* organization. Returns the remaining read-only labels from the runner.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg": (org: string, runnerId: string, options?: typeof ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Remove a custom label from a self-hosted runner configured
* in an organization. Returns the remaining labels from the runner.
* 
* This endpoint returns a `404 Not Found` status if the custom label is not
* present on the runner.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsRemoveCustomLabelFromSelfHostedRunnerForOrg": (org: string, runnerId: string, name: string, options?: typeof ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsRemoveCustomLabelFromSelfHostedRunnerForOrg200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Lists all secrets available in an organization without revealing their
* encrypted values.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsListOrgSecrets": (org: string, options?: typeof ActionsListOrgSecretsParams.Encoded | undefined) => Effect.Effect<typeof ActionsListOrgSecrets200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets your public key, which you need to encrypt secrets. You need to
* encrypt a secret before you can create or update secrets.
* 
* The authenticated user must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetOrgPublicKey": (org: string, options?: typeof ActionsGetOrgPublicKeyParams.Encoded | undefined) => Effect.Effect<typeof ActionsPublicKey.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a single organization secret without revealing its encrypted value.
* 
* The authenticated user must have collaborator access to a repository to create, update, or read secrets
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetOrgSecret": (org: string, secretName: string, options?: typeof ActionsGetOrgSecretParams.Encoded | undefined) => Effect.Effect<typeof OrganizationActionsSecret.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates or updates an organization secret with an encrypted value. Encrypt your secret using
* [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateOrUpdateOrgSecret": (org: string, secretName: string, options: { readonly params?: typeof ActionsCreateOrUpdateOrgSecretParams.Encoded | undefined; readonly payload: typeof ActionsCreateOrUpdateOrgSecretRequest.Encoded }) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes a secret in an organization using the secret name.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteOrgSecret": (org: string, secretName: string, options?: typeof ActionsDeleteOrgSecretParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all repositories that have been selected when the `visibility`
* for repository access to a secret is set to `selected`.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsListSelectedReposForOrgSecret": (org: string, secretName: string, options?: typeof ActionsListSelectedReposForOrgSecretParams.Encoded | undefined) => Effect.Effect<typeof ActionsListSelectedReposForOrgSecret200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replaces all repositories for an organization secret when the `visibility`
* for repository access is set to `selected`. The visibility is set when you [Create
* or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsSetSelectedReposForOrgSecret": (org: string, secretName: string, options: { readonly params?: typeof ActionsSetSelectedReposForOrgSecretParams.Encoded | undefined; readonly payload: typeof ActionsSetSelectedReposForOrgSecretRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Adds a repository to an organization secret when the `visibility` for
* repository access is set to `selected`. For more information about setting the visibility, see [Create or
* update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsAddSelectedRepoToOrgSecret": (org: string, secretName: string, repositoryId: string, options?: typeof ActionsAddSelectedRepoToOrgSecretParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Removes a repository from an organization secret when the `visibility`
* for repository access is set to `selected`. The visibility is set when you [Create
* or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsRemoveSelectedRepoFromOrgSecret": (org: string, secretName: string, repositoryId: string, options?: typeof ActionsRemoveSelectedRepoFromOrgSecretParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all organization variables.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsListOrgVariables": (org: string, options?: typeof ActionsListOrgVariablesParams.Encoded | undefined) => Effect.Effect<typeof ActionsListOrgVariables200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates an organization variable that you can reference in a GitHub Actions workflow.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateOrgVariable": (org: string, options: { readonly params?: typeof ActionsCreateOrgVariableParams.Encoded | undefined; readonly payload: typeof ActionsCreateOrgVariableRequest.Encoded }) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a specific variable in an organization.
* 
* The authenticated user must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetOrgVariable": (org: string, name: string, options?: typeof ActionsGetOrgVariableParams.Encoded | undefined) => Effect.Effect<typeof OrganizationActionsVariable.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes an organization variable using the variable name.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteOrgVariable": (org: string, name: string, options?: typeof ActionsDeleteOrgVariableParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Updates an organization variable that you can reference in a GitHub Actions workflow.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsUpdateOrgVariable": (org: string, name: string, options: { readonly params?: typeof ActionsUpdateOrgVariableParams.Encoded | undefined; readonly payload: typeof ActionsUpdateOrgVariableRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all repositories that can access an organization variable
* that is available to selected repositories.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsListSelectedReposForOrgVariable": (org: string, name: string, options?: typeof ActionsListSelectedReposForOrgVariableParams.Encoded | undefined) => Effect.Effect<typeof ActionsListSelectedReposForOrgVariable200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replaces all repositories for an organization variable that is available
* to selected repositories. Organization variables that are available to selected
* repositories have their `visibility` field set to `selected`.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsSetSelectedReposForOrgVariable": (org: string, name: string, options: { readonly params?: typeof ActionsSetSelectedReposForOrgVariableParams.Encoded | undefined; readonly payload: typeof ActionsSetSelectedReposForOrgVariableRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Adds a repository to an organization variable that is available to selected repositories.
* Organization variables that are available to selected repositories have their `visibility` field set to `selected`.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsAddSelectedRepoToOrgVariable": (org: string, name: string, repositoryId: string, options?: typeof ActionsAddSelectedRepoToOrgVariableParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Removes a repository from an organization variable that is
* available to selected repositories. Organization variables that are available to
* selected repositories have their `visibility` field set to `selected`.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
*/
readonly "actionsRemoveSelectedRepoFromOrgVariable": (org: string, name: string, repositoryId: string, options?: typeof ActionsRemoveSelectedRepoFromOrgVariableParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* List a collection of artifact attestations associated with any entry in a list of subject digests owned by an organization.
* 
* The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.
* 
* **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
*/
readonly "orgsListAttestationsBulk": (org: string, options: { readonly params?: typeof OrgsListAttestationsBulkParams.Encoded | undefined; readonly payload: typeof OrgsListAttestationsBulkRequest.Encoded }) => Effect.Effect<typeof OrgsListAttestationsBulk200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete artifact attestations in bulk by either subject digests or unique ID.
*/
readonly "orgsDeleteAttestationsBulk": (org: string, options: { readonly params?: typeof OrgsDeleteAttestationsBulkParams.Encoded | undefined; readonly payload: typeof OrgsDeleteAttestationsBulkRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Delete an artifact attestation by subject digest.
*/
readonly "orgsDeleteAttestationsBySubjectDigest": (org: string, subjectDigest: string, options?: typeof OrgsDeleteAttestationsBySubjectDigestParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Delete an artifact attestation by unique ID that is associated with a repository owned by an org.
*/
readonly "orgsDeleteAttestationsById": (org: string, attestationId: string, options?: typeof OrgsDeleteAttestationsByIdParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List a collection of artifact attestations with a given subject digest that are associated with repositories owned by an organization.
* 
* The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.
* 
* **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
*/
readonly "orgsListAttestations": (org: string, subjectDigest: string, options?: typeof OrgsListAttestationsParams.Encoded | undefined) => Effect.Effect<typeof OrgsListAttestations200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* List the users blocked by an organization.
*/
readonly "orgsListBlockedUsers": (org: string, options?: typeof OrgsListBlockedUsersParams.Encoded | undefined) => Effect.Effect<typeof OrgsListBlockedUsers200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Returns a 204 if the given user is blocked by the given organization. Returns a 404 if the organization is not blocking the user, or if the user account has been identified as spam by GitHub.
*/
readonly "orgsCheckBlockedUser": (org: string, username: string, options?: typeof OrgsCheckBlockedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Blocks the given user on behalf of the specified organization and returns a 204. If the organization cannot block the given user a 422 is returned.
*/
readonly "orgsBlockUser": (org: string, username: string, options?: typeof OrgsBlockUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Unblocks the given user on behalf of the specified organization.
*/
readonly "orgsUnblockUser": (org: string, username: string, options?: typeof OrgsUnblockUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists campaigns in an organization.
* 
* The authenticated user must be an owner or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
*/
readonly "campaignsListOrgCampaigns": (org: string, options?: typeof CampaignsListOrgCampaignsParams.Encoded | undefined) => Effect.Effect<typeof CampaignsListOrgCampaigns200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CampaignsListOrgCampaigns503", typeof CampaignsListOrgCampaigns503.Type>>
  /**
* Create a campaign for an organization.
* 
* The authenticated user must be an owner or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
* 
* Fine-grained tokens must have the "Code scanning alerts" repository permissions (read) on all repositories included
* in the campaign.
*/
readonly "campaignsCreateCampaign": (org: string, options: { readonly params?: typeof CampaignsCreateCampaignParams.Encoded | undefined; readonly payload: typeof CampaignsCreateCampaignRequest.Encoded }) => Effect.Effect<typeof CampaignSummary.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CampaignsCreateCampaign503", typeof CampaignsCreateCampaign503.Type>>
  /**
* Gets a campaign for an organization.
* 
* The authenticated user must be an owner or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
*/
readonly "campaignsGetCampaignSummary": (org: string, campaignNumber: string, options?: typeof CampaignsGetCampaignSummaryParams.Encoded | undefined) => Effect.Effect<typeof CampaignSummary.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CampaignsGetCampaignSummary503", typeof CampaignsGetCampaignSummary503.Type>>
  /**
* Deletes a campaign in an organization.
* 
* The authenticated user must be an owner or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
*/
readonly "campaignsDeleteCampaign": (org: string, campaignNumber: string, options?: typeof CampaignsDeleteCampaignParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CampaignsDeleteCampaign503", typeof CampaignsDeleteCampaign503.Type>>
  /**
* Updates a campaign in an organization.
* 
* The authenticated user must be an owner or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint.
*/
readonly "campaignsUpdateCampaign": (org: string, campaignNumber: string, options: { readonly params?: typeof CampaignsUpdateCampaignParams.Encoded | undefined; readonly payload: typeof CampaignsUpdateCampaignRequest.Encoded }) => Effect.Effect<typeof CampaignSummary.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CampaignsUpdateCampaign503", typeof CampaignsUpdateCampaign503.Type>>
  /**
* Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* The authenticated user must be an owner or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` or `repo`s cope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningListAlertsForOrg": (org: string, options?: typeof CodeScanningListAlertsForOrgParams.Encoded | undefined) => Effect.Effect<typeof CodeScanningListAlertsForOrg200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningListAlertsForOrg503", typeof CodeScanningListAlertsForOrg503.Type>>
  /**
* Lists all code security configurations available in an organization.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
*/
readonly "codeSecurityGetConfigurationsForOrg": (org: string, options?: typeof CodeSecurityGetConfigurationsForOrgParams.Encoded | undefined) => Effect.Effect<typeof CodeSecurityGetConfigurationsForOrg200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Creates a code security configuration in an organization.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "codeSecurityCreateConfiguration": (org: string, options: { readonly params?: typeof CodeSecurityCreateConfigurationParams.Encoded | undefined; readonly payload: typeof CodeSecurityCreateConfigurationRequest.Encoded }) => Effect.Effect<typeof CodeSecurityConfiguration.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists the default code security configurations for an organization.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
*/
readonly "codeSecurityGetDefaultConfigurations": (org: string, options?: typeof CodeSecurityGetDefaultConfigurationsParams.Encoded | undefined) => Effect.Effect<typeof CodeSecurityDefaultConfigurations.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Detach code security configuration(s) from a set of repositories.
* Repositories will retain their settings but will no longer be associated with the configuration.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "codeSecurityDetachConfiguration": (org: string, options: { readonly params?: typeof CodeSecurityDetachConfigurationParams.Encoded | undefined; readonly payload: typeof CodeSecurityDetachConfigurationRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets a code security configuration available in an organization.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "codeSecurityGetConfiguration": (org: string, configurationId: string, options?: typeof CodeSecurityGetConfigurationParams.Encoded | undefined) => Effect.Effect<typeof CodeSecurityConfiguration.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Deletes the desired code security configuration from an organization.
* Repositories attached to the configuration will retain their settings but will no longer be associated with
* the configuration.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "codeSecurityDeleteConfiguration": (org: string, configurationId: string, options?: typeof CodeSecurityDeleteConfigurationParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Updates a code security configuration in an organization.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "codeSecurityUpdateConfiguration": (org: string, configurationId: string, options: { readonly params?: typeof CodeSecurityUpdateConfigurationParams.Encoded | undefined; readonly payload: typeof CodeSecurityUpdateConfigurationRequest.Encoded }) => Effect.Effect<typeof CodeSecurityConfiguration.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Attach a code security configuration to a set of repositories. If the repositories specified are already attached to a configuration, they will be re-attached to the provided configuration.
* 
* If insufficient GHAS licenses are available to attach the configuration to a repository, only free features will be enabled.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "codeSecurityAttachConfiguration": (org: string, configurationId: string, options: { readonly params?: typeof CodeSecurityAttachConfigurationParams.Encoded | undefined; readonly payload: typeof CodeSecurityAttachConfigurationRequest.Encoded }) => Effect.Effect<typeof CodeSecurityAttachConfiguration202.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Sets a code security configuration as a default to be applied to new repositories in your organization.
* 
* This configuration will be applied to the matching repository type (all, none, public, private and internal) by default when they are created.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "codeSecuritySetConfigurationAsDefault": (org: string, configurationId: string, options: { readonly params?: typeof CodeSecuritySetConfigurationAsDefaultParams.Encoded | undefined; readonly payload: typeof CodeSecuritySetConfigurationAsDefaultRequest.Encoded }) => Effect.Effect<typeof CodeSecuritySetConfigurationAsDefault200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists the repositories associated with a code security configuration in an organization.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
*/
readonly "codeSecurityGetRepositoriesForConfiguration": (org: string, configurationId: string, options?: typeof CodeSecurityGetRepositoriesForConfigurationParams.Encoded | undefined) => Effect.Effect<typeof CodeSecurityGetRepositoriesForConfiguration200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists the codespaces associated to a specified organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesListInOrganization": (org: string, options?: typeof CodespacesListInOrganizationParams.Encoded | undefined) => Effect.Effect<typeof CodespacesListInOrganization200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces access permissions for users according to the visibility.
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesSetCodespacesAccess": (org: string, options: { readonly params?: typeof CodespacesSetCodespacesAccessParams.Encoded | undefined; readonly payload: typeof CodespacesSetCodespacesAccessRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Codespaces for the specified users will be billed to the organization.
* 
* To use this endpoint, the access settings for the organization must be set to `selected_members`.
* For information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesSetCodespacesAccessUsers": (org: string, options: { readonly params?: typeof CodespacesSetCodespacesAccessUsersParams.Encoded | undefined; readonly payload: typeof CodespacesSetCodespacesAccessUsersRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Codespaces for the specified users will no longer be billed to the organization.
* 
* To use this endpoint, the access settings for the organization must be set to `selected_members`.
* For information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesDeleteCodespacesAccessUsers": (org: string, options: { readonly params?: typeof CodespacesDeleteCodespacesAccessUsersParams.Encoded | undefined; readonly payload: typeof CodespacesDeleteCodespacesAccessUsersRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists all Codespaces development environment secrets available at the organization-level without revealing their encrypted
* values.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesListOrgSecrets": (org: string, options?: typeof CodespacesListOrgSecretsParams.Encoded | undefined) => Effect.Effect<typeof CodespacesListOrgSecrets200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets.
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesGetOrgPublicKey": (org: string, options?: typeof CodespacesGetOrgPublicKeyParams.Encoded | undefined) => Effect.Effect<typeof CodespacesPublicKey.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets an organization development environment secret without revealing its encrypted value.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesGetOrgSecret": (org: string, secretName: string, options?: typeof CodespacesGetOrgSecretParams.Encoded | undefined) => Effect.Effect<typeof CodespacesOrgSecret.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates or updates an organization development environment secret with an encrypted value. Encrypt your secret using
* [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesCreateOrUpdateOrgSecret": (org: string, secretName: string, options: { readonly params?: typeof CodespacesCreateOrUpdateOrgSecretParams.Encoded | undefined; readonly payload: typeof CodespacesCreateOrUpdateOrgSecretRequest.Encoded }) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Deletes an organization development environment secret using the secret name.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesDeleteOrgSecret": (org: string, secretName: string, options?: typeof CodespacesDeleteOrgSecretParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists all repositories that have been selected when the `visibility`
* for repository access to a secret is set to `selected`.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesListSelectedReposForOrgSecret": (org: string, secretName: string, options?: typeof CodespacesListSelectedReposForOrgSecretParams.Encoded | undefined) => Effect.Effect<typeof CodespacesListSelectedReposForOrgSecret200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Replaces all repositories for an organization development environment secret when the `visibility`
* for repository access is set to `selected`. The visibility is set when you [Create
* or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesSetSelectedReposForOrgSecret": (org: string, secretName: string, options: { readonly params?: typeof CodespacesSetSelectedReposForOrgSecretParams.Encoded | undefined; readonly payload: typeof CodespacesSetSelectedReposForOrgSecretRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Adds a repository to an organization development environment secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesAddSelectedRepoToOrgSecret": (org: string, secretName: string, repositoryId: string, options?: typeof CodespacesAddSelectedRepoToOrgSecretParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Removes a repository from an organization development environment secret when the `visibility`
* for repository access is set to `selected`. The visibility is set when you [Create
* or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesRemoveSelectedRepoFromOrgSecret": (org: string, secretName: string, repositoryId: string, options?: typeof CodespacesRemoveSelectedRepoFromOrgSecretParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* > [!NOTE]
* > This endpoint is in public preview and is subject to change.
* 
* Gets information about an organization's Copilot subscription, including seat breakdown
* and feature policies. To configure these settings, go to your organization's settings on GitHub.com.
* For more information, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)."
* 
* Only organization owners can view details about the organization's Copilot Business or Copilot Enterprise subscription.
* 
* OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
*/
readonly "copilotGetCopilotOrganizationDetails": (org: string, options?: typeof CopilotGetCopilotOrganizationDetailsParams.Encoded | undefined) => Effect.Effect<typeof CopilotOrganizationDetails.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!NOTE]
* > This endpoint is in public preview and is subject to change.
* 
* Lists all Copilot seats for which an organization with a Copilot Business or Copilot Enterprise subscription is currently being billed.
* Only organization owners can view assigned seats.
* 
* Each seat object contains information about the assigned user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
* For more information about activity data, see [Metrics data properties for GitHub Copilot](https://docs.github.com/copilot/reference/metrics-data).
* 
* OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
*/
readonly "copilotListCopilotSeats": (org: string, options?: typeof CopilotListCopilotSeatsParams.Encoded | undefined) => Effect.Effect<typeof CopilotListCopilotSeats200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!NOTE]
* > This endpoint is in public preview and is subject to change.
* 
* Purchases a GitHub Copilot seat for all users within each specified team.
* The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."
* 
* Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
* For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
* For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."
* 
* The response contains the total number of new seats that were created and existing seats that were refreshed.
* 
* OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
*/
readonly "copilotAddCopilotSeatsForTeams": (org: string, options: { readonly params?: typeof CopilotAddCopilotSeatsForTeamsParams.Encoded | undefined; readonly payload: typeof CopilotAddCopilotSeatsForTeamsRequest.Encoded }) => Effect.Effect<typeof CopilotAddCopilotSeatsForTeams201.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!NOTE]
* > This endpoint is in public preview and is subject to change.
* 
* Sets seats for all members of each team specified to "pending cancellation".
* This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through another team.
* For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."
* 
* Only organization owners can cancel Copilot seats for their organization members.
* 
* The response contains the total number of seats set to "pending cancellation".
* 
* OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
*/
readonly "copilotCancelCopilotSeatAssignmentForTeams": (org: string, options: { readonly params?: typeof CopilotCancelCopilotSeatAssignmentForTeamsParams.Encoded | undefined; readonly payload: typeof CopilotCancelCopilotSeatAssignmentForTeamsRequest.Encoded }) => Effect.Effect<typeof CopilotCancelCopilotSeatAssignmentForTeams200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!NOTE]
* > This endpoint is in public preview and is subject to change.
* 
* Purchases a GitHub Copilot seat for each user specified.
* The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see "[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization)."
* 
* Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy.
* For more information about setting up a Copilot subscription, see "[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization)."
* For more information about setting a suggestion matching policy, see "[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching)."
* 
* The response contains the total number of new seats that were created and existing seats that were refreshed.
* 
* OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
*/
readonly "copilotAddCopilotSeatsForUsers": (org: string, options: { readonly params?: typeof CopilotAddCopilotSeatsForUsersParams.Encoded | undefined; readonly payload: typeof CopilotAddCopilotSeatsForUsersRequest.Encoded }) => Effect.Effect<typeof CopilotAddCopilotSeatsForUsers201.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!NOTE]
* > This endpoint is in public preview and is subject to change.
* 
* Sets seats for all users specified to "pending cancellation".
* This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through team membership.
* For more information about disabling access to Copilot, see "[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization)."
* 
* Only organization owners can cancel Copilot seats for their organization members.
* 
* The response contains the total number of seats set to "pending cancellation".
* 
* OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
*/
readonly "copilotCancelCopilotSeatAssignmentForUsers": (org: string, options: { readonly params?: typeof CopilotCancelCopilotSeatAssignmentForUsersParams.Encoded | undefined; readonly payload: typeof CopilotCancelCopilotSeatAssignmentForUsersRequest.Encoded }) => Effect.Effect<typeof CopilotCancelCopilotSeatAssignmentForUsers200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.
* 
* > [!NOTE]
* > This endpoint will only return results for a given day if the organization contained **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.
* 
* The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
* and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
* they must have telemetry enabled in their IDE.
* 
* To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization.
* Only organization owners and owners and billing managers of the parent enterprise can view Copilot metrics.
* 
* OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
*/
readonly "copilotCopilotMetricsForOrganization": (org: string, options?: typeof CopilotCopilotMetricsForOrganizationParams.Encoded | undefined) => Effect.Effect<typeof CopilotCopilotMetricsForOrganization200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists Dependabot alerts for an organization.
* 
* The authenticated user must be an owner or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "dependabotListAlertsForOrg": (org: string, options?: typeof DependabotListAlertsForOrgParams.Encoded | undefined) => Effect.Effect<typeof DependabotListAlertsForOrg200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Lists all secrets available in an organization without revealing their
* encrypted values.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "dependabotListOrgSecrets": (org: string, options?: typeof DependabotListOrgSecretsParams.Encoded | undefined) => Effect.Effect<typeof DependabotListOrgSecrets200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets your public key, which you need to encrypt secrets. You need to
* encrypt a secret before you can create or update secrets.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "dependabotGetOrgPublicKey": (org: string, options?: typeof DependabotGetOrgPublicKeyParams.Encoded | undefined) => Effect.Effect<typeof DependabotPublicKey.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a single organization secret without revealing its encrypted value.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "dependabotGetOrgSecret": (org: string, secretName: string, options?: typeof DependabotGetOrgSecretParams.Encoded | undefined) => Effect.Effect<typeof OrganizationDependabotSecret.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates or updates an organization secret with an encrypted value. Encrypt your secret using
* [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "dependabotCreateOrUpdateOrgSecret": (org: string, secretName: string, options: { readonly params?: typeof DependabotCreateOrUpdateOrgSecretParams.Encoded | undefined; readonly payload: typeof DependabotCreateOrUpdateOrgSecretRequest.Encoded }) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes a secret in an organization using the secret name.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "dependabotDeleteOrgSecret": (org: string, secretName: string, options?: typeof DependabotDeleteOrgSecretParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all repositories that have been selected when the `visibility`
* for repository access to a secret is set to `selected`.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "dependabotListSelectedReposForOrgSecret": (org: string, secretName: string, options?: typeof DependabotListSelectedReposForOrgSecretParams.Encoded | undefined) => Effect.Effect<typeof DependabotListSelectedReposForOrgSecret200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Replaces all repositories for an organization secret when the `visibility`
* for repository access is set to `selected`. The visibility is set when you [Create
* or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "dependabotSetSelectedReposForOrgSecret": (org: string, secretName: string, options: { readonly params?: typeof DependabotSetSelectedReposForOrgSecretParams.Encoded | undefined; readonly payload: typeof DependabotSetSelectedReposForOrgSecretRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Adds a repository to an organization secret when the `visibility` for
* repository access is set to `selected`. The visibility is set when you [Create or
* update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "dependabotAddSelectedRepoToOrgSecret": (org: string, secretName: string, repositoryId: string, options?: typeof DependabotAddSelectedRepoToOrgSecretParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Removes a repository from an organization secret when the `visibility`
* for repository access is set to `selected`. The visibility is set when you [Create
* or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "dependabotRemoveSelectedRepoFromOrgSecret": (org: string, secretName: string, repositoryId: string, options?: typeof DependabotRemoveSelectedRepoFromOrgSecretParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all packages that are in a specific organization, are readable by the requesting user, and that encountered a conflict during a Docker migration.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
*/
readonly "packagesListDockerMigrationConflictingPackagesForOrganization": (org: string, options?: typeof PackagesListDockerMigrationConflictingPackagesForOrganizationParams.Encoded | undefined) => Effect.Effect<typeof PackagesListDockerMigrationConflictingPackagesForOrganization200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!NOTE]
* > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
*/
readonly "activityListPublicOrgEvents": (org: string, options?: typeof ActivityListPublicOrgEventsParams.Encoded | undefined) => Effect.Effect<typeof ActivityListPublicOrgEvents200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
*/
readonly "orgsListFailedInvitations": (org: string, options?: typeof OrgsListFailedInvitationsParams.Encoded | undefined) => Effect.Effect<typeof OrgsListFailedInvitations200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List webhooks for an organization.
* 
* The authenticated user must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsListWebhooks": (org: string, options?: typeof OrgsListWebhooksParams.Encoded | undefined) => Effect.Effect<typeof OrgsListWebhooks200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Create a hook that posts payloads in JSON format.
* 
* You must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or
* edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsCreateWebhook": (org: string, options: { readonly params?: typeof OrgsCreateWebhookParams.Encoded | undefined; readonly payload: typeof OrgsCreateWebhookRequest.Encoded }) => Effect.Effect<typeof OrgHook.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Returns a webhook configured in an organization. To get only the webhook
* `config` properties, see "[Get a webhook configuration for an organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization).
* 
* You must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsGetWebhook": (org: string, hookId: string, options?: typeof OrgsGetWebhookParams.Encoded | undefined) => Effect.Effect<typeof OrgHook.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Delete a webhook for an organization.
* 
* The authenticated user must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsDeleteWebhook": (org: string, hookId: string, options?: typeof OrgsDeleteWebhookParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Updates a webhook configured in an organization. When you update a webhook,
* the `secret` will be overwritten. If you previously had a `secret` set, you must
* provide the same `secret` or set a new `secret` or the secret will be removed. If
* you are only updating individual webhook `config` properties, use "[Update a webhook
* configuration for an organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization)".
* 
* You must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsUpdateWebhook": (org: string, hookId: string, options: { readonly params?: typeof OrgsUpdateWebhookParams.Encoded | undefined; readonly payload: typeof OrgsUpdateWebhookRequest.Encoded }) => Effect.Effect<typeof OrgHook.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook)."
* 
* You must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsGetWebhookConfigForOrg": (org: string, hookId: string, options?: typeof OrgsGetWebhookConfigForOrgParams.Encoded | undefined) => Effect.Effect<typeof WebhookConfig.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/orgs/webhooks#update-an-organization-webhook)."
* 
* You must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsUpdateWebhookConfigForOrg": (org: string, hookId: string, options: { readonly params?: typeof OrgsUpdateWebhookConfigForOrgParams.Encoded | undefined; readonly payload: typeof OrgsUpdateWebhookConfigForOrgRequest.Encoded }) => Effect.Effect<typeof WebhookConfig.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Returns a list of webhook deliveries for a webhook configured in an organization.
* 
* You must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsListWebhookDeliveries": (org: string, hookId: string, options?: typeof OrgsListWebhookDeliveriesParams.Encoded | undefined) => Effect.Effect<typeof OrgsListWebhookDeliveries200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Returns a delivery for a webhook configured in an organization.
* 
* You must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsGetWebhookDelivery": (org: string, hookId: string, deliveryId: string, options?: typeof OrgsGetWebhookDeliveryParams.Encoded | undefined) => Effect.Effect<typeof HookDelivery.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Redeliver a delivery for a webhook configured in an organization.
* 
* You must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsRedeliverWebhookDelivery": (org: string, hookId: string, deliveryId: string, options?: typeof OrgsRedeliverWebhookDeliveryParams.Encoded | undefined) => Effect.Effect<typeof OrgsRedeliverWebhookDelivery202.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event)
* to be sent to the hook.
* 
* You must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit
* webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
*/
readonly "orgsPingWebhook": (org: string, hookId: string, options?: typeof OrgsPingWebhookParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Get API request count statistics for an actor broken down by route within a specified time frame.
*/
readonly "apiInsightsGetRouteStatsByActor": (org: string, actorType: string, actorId: string, options: typeof ApiInsightsGetRouteStatsByActorParams.Encoded) => Effect.Effect<typeof ApiInsightsRouteStats.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get API request statistics for all subjects within an organization within a specified time frame. Subjects can be users or GitHub Apps.
*/
readonly "apiInsightsGetSubjectStats": (org: string, options: typeof ApiInsightsGetSubjectStatsParams.Encoded) => Effect.Effect<typeof ApiInsightsSubjectStats.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get overall statistics of API requests made within an organization by all users and apps within a specified time frame.
*/
readonly "apiInsightsGetSummaryStats": (org: string, options: typeof ApiInsightsGetSummaryStatsParams.Encoded) => Effect.Effect<typeof ApiInsightsSummaryStats.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get overall statistics of API requests within the organization for a user.
*/
readonly "apiInsightsGetSummaryStatsByUser": (org: string, userId: string, options: typeof ApiInsightsGetSummaryStatsByUserParams.Encoded) => Effect.Effect<typeof ApiInsightsSummaryStats.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get overall statistics of API requests within the organization made by a specific actor. Actors can be GitHub App installations, OAuth apps or other tokens on behalf of a user.
*/
readonly "apiInsightsGetSummaryStatsByActor": (org: string, actorType: string, actorId: string, options: typeof ApiInsightsGetSummaryStatsByActorParams.Encoded) => Effect.Effect<typeof ApiInsightsSummaryStats.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get the number of API requests and rate-limited requests made within an organization over a specified time period.
*/
readonly "apiInsightsGetTimeStats": (org: string, options: typeof ApiInsightsGetTimeStatsParams.Encoded) => Effect.Effect<typeof ApiInsightsTimeStats.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get the number of API requests and rate-limited requests made within an organization by a specific user over a specified time period.
*/
readonly "apiInsightsGetTimeStatsByUser": (org: string, userId: string, options: typeof ApiInsightsGetTimeStatsByUserParams.Encoded) => Effect.Effect<typeof ApiInsightsTimeStats.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get the number of API requests and rate-limited requests made within an organization by a specific actor within a specified time period.
*/
readonly "apiInsightsGetTimeStatsByActor": (org: string, actorType: string, actorId: string, options: typeof ApiInsightsGetTimeStatsByActorParams.Encoded) => Effect.Effect<typeof ApiInsightsTimeStats.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get API usage statistics within an organization for a user broken down by the type of access.
*/
readonly "apiInsightsGetUserStats": (org: string, userId: string, options: typeof ApiInsightsGetUserStatsParams.Encoded) => Effect.Effect<typeof ApiInsightsUserStats.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Enables an authenticated GitHub App to find the organization's installation information.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsGetOrgInstallation": (org: string, options?: typeof AppsGetOrgInstallationParams.Encoded | undefined) => Effect.Effect<typeof Installation.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all GitHub Apps in an organization. The installation count includes
* all GitHub Apps installed on repositories in the organization.
* 
* The authenticated user must be an organization owner to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:read` scope to use this endpoint.
*/
readonly "orgsListAppInstallations": (org: string, options?: typeof OrgsListAppInstallationsParams.Encoded | undefined) => Effect.Effect<typeof OrgsListAppInstallations200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
*/
readonly "interactionsGetRestrictionsForOrg": (org: string, options?: typeof InteractionsGetRestrictionsForOrgParams.Encoded | undefined) => Effect.Effect<typeof InteractionsGetRestrictionsForOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
*/
readonly "interactionsSetRestrictionsForOrg": (org: string, options: { readonly params?: typeof InteractionsSetRestrictionsForOrgParams.Encoded | undefined; readonly payload: typeof InteractionLimit.Encoded }) => Effect.Effect<typeof InteractionLimitResponse.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
*/
readonly "interactionsRemoveRestrictionsForOrg": (org: string, options?: typeof InteractionsRemoveRestrictionsForOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* The return hash contains a `role` field which refers to the Organization
* Invitation role and will be one of the following values: `direct_member`, `admin`,
* `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub
* member, the `login` field in the return hash will be `null`.
*/
readonly "orgsListPendingInvitations": (org: string, options?: typeof OrgsListPendingInvitationsParams.Encoded | undefined) => Effect.Effect<typeof OrgsListPendingInvitations200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
* and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
*/
readonly "orgsCreateInvitation": (org: string, options: { readonly params?: typeof OrgsCreateInvitationParams.Encoded | undefined; readonly payload: typeof OrgsCreateInvitationRequest.Encoded }) => Effect.Effect<typeof OrganizationInvitation.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
*/
readonly "orgsCancelInvitation": (org: string, invitationId: string, options?: typeof OrgsCancelInvitationParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
*/
readonly "orgsListInvitationTeams": (org: string, invitationId: string, options?: typeof OrgsListInvitationTeamsParams.Encoded | undefined) => Effect.Effect<typeof OrgsListInvitationTeams200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists all issue types for an organization. OAuth app tokens and personal access tokens (classic) need the read:org scope to use this endpoint.
*/
readonly "orgsListIssueTypes": (org: string, options?: typeof OrgsListIssueTypesParams.Encoded | undefined) => Effect.Effect<typeof OrgsListIssueTypes200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Create a new issue type for an organization.
* 
* You can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization).
* 
* To use this endpoint, the authenticated user must be an administrator for the organization. OAuth app tokens and
* personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsCreateIssueType": (org: string, options: { readonly params?: typeof OrgsCreateIssueTypeParams.Encoded | undefined; readonly payload: typeof OrganizationCreateIssueType.Encoded }) => Effect.Effect<typeof IssueType.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Updates an issue type for an organization.
* 
* You can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization).
* 
* To use this endpoint, the authenticated user must be an administrator for the organization. OAuth app tokens and
* personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsUpdateIssueType": (org: string, issueTypeId: string, options: { readonly params?: typeof OrgsUpdateIssueTypeParams.Encoded | undefined; readonly payload: typeof OrganizationUpdateIssueType.Encoded }) => Effect.Effect<typeof IssueType.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Deletes an issue type for an organization.
* 
* You can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization).
* 
* To use this endpoint, the authenticated user must be an administrator for the organization. OAuth app tokens and
* personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsDeleteIssueType": (org: string, issueTypeId: string, options?: typeof OrgsDeleteIssueTypeParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* List issues in an organization assigned to the authenticated user.
* 
* > [!NOTE]
* > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesListForOrg": (org: string, options?: typeof IssuesListForOrgParams.Encoded | undefined) => Effect.Effect<typeof IssuesListForOrg200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
*/
readonly "orgsListMembers": (org: string, options?: typeof OrgsListMembersParams.Encoded | undefined) => Effect.Effect<typeof OrgsListMembers200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Check if a user is, publicly or privately, a member of the organization.
*/
readonly "orgsCheckMembershipForUser": (org: string, username: string, options?: typeof OrgsCheckMembershipForUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
* 
* > [!NOTE]
* > If a user has both direct membership in the organization as well as indirect membership via an enterprise team, only their direct membership will be removed. Their indirect membership via an enterprise team remains until the user is removed from the enterprise team.
*/
readonly "orgsRemoveMember": (org: string, username: string, options?: typeof OrgsRemoveMemberParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists the codespaces that a member of an organization has for repositories in that organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesGetCodespacesForUserInOrg": (org: string, username: string, options?: typeof CodespacesGetCodespacesForUserInOrgParams.Encoded | undefined) => Effect.Effect<typeof CodespacesGetCodespacesForUserInOrg200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Deletes a user's codespace.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesDeleteFromOrganization": (org: string, username: string, codespaceName: string, options?: typeof CodespacesDeleteFromOrganizationParams.Encoded | undefined) => Effect.Effect<typeof CodespacesDeleteFromOrganization202.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Stops a user's codespace.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "codespacesStopInOrganization": (org: string, username: string, codespaceName: string, options?: typeof CodespacesStopInOrganizationParams.Encoded | undefined) => Effect.Effect<typeof Codespace.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!NOTE]
* > This endpoint is in public preview and is subject to change.
* 
* Gets the GitHub Copilot seat details for a member of an organization who currently has access to GitHub Copilot.
* 
* The seat object contains information about the user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`.
* For more information about activity data, see [Metrics data properties for GitHub Copilot](https://docs.github.com/copilot/reference/metrics-data).
* 
* Only organization owners can view Copilot seat assignment details for members of their organization.
* 
* OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
*/
readonly "copilotGetCopilotSeatDetailsForUser": (org: string, username: string, options?: typeof CopilotGetCopilotSeatDetailsForUserParams.Encoded | undefined) => Effect.Effect<typeof CopilotSeatDetails.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
*/
readonly "orgsGetMembershipForUser": (org: string, username: string, options?: typeof OrgsGetMembershipForUserParams.Encoded | undefined) => Effect.Effect<typeof OrgMembership.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Only authenticated organization owners can add a member to the organization or update the member's role.
* 
* *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
*     
* *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
* 
* **Rate limits**
* 
* To prevent abuse, organization owners are limited to creating 50 organization invitations for an organization within a 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
*/
readonly "orgsSetMembershipForUser": (org: string, username: string, options: { readonly params?: typeof OrgsSetMembershipForUserParams.Encoded | undefined; readonly payload: typeof OrgsSetMembershipForUserRequest.Encoded }) => Effect.Effect<typeof OrgMembership.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
* 
* If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
* 
* > [!NOTE]
* > If a user has both direct membership in the organization as well as indirect membership via an enterprise team, only their direct membership will be removed. Their indirect membership via an enterprise team remains until the user is removed from the enterprise team.
*/
readonly "orgsRemoveMembershipForUser": (org: string, username: string, options?: typeof OrgsRemoveMembershipForUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).
* 
* A list of `repositories` is only returned for export migrations.
*/
readonly "migrationsListForOrg": (org: string, options?: typeof MigrationsListForOrgParams.Encoded | undefined) => Effect.Effect<typeof MigrationsListForOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Initiates the generation of a migration archive.
*/
readonly "migrationsStartForOrg": (org: string, options: { readonly params?: typeof MigrationsStartForOrgParams.Encoded | undefined; readonly payload: typeof MigrationsStartForOrgRequest.Encoded }) => Effect.Effect<typeof Migration.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Fetches the status of a migration.
* 
* The `state` of a migration can be one of the following values:
* 
* *   `pending`, which means the migration hasn't started yet.
* *   `exporting`, which means the migration is in progress.
* *   `exported`, which means the migration finished successfully.
* *   `failed`, which means the migration failed.
*/
readonly "migrationsGetStatusForOrg": (org: string, migrationId: string, options?: typeof MigrationsGetStatusForOrgParams.Encoded | undefined) => Effect.Effect<typeof Migration.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Fetches the URL to a migration archive.
*/
readonly "migrationsDownloadArchiveForOrg": (org: string, migrationId: string, options?: typeof MigrationsDownloadArchiveForOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
*/
readonly "migrationsDeleteArchiveForOrg": (org: string, migrationId: string, options?: typeof MigrationsDeleteArchiveForOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
*/
readonly "migrationsUnlockRepoForOrg": (org: string, migrationId: string, repoName: string, options?: typeof MigrationsUnlockRepoForOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List all the repositories for this organization migration.
*/
readonly "migrationsListReposForOrg": (org: string, migrationId: string, options?: typeof MigrationsListReposForOrgParams.Encoded | undefined) => Effect.Effect<typeof MigrationsListReposForOrg200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists the organization roles available in this organization. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* To use this endpoint, the authenticated user must be one of:
* 
* - An administrator for the organization.
* - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsListOrgRoles": (org: string, options?: typeof OrgsListOrgRolesParams.Encoded | undefined) => Effect.Effect<typeof OrgsListOrgRoles200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Removes all assigned organization roles from a team. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* The authenticated user must be an administrator for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsRevokeAllOrgRolesTeam": (org: string, teamSlug: string, options?: typeof OrgsRevokeAllOrgRolesTeamParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Assigns an organization role to a team in an organization. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* The authenticated user must be an administrator for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsAssignTeamToOrgRole": (org: string, teamSlug: string, roleId: string, options?: typeof OrgsAssignTeamToOrgRoleParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Removes an organization role from a team. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* The authenticated user must be an administrator for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsRevokeOrgRoleTeam": (org: string, teamSlug: string, roleId: string, options?: typeof OrgsRevokeOrgRoleTeamParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Revokes all assigned organization roles from a user. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* The authenticated user must be an administrator for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsRevokeAllOrgRolesUser": (org: string, username: string, options?: typeof OrgsRevokeAllOrgRolesUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Assigns an organization role to a member of an organization. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* The authenticated user must be an administrator for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsAssignUserToOrgRole": (org: string, username: string, roleId: string, options?: typeof OrgsAssignUserToOrgRoleParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Remove an organization role from a user. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* The authenticated user must be an administrator for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsRevokeOrgRoleUser": (org: string, username: string, roleId: string, options?: typeof OrgsRevokeOrgRoleUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Gets an organization role that is available to this organization. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* To use this endpoint, the authenticated user must be one of:
* 
* - An administrator for the organization.
* - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsGetOrgRole": (org: string, roleId: string, options?: typeof OrgsGetOrgRoleParams.Encoded | undefined) => Effect.Effect<typeof OrganizationRole.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists the teams that are assigned to an organization role. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* To use this endpoint, you must be an administrator for the organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsListOrgRoleTeams": (org: string, roleId: string, options?: typeof OrgsListOrgRoleTeamsParams.Encoded | undefined) => Effect.Effect<typeof OrgsListOrgRoleTeams200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists organization members that are assigned to an organization role. For more information on organization roles, see "[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles)."
* 
* To use this endpoint, you must be an administrator for the organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "orgsListOrgRoleUsers": (org: string, roleId: string, options?: typeof OrgsListOrgRoleUsersParams.Encoded | undefined) => Effect.Effect<typeof OrgsListOrgRoleUsers200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* List all users who are outside collaborators of an organization.
*/
readonly "orgsListOutsideCollaborators": (org: string, options?: typeof OrgsListOutsideCollaboratorsParams.Encoded | undefined) => Effect.Effect<typeof OrgsListOutsideCollaborators200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
*/
readonly "orgsConvertMemberToOutsideCollaborator": (org: string, username: string, options: { readonly params?: typeof OrgsConvertMemberToOutsideCollaboratorParams.Encoded | undefined; readonly payload: typeof OrgsConvertMemberToOutsideCollaboratorRequest.Encoded }) => Effect.Effect<typeof OrgsConvertMemberToOutsideCollaborator202.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Removing a user from this list will remove them from all the organization's repositories.
*/
readonly "orgsRemoveOutsideCollaborator": (org: string, username: string, options?: typeof OrgsRemoveOutsideCollaboratorParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"OrgsRemoveOutsideCollaborator422", typeof OrgsRemoveOutsideCollaborator422.Type>>
  /**
* Lists packages in an organization readable by the user.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesListPackagesForOrganization": (org: string, options: typeof PackagesListPackagesForOrganizationParams.Encoded) => Effect.Effect<typeof PackagesListPackagesForOrganization200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets a specific package in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesGetPackageForOrganization": (org: string, packageType: string, packageName: string, options?: typeof PackagesGetPackageForOrganizationParams.Encoded | undefined) => Effect.Effect<typeof Package.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
* 
* The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesDeletePackageForOrg": (org: string, packageType: string, packageName: string, options?: typeof PackagesDeletePackageForOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Restores an entire package in an organization.
* 
* You can restore a deleted package under the following conditions:
*   - The package was deleted within the last 30 days.
*   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
* 
* The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesRestorePackageForOrg": (org: string, packageType: string, packageName: string, options?: typeof PackagesRestorePackageForOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists package versions for a package owned by an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesGetAllPackageVersionsForPackageOwnedByOrg": (org: string, packageType: string, packageName: string, options?: typeof PackagesGetAllPackageVersionsForPackageOwnedByOrgParams.Encoded | undefined) => Effect.Effect<typeof PackagesGetAllPackageVersionsForPackageOwnedByOrg200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets a specific package version in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesGetPackageVersionForOrganization": (org: string, packageType: string, packageName: string, packageVersionId: string, options?: typeof PackagesGetPackageVersionForOrganizationParams.Encoded | undefined) => Effect.Effect<typeof PackageVersion.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
* 
* The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesDeletePackageVersionForOrg": (org: string, packageType: string, packageName: string, packageVersionId: string, options?: typeof PackagesDeletePackageVersionForOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Restores a specific package version in an organization.
* 
* You can restore a deleted package under the following conditions:
*   - The package was deleted within the last 30 days.
*   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
* 
* The authenticated user must have admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesRestorePackageVersionForOrg": (org: string, packageType: string, packageName: string, packageVersionId: string, options?: typeof PackagesRestorePackageVersionForOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists requests from organization members to access organization resources with a fine-grained personal access token.
* 
* Only GitHub Apps can use this endpoint.
*/
readonly "orgsListPatGrantRequests": (org: string, options?: typeof OrgsListPatGrantRequestsParams.Encoded | undefined) => Effect.Effect<typeof OrgsListPatGrantRequests200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token.
* 
* Only GitHub Apps can use this endpoint.
*/
readonly "orgsReviewPatGrantRequestsInBulk": (org: string, options: { readonly params?: typeof OrgsReviewPatGrantRequestsInBulkParams.Encoded | undefined; readonly payload: typeof OrgsReviewPatGrantRequestsInBulkRequest.Encoded }) => Effect.Effect<typeof OrgsReviewPatGrantRequestsInBulk202.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Approves or denies a pending request to access organization resources via a fine-grained personal access token.
* 
* Only GitHub Apps can use this endpoint.
*/
readonly "orgsReviewPatGrantRequest": (org: string, patRequestId: string, options: { readonly params?: typeof OrgsReviewPatGrantRequestParams.Encoded | undefined; readonly payload: typeof OrgsReviewPatGrantRequestRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists the repositories a fine-grained personal access token request is requesting access to.
* 
* Only GitHub Apps can use this endpoint.
*/
readonly "orgsListPatGrantRequestRepositories": (org: string, patRequestId: string, options?: typeof OrgsListPatGrantRequestRepositoriesParams.Encoded | undefined) => Effect.Effect<typeof OrgsListPatGrantRequestRepositories200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists approved fine-grained personal access tokens owned by organization members that can access organization resources.
* 
* Only GitHub Apps can use this endpoint.
*/
readonly "orgsListPatGrants": (org: string, options?: typeof OrgsListPatGrantsParams.Encoded | undefined) => Effect.Effect<typeof OrgsListPatGrants200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited to revoking a token's existing access.
* 
* Only GitHub Apps can use this endpoint.
*/
readonly "orgsUpdatePatAccesses": (org: string, options: { readonly params?: typeof OrgsUpdatePatAccessesParams.Encoded | undefined; readonly payload: typeof OrgsUpdatePatAccessesRequest.Encoded }) => Effect.Effect<typeof OrgsUpdatePatAccesses202.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Updates the access an organization member has to organization resources via a fine-grained personal access token. Limited to revoking the token's existing access. Limited to revoking a token's existing access.
* 
* Only GitHub Apps can use this endpoint.
*/
readonly "orgsUpdatePatAccess": (org: string, patId: string, options: { readonly params?: typeof OrgsUpdatePatAccessParams.Encoded | undefined; readonly payload: typeof OrgsUpdatePatAccessRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists the repositories a fine-grained personal access token has access to.
* 
* Only GitHub Apps can use this endpoint.
*/
readonly "orgsListPatGrantRepositories": (org: string, patId: string, options?: typeof OrgsListPatGrantRepositoriesParams.Encoded | undefined) => Effect.Effect<typeof OrgsListPatGrantRepositories200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists all private registry configurations available at the organization-level without revealing their encrypted
* values.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "privateRegistriesListOrgPrivateRegistries": (org: string, options?: typeof PrivateRegistriesListOrgPrivateRegistriesParams.Encoded | undefined) => Effect.Effect<typeof PrivateRegistriesListOrgPrivateRegistries200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Creates a private registry configuration with an encrypted value for an organization. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "privateRegistriesCreateOrgPrivateRegistry": (org: string, options: { readonly params?: typeof PrivateRegistriesCreateOrgPrivateRegistryParams.Encoded | undefined; readonly payload: typeof PrivateRegistriesCreateOrgPrivateRegistryRequest.Encoded }) => Effect.Effect<typeof OrgPrivateRegistryConfigurationWithSelectedRepositories.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Gets the org public key, which is needed to encrypt private registry secrets. You need to encrypt a secret before you can create or update secrets.
* 
* OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "privateRegistriesGetOrgPublicKey": (org: string, options?: typeof PrivateRegistriesGetOrgPublicKeyParams.Encoded | undefined) => Effect.Effect<typeof PrivateRegistriesGetOrgPublicKey200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Get the configuration of a single private registry defined for an organization, omitting its encrypted value.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "privateRegistriesGetOrgPrivateRegistry": (org: string, secretName: string, options?: typeof PrivateRegistriesGetOrgPrivateRegistryParams.Encoded | undefined) => Effect.Effect<typeof OrgPrivateRegistryConfiguration.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Delete a private registry configuration at the organization-level.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "privateRegistriesDeleteOrgPrivateRegistry": (org: string, secretName: string, options?: typeof PrivateRegistriesDeleteOrgPrivateRegistryParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Updates a private registry configuration with an encrypted value for an organization. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
*/
readonly "privateRegistriesUpdateOrgPrivateRegistry": (org: string, secretName: string, options: { readonly params?: typeof PrivateRegistriesUpdateOrgPrivateRegistryParams.Encoded | undefined; readonly payload: typeof PrivateRegistriesUpdateOrgPrivateRegistryRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicListForOrg": (org: string, options?: typeof ProjectsClassicListForOrgParams.Encoded | undefined) => Effect.Effect<typeof ProjectsClassicListForOrg200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicCreateForOrg": (org: string, options: { readonly params?: typeof ProjectsClassicCreateForOrgParams.Encoded | undefined; readonly payload: typeof ProjectsClassicCreateForOrgRequest.Encoded }) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Gets all custom properties defined for an organization.
* Organization members can read these properties.
*/
readonly "orgsGetAllCustomProperties": (org: string, options?: typeof OrgsGetAllCustomPropertiesParams.Encoded | undefined) => Effect.Effect<typeof OrgsGetAllCustomProperties200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Creates new or updates existing custom properties defined for an organization in a batch.
* 
* If the property already exists, the existing property will be replaced with the new values.
* Missing optional values will fall back to default values, previous values will be overwritten.
* E.g. if a property exists with `values_editable_by: org_and_repo_actors` and it's updated without specifying `values_editable_by`, it will be updated to default value `org_actors`.
* 
* To use this endpoint, the authenticated user must be one of:
*   - An administrator for the organization.
*   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
*/
readonly "orgsCreateOrUpdateCustomProperties": (org: string, options: { readonly params?: typeof OrgsCreateOrUpdateCustomPropertiesParams.Encoded | undefined; readonly payload: typeof OrgsCreateOrUpdateCustomPropertiesRequest.Encoded }) => Effect.Effect<typeof OrgsCreateOrUpdateCustomProperties200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets a custom property that is defined for an organization.
* Organization members can read these properties.
*/
readonly "orgsGetCustomProperty": (org: string, customPropertyName: string, options?: typeof OrgsGetCustomPropertyParams.Encoded | undefined) => Effect.Effect<typeof CustomProperty.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Creates a new or updates an existing custom property that is defined for an organization.
* 
* To use this endpoint, the authenticated user must be one of:
* - An administrator for the organization.
* - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
*/
readonly "orgsCreateOrUpdateCustomProperty": (org: string, customPropertyName: string, options: { readonly params?: typeof OrgsCreateOrUpdateCustomPropertyParams.Encoded | undefined; readonly payload: typeof CustomPropertySetPayload.Encoded }) => Effect.Effect<typeof CustomProperty.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Removes a custom property that is defined for an organization.
* 
* To use this endpoint, the authenticated user must be one of:
*   - An administrator for the organization.
*   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
*/
readonly "orgsRemoveCustomProperty": (org: string, customPropertyName: string, options?: typeof OrgsRemoveCustomPropertyParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists organization repositories with all of their custom property values.
* Organization members can read these properties.
*/
readonly "orgsListCustomPropertiesValuesForRepos": (org: string, options?: typeof OrgsListCustomPropertiesValuesForReposParams.Encoded | undefined) => Effect.Effect<typeof OrgsListCustomPropertiesValuesForRepos200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Create new or update existing custom property values for repositories in a batch that belong to an organization.
* Each target repository will have its custom property values updated to match the values provided in the request.
* 
* A maximum of 30 repositories can be updated in a single request.
* 
* Using a value of `null` for a custom property will remove or 'unset' the property value from the repository.
* 
* To use this endpoint, the authenticated user must be one of:
*   - An administrator for the organization.
*   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_values_editor` in the organization.
*/
readonly "orgsCreateOrUpdateCustomPropertiesValuesForRepos": (org: string, options: { readonly params?: typeof OrgsCreateOrUpdateCustomPropertiesValuesForReposParams.Encoded | undefined; readonly payload: typeof OrgsCreateOrUpdateCustomPropertiesValuesForReposRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Members of an organization can choose to have their membership publicized or not.
*/
readonly "orgsListPublicMembers": (org: string, options?: typeof OrgsListPublicMembersParams.Encoded | undefined) => Effect.Effect<typeof OrgsListPublicMembers200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Check if the provided user is a public member of the organization.
*/
readonly "orgsCheckPublicMembershipForUser": (org: string, username: string, options?: typeof OrgsCheckPublicMembershipForUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* The user can publicize their own membership. (A user cannot publicize the membership for another user.)
* 
* Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
readonly "orgsSetPublicMembershipForAuthenticatedUser": (org: string, username: string, options?: typeof OrgsSetPublicMembershipForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Removes the public membership for the authenticated user from the specified organization, unless public visibility is enforced by default.
*/
readonly "orgsRemovePublicMembershipForAuthenticatedUser": (org: string, username: string, options?: typeof OrgsRemovePublicMembershipForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists repositories for the specified organization.
* 
* > [!NOTE]
* > In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
*/
readonly "reposListForOrg": (org: string, options?: typeof ReposListForOrgParams.Encoded | undefined) => Effect.Effect<typeof ReposListForOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
*/
readonly "reposCreateInOrg": (org: string, options: { readonly params?: typeof ReposCreateInOrgParams.Encoded | undefined; readonly payload: typeof ReposCreateInOrgRequest.Encoded }) => Effect.Effect<typeof FullRepository.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Get all the repository rulesets for an organization.
*/
readonly "reposGetOrgRulesets": (org: string, options?: typeof ReposGetOrgRulesetsParams.Encoded | undefined) => Effect.Effect<typeof ReposGetOrgRulesets200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Create a repository ruleset for an organization.
*/
readonly "reposCreateOrgRuleset": (org: string, options: { readonly params?: typeof ReposCreateOrgRulesetParams.Encoded | undefined; readonly payload: typeof ReposCreateOrgRulesetRequest.Encoded }) => Effect.Effect<typeof RepositoryRuleset.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists suites of rule evaluations at the organization level.
* For more information, see "[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
*/
readonly "reposGetOrgRuleSuites": (org: string, options?: typeof ReposGetOrgRuleSuitesParams.Encoded | undefined) => Effect.Effect<typeof RuleSuites.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets information about a suite of rule evaluations from within an organization.
* For more information, see "[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
*/
readonly "reposGetOrgRuleSuite": (org: string, ruleSuiteId: string, options?: typeof ReposGetOrgRuleSuiteParams.Encoded | undefined) => Effect.Effect<typeof RuleSuite.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Get a repository ruleset for an organization.
* 
* **Note:** To prevent leaking sensitive information, the `bypass_actors` property is only returned if the user
* making the API request has write access to the ruleset.
*/
readonly "reposGetOrgRuleset": (org: string, rulesetId: string, options?: typeof ReposGetOrgRulesetParams.Encoded | undefined) => Effect.Effect<typeof RepositoryRuleset.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Update a ruleset for an organization.
*/
readonly "reposUpdateOrgRuleset": (org: string, rulesetId: string, options: { readonly params?: typeof ReposUpdateOrgRulesetParams.Encoded | undefined; readonly payload: typeof ReposUpdateOrgRulesetRequest.Encoded }) => Effect.Effect<typeof RepositoryRuleset.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Delete a ruleset for an organization.
*/
readonly "reposDeleteOrgRuleset": (org: string, rulesetId: string, options?: typeof ReposDeleteOrgRulesetParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Get the history of an organization ruleset.
*/
readonly "orgsGetOrgRulesetHistory": (org: string, rulesetId: string, options?: typeof OrgsGetOrgRulesetHistoryParams.Encoded | undefined) => Effect.Effect<typeof OrgsGetOrgRulesetHistory200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Get a version of an organization ruleset.
*/
readonly "orgsGetOrgRulesetVersion": (org: string, rulesetId: string, versionId: string, options?: typeof OrgsGetOrgRulesetVersionParams.Encoded | undefined) => Effect.Effect<typeof RulesetVersionWithState.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "secretScanningListAlertsForOrg": (org: string, options?: typeof SecretScanningListAlertsForOrgParams.Encoded | undefined) => Effect.Effect<typeof SecretScanningListAlertsForOrg200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"SecretScanningListAlertsForOrg503", typeof SecretScanningListAlertsForOrg503.Type>>
  /**
* Lists the secret scanning pattern configurations for an organization.
* 
* Personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "secretScanningListOrgPatternConfigs": (org: string, options?: typeof SecretScanningListOrgPatternConfigsParams.Encoded | undefined) => Effect.Effect<typeof SecretScanningPatternConfiguration.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Updates the secret scanning pattern configurations for an organization.
* 
* Personal access tokens (classic) need the `write:org` scope to use this endpoint.
*/
readonly "secretScanningUpdateOrgPatternConfigs": (org: string, options: { readonly params?: typeof SecretScanningUpdateOrgPatternConfigsParams.Encoded | undefined; readonly payload: typeof SecretScanningUpdateOrgPatternConfigsRequest.Encoded }) => Effect.Effect<typeof SecretScanningUpdateOrgPatternConfigs200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists repository security advisories for an organization.
* 
* The authenticated user must be an owner or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
*/
readonly "securityAdvisoriesListOrgRepositoryAdvisories": (org: string, options?: typeof SecurityAdvisoriesListOrgRepositoryAdvisoriesParams.Encoded | undefined) => Effect.Effect<typeof SecurityAdvisoriesListOrgRepositoryAdvisories200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the "[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)" endpoints instead.
*/
readonly "orgsListSecurityManagerTeams": (org: string, options?: typeof OrgsListSecurityManagerTeamsParams.Encoded | undefined) => Effect.Effect<typeof OrgsListSecurityManagerTeams200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the "[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)" endpoints instead.
*/
readonly "orgsAddSecurityManagerTeam": (org: string, teamSlug: string, options?: typeof OrgsAddSecurityManagerTeamParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the "[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)" endpoints instead.
*/
readonly "orgsRemoveSecurityManagerTeam": (org: string, teamSlug: string, options?: typeof OrgsRemoveSecurityManagerTeamParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Gets the summary of the free and paid GitHub Actions minutes used.
* 
* Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
*/
readonly "billingGetGithubActionsBillingOrg": (org: string, options?: typeof BillingGetGithubActionsBillingOrgParams.Encoded | undefined) => Effect.Effect<typeof ActionsBillingUsage.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets the free and paid storage used for GitHub Packages in gigabytes.
* 
* Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
*/
readonly "billingGetGithubPackagesBillingOrg": (org: string, options?: typeof BillingGetGithubPackagesBillingOrgParams.Encoded | undefined) => Effect.Effect<typeof PackagesBillingUsage.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
* 
* Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
*/
readonly "billingGetSharedStorageBillingOrg": (org: string, options?: typeof BillingGetSharedStorageBillingOrgParams.Encoded | undefined) => Effect.Effect<typeof CombinedBillingUsage.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all hosted compute network configurations configured in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
*/
readonly "hostedComputeListNetworkConfigurationsForOrg": (org: string, options?: typeof HostedComputeListNetworkConfigurationsForOrgParams.Encoded | undefined) => Effect.Effect<typeof HostedComputeListNetworkConfigurationsForOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates a hosted compute network configuration for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
*/
readonly "hostedComputeCreateNetworkConfigurationForOrg": (org: string, options: { readonly params?: typeof HostedComputeCreateNetworkConfigurationForOrgParams.Encoded | undefined; readonly payload: typeof HostedComputeCreateNetworkConfigurationForOrgRequest.Encoded }) => Effect.Effect<typeof NetworkConfiguration.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a hosted compute network configuration configured in an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
*/
readonly "hostedComputeGetNetworkConfigurationForOrg": (org: string, networkConfigurationId: string, options?: typeof HostedComputeGetNetworkConfigurationForOrgParams.Encoded | undefined) => Effect.Effect<typeof NetworkConfiguration.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes a hosted compute network configuration from an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
*/
readonly "hostedComputeDeleteNetworkConfigurationFromOrg": (org: string, networkConfigurationId: string, options?: typeof HostedComputeDeleteNetworkConfigurationFromOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Updates a hosted compute network configuration for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
*/
readonly "hostedComputeUpdateNetworkConfigurationForOrg": (org: string, networkConfigurationId: string, options: { readonly params?: typeof HostedComputeUpdateNetworkConfigurationForOrgParams.Encoded | undefined; readonly payload: typeof HostedComputeUpdateNetworkConfigurationForOrgRequest.Encoded }) => Effect.Effect<typeof NetworkConfiguration.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a hosted compute network settings resource configured for an organization.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
*/
readonly "hostedComputeGetNetworkSettingsForOrg": (org: string, networkSettingsId: string, options?: typeof HostedComputeGetNetworkSettingsForOrgParams.Encoded | undefined) => Effect.Effect<typeof NetworkSettings.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.
* 
* > [!NOTE]
* > This endpoint will only return results for a given day if the team had **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.
* 
* The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day,
* and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics,
* they must have telemetry enabled in their IDE.
* 
* To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization containing the team within GitHub settings.
* Only organization owners for the organization that contains this team and owners and billing managers of the parent enterprise can view Copilot metrics for a team.
* 
* OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
*/
readonly "copilotCopilotMetricsForTeam": (org: string, teamSlug: string, options?: typeof CopilotCopilotMetricsForTeamParams.Encoded | undefined) => Effect.Effect<typeof CopilotCopilotMetricsForTeam200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists all teams in an organization that are visible to the authenticated user.
*/
readonly "teamsList": (org: string, options?: typeof TeamsListParams.Encoded | undefined) => Effect.Effect<typeof TeamsList200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization)."
* 
* When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)".
*/
readonly "teamsCreate": (org: string, options: { readonly params?: typeof TeamsCreateParams.Encoded | undefined; readonly payload: typeof TeamsCreateRequest.Encoded }) => Effect.Effect<typeof TeamFull.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Gets a team using the team's `slug`. To create the `slug`, GitHub replaces special characters in the `name` string, changes all words to lowercase, and replaces spaces with a `-` separator. For example, `"My TEam Näme"` would become `my-team-name`.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
*/
readonly "teamsGetByName": (org: string, teamSlug: string, options?: typeof TeamsGetByNameParams.Encoded | undefined) => Effect.Effect<typeof TeamFull.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* To delete a team, the authenticated user must be an organization owner or team maintainer.
* 
* If you are an organization owner, deleting a parent team will delete all of its child teams as well.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
*/
readonly "teamsDeleteInOrg": (org: string, teamSlug: string, options?: typeof TeamsDeleteInOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* To edit a team, the authenticated user must either be an organization owner or a team maintainer.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
*/
readonly "teamsUpdateInOrg": (org: string, teamSlug: string, options: { readonly params?: typeof TeamsUpdateInOrgParams.Encoded | undefined; readonly payload: typeof TeamsUpdateInOrgRequest.Encoded }) => Effect.Effect<typeof TeamFull.Type | typeof TeamFull.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* List all discussions on a team's page.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "teamsListDiscussionsInOrg": (org: string, teamSlug: string, options?: typeof TeamsListDiscussionsInOrgParams.Encoded | undefined) => Effect.Effect<typeof TeamsListDiscussionsInOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates a new discussion post on a team's page.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsCreateDiscussionInOrg": (org: string, teamSlug: string, options: { readonly params?: typeof TeamsCreateDiscussionInOrgParams.Encoded | undefined; readonly payload: typeof TeamsCreateDiscussionInOrgRequest.Encoded }) => Effect.Effect<typeof TeamDiscussion.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get a specific discussion on a team's page.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "teamsGetDiscussionInOrg": (org: string, teamSlug: string, discussionNumber: string, options?: typeof TeamsGetDiscussionInOrgParams.Encoded | undefined) => Effect.Effect<typeof TeamDiscussion.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete a discussion from a team's page.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsDeleteDiscussionInOrg": (org: string, teamSlug: string, discussionNumber: string, options?: typeof TeamsDeleteDiscussionInOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Edits the title and body text of a discussion post. Only the parameters you provide are updated.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsUpdateDiscussionInOrg": (org: string, teamSlug: string, discussionNumber: string, options: { readonly params?: typeof TeamsUpdateDiscussionInOrgParams.Encoded | undefined; readonly payload: typeof TeamsUpdateDiscussionInOrgRequest.Encoded }) => Effect.Effect<typeof TeamDiscussion.Type, HttpClientError.HttpClientError | ParseError>
  /**
* List all comments on a team discussion.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "teamsListDiscussionCommentsInOrg": (org: string, teamSlug: string, discussionNumber: string, options?: typeof TeamsListDiscussionCommentsInOrgParams.Encoded | undefined) => Effect.Effect<typeof TeamsListDiscussionCommentsInOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates a new comment on a team discussion.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsCreateDiscussionCommentInOrg": (org: string, teamSlug: string, discussionNumber: string, options: { readonly params?: typeof TeamsCreateDiscussionCommentInOrgParams.Encoded | undefined; readonly payload: typeof TeamsCreateDiscussionCommentInOrgRequest.Encoded }) => Effect.Effect<typeof TeamDiscussionComment.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get a specific comment on a team discussion.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "teamsGetDiscussionCommentInOrg": (org: string, teamSlug: string, discussionNumber: string, commentNumber: string, options?: typeof TeamsGetDiscussionCommentInOrgParams.Encoded | undefined) => Effect.Effect<typeof TeamDiscussionComment.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes a comment on a team discussion.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsDeleteDiscussionCommentInOrg": (org: string, teamSlug: string, discussionNumber: string, commentNumber: string, options?: typeof TeamsDeleteDiscussionCommentInOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Edits the body text of a discussion comment.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsUpdateDiscussionCommentInOrg": (org: string, teamSlug: string, discussionNumber: string, commentNumber: string, options: { readonly params?: typeof TeamsUpdateDiscussionCommentInOrgParams.Encoded | undefined; readonly payload: typeof TeamsUpdateDiscussionCommentInOrgRequest.Encoded }) => Effect.Effect<typeof TeamDiscussionComment.Type, HttpClientError.HttpClientError | ParseError>
  /**
* List the reactions to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "reactionsListForTeamDiscussionCommentInOrg": (org: string, teamSlug: string, discussionNumber: string, commentNumber: string, options?: typeof ReactionsListForTeamDiscussionCommentInOrgParams.Encoded | undefined) => Effect.Effect<typeof ReactionsListForTeamDiscussionCommentInOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
* 
* A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "reactionsCreateForTeamDiscussionCommentInOrg": (org: string, teamSlug: string, discussionNumber: string, commentNumber: string, options: { readonly params?: typeof ReactionsCreateForTeamDiscussionCommentInOrgParams.Encoded | undefined; readonly payload: typeof ReactionsCreateForTeamDiscussionCommentInOrgRequest.Encoded }) => Effect.Effect<typeof Reaction.Type | typeof Reaction.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!NOTE]
* > You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
* 
* Delete a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "reactionsDeleteForTeamDiscussionComment": (org: string, teamSlug: string, discussionNumber: string, commentNumber: string, reactionId: string, options?: typeof ReactionsDeleteForTeamDiscussionCommentParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* List the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "reactionsListForTeamDiscussionInOrg": (org: string, teamSlug: string, discussionNumber: string, options?: typeof ReactionsListForTeamDiscussionInOrgParams.Encoded | undefined) => Effect.Effect<typeof ReactionsListForTeamDiscussionInOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
* 
* A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "reactionsCreateForTeamDiscussionInOrg": (org: string, teamSlug: string, discussionNumber: string, options: { readonly params?: typeof ReactionsCreateForTeamDiscussionInOrgParams.Encoded | undefined; readonly payload: typeof ReactionsCreateForTeamDiscussionInOrgRequest.Encoded }) => Effect.Effect<typeof Reaction.Type | typeof Reaction.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!NOTE]
* > You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
* 
* Delete a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "reactionsDeleteForTeamDiscussion": (org: string, teamSlug: string, discussionNumber: string, reactionId: string, options?: typeof ReactionsDeleteForTeamDiscussionParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
*/
readonly "teamsListPendingInvitationsInOrg": (org: string, teamSlug: string, options?: typeof TeamsListPendingInvitationsInOrgParams.Encoded | undefined) => Effect.Effect<typeof TeamsListPendingInvitationsInOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Team members will include the members of child teams.
* 
* To list members in a team, the team must be visible to the authenticated user.
*/
readonly "teamsListMembersInOrg": (org: string, teamSlug: string, options?: typeof TeamsListMembersInOrgParams.Encoded | undefined) => Effect.Effect<typeof TeamsListMembersInOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Team members will include the members of child teams.
* 
* To get a user's membership with a team, the team must be visible to the authenticated user.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
* 
* > [!NOTE]
* > The response contains the `state` of the membership and the member's `role`.
* 
* The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).
*/
readonly "teamsGetMembershipForUserInOrg": (org: string, teamSlug: string, username: string, options?: typeof TeamsGetMembershipForUserInOrgParams.Encoded | undefined) => Effect.Effect<typeof TeamMembership.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
* 
* Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* > [!NOTE]
* > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
* 
* An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
* 
* If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
*/
readonly "teamsAddOrUpdateMembershipForUserInOrg": (org: string, teamSlug: string, username: string, options: { readonly params?: typeof TeamsAddOrUpdateMembershipForUserInOrgParams.Encoded | undefined; readonly payload: typeof TeamsAddOrUpdateMembershipForUserInOrgRequest.Encoded }) => Effect.Effect<typeof TeamMembership.Type, HttpClientError.HttpClientError | ParseError>
  /**
* To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
* 
* Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* > [!NOTE]
* > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
*/
readonly "teamsRemoveMembershipForUserInOrg": (org: string, teamSlug: string, username: string, options?: typeof TeamsRemoveMembershipForUserInOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "teamsListProjectsInOrg": (org: string, teamSlug: string, options?: typeof TeamsListProjectsInOrgParams.Encoded | undefined) => Effect.Effect<typeof TeamsListProjectsInOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "teamsCheckPermissionsForProjectInOrg": (org: string, teamSlug: string, projectId: string, options?: typeof TeamsCheckPermissionsForProjectInOrgParams.Encoded | undefined) => Effect.Effect<typeof TeamProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "teamsAddOrUpdateProjectPermissionsInOrg": (org: string, teamSlug: string, projectId: string, options: { readonly params?: typeof TeamsAddOrUpdateProjectPermissionsInOrgParams.Encoded | undefined; readonly payload: typeof TeamsAddOrUpdateProjectPermissionsInOrgRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"TeamsAddOrUpdateProjectPermissionsInOrg403", typeof TeamsAddOrUpdateProjectPermissionsInOrg403.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "teamsRemoveProjectInOrg": (org: string, teamSlug: string, projectId: string, options?: typeof TeamsRemoveProjectInOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists a team's repositories visible to the authenticated user.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
*/
readonly "teamsListReposInOrg": (org: string, teamSlug: string, options?: typeof TeamsListReposInOrgParams.Encoded | undefined) => Effect.Effect<typeof TeamsListReposInOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
* 
* You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types/) via the `application/vnd.github.v3.repository+json` accept header.
* 
* If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
* 
* If the repository is private, you must have at least `read` permission for that repository, and your token must have the `repo` or `admin:org` scope. Otherwise, you will receive a `404 Not Found` response status.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
*/
readonly "teamsCheckPermissionsForRepoInOrg": (org: string, teamSlug: string, owner: string, repo: string, options?: typeof TeamsCheckPermissionsForRepoInOrgParams.Encoded | undefined) => Effect.Effect<typeof TeamRepository.Type, HttpClientError.HttpClientError | ParseError>
  /**
* To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
* 
* For more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
*/
readonly "teamsAddOrUpdateRepoPermissionsInOrg": (org: string, teamSlug: string, owner: string, repo: string, options: { readonly params?: typeof TeamsAddOrUpdateRepoPermissionsInOrgParams.Encoded | undefined; readonly payload: typeof TeamsAddOrUpdateRepoPermissionsInOrgRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
*/
readonly "teamsRemoveRepoInOrg": (org: string, teamSlug: string, owner: string, repo: string, options?: typeof TeamsRemoveRepoInOrgParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists the child teams of the team specified by `{team_slug}`.
* 
* > [!NOTE]
* > You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
*/
readonly "teamsListChildInOrg": (org: string, teamSlug: string, options?: typeof TeamsListChildInOrgParams.Encoded | undefined) => Effect.Effect<typeof TeamsListChildInOrg200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Closing down notice:** The ability to enable or disable a security feature for all eligible repositories in an organization is closing down. Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead. For more information, see the [changelog](https://github.blog/changelog/2024-07-22-deprecation-of-api-endpoint-to-enable-or-disable-a-security-feature-for-an-organization/).
* 
* Enables or disables the specified security feature for all eligible repositories in an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
* 
* The authenticated user must be an organization owner or be member of a team with the security manager role to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:org`, `write:org`, or `repo` scopes to use this endpoint.
*/
readonly "orgsEnableOrDisableSecurityProductOnAllOrgRepos": (org: string, securityProduct: string, enablement: string, options: { readonly params?: typeof OrgsEnableOrDisableSecurityProductOnAllOrgReposParams.Encoded | undefined; readonly payload: typeof OrgsEnableOrDisableSecurityProductOnAllOrgReposRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicGetCard": (cardId: string, options?: typeof ProjectsClassicGetCardParams.Encoded | undefined) => Effect.Effect<typeof ProjectCard.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicDeleteCard": (cardId: string, options?: typeof ProjectsClassicDeleteCardParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ProjectsClassicDeleteCard403", typeof ProjectsClassicDeleteCard403.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicUpdateCard": (cardId: string, options: { readonly params?: typeof ProjectsClassicUpdateCardParams.Encoded | undefined; readonly payload: typeof ProjectsClassicUpdateCardRequest.Encoded }) => Effect.Effect<typeof ProjectCard.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicMoveCard": (cardId: string, options: { readonly params?: typeof ProjectsClassicMoveCardParams.Encoded | undefined; readonly payload: typeof ProjectsClassicMoveCardRequest.Encoded }) => Effect.Effect<typeof ProjectsClassicMoveCard201.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ProjectsClassicMoveCard403", typeof ProjectsClassicMoveCard403.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"ProjectsClassicMoveCard503", typeof ProjectsClassicMoveCard503.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicGetColumn": (columnId: string, options?: typeof ProjectsClassicGetColumnParams.Encoded | undefined) => Effect.Effect<typeof ProjectColumn.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicDeleteColumn": (columnId: string, options?: typeof ProjectsClassicDeleteColumnParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicUpdateColumn": (columnId: string, options: { readonly params?: typeof ProjectsClassicUpdateColumnParams.Encoded | undefined; readonly payload: typeof ProjectsClassicUpdateColumnRequest.Encoded }) => Effect.Effect<typeof ProjectColumn.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicListCards": (columnId: string, options?: typeof ProjectsClassicListCardsParams.Encoded | undefined) => Effect.Effect<typeof ProjectsClassicListCards200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicCreateCard": (columnId: string, options: { readonly params?: typeof ProjectsClassicCreateCardParams.Encoded | undefined; readonly payload: typeof ProjectsClassicCreateCardRequest.Encoded }) => Effect.Effect<typeof ProjectCard.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ProjectsClassicCreateCard422", typeof ProjectsClassicCreateCard422.Type> | ClientError<"ProjectsClassicCreateCard503", typeof ProjectsClassicCreateCard503.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicMoveColumn": (columnId: string, options: { readonly params?: typeof ProjectsClassicMoveColumnParams.Encoded | undefined; readonly payload: typeof ProjectsClassicMoveColumnRequest.Encoded }) => Effect.Effect<typeof ProjectsClassicMoveColumn201.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicGet": (projectId: string, options?: typeof ProjectsClassicGetParams.Encoded | undefined) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicDelete": (projectId: string, options?: typeof ProjectsClassicDeleteParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ProjectsClassicDelete403", typeof ProjectsClassicDelete403.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicUpdate": (projectId: string, options: { readonly params?: typeof ProjectsClassicUpdateParams.Encoded | undefined; readonly payload: typeof ProjectsClassicUpdateRequest.Encoded }) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ProjectsClassicUpdate403", typeof ProjectsClassicUpdate403.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicListCollaborators": (projectId: string, options?: typeof ProjectsClassicListCollaboratorsParams.Encoded | undefined) => Effect.Effect<typeof ProjectsClassicListCollaborators200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicAddCollaborator": (projectId: string, username: string, options: { readonly params?: typeof ProjectsClassicAddCollaboratorParams.Encoded | undefined; readonly payload: typeof ProjectsClassicAddCollaboratorRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicRemoveCollaborator": (projectId: string, username: string, options?: typeof ProjectsClassicRemoveCollaboratorParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicGetPermissionForUser": (projectId: string, username: string, options?: typeof ProjectsClassicGetPermissionForUserParams.Encoded | undefined) => Effect.Effect<typeof ProjectCollaboratorPermission.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicListColumns": (projectId: string, options?: typeof ProjectsClassicListColumnsParams.Encoded | undefined) => Effect.Effect<typeof ProjectsClassicListColumns200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicCreateColumn": (projectId: string, options: { readonly params?: typeof ProjectsClassicCreateColumnParams.Encoded | undefined; readonly payload: typeof ProjectsClassicCreateColumnRequest.Encoded }) => Effect.Effect<typeof ProjectColumn.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* > [!NOTE]
* > Accessing this endpoint does not count against your REST API rate limit.
* 
* Some categories of endpoints have custom rate limits that are separate from the rate limit governing the other REST API endpoints. For this reason, the API response categorizes your rate limit. Under `resources`, you'll see objects relating to different categories:
* * The `core` object provides your rate limit status for all non-search-related resources in the REST API.
* * The `search` object provides your rate limit status for the REST API for searching (excluding code searches). For more information, see "[Search](https://docs.github.com/rest/search/search)."
* * The `code_search` object provides your rate limit status for the REST API for searching code. For more information, see "[Search code](https://docs.github.com/rest/search/search#search-code)."
* * The `graphql` object provides your rate limit status for the GraphQL API. For more information, see "[Resource limitations](https://docs.github.com/graphql/overview/resource-limitations#rate-limit)."
* * The `integration_manifest` object provides your rate limit status for the `POST /app-manifests/{code}/conversions` operation. For more information, see "[Creating a GitHub App from a manifest](https://docs.github.com/apps/creating-github-apps/setting-up-a-github-app/creating-a-github-app-from-a-manifest#3-you-exchange-the-temporary-code-to-retrieve-the-app-configuration)."
* * The `dependency_snapshots` object provides your rate limit status for submitting snapshots to the dependency graph. For more information, see "[Dependency graph](https://docs.github.com/rest/dependency-graph)."
* * The `dependency_sbom` object provides your rate limit status for requesting SBOMs from the dependency graph. For more information, see "[Dependency graph](https://docs.github.com/rest/dependency-graph)."
* * The `code_scanning_upload` object provides your rate limit status for uploading SARIF results to code scanning. For more information, see "[Uploading a SARIF file to GitHub](https://docs.github.com/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github)."
* * The `actions_runner_registration` object provides your rate limit status for registering self-hosted runners in GitHub Actions. For more information, see "[Self-hosted runners](https://docs.github.com/rest/actions/self-hosted-runners)."
* * The `source_import` object is no longer in use for any API endpoints, and it will be removed in the next API version. For more information about API versions, see "[API Versions](https://docs.github.com/rest/about-the-rest-api/api-versions)."
* 
* > [!NOTE]
* > The `rate` object is closing down. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
*/
readonly "rateLimitGet": () => Effect.Effect<typeof RateLimitOverview.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
* 
* > [!NOTE]
* > In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
*/
readonly "reposGet": (owner: string, repo: string, options?: typeof ReposGetParams.Encoded | undefined) => Effect.Effect<typeof FullRepository.Type | typeof BasicError.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Deleting a repository requires admin access.
* 
* If an organization owner has configured the organization to prevent members from deleting organization-owned
* repositories, you will get a `403 Forbidden` response.
* 
* OAuth app tokens and personal access tokens (classic) need the `delete_repo` scope to use this endpoint.
*/
readonly "reposDelete": (owner: string, repo: string, options?: typeof ReposDeleteParams.Encoded | undefined) => Effect.Effect<typeof BasicError.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ReposDelete403", typeof ReposDelete403.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/repos/repos#replace-all-repository-topics) endpoint.
*/
readonly "reposUpdate": (owner: string, repo: string, options: { readonly params?: typeof ReposUpdateParams.Encoded | undefined; readonly payload: typeof ReposUpdateRequest.Encoded }) => Effect.Effect<typeof FullRepository.Type | typeof BasicError.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists all artifacts for a repository.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsListArtifactsForRepo": (owner: string, repo: string, options?: typeof ActionsListArtifactsForRepoParams.Encoded | undefined) => Effect.Effect<typeof ActionsListArtifactsForRepo200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a specific artifact for a workflow run.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetArtifact": (owner: string, repo: string, artifactId: string, options?: typeof ActionsGetArtifactParams.Encoded | undefined) => Effect.Effect<typeof Artifact.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes an artifact for a workflow run.
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteArtifact": (owner: string, repo: string, artifactId: string, options?: typeof ActionsDeleteArtifactParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
* the response header to find the URL for the download. The `:archive_format` must be `zip`.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDownloadArtifact": (owner: string, repo: string, artifactId: string, archiveFormat: string, options?: typeof ActionsDownloadArtifactParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets GitHub Actions cache usage for a repository.
* The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetActionsCacheUsage": (owner: string, repo: string, options?: typeof ActionsGetActionsCacheUsageParams.Encoded | undefined) => Effect.Effect<typeof ActionsCacheUsageByRepository.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists the GitHub Actions caches for a repository.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetActionsCacheList": (owner: string, repo: string, options?: typeof ActionsGetActionsCacheListParams.Encoded | undefined) => Effect.Effect<typeof ActionsCacheList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteActionsCacheByKey": (owner: string, repo: string, options: typeof ActionsDeleteActionsCacheByKeyParams.Encoded) => Effect.Effect<typeof ActionsCacheList.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes a GitHub Actions cache for a repository, using a cache ID.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteActionsCacheById": (owner: string, repo: string, cacheId: string, options?: typeof ActionsDeleteActionsCacheByIdParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a specific job in a workflow run.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetJobForWorkflowRun": (owner: string, repo: string, jobId: string, options?: typeof ActionsGetJobForWorkflowRunParams.Encoded | undefined) => Effect.Effect<typeof Job.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
* for `Location:` in the response header to find the URL for the download.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDownloadJobLogsForWorkflowRun": (owner: string, repo: string, jobId: string, options?: typeof ActionsDownloadJobLogsForWorkflowRunParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Re-run a job and its dependent jobs in a workflow run.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsReRunJobForWorkflowRun": (owner: string, repo: string, jobId: string, options: { readonly params?: typeof ActionsReRunJobForWorkflowRunParams.Encoded | undefined; readonly payload: typeof ActionsReRunJobForWorkflowRunRequest.Encoded }) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets the customization template for an OpenID Connect (OIDC) subject claim.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetCustomOidcSubClaimForRepo": (owner: string, repo: string, options?: typeof ActionsGetCustomOidcSubClaimForRepoParams.Encoded | undefined) => Effect.Effect<typeof OidcCustomSubRepo.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsSetCustomOidcSubClaimForRepo": (owner: string, repo: string, options: { readonly params?: typeof ActionsSetCustomOidcSubClaimForRepoParams.Encoded | undefined; readonly payload: typeof ActionsSetCustomOidcSubClaimForRepoRequest.Encoded }) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Lists all organization secrets shared with a repository without revealing their encrypted
* values.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsListRepoOrganizationSecrets": (owner: string, repo: string, options?: typeof ActionsListRepoOrganizationSecretsParams.Encoded | undefined) => Effect.Effect<typeof ActionsListRepoOrganizationSecrets200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all organization variables shared with a repository.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsListRepoOrganizationVariables": (owner: string, repo: string, options?: typeof ActionsListRepoOrganizationVariablesParams.Encoded | undefined) => Effect.Effect<typeof ActionsListRepoOrganizationVariables200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetGithubActionsPermissionsRepository": (owner: string, repo: string, options?: typeof ActionsGetGithubActionsPermissionsRepositoryParams.Encoded | undefined) => Effect.Effect<typeof ActionsRepositoryPermissions.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsSetGithubActionsPermissionsRepository": (owner: string, repo: string, options: { readonly params?: typeof ActionsSetGithubActionsPermissionsRepositoryParams.Encoded | undefined; readonly payload: typeof ActionsSetGithubActionsPermissionsRepositoryRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
* This endpoint only applies to private repositories.
* For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetWorkflowAccessToRepository": (owner: string, repo: string, options?: typeof ActionsGetWorkflowAccessToRepositoryParams.Encoded | undefined) => Effect.Effect<typeof ActionsWorkflowAccessToRepository.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
* This endpoint only applies to private repositories.
* For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)".
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsSetWorkflowAccessToRepository": (owner: string, repo: string, options: { readonly params?: typeof ActionsSetWorkflowAccessToRepositoryParams.Encoded | undefined; readonly payload: typeof ActionsWorkflowAccessToRepository.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Gets artifact and log retention settings for a repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetArtifactAndLogRetentionSettingsRepository": (owner: string, repo: string, options?: typeof ActionsGetArtifactAndLogRetentionSettingsRepositoryParams.Encoded | undefined) => Effect.Effect<typeof ActionsArtifactAndLogRetentionResponse.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Sets artifact and log retention settings for a repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsSetArtifactAndLogRetentionSettingsRepository": (owner: string, repo: string, options: { readonly params?: typeof ActionsSetArtifactAndLogRetentionSettingsRepositoryParams.Encoded | undefined; readonly payload: typeof ActionsArtifactAndLogRetention.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Gets the fork PR contributor approval policy for a repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetForkPrContributorApprovalPermissionsRepository": (owner: string, repo: string, options?: typeof ActionsGetForkPrContributorApprovalPermissionsRepositoryParams.Encoded | undefined) => Effect.Effect<typeof ActionsForkPrContributorApproval.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Sets the fork PR contributor approval policy for a repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsSetForkPrContributorApprovalPermissionsRepository": (owner: string, repo: string, options: { readonly params?: typeof ActionsSetForkPrContributorApprovalPermissionsRepositoryParams.Encoded | undefined; readonly payload: typeof ActionsForkPrContributorApproval.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Gets the settings for whether workflows from fork pull requests can run on a private repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetPrivateRepoForkPrWorkflowsSettingsRepository": (owner: string, repo: string, options?: typeof ActionsGetPrivateRepoForkPrWorkflowsSettingsRepositoryParams.Encoded | undefined) => Effect.Effect<typeof ActionsForkPrWorkflowsPrivateRepos.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Sets the settings for whether workflows from fork pull requests can run on a private repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsSetPrivateRepoForkPrWorkflowsSettingsRepository": (owner: string, repo: string, options: { readonly params?: typeof ActionsSetPrivateRepoForkPrWorkflowsSettingsRepositoryParams.Encoded | undefined; readonly payload: typeof ActionsForkPrWorkflowsPrivateReposRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetAllowedActionsRepository": (owner: string, repo: string, options?: typeof ActionsGetAllowedActionsRepositoryParams.Encoded | undefined) => Effect.Effect<typeof SelectedActions.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsSetAllowedActionsRepository": (owner: string, repo: string, options: { readonly params?: typeof ActionsSetAllowedActionsRepositoryParams.Encoded | undefined; readonly payload: typeof SelectedActions.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,
* as well as if GitHub Actions can submit approving pull request reviews.
* For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetGithubActionsDefaultWorkflowPermissionsRepository": (owner: string, repo: string, options?: typeof ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryParams.Encoded | undefined) => Effect.Effect<typeof ActionsGetDefaultWorkflowPermissions.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions
* can submit approving pull request reviews.
* For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsSetGithubActionsDefaultWorkflowPermissionsRepository": (owner: string, repo: string, options: { readonly params?: typeof ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryParams.Encoded | undefined; readonly payload: typeof ActionsSetDefaultWorkflowPermissions.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all self-hosted runners configured in a repository.
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsListSelfHostedRunnersForRepo": (owner: string, repo: string, options?: typeof ActionsListSelfHostedRunnersForRepoParams.Encoded | undefined) => Effect.Effect<typeof ActionsListSelfHostedRunnersForRepo200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists binaries for the runner application that you can download and run.
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsListRunnerApplicationsForRepo": (owner: string, repo: string, options?: typeof ActionsListRunnerApplicationsForRepoParams.Encoded | undefined) => Effect.Effect<typeof ActionsListRunnerApplicationsForRepo200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Generates a configuration that can be passed to the runner application at startup.
* 
* The authenticated user must have admin access to the repository.
* 
* OAuth tokens and personal access tokens (classic) need the`repo` scope to use this endpoint.
*/
readonly "actionsGenerateRunnerJitconfigForRepo": (owner: string, repo: string, options: { readonly params?: typeof ActionsGenerateRunnerJitconfigForRepoParams.Encoded | undefined; readonly payload: typeof ActionsGenerateRunnerJitconfigForRepoRequest.Encoded }) => Effect.Effect<typeof ActionsGenerateRunnerJitconfigForRepo201.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Returns a token that you can pass to the `config` script. The token expires after one hour.
* 
* For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:
* 
* ```
* ./config.sh --url https://github.com/octo-org --token TOKEN
* ```
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateRegistrationTokenForRepo": (owner: string, repo: string, options?: typeof ActionsCreateRegistrationTokenForRepoParams.Encoded | undefined) => Effect.Effect<typeof AuthenticationToken.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Returns a token that you can pass to the `config` script to remove a self-hosted runner from an repository. The token expires after one hour.
* 
* For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:
* 
* ```
* ./config.sh remove --token TOKEN
* ```
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateRemoveTokenForRepo": (owner: string, repo: string, options?: typeof ActionsCreateRemoveTokenForRepoParams.Encoded | undefined) => Effect.Effect<typeof AuthenticationToken.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a specific self-hosted runner configured in a repository.
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetSelfHostedRunnerForRepo": (owner: string, repo: string, runnerId: string, options?: typeof ActionsGetSelfHostedRunnerForRepoParams.Encoded | undefined) => Effect.Effect<typeof Runner.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteSelfHostedRunnerFromRepo": (owner: string, repo: string, runnerId: string, options?: typeof ActionsDeleteSelfHostedRunnerFromRepoParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Lists all labels for a self-hosted runner configured in a repository.
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsListLabelsForSelfHostedRunnerForRepo": (owner: string, repo: string, runnerId: string, options?: typeof ActionsListLabelsForSelfHostedRunnerForRepoParams.Encoded | undefined) => Effect.Effect<typeof ActionsListLabelsForSelfHostedRunnerForRepo200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Remove all previous custom labels and set the new custom labels for a specific
* self-hosted runner configured in a repository.
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsSetCustomLabelsForSelfHostedRunnerForRepo": (owner: string, repo: string, runnerId: string, options: { readonly params?: typeof ActionsSetCustomLabelsForSelfHostedRunnerForRepoParams.Encoded | undefined; readonly payload: typeof ActionsSetCustomLabelsForSelfHostedRunnerForRepoRequest.Encoded }) => Effect.Effect<typeof ActionsSetCustomLabelsForSelfHostedRunnerForRepo200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Adds custom labels to a self-hosted runner configured in a repository.
* 
* Authenticated users must have admin access to the organization to use this endpoint.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsAddCustomLabelsToSelfHostedRunnerForRepo": (owner: string, repo: string, runnerId: string, options: { readonly params?: typeof ActionsAddCustomLabelsToSelfHostedRunnerForRepoParams.Encoded | undefined; readonly payload: typeof ActionsAddCustomLabelsToSelfHostedRunnerForRepoRequest.Encoded }) => Effect.Effect<typeof ActionsAddCustomLabelsToSelfHostedRunnerForRepo200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Remove all custom labels from a self-hosted runner configured in a
* repository. Returns the remaining read-only labels from the runner.
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo": (owner: string, repo: string, runnerId: string, options?: typeof ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoParams.Encoded | undefined) => Effect.Effect<typeof ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Remove a custom label from a self-hosted runner configured
* in a repository. Returns the remaining labels from the runner.
* 
* This endpoint returns a `404 Not Found` status if the custom label is not
* present on the runner.
* 
* Authenticated users must have admin access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsRemoveCustomLabelFromSelfHostedRunnerForRepo": (owner: string, repo: string, runnerId: string, name: string, options?: typeof ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoParams.Encoded | undefined) => Effect.Effect<typeof ActionsRemoveCustomLabelFromSelfHostedRunnerForRepo200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
* 
* This endpoint will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.
*/
readonly "actionsListWorkflowRunsForRepo": (owner: string, repo: string, options?: typeof ActionsListWorkflowRunsForRepoParams.Encoded | undefined) => Effect.Effect<typeof ActionsListWorkflowRunsForRepo200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a specific workflow run.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsGetWorkflowRun": (owner: string, repo: string, runId: string, options?: typeof ActionsGetWorkflowRunParams.Encoded | undefined) => Effect.Effect<typeof WorkflowRun.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes a specific workflow run.
* 
* Anyone with write access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteWorkflowRun": (owner: string, repo: string, runId: string, options?: typeof ActionsDeleteWorkflowRunParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsGetReviewsForRun": (owner: string, repo: string, runId: string, options?: typeof ActionsGetReviewsForRunParams.Encoded | undefined) => Effect.Effect<typeof ActionsGetReviewsForRun200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsApproveWorkflowRun": (owner: string, repo: string, runId: string, options?: typeof ActionsApproveWorkflowRunParams.Encoded | undefined) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists artifacts for a workflow run.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsListWorkflowRunArtifacts": (owner: string, repo: string, runId: string, options?: typeof ActionsListWorkflowRunArtifactsParams.Encoded | undefined) => Effect.Effect<typeof ActionsListWorkflowRunArtifacts200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a specific workflow run attempt.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsGetWorkflowRunAttempt": (owner: string, repo: string, runId: string, attemptNumber: string, options?: typeof ActionsGetWorkflowRunAttemptParams.Encoded | undefined) => Effect.Effect<typeof WorkflowRun.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more information
* about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint  with a private repository.
*/
readonly "actionsListJobsForWorkflowRunAttempt": (owner: string, repo: string, runId: string, attemptNumber: string, options?: typeof ActionsListJobsForWorkflowRunAttemptParams.Encoded | undefined) => Effect.Effect<typeof ActionsListJobsForWorkflowRunAttempt200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
* 1 minute. Look for `Location:` in the response header to find the URL for the download.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDownloadWorkflowRunAttemptLogs": (owner: string, repo: string, runId: string, attemptNumber: string, options?: typeof ActionsDownloadWorkflowRunAttemptLogsParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Cancels a workflow run using its `id`.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCancelWorkflowRun": (owner: string, repo: string, runId: string, options?: typeof ActionsCancelWorkflowRunParams.Encoded | undefined) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
* 
* > [!NOTE]
* > GitHub Apps can only review their own custom deployment protection rules. To approve or reject pending deployments that are waiting for review from a specific person or team, see [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsReviewCustomGatesForRun": (owner: string, repo: string, runId: string, options: { readonly params?: typeof ActionsReviewCustomGatesForRunParams.Encoded | undefined; readonly payload: typeof ActionsReviewCustomGatesForRunRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Cancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an `always()` condition on a job.
* You should only use this endpoint to cancel a workflow run when the workflow run is not responding to [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`](/rest/actions/workflow-runs#cancel-a-workflow-run).
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsForceCancelWorkflowRun": (owner: string, repo: string, runId: string, options?: typeof ActionsForceCancelWorkflowRunParams.Encoded | undefined) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists jobs for a workflow run. You can use parameters to narrow the list of results. For more information
* about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsListJobsForWorkflowRun": (owner: string, repo: string, runId: string, options?: typeof ActionsListJobsForWorkflowRunParams.Encoded | undefined) => Effect.Effect<typeof ActionsListJobsForWorkflowRun200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
* `Location:` in the response header to find the URL for the download.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDownloadWorkflowRunLogs": (owner: string, repo: string, runId: string, options?: typeof ActionsDownloadWorkflowRunLogsParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes all logs for a workflow run.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteWorkflowRunLogs": (owner: string, repo: string, runId: string, options?: typeof ActionsDeleteWorkflowRunLogsParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Get all deployment environments for a workflow run that are waiting for protection rules to pass.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetPendingDeploymentsForRun": (owner: string, repo: string, runId: string, options?: typeof ActionsGetPendingDeploymentsForRunParams.Encoded | undefined) => Effect.Effect<typeof ActionsGetPendingDeploymentsForRun200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Approve or reject pending deployments that are waiting on approval by a required reviewer.
* 
* Required reviewers with read access to the repository contents and deployments can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsReviewPendingDeploymentsForRun": (owner: string, repo: string, runId: string, options: { readonly params?: typeof ActionsReviewPendingDeploymentsForRunParams.Encoded | undefined; readonly payload: typeof ActionsReviewPendingDeploymentsForRunRequest.Encoded }) => Effect.Effect<typeof ActionsReviewPendingDeploymentsForRun200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Re-runs your workflow run using its `id`.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsReRunWorkflow": (owner: string, repo: string, runId: string, options: { readonly params?: typeof ActionsReRunWorkflowParams.Encoded | undefined; readonly payload: typeof ActionsReRunWorkflowRequest.Encoded }) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsReRunWorkflowFailedJobs": (owner: string, repo: string, runId: string, options: { readonly params?: typeof ActionsReRunWorkflowFailedJobsParams.Encoded | undefined; readonly payload: typeof ActionsReRunWorkflowFailedJobsRequest.Encoded }) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]  
* > This endpoint is in the process of closing down. Refer to "[Actions Get workflow usage and Get workflow run usage endpoints closing down](https://github.blog/changelog/2025-02-02-actions-get-workflow-usage-and-get-workflow-run-usage-endpoints-closing-down/)" for more information.
* 
* Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsGetWorkflowRunUsage": (owner: string, repo: string, runId: string, options?: typeof ActionsGetWorkflowRunUsageParams.Encoded | undefined) => Effect.Effect<typeof WorkflowRunUsage.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all secrets available in a repository without revealing their encrypted
* values.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsListRepoSecrets": (owner: string, repo: string, options?: typeof ActionsListRepoSecretsParams.Encoded | undefined) => Effect.Effect<typeof ActionsListRepoSecrets200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets your public key, which you need to encrypt secrets. You need to
* encrypt a secret before you can create or update secrets.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetRepoPublicKey": (owner: string, repo: string, options?: typeof ActionsGetRepoPublicKeyParams.Encoded | undefined) => Effect.Effect<typeof ActionsPublicKey.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a single repository secret without revealing its encrypted value.
* 
* The authenticated user must have collaborator access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetRepoSecret": (owner: string, repo: string, secretName: string, options?: typeof ActionsGetRepoSecretParams.Encoded | undefined) => Effect.Effect<typeof ActionsSecret.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates or updates a repository secret with an encrypted value. Encrypt your secret using
* [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateOrUpdateRepoSecret": (owner: string, repo: string, secretName: string, options: { readonly params?: typeof ActionsCreateOrUpdateRepoSecretParams.Encoded | undefined; readonly payload: typeof ActionsCreateOrUpdateRepoSecretRequest.Encoded }) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes a secret in a repository using the secret name.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteRepoSecret": (owner: string, repo: string, secretName: string, options?: typeof ActionsDeleteRepoSecretParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all repository variables.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsListRepoVariables": (owner: string, repo: string, options?: typeof ActionsListRepoVariablesParams.Encoded | undefined) => Effect.Effect<typeof ActionsListRepoVariables200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates a repository variable that you can reference in a GitHub Actions workflow.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateRepoVariable": (owner: string, repo: string, options: { readonly params?: typeof ActionsCreateRepoVariableParams.Encoded | undefined; readonly payload: typeof ActionsCreateRepoVariableRequest.Encoded }) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a specific variable in a repository.
* 
* The authenticated user must have collaborator access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetRepoVariable": (owner: string, repo: string, name: string, options?: typeof ActionsGetRepoVariableParams.Encoded | undefined) => Effect.Effect<typeof ActionsVariable.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes a repository variable using the variable name.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteRepoVariable": (owner: string, repo: string, name: string, options?: typeof ActionsDeleteRepoVariableParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Updates a repository variable that you can reference in a GitHub Actions workflow.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsUpdateRepoVariable": (owner: string, repo: string, name: string, options: { readonly params?: typeof ActionsUpdateRepoVariableParams.Encoded | undefined; readonly payload: typeof ActionsUpdateRepoVariableRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists the workflows in a repository.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsListRepoWorkflows": (owner: string, repo: string, options?: typeof ActionsListRepoWorkflowsParams.Encoded | undefined) => Effect.Effect<typeof ActionsListRepoWorkflows200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a specific workflow. You can replace `workflow_id` with the workflow
* file name. For example, you could use `main.yaml`.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsGetWorkflow": (owner: string, repo: string, workflowId: string, options?: typeof ActionsGetWorkflowParams.Encoded | undefined) => Effect.Effect<typeof Workflow.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDisableWorkflow": (owner: string, repo: string, workflowId: string, options?: typeof ActionsDisableWorkflowParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
* 
* You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateWorkflowDispatch": (owner: string, repo: string, workflowId: string, options: { readonly params?: typeof ActionsCreateWorkflowDispatchParams.Encoded | undefined; readonly payload: typeof ActionsCreateWorkflowDispatchRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsEnableWorkflow": (owner: string, repo: string, workflowId: string, options?: typeof ActionsEnableWorkflowParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
* 
* Anyone with read access to the repository can use this endpoint
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
* 
* This endpoint will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.
*/
readonly "actionsListWorkflowRuns": (owner: string, repo: string, workflowId: string, options?: typeof ActionsListWorkflowRunsParams.Encoded | undefined) => Effect.Effect<typeof ActionsListWorkflowRuns200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]  
* > This endpoint is in the process of closing down. Refer to "[Actions Get workflow usage and Get workflow run usage endpoints closing down](https://github.blog/changelog/2025-02-02-actions-get-workflow-usage-and-get-workflow-run-usage-endpoints-closing-down/)" for more information.
* 
* Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
* 
* You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "actionsGetWorkflowUsage": (owner: string, repo: string, workflowId: string, options?: typeof ActionsGetWorkflowUsageParams.Encoded | undefined) => Effect.Effect<typeof WorkflowUsage.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists a detailed history of changes to a repository, such as pushes, merges, force pushes, and branch changes, and associates these changes with commits and users.
* 
* For more information about viewing repository activity,
* see "[Viewing activity and data for your repository](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository)."
*/
readonly "reposListActivities": (owner: string, repo: string, options?: typeof ReposListActivitiesParams.Encoded | undefined) => Effect.Effect<typeof ReposListActivities200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
*/
readonly "issuesListAssignees": (owner: string, repo: string, options?: typeof IssuesListAssigneesParams.Encoded | undefined) => Effect.Effect<typeof IssuesListAssignees200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Checks if a user has permission to be assigned to an issue in this repository.
* 
* If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
* 
* Otherwise a `404` status code is returned.
*/
readonly "issuesCheckUserCanBeAssigned": (owner: string, repo: string, assignee: string, options?: typeof IssuesCheckUserCanBeAssignedParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Store an artifact attestation and associate it with a repository.
* 
* The authenticated user must have write permission to the repository and, if using a fine-grained access token, the `attestations:write` permission is required.
* 
* Artifact attestations are meant to be created using the [attest action](https://github.com/actions/attest). For more information, see our guide on [using artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
*/
readonly "reposCreateAttestation": (owner: string, repo: string, options: { readonly params?: typeof ReposCreateAttestationParams.Encoded | undefined; readonly payload: typeof ReposCreateAttestationRequest.Encoded }) => Effect.Effect<typeof ReposCreateAttestation201.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* List a collection of artifact attestations with a given subject digest that are associated with a repository.
* 
* The authenticated user making the request must have read access to the repository. In addition, when using a fine-grained access token the `attestations:read` permission is required.
* 
* **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
*/
readonly "reposListAttestations": (owner: string, repo: string, subjectDigest: string, options?: typeof ReposListAttestationsParams.Encoded | undefined) => Effect.Effect<typeof ReposListAttestations200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets all autolinks that are configured for a repository.
* 
* Information about autolinks are only available to repository administrators.
*/
readonly "reposListAutolinks": (owner: string, repo: string, options?: typeof ReposListAutolinksParams.Encoded | undefined) => Effect.Effect<typeof ReposListAutolinks200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Users with admin access to the repository can create an autolink.
*/
readonly "reposCreateAutolink": (owner: string, repo: string, options: { readonly params?: typeof ReposCreateAutolinkParams.Encoded | undefined; readonly payload: typeof ReposCreateAutolinkRequest.Encoded }) => Effect.Effect<typeof Autolink.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* This returns a single autolink reference by ID that was configured for the given repository.
* 
* Information about autolinks are only available to repository administrators.
*/
readonly "reposGetAutolink": (owner: string, repo: string, autolinkId: string, options?: typeof ReposGetAutolinkParams.Encoded | undefined) => Effect.Effect<typeof Autolink.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* This deletes a single autolink reference by ID that was configured for the given repository.
* 
* Information about autolinks are only available to repository administrators.
*/
readonly "reposDeleteAutolink": (owner: string, repo: string, autolinkId: string, options?: typeof ReposDeleteAutolinkParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Shows whether Dependabot security updates are enabled, disabled or paused for a repository. The authenticated user must have admin read access to the repository. For more information, see "[Configuring Dependabot security updates](https://docs.github.com/articles/configuring-automated-security-fixes)".
*/
readonly "reposCheckAutomatedSecurityFixes": (owner: string, repo: string, options?: typeof ReposCheckAutomatedSecurityFixesParams.Encoded | undefined) => Effect.Effect<typeof CheckAutomatedSecurityFixes.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Enables Dependabot security updates for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring Dependabot security updates](https://docs.github.com/articles/configuring-automated-security-fixes)".
*/
readonly "reposEnableAutomatedSecurityFixes": (owner: string, repo: string, options?: typeof ReposEnableAutomatedSecurityFixesParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Disables Dependabot security updates for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring Dependabot security updates](https://docs.github.com/articles/configuring-automated-security-fixes)".
*/
readonly "reposDisableAutomatedSecurityFixes": (owner: string, repo: string, options?: typeof ReposDisableAutomatedSecurityFixesParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* List branches
*/
readonly "reposListBranches": (owner: string, repo: string, options?: typeof ReposListBranchesParams.Encoded | undefined) => Effect.Effect<typeof ReposListBranches200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Get a branch
*/
readonly "reposGetBranch": (owner: string, repo: string, branch: string, options?: typeof ReposGetBranchParams.Encoded | undefined) => Effect.Effect<typeof BranchWithProtection.Type | typeof BasicError.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposGetBranchProtection": (owner: string, repo: string, branch: string, options?: typeof ReposGetBranchProtectionParams.Encoded | undefined) => Effect.Effect<typeof BranchProtection.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Protecting a branch requires admin or owner permissions to the repository.
* 
* > [!NOTE]
* > Passing new arrays of `users` and `teams` replaces their previous values.
* 
* > [!NOTE]
* > The list of users, apps, and teams in total is limited to 100 items.
*/
readonly "reposUpdateBranchProtection": (owner: string, repo: string, branch: string, options: { readonly params?: typeof ReposUpdateBranchProtectionParams.Encoded | undefined; readonly payload: typeof ReposUpdateBranchProtectionRequest.Encoded }) => Effect.Effect<typeof ProtectedBranch.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposDeleteBranchProtection": (owner: string, repo: string, branch: string, options?: typeof ReposDeleteBranchProtectionParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposGetAdminBranchProtection": (owner: string, repo: string, branch: string, options?: typeof ReposGetAdminBranchProtectionParams.Encoded | undefined) => Effect.Effect<typeof ProtectedBranchAdminEnforced.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
*/
readonly "reposSetAdminBranchProtection": (owner: string, repo: string, branch: string, options?: typeof ReposSetAdminBranchProtectionParams.Encoded | undefined) => Effect.Effect<typeof ProtectedBranchAdminEnforced.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
*/
readonly "reposDeleteAdminBranchProtection": (owner: string, repo: string, branch: string, options?: typeof ReposDeleteAdminBranchProtectionParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposGetPullRequestReviewProtection": (owner: string, repo: string, branch: string, options?: typeof ReposGetPullRequestReviewProtectionParams.Encoded | undefined) => Effect.Effect<typeof ProtectedBranchPullRequestReview.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposDeletePullRequestReviewProtection": (owner: string, repo: string, branch: string, options?: typeof ReposDeletePullRequestReviewProtectionParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
* 
* > [!NOTE]
* > Passing new arrays of `users` and `teams` replaces their previous values.
*/
readonly "reposUpdatePullRequestReviewProtection": (owner: string, repo: string, branch: string, options: { readonly params?: typeof ReposUpdatePullRequestReviewProtectionParams.Encoded | undefined; readonly payload: typeof ReposUpdatePullRequestReviewProtectionRequest.Encoded }) => Effect.Effect<typeof ProtectedBranchPullRequestReview.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
* 
* > [!NOTE]
* > You must enable branch protection to require signed commits.
*/
readonly "reposGetCommitSignatureProtection": (owner: string, repo: string, branch: string, options?: typeof ReposGetCommitSignatureProtectionParams.Encoded | undefined) => Effect.Effect<typeof ProtectedBranchAdminEnforced.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
*/
readonly "reposCreateCommitSignatureProtection": (owner: string, repo: string, branch: string, options?: typeof ReposCreateCommitSignatureProtectionParams.Encoded | undefined) => Effect.Effect<typeof ProtectedBranchAdminEnforced.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
*/
readonly "reposDeleteCommitSignatureProtection": (owner: string, repo: string, branch: string, options?: typeof ReposDeleteCommitSignatureProtectionParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposGetStatusChecksProtection": (owner: string, repo: string, branch: string, options?: typeof ReposGetStatusChecksProtectionParams.Encoded | undefined) => Effect.Effect<typeof StatusCheckPolicy.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposRemoveStatusCheckProtection": (owner: string, repo: string, branch: string, options?: typeof ReposRemoveStatusCheckProtectionParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
*/
readonly "reposUpdateStatusCheckProtection": (owner: string, repo: string, branch: string, options: { readonly params?: typeof ReposUpdateStatusCheckProtectionParams.Encoded | undefined; readonly payload: typeof ReposUpdateStatusCheckProtectionRequest.Encoded }) => Effect.Effect<typeof StatusCheckPolicy.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposGetAllStatusCheckContexts": (owner: string, repo: string, branch: string, options?: typeof ReposGetAllStatusCheckContextsParams.Encoded | undefined) => Effect.Effect<typeof ReposGetAllStatusCheckContexts200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposSetStatusCheckContexts": (owner: string, repo: string, branch: string, options: { readonly params?: typeof ReposSetStatusCheckContextsParams.Encoded | undefined; readonly payload: typeof ReposSetStatusCheckContextsRequest.Encoded }) => Effect.Effect<typeof ReposSetStatusCheckContexts200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposAddStatusCheckContexts": (owner: string, repo: string, branch: string, options: { readonly params?: typeof ReposAddStatusCheckContextsParams.Encoded | undefined; readonly payload: typeof ReposAddStatusCheckContextsRequest.Encoded }) => Effect.Effect<typeof ReposAddStatusCheckContexts200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
*/
readonly "reposRemoveStatusCheckContexts": (owner: string, repo: string, branch: string, options: { readonly params?: typeof ReposRemoveStatusCheckContextsParams.Encoded | undefined; readonly payload: typeof ReposRemoveStatusCheckContextsRequest.Encoded }) => Effect.Effect<typeof ReposRemoveStatusCheckContexts200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Lists who has access to this protected branch.
* 
* > [!NOTE]
* > Users, apps, and teams `restrictions` are only available for organization-owned repositories.
*/
readonly "reposGetAccessRestrictions": (owner: string, repo: string, branch: string, options?: typeof ReposGetAccessRestrictionsParams.Encoded | undefined) => Effect.Effect<typeof BranchRestrictionPolicy.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Disables the ability to restrict who can push to this branch.
*/
readonly "reposDeleteAccessRestrictions": (owner: string, repo: string, branch: string, options?: typeof ReposDeleteAccessRestrictionsParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Lists the GitHub Apps that have push access to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
*/
readonly "reposGetAppsWithAccessToProtectedBranch": (owner: string, repo: string, branch: string, options?: typeof ReposGetAppsWithAccessToProtectedBranchParams.Encoded | undefined) => Effect.Effect<typeof ReposGetAppsWithAccessToProtectedBranch200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
*/
readonly "reposSetAppAccessRestrictions": (owner: string, repo: string, branch: string, options: { readonly params?: typeof ReposSetAppAccessRestrictionsParams.Encoded | undefined; readonly payload: typeof ReposSetAppAccessRestrictionsRequest.Encoded }) => Effect.Effect<typeof ReposSetAppAccessRestrictions200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Grants the specified apps push access for this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
*/
readonly "reposAddAppAccessRestrictions": (owner: string, repo: string, branch: string, options: { readonly params?: typeof ReposAddAppAccessRestrictionsParams.Encoded | undefined; readonly payload: typeof ReposAddAppAccessRestrictionsRequest.Encoded }) => Effect.Effect<typeof ReposAddAppAccessRestrictions200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Removes the ability of an app to push to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
*/
readonly "reposRemoveAppAccessRestrictions": (owner: string, repo: string, branch: string, options: { readonly params?: typeof ReposRemoveAppAccessRestrictionsParams.Encoded | undefined; readonly payload: typeof ReposRemoveAppAccessRestrictionsRequest.Encoded }) => Effect.Effect<typeof ReposRemoveAppAccessRestrictions200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Lists the teams who have push access to this branch. The list includes child teams.
*/
readonly "reposGetTeamsWithAccessToProtectedBranch": (owner: string, repo: string, branch: string, options?: typeof ReposGetTeamsWithAccessToProtectedBranchParams.Encoded | undefined) => Effect.Effect<typeof ReposGetTeamsWithAccessToProtectedBranch200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
*/
readonly "reposSetTeamAccessRestrictions": (owner: string, repo: string, branch: string, options: { readonly params?: typeof ReposSetTeamAccessRestrictionsParams.Encoded | undefined; readonly payload: typeof ReposSetTeamAccessRestrictionsRequest.Encoded }) => Effect.Effect<typeof ReposSetTeamAccessRestrictions200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Grants the specified teams push access for this branch. You can also give push access to child teams.
*/
readonly "reposAddTeamAccessRestrictions": (owner: string, repo: string, branch: string, options: { readonly params?: typeof ReposAddTeamAccessRestrictionsParams.Encoded | undefined; readonly payload: typeof ReposAddTeamAccessRestrictionsRequest.Encoded }) => Effect.Effect<typeof ReposAddTeamAccessRestrictions200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Removes the ability of a team to push to this branch. You can also remove push access for child teams.
*/
readonly "reposRemoveTeamAccessRestrictions": (owner: string, repo: string, branch: string, options: { readonly params?: typeof ReposRemoveTeamAccessRestrictionsParams.Encoded | undefined; readonly payload: typeof ReposRemoveTeamAccessRestrictionsRequest.Encoded }) => Effect.Effect<typeof ReposRemoveTeamAccessRestrictions200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Lists the people who have push access to this branch.
*/
readonly "reposGetUsersWithAccessToProtectedBranch": (owner: string, repo: string, branch: string, options?: typeof ReposGetUsersWithAccessToProtectedBranchParams.Encoded | undefined) => Effect.Effect<typeof ReposGetUsersWithAccessToProtectedBranch200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
* 
* | Type    | Description                                                                                                                   |
* | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
* | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
*/
readonly "reposSetUserAccessRestrictions": (owner: string, repo: string, branch: string, options: { readonly params?: typeof ReposSetUserAccessRestrictionsParams.Encoded | undefined; readonly payload: typeof ReposSetUserAccessRestrictionsRequest.Encoded }) => Effect.Effect<typeof ReposSetUserAccessRestrictions200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Grants the specified people push access for this branch.
* 
* | Type    | Description                                                                                                                   |
* | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
* | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
*/
readonly "reposAddUserAccessRestrictions": (owner: string, repo: string, branch: string, options: { readonly params?: typeof ReposAddUserAccessRestrictionsParams.Encoded | undefined; readonly payload: typeof ReposAddUserAccessRestrictionsRequest.Encoded }) => Effect.Effect<typeof ReposAddUserAccessRestrictions200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Removes the ability of a user to push to this branch.
* 
* | Type    | Description                                                                                                                                   |
* | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
* | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
*/
readonly "reposRemoveUserAccessRestrictions": (owner: string, repo: string, branch: string, options: { readonly params?: typeof ReposRemoveUserAccessRestrictionsParams.Encoded | undefined; readonly payload: typeof ReposRemoveUserAccessRestrictionsRequest.Encoded }) => Effect.Effect<typeof ReposRemoveUserAccessRestrictions200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Renames a branch in a repository.
* 
* > [!NOTE]
* > Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
* 
* The authenticated user must have push access to the branch. If the branch is the default branch, the authenticated user must also have admin or owner permissions.
* 
* In order to rename the default branch, fine-grained access tokens also need the `administration:write` repository permission.
*/
readonly "reposRenameBranch": (owner: string, repo: string, branch: string, options: { readonly params?: typeof ReposRenameBranchParams.Encoded | undefined; readonly payload: typeof ReposRenameBranchRequest.Encoded }) => Effect.Effect<typeof BranchWithProtection.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Creates a new check run for a specific commit in a repository.
* 
* To create a check run, you must use a GitHub App. OAuth apps and authenticated users are not able to create a check suite.
* 
* In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
* 
* > [!NOTE]
* > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
*/
readonly "checksCreate": (owner: string, repo: string, options: { readonly params?: typeof ChecksCreateParams.Encoded | undefined; readonly payload: typeof ChecksCreateRequest.Encoded }) => Effect.Effect<typeof CheckRun.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a single check run using its `id`.
* 
* > [!NOTE]
* > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
*/
readonly "checksGet": (owner: string, repo: string, checkRunId: string, options?: typeof ChecksGetParams.Encoded | undefined) => Effect.Effect<typeof CheckRun.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Updates a check run for a specific commit in a repository.
* 
* > [!NOTE]
* > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
* 
* OAuth apps and personal access tokens (classic) cannot use this endpoint.
*/
readonly "checksUpdate": (owner: string, repo: string, checkRunId: string, options: { readonly params?: typeof ChecksUpdateParams.Encoded | undefined; readonly payload: typeof ChecksUpdateRequest.Encoded }) => Effect.Effect<typeof CheckRun.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists annotations for a check run using the annotation `id`.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
*/
readonly "checksListAnnotations": (owner: string, repo: string, checkRunId: string, options?: typeof ChecksListAnnotationsParams.Encoded | undefined) => Effect.Effect<typeof ChecksListAnnotations200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, the `status` of the check suite it belongs to is reset to `queued` and the `conclusion` is cleared. The check run itself is not updated. GitHub apps recieving the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) with the `rerequested` action should then decide if the check run should be reset or updated and call the [update `check_run` endpoint](https://docs.github.com/rest/checks/runs#update-a-check-run) to update the check_run if desired.
* 
* For more information about how to re-run GitHub Actions jobs, see "[Re-run a job from a workflow run](https://docs.github.com/rest/actions/workflow-runs#re-run-a-job-from-a-workflow-run)".
*/
readonly "checksRerequestRun": (owner: string, repo: string, checkRunId: string, options?: typeof ChecksRerequestRunParams.Encoded | undefined) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Creates a check suite manually. By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/checks/runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/checks/suites#update-repository-preferences-for-check-suites)".
* 
* > [!NOTE]
* > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
* 
* OAuth apps and personal access tokens (classic) cannot use this endpoint.
*/
readonly "checksCreateSuite": (owner: string, repo: string, options: { readonly params?: typeof ChecksCreateSuiteParams.Encoded | undefined; readonly payload: typeof ChecksCreateSuiteRequest.Encoded }) => Effect.Effect<typeof CheckSuite.Type | typeof CheckSuite.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/checks/suites#create-a-check-suite).
* You must have admin permissions in the repository to set preferences for check suites.
*/
readonly "checksSetSuitesPreferences": (owner: string, repo: string, options: { readonly params?: typeof ChecksSetSuitesPreferencesParams.Encoded | undefined; readonly payload: typeof ChecksSetSuitesPreferencesRequest.Encoded }) => Effect.Effect<typeof CheckSuitePreference.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a single check suite using its `id`.
* 
* > [!NOTE]
* > The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
*/
readonly "checksGetSuite": (owner: string, repo: string, checkSuiteId: string, options?: typeof ChecksGetSuiteParams.Encoded | undefined) => Effect.Effect<typeof CheckSuite.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists check runs for a check suite using its `id`.
* 
* > [!NOTE]
* > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
*/
readonly "checksListForSuite": (owner: string, repo: string, checkSuiteId: string, options?: typeof ChecksListForSuiteParams.Encoded | undefined) => Effect.Effect<typeof ChecksListForSuite200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
*/
readonly "checksRerequestSuite": (owner: string, repo: string, checkSuiteId: string, options?: typeof ChecksRerequestSuiteParams.Encoded | undefined) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists code scanning alerts.
* 
* The response includes a `most_recent_instance` object.
* This provides details of the most recent instance of this alert
* for the default branch (or for the specified Git reference if you used `ref` in the request).
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningListAlertsForRepo": (owner: string, repo: string, options?: typeof CodeScanningListAlertsForRepoParams.Encoded | undefined) => Effect.Effect<typeof CodeScanningListAlertsForRepo200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningListAlertsForRepo503", typeof CodeScanningListAlertsForRepo503.Type>>
  /**
* Gets a single code scanning alert.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningGetAlert": (owner: string, repo: string, alertNumber: string, options?: typeof CodeScanningGetAlertParams.Encoded | undefined) => Effect.Effect<typeof CodeScanningAlert.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningGetAlert503", typeof CodeScanningGetAlert503.Type>>
  /**
* Updates the status of a single code scanning alert.
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningUpdateAlert": (owner: string, repo: string, alertNumber: string, options: { readonly params?: typeof CodeScanningUpdateAlertParams.Encoded | undefined; readonly payload: typeof CodeScanningUpdateAlertRequest.Encoded }) => Effect.Effect<typeof CodeScanningAlert.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningUpdateAlert503", typeof CodeScanningUpdateAlert503.Type>>
  /**
* Gets the status and description of an autofix for a code scanning alert.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningGetAutofix": (owner: string, repo: string, alertNumber: string, options?: typeof CodeScanningGetAutofixParams.Encoded | undefined) => Effect.Effect<typeof CodeScanningAutofix.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningGetAutofix503", typeof CodeScanningGetAutofix503.Type>>
  /**
* Creates an autofix for a code scanning alert.
* 
* If a new autofix is to be created as a result of this request or is currently being generated, then this endpoint will return a 202 Accepted response.
* 
* If an autofix already exists for a given alert, then this endpoint will return a 200 OK response.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningCreateAutofix": (owner: string, repo: string, alertNumber: string, options?: typeof CodeScanningCreateAutofixParams.Encoded | undefined) => Effect.Effect<typeof CodeScanningAutofix.Type | typeof CodeScanningAutofix.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningCreateAutofix503", typeof CodeScanningCreateAutofix503.Type>>
  /**
* Commits an autofix for a code scanning alert.
* 
* If an autofix is committed as a result of this request, then this endpoint will return a 201 Created response.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningCommitAutofix": (owner: string, repo: string, alertNumber: string, options: { readonly params?: typeof CodeScanningCommitAutofixParams.Encoded | undefined; readonly payload: typeof CodeScanningAutofixCommits.Encoded }) => Effect.Effect<typeof CodeScanningAutofixCommitsResponse.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningCommitAutofix503", typeof CodeScanningCommitAutofix503.Type>>
  /**
* Lists all instances of the specified code scanning alert.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningListAlertInstances": (owner: string, repo: string, alertNumber: string, options?: typeof CodeScanningListAlertInstancesParams.Encoded | undefined) => Effect.Effect<typeof CodeScanningListAlertInstances200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningListAlertInstances503", typeof CodeScanningListAlertInstances503.Type>>
  /**
* Lists the details of all code scanning analyses for a repository,
* starting with the most recent.
* The response is paginated and you can use the `page` and `per_page` parameters
* to list the analyses you're interested in.
* By default 30 analyses are listed per page.
* 
* The `rules_count` field in the response give the number of rules
* that were run in the analysis.
* For very old analyses this data is not available,
* and `0` is returned in this field.
* 
* > [!WARNING]
* > **Closing down notice:** The `tool_name` field is closing down and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningListRecentAnalyses": (owner: string, repo: string, options?: typeof CodeScanningListRecentAnalysesParams.Encoded | undefined) => Effect.Effect<typeof CodeScanningListRecentAnalyses200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningListRecentAnalyses503", typeof CodeScanningListRecentAnalyses503.Type>>
  /**
* Gets a specified code scanning analysis for a repository.
* 
* The default JSON response contains fields that describe the analysis.
* This includes the Git reference and commit SHA to which the analysis relates,
* the datetime of the analysis, the name of the code scanning tool,
* and the number of alerts.
* 
* The `rules_count` field in the default response give the number of rules
* that were run in the analysis.
* For very old analyses this data is not available,
* and `0` is returned in this field.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/sarif+json`**: Instead of returning a summary of the analysis, this endpoint returns a subset of the analysis data that was uploaded. The data is formatted as [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html). It also returns additional data such as the `github/alertNumber` and `github/alertUrl` properties.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningGetAnalysis": (owner: string, repo: string, analysisId: string, options?: typeof CodeScanningGetAnalysisParams.Encoded | undefined) => Effect.Effect<typeof CodeScanningAnalysis.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningGetAnalysis503", typeof CodeScanningGetAnalysis503.Type>>
  /**
* Deletes a specified code scanning analysis from a repository.
* 
* You can delete one analysis at a time.
* To delete a series of analyses, start with the most recent analysis and work backwards.
* Conceptually, the process is similar to the undo function in a text editor.
* 
* When you list the analyses for a repository,
* one or more will be identified as deletable in the response:
* 
* ```
* "deletable": true
* ```
* 
* An analysis is deletable when it's the most recent in a set of analyses.
* Typically, a repository will have multiple sets of analyses
* for each enabled code scanning tool,
* where a set is determined by a unique combination of analysis values:
* 
* * `ref`
* * `tool`
* * `category`
* 
* If you attempt to delete an analysis that is not the most recent in a set,
* you'll get a 400 response with the message:
* 
* ```
* Analysis specified is not deletable.
* ```
* 
* The response from a successful `DELETE` operation provides you with
* two alternative URLs for deleting the next analysis in the set:
* `next_analysis_url` and `confirm_delete_url`.
* Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
* in a set. This is a useful option if you want to preserve at least one analysis
* for the specified tool in your repository.
* Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
* When you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`
* in the 200 response is `null`.
* 
* As an example of the deletion process,
* let's imagine that you added a workflow that configured a particular code scanning tool
* to analyze the code in a repository. This tool has added 15 analyses:
* 10 on the default branch, and another 5 on a topic branch.
* You therefore have two separate sets of analyses for this tool.
* You've now decided that you want to remove all of the analyses for the tool.
* To do this you must make 15 separate deletion requests.
* To start, you must find an analysis that's identified as deletable.
* Each set of analyses always has one that's identified as deletable.
* Having found the deletable analysis for one of the two sets,
* delete this analysis and then continue deleting the next analysis in the set until they're all deleted.
* Then repeat the process for the second set.
* The procedure therefore consists of a nested loop:
* 
* **Outer loop**:
* * List the analyses for the repository, filtered by tool.
* * Parse this list to find a deletable analysis. If found:
* 
*   **Inner loop**:
*   * Delete the identified analysis.
*   * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.
* 
* The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningDeleteAnalysis": (owner: string, repo: string, analysisId: string, options?: typeof CodeScanningDeleteAnalysisParams.Encoded | undefined) => Effect.Effect<typeof CodeScanningAnalysisDeletion.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningDeleteAnalysis503", typeof CodeScanningDeleteAnalysis503.Type>>
  /**
* Lists the CodeQL databases that are available in a repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningListCodeqlDatabases": (owner: string, repo: string, options?: typeof CodeScanningListCodeqlDatabasesParams.Encoded | undefined) => Effect.Effect<typeof CodeScanningListCodeqlDatabases200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningListCodeqlDatabases503", typeof CodeScanningListCodeqlDatabases503.Type>>
  /**
* Gets a CodeQL database for a language in a repository.
* 
* By default this endpoint returns JSON metadata about the CodeQL database. To
* download the CodeQL database binary content, set the `Accept` header of the request
* to [`application/zip`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types), and make sure
* your HTTP client is configured to follow redirects or use the `Location` header
* to make a second request to get the redirect URL.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningGetCodeqlDatabase": (owner: string, repo: string, language: string, options?: typeof CodeScanningGetCodeqlDatabaseParams.Encoded | undefined) => Effect.Effect<typeof CodeScanningCodeqlDatabase.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningGetCodeqlDatabase503", typeof CodeScanningGetCodeqlDatabase503.Type>>
  /**
* Deletes a CodeQL database for a language in a repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningDeleteCodeqlDatabase": (owner: string, repo: string, language: string, options?: typeof CodeScanningDeleteCodeqlDatabaseParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningDeleteCodeqlDatabase503", typeof CodeScanningDeleteCodeqlDatabase503.Type>>
  /**
* Creates a new CodeQL variant analysis, which will run a CodeQL query against one or more repositories.
* 
* Get started by learning more about [running CodeQL queries at scale with Multi-Repository Variant Analysis](https://docs.github.com/code-security/codeql-for-vs-code/getting-started-with-codeql-for-vs-code/running-codeql-queries-at-scale-with-multi-repository-variant-analysis).
* 
* Use the `owner` and `repo` parameters in the URL to specify the controller repository that
* will be used for running GitHub Actions workflows and storing the results of the CodeQL variant analysis.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "codeScanningCreateVariantAnalysis": (owner: string, repo: string, options: { readonly params?: typeof CodeScanningCreateVariantAnalysisParams.Encoded | undefined; readonly payload: typeof CodeScanningCreateVariantAnalysisRequest.Encoded }) => Effect.Effect<typeof CodeScanningVariantAnalysis.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningCreateVariantAnalysis503", typeof CodeScanningCreateVariantAnalysis503.Type>>
  /**
* Gets the summary of a CodeQL variant analysis.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningGetVariantAnalysis": (owner: string, repo: string, codeqlVariantAnalysisId: string, options?: typeof CodeScanningGetVariantAnalysisParams.Encoded | undefined) => Effect.Effect<typeof CodeScanningVariantAnalysis.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningGetVariantAnalysis503", typeof CodeScanningGetVariantAnalysis503.Type>>
  /**
* Gets the analysis status of a repository in a CodeQL variant analysis.
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningGetVariantAnalysisRepoTask": (owner: string, repo: string, codeqlVariantAnalysisId: string, repoOwner: string, repoName: string, options?: typeof CodeScanningGetVariantAnalysisRepoTaskParams.Encoded | undefined) => Effect.Effect<typeof CodeScanningVariantAnalysisRepoTask.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningGetVariantAnalysisRepoTask503", typeof CodeScanningGetVariantAnalysisRepoTask503.Type>>
  /**
* Gets a code scanning default setup configuration.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningGetDefaultSetup": (owner: string, repo: string, options?: typeof CodeScanningGetDefaultSetupParams.Encoded | undefined) => Effect.Effect<typeof CodeScanningDefaultSetup.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningGetDefaultSetup503", typeof CodeScanningGetDefaultSetup503.Type>>
  /**
* Updates a code scanning default setup configuration.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningUpdateDefaultSetup": (owner: string, repo: string, options: { readonly params?: typeof CodeScanningUpdateDefaultSetupParams.Encoded | undefined; readonly payload: typeof CodeScanningDefaultSetupUpdate.Encoded }) => Effect.Effect<typeof EmptyObject.Type | typeof CodeScanningDefaultSetupUpdateResponse.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningUpdateDefaultSetup503", typeof CodeScanningUpdateDefaultSetup503.Type>>
  /**
* Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. For troubleshooting information, see "[Troubleshooting SARIF uploads](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif)."
* 
* There are two places where you can upload code scanning results.
*  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
*  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
* 
* You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
* 
* ```
* gzip -c analysis-data.sarif | base64 -w0
* ```
* 
* SARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.
* To get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries. For more information, see "[SARIF results exceed one or more limits](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif/results-exceed-limit)."
* 
* 
* | **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |
* |----------------------------------|:------------------:|----------------------------------------------------------------------------------|
* | Runs per file                    |         20         |                                                                                  |
* | Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |
* | Rules per run                    |       25,000       |                                                                                  |
* | Tool extensions per run          |        100         |                                                                                  |
* | Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |
* | Location per result	             |       1,000        | Only 100 locations will be included.                                             |
* | Tags per rule	                   |         20         | Only 10 tags will be included.                                                   |
* 
* 
* The `202 Accepted` response includes an `id` value.
* You can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.
* For more information, see "[Get information about a SARIF upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload)."
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
* 
* This endpoint is limited to 1,000 requests per hour for each user or app installation calling it.
*/
readonly "codeScanningUploadSarif": (owner: string, repo: string, options: { readonly params?: typeof CodeScanningUploadSarifParams.Encoded | undefined; readonly payload: typeof CodeScanningUploadSarifRequest.Encoded }) => Effect.Effect<typeof CodeScanningSarifsReceipt.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningUploadSarif503", typeof CodeScanningUploadSarif503.Type>>
  /**
* Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository)."
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
*/
readonly "codeScanningGetSarif": (owner: string, repo: string, sarifId: string, options?: typeof CodeScanningGetSarifParams.Encoded | undefined) => Effect.Effect<typeof CodeScanningSarifsStatus.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodeScanningGetSarif503", typeof CodeScanningGetSarif503.Type>>
  /**
* Get the code security configuration that manages a repository's code security settings.
* 
* The authenticated user must be an administrator or security manager for the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "codeSecurityGetConfigurationForRepository": (owner: string, repo: string, options?: typeof CodeSecurityGetConfigurationForRepositoryParams.Encoded | undefined) => Effect.Effect<typeof CodeSecurityConfigurationForRepository.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List any syntax errors that are detected in the CODEOWNERS
* file.
* 
* For more information about the correct CODEOWNERS syntax,
* see "[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
*/
readonly "reposCodeownersErrors": (owner: string, repo: string, options?: typeof ReposCodeownersErrorsParams.Encoded | undefined) => Effect.Effect<typeof CodeownersErrors.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists the codespaces associated to a specified repository and the authenticated user.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesListInRepositoryForAuthenticatedUser": (owner: string, repo: string, options?: typeof CodespacesListInRepositoryForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof CodespacesListInRepositoryForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Creates a codespace owned by the authenticated user in the specified repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesCreateWithRepoForAuthenticatedUser": (owner: string, repo: string, options: { readonly params?: typeof CodespacesCreateWithRepoForAuthenticatedUserParams.Encoded | undefined; readonly payload: typeof CodespacesCreateWithRepoForAuthenticatedUserRequest.Encoded }) => Effect.Effect<typeof Codespace.Type | typeof Codespace.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodespacesCreateWithRepoForAuthenticatedUser503", typeof CodespacesCreateWithRepoForAuthenticatedUser503.Type>>
  /**
* Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files
* specify launchpoint configurations for codespaces created within the repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesListDevcontainersInRepositoryForAuthenticatedUser": (owner: string, repo: string, options?: typeof CodespacesListDevcontainersInRepositoryForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof CodespacesListDevcontainersInRepositoryForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List the machine types available for a given repository based on its configuration.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesRepoMachinesForAuthenticatedUser": (owner: string, repo: string, options?: typeof CodespacesRepoMachinesForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof CodespacesRepoMachinesForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets the default attributes for codespaces created by the user with the repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesPreFlightWithRepoForAuthenticatedUser": (owner: string, repo: string, options?: typeof CodespacesPreFlightWithRepoForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof CodespacesPreFlightWithRepoForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Checks whether the permissions defined by a given devcontainer configuration have been accepted by the authenticated user.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesCheckPermissionsForDevcontainer": (owner: string, repo: string, options: typeof CodespacesCheckPermissionsForDevcontainerParams.Encoded) => Effect.Effect<typeof CodespacesPermissionsCheckForDevcontainer.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"CodespacesCheckPermissionsForDevcontainer503", typeof CodespacesCheckPermissionsForDevcontainer503.Type>>
  /**
* Lists all development environment secrets available in a repository without revealing their encrypted
* values.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "codespacesListRepoSecrets": (owner: string, repo: string, options?: typeof CodespacesListRepoSecretsParams.Encoded | undefined) => Effect.Effect<typeof CodespacesListRepoSecrets200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets your public key, which you need to encrypt secrets. You need to
* encrypt a secret before you can create or update secrets.
* 
* If the repository is private, OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "codespacesGetRepoPublicKey": (owner: string, repo: string, options?: typeof CodespacesGetRepoPublicKeyParams.Encoded | undefined) => Effect.Effect<typeof CodespacesPublicKey.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a single repository development environment secret without revealing its encrypted value.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "codespacesGetRepoSecret": (owner: string, repo: string, secretName: string, options?: typeof CodespacesGetRepoSecretParams.Encoded | undefined) => Effect.Effect<typeof RepoCodespacesSecret.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates or updates a repository development environment secret with an encrypted value. Encrypt your secret using
* [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The associated user must be a repository admin.
*/
readonly "codespacesCreateOrUpdateRepoSecret": (owner: string, repo: string, secretName: string, options: { readonly params?: typeof CodespacesCreateOrUpdateRepoSecretParams.Encoded | undefined; readonly payload: typeof CodespacesCreateOrUpdateRepoSecretRequest.Encoded }) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes a development environment secret in a repository using the secret name.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The associated user must be a repository admin.
*/
readonly "codespacesDeleteRepoSecret": (owner: string, repo: string, secretName: string, options?: typeof CodespacesDeleteRepoSecretParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
* The `permissions` hash returned in the response contains the base role permissions of the collaborator. The `role_name` is the highest role assigned to the collaborator after considering all sources of grants, including: repo, teams, organization, and enterprise.
* There is presently not a way to differentiate between an organization level grant and a repository level grant from this endpoint response.
* 
* Team members will include the members of child teams.
* 
* The authenticated user must have write, maintain, or admin privileges on the repository to use this endpoint. For organization-owned repositories, the authenticated user needs to be a member of the organization.
* OAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.
*/
readonly "reposListCollaborators": (owner: string, repo: string, options?: typeof ReposListCollaboratorsParams.Encoded | undefined) => Effect.Effect<typeof ReposListCollaborators200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
* 
* Team members will include the members of child teams.
* 
* The authenticated user must have push access to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.
*/
readonly "reposCheckCollaborator": (owner: string, repo: string, username: string, options?: typeof ReposCheckCollaboratorParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Add a user to a repository with a specified level of access. If the repository is owned by an organization, this API does not add the user to the organization - a user that has repository access without being an organization member is called an "outside collaborator" (if they are not an Enterprise Managed User) or a "repository collaborator" if they are an Enterprise Managed User. These users are exempt from some organization policies - see "[Adding outside collaborators to repositories](https://docs.github.com/organizations/managing-user-access-to-your-organizations-repositories/managing-outside-collaborators/adding-outside-collaborators-to-repositories-in-your-organization)" to learn more about these collaborator types.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
* 
* Adding an outside collaborator may be restricted by enterprise and organization administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)" and "[Setting permissions for adding outside collaborators](https://docs.github.com/organizations/managing-organization-settings/setting-permissions-for-adding-outside-collaborators)" for organization settings.
* 
* For more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the role being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:
* 
* ```
* Cannot assign {member} permission of {role name}
* ```
* 
* Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
* 
* The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [API](https://docs.github.com/rest/collaborators/invitations).
* 
* For Enterprise Managed Users, this endpoint does not send invitations - these users are automatically added to organizations and repositories. Enterprise Managed Users can only be added to organizations and repositories within their enterprise.
* 
* **Updating an existing collaborator's permission level**
* 
* The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.
* 
* **Rate limits**
* 
* You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
*/
readonly "reposAddCollaborator": (owner: string, repo: string, username: string, options: { readonly params?: typeof ReposAddCollaboratorParams.Encoded | undefined; readonly payload: typeof ReposAddCollaboratorRequest.Encoded }) => Effect.Effect<typeof RepositoryInvitation.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Removes a collaborator from a repository.
* 
* To use this endpoint, the authenticated user must either be an administrator of the repository or target themselves for removal.
* 
* This endpoint also:
* - Cancels any outstanding invitations sent by the collaborator
* - Unassigns the user from any issues
* - Removes access to organization projects if the user is not an organization member and is not a collaborator on any other organization repositories.
* - Unstars the repository
* - Updates access permissions to packages
* 
* Removing a user as a collaborator has the following effects on forks:
*  - If the user had access to a fork through their membership to this repository, the user will also be removed from the fork.
*  - If the user had their own fork of the repository, the fork will be deleted.
*  - If the user still has read access to the repository, open pull requests by this user from a fork will be denied.
* 
* > [!NOTE]
* > A user can still have access to the repository through organization permissions like base repository permissions.
* 
* Although the API responds immediately, the additional permission updates might take some extra time to complete in the background.
* 
* For more information on fork permissions, see "[About permissions and visibility of forks](https://docs.github.com/pull-requests/collaborating-with-pull-requests/working-with-forks/about-permissions-and-visibility-of-forks)".
*/
readonly "reposRemoveCollaborator": (owner: string, repo: string, username: string, options?: typeof ReposRemoveCollaboratorParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Checks the repository permission and role of a collaborator.
* 
* The `permission` attribute provides the legacy base roles of `admin`, `write`, `read`, and `none`, where the
* `maintain` role is mapped to `write` and the `triage` role is mapped to `read`.
* The `role_name` attribute provides the name of the assigned role, including custom roles. The
* `permission` can also be used to determine which base level of access the collaborator has to the repository.
* 
* The calculated permissions are the highest role assigned to the collaborator after considering all sources of grants, including: repo, teams, organization, and enterprise.
* There is presently not a way to differentiate between an organization level grant and a repository level grant from this endpoint response.
*/
readonly "reposGetCollaboratorPermissionLevel": (owner: string, repo: string, username: string, options?: typeof ReposGetCollaboratorPermissionLevelParams.Encoded | undefined) => Effect.Effect<typeof RepositoryCollaboratorPermission.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists the commit comments for a specified repository. Comments are ordered by ascending ID.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "reposListCommitCommentsForRepo": (owner: string, repo: string, options?: typeof ReposListCommitCommentsForRepoParams.Encoded | undefined) => Effect.Effect<typeof ReposListCommitCommentsForRepo200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a specified commit comment.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "reposGetCommitComment": (owner: string, repo: string, commentId: string, options?: typeof ReposGetCommitCommentParams.Encoded | undefined) => Effect.Effect<typeof CommitComment.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Delete a commit comment
*/
readonly "reposDeleteCommitComment": (owner: string, repo: string, commentId: string, options?: typeof ReposDeleteCommitCommentParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Updates the contents of a specified commit comment.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "reposUpdateCommitComment": (owner: string, repo: string, commentId: string, options: { readonly params?: typeof ReposUpdateCommitCommentParams.Encoded | undefined; readonly payload: typeof ReposUpdateCommitCommentRequest.Encoded }) => Effect.Effect<typeof CommitComment.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List the reactions to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).
*/
readonly "reactionsListForCommitComment": (owner: string, repo: string, commentId: string, options?: typeof ReactionsListForCommitCommentParams.Encoded | undefined) => Effect.Effect<typeof ReactionsListForCommitComment200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Create a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
*/
readonly "reactionsCreateForCommitComment": (owner: string, repo: string, commentId: string, options: { readonly params?: typeof ReactionsCreateForCommitCommentParams.Encoded | undefined; readonly payload: typeof ReactionsCreateForCommitCommentRequest.Encoded }) => Effect.Effect<typeof Reaction.Type | typeof Reaction.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* > [!NOTE]
* > You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
* 
* Delete a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).
*/
readonly "reactionsDeleteForCommitComment": (owner: string, repo: string, commentId: string, reactionId: string, options?: typeof ReactionsDeleteForCommitCommentParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* **Signature verification object**
* 
* The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
* 
* | Name | Type | Description |
* | ---- | ---- | ----------- |
* | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
* | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
* | `signature` | `string` | The signature that was extracted from the commit. |
* | `payload` | `string` | The value that was signed. |
* | `verified_at` | `string` | The date the signature was verified by GitHub. |
* 
* These are the possible values for `reason` in the `verification` object:
* 
* | Value | Description |
* | ----- | ----------- |
* | `expired_key` | The key that made the signature is expired. |
* | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
* | `gpgverify_error` | There was an error communicating with the signature verification service. |
* | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
* | `unsigned` | The object does not include a signature. |
* | `unknown_signature_type` | A non-PGP signature was found in the commit. |
* | `no_user` | No user was associated with the `committer` email address in the commit. |
* | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
* | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
* | `unknown_key` | The key that made the signature has not been registered with any user's account. |
* | `malformed_signature` | There was an error parsing the signature. |
* | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
* | `valid` | None of the above errors applied, so the signature is considered to be verified. |
*/
readonly "reposListCommits": (owner: string, repo: string, options?: typeof ReposListCommitsParams.Encoded | undefined) => Effect.Effect<typeof ReposListCommits200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
*/
readonly "reposListBranchesForHeadCommit": (owner: string, repo: string, commitSha: string, options?: typeof ReposListBranchesForHeadCommitParams.Encoded | undefined) => Effect.Effect<typeof ReposListBranchesForHeadCommit200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists the comments for a specified commit.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "reposListCommentsForCommit": (owner: string, repo: string, commitSha: string, options?: typeof ReposListCommentsForCommitParams.Encoded | undefined) => Effect.Effect<typeof ReposListCommentsForCommit200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create a comment for a commit using its `:commit_sha`.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "reposCreateCommitComment": (owner: string, repo: string, commitSha: string, options: { readonly params?: typeof ReposCreateCommitCommentParams.Encoded | undefined; readonly payload: typeof ReposCreateCommitCommentRequest.Encoded }) => Effect.Effect<typeof CommitComment.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, it will return merged and open pull requests associated with the commit.
* 
* To list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.
*/
readonly "reposListPullRequestsAssociatedWithCommit": (owner: string, repo: string, commitSha: string, options?: typeof ReposListPullRequestsAssociatedWithCommitParams.Encoded | undefined) => Effect.Effect<typeof ReposListPullRequestsAssociatedWithCommit200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
* 
* > [!NOTE]
* > If there are more than 300 files in the commit diff and the default JSON media type is requested, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." Pagination query parameters are not supported for these media types.
* 
* - **`application/vnd.github.diff`**: Returns the diff of the commit. Larger diffs may time out and return a 5xx status code.
* - **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property. Larger diffs may time out and return a 5xx status code.
* - **`application/vnd.github.sha`**: Returns the commit's SHA-1 hash. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
* 
* **Signature verification object**
* 
* The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
* 
* | Name | Type | Description |
* | ---- | ---- | ----------- |
* | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
* | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
* | `signature` | `string` | The signature that was extracted from the commit. |
* | `payload` | `string` | The value that was signed. |
* | `verified_at` | `string` | The date the signature was verified by GitHub. |
* 
* These are the possible values for `reason` in the `verification` object:
* 
* | Value | Description |
* | ----- | ----------- |
* | `expired_key` | The key that made the signature is expired. |
* | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
* | `gpgverify_error` | There was an error communicating with the signature verification service. |
* | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
* | `unsigned` | The object does not include a signature. |
* | `unknown_signature_type` | A non-PGP signature was found in the commit. |
* | `no_user` | No user was associated with the `committer` email address in the commit. |
* | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
* | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
* | `unknown_key` | The key that made the signature has not been registered with any user's account. |
* | `malformed_signature` | There was an error parsing the signature. |
* | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
* | `valid` | None of the above errors applied, so the signature is considered to be verified. |
*/
readonly "reposGetCommit": (owner: string, repo: string, ref: string, options?: typeof ReposGetCommitParams.Encoded | undefined) => Effect.Effect<typeof Commit.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ReposGetCommit503", typeof ReposGetCommit503.Type>>
  /**
* Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name.
* 
* > [!NOTE]
* > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
* 
* If there are more than 1000 check suites on a single git reference, this endpoint will limit check runs to the 1000 most recent check suites. To iterate over all possible check runs, use the [List check suites for a Git reference](https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference) endpoint and provide the `check_suite_id` parameter to the [List check runs in a check suite](https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite) endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
*/
readonly "checksListForRef": (owner: string, repo: string, ref: string, options?: typeof ChecksListForRefParams.Encoded | undefined) => Effect.Effect<typeof ChecksListForRef200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name.
* 
* > [!NOTE]
* > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
*/
readonly "checksListSuitesForRef": (owner: string, repo: string, ref: string, options?: typeof ChecksListSuitesForRefParams.Encoded | undefined) => Effect.Effect<typeof ChecksListSuitesForRef200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
* 
* 
* Additionally, a combined `state` is returned. The `state` is one of:
* 
* *   **failure** if any of the contexts report as `error` or `failure`
* *   **pending** if there are no statuses or a context is `pending`
* *   **success** if the latest status for all contexts is `success`
*/
readonly "reposGetCombinedStatusForRef": (owner: string, repo: string, ref: string, options?: typeof ReposGetCombinedStatusForRefParams.Encoded | undefined) => Effect.Effect<typeof CombinedCommitStatus.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
* 
* This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
*/
readonly "reposListCommitStatusesForRef": (owner: string, repo: string, ref: string, options?: typeof ReposListCommitStatusesForRefParams.Encoded | undefined) => Effect.Effect<typeof ReposListCommitStatusesForRef200.Type | typeof BasicError.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Returns all community profile metrics for a repository. The repository cannot be a fork.
* 
* The returned metrics include an overall health score, the repository description, the presence of documentation, the
* detected code of conduct, the detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
* README, and CONTRIBUTING files.
* 
* The `health_percentage` score is defined as a percentage of how many of
* the recommended community health files are present. For more information, see
* "[About community profiles for public repositories](https://docs.github.com/communities/setting-up-your-project-for-healthy-contributions/about-community-profiles-for-public-repositories)."
* 
* `content_reports_enabled` is only returned for organization-owned repositories.
*/
readonly "reposGetCommunityProfileMetrics": (owner: string, repo: string, options?: typeof ReposGetCommunityProfileMetricsParams.Encoded | undefined) => Effect.Effect<typeof CommunityProfile.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Compares two commits against one another. You can compare refs (branches or tags) and commit SHAs in the same repository, or you can compare refs and commit SHAs that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
* 
* This endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.diff`**: Returns the diff of the commit.
* - **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property.
* 
* The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
* 
* When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
* 
* **Working with large comparisons**
* 
* To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
* 
* - The list of changed files is only shown on the first page of results, and it includes up to 300 changed files for the entire comparison.
* - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
* 
* For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
* 
* **Signature verification object**
* 
* The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
* 
* | Name | Type | Description |
* | ---- | ---- | ----------- |
* | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
* | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
* | `signature` | `string` | The signature that was extracted from the commit. |
* | `payload` | `string` | The value that was signed. |
* | `verified_at` | `string` | The date the signature was verified by GitHub. |
* 
* These are the possible values for `reason` in the `verification` object:
* 
* | Value | Description |
* | ----- | ----------- |
* | `expired_key` | The key that made the signature is expired. |
* | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
* | `gpgverify_error` | There was an error communicating with the signature verification service. |
* | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
* | `unsigned` | The object does not include a signature. |
* | `unknown_signature_type` | A non-PGP signature was found in the commit. |
* | `no_user` | No user was associated with the `committer` email address in the commit. |
* | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
* | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
* | `unknown_key` | The key that made the signature has not been registered with any user's account. |
* | `malformed_signature` | There was an error parsing the signature. |
* | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
* | `valid` | None of the above errors applied, so the signature is considered to be verified. |
*/
readonly "reposCompareCommits": (owner: string, repo: string, basehead: string, options?: typeof ReposCompareCommitsParams.Encoded | undefined) => Effect.Effect<typeof CommitComparison.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ReposCompareCommits503", typeof ReposCompareCommits503.Type>>
  /**
* Gets the contents of a file or directory in a repository. Specify the file path or directory with the `path` parameter. If you omit the `path` parameter, you will receive the contents of the repository's root directory.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw file contents for files and symlinks.
* - **`application/vnd.github.html+json`**: Returns the file contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
* - **`application/vnd.github.object+json`**: Returns the contents in a consistent object format regardless of the content type. For example, instead of an array of objects for a directory, the response will be an object with an `entries` attribute containing the array of objects.
* 
* If the content is a directory, the response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value _should_ be "submodule". This behavior exists [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as "submodule".
* 
* If the content is a symlink and the symlink's target is a normal file in the repository, then the API responds with the content of the file. Otherwise, the API responds with an object describing the symlink itself.
* 
* If the content is a submodule, the `submodule_git_url` field identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit. If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the github.com URLs (`html_url` and `_links["html"]`) will have null values.
* 
* **Notes**:
* 
* - To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/git/trees#get-a-tree).
* - This API has an upper limit of 1,000 files for a directory. If you need to retrieve
* more files, use the [Git Trees API](https://docs.github.com/rest/git/trees#get-a-tree).
* - Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
* - If the requested file's size is:
*   - 1 MB or smaller: All features of this endpoint are supported.
*   - Between 1-100 MB: Only the `raw` or `object` custom media types are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty
* string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.
*   - Greater than 100 MB: This endpoint is not supported.
*/
readonly "reposGetContent": (owner: string, repo: string, path: string, options?: typeof ReposGetContentParams.Encoded | undefined) => Effect.Effect<typeof ReposGetContent200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Creates a new file or replaces an existing file in a repository.
* 
* > [!NOTE]
* > If you use this endpoint and the "[Delete a file](https://docs.github.com/rest/repos/contents/#delete-a-file)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint. The `workflow` scope is also required in order to modify files in the `.github/workflows` directory.
*/
readonly "reposCreateOrUpdateFileContents": (owner: string, repo: string, path: string, options: { readonly params?: typeof ReposCreateOrUpdateFileContentsParams.Encoded | undefined; readonly payload: typeof ReposCreateOrUpdateFileContentsRequest.Encoded }) => Effect.Effect<typeof FileCommit.Type | typeof FileCommit.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ReposCreateOrUpdateFileContents409", typeof ReposCreateOrUpdateFileContents409.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Deletes a file in a repository.
* 
* You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
* 
* The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
* 
* You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
* 
* > [!NOTE]
* > If you use this endpoint and the "[Create or update file contents](https://docs.github.com/rest/repos/contents/#create-or-update-file-contents)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
*/
readonly "reposDeleteFile": (owner: string, repo: string, path: string, options: { readonly params?: typeof ReposDeleteFileParams.Encoded | undefined; readonly payload: typeof ReposDeleteFileRequest.Encoded }) => Effect.Effect<typeof FileCommit.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"ReposDeleteFile503", typeof ReposDeleteFile503.Type>>
  /**
* Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
* 
* GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
*/
readonly "reposListContributors": (owner: string, repo: string, options?: typeof ReposListContributorsParams.Encoded | undefined) => Effect.Effect<typeof ReposListContributors200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "dependabotListAlertsForRepo": (owner: string, repo: string, options?: typeof DependabotListAlertsForRepoParams.Encoded | undefined) => Effect.Effect<typeof DependabotListAlertsForRepo200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "dependabotGetAlert": (owner: string, repo: string, alertNumber: string, options?: typeof DependabotGetAlertParams.Encoded | undefined) => Effect.Effect<typeof DependabotAlert.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* The authenticated user must have access to security alerts for the repository to use this endpoint. For more information, see "[Granting access to security alerts](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository#granting-access-to-security-alerts)."
* 
* OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "dependabotUpdateAlert": (owner: string, repo: string, alertNumber: string, options: { readonly params?: typeof DependabotUpdateAlertParams.Encoded | undefined; readonly payload: typeof DependabotUpdateAlertRequest.Encoded }) => Effect.Effect<typeof DependabotAlert.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Lists all secrets available in a repository without revealing their encrypted
* values.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "dependabotListRepoSecrets": (owner: string, repo: string, options?: typeof DependabotListRepoSecretsParams.Encoded | undefined) => Effect.Effect<typeof DependabotListRepoSecrets200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets your public key, which you need to encrypt secrets. You need to
* encrypt a secret before you can create or update secrets. Anyone with read access
* to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint if the repository is private.
*/
readonly "dependabotGetRepoPublicKey": (owner: string, repo: string, options?: typeof DependabotGetRepoPublicKeyParams.Encoded | undefined) => Effect.Effect<typeof DependabotPublicKey.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a single repository secret without revealing its encrypted value.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "dependabotGetRepoSecret": (owner: string, repo: string, secretName: string, options?: typeof DependabotGetRepoSecretParams.Encoded | undefined) => Effect.Effect<typeof DependabotSecret.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates or updates a repository secret with an encrypted value. Encrypt your secret using
* [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "dependabotCreateOrUpdateRepoSecret": (owner: string, repo: string, secretName: string, options: { readonly params?: typeof DependabotCreateOrUpdateRepoSecretParams.Encoded | undefined; readonly payload: typeof DependabotCreateOrUpdateRepoSecretRequest.Encoded }) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes a secret in a repository using the secret name.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "dependabotDeleteRepoSecret": (owner: string, repo: string, secretName: string, options?: typeof DependabotDeleteRepoSecretParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
*/
readonly "dependencyGraphDiffRange": (owner: string, repo: string, basehead: string, options?: typeof DependencyGraphDiffRangeParams.Encoded | undefined) => Effect.Effect<typeof DependencyGraphDiff.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Exports the software bill of materials (SBOM) for a repository in SPDX JSON format.
*/
readonly "dependencyGraphExportSbom": (owner: string, repo: string, options?: typeof DependencyGraphExportSbomParams.Encoded | undefined) => Effect.Effect<typeof DependencyGraphSpdxSbom.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Create a new snapshot of a repository's dependencies.
* 
* The authenticated user must have access to the repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "dependencyGraphCreateRepositorySnapshot": (owner: string, repo: string, options: { readonly params?: typeof DependencyGraphCreateRepositorySnapshotParams.Encoded | undefined; readonly payload: typeof Snapshot.Encoded }) => Effect.Effect<typeof DependencyGraphCreateRepositorySnapshot201.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Simple filtering of deployments is available via query parameters:
*/
readonly "reposListDeployments": (owner: string, repo: string, options?: typeof ReposListDeploymentsParams.Encoded | undefined) => Effect.Effect<typeof ReposListDeployments200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deployments offer a few configurable parameters with certain defaults.
* 
* The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
* before we merge a pull request.
* 
* The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
* multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
* makes it easier to track which environments have requested deployments. The default environment is `production`.
* 
* The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
* the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
* the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
* return a failure response.
* 
* By default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a `success`
* state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
* specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
* not require any contexts or create any commit statuses, the deployment will always succeed.
* 
* The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
* field that will be passed on when a deployment event is dispatched.
* 
* The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
* be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
* application with debugging enabled.
* 
* Merged branch response:
* 
* You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
* a deployment. This auto-merge happens when:
* *   Auto-merge option is enabled in the repository
* *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
* *   There are no merge conflicts
* 
* If there are no new commits in the base branch, a new request to create a deployment should give a successful
* response.
* 
* Merge conflict response:
* 
* This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
* be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
* 
* Failed commit status checks:
* 
* This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
* status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint.
*/
readonly "reposCreateDeployment": (owner: string, repo: string, options: { readonly params?: typeof ReposCreateDeploymentParams.Encoded | undefined; readonly payload: typeof ReposCreateDeploymentRequest.Encoded }) => Effect.Effect<typeof Deployment.Type | typeof ReposCreateDeployment202.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Get a deployment
*/
readonly "reposGetDeployment": (owner: string, repo: string, deploymentId: string, options?: typeof ReposGetDeploymentParams.Encoded | undefined) => Effect.Effect<typeof Deployment.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment.
* 
* To set a deployment as inactive, you must:
* 
* *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
* *   Mark the active deployment as inactive by adding any non-successful deployment status.
* 
* For more information, see "[Create a deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/deployments/statuses#create-a-deployment-status)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint.
*/
readonly "reposDeleteDeployment": (owner: string, repo: string, deploymentId: string, options?: typeof ReposDeleteDeploymentParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Users with pull access can view deployment statuses for a deployment:
*/
readonly "reposListDeploymentStatuses": (owner: string, repo: string, deploymentId: string, options?: typeof ReposListDeploymentStatusesParams.Encoded | undefined) => Effect.Effect<typeof ReposListDeploymentStatuses200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Users with `push` access can create deployment statuses for a given deployment.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo_deployment` scope to use this endpoint.
*/
readonly "reposCreateDeploymentStatus": (owner: string, repo: string, deploymentId: string, options: { readonly params?: typeof ReposCreateDeploymentStatusParams.Encoded | undefined; readonly payload: typeof ReposCreateDeploymentStatusRequest.Encoded }) => Effect.Effect<typeof DeploymentStatus.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Users with pull access can view a deployment status for a deployment:
*/
readonly "reposGetDeploymentStatus": (owner: string, repo: string, deploymentId: string, statusId: string, options?: typeof ReposGetDeploymentStatusParams.Encoded | undefined) => Effect.Effect<typeof DeploymentStatus.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
* 
* The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
* 
* This input example shows how you can use the `client_payload` as a test to debug your workflow.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposCreateDispatchEvent": (owner: string, repo: string, options: { readonly params?: typeof ReposCreateDispatchEventParams.Encoded | undefined; readonly payload: typeof ReposCreateDispatchEventRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists the environments for a repository.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "reposGetAllEnvironments": (owner: string, repo: string, options?: typeof ReposGetAllEnvironmentsParams.Encoded | undefined) => Effect.Effect<typeof ReposGetAllEnvironments200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!NOTE]
* > To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "reposGetEnvironment": (owner: string, repo: string, environmentName: string, options?: typeof ReposGetEnvironmentParams.Encoded | undefined) => Effect.Effect<typeof Environment.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
* 
* > [!NOTE]
* > To create or update name patterns that branches must match in order to deploy to this environment, see "[Deployment branch policies](/rest/deployments/branch-policies)."
* 
* > [!NOTE]
* > To create or update secrets for an environment, see "[GitHub Actions secrets](/rest/actions/secrets)."
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposCreateOrUpdateEnvironment": (owner: string, repo: string, environmentName: string, options: { readonly params?: typeof ReposCreateOrUpdateEnvironmentParams.Encoded | undefined; readonly payload: typeof ReposCreateOrUpdateEnvironmentRequest.Encoded }) => Effect.Effect<typeof Environment.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposDeleteAnEnvironment": (owner: string, repo: string, environmentName: string, options?: typeof ReposDeleteAnEnvironmentParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists the deployment branch policies for an environment.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "reposListDeploymentBranchPolicies": (owner: string, repo: string, environmentName: string, options?: typeof ReposListDeploymentBranchPoliciesParams.Encoded | undefined) => Effect.Effect<typeof ReposListDeploymentBranchPolicies200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates a deployment branch or tag policy for an environment.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposCreateDeploymentBranchPolicy": (owner: string, repo: string, environmentName: string, options: { readonly params?: typeof ReposCreateDeploymentBranchPolicyParams.Encoded | undefined; readonly payload: typeof DeploymentBranchPolicyNamePatternWithType.Encoded }) => Effect.Effect<typeof DeploymentBranchPolicy.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a deployment branch or tag policy for an environment.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "reposGetDeploymentBranchPolicy": (owner: string, repo: string, environmentName: string, branchPolicyId: string, options?: typeof ReposGetDeploymentBranchPolicyParams.Encoded | undefined) => Effect.Effect<typeof DeploymentBranchPolicy.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Updates a deployment branch or tag policy for an environment.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposUpdateDeploymentBranchPolicy": (owner: string, repo: string, environmentName: string, branchPolicyId: string, options: { readonly params?: typeof ReposUpdateDeploymentBranchPolicyParams.Encoded | undefined; readonly payload: typeof DeploymentBranchPolicyNamePattern.Encoded }) => Effect.Effect<typeof DeploymentBranchPolicy.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes a deployment branch or tag policy for an environment.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposDeleteDeploymentBranchPolicy": (owner: string, repo: string, environmentName: string, branchPolicyId: string, options?: typeof ReposDeleteDeploymentBranchPolicyParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Gets all custom deployment protection rules that are enabled for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
* 
* For more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app).
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "reposGetAllDeploymentProtectionRules": (owner: string, repo: string, environmentName: string, options?: typeof ReposGetAllDeploymentProtectionRulesParams.Encoded | undefined) => Effect.Effect<typeof ReposGetAllDeploymentProtectionRules200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Enable a custom deployment protection rule for an environment.
* 
* The authenticated user must have admin or owner permissions to the repository to use this endpoint.
* 
* For more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app), as well as the [guide to creating custom deployment protection rules](https://docs.github.com/actions/managing-workflow-runs-and-deployments/managing-deployments/creating-custom-deployment-protection-rules).
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposCreateDeploymentProtectionRule": (owner: string, repo: string, environmentName: string, options: { readonly params?: typeof ReposCreateDeploymentProtectionRuleParams.Encoded | undefined; readonly payload: typeof ReposCreateDeploymentProtectionRuleRequest.Encoded }) => Effect.Effect<typeof DeploymentProtectionRule.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets all custom deployment protection rule integrations that are available for an environment.
* 
* The authenticated user must have admin or owner permissions to the repository to use this endpoint.
* 
* For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
* 
* For more information about the app that is providing this custom deployment rule, see "[GET an app](https://docs.github.com/rest/apps/apps#get-an-app)".
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "reposListCustomDeploymentRuleIntegrations": (owner: string, repo: string, environmentName: string, options?: typeof ReposListCustomDeploymentRuleIntegrationsParams.Encoded | undefined) => Effect.Effect<typeof ReposListCustomDeploymentRuleIntegrations200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets an enabled custom deployment protection rule for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
* 
* For more information about the app that is providing this custom deployment rule, see [`GET /apps/{app_slug}`](https://docs.github.com/rest/apps/apps#get-an-app).
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
*/
readonly "reposGetCustomDeploymentProtectionRule": (owner: string, repo: string, environmentName: string, protectionRuleId: string, options?: typeof ReposGetCustomDeploymentProtectionRuleParams.Encoded | undefined) => Effect.Effect<typeof DeploymentProtectionRule.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Disables a custom deployment protection rule for an environment.
* 
* The authenticated user must have admin or owner permissions to the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposDisableDeploymentProtectionRule": (owner: string, repo: string, environmentName: string, protectionRuleId: string, options?: typeof ReposDisableDeploymentProtectionRuleParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all secrets available in an environment without revealing their
* encrypted values.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsListEnvironmentSecrets": (owner: string, repo: string, environmentName: string, options?: typeof ActionsListEnvironmentSecretsParams.Encoded | undefined) => Effect.Effect<typeof ActionsListEnvironmentSecrets200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get the public key for an environment, which you need to encrypt environment
* secrets. You need to encrypt a secret before you can create or update secrets.
* 
* Anyone with read access to the repository can use this endpoint.
* 
* If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetEnvironmentPublicKey": (owner: string, repo: string, environmentName: string, options?: typeof ActionsGetEnvironmentPublicKeyParams.Encoded | undefined) => Effect.Effect<typeof ActionsPublicKey.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a single environment secret without revealing its encrypted value.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetEnvironmentSecret": (owner: string, repo: string, environmentName: string, secretName: string, options?: typeof ActionsGetEnvironmentSecretParams.Encoded | undefined) => Effect.Effect<typeof ActionsSecret.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates or updates an environment secret with an encrypted value. Encrypt your secret using
* [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateOrUpdateEnvironmentSecret": (owner: string, repo: string, environmentName: string, secretName: string, options: { readonly params?: typeof ActionsCreateOrUpdateEnvironmentSecretParams.Encoded | undefined; readonly payload: typeof ActionsCreateOrUpdateEnvironmentSecretRequest.Encoded }) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes a secret in an environment using the secret name.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read secrets.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteEnvironmentSecret": (owner: string, repo: string, environmentName: string, secretName: string, options?: typeof ActionsDeleteEnvironmentSecretParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all environment variables.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsListEnvironmentVariables": (owner: string, repo: string, environmentName: string, options?: typeof ActionsListEnvironmentVariablesParams.Encoded | undefined) => Effect.Effect<typeof ActionsListEnvironmentVariables200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create an environment variable that you can reference in a GitHub Actions workflow.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsCreateEnvironmentVariable": (owner: string, repo: string, environmentName: string, options: { readonly params?: typeof ActionsCreateEnvironmentVariableParams.Encoded | undefined; readonly payload: typeof ActionsCreateEnvironmentVariableRequest.Encoded }) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a specific variable in an environment.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsGetEnvironmentVariable": (owner: string, repo: string, environmentName: string, name: string, options?: typeof ActionsGetEnvironmentVariableParams.Encoded | undefined) => Effect.Effect<typeof ActionsVariable.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes an environment variable using the variable name.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsDeleteEnvironmentVariable": (owner: string, repo: string, environmentName: string, name: string, options?: typeof ActionsDeleteEnvironmentVariableParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Updates an environment variable that you can reference in a GitHub Actions workflow.
* 
* Authenticated users must have collaborator access to a repository to create, update, or read variables.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "actionsUpdateEnvironmentVariable": (owner: string, repo: string, environmentName: string, name: string, options: { readonly params?: typeof ActionsUpdateEnvironmentVariableParams.Encoded | undefined; readonly payload: typeof ActionsUpdateEnvironmentVariableRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* > [!NOTE]
* > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
*/
readonly "activityListRepoEvents": (owner: string, repo: string, options?: typeof ActivityListRepoEventsParams.Encoded | undefined) => Effect.Effect<typeof ActivityListRepoEvents200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* List forks
*/
readonly "reposListForks": (owner: string, repo: string, options?: typeof ReposListForksParams.Encoded | undefined) => Effect.Effect<typeof ReposListForks200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Create a fork for the authenticated user.
* 
* > [!NOTE]
* > Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
* 
* > [!NOTE]
* > Although this endpoint works with GitHub Apps, the GitHub App must be installed on the destination account with access to all repositories and on the source account with access to the source repository.
*/
readonly "reposCreateFork": (owner: string, repo: string, options: { readonly params?: typeof ReposCreateForkParams.Encoded | undefined; readonly payload: typeof ReposCreateForkRequest.Encoded }) => Effect.Effect<typeof FullRepository.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Create a blob
*/
readonly "gitCreateBlob": (owner: string, repo: string, options: { readonly params?: typeof GitCreateBlobParams.Encoded | undefined; readonly payload: typeof GitCreateBlobRequest.Encoded }) => Effect.Effect<typeof ShortBlob.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"GitCreateBlob422", typeof GitCreateBlob422.Type>>
  /**
* The `content` in the response will always be Base64 encoded.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw blob data.
* - **`application/vnd.github+json`**: Returns a JSON representation of the blob with `content` as a base64 encoded string. This is the default if no media type is specified.
* 
* **Note** This endpoint supports blobs up to 100 megabytes in size.
*/
readonly "gitGetBlob": (owner: string, repo: string, fileSha: string, options?: typeof GitGetBlobParams.Encoded | undefined) => Effect.Effect<typeof Blob.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Creates a new Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).
* 
* **Signature verification object**
* 
* The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
* 
* | Name | Type | Description |
* | ---- | ---- | ----------- |
* | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
* | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
* | `signature` | `string` | The signature that was extracted from the commit. |
* | `payload` | `string` | The value that was signed. |
* | `verified_at` | `string` | The date the signature was verified by GitHub. |
* 
* These are the possible values for `reason` in the `verification` object:
* 
* | Value | Description |
* | ----- | ----------- |
* | `expired_key` | The key that made the signature is expired. |
* | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
* | `gpgverify_error` | There was an error communicating with the signature verification service. |
* | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
* | `unsigned` | The object does not include a signature. |
* | `unknown_signature_type` | A non-PGP signature was found in the commit. |
* | `no_user` | No user was associated with the `committer` email address in the commit. |
* | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
* | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
* | `unknown_key` | The key that made the signature has not been registered with any user's account. |
* | `malformed_signature` | There was an error parsing the signature. |
* | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
* | `valid` | None of the above errors applied, so the signature is considered to be verified. |
*/
readonly "gitCreateCommit": (owner: string, repo: string, options: { readonly params?: typeof GitCreateCommitParams.Encoded | undefined; readonly payload: typeof GitCreateCommitRequest.Encoded }) => Effect.Effect<typeof GitCommit.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Gets a Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).
* 
* To get the contents of a commit, see "[Get a commit](/rest/commits/commits#get-a-commit)."
* 
* **Signature verification object**
* 
* The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
* 
* | Name | Type | Description |
* | ---- | ---- | ----------- |
* | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
* | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
* | `signature` | `string` | The signature that was extracted from the commit. |
* | `payload` | `string` | The value that was signed. |
* | `verified_at` | `string` | The date the signature was verified by GitHub. |
* 
* These are the possible values for `reason` in the `verification` object:
* 
* | Value | Description |
* | ----- | ----------- |
* | `expired_key` | The key that made the signature is expired. |
* | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
* | `gpgverify_error` | There was an error communicating with the signature verification service. |
* | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
* | `unsigned` | The object does not include a signature. |
* | `unknown_signature_type` | A non-PGP signature was found in the commit. |
* | `no_user` | No user was associated with the `committer` email address in the commit. |
* | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
* | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
* | `unknown_key` | The key that made the signature has not been registered with any user's account. |
* | `malformed_signature` | There was an error parsing the signature. |
* | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
* | `valid` | None of the above errors applied, so the signature is considered to be verified. |
*/
readonly "gitGetCommit": (owner: string, repo: string, commitSha: string, options?: typeof GitGetCommitParams.Encoded | undefined) => Effect.Effect<typeof GitCommit.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
* 
* When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
* 
* > [!NOTE]
* > You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
* 
* If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
*/
readonly "gitListMatchingRefs": (owner: string, repo: string, ref: string, options?: typeof GitListMatchingRefsParams.Encoded | undefined) => Effect.Effect<typeof GitListMatchingRefs200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
* 
* > [!NOTE]
* > You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
*/
readonly "gitGetRef": (owner: string, repo: string, ref: string, options?: typeof GitGetRefParams.Encoded | undefined) => Effect.Effect<typeof GitRef.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
*/
readonly "gitCreateRef": (owner: string, repo: string, options: { readonly params?: typeof GitCreateRefParams.Encoded | undefined; readonly payload: typeof GitCreateRefRequest.Encoded }) => Effect.Effect<typeof GitRef.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Deletes the provided reference.
*/
readonly "gitDeleteRef": (owner: string, repo: string, ref: string, options?: typeof GitDeleteRefParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Updates the provided reference to point to a new SHA. For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation.
*/
readonly "gitUpdateRef": (owner: string, repo: string, ref: string, options: { readonly params?: typeof GitUpdateRefParams.Encoded | undefined; readonly payload: typeof GitUpdateRefRequest.Encoded }) => Effect.Effect<typeof GitRef.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/git/refs#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/git/refs#create-a-reference) the tag reference - this call would be unnecessary.
* 
* **Signature verification object**
* 
* The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
* 
* | Name | Type | Description |
* | ---- | ---- | ----------- |
* | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
* | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
* | `signature` | `string` | The signature that was extracted from the commit. |
* | `payload` | `string` | The value that was signed. |
* | `verified_at` | `string` | The date the signature was verified by GitHub. |
* 
* These are the possible values for `reason` in the `verification` object:
* 
* | Value | Description |
* | ----- | ----------- |
* | `expired_key` | The key that made the signature is expired. |
* | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
* | `gpgverify_error` | There was an error communicating with the signature verification service. |
* | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
* | `unsigned` | The object does not include a signature. |
* | `unknown_signature_type` | A non-PGP signature was found in the commit. |
* | `no_user` | No user was associated with the `committer` email address in the commit. |
* | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
* | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
* | `unknown_key` | The key that made the signature has not been registered with any user's account. |
* | `malformed_signature` | There was an error parsing the signature. |
* | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
* | `valid` | None of the above errors applied, so the signature is considered to be verified. |
*/
readonly "gitCreateTag": (owner: string, repo: string, options: { readonly params?: typeof GitCreateTagParams.Encoded | undefined; readonly payload: typeof GitCreateTagRequest.Encoded }) => Effect.Effect<typeof GitTag.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* **Signature verification object**
* 
* The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
* 
* | Name | Type | Description |
* | ---- | ---- | ----------- |
* | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
* | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
* | `signature` | `string` | The signature that was extracted from the commit. |
* | `payload` | `string` | The value that was signed. |
* | `verified_at` | `string` | The date the signature was verified by GitHub. |
* 
* These are the possible values for `reason` in the `verification` object:
* 
* | Value | Description |
* | ----- | ----------- |
* | `expired_key` | The key that made the signature is expired. |
* | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
* | `gpgverify_error` | There was an error communicating with the signature verification service. |
* | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
* | `unsigned` | The object does not include a signature. |
* | `unknown_signature_type` | A non-PGP signature was found in the commit. |
* | `no_user` | No user was associated with the `committer` email address in the commit. |
* | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
* | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
* | `unknown_key` | The key that made the signature has not been registered with any user's account. |
* | `malformed_signature` | There was an error parsing the signature. |
* | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
* | `valid` | None of the above errors applied, so the signature is considered to be verified. |
*/
readonly "gitGetTag": (owner: string, repo: string, tagSha: string, options?: typeof GitGetTagParams.Encoded | undefined) => Effect.Effect<typeof GitTag.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
* 
* If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/git/commits#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/git/refs#update-a-reference)."
* 
* Returns an error if you try to delete a file that does not exist.
*/
readonly "gitCreateTree": (owner: string, repo: string, options: { readonly params?: typeof GitCreateTreeParams.Encoded | undefined; readonly payload: typeof GitCreateTreeRequest.Encoded }) => Effect.Effect<typeof GitTree.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Returns a single tree using the SHA1 value or ref name for that tree.
* 
* If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
* 
* > [!NOTE]
* > The limit for the `tree` array is 100,000 entries with a maximum size of 7 MB when using the `recursive` parameter.
*/
readonly "gitGetTree": (owner: string, repo: string, treeSha: string, options?: typeof GitGetTreeParams.Encoded | undefined) => Effect.Effect<typeof GitTree.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days.
*/
readonly "reposListWebhooks": (owner: string, repo: string, options?: typeof ReposListWebhooksParams.Encoded | undefined) => Effect.Effect<typeof ReposListWebhooks200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
* share the same `config` as long as those webhooks do not have any `events` that overlap.
*/
readonly "reposCreateWebhook": (owner: string, repo: string, options: { readonly params?: typeof ReposCreateWebhookParams.Encoded | undefined; readonly payload: typeof ReposCreateWebhookRequest.Encoded }) => Effect.Effect<typeof Hook.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository)."
*/
readonly "reposGetWebhook": (owner: string, repo: string, hookId: string, options?: typeof ReposGetWebhookParams.Encoded | undefined) => Effect.Effect<typeof Hook.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Delete a webhook for an organization.
* 
* The authenticated user must be a repository owner, or have admin access in the repository, to delete the webhook.
*/
readonly "reposDeleteWebhook": (owner: string, repo: string, hookId: string, options?: typeof ReposDeleteWebhookParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository)."
*/
readonly "reposUpdateWebhook": (owner: string, repo: string, hookId: string, options: { readonly params?: typeof ReposUpdateWebhookParams.Encoded | undefined; readonly payload: typeof ReposUpdateWebhookRequest.Encoded }) => Effect.Effect<typeof Hook.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/webhooks/repos#get-a-repository-webhook)."
* 
* OAuth app tokens and personal access tokens (classic) need the `read:repo_hook` or `repo` scope to use this endpoint.
*/
readonly "reposGetWebhookConfigForRepo": (owner: string, repo: string, hookId: string, options?: typeof ReposGetWebhookConfigForRepoParams.Encoded | undefined) => Effect.Effect<typeof WebhookConfig.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/webhooks/repos#update-a-repository-webhook)."
* 
* OAuth app tokens and personal access tokens (classic) need the `write:repo_hook` or `repo` scope to use this endpoint.
*/
readonly "reposUpdateWebhookConfigForRepo": (owner: string, repo: string, hookId: string, options: { readonly params?: typeof ReposUpdateWebhookConfigForRepoParams.Encoded | undefined; readonly payload: typeof ReposUpdateWebhookConfigForRepoRequest.Encoded }) => Effect.Effect<typeof WebhookConfig.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Returns a list of webhook deliveries for a webhook configured in a repository.
*/
readonly "reposListWebhookDeliveries": (owner: string, repo: string, hookId: string, options?: typeof ReposListWebhookDeliveriesParams.Encoded | undefined) => Effect.Effect<typeof ReposListWebhookDeliveries200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Returns a delivery for a webhook configured in a repository.
*/
readonly "reposGetWebhookDelivery": (owner: string, repo: string, hookId: string, deliveryId: string, options?: typeof ReposGetWebhookDeliveryParams.Encoded | undefined) => Effect.Effect<typeof HookDelivery.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Redeliver a webhook delivery for a webhook configured in a repository.
*/
readonly "reposRedeliverWebhookDelivery": (owner: string, repo: string, hookId: string, deliveryId: string, options?: typeof ReposRedeliverWebhookDeliveryParams.Encoded | undefined) => Effect.Effect<typeof ReposRedeliverWebhookDelivery202.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
*/
readonly "reposPingWebhook": (owner: string, repo: string, hookId: string, options?: typeof ReposPingWebhookParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
* 
* > [!NOTE]
* > Previously `/repos/:owner/:repo/hooks/:hook_id/test`
*/
readonly "reposTestPushWebhook": (owner: string, repo: string, hookId: string, options?: typeof ReposTestPushWebhookParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* View the progress of an import.
* 
* > [!WARNING]
* > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
* 
* **Import status**
* 
* This section includes details about the possible values of the `status` field of the Import Progress response.
* 
* An import that does not have errors will progress through these steps:
* 
* *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
* *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
* *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
* *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
* *   `complete` - the import is complete, and the repository is ready on GitHub.
* 
* If there are problems, you will see one of these in the `status` field:
* 
* *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
* *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.
* *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
* *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL.
* *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
* 
* **The project_choices field**
* 
* When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
* 
* **Git LFS related fields**
* 
* This section includes details about Git LFS related fields that may be present in the Import Progress response.
* 
* *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
* *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
* *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
* *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
*/
readonly "migrationsGetImportStatus": (owner: string, repo: string, options?: typeof MigrationsGetImportStatusParams.Encoded | undefined) => Effect.Effect<typeof Import.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Start a source import to a GitHub repository using GitHub Importer.
* Importing into a GitHub repository with GitHub Actions enabled is not supported and will
* return a status `422 Unprocessable Entity` response.
* 
* > [!WARNING]
* > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
*/
readonly "migrationsStartImport": (owner: string, repo: string, options: { readonly params?: typeof MigrationsStartImportParams.Encoded | undefined; readonly payload: typeof MigrationsStartImportRequest.Encoded }) => Effect.Effect<typeof Import.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Stop an import for a repository.
* 
* > [!WARNING]
* > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
*/
readonly "migrationsCancelImport": (owner: string, repo: string, options?: typeof MigrationsCancelImportParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
* request. If no parameters are provided, the import will be restarted.
* 
* Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will
* have the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array.
* You can select the project to import by providing one of the objects in the `project_choices` array in the update request.
* 
* > [!WARNING]
* > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
*/
readonly "migrationsUpdateImport": (owner: string, repo: string, options: { readonly params?: typeof MigrationsUpdateImportParams.Encoded | undefined; readonly payload: typeof MigrationsUpdateImportRequest.Encoded }) => Effect.Effect<typeof Import.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
* 
* This endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.
* 
* > [!WARNING]
* > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
*/
readonly "migrationsGetCommitAuthors": (owner: string, repo: string, options?: typeof MigrationsGetCommitAuthorsParams.Encoded | undefined) => Effect.Effect<typeof MigrationsGetCommitAuthors200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Update an author's identity for the import. Your application can continue updating authors any time before you push
* new commits to the repository.
* 
* > [!WARNING]
* > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
*/
readonly "migrationsMapCommitAuthor": (owner: string, repo: string, authorId: string, options: { readonly params?: typeof MigrationsMapCommitAuthorParams.Encoded | undefined; readonly payload: typeof MigrationsMapCommitAuthorRequest.Encoded }) => Effect.Effect<typeof PorterAuthor.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List files larger than 100MB found during the import
* 
* > [!WARNING]
* > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
*/
readonly "migrationsGetLargeFiles": (owner: string, repo: string, options?: typeof MigrationsGetLargeFilesParams.Encoded | undefined) => Effect.Effect<typeof MigrationsGetLargeFiles200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability
* is powered by [Git LFS](https://git-lfs.com).
* 
* You can learn more about our LFS feature and working with large files [on our help
* site](https://docs.github.com/repositories/working-with-files/managing-large-files).
* 
* > [!WARNING]
* > **Endpoint closing down notice:** Due to very low levels of usage and available alternatives, this endpoint is closing down and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
*/
readonly "migrationsSetLfsPreference": (owner: string, repo: string, options: { readonly params?: typeof MigrationsSetLfsPreferenceParams.Encoded | undefined; readonly payload: typeof MigrationsSetLfsPreferenceRequest.Encoded }) => Effect.Effect<typeof Import.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsGetRepoInstallation": (owner: string, repo: string, options?: typeof AppsGetRepoInstallationParams.Encoded | undefined) => Effect.Effect<typeof Installation.Type | typeof BasicError.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
*/
readonly "interactionsGetRestrictionsForRepo": (owner: string, repo: string, options?: typeof InteractionsGetRestrictionsForRepoParams.Encoded | undefined) => Effect.Effect<typeof InteractionsGetRestrictionsForRepo200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
*/
readonly "interactionsSetRestrictionsForRepo": (owner: string, repo: string, options: { readonly params?: typeof InteractionsSetRestrictionsForRepoParams.Encoded | undefined; readonly payload: typeof InteractionLimit.Encoded }) => Effect.Effect<typeof InteractionLimitResponse.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
*/
readonly "interactionsRemoveRestrictionsForRepo": (owner: string, repo: string, options?: typeof InteractionsRemoveRestrictionsForRepoParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
*/
readonly "reposListInvitations": (owner: string, repo: string, options?: typeof ReposListInvitationsParams.Encoded | undefined) => Effect.Effect<typeof ReposListInvitations200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete a repository invitation
*/
readonly "reposDeleteInvitation": (owner: string, repo: string, invitationId: string, options?: typeof ReposDeleteInvitationParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Update a repository invitation
*/
readonly "reposUpdateInvitation": (owner: string, repo: string, invitationId: string, options: { readonly params?: typeof ReposUpdateInvitationParams.Encoded | undefined; readonly payload: typeof ReposUpdateInvitationRequest.Encoded }) => Effect.Effect<typeof RepositoryInvitation.Type, HttpClientError.HttpClientError | ParseError>
  /**
* List issues in a repository. Only open issues will be listed.
* 
* > [!NOTE]
* > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesListForRepo": (owner: string, repo: string, options?: typeof IssuesListForRepoParams.Encoded | undefined) => Effect.Effect<typeof IssuesListForRepo200.Type | typeof BasicError.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
* and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesCreate": (owner: string, repo: string, options: { readonly params?: typeof IssuesCreateParams.Encoded | undefined; readonly payload: typeof IssuesCreateRequest.Encoded }) => Effect.Effect<typeof Issue.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"IssuesCreate503", typeof IssuesCreate503.Type>>
  /**
* You can use the REST API to list comments on issues and pull requests for a repository. Every pull request is an issue, but not every issue is a pull request.
* 
* By default, issue comments are ordered by ascending ID.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesListCommentsForRepo": (owner: string, repo: string, options?: typeof IssuesListCommentsForRepoParams.Encoded | undefined) => Effect.Effect<typeof IssuesListCommentsForRepo200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* You can use the REST API to get comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesGetComment": (owner: string, repo: string, commentId: string, options?: typeof IssuesGetCommentParams.Encoded | undefined) => Effect.Effect<typeof IssueComment.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* You can use the REST API to delete comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
*/
readonly "issuesDeleteComment": (owner: string, repo: string, commentId: string, options?: typeof IssuesDeleteCommentParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* You can use the REST API to update comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesUpdateComment": (owner: string, repo: string, commentId: string, options: { readonly params?: typeof IssuesUpdateCommentParams.Encoded | undefined; readonly payload: typeof IssuesUpdateCommentRequest.Encoded }) => Effect.Effect<typeof IssueComment.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* List the reactions to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).
*/
readonly "reactionsListForIssueComment": (owner: string, repo: string, commentId: string, options?: typeof ReactionsListForIssueCommentParams.Encoded | undefined) => Effect.Effect<typeof ReactionsListForIssueComment200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Create a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
*/
readonly "reactionsCreateForIssueComment": (owner: string, repo: string, commentId: string, options: { readonly params?: typeof ReactionsCreateForIssueCommentParams.Encoded | undefined; readonly payload: typeof ReactionsCreateForIssueCommentRequest.Encoded }) => Effect.Effect<typeof Reaction.Type | typeof Reaction.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* > [!NOTE]
* > You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
* 
* Delete a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).
*/
readonly "reactionsDeleteForIssueComment": (owner: string, repo: string, commentId: string, reactionId: string, options?: typeof ReactionsDeleteForIssueCommentParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists events for a repository.
*/
readonly "issuesListEventsForRepo": (owner: string, repo: string, options?: typeof IssuesListEventsForRepoParams.Encoded | undefined) => Effect.Effect<typeof IssuesListEventsForRepo200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Gets a single event by the event id.
*/
readonly "issuesGetEvent": (owner: string, repo: string, eventId: string, options?: typeof IssuesGetEventParams.Encoded | undefined) => Effect.Effect<typeof IssueEvent.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api#follow-redirects) if the issue was
* [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
* the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
* returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
* access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
* to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
* 
* > [!NOTE]
* > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesGet": (owner: string, repo: string, issueNumber: string, options?: typeof IssuesGetParams.Encoded | undefined) => Effect.Effect<typeof Issue.Type | typeof BasicError.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Issue owners and users with push access or Triage role can edit an issue.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesUpdate": (owner: string, repo: string, issueNumber: string, options: { readonly params?: typeof IssuesUpdateParams.Encoded | undefined; readonly payload: typeof IssuesUpdateRequest.Encoded }) => Effect.Effect<typeof Issue.Type | typeof BasicError.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"IssuesUpdate503", typeof IssuesUpdate503.Type>>
  /**
* Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
*/
readonly "issuesAddAssignees": (owner: string, repo: string, issueNumber: string, options: { readonly params?: typeof IssuesAddAssigneesParams.Encoded | undefined; readonly payload: typeof IssuesAddAssigneesRequest.Encoded }) => Effect.Effect<typeof Issue.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Removes one or more assignees from an issue.
*/
readonly "issuesRemoveAssignees": (owner: string, repo: string, issueNumber: string, options: { readonly params?: typeof IssuesRemoveAssigneesParams.Encoded | undefined; readonly payload: typeof IssuesRemoveAssigneesRequest.Encoded }) => Effect.Effect<typeof Issue.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Checks if a user has permission to be assigned to a specific issue.
* 
* If the `assignee` can be assigned to this issue, a `204` status code with no content is returned.
* 
* Otherwise a `404` status code is returned.
*/
readonly "issuesCheckUserCanBeAssignedToIssue": (owner: string, repo: string, issueNumber: string, assignee: string, options?: typeof IssuesCheckUserCanBeAssignedToIssueParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* You can use the REST API to list comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
* 
* Issue comments are ordered by ascending ID.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesListComments": (owner: string, repo: string, issueNumber: string, options?: typeof IssuesListCommentsParams.Encoded | undefined) => Effect.Effect<typeof IssuesListComments200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
* Creating content too quickly using this endpoint may result in secondary rate limiting.
* For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
* and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesCreateComment": (owner: string, repo: string, issueNumber: string, options: { readonly params?: typeof IssuesCreateCommentParams.Encoded | undefined; readonly payload: typeof IssuesCreateCommentRequest.Encoded }) => Effect.Effect<typeof IssueComment.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* You can use the REST API to list the dependencies an issue is blocked by.
* 
* This endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).
* 
* - **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesListDependenciesBlockedBy": (owner: string, repo: string, issueNumber: string, options?: typeof IssuesListDependenciesBlockedByParams.Encoded | undefined) => Effect.Effect<typeof IssuesListDependenciesBlockedBy200.Type | typeof BasicError.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* You can use the REST API to add a 'blocked by' relationship to an issue.
* 
* Creating content too quickly using this endpoint may result in secondary rate limiting.
* For more information, see [Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)
* and [Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).
* 
* This endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).
* 
* - **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesAddBlockedByDependency": (owner: string, repo: string, issueNumber: string, options: { readonly params?: typeof IssuesAddBlockedByDependencyParams.Encoded | undefined; readonly payload: typeof IssuesAddBlockedByDependencyRequest.Encoded }) => Effect.Effect<typeof Issue.Type | typeof BasicError.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* You can use the REST API to remove a dependency that an issue is blocked by.
* 
* Removing content too quickly using this endpoint may result in secondary rate limiting.
* For more information, see [Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)
* and [Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).
* 
* This endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).
* - **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass a specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesRemoveDependencyBlockedBy": (owner: string, repo: string, issueNumber: string, issueId: string, options?: typeof IssuesRemoveDependencyBlockedByParams.Encoded | undefined) => Effect.Effect<typeof Issue.Type | typeof BasicError.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* You can use the REST API to list the dependencies an issue is blocking.
* 
* This endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).
* 
* - **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesListDependenciesBlocking": (owner: string, repo: string, issueNumber: string, options?: typeof IssuesListDependenciesBlockingParams.Encoded | undefined) => Effect.Effect<typeof IssuesListDependenciesBlocking200.Type | typeof BasicError.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists all events for an issue.
*/
readonly "issuesListEvents": (owner: string, repo: string, issueNumber: string, options?: typeof IssuesListEventsParams.Encoded | undefined) => Effect.Effect<typeof IssuesListEvents200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists all labels for an issue.
*/
readonly "issuesListLabelsOnIssue": (owner: string, repo: string, issueNumber: string, options?: typeof IssuesListLabelsOnIssueParams.Encoded | undefined) => Effect.Effect<typeof IssuesListLabelsOnIssue200.Type | typeof BasicError.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Removes any previous labels and sets the new labels for an issue.
*/
readonly "issuesSetLabels": (owner: string, repo: string, issueNumber: string, options: { readonly params?: typeof IssuesSetLabelsParams.Encoded | undefined; readonly payload: typeof IssuesSetLabelsRequest.Encoded }) => Effect.Effect<typeof IssuesSetLabels200.Type | typeof BasicError.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Adds labels to an issue. If you provide an empty array of labels, all labels are removed from the issue.
*/
readonly "issuesAddLabels": (owner: string, repo: string, issueNumber: string, options: { readonly params?: typeof IssuesAddLabelsParams.Encoded | undefined; readonly payload: typeof IssuesAddLabelsRequest.Encoded }) => Effect.Effect<typeof IssuesAddLabels200.Type | typeof BasicError.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Removes all labels from an issue.
*/
readonly "issuesRemoveAllLabels": (owner: string, repo: string, issueNumber: string, options?: typeof IssuesRemoveAllLabelsParams.Encoded | undefined) => Effect.Effect<typeof BasicError.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
*/
readonly "issuesRemoveLabel": (owner: string, repo: string, issueNumber: string, name: string, options?: typeof IssuesRemoveLabelParams.Encoded | undefined) => Effect.Effect<typeof IssuesRemoveLabel200.Type | typeof BasicError.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Users with push access can lock an issue or pull request's conversation.
* 
* Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
readonly "issuesLock": (owner: string, repo: string, issueNumber: string, options: { readonly params?: typeof IssuesLockParams.Encoded | undefined; readonly payload: typeof IssuesLockRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Users with push access can unlock an issue's conversation.
*/
readonly "issuesUnlock": (owner: string, repo: string, issueNumber: string, options?: typeof IssuesUnlockParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List the reactions to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).
*/
readonly "reactionsListForIssue": (owner: string, repo: string, issueNumber: string, options?: typeof ReactionsListForIssueParams.Encoded | undefined) => Effect.Effect<typeof ReactionsListForIssue200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Create a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue). A response with an HTTP `200` status means that you already added the reaction type to this issue.
*/
readonly "reactionsCreateForIssue": (owner: string, repo: string, issueNumber: string, options: { readonly params?: typeof ReactionsCreateForIssueParams.Encoded | undefined; readonly payload: typeof ReactionsCreateForIssueRequest.Encoded }) => Effect.Effect<typeof Reaction.Type | typeof Reaction.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* > [!NOTE]
* > You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
* 
* Delete a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).
*/
readonly "reactionsDeleteForIssue": (owner: string, repo: string, issueNumber: string, reactionId: string, options?: typeof ReactionsDeleteForIssueParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* You can use the REST API to remove a sub-issue from an issue.
* Removing content too quickly using this endpoint may result in secondary rate limiting.
* For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
* and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass a specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesRemoveSubIssue": (owner: string, repo: string, issueNumber: string, options: { readonly params?: typeof IssuesRemoveSubIssueParams.Encoded | undefined; readonly payload: typeof IssuesRemoveSubIssueRequest.Encoded }) => Effect.Effect<typeof Issue.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* You can use the REST API to list the sub-issues on an issue.
* 
* This endpoint supports the following custom media types. For more information, see [Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).
* 
* - **`application/vnd.github.raw+json`**: Returns the raw Markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the Markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's Markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesListSubIssues": (owner: string, repo: string, issueNumber: string, options?: typeof IssuesListSubIssuesParams.Encoded | undefined) => Effect.Effect<typeof IssuesListSubIssues200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* You can use the REST API to add sub-issues to issues.
* 
* Creating content too quickly using this endpoint may result in secondary rate limiting.
* For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
* and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesAddSubIssue": (owner: string, repo: string, issueNumber: string, options: { readonly params?: typeof IssuesAddSubIssueParams.Encoded | undefined; readonly payload: typeof IssuesAddSubIssueRequest.Encoded }) => Effect.Effect<typeof Issue.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* You can use the REST API to reprioritize a sub-issue to a different position in the parent list.
*/
readonly "issuesReprioritizeSubIssue": (owner: string, repo: string, issueNumber: string, options: { readonly params?: typeof IssuesReprioritizeSubIssueParams.Encoded | undefined; readonly payload: typeof IssuesReprioritizeSubIssueRequest.Encoded }) => Effect.Effect<typeof Issue.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type> | ClientError<"IssuesReprioritizeSubIssue503", typeof IssuesReprioritizeSubIssue503.Type>>
  /**
* List all timeline events for an issue.
*/
readonly "issuesListEventsForTimeline": (owner: string, repo: string, issueNumber: string, options?: typeof IssuesListEventsForTimelineParams.Encoded | undefined) => Effect.Effect<typeof IssuesListEventsForTimeline200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List deploy keys
*/
readonly "reposListDeployKeys": (owner: string, repo: string, options?: typeof ReposListDeployKeysParams.Encoded | undefined) => Effect.Effect<typeof ReposListDeployKeys200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* You can create a read-only deploy key.
*/
readonly "reposCreateDeployKey": (owner: string, repo: string, options: { readonly params?: typeof ReposCreateDeployKeyParams.Encoded | undefined; readonly payload: typeof ReposCreateDeployKeyRequest.Encoded }) => Effect.Effect<typeof DeployKey.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Get a deploy key
*/
readonly "reposGetDeployKey": (owner: string, repo: string, keyId: string, options?: typeof ReposGetDeployKeyParams.Encoded | undefined) => Effect.Effect<typeof DeployKey.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
*/
readonly "reposDeleteDeployKey": (owner: string, repo: string, keyId: string, options?: typeof ReposDeleteDeployKeyParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all labels for a repository.
*/
readonly "issuesListLabelsForRepo": (owner: string, repo: string, options?: typeof IssuesListLabelsForRepoParams.Encoded | undefined) => Effect.Effect<typeof IssuesListLabelsForRepo200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Creates a label for the specified repository with the given name and color. The name and color parameters are required. The color must be a valid [hexadecimal color code](http://www.color-hex.com/).
*/
readonly "issuesCreateLabel": (owner: string, repo: string, options: { readonly params?: typeof IssuesCreateLabelParams.Encoded | undefined; readonly payload: typeof IssuesCreateLabelRequest.Encoded }) => Effect.Effect<typeof Label.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Gets a label using the given name.
*/
readonly "issuesGetLabel": (owner: string, repo: string, name: string, options?: typeof IssuesGetLabelParams.Encoded | undefined) => Effect.Effect<typeof Label.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Deletes a label using the given label name.
*/
readonly "issuesDeleteLabel": (owner: string, repo: string, name: string, options?: typeof IssuesDeleteLabelParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Updates a label using the given label name.
*/
readonly "issuesUpdateLabel": (owner: string, repo: string, name: string, options: { readonly params?: typeof IssuesUpdateLabelParams.Encoded | undefined; readonly payload: typeof IssuesUpdateLabelRequest.Encoded }) => Effect.Effect<typeof Label.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
*/
readonly "reposListLanguages": (owner: string, repo: string, options?: typeof ReposListLanguagesParams.Encoded | undefined) => Effect.Effect<typeof Language.Type, HttpClientError.HttpClientError | ParseError>
  /**
* This method returns the contents of the repository's license file, if one is detected.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw contents of the license.
* - **`application/vnd.github.html+json`**: Returns the license contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
*/
readonly "licensesGetForRepo": (owner: string, repo: string, options?: typeof LicensesGetForRepoParams.Encoded | undefined) => Effect.Effect<typeof LicenseContent.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Sync a branch of a forked repository to keep it up-to-date with the upstream repository.
*/
readonly "reposMergeUpstream": (owner: string, repo: string, options: { readonly params?: typeof ReposMergeUpstreamParams.Encoded | undefined; readonly payload: typeof ReposMergeUpstreamRequest.Encoded }) => Effect.Effect<typeof MergedUpstream.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Merge a branch
*/
readonly "reposMerge": (owner: string, repo: string, options: { readonly params?: typeof ReposMergeParams.Encoded | undefined; readonly payload: typeof ReposMergeRequest.Encoded }) => Effect.Effect<typeof Commit.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists milestones for a repository.
*/
readonly "issuesListMilestones": (owner: string, repo: string, options?: typeof IssuesListMilestonesParams.Encoded | undefined) => Effect.Effect<typeof IssuesListMilestones200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Creates a milestone.
*/
readonly "issuesCreateMilestone": (owner: string, repo: string, options: { readonly params?: typeof IssuesCreateMilestoneParams.Encoded | undefined; readonly payload: typeof IssuesCreateMilestoneRequest.Encoded }) => Effect.Effect<typeof Milestone.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Gets a milestone using the given milestone number.
*/
readonly "issuesGetMilestone": (owner: string, repo: string, milestoneNumber: string, options?: typeof IssuesGetMilestoneParams.Encoded | undefined) => Effect.Effect<typeof Milestone.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Deletes a milestone using the given milestone number.
*/
readonly "issuesDeleteMilestone": (owner: string, repo: string, milestoneNumber: string, options?: typeof IssuesDeleteMilestoneParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Update a milestone
*/
readonly "issuesUpdateMilestone": (owner: string, repo: string, milestoneNumber: string, options: { readonly params?: typeof IssuesUpdateMilestoneParams.Encoded | undefined; readonly payload: typeof IssuesUpdateMilestoneRequest.Encoded }) => Effect.Effect<typeof Milestone.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists labels for issues in a milestone.
*/
readonly "issuesListLabelsForMilestone": (owner: string, repo: string, milestoneNumber: string, options?: typeof IssuesListLabelsForMilestoneParams.Encoded | undefined) => Effect.Effect<typeof IssuesListLabelsForMilestone200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all notifications for the current user in the specified repository.
*/
readonly "activityListRepoNotificationsForAuthenticatedUser": (owner: string, repo: string, options?: typeof ActivityListRepoNotificationsForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof ActivityListRepoNotificationsForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Marks all notifications in a repository as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
*/
readonly "activityMarkRepoNotificationsAsRead": (owner: string, repo: string, options: { readonly params?: typeof ActivityMarkRepoNotificationsAsReadParams.Encoded | undefined; readonly payload: typeof ActivityMarkRepoNotificationsAsReadRequest.Encoded }) => Effect.Effect<typeof ActivityMarkRepoNotificationsAsRead202.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets information about a GitHub Pages site.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposGetPages": (owner: string, repo: string, options?: typeof ReposGetPagesParams.Encoded | undefined) => Effect.Effect<typeof Page.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
* 
* The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposUpdateInformationAboutPagesSite": (owner: string, repo: string, options: { readonly params?: typeof ReposUpdateInformationAboutPagesSiteParams.Encoded | undefined; readonly payload: typeof ReposUpdateInformationAboutPagesSiteRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
* 
* The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposCreatePagesSite": (owner: string, repo: string, options: { readonly params?: typeof ReposCreatePagesSiteParams.Encoded | undefined; readonly payload: typeof ReposCreatePagesSiteRequest.Encoded }) => Effect.Effect<typeof Page.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Deletes a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
* 
* The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposDeletePagesSite": (owner: string, repo: string, options?: typeof ReposDeletePagesSiteParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists builts of a GitHub Pages site.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposListPagesBuilds": (owner: string, repo: string, options?: typeof ReposListPagesBuildsParams.Encoded | undefined) => Effect.Effect<typeof ReposListPagesBuilds200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
* 
* Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
*/
readonly "reposRequestPagesBuild": (owner: string, repo: string, options?: typeof ReposRequestPagesBuildParams.Encoded | undefined) => Effect.Effect<typeof PageBuildStatus.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets information about the single most recent build of a GitHub Pages site.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposGetLatestPagesBuild": (owner: string, repo: string, options?: typeof ReposGetLatestPagesBuildParams.Encoded | undefined) => Effect.Effect<typeof PageBuild.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets information about a GitHub Pages build.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposGetPagesBuild": (owner: string, repo: string, buildId: string, options?: typeof ReposGetPagesBuildParams.Encoded | undefined) => Effect.Effect<typeof PageBuild.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Create a GitHub Pages deployment for a repository.
* 
* The authenticated user must have write permission to the repository.
*/
readonly "reposCreatePagesDeployment": (owner: string, repo: string, options: { readonly params?: typeof ReposCreatePagesDeploymentParams.Encoded | undefined; readonly payload: typeof ReposCreatePagesDeploymentRequest.Encoded }) => Effect.Effect<typeof PageDeployment.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Gets the current status of a GitHub Pages deployment.
* 
* The authenticated user must have read permission for the GitHub Pages site.
*/
readonly "reposGetPagesDeployment": (owner: string, repo: string, pagesDeploymentId: string, options?: typeof ReposGetPagesDeploymentParams.Encoded | undefined) => Effect.Effect<typeof PagesDeploymentStatus.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Cancels a GitHub Pages deployment.
* 
* The authenticated user must have write permissions for the GitHub Pages site.
*/
readonly "reposCancelPagesDeployment": (owner: string, repo: string, pagesDeploymentId: string, options?: typeof ReposCancelPagesDeploymentParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.
* 
* The first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.
* 
* The authenticated user must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "reposGetPagesHealthCheck": (owner: string, repo: string, options?: typeof ReposGetPagesHealthCheckParams.Encoded | undefined) => Effect.Effect<typeof PagesHealthCheck.Type | typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Returns a boolean indicating whether or not private vulnerability reporting is enabled for the repository. For more information, see "[Evaluating the security settings of a repository](https://docs.github.com/code-security/security-advisories/working-with-repository-security-advisories/evaluating-the-security-settings-of-a-repository)".
*/
readonly "reposCheckPrivateVulnerabilityReporting": (owner: string, repo: string, options?: typeof ReposCheckPrivateVulnerabilityReportingParams.Encoded | undefined) => Effect.Effect<typeof ReposCheckPrivateVulnerabilityReporting200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Enables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)."
*/
readonly "reposEnablePrivateVulnerabilityReporting": (owner: string, repo: string, options?: typeof ReposEnablePrivateVulnerabilityReportingParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Disables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)".
*/
readonly "reposDisablePrivateVulnerabilityReporting": (owner: string, repo: string, options?: typeof ReposDisablePrivateVulnerabilityReportingParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicListForRepo": (owner: string, repo: string, options?: typeof ProjectsClassicListForRepoParams.Encoded | undefined) => Effect.Effect<typeof ProjectsClassicListForRepo200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicCreateForRepo": (owner: string, repo: string, options: { readonly params?: typeof ProjectsClassicCreateForRepoParams.Encoded | undefined; readonly payload: typeof ProjectsClassicCreateForRepoRequest.Encoded }) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Gets all custom property values that are set for a repository.
* Users with read access to the repository can use this endpoint.
*/
readonly "reposGetCustomPropertiesValues": (owner: string, repo: string, options?: typeof ReposGetCustomPropertiesValuesParams.Encoded | undefined) => Effect.Effect<typeof ReposGetCustomPropertiesValues200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Create new or update existing custom property values for a repository.
* Using a value of `null` for a custom property will remove or 'unset' the property value from the repository.
* 
* Repository admins and other users with the repository-level "edit custom property values" fine-grained permission can use this endpoint.
*/
readonly "reposCreateOrUpdateCustomPropertiesValues": (owner: string, repo: string, options: { readonly params?: typeof ReposCreateOrUpdateCustomPropertiesValuesParams.Encoded | undefined; readonly payload: typeof ReposCreateOrUpdateCustomPropertiesValuesRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists pull requests in a specified repository.
* 
* Draft pull requests are available in public repositories with GitHub
* Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing
* plans, and in public and private repositories with GitHub Team and GitHub Enterprise
* Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
* in the GitHub Help documentation.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsList": (owner: string, repo: string, options?: typeof PullsListParams.Encoded | undefined) => Effect.Effect<typeof PullsList200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsCreate": (owner: string, repo: string, options: { readonly params?: typeof PullsCreateParams.Encoded | undefined; readonly payload: typeof PullsCreateRequest.Encoded }) => Effect.Effect<typeof PullRequest.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists review comments for all pull requests in a repository. By default,
* review comments are in ascending order by ID.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsListReviewCommentsForRepo": (owner: string, repo: string, options?: typeof PullsListReviewCommentsForRepoParams.Encoded | undefined) => Effect.Effect<typeof PullsListReviewCommentsForRepo200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Provides details for a specified review comment.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsGetReviewComment": (owner: string, repo: string, commentId: string, options?: typeof PullsGetReviewCommentParams.Encoded | undefined) => Effect.Effect<typeof PullRequestReviewComment.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Deletes a review comment.
*/
readonly "pullsDeleteReviewComment": (owner: string, repo: string, commentId: string, options?: typeof PullsDeleteReviewCommentParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Edits the content of a specified review comment.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsUpdateReviewComment": (owner: string, repo: string, commentId: string, options: { readonly params?: typeof PullsUpdateReviewCommentParams.Encoded | undefined; readonly payload: typeof PullsUpdateReviewCommentRequest.Encoded }) => Effect.Effect<typeof PullRequestReviewComment.Type, HttpClientError.HttpClientError | ParseError>
  /**
* List the reactions to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).
*/
readonly "reactionsListForPullRequestReviewComment": (owner: string, repo: string, commentId: string, options?: typeof ReactionsListForPullRequestReviewCommentParams.Encoded | undefined) => Effect.Effect<typeof ReactionsListForPullRequestReviewComment200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Create a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
*/
readonly "reactionsCreateForPullRequestReviewComment": (owner: string, repo: string, commentId: string, options: { readonly params?: typeof ReactionsCreateForPullRequestReviewCommentParams.Encoded | undefined; readonly payload: typeof ReactionsCreateForPullRequestReviewCommentRequest.Encoded }) => Effect.Effect<typeof Reaction.Type | typeof Reaction.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* > [!NOTE]
* > You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
* 
* Delete a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).
*/
readonly "reactionsDeleteForPullRequestComment": (owner: string, repo: string, commentId: string, reactionId: string, options?: typeof ReactionsDeleteForPullRequestCommentParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* Lists details of a pull request by providing its number.
* 
* When you get, [create](https://docs.github.com/rest/pulls/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/pulls/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
* 
* The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
* 
* The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
* 
* *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
* *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
* *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
* 
* Pass the appropriate [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types) to fetch diff and patch formats.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
* - **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.
*/
readonly "pullsGet": (owner: string, repo: string, pullNumber: string, options?: typeof PullsGetParams.Encoded | undefined) => Effect.Effect<typeof PullRequest.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"PullsGet503", typeof PullsGet503.Type>>
  /**
* Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsUpdate": (owner: string, repo: string, pullNumber: string, options: { readonly params?: typeof PullsUpdateParams.Encoded | undefined; readonly payload: typeof PullsUpdateRequest.Encoded }) => Effect.Effect<typeof PullRequest.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Creates a codespace owned by the authenticated user for the specified pull request.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesCreateWithPrForAuthenticatedUser": (owner: string, repo: string, pullNumber: string, options: { readonly params?: typeof CodespacesCreateWithPrForAuthenticatedUserParams.Encoded | undefined; readonly payload: typeof CodespacesCreateWithPrForAuthenticatedUserRequest.Encoded }) => Effect.Effect<typeof Codespace.Type | typeof Codespace.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodespacesCreateWithPrForAuthenticatedUser503", typeof CodespacesCreateWithPrForAuthenticatedUser503.Type>>
  /**
* Lists all review comments for a specified pull request. By default, review comments
* are in ascending order by ID.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsListReviewComments": (owner: string, repo: string, pullNumber: string, options?: typeof PullsListReviewCommentsParams.Encoded | undefined) => Effect.Effect<typeof PullsListReviewComments200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates a review comment on the diff of a specified pull request. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/issues/comments#create-an-issue-comment)."
* 
* If your comment applies to more than one line in the pull request diff, you should use the parameters `line`, `side`, and optionally `start_line` and `start_side` in your request.
* 
* The `position` parameter is closing down. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
* and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsCreateReviewComment": (owner: string, repo: string, pullNumber: string, options: { readonly params?: typeof PullsCreateReviewCommentParams.Encoded | undefined; readonly payload: typeof PullsCreateReviewCommentRequest.Encoded }) => Effect.Effect<typeof PullRequestReviewComment.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
* and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsCreateReplyForReviewComment": (owner: string, repo: string, pullNumber: string, commentId: string, options: { readonly params?: typeof PullsCreateReplyForReviewCommentParams.Encoded | undefined; readonly payload: typeof PullsCreateReplyForReviewCommentRequest.Encoded }) => Effect.Effect<typeof PullRequestReviewComment.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists a maximum of 250 commits for a pull request. To receive a complete
* commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/commits/commits#list-commits)
* endpoint.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsListCommits": (owner: string, repo: string, pullNumber: string, options?: typeof PullsListCommitsParams.Encoded | undefined) => Effect.Effect<typeof PullsListCommits200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists the files in a specified pull request.
* 
* > [!NOTE]
* > Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsListFiles": (owner: string, repo: string, pullNumber: string, options?: typeof PullsListFilesParams.Encoded | undefined) => Effect.Effect<typeof PullsListFiles200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"PullsListFiles503", typeof PullsListFiles503.Type>>
  /**
* Checks if a pull request has been merged into the base branch. The HTTP status of the response indicates whether or not the pull request has been merged; the response body is empty.
*/
readonly "pullsCheckIfMerged": (owner: string, repo: string, pullNumber: string, options?: typeof PullsCheckIfMergedParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Merges a pull request into the base branch.
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
*/
readonly "pullsMerge": (owner: string, repo: string, pullNumber: string, options: { readonly params?: typeof PullsMergeParams.Encoded | undefined; readonly payload: typeof PullsMergeRequest.Encoded }) => Effect.Effect<typeof PullRequestMergeResult.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"PullsMerge405", typeof PullsMerge405.Type> | ClientError<"PullsMerge409", typeof PullsMerge409.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
*/
readonly "pullsListRequestedReviewers": (owner: string, repo: string, pullNumber: string, options?: typeof PullsListRequestedReviewersParams.Encoded | undefined) => Effect.Effect<typeof PullRequestReviewRequest.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Requests reviews for a pull request from a given set of users and/or teams.
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
*/
readonly "pullsRequestReviewers": (owner: string, repo: string, pullNumber: string, options: { readonly params?: typeof PullsRequestReviewersParams.Encoded | undefined; readonly payload: typeof PullsRequestReviewersRequest.Encoded }) => Effect.Effect<typeof PullRequestSimple.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Removes review requests from a pull request for a given set of users and/or teams.
*/
readonly "pullsRemoveRequestedReviewers": (owner: string, repo: string, pullNumber: string, options: { readonly params?: typeof PullsRemoveRequestedReviewersParams.Encoded | undefined; readonly payload: typeof PullsRemoveRequestedReviewersRequest.Encoded }) => Effect.Effect<typeof PullRequestSimple.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists all reviews for a specified pull request. The list of reviews returns in chronological order.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsListReviews": (owner: string, repo: string, pullNumber: string, options?: typeof PullsListReviewsParams.Encoded | undefined) => Effect.Effect<typeof PullsListReviews200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates a review on a specified pull request.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* Pull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see "[Submit a review for a pull request](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request)."
* 
* > [!NOTE]
* > To comment on a specific line in a file, you need to first determine the position of that line in the diff. To see a pull request diff, add the `application/vnd.github.v3.diff` media type to the `Accept` header of a call to the [Get a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) endpoint.
* 
* The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsCreateReview": (owner: string, repo: string, pullNumber: string, options: { readonly params?: typeof PullsCreateReviewParams.Encoded | undefined; readonly payload: typeof PullsCreateReviewRequest.Encoded }) => Effect.Effect<typeof PullRequestReview.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Retrieves a pull request review by its ID.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsGetReview": (owner: string, repo: string, pullNumber: string, reviewId: string, options?: typeof PullsGetReviewParams.Encoded | undefined) => Effect.Effect<typeof PullRequestReview.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Updates the contents of a specified review summary comment.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsUpdateReview": (owner: string, repo: string, pullNumber: string, reviewId: string, options: { readonly params?: typeof PullsUpdateReviewParams.Encoded | undefined; readonly payload: typeof PullsUpdateReviewRequest.Encoded }) => Effect.Effect<typeof PullRequestReview.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Deletes a pull request review that has not been submitted. Submitted reviews cannot be deleted.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsDeletePendingReview": (owner: string, repo: string, pullNumber: string, reviewId: string, options?: typeof PullsDeletePendingReviewParams.Encoded | undefined) => Effect.Effect<typeof PullRequestReview.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Lists comments for a specific pull request review.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsListCommentsForReview": (owner: string, repo: string, pullNumber: string, reviewId: string, options?: typeof PullsListCommentsForReviewParams.Encoded | undefined) => Effect.Effect<typeof PullsListCommentsForReview200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Dismisses a specified review on a pull request.
* 
* > [!NOTE]
* > To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/branches/branch-protection), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsDismissReview": (owner: string, repo: string, pullNumber: string, reviewId: string, options: { readonly params?: typeof PullsDismissReviewParams.Encoded | undefined; readonly payload: typeof PullsDismissReviewRequest.Encoded }) => Effect.Effect<typeof PullRequestReview.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see "[Create a review for a pull request](https://docs.github.com/rest/pulls/reviews#create-a-review-for-a-pull-request)."
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "pullsSubmitReview": (owner: string, repo: string, pullNumber: string, reviewId: string, options: { readonly params?: typeof PullsSubmitReviewParams.Encoded | undefined; readonly payload: typeof PullsSubmitReviewRequest.Encoded }) => Effect.Effect<typeof PullRequestReview.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
* Note: If making a request on behalf of a GitHub App you must also have permissions to write the contents of the head repository.
*/
readonly "pullsUpdateBranch": (owner: string, repo: string, pullNumber: string, options: { readonly params?: typeof PullsUpdateBranchParams.Encoded | undefined; readonly payload: typeof PullsUpdateBranchRequest.Encoded }) => Effect.Effect<typeof PullsUpdateBranch202.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Gets the preferred README for a repository.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.
* - **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
*/
readonly "reposGetReadme": (owner: string, repo: string, options?: typeof ReposGetReadmeParams.Encoded | undefined) => Effect.Effect<typeof ContentFile.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Gets the README from a repository directory.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.
* - **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
*/
readonly "reposGetReadmeInDirectory": (owner: string, repo: string, dir: string, options?: typeof ReposGetReadmeInDirectoryParams.Encoded | undefined) => Effect.Effect<typeof ContentFile.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/repos/repos#list-repository-tags).
* 
* Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
*/
readonly "reposListReleases": (owner: string, repo: string, options?: typeof ReposListReleasesParams.Encoded | undefined) => Effect.Effect<typeof ReposListReleases200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Users with push access to the repository can create a release.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
*/
readonly "reposCreateRelease": (owner: string, repo: string, options: { readonly params?: typeof ReposCreateReleaseParams.Encoded | undefined; readonly payload: typeof ReposCreateReleaseRequest.Encoded }) => Effect.Effect<typeof Release.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* To download the asset's binary content:
* 
* - If within a browser, fetch the location specified in the `browser_download_url` key provided in the response.
* - Alternatively, set the `Accept` header of the request to 
*   [`application/octet-stream`](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types). 
*   The API will either redirect the client to the location, or stream it directly if possible.
*   API clients should handle both a `200` or `302` response.
*/
readonly "reposGetReleaseAsset": (owner: string, repo: string, assetId: string, options?: typeof ReposGetReleaseAssetParams.Encoded | undefined) => Effect.Effect<typeof ReleaseAsset.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Delete a release asset
*/
readonly "reposDeleteReleaseAsset": (owner: string, repo: string, assetId: string, options?: typeof ReposDeleteReleaseAssetParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Users with push access to the repository can edit a release asset.
*/
readonly "reposUpdateReleaseAsset": (owner: string, repo: string, assetId: string, options: { readonly params?: typeof ReposUpdateReleaseAssetParams.Encoded | undefined; readonly payload: typeof ReposUpdateReleaseAssetRequest.Encoded }) => Effect.Effect<typeof ReleaseAsset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Generate a name and body describing a [release](https://docs.github.com/rest/releases/releases#get-a-release). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.
*/
readonly "reposGenerateReleaseNotes": (owner: string, repo: string, options: { readonly params?: typeof ReposGenerateReleaseNotesParams.Encoded | undefined; readonly payload: typeof ReposGenerateReleaseNotesRequest.Encoded }) => Effect.Effect<typeof ReleaseNotesContent.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* View the latest published full release for the repository.
* 
* The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
*/
readonly "reposGetLatestRelease": (owner: string, repo: string, options?: typeof ReposGetLatestReleaseParams.Encoded | undefined) => Effect.Effect<typeof Release.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get a published release with the specified tag.
*/
readonly "reposGetReleaseByTag": (owner: string, repo: string, tag: string, options?: typeof ReposGetReleaseByTagParams.Encoded | undefined) => Effect.Effect<typeof Release.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets a public release with the specified release ID.
* 
* > [!NOTE]
* > This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a hypermedia resource. For more information, see "[Getting started with the REST API](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
*/
readonly "reposGetRelease": (owner: string, repo: string, releaseId: string, options?: typeof ReposGetReleaseParams.Encoded | undefined) => Effect.Effect<typeof Release.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Users with push access to the repository can delete a release.
*/
readonly "reposDeleteRelease": (owner: string, repo: string, releaseId: string, options?: typeof ReposDeleteReleaseParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Users with push access to the repository can edit a release.
*/
readonly "reposUpdateRelease": (owner: string, repo: string, releaseId: string, options: { readonly params?: typeof ReposUpdateReleaseParams.Encoded | undefined; readonly payload: typeof ReposUpdateReleaseRequest.Encoded }) => Effect.Effect<typeof Release.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List release assets
*/
readonly "reposListReleaseAssets": (owner: string, repo: string, releaseId: string, options?: typeof ReposListReleaseAssetsParams.Encoded | undefined) => Effect.Effect<typeof ReposListReleaseAssets200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* This endpoint makes use of a [Hypermedia relation](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
* the response of the [Create a release endpoint](https://docs.github.com/rest/releases/releases#create-a-release) to upload a release asset.
* 
* You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
* 
* Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example: 
* 
* `application/zip`
* 
* GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
* you'll still need to pass your authentication to be able to upload an asset.
* 
* When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
* 
* **Notes:**
* *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List release assets](https://docs.github.com/rest/releases/assets#list-release-assets)"
* endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
* *   To find the `release_id` query the [`GET /repos/{owner}/{repo}/releases/latest` endpoint](https://docs.github.com/rest/releases/releases#get-the-latest-release). 
* *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
*/
readonly "reposUploadReleaseAsset": (owner: string, repo: string, releaseId: string, options: typeof ReposUploadReleaseAssetParams.Encoded) => Effect.Effect<typeof ReleaseAsset.Type, HttpClientError.HttpClientError | ParseError>
  /**
* List the reactions to a [release](https://docs.github.com/rest/releases/releases#get-a-release).
*/
readonly "reactionsListForRelease": (owner: string, repo: string, releaseId: string, options?: typeof ReactionsListForReleaseParams.Encoded | undefined) => Effect.Effect<typeof ReactionsListForRelease200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Create a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release). A response with a `Status: 200 OK` means that you already added the reaction type to this release.
*/
readonly "reactionsCreateForRelease": (owner: string, repo: string, releaseId: string, options: { readonly params?: typeof ReactionsCreateForReleaseParams.Encoded | undefined; readonly payload: typeof ReactionsCreateForReleaseRequest.Encoded }) => Effect.Effect<typeof Reaction.Type | typeof Reaction.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* > [!NOTE]
* > You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.
* 
* Delete a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release).
*/
readonly "reactionsDeleteForRelease": (owner: string, repo: string, releaseId: string, reactionId: string, options?: typeof ReactionsDeleteForReleaseParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Returns all active rules that apply to the specified branch. The branch does not need to exist; rules that would apply
* to a branch with that name will be returned. All active rules that apply will be returned, regardless of the level
* at which they are configured (e.g. repository or organization). Rules in rulesets with "evaluate" or "disabled"
* enforcement statuses are not returned.
*/
readonly "reposGetBranchRules": (owner: string, repo: string, branch: string, options?: typeof ReposGetBranchRulesParams.Encoded | undefined) => Effect.Effect<typeof ReposGetBranchRules200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get all the rulesets for a repository.
*/
readonly "reposGetRepoRulesets": (owner: string, repo: string, options?: typeof ReposGetRepoRulesetsParams.Encoded | undefined) => Effect.Effect<typeof ReposGetRepoRulesets200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Create a ruleset for a repository.
*/
readonly "reposCreateRepoRuleset": (owner: string, repo: string, options: { readonly params?: typeof ReposCreateRepoRulesetParams.Encoded | undefined; readonly payload: typeof ReposCreateRepoRulesetRequest.Encoded }) => Effect.Effect<typeof RepositoryRuleset.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists suites of rule evaluations at the repository level.
* For more information, see "[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."
*/
readonly "reposGetRepoRuleSuites": (owner: string, repo: string, options?: typeof ReposGetRepoRuleSuitesParams.Encoded | undefined) => Effect.Effect<typeof RuleSuites.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets information about a suite of rule evaluations from within a repository.
* For more information, see "[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."
*/
readonly "reposGetRepoRuleSuite": (owner: string, repo: string, ruleSuiteId: string, options?: typeof ReposGetRepoRuleSuiteParams.Encoded | undefined) => Effect.Effect<typeof RuleSuite.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Get a ruleset for a repository.
* 
* **Note:** To prevent leaking sensitive information, the `bypass_actors` property is only returned if the user
* making the API request has write access to the ruleset.
*/
readonly "reposGetRepoRuleset": (owner: string, repo: string, rulesetId: string, options?: typeof ReposGetRepoRulesetParams.Encoded | undefined) => Effect.Effect<typeof RepositoryRuleset.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Update a ruleset for a repository.
*/
readonly "reposUpdateRepoRuleset": (owner: string, repo: string, rulesetId: string, options: { readonly params?: typeof ReposUpdateRepoRulesetParams.Encoded | undefined; readonly payload: typeof ReposUpdateRepoRulesetRequest.Encoded }) => Effect.Effect<typeof RepositoryRuleset.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Delete a ruleset for a repository.
*/
readonly "reposDeleteRepoRuleset": (owner: string, repo: string, rulesetId: string, options?: typeof ReposDeleteRepoRulesetParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Get the history of a repository ruleset.
*/
readonly "reposGetRepoRulesetHistory": (owner: string, repo: string, rulesetId: string, options?: typeof ReposGetRepoRulesetHistoryParams.Encoded | undefined) => Effect.Effect<typeof ReposGetRepoRulesetHistory200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Get a version of a repository ruleset.
*/
readonly "reposGetRepoRulesetVersion": (owner: string, repo: string, rulesetId: string, versionId: string, options?: typeof ReposGetRepoRulesetVersionParams.Encoded | undefined) => Effect.Effect<typeof RulesetVersionWithState.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists secret scanning alerts for an eligible repository, from newest to oldest.
* 
* The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "secretScanningListAlertsForRepo": (owner: string, repo: string, options?: typeof SecretScanningListAlertsForRepoParams.Encoded | undefined) => Effect.Effect<typeof SecretScanningListAlertsForRepo200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"SecretScanningListAlertsForRepo503", typeof SecretScanningListAlertsForRepo503.Type>>
  /**
* Gets a single secret scanning alert detected in an eligible repository.
* 
* The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "secretScanningGetAlert": (owner: string, repo: string, alertNumber: string, options?: typeof SecretScanningGetAlertParams.Encoded | undefined) => Effect.Effect<typeof SecretScanningAlert.Type, HttpClientError.HttpClientError | ParseError | ClientError<"SecretScanningGetAlert503", typeof SecretScanningGetAlert503.Type>>
  /**
* Updates the status of a secret scanning alert in an eligible repository.
* 
* The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "secretScanningUpdateAlert": (owner: string, repo: string, alertNumber: string, options: { readonly params?: typeof SecretScanningUpdateAlertParams.Encoded | undefined; readonly payload: typeof SecretScanningUpdateAlertRequest.Encoded }) => Effect.Effect<typeof SecretScanningAlert.Type, HttpClientError.HttpClientError | ParseError | ClientError<"SecretScanningUpdateAlert503", typeof SecretScanningUpdateAlert503.Type>>
  /**
* Lists all locations for a given secret scanning alert for an eligible repository.
* 
* The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "secretScanningListLocationsForAlert": (owner: string, repo: string, alertNumber: string, options?: typeof SecretScanningListLocationsForAlertParams.Encoded | undefined) => Effect.Effect<typeof SecretScanningListLocationsForAlert200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"SecretScanningListLocationsForAlert503", typeof SecretScanningListLocationsForAlert503.Type>>
  /**
* Creates a bypass for a previously push protected secret.
* 
* The authenticated user must be the original author of the committed secret.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "secretScanningCreatePushProtectionBypass": (owner: string, repo: string, options: { readonly params?: typeof SecretScanningCreatePushProtectionBypassParams.Encoded | undefined; readonly payload: typeof SecretScanningCreatePushProtectionBypassRequest.Encoded }) => Effect.Effect<typeof SecretScanningPushProtectionBypass.Type, HttpClientError.HttpClientError | ParseError | ClientError<"SecretScanningCreatePushProtectionBypass503", typeof SecretScanningCreatePushProtectionBypass503.Type>>
  /**
* Lists the latest default incremental and backfill scans by type for a repository. Scans from Copilot Secret Scanning are not included.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
*/
readonly "secretScanningGetScanHistory": (owner: string, repo: string, options?: typeof SecretScanningGetScanHistoryParams.Encoded | undefined) => Effect.Effect<typeof SecretScanningScanHistory.Type, HttpClientError.HttpClientError | ParseError | ClientError<"SecretScanningGetScanHistory503", typeof SecretScanningGetScanHistory503.Type>>
  /**
* Lists security advisories in a repository.
* 
* The authenticated user can access unpublished security advisories from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on any security advisory.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
*/
readonly "securityAdvisoriesListRepositoryAdvisories": (owner: string, repo: string, options?: typeof SecurityAdvisoriesListRepositoryAdvisoriesParams.Encoded | undefined) => Effect.Effect<typeof SecurityAdvisoriesListRepositoryAdvisories200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Creates a new repository security advisory.
* 
* In order to create a draft repository security advisory, the authenticated user must be a security manager or administrator of that repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
*/
readonly "securityAdvisoriesCreateRepositoryAdvisory": (owner: string, repo: string, options: { readonly params?: typeof SecurityAdvisoriesCreateRepositoryAdvisoryParams.Encoded | undefined; readonly payload: typeof RepositoryAdvisoryCreate.Encoded }) => Effect.Effect<typeof RepositoryAdvisory.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Report a security vulnerability to the maintainers of the repository.
* See "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)" for more information about private vulnerability reporting.
*/
readonly "securityAdvisoriesCreatePrivateVulnerabilityReport": (owner: string, repo: string, options: { readonly params?: typeof SecurityAdvisoriesCreatePrivateVulnerabilityReportParams.Encoded | undefined; readonly payload: typeof PrivateVulnerabilityReportCreate.Encoded }) => Effect.Effect<typeof RepositoryAdvisory.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
* 
* Anyone can access any published security advisory on a public repository.
* 
* The authenticated user can access an unpublished security advisory from a repository if they are a security manager or administrator of that repository, or if they are a
* collaborator on the security advisory.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
*/
readonly "securityAdvisoriesGetRepositoryAdvisory": (owner: string, repo: string, ghsaId: string, options?: typeof SecurityAdvisoriesGetRepositoryAdvisoryParams.Encoded | undefined) => Effect.Effect<typeof RepositoryAdvisory.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
* 
* In order to update any security advisory, the authenticated user must be a security manager or administrator of that repository,
* or a collaborator on the repository security advisory.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
*/
readonly "securityAdvisoriesUpdateRepositoryAdvisory": (owner: string, repo: string, ghsaId: string, options: { readonly params?: typeof SecurityAdvisoriesUpdateRepositoryAdvisoryParams.Encoded | undefined; readonly payload: typeof RepositoryAdvisoryUpdate.Encoded }) => Effect.Effect<typeof RepositoryAdvisory.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* If you want a CVE identification number for the security vulnerability in your project, and don't already have one, you can request a CVE identification number from GitHub. For more information see "[Requesting a CVE identification number](https://docs.github.com/code-security/security-advisories/repository-security-advisories/publishing-a-repository-security-advisory#requesting-a-cve-identification-number-optional)."
* 
* You may request a CVE for public repositories, but cannot do so for private repositories.
* 
* In order to request a CVE for a repository security advisory, the authenticated user must be a security manager or administrator of that repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
*/
readonly "securityAdvisoriesCreateRepositoryAdvisoryCveRequest": (owner: string, repo: string, ghsaId: string, options?: typeof SecurityAdvisoriesCreateRepositoryAdvisoryCveRequestParams.Encoded | undefined) => Effect.Effect<typeof SecurityAdvisoriesCreateRepositoryAdvisoryCveRequest202.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Create a temporary private fork to collaborate on fixing a security vulnerability in your repository.
* 
* > [!NOTE]
* > Forking a repository happens asynchronously. You may have to wait up to 5 minutes before you can access the fork.
*/
readonly "securityAdvisoriesCreateFork": (owner: string, repo: string, ghsaId: string, options?: typeof SecurityAdvisoriesCreateForkParams.Encoded | undefined) => Effect.Effect<typeof FullRepository.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists the people that have starred the repository.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
*/
readonly "activityListStargazersForRepo": (owner: string, repo: string, options?: typeof ActivityListStargazersForRepoParams.Encoded | undefined) => Effect.Effect<typeof ActivityListStargazersForRepo200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
* 
* > [!NOTE]
* > This endpoint can only be used for repositories with fewer than 10,000 commits. If the repository contains 10,000 or more commits, a 422 status code will be returned.
*/
readonly "reposGetCodeFrequencyStats": (owner: string, repo: string, options?: typeof ReposGetCodeFrequencyStatsParams.Encoded | undefined) => Effect.Effect<typeof ReposGetCodeFrequencyStats200.Type | typeof ReposGetCodeFrequencyStats202.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
*/
readonly "reposGetCommitActivityStats": (owner: string, repo: string, options?: typeof ReposGetCommitActivityStatsParams.Encoded | undefined) => Effect.Effect<typeof ReposGetCommitActivityStats200.Type | typeof ReposGetCommitActivityStats202.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
* 
* *   `w` - Start of the week, given as a [Unix timestamp](https://en.wikipedia.org/wiki/Unix_time).
* *   `a` - Number of additions
* *   `d` - Number of deletions
* *   `c` - Number of commits
* 
* > [!NOTE]
* > This endpoint will return `0` values for all addition and deletion counts in repositories with 10,000 or more commits.
*/
readonly "reposGetContributorsStats": (owner: string, repo: string, options?: typeof ReposGetContributorsStatsParams.Encoded | undefined) => Effect.Effect<typeof ReposGetContributorsStats200.Type | typeof ReposGetContributorsStats202.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
* 
* The array order is oldest week (index 0) to most recent week.
* 
* The most recent week is seven days ago at UTC midnight to today at UTC midnight.
*/
readonly "reposGetParticipationStats": (owner: string, repo: string, options?: typeof ReposGetParticipationStatsParams.Encoded | undefined) => Effect.Effect<typeof ParticipationStats.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Each array contains the day number, hour number, and number of commits:
* 
* *   `0-6`: Sunday - Saturday
* *   `0-23`: Hour of day
* *   Number of commits
* 
* For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
*/
readonly "reposGetPunchCardStats": (owner: string, repo: string, options?: typeof ReposGetPunchCardStatsParams.Encoded | undefined) => Effect.Effect<typeof ReposGetPunchCardStats200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Users with push access in a repository can create commit statuses for a given SHA.
* 
* Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
*/
readonly "reposCreateCommitStatus": (owner: string, repo: string, sha: string, options: { readonly params?: typeof ReposCreateCommitStatusParams.Encoded | undefined; readonly payload: typeof ReposCreateCommitStatusRequest.Encoded }) => Effect.Effect<typeof Status.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists the people watching the specified repository.
*/
readonly "activityListWatchersForRepo": (owner: string, repo: string, options?: typeof ActivityListWatchersForRepoParams.Encoded | undefined) => Effect.Effect<typeof ActivityListWatchersForRepo200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets information about whether the authenticated user is subscribed to the repository.
*/
readonly "activityGetRepoSubscription": (owner: string, repo: string, options?: typeof ActivityGetRepoSubscriptionParams.Encoded | undefined) => Effect.Effect<typeof RepositorySubscription.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/activity/watching#delete-a-repository-subscription) completely.
*/
readonly "activitySetRepoSubscription": (owner: string, repo: string, options: { readonly params?: typeof ActivitySetRepoSubscriptionParams.Encoded | undefined; readonly payload: typeof ActivitySetRepoSubscriptionRequest.Encoded }) => Effect.Effect<typeof RepositorySubscription.Type, HttpClientError.HttpClientError | ParseError>
  /**
* This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/activity/watching#set-a-repository-subscription).
*/
readonly "activityDeleteRepoSubscription": (owner: string, repo: string, options?: typeof ActivityDeleteRepoSubscriptionParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* List repository tags
*/
readonly "reposListTags": (owner: string, repo: string, options?: typeof ReposListTagsParams.Encoded | undefined) => Effect.Effect<typeof ReposListTags200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#get-all-repository-rulesets)" endpoint instead.
* 
* This returns the tag protection states of a repository.
* 
* This information is only available to repository administrators.
*/
readonly "reposListTagProtection": (owner: string, repo: string, options?: typeof ReposListTagProtectionParams.Encoded | undefined) => Effect.Effect<typeof ReposListTagProtection200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#create-a-repository-ruleset)" endpoint instead.
* 
* This creates a tag protection state for a repository.
* This endpoint is only available to repository administrators.
*/
readonly "reposCreateTagProtection": (owner: string, repo: string, options: { readonly params?: typeof ReposCreateTagProtectionParams.Encoded | undefined; readonly payload: typeof ReposCreateTagProtectionRequest.Encoded }) => Effect.Effect<typeof TagProtection.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** This operation is closing down and will be removed after August 30, 2024. Use the "[Repository Rulesets](https://docs.github.com/rest/repos/rules#delete-a-repository-ruleset)" endpoint instead.
* 
* This deletes a tag protection state for a repository.
* This endpoint is only available to repository administrators.
*/
readonly "reposDeleteTagProtection": (owner: string, repo: string, tagProtectionId: string, options?: typeof ReposDeleteTagProtectionParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
* `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
* the `Location` header to make a second `GET` request.
* 
* > [!NOTE]
* > For private repositories, these links are temporary and expire after five minutes.
*/
readonly "reposDownloadTarballArchive": (owner: string, repo: string, ref: string, options?: typeof ReposDownloadTarballArchiveParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists the teams that have access to the specified repository and that are also visible to the authenticated user.
* 
* For a public repository, a team is listed only if that team added the public repository explicitly.
* 
* OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to use this endpoint with a public repository, and `repo` scope to use this endpoint with a private repository.
*/
readonly "reposListTeams": (owner: string, repo: string, options?: typeof ReposListTeamsParams.Encoded | undefined) => Effect.Effect<typeof ReposListTeams200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Get all repository topics
*/
readonly "reposGetAllTopics": (owner: string, repo: string, options?: typeof ReposGetAllTopicsParams.Encoded | undefined) => Effect.Effect<typeof Topic.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Replace all repository topics
*/
readonly "reposReplaceAllTopics": (owner: string, repo: string, options: { readonly params?: typeof ReposReplaceAllTopicsParams.Encoded | undefined; readonly payload: typeof ReposReplaceAllTopicsRequest.Encoded }) => Effect.Effect<typeof Topic.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
*/
readonly "reposGetClones": (owner: string, repo: string, options?: typeof ReposGetClonesParams.Encoded | undefined) => Effect.Effect<typeof CloneTraffic.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Get the top 10 popular contents over the last 14 days.
*/
readonly "reposGetTopPaths": (owner: string, repo: string, options?: typeof ReposGetTopPathsParams.Encoded | undefined) => Effect.Effect<typeof ReposGetTopPaths200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Get the top 10 referrers over the last 14 days.
*/
readonly "reposGetTopReferrers": (owner: string, repo: string, options?: typeof ReposGetTopReferrersParams.Encoded | undefined) => Effect.Effect<typeof ReposGetTopReferrers200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
*/
readonly "reposGetViews": (owner: string, repo: string, options?: typeof ReposGetViewsParams.Encoded | undefined) => Effect.Effect<typeof ViewTraffic.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).
*/
readonly "reposTransfer": (owner: string, repo: string, options: { readonly params?: typeof ReposTransferParams.Encoded | undefined; readonly payload: typeof ReposTransferRequest.Encoded }) => Effect.Effect<typeof MinimalRepository.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
*/
readonly "reposCheckVulnerabilityAlerts": (owner: string, repo: string, options?: typeof ReposCheckVulnerabilityAlertsParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
*/
readonly "reposEnableVulnerabilityAlerts": (owner: string, repo: string, options?: typeof ReposEnableVulnerabilityAlertsParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Disables dependency alerts and the dependency graph for a repository.
* The authenticated user must have admin access to the repository. For more information,
* see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
*/
readonly "reposDisableVulnerabilityAlerts": (owner: string, repo: string, options?: typeof ReposDisableVulnerabilityAlertsParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
* `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
* the `Location` header to make a second `GET` request.
* 
* > [!NOTE]
* > For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.
*/
readonly "reposDownloadZipballArchive": (owner: string, repo: string, ref: string, options?: typeof ReposDownloadZipballArchiveParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/repos/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
* 
* OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
*/
readonly "reposCreateUsingTemplate": (templateOwner: string, templateRepo: string, options: typeof ReposCreateUsingTemplateRequest.Encoded) => Effect.Effect<typeof FullRepository.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all public repositories in the order that they were created.
* 
* Note:
* - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
* - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of repositories.
*/
readonly "reposListPublic": (options?: typeof ReposListPublicParams.Encoded | undefined) => Effect.Effect<typeof ReposListPublic200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
* 
* When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
* 
* For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
* 
* `q=addClass+in:file+language:js+repo:jquery/jquery`
* 
* This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
* 
* Considerations for code search:
* 
* Due to the complexity of searching code, there are a few restrictions on how searches are performed:
* 
* *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
* *   Only files smaller than 384 KB are searchable.
* *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
* language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
* 
* This endpoint requires you to authenticate and limits you to 10 requests per minute.
*/
readonly "searchCode": (options: typeof SearchCodeParams.Encoded) => Effect.Effect<typeof SearchCode200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"SearchCode503", typeof SearchCode503.Type>>
  /**
* Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
* 
* When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
* metadata](https://docs.github.com/rest/search/search#text-match-metadata).
* 
* For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
* 
* `q=repo:octocat/Spoon-Knife+css`
*/
readonly "searchCommits": (options: typeof SearchCommitsParams.Encoded) => Effect.Effect<typeof SearchCommits200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Notice:** Search for issues and pull requests will be overridden by advanced search on September 4, 2025.
* > You can read more about this change on [the GitHub blog](https://github.blog/changelog/2025-03-06-github-issues-projects-api-support-for-issues-advanced-search-and-more/).
*/
readonly "searchIssuesAndPullRequests": (options: typeof SearchIssuesAndPullRequestsParams.Encoded) => Effect.Effect<typeof SearchIssuesAndPullRequests200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"SearchIssuesAndPullRequests503", typeof SearchIssuesAndPullRequests503.Type>>
  /**
* Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
* 
* When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
* 
* For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
* 
* `q=bug+defect+enhancement&repository_id=64778136`
* 
* The labels that best match the query appear first in the search results.
*/
readonly "searchLabels": (options: typeof SearchLabelsParams.Encoded) => Effect.Effect<typeof SearchLabels200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
* 
* When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
* 
* For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
* 
* `q=tetris+language:assembly&sort=stars&order=desc`
* 
* This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
*/
readonly "searchRepos": (options: typeof SearchReposParams.Encoded) => Effect.Effect<typeof SearchRepos200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"SearchRepos503", typeof SearchRepos503.Type>>
  /**
* Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
* 
* When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
* 
* For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
* 
* `q=ruby+is:featured`
* 
* This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
*/
readonly "searchTopics": (options: typeof SearchTopicsParams.Encoded) => Effect.Effect<typeof SearchTopics200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
* 
* When searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
* 
* For example, if you're looking for a list of popular users, you might try this query:
* 
* `q=tom+repos:%3E42+followers:%3E1000`
* 
* This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
* 
* This endpoint does not accept authentication and will only include publicly visible users. As an alternative, you can use the GraphQL API. The GraphQL API requires authentication and will return private users, including Enterprise Managed Users (EMUs), that you are authorized to view. For more information, see "[GraphQL Queries](https://docs.github.com/graphql/reference/queries#search)."
*/
readonly "searchUsers": (options: typeof SearchUsersParams.Encoded) => Effect.Effect<typeof SearchUsers200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"SearchUsers503", typeof SearchUsers503.Type>>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/teams/teams#get-a-team-by-name) endpoint.
*/
readonly "teamsGetLegacy": (teamId: string, options?: typeof TeamsGetLegacyParams.Encoded | undefined) => Effect.Effect<typeof TeamFull.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/teams/teams#delete-a-team) endpoint.
* 
* To delete a team, the authenticated user must be an organization owner or team maintainer.
* 
* If you are an organization owner, deleting a parent team will delete all of its child teams as well.
*/
readonly "teamsDeleteLegacy": (teamId: string, options?: typeof TeamsDeleteLegacyParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/teams/teams#update-a-team) endpoint.
* 
* To edit a team, the authenticated user must either be an organization owner or a team maintainer.
* 
* > [!NOTE]
* > With nested teams, the `privacy` for parent teams cannot be `secret`.
*/
readonly "teamsUpdateLegacy": (teamId: string, options: { readonly params?: typeof TeamsUpdateLegacyParams.Encoded | undefined; readonly payload: typeof TeamsUpdateLegacyRequest.Encoded }) => Effect.Effect<typeof TeamFull.Type | typeof TeamFull.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/teams/discussions#list-discussions) endpoint.
* 
* List all discussions on a team's page.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "teamsListDiscussionsLegacy": (teamId: string, options?: typeof TeamsListDiscussionsLegacyParams.Encoded | undefined) => Effect.Effect<typeof TeamsListDiscussionsLegacy200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/teams/discussions#create-a-discussion) endpoint.
* 
* Creates a new discussion post on a team's page.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsCreateDiscussionLegacy": (teamId: string, options: { readonly params?: typeof TeamsCreateDiscussionLegacyParams.Encoded | undefined; readonly payload: typeof TeamsCreateDiscussionLegacyRequest.Encoded }) => Effect.Effect<typeof TeamDiscussion.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion) endpoint.
* 
* Get a specific discussion on a team's page.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "teamsGetDiscussionLegacy": (teamId: string, discussionNumber: string, options?: typeof TeamsGetDiscussionLegacyParams.Encoded | undefined) => Effect.Effect<typeof TeamDiscussion.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/teams/discussions#delete-a-discussion) endpoint.
* 
* Delete a discussion from a team's page.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsDeleteDiscussionLegacy": (teamId: string, discussionNumber: string, options?: typeof TeamsDeleteDiscussionLegacyParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/teams/discussions#update-a-discussion) endpoint.
* 
* Edits the title and body text of a discussion post. Only the parameters you provide are updated.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsUpdateDiscussionLegacy": (teamId: string, discussionNumber: string, options: { readonly params?: typeof TeamsUpdateDiscussionLegacyParams.Encoded | undefined; readonly payload: typeof TeamsUpdateDiscussionLegacyRequest.Encoded }) => Effect.Effect<typeof TeamDiscussion.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/teams/discussion-comments#list-discussion-comments) endpoint.
* 
* List all comments on a team discussion.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "teamsListDiscussionCommentsLegacy": (teamId: string, discussionNumber: string, options?: typeof TeamsListDiscussionCommentsLegacyParams.Encoded | undefined) => Effect.Effect<typeof TeamsListDiscussionCommentsLegacy200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/teams/discussion-comments#create-a-discussion-comment) endpoint.
* 
* Creates a new comment on a team discussion.
* 
* This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsCreateDiscussionCommentLegacy": (teamId: string, discussionNumber: string, options: { readonly params?: typeof TeamsCreateDiscussionCommentLegacyParams.Encoded | undefined; readonly payload: typeof TeamsCreateDiscussionCommentLegacyRequest.Encoded }) => Effect.Effect<typeof TeamDiscussionComment.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment) endpoint.
* 
* Get a specific comment on a team discussion.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "teamsGetDiscussionCommentLegacy": (teamId: string, discussionNumber: string, commentNumber: string, options?: typeof TeamsGetDiscussionCommentLegacyParams.Encoded | undefined) => Effect.Effect<typeof TeamDiscussionComment.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/teams/discussion-comments#delete-a-discussion-comment) endpoint.
* 
* Deletes a comment on a team discussion.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsDeleteDiscussionCommentLegacy": (teamId: string, discussionNumber: string, commentNumber: string, options?: typeof TeamsDeleteDiscussionCommentLegacyParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/teams/discussion-comments#update-a-discussion-comment) endpoint.
* 
* Edits the body text of a discussion comment.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "teamsUpdateDiscussionCommentLegacy": (teamId: string, discussionNumber: string, commentNumber: string, options: { readonly params?: typeof TeamsUpdateDiscussionCommentLegacyParams.Encoded | undefined; readonly payload: typeof TeamsUpdateDiscussionCommentLegacyRequest.Encoded }) => Effect.Effect<typeof TeamDiscussionComment.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
* 
* List the reactions to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "reactionsListForTeamDiscussionCommentLegacy": (teamId: string, discussionNumber: string, commentNumber: string, options?: typeof ReactionsListForTeamDiscussionCommentLegacyParams.Encoded | undefined) => Effect.Effect<typeof ReactionsListForTeamDiscussionCommentLegacy200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
* 
* Create a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
* 
* A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "reactionsCreateForTeamDiscussionCommentLegacy": (teamId: string, discussionNumber: string, commentNumber: string, options: { readonly params?: typeof ReactionsCreateForTeamDiscussionCommentLegacyParams.Encoded | undefined; readonly payload: typeof ReactionsCreateForTeamDiscussionCommentLegacyRequest.Encoded }) => Effect.Effect<typeof Reaction.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion) endpoint.
* 
* List the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
* 
* OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
*/
readonly "reactionsListForTeamDiscussionLegacy": (teamId: string, discussionNumber: string, options?: typeof ReactionsListForTeamDiscussionLegacyParams.Encoded | undefined) => Effect.Effect<typeof ReactionsListForTeamDiscussionLegacy200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion) endpoint.
* 
* Create a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
* 
* A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
*/
readonly "reactionsCreateForTeamDiscussionLegacy": (teamId: string, discussionNumber: string, options: { readonly params?: typeof ReactionsCreateForTeamDiscussionLegacyParams.Encoded | undefined; readonly payload: typeof ReactionsCreateForTeamDiscussionLegacyRequest.Encoded }) => Effect.Effect<typeof Reaction.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/teams/members#list-pending-team-invitations) endpoint.
* 
* The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
*/
readonly "teamsListPendingInvitationsLegacy": (teamId: string, options?: typeof TeamsListPendingInvitationsLegacyParams.Encoded | undefined) => Effect.Effect<typeof TeamsListPendingInvitationsLegacy200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/teams/members#list-team-members) endpoint.
* 
* Team members will include the members of child teams.
*/
readonly "teamsListMembersLegacy": (teamId: string, options?: typeof TeamsListMembersLegacyParams.Encoded | undefined) => Effect.Effect<typeof TeamsListMembersLegacy200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* The "Get team member" endpoint (described below) is closing down.
* 
* We recommend using the [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
* 
* To list members in a team, the team must be visible to the authenticated user.
*/
readonly "teamsGetMemberLegacy": (teamId: string, username: string, options?: typeof TeamsGetMemberLegacyParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* The "Add team member" endpoint (described below) is closing down.
* 
* We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
* 
* Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
* 
* > [!NOTE]
* > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
* 
* Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
readonly "teamsAddMemberLegacy": (teamId: string, username: string, options?: typeof TeamsAddMemberLegacyParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* The "Remove team member" endpoint (described below) is closing down.
* 
* We recommend using the [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
* 
* Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
* 
* > [!NOTE]
* > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
*/
readonly "teamsRemoveMemberLegacy": (teamId: string, username: string, options?: typeof TeamsRemoveMemberLegacyParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint.
* 
* Team members will include the members of child teams.
* 
* To get a user's membership with a team, the team must be visible to the authenticated user.
* 
* **Note:**
* The response contains the `state` of the membership and the member's `role`.
* 
* The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).
*/
readonly "teamsGetMembershipForUserLegacy": (teamId: string, username: string, options?: typeof TeamsGetMembershipForUserLegacyParams.Encoded | undefined) => Effect.Effect<typeof TeamMembership.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint.
* 
* Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
* 
* > [!NOTE]
* > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
* 
* If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
* 
* If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
*/
readonly "teamsAddOrUpdateMembershipForUserLegacy": (teamId: string, username: string, options: { readonly params?: typeof TeamsAddOrUpdateMembershipForUserLegacyParams.Encoded | undefined; readonly payload: typeof TeamsAddOrUpdateMembershipForUserLegacyRequest.Encoded }) => Effect.Effect<typeof TeamMembership.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint.
* 
* Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
* 
* To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
* 
* > [!NOTE]
* > When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
*/
readonly "teamsRemoveMembershipForUserLegacy": (teamId: string, username: string, options?: typeof TeamsRemoveMembershipForUserLegacyParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "teamsListProjectsLegacy": (teamId: string, options?: typeof TeamsListProjectsLegacyParams.Encoded | undefined) => Effect.Effect<typeof TeamsListProjectsLegacy200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "teamsCheckPermissionsForProjectLegacy": (teamId: string, projectId: string, options?: typeof TeamsCheckPermissionsForProjectLegacyParams.Encoded | undefined) => Effect.Effect<typeof TeamProject.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "teamsAddOrUpdateProjectPermissionsLegacy": (teamId: string, projectId: string, options: { readonly params?: typeof TeamsAddOrUpdateProjectPermissionsLegacyParams.Encoded | undefined; readonly payload: typeof TeamsAddOrUpdateProjectPermissionsLegacyRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"TeamsAddOrUpdateProjectPermissionsLegacy403", typeof TeamsAddOrUpdateProjectPermissionsLegacy403.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "teamsRemoveProjectLegacy": (teamId: string, projectId: string, options?: typeof TeamsRemoveProjectLegacyParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/teams/teams#list-team-repositories) endpoint.
*/
readonly "teamsListReposLegacy": (teamId: string, options?: typeof TeamsListReposLegacyParams.Encoded | undefined) => Effect.Effect<typeof TeamsListReposLegacy200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-repository) endpoint.
* 
* > [!NOTE]
* > Repositories inherited through a parent team will also be checked.
* 
* You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types/) via the `Accept` header:
*/
readonly "teamsCheckPermissionsForRepoLegacy": (teamId: string, owner: string, repo: string, options?: typeof TeamsCheckPermissionsForRepoLegacyParams.Encoded | undefined) => Effect.Effect<typeof TeamRepository.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-repository-permissions)" endpoint.
* 
* To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
* 
* Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
readonly "teamsAddOrUpdateRepoPermissionsLegacy": (teamId: string, owner: string, repo: string, options: { readonly params?: typeof TeamsAddOrUpdateRepoPermissionsLegacyParams.Encoded | undefined; readonly payload: typeof TeamsAddOrUpdateRepoPermissionsLegacyRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/teams/teams#remove-a-repository-from-a-team) endpoint.
* 
* If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
*/
readonly "teamsRemoveRepoLegacy": (teamId: string, owner: string, repo: string, options?: typeof TeamsRemoveRepoLegacyParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* > [!WARNING]
* > **Endpoint closing down notice:** This endpoint route is closing down and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/teams/teams#list-child-teams) endpoint.
*/
readonly "teamsListChildLegacy": (teamId: string, options?: typeof TeamsListChildLegacyParams.Encoded | undefined) => Effect.Effect<typeof TeamsListChildLegacy200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* OAuth app tokens and personal access tokens (classic) need the `user` scope in order for the response to include private profile information.
*/
readonly "usersGetAuthenticated": () => Effect.Effect<typeof UsersGetAuthenticated200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
*/
readonly "usersUpdateAuthenticated": (options: typeof UsersUpdateAuthenticatedRequest.Encoded) => Effect.Effect<typeof PrivateUser.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* List the users you've blocked on your personal account.
*/
readonly "usersListBlockedByAuthenticatedUser": (options?: typeof UsersListBlockedByAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof UsersListBlockedByAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Returns a 204 if the given user is blocked by the authenticated user. Returns a 404 if the given user is not blocked by the authenticated user, or if the given user account has been identified as spam by GitHub.
*/
readonly "usersCheckBlocked": (username: string, options?: typeof UsersCheckBlockedParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Blocks the given user and returns a 204. If the authenticated user cannot block the given user a 422 is returned.
*/
readonly "usersBlock": (username: string, options?: typeof UsersBlockParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Unblocks the given user and returns a 204.
*/
readonly "usersUnblock": (username: string, options?: typeof UsersUnblockParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists the authenticated user's codespaces.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesListForAuthenticatedUser": (options?: typeof CodespacesListForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof CodespacesListForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Creates a new codespace, owned by the authenticated user.
* 
* This endpoint requires either a `repository_id` OR a `pull_request` but not both.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesCreateForAuthenticatedUser": (options: typeof CodespacesCreateForAuthenticatedUserRequest.Encoded) => Effect.Effect<typeof Codespace.Type | typeof Codespace.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"CodespacesCreateForAuthenticatedUser503", typeof CodespacesCreateForAuthenticatedUser503.Type>>
  /**
* Lists all development environment secrets available for a user's codespaces without revealing their
* encrypted values.
* 
* The authenticated user must have Codespaces access to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
*/
readonly "codespacesListSecretsForAuthenticatedUser": (options?: typeof CodespacesListSecretsForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof CodespacesListSecretsForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.
* 
* The authenticated user must have Codespaces access to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
*/
readonly "codespacesGetPublicKeyForAuthenticatedUser": () => Effect.Effect<typeof CodespacesUserPublicKey.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a development environment secret available to a user's codespaces without revealing its encrypted value.
* 
* The authenticated user must have Codespaces access to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
*/
readonly "codespacesGetSecretForAuthenticatedUser": (secretName: string, options?: typeof CodespacesGetSecretForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof CodespacesSecret.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Creates or updates a development environment secret for a user's codespace with an encrypted value. Encrypt your secret using
* [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
* 
* The authenticated user must have Codespaces access to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
*/
readonly "codespacesCreateOrUpdateSecretForAuthenticatedUser": (secretName: string, options: { readonly params?: typeof CodespacesCreateOrUpdateSecretForAuthenticatedUserParams.Encoded | undefined; readonly payload: typeof CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest.Encoded }) => Effect.Effect<typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Deletes a development environment secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.
* 
* The authenticated user must have Codespaces access to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
*/
readonly "codespacesDeleteSecretForAuthenticatedUser": (secretName: string, options?: typeof CodespacesDeleteSecretForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* List the repositories that have been granted the ability to use a user's development environment secret.
* 
* The authenticated user must have Codespaces access to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
*/
readonly "codespacesListRepositoriesForSecretForAuthenticatedUser": (secretName: string, options?: typeof CodespacesListRepositoriesForSecretForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof CodespacesListRepositoriesForSecretForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Select the repositories that will use a user's development environment secret.
* 
* The authenticated user must have Codespaces access to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
*/
readonly "codespacesSetRepositoriesForSecretForAuthenticatedUser": (secretName: string, options: { readonly params?: typeof CodespacesSetRepositoriesForSecretForAuthenticatedUserParams.Encoded | undefined; readonly payload: typeof CodespacesSetRepositoriesForSecretForAuthenticatedUserRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Adds a repository to the selected repositories for a user's development environment secret.
* 
* The authenticated user must have Codespaces access to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
*/
readonly "codespacesAddRepositoryForSecretForAuthenticatedUser": (secretName: string, repositoryId: string, options?: typeof CodespacesAddRepositoryForSecretForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Removes a repository from the selected repositories for a user's development environment secret.
* 
* The authenticated user must have Codespaces access to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
*/
readonly "codespacesRemoveRepositoryForSecretForAuthenticatedUser": (secretName: string, repositoryId: string, options?: typeof CodespacesRemoveRepositoryForSecretForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets information about a user's codespace.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesGetForAuthenticatedUser": (codespaceName: string, options?: typeof CodespacesGetForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof Codespace.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Deletes a user's codespace.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesDeleteForAuthenticatedUser": (codespaceName: string, options?: typeof CodespacesDeleteForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof CodespacesDeleteForAuthenticatedUser202.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.
* 
* If you specify a new machine type it will be applied the next time your codespace is started.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesUpdateForAuthenticatedUser": (codespaceName: string, options: { readonly params?: typeof CodespacesUpdateForAuthenticatedUserParams.Encoded | undefined; readonly payload: typeof CodespacesUpdateForAuthenticatedUserRequest.Encoded }) => Effect.Effect<typeof Codespace.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.
* 
* If changes cannot be pushed to the codespace's repository, they will be pushed to a new or previously-existing fork instead.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesExportForAuthenticatedUser": (codespaceName: string, options?: typeof CodespacesExportForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof CodespaceExportDetails.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets information about an export of a codespace.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesGetExportDetailsForAuthenticatedUser": (codespaceName: string, exportId: string, options?: typeof CodespacesGetExportDetailsForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof CodespaceExportDetails.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List the machine types a codespace can transition to use.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesCodespaceMachinesForAuthenticatedUser": (codespaceName: string, options?: typeof CodespacesCodespaceMachinesForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof CodespacesCodespaceMachinesForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.
* 
* The codespace's token is granted write permissions to the repository, allowing the user to push their changes.
* 
* This will fail for a codespace that is already published, meaning it has an associated repository.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesPublishForAuthenticatedUser": (codespaceName: string, options: { readonly params?: typeof CodespacesPublishForAuthenticatedUserParams.Encoded | undefined; readonly payload: typeof CodespacesPublishForAuthenticatedUserRequest.Encoded }) => Effect.Effect<typeof CodespaceWithFullRepository.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Starts a user's codespace.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesStartForAuthenticatedUser": (codespaceName: string, options?: typeof CodespacesStartForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof Codespace.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Stops a user's codespace.
* 
* OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
*/
readonly "codespacesStopForAuthenticatedUser": (codespaceName: string, options?: typeof CodespacesStopForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof Codespace.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists all packages that are owned by the authenticated user within the user's namespace, and that encountered a conflict during a Docker migration.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
*/
readonly "packagesListDockerMigrationConflictingPackagesForAuthenticatedUser": () => Effect.Effect<typeof PackagesListDockerMigrationConflictingPackagesForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Sets the visibility for your primary email addresses.
*/
readonly "usersSetPrimaryEmailVisibilityForAuthenticatedUser": (options: typeof UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequest.Encoded) => Effect.Effect<typeof UsersSetPrimaryEmailVisibilityForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists all of your email addresses, and specifies which one is visible
* to the public.
* 
* OAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint.
*/
readonly "usersListEmailsForAuthenticatedUser": (options?: typeof UsersListEmailsForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof UsersListEmailsForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
*/
readonly "usersAddEmailForAuthenticatedUser": (options: typeof UsersAddEmailForAuthenticatedUserRequest.Encoded) => Effect.Effect<typeof UsersAddEmailForAuthenticatedUser201.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
*/
readonly "usersDeleteEmailForAuthenticatedUser": (options: typeof UsersDeleteEmailForAuthenticatedUserRequest.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists the people following the authenticated user.
*/
readonly "usersListFollowersForAuthenticatedUser": (options?: typeof UsersListFollowersForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof UsersListFollowersForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists the people who the authenticated user follows.
*/
readonly "usersListFollowedByAuthenticatedUser": (options?: typeof UsersListFollowedByAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof UsersListFollowedByAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Check if a person is followed by the authenticated user
*/
readonly "usersCheckPersonIsFollowedByAuthenticated": (username: string, options?: typeof UsersCheckPersonIsFollowedByAuthenticatedParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
* 
* OAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint.
*/
readonly "usersFollow": (username: string, options?: typeof UsersFollowParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* OAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint.
*/
readonly "usersUnfollow": (username: string, options?: typeof UsersUnfollowParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists the current user's GPG keys.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint.
*/
readonly "usersListGpgKeysForAuthenticatedUser": (options?: typeof UsersListGpgKeysForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof UsersListGpgKeysForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Adds a GPG key to the authenticated user's GitHub account.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:gpg_key` scope to use this endpoint.
*/
readonly "usersCreateGpgKeyForAuthenticatedUser": (options: typeof UsersCreateGpgKeyForAuthenticatedUserRequest.Encoded) => Effect.Effect<typeof GpgKey.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* View extended details for a single GPG key.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope to use this endpoint.
*/
readonly "usersGetGpgKeyForAuthenticatedUser": (gpgKeyId: string, options?: typeof UsersGetGpgKeyForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof GpgKey.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Removes a GPG key from the authenticated user's GitHub account.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:gpg_key` scope to use this endpoint.
*/
readonly "usersDeleteGpgKeyForAuthenticatedUser": (gpgKeyId: string, options?: typeof UsersDeleteGpgKeyForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
* 
* The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
* 
* You can find the permissions for the installation under the `permissions` key.
*/
readonly "appsListInstallationsForAuthenticatedUser": (options?: typeof AppsListInstallationsForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof AppsListInstallationsForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
* 
* The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
* 
* The access the user has to each repository is included in the hash under the `permissions` key.
*/
readonly "appsListInstallationReposForAuthenticatedUser": (installationId: string, options?: typeof AppsListInstallationReposForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof AppsListInstallationReposForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Add a single repository to an installation. The authenticated user must have admin access to the repository.    
* 
* This endpoint only works for PATs (classic) with the `repo` scope.
*/
readonly "appsAddRepoToInstallationForAuthenticatedUser": (installationId: string, repositoryId: string, options?: typeof AppsAddRepoToInstallationForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Remove a single repository from an installation. The authenticated user must have admin access to the repository. The installation must have the `repository_selection` of `selected`. 
* 
* This endpoint only works for PATs (classic) with the `repo` scope.
*/
readonly "appsRemoveRepoFromInstallationForAuthenticatedUser": (installationId: string, repositoryId: string, options?: typeof AppsRemoveRepoFromInstallationForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
*/
readonly "interactionsGetRestrictionsForAuthenticatedUser": () => Effect.Effect<typeof InteractionsGetRestrictionsForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
*/
readonly "interactionsSetRestrictionsForAuthenticatedUser": (options: typeof InteractionLimit.Encoded) => Effect.Effect<typeof InteractionLimitResponse.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Removes any interaction restrictions from your public repositories.
*/
readonly "interactionsRemoveRestrictionsForAuthenticatedUser": () => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* List issues across owned and member repositories assigned to the authenticated user.
* 
* > [!NOTE]
* > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
* - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
* - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
* - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
*/
readonly "issuesListForAuthenticatedUser": (options?: typeof IssuesListForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof IssuesListForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists the public SSH keys for the authenticated user's GitHub account.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint.
*/
readonly "usersListPublicSshKeysForAuthenticatedUser": (options?: typeof UsersListPublicSshKeysForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof UsersListPublicSshKeysForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Adds a public SSH key to the authenticated user's GitHub account.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:public_key` scope to use this endpoint.
*/
readonly "usersCreatePublicSshKeyForAuthenticatedUser": (options: typeof UsersCreatePublicSshKeyForAuthenticatedUserRequest.Encoded) => Effect.Effect<typeof Key.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* View extended details for a single public SSH key.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:public_key` scope to use this endpoint.
*/
readonly "usersGetPublicSshKeyForAuthenticatedUser": (keyId: string, options?: typeof UsersGetPublicSshKeyForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof Key.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Removes a public SSH key from the authenticated user's GitHub account.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:public_key` scope to use this endpoint.
*/
readonly "usersDeletePublicSshKeyForAuthenticatedUser": (keyId: string, options?: typeof UsersDeletePublicSshKeyForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists the active subscriptions for the authenticated user.
*/
readonly "appsListSubscriptionsForAuthenticatedUser": (options?: typeof AppsListSubscriptionsForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof AppsListSubscriptionsForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists the active subscriptions for the authenticated user.
*/
readonly "appsListSubscriptionsForAuthenticatedUserStubbed": (options?: typeof AppsListSubscriptionsForAuthenticatedUserStubbedParams.Encoded | undefined) => Effect.Effect<typeof AppsListSubscriptionsForAuthenticatedUserStubbed200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists all of the authenticated user's organization memberships.
*/
readonly "orgsListMembershipsForAuthenticatedUser": (options?: typeof OrgsListMembershipsForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof OrgsListMembershipsForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* If the authenticated user is an active or pending member of the organization, this endpoint will return the user's membership. If the authenticated user is not affiliated with the organization, a `404` is returned. This endpoint will return a `403` if the request is made by a GitHub App that is blocked by the organization.
*/
readonly "orgsGetMembershipForAuthenticatedUser": (org: string, options?: typeof OrgsGetMembershipForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof OrgMembership.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Converts the authenticated user to an active member of the organization, if that user has a pending invitation from the organization.
*/
readonly "orgsUpdateMembershipForAuthenticatedUser": (org: string, options: { readonly params?: typeof OrgsUpdateMembershipForAuthenticatedUserParams.Encoded | undefined; readonly payload: typeof OrgsUpdateMembershipForAuthenticatedUserRequest.Encoded }) => Effect.Effect<typeof OrgMembership.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists all migrations a user has started.
*/
readonly "migrationsListForAuthenticatedUser": (options?: typeof MigrationsListForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof MigrationsListForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Initiates the generation of a user migration archive.
*/
readonly "migrationsStartForAuthenticatedUser": (options: typeof MigrationsStartForAuthenticatedUserRequest.Encoded) => Effect.Effect<typeof Migration.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
* 
* *   `pending` - the migration hasn't started yet.
* *   `exporting` - the migration is in progress.
* *   `exported` - the migration finished successfully.
* *   `failed` - the migration failed.
* 
* Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).
*/
readonly "migrationsGetStatusForAuthenticatedUser": (migrationId: string, options?: typeof MigrationsGetStatusForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof Migration.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
* 
* *   attachments
* *   bases
* *   commit\_comments
* *   issue\_comments
* *   issue\_events
* *   issues
* *   milestones
* *   organizations
* *   projects
* *   protected\_branches
* *   pull\_request\_reviews
* *   pull\_requests
* *   releases
* *   repositories
* *   review\_comments
* *   schema
* *   users
* 
* The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
*/
readonly "migrationsGetArchiveForAuthenticatedUser": (migrationId: string, options?: typeof MigrationsGetArchiveForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
*/
readonly "migrationsDeleteArchiveForAuthenticatedUser": (migrationId: string, options?: typeof MigrationsDeleteArchiveForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
*/
readonly "migrationsUnlockRepoForAuthenticatedUser": (migrationId: string, repoName: string, options?: typeof MigrationsUnlockRepoForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists all the repositories for this user migration.
*/
readonly "migrationsListReposForAuthenticatedUser": (migrationId: string, options?: typeof MigrationsListReposForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof MigrationsListReposForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List organizations for the authenticated user.
* 
* For OAuth app tokens and personal access tokens (classic), this endpoint only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope for OAuth app tokens and personal access tokens (classic). Requests with insufficient scope will receive a `403 Forbidden` response.
* 
* > [!NOTE]
* > Requests using a fine-grained access token will receive a `200 Success` response with an empty list.
*/
readonly "orgsListForAuthenticatedUser": (options?: typeof OrgsListForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof OrgsListForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists packages owned by the authenticated user within the user's namespace.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesListPackagesForAuthenticatedUser": (options: typeof PackagesListPackagesForAuthenticatedUserParams.Encoded) => Effect.Effect<typeof PackagesListPackagesForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a specific package for a package owned by the authenticated user.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesGetPackageForAuthenticatedUser": (packageType: string, packageName: string, options?: typeof PackagesGetPackageForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof Package.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesDeletePackageForAuthenticatedUser": (packageType: string, packageName: string, options?: typeof PackagesDeletePackageForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Restores a package owned by the authenticated user.
* 
* You can restore a deleted package under the following conditions:
*   - The package was deleted within the last 30 days.
*   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesRestorePackageForAuthenticatedUser": (packageType: string, packageName: string, options?: typeof PackagesRestorePackageForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists package versions for a package owned by the authenticated user.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser": (packageType: string, packageName: string, options?: typeof PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets a specific package version for a package owned by the authenticated user.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesGetPackageVersionForAuthenticatedUser": (packageType: string, packageName: string, packageVersionId: string, options?: typeof PackagesGetPackageVersionForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof PackageVersion.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
* 
* The authenticated user must have admin permissions in the organization to use this endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesDeletePackageVersionForAuthenticatedUser": (packageType: string, packageName: string, packageVersionId: string, options?: typeof PackagesDeletePackageVersionForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Restores a package version owned by the authenticated user.
* 
* You can restore a deleted package version under the following conditions:
*   - The package was deleted within the last 30 days.
*   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesRestorePackageVersionForAuthenticatedUser": (packageType: string, packageName: string, packageVersionId: string, options?: typeof PackagesRestorePackageVersionForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicCreateForAuthenticatedUser": (options: typeof ProjectsClassicCreateForAuthenticatedUserRequest.Encoded) => Effect.Effect<typeof Project.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationErrorSimple", typeof ValidationErrorSimple.Type>>
  /**
* Lists your publicly visible email address, which you can set with the
* [Set primary email visibility for the authenticated user](https://docs.github.com/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user)
* endpoint.
* 
* OAuth app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint.
*/
readonly "usersListPublicEmailsForAuthenticatedUser": (options?: typeof UsersListPublicEmailsForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof UsersListPublicEmailsForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
* 
* The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
*/
readonly "reposListForAuthenticatedUser": (options?: typeof ReposListForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof ReposListForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Creates a new repository for the authenticated user.
* 
* OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
*/
readonly "reposCreateForAuthenticatedUser": (options: typeof ReposCreateForAuthenticatedUserRequest.Encoded) => Effect.Effect<typeof FullRepository.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
*/
readonly "reposListInvitationsForAuthenticatedUser": (options?: typeof ReposListInvitationsForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof ReposListInvitationsForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Decline a repository invitation
*/
readonly "reposDeclineInvitationForAuthenticatedUser": (invitationId: string, options?: typeof ReposDeclineInvitationForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Accept a repository invitation
*/
readonly "reposAcceptInvitationForAuthenticatedUser": (invitationId: string, options?: typeof ReposAcceptInvitationForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists all of your social accounts.
*/
readonly "usersListSocialAccountsForAuthenticatedUser": (options?: typeof UsersListSocialAccountsForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof UsersListSocialAccountsForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Add one or more social accounts to the authenticated user's profile.
* 
* OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
*/
readonly "usersAddSocialAccountForAuthenticatedUser": (options: typeof UsersAddSocialAccountForAuthenticatedUserRequest.Encoded) => Effect.Effect<typeof UsersAddSocialAccountForAuthenticatedUser201.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Deletes one or more social accounts from the authenticated user's profile.
* 
* OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
*/
readonly "usersDeleteSocialAccountForAuthenticatedUser": (options: typeof UsersDeleteSocialAccountForAuthenticatedUserRequest.Encoded) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists the SSH signing keys for the authenticated user's GitHub account.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint.
*/
readonly "usersListSshSigningKeysForAuthenticatedUser": (options?: typeof UsersListSshSigningKeysForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof UsersListSshSigningKeysForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Creates an SSH signing key for the authenticated user's GitHub account.
* 
* OAuth app tokens and personal access tokens (classic) need the `write:ssh_signing_key` scope to use this endpoint.
*/
readonly "usersCreateSshSigningKeyForAuthenticatedUser": (options: typeof UsersCreateSshSigningKeyForAuthenticatedUserRequest.Encoded) => Effect.Effect<typeof SshSigningKey.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Gets extended details for an SSH signing key.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key` scope to use this endpoint.
*/
readonly "usersGetSshSigningKeyForAuthenticatedUser": (sshSigningKeyId: string, options?: typeof UsersGetSshSigningKeyForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof SshSigningKey.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Deletes an SSH signing key from the authenticated user's GitHub account.
* 
* OAuth app tokens and personal access tokens (classic) need the `admin:ssh_signing_key` scope to use this endpoint.
*/
readonly "usersDeleteSshSigningKeyForAuthenticatedUser": (sshSigningKeyId: string, options?: typeof UsersDeleteSshSigningKeyForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists repositories the authenticated user has starred.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
*/
readonly "activityListReposStarredByAuthenticatedUser": (options?: typeof ActivityListReposStarredByAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof ActivityListReposStarredByAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Whether the authenticated user has starred the repository.
*/
readonly "activityCheckRepoIsStarredByAuthenticatedUser": (owner: string, repo: string, options?: typeof ActivityCheckRepoIsStarredByAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
*/
readonly "activityStarRepoForAuthenticatedUser": (owner: string, repo: string, options?: typeof ActivityStarRepoForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Unstar a repository that the authenticated user has previously starred.
*/
readonly "activityUnstarRepoForAuthenticatedUser": (owner: string, repo: string, options?: typeof ActivityUnstarRepoForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists repositories the authenticated user is watching.
*/
readonly "activityListWatchedReposForAuthenticatedUser": (options?: typeof ActivityListWatchedReposForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof ActivityListWatchedReposForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List all of the teams across all of the organizations to which the authenticated
* user belongs.
* 
* OAuth app tokens and personal access tokens (classic) need the `user`, `repo`, or `read:org` scope to use this endpoint.
* 
* When using a fine-grained personal access token, the resource owner of the token must be a single organization, and the response will only include the teams from that organization.
*/
readonly "teamsListForAuthenticatedUser": (options?: typeof TeamsListForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof TeamsListForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Provides publicly available information about someone with a GitHub account. This method takes their durable user `ID` instead of their `login`, which can change over time.
* 
* If you are requesting information about an [Enterprise Managed User](https://docs.github.com/enterprise-cloud@latest/admin/managing-iam/understanding-iam-for-enterprises/about-enterprise-managed-users), or a GitHub App bot that is installed in an organization that uses Enterprise Managed Users, your requests must be authenticated as a user or GitHub App that has access to the organization to view that account's information. If you are not authorized, the request will return a `404 Not Found` status.
* 
* The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be public which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).
* 
* The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see [Emails API](https://docs.github.com/rest/users/emails).
*/
readonly "usersGetById": (accountId: string, options?: typeof UsersGetByIdParams.Encoded | undefined) => Effect.Effect<typeof UsersGetById200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
* 
* Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of users.
*/
readonly "usersList": (options?: typeof UsersListParams.Encoded | undefined) => Effect.Effect<typeof UsersList200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Provides publicly available information about someone with a GitHub account.
* 
* If you are requesting information about an [Enterprise Managed User](https://docs.github.com/enterprise-cloud@latest/admin/managing-iam/understanding-iam-for-enterprises/about-enterprise-managed-users), or a GitHub App bot that is installed in an organization that uses Enterprise Managed Users, your requests must be authenticated as a user or GitHub App that has access to the organization to view that account's information. If you are not authorized, the request will return a `404 Not Found` status.
* 
* The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be public which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).
* 
* The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see [Emails API](https://docs.github.com/rest/users/emails).
*/
readonly "usersGetByUsername": (username: string, options?: typeof UsersGetByUsernameParams.Encoded | undefined) => Effect.Effect<typeof UsersGetByUsername200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List a collection of artifact attestations associated with any entry in a list of subject digests owned by a user.
* 
* The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.
* 
* **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
*/
readonly "usersListAttestationsBulk": (username: string, options: { readonly params?: typeof UsersListAttestationsBulkParams.Encoded | undefined; readonly payload: typeof UsersListAttestationsBulkRequest.Encoded }) => Effect.Effect<typeof UsersListAttestationsBulk200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Delete artifact attestations in bulk by either subject digests or unique ID.
*/
readonly "usersDeleteAttestationsBulk": (username: string, options: { readonly params?: typeof UsersDeleteAttestationsBulkParams.Encoded | undefined; readonly payload: typeof UsersDeleteAttestationsBulkRequest.Encoded }) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Delete an artifact attestation by subject digest.
*/
readonly "usersDeleteAttestationsBySubjectDigest": (username: string, subjectDigest: string, options?: typeof UsersDeleteAttestationsBySubjectDigestParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Delete an artifact attestation by unique ID that is associated with a repository owned by a user.
*/
readonly "usersDeleteAttestationsById": (username: string, attestationId: string, options?: typeof UsersDeleteAttestationsByIdParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* List a collection of artifact attestations with a given subject digest that are associated with repositories owned by a user.
* 
* The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.
* 
* **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
*/
readonly "usersListAttestations": (username: string, subjectDigest: string, options?: typeof UsersListAttestationsParams.Encoded | undefined) => Effect.Effect<typeof UsersListAttestations200.Type | typeof EmptyObject.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists all packages that are in a specific user's namespace, that the requesting user has access to, and that encountered a conflict during Docker migration.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint.
*/
readonly "packagesListDockerMigrationConflictingPackagesForUser": (username: string, options?: typeof PackagesListDockerMigrationConflictingPackagesForUserParams.Encoded | undefined) => Effect.Effect<typeof PackagesListDockerMigrationConflictingPackagesForUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events. _Optional_: use the fine-grained token with following permission set to view private events: "Events" user permissions (read).
* 
* > [!NOTE]
* > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
*/
readonly "activityListEventsForAuthenticatedUser": (username: string, options?: typeof ActivityListEventsForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof ActivityListEventsForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* This is the user's organization dashboard. You must be authenticated as the user to view this.
* 
* > [!NOTE]
* > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
*/
readonly "activityListOrgEventsForAuthenticatedUser": (username: string, org: string, options?: typeof ActivityListOrgEventsForAuthenticatedUserParams.Encoded | undefined) => Effect.Effect<typeof ActivityListOrgEventsForAuthenticatedUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!NOTE]
* > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
*/
readonly "activityListPublicEventsForUser": (username: string, options?: typeof ActivityListPublicEventsForUserParams.Encoded | undefined) => Effect.Effect<typeof ActivityListPublicEventsForUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists the people following the specified user.
*/
readonly "usersListFollowersForUser": (username: string, options?: typeof UsersListFollowersForUserParams.Encoded | undefined) => Effect.Effect<typeof UsersListFollowersForUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists the people who the specified user follows.
*/
readonly "usersListFollowingForUser": (username: string, options?: typeof UsersListFollowingForUserParams.Encoded | undefined) => Effect.Effect<typeof UsersListFollowingForUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Check if a user follows another user
*/
readonly "usersCheckFollowingForUser": (username: string, targetUser: string, options?: typeof UsersCheckFollowingForUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
  /**
* Lists public gists for the specified user:
*/
readonly "gistsListForUser": (username: string, options?: typeof GistsListForUserParams.Encoded | undefined) => Effect.Effect<typeof GistsListForUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Lists the GPG keys for a user. This information is accessible by anyone.
*/
readonly "usersListGpgKeysForUser": (username: string, options?: typeof UsersListGpgKeysForUserParams.Encoded | undefined) => Effect.Effect<typeof UsersListGpgKeysForUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Provides hovercard information. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
* 
*   The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository, you would use a `subject_type` value of `repository` and a `subject_id` value of `1300192` (the ID of the `Spoon-Knife` repository).
* 
* OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
*/
readonly "usersGetContextForUser": (username: string, options?: typeof UsersGetContextForUserParams.Encoded | undefined) => Effect.Effect<typeof Hovercard.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* Enables an authenticated GitHub App to find the user’s installation information.
* 
* You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
*/
readonly "appsGetUserInstallation": (username: string, options?: typeof AppsGetUserInstallationParams.Encoded | undefined) => Effect.Effect<typeof Installation.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
*/
readonly "usersListPublicKeysForUser": (username: string, options?: typeof UsersListPublicKeysForUserParams.Encoded | undefined) => Effect.Effect<typeof UsersListPublicKeysForUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
* 
* This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user) API instead.
*/
readonly "orgsListForUser": (username: string, options?: typeof OrgsListForUserParams.Encoded | undefined) => Effect.Effect<typeof OrgsListForUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists all packages in a user's namespace for which the requesting user has access.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesListPackagesForUser": (username: string, options: typeof PackagesListPackagesForUserParams.Encoded) => Effect.Effect<typeof PackagesListPackagesForUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets a specific package metadata for a public package owned by a user.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesGetPackageForUser": (username: string, packageType: string, packageName: string, options?: typeof PackagesGetPackageForUserParams.Encoded | undefined) => Effect.Effect<typeof Package.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
* 
* If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesDeletePackageForUser": (username: string, packageType: string, packageName: string, options?: typeof PackagesDeletePackageForUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Restores an entire package for a user.
* 
* You can restore a deleted package under the following conditions:
*   - The package was deleted within the last 30 days.
*   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
* 
* If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesRestorePackageForUser": (username: string, packageType: string, packageName: string, options?: typeof PackagesRestorePackageForUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Lists package versions for a public package owned by a specified user.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesGetAllPackageVersionsForPackageOwnedByUser": (username: string, packageType: string, packageName: string, options?: typeof PackagesGetAllPackageVersionsForPackageOwnedByUserParams.Encoded | undefined) => Effect.Effect<typeof PackagesGetAllPackageVersionsForPackageOwnedByUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Gets a specific package version for a public package owned by a specified user.
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesGetPackageVersionForUser": (username: string, packageType: string, packageName: string, packageVersionId: string, options?: typeof PackagesGetPackageVersionForUserParams.Encoded | undefined) => Effect.Effect<typeof PackageVersion.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
* 
* If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesDeletePackageVersionForUser": (username: string, packageType: string, packageName: string, packageVersionId: string, options?: typeof PackagesDeletePackageVersionForUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Restores a specific package version for a user.
* 
* You can restore a deleted package under the following conditions:
*   - The package was deleted within the last 30 days.
*   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
* 
* If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this endpoint. For more information, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
*/
readonly "packagesRestorePackageVersionForUser": (username: string, packageType: string, packageName: string, packageVersionId: string, options?: typeof PackagesRestorePackageVersionForUserParams.Encoded | undefined) => Effect.Effect<void, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* > [!WARNING]
* > **Closing down notice:** Projects (classic) is being deprecated in favor of the new Projects experience.
* > See the [changelog](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) for more information.
*/
readonly "projectsClassicListForUser": (username: string, options?: typeof ProjectsClassicListForUserParams.Encoded | undefined) => Effect.Effect<typeof ProjectsClassicListForUser200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"ValidationError", typeof ValidationError.Type>>
  /**
* These are events that you've received by watching repositories and following users. If you are authenticated as the
* given user, you will see private events. Otherwise, you'll only see public events.
* 
* > [!NOTE]
* > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
*/
readonly "activityListReceivedEventsForUser": (username: string, options?: typeof ActivityListReceivedEventsForUserParams.Encoded | undefined) => Effect.Effect<typeof ActivityListReceivedEventsForUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* > [!NOTE]
* > This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
*/
readonly "activityListReceivedPublicEventsForUser": (username: string, options?: typeof ActivityListReceivedPublicEventsForUserParams.Encoded | undefined) => Effect.Effect<typeof ActivityListReceivedPublicEventsForUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists public repositories for the specified user.
*/
readonly "reposListForUser": (username: string, options?: typeof ReposListForUserParams.Encoded | undefined) => Effect.Effect<typeof ReposListForUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets the summary of the free and paid GitHub Actions minutes used.
* 
* Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
* 
* OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
*/
readonly "billingGetGithubActionsBillingUser": (username: string, options?: typeof BillingGetGithubActionsBillingUserParams.Encoded | undefined) => Effect.Effect<typeof ActionsBillingUsage.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets the free and paid storage used for GitHub Packages in gigabytes.
* 
* Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
*/
readonly "billingGetGithubPackagesBillingUser": (username: string, options?: typeof BillingGetGithubPackagesBillingUserParams.Encoded | undefined) => Effect.Effect<typeof PackagesBillingUsage.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
* 
* Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
* 
* OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
*/
readonly "billingGetSharedStorageBillingUser": (username: string, options?: typeof BillingGetSharedStorageBillingUserParams.Encoded | undefined) => Effect.Effect<typeof CombinedBillingUsage.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Gets a report of the total usage for a user.
* 
* **Note:** This endpoint is only available to users with access to the enhanced billing platform.
*/
readonly "billingGetGithubBillingUsageReportUser": (username: string, options?: typeof BillingGetGithubBillingUsageReportUserParams.Encoded | undefined) => Effect.Effect<typeof BillingUsageReportUser.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BasicError", typeof BasicError.Type> | ClientError<"BillingGetGithubBillingUsageReportUser503", typeof BillingGetGithubBillingUsageReportUser503.Type>>
  /**
* Lists social media accounts for a user. This endpoint is accessible by anyone.
*/
readonly "usersListSocialAccountsForUser": (username: string, options?: typeof UsersListSocialAccountsForUserParams.Encoded | undefined) => Effect.Effect<typeof UsersListSocialAccountsForUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists the SSH signing keys for a user. This operation is accessible by anyone.
*/
readonly "usersListSshSigningKeysForUser": (username: string, options?: typeof UsersListSshSigningKeysForUserParams.Encoded | undefined) => Effect.Effect<typeof UsersListSshSigningKeysForUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists repositories a user has starred.
* 
* This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
* 
* - **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
*/
readonly "activityListReposStarredByUser": (username: string, options?: typeof ActivityListReposStarredByUserParams.Encoded | undefined) => Effect.Effect<typeof ActivityListReposStarredByUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Lists repositories a user is watching.
*/
readonly "activityListReposWatchedByUser": (username: string, options?: typeof ActivityListReposWatchedByUserParams.Encoded | undefined) => Effect.Effect<typeof ActivityListReposWatchedByUser200.Type, HttpClientError.HttpClientError | ParseError>
  /**
* Get all supported GitHub API versions.
*/
readonly "metaGetAllVersions": () => Effect.Effect<typeof MetaGetAllVersions200.Type, HttpClientError.HttpClientError | ParseError | ClientError<"BasicError", typeof BasicError.Type>>
  /**
* Get a random sentence from the Zen of GitHub
*/
readonly "metaGetZen": () => Effect.Effect<void, HttpClientError.HttpClientError | ParseError>
}

export interface ClientError<Tag extends string, E> {
  readonly _tag: Tag
  readonly request: HttpClientRequest.HttpClientRequest
  readonly response: HttpClientResponse.HttpClientResponse
  readonly cause: E
}

class ClientErrorImpl extends Data.Error<{
  _tag: string
  cause: any
  request: HttpClientRequest.HttpClientRequest
  response: HttpClientResponse.HttpClientResponse
}> {}

export const ClientError = <Tag extends string, E>(
  tag: Tag,
  cause: E,
  response: HttpClientResponse.HttpClientResponse,
): ClientError<Tag, E> =>
  new ClientErrorImpl({
    _tag: tag,
    cause,
    response,
    request: response.request,
  }) as any

  make().activityListReposStarredByAuthenticatedUser({})